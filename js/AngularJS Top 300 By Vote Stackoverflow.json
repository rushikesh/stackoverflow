[{"t":"Service vs provider vs factory","l":"http://stackoverflow.com/questions/15666048/service-vs-provider-vs-factory","q":"\n\n<p>What are the differences between AngularJS module's <code>Service</code>, <code>Provider</code> and <code>Factory</code>?</p>\n    ","a":"\n<p>From the AngularJS mailing list I got <a href=\"https://groups.google.com/forum/#!msg/angular/56sdORWEoqg/HuZsOsMvKv4J\">an amazing thread</a> that explains service vs factory vs provider and their injection usage. Compiling the answers:</p>\n\n<h1>Services</h1>\n\n<p>Syntax: <code>module.service( 'serviceName', function );</code> <br>\nResult: When declaring serviceName as an injectable argument <strong>you will be provided with an instance of the function. In other words</strong> <code>new FunctionYouPassedToService()</code>.</p>\n\n<h1>Factories</h1>\n\n<p>Syntax: <code>module.factory( 'factoryName', function );</code> <br>\nResult: When declaring factoryName as an injectable argument you will be provided with <strong>the value that is returned by invoking the function reference passed to module.factory</strong>.</p>\n\n<h1>Providers</h1>\n\n<p>Syntax: <code>module.provider( 'providerName', function );</code> <br>\nResult: When declaring providerName as an injectable argument <strong>you will be provided with</strong> <code>ProviderFunction().$get()</code>. The constructor function is instantiated before the $get method is called - ProviderFunction is  the function reference passed to module.provider.</p>\n\n<p>Providers have the advantage that they can be configured during the module configuration phase.</p>\n\n<p>See <a href=\"http://jsbin.com/ohamub/1/edit\">here</a> for the provided code.</p>\n\n<p>Here's a great further explanation by Misko:</p>\n\n<pre><code>provide.value('a', 123);\n\nfunction Controller(a) {\n  expect(a).toEqual(123);\n}\n</code></pre>\n\n<p>In this case the injector simply returns the value as is. But what if you want to compute the value? Then use a factory</p>\n\n<pre><code>provide.factory('b', function(a) {\n  return a*2;\n});\n\nfunction Controller(b) {\n  expect(b).toEqual(246);\n}\n</code></pre>\n\n<p>So <code>factory</code> is a function which is responsible for creating the value. Notice that the factory function can ask for other dependencies.</p>\n\n<p>But what if you want to be more OO and have a class called Greeter?</p>\n\n<pre><code>function Greeter(a) {\n  this.greet = function() {\n    return 'Hello ' + a;\n  }\n}\n</code></pre>\n\n<p>Then to instantiate you would have to write</p>\n\n<pre><code>provide.factory('greeter', function(a) {\n  return new Greeter(a);\n});\n</code></pre>\n\n<p>Then we could ask for 'greeter' in controller like this</p>\n\n<pre><code>function Controller(greeter) {\n  expect(greeter instanceof Greeter).toBe(true);\n  expect(greeter.greet()).toEqual('Hello 123');\n}\n</code></pre>\n\n<p>But that is way too wordy. A shorter way to write this would be <code>provider.service('greeter', Greeter);</code></p>\n\n<p>But what if we wanted to configure the <code>Greeter</code> class before the injection? Then we could write</p>\n\n<pre><code>provide.provider('greeter2', function() {\n  var salutation = 'Hello';\n  this.setSalutation = function(s) {\n    salutation = s;\n  }\n\n  function Greeter(a) {\n    this.greet = function() {\n      return salutation + ' ' + a;\n    }\n  }\n\n  this.$get = function(a) {\n    return new Greeter(a);\n  };\n});\n</code></pre>\n\n<p>We can then do this:</p>\n\n<pre><code>angular.module('abc', []).config(function(greeter2Provider) {\n  greeter2Provider.setSalutation('Halo');\n});\n\nfunction Controller(greeter2) {\n  expect(greeter2.greet()).toEqual('Halo 123');\n}\n</code></pre>\n\n<p>As a side note, <code>service</code>, <code>factory</code>, and <code>value</code> are all derived from provider.</p>\n\n<pre><code>provider.service = function(name, Class) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.instantiate(Class);\n    };\n  });\n}\n\nprovider.factory = function(name, factory) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.invoke(factory);\n    };\n  });\n}\n\nprovider.value = function(name, value) {\n  provider.factory(name, function() {\n    return value;\n  });\n};\n</code></pre>\n    "},{"t":"Databinding in AngularJS","l":"http://stackoverflow.com/questions/9682092/databinding-in-angularjs","q":"\n\n<p>How does databinding work in the AngularJS framework?</p>\n\n<p>I haven't found technical details on <a href=\"http://angularjs.org\">their site</a>. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters? I found that there are <a href=\"http://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">JavaScript watchers</a> that may do this work. But they are not supported in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\">Internet&nbsp;Explorer&nbsp;7</a>. So how does AngularJS know that I changed for example:</p>\n\n<pre><code>myobject.myproperty=\"new value\";\n</code></pre>\n\n<p>and reflect this change on a view?</p>\n    ","a":"\n<p>AngularJS remembers the value and compares it to previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event. </p>\n\n<p>The <code>$apply()</code> method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls <code>$digest()</code>. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</p>\n\n<p>To contrast dirty-checking (AngularJS) vs change listeners (<a href=\"http://en.wikipedia.org/wiki/KnockoutJS\">KnockoutJS</a> and <a href=\"https://en.wikipedia.org/wiki/Backbone.js\">Backbone.js</a>): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</p>\n\n<h1>Issues with change listeners:</h1>\n\n<ul>\n<li>Syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course no proxies on old browsers. The bottom line is that dirty-checking allows you to do <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Java_Object\">POJO</a>, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</li>\n<li>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine grained.</li>\n<li>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</li>\n</ul>\n\n<h1>What about performance?</h1>\n\n<p>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</p>\n\n<p>Humans are:</p>\n\n<ul>\n<li><p><em>Slow</em> — Anything faster than 50&nbsp;ms is imperceptible to humans and thus can be considered as \"instant\".</p></li>\n<li><p><em>Limited</em> — You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</p></li>\n</ul>\n\n<p>So the real question is this: How many comparisons can you do on a browser in 50&nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: <a href=\"http://jsperf.com/angularjs-digest/6\">http://jsperf.com/angularjs-digest/6</a> which creates 10,000 watchers. On a modern browser this takes just under 6&nbsp;ms. On <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> it takes about 40&nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: the comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</p>\n\n<p>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</p>\n    "},{"t":"What is the best way to conditionally apply a class?","l":"http://stackoverflow.com/questions/7792652/what-is-the-best-way-to-conditionally-apply-a-class","q":"\n\n<p>Lets say you have an array that is rendered in a <code>ul</code> with an <code>li</code> for each element and a property on the controller called <code>selectedIndex</code>. What would be the best way to add a class to the <code>li</code> with the index <code>selectedIndex</code> in AngularJS?</p>\n\n<p>I am currently duplicating (by hand) the <code>li</code> code and adding the class to one of the <code>li</code> tags and using <code>ng-show</code> and <code>ng-hide</code> to show only one <code>li</code> per index.</p>\n    ","a":"\n<p>If you don't want to put CSS class names into Controller like I do, here is an old trick that I use since pre-v1 days. We can write an expression that evaluates directly to a class name <em>selected</em>, no custom directives are necessary:</p>\n\n<pre><code>ng:class=\"{true:'selected', false:''}[$index==selectedIndex]\"\n</code></pre>\n\n<p><em>Please note the old syntax with colon.</em> </p>\n\n<p>There is also a new better way of applying classes conditionally, like:</p>\n\n<pre><code>ng-class=\"{selected: $index==selectedIndex}\"\n</code></pre>\n\n<p>Angular now supports expressions that returns an object. Each property (name) of this object is now considered as a class name and is applied depending on its value.</p>\n\n<p>However these ways are not functionally equal. Here is an example:</p>\n\n<pre><code>ng-class=\"{admin:'enabled', moderator:'disabled', '':'hidden'}[user.role]\"\n</code></pre>\n\n<p>We could therefore reuse existing CSS classes by basically mapping a model property to a class name and at the same time kept CSS classes out of Controller code.</p>\n    "},{"t":"angular.service vs angular.factory","l":"http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory","q":"\n\n<p>I have seen both <a href=\"http://docs.angularjs.org/guide/dev_guide.services.creating_services\">angular.factory()</a> and <a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\">angular.service()</a> used to declare services; however, I <a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\">cannot find</a> <code>angular.service</code> anywhere in official documentation.</p>\n\n<p>What is the difference between the two methods? Which should be used for what (assuming they do different things)?</p>\n    ","a":"\n<pre><code>  angular.service('myService', myServiceFunction);\n  angular.factory('myFactory', myFactoryFunction);\n</code></pre>\n\n<hr>\n\n<p>I had trouble wrapping my head around this concept until I put it to myself this way:</p>\n\n<p><strong>Service</strong>: the <em>function</em> that you write will be <strong>new</strong>-ed:</p>\n\n<pre><code>  myInjectedService  &lt;----  new myServiceFunction()\n</code></pre>\n\n<p><strong>Factory</strong>: the <em>function</em> (constructor) that you write will be <strong>invoked</strong>:</p>\n\n<pre><code>  myInjectedFactory  &lt;---  myFactoryFunction()\n</code></pre>\n\n<p>What you do with that is up to you, but there are some useful patterns... </p>\n\n<h3>Such as writing a <em>service</em> function to expose a public API:</h3>\n\n<pre><code>function myServiceFunction() {\n  this.awesomeApi = function(optional) {\n    // calculate some stuff\n    return awesomeListOfValues;\n  }\n}\n---------------------------------------------------------------------------------\n// Injected in your controller\n$scope.awesome = myInjectedService.awesomeApi();\n</code></pre>\n\n<h3>Or using a <em>factory</em> function to expose a public API:</h3>\n\n<pre><code>function myFactoryFunction() {\n  var aPrivateVariable = \"yay\";\n\n  function hello() {\n    return \"hello mars \" + aPrivateVariable;\n  }\n\n  // expose a public API\n  return {\n    hello: hello\n  };\n}\n---------------------------------------------------------------------------------\n// Injected in your controller\n$scope.hello = myInjectedFactory.hello();\n</code></pre>\n\n<h3>Or using a <em>factory</em> function to return a constructor:</h3>\n\n<pre><code>function myFactoryFunction() {\n    return function() {\n        var a = 2;\n        this.a2 = function() {\n            return a*2;\n        };\n    };\n}\n---------------------------------------------------------------------------------\n// Injected in your controller\nvar myShinyNewObject = new myInjectedFactory();\n$scope.four = myShinyNewObject.a2();\n</code></pre>\n\n<hr>\n\n<h3>Which one to use?...</h3>\n\n<p>You can accomplish the same thing with both. However, in some cases the <em>factory</em> gives you a little bit more flexibility to create an injectable with a simpler syntax. That's because while myInjectedService must always be an object, myInjectedFactory can be an object, a function reference, or any value at all. For example, if you wrote a service to create a constructor (as in the last example above), it would have to be instantiated like so: </p>\n\n<pre><code>var myShinyNewObject = new myInjectedService.myFunction()\n</code></pre>\n\n<p>which is arguably less desirable than this:</p>\n\n<pre><code>var myShinyNewObject = new myInjectedFactory();\n</code></pre>\n\n<p>(But you should be wary about using this type of pattern in the first place because <em>new</em>-ing objects in your controllers creates hard-to-track dependencies that are difficult to mock for testing. Better to have a service manage a collection of objects for you than use <code>new()</code> wily-nilly.)</p>\n\n<hr>\n\n<h3>One more thing, they are all Singletons...</h3>\n\n<p>Also keep in mind that in both cases, angular is helping you manage a singleton. Regardless of where or how many times you inject your service or function, you will get the same reference to the same object or function. (With the exception of when a factory simply returns a value like a number or string. In that case, you will always get the same value, but not a reference.)</p>\n    "},{"t":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","l":"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs","q":"\n\n<p>The <a href=\"http://docs.angularjs.org/api/ng.%24rootScope.Scope\">API Reference Scope page</a> says:</p>\n\n<blockquote>\n  <p>A scope <em>can</em> inherit from a parent scope.</p>\n</blockquote>\n\n<p>The <a href=\"http://docs.angularjs.org/guide/scope\">Developer Guide Scope page</a> says:</p>\n\n<blockquote>\n  <p>A scope (prototypically) inherits properties from its parent scope.</p>\n</blockquote>\n\n<p>So, does a child scope always prototypically inherit from its parent scope?  Are there exceptions?  When it does inherit, is it always normal JavaScript prototypal inheritance?</p>\n    ","a":"\n<p><strong>Quick answer</strong>: <br>\nA child scope normally prototypically inherits from its parent scope, but not always.  One exception to this rule is a directive with <code>scope: { ... }</code> -- this creates an \"isolate\" scope that does not prototypically inherit.  This construct is often used when creating a \"reusable component\" directive.</p>\n\n<p>As for the nuances, scope inheritance is normally straightfoward... until you need <strong>2-way data binding</strong> (i.e., form elements, ng-model) in the child scope.  Ng-repeat, ng-switch, and ng-include can trip you up if you try to bind to a <strong>primitive</strong> (e.g., number, string, boolean) in the parent scope from inside the child scope.  It doesn't work the way most people expect it should work.  The child scope gets its own property that hides/shadows the parent property of the same name.  Your workarounds are</p>\n\n<ol>\n<li>define objects in the parent for your model, then reference a property of that object  in the child:  parentObj.someProp</li>\n<li>use $parent.parentScopeProperty (not always possible, but easier than 1. where possible)</li>\n<li>define a function on the parent scope, and call it from the child (not always possible)</li>\n</ol>\n\n<p></p><hr>\n<strong>L-o-n-g answer</strong>:<p></p>\n\n<h2>JavaScript Prototypal Inheritance</h2>\n\n<p><strong>Also placed on the AngularJS wiki:</strong> <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes\">https://github.com/angular/angular.js/wiki/Understanding-Scopes</a></p>\n\n<p>It is important to first have a solid understanding of prototypal inheritance, especially if you are coming from a server-side background and you are more failiar with class-ical inheritance.  So let's review that first.</p>\n\n<p>Suppose parentScope has properties aString, aNumber, anArray, anObject, and aFunction.  If childScope prototypically inherits from parentScope, we have:</p>\n\n<p><img src=\"http://i.stack.imgur.com/aTAGg.png\" alt=\"prototypal inheritance\"></p>\n\n<p>(Note that to save space, I show the <code>anArray</code> object as a single blue object with its three values, rather than an single blue object with three separate gray literals.)</p>\n\n<p>If we try to access a property defined on the parentScope from the child scope, JavaScript will first look in the child scope, not find the property, then look in the inherited scope, and find the property.  (If it didn't find the property in the parentScope, it would continue up the prototype chain... all the way up to the root scope). So, these are all true:</p>\n\n<pre><code>childScope.aString === 'parent string'\nchildScope.anArray[1] === 20\nchildScope.anObject.property1 === 'parent prop1'\nchildScope.aFunction() === 'parent output'\n</code></pre>\n\n<p>Suppose we then do this:</p>\n\n<pre><code>childScope.aString = 'child string'\n</code></pre>\n\n<p>The prototype chain is not consulted, and a new aString property is added to the childScope.  <strong>This new property hides/shadows the parentScope property with the same name.</strong>  This will become very important when we discuss ng-repeat and ng-include below.</p>\n\n<p><img src=\"http://i.stack.imgur.com/OyVPW.png\" alt=\"property hiding\"></p>\n\n<p>Suppose we then do this:</p>\n\n<pre><code>childScope.anArray[1] = '22'\nchildScope.anObject.property1 = 'child prop1'\n</code></pre>\n\n<p>The prototype chain is consulted because the objects (anArray and anObject) are not found in the childScope.  The objects are found in the parentScope, and the property values are updated on the original objects.  No new properties are added to the childScope;  no new objects are created.  (Note that in JavaScript arrays and functions are also objects.)</p>\n\n<p><img src=\"http://i.stack.imgur.com/2QceU.png\" alt=\"follow the prototype chain\"></p>\n\n<p>Suppose we then do this:</p>\n\n<pre><code>childScope.anArray = [100, 555]\nchildScope.anObject = { name: 'Mark', country: 'USA' }\n</code></pre>\n\n<p>The prototype chain is not consulted, and child scope gets two new object properties that hide/shadow the parentScope object properties with the same names.</p>\n\n<p><img src=\"http://i.stack.imgur.com/hKetH.png\" alt=\"more property hiding\"></p>\n\n<p>Takeaways:</p>\n\n<ul>\n<li>If we read childScope.propertyX, and childScope has propertyX, then the prototype chain is not consulted.</li>\n<li>If we set childScope.propertyX, the prototype chain is not consulted.</li>\n</ul>\n\n<p>One last scenario:</p>\n\n<pre><code>delete childScope.anArray\nchildScope.anArray[1] === 22  // true\n</code></pre>\n\n<p>We deleted the childScope property first, then when we try to access the property again, the prototype chain is consulted.</p>\n\n<p><img src=\"http://i.stack.imgur.com/56uoe.png\" alt=\"after removing a child property\"></p>\n\n<hr>\n\n<h2>Angular Scope Inheritance</h2>\n\n<p>The contenders:</p>\n\n<ul>\n<li>The following create new scopes, and inherit prototypically: ng-repeat, ng-include, ng-switch, ng-controller, directive with <code>scope: true</code>, directive with <code>transclude: true</code>.</li>\n<li>The following creates a new scope which does not inherit prototypically: directive with <code>scope: { ... }</code>.  This creates an \"isolate\" scope instead.</li>\n</ul>\n\n<p>Note, by default, directives do not create new scope -- i.e., the default is <code>scope: false</code>.</p>\n\n<h3>ng-include</h3>\n\n<p>Suppose we have in our controller:</p>\n\n<pre><code>$scope.myPrimitive = 50;\n$scope.myObject    = {aNumber: 11};\n</code></pre>\n\n<p>And in our HTML:</p>\n\n<pre><code>&lt;script type=\"text/ng-template\" id=\"/tpl1.html\"&gt;\n&lt;input ng-model=\"myPrimitive\"&gt;\n&lt;/script&gt;\n&lt;div ng-include src=\"'/tpl1.html'\"&gt;&lt;/div&gt;\n\n&lt;script type=\"text/ng-template\" id=\"/tpl2.html\"&gt;\n&lt;input ng-model=\"myObject.aNumber\"&gt;\n&lt;/script&gt;\n&lt;div ng-include src=\"'/tpl2.html'\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Each ng-include generates a new child scope, which prototypically inherits from the parent scope.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ziDfx.png\" alt=\"ng-include child scopes\"></p>\n\n<p>Typing (say, \"77\") into the first input textbox causes the child scope to get a new <code>myPrimitive</code> scope property that hides/shadows the parent scope property of the same name.  This is probably not what you want/expect.</p>\n\n<p><img src=\"http://i.stack.imgur.com/7l8dg.png\" alt=\"ng-include with a primitive\"></p>\n\n<p>Typing (say, \"99\") into the second input textbox does not result in a new child property.  Because tpl2.html binds the model to an object property, prototypal inheritance kicks in when the ngModel looks for object myObject -- it finds it in the parent scope.</p>\n\n<p><img src=\"http://i.imgur.com/ZqqloMS.png\" alt=\"ng-include with an object\"></p>\n\n<p>We can rewrite the first template to use $parent, if we don't want to change our model from a primitive to an object:</p>\n\n<pre><code>&lt;input ng-model=\"$parent.myPrimitive\"&gt;\n</code></pre>\n\n<p>Typing (say, \"22\") into this input textbox does not result in a new child property.  The model is now bound to a property of the parent scope (because $parent is a child scope property that references the parent scope).</p>\n\n<p><img src=\"http://i.stack.imgur.com/kd8pj.png\" alt=\"ng-include with $parent\"></p>\n\n<p>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail.  I normally don't show these scope properties in the diagrams.</p>\n\n<p>For scenarios where form elements are not involved, another solution is to define a function on the parent scope to modify the primitive.  Then ensure the child always calls this function, which will be available to the child scope due to prototypal inheritance. E.g.,</p>\n\n<pre><code>// in the parent scope\n$scope.setMyPrimitive = function(value) {\n     $scope.myPrimitive = value;\n}\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/mrajcok/jNxyE/\">sample fiddle</a> that uses this \"parent function\" approach.  (The fiddle was written as part of this answer: <a href=\"http://stackoverflow.com/a/14104318/215945\">http://stackoverflow.com/a/14104318/215945</a>.)</p>\n\n<p>See also <a href=\"http://stackoverflow.com/a/13782671/215945\">http://stackoverflow.com/a/13782671/215945</a> and <a href=\"https://github.com/angular/angular.js/issues/1267\">https://github.com/angular/angular.js/issues/1267</a>.</p>\n\n<h3>ng-switch</h3>\n\n<p>ng-switch scope inheritance works just like ng-include.  So if you need 2-way data binding to a primitive in the parent scope, use $parent, or change the model to be an object and then bind to a property of that object.  This will avoid child scope hiding/shadowing of parent scope properties.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/12405005/angularjs-bind-scope-of-a-switch-case/12414410\">AngularJS, bind scope of a switch-case?</a></p>\n\n<h3>ng-repeat</h3>\n\n<p>Ng-repeat works a little differently.  Suppose we have in our controller:</p>\n\n<pre><code>$scope.myArrayOfPrimitives = [ 11, 22 ];\n$scope.myArrayOfObjects    = [{num: 101}, {num: 202}]\n</code></pre>\n\n<p>And in our HTML:</p>\n\n<pre><code>&lt;ul&gt;&lt;li ng-repeat=\"num in myArrayOfPrimitives\"&gt;\n       &lt;input ng-model=\"num\"&gt;\n    &lt;/li&gt;\n&lt;ul&gt;\n&lt;ul&gt;&lt;li ng-repeat=\"obj in myArrayOfObjects\"&gt;\n       &lt;input ng-model=\"obj.num\"&gt;\n    &lt;/li&gt;\n&lt;ul&gt;\n</code></pre>\n\n<p>For each item/iteration, ng-repeat creates a new scope, which prototypically inherits from the parent scope, <strong>but it also assigns the item's value to a new property on the new child scope</strong>.  (The name of the new property is the loop variable's name.)  Here's what the Angular source code for ng-repeat actually is:</p>\n\n<pre><code>childScope = scope.$new();  // child scope prototypically inherits from parent scope\n...\nchildScope[valueIdent] = value;  // creates a new childScope property\n</code></pre>\n\n<p>If item is a primitive (as in myArrayOfPrimitives), essentially a copy of the value is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence child scope <code>num</code>) does <strong>not</strong> change the array the parent scope references.  So in the first ng-repeat above, each child scope gets a <code>num</code> property that is independent of the myArrayOfPrimitives array:</p>\n\n<p><img src=\"http://i.stack.imgur.com/nLoiW.png\" alt=\"ng-repeat with primitives\"></p>\n\n<p>This ng-repeat will not work (like you want/expect it to).  Typing into the textboxes changes the values in the gray boxes, which are only visible in the child scopes.  What we want is for the inputs to affect the myArrayOfPrimitives array, not a child scope primitive property.  To accomplish this, we need to change the model to be an array of objects.</p>\n\n<p>So, if item is an object, a reference to the original object (not a copy) is assigned to the new child scope property.  Changing the child scope property's value (i.e., using ng-model, hence <code>obj.num</code>) <strong>does</strong> change the object the parent scope references.  So in the second ng-repeat above, we have:</p>\n\n<p><img src=\"http://i.stack.imgur.com/QSjTJ.png\" alt=\"ng-repeat with objects\"></p>\n\n<p>(I colored one line gray just so that it is clear where it is going.)</p>\n\n<p>This works as expected.  Typing into the textboxes changes the values in the gray boxes, which are visible to both the child and parent scopes.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs\">Difficulty with ng-model, ng-repeat, and inputs</a> and \n<a href=\"http://stackoverflow.com/a/13782671/215945\">http://stackoverflow.com/a/13782671/215945</a></p>\n\n<h3>ng-controller</h3>\n\n<p>Nesting controllers using ng-controller results in normal prototypal inheritance, just like ng-include and ng-switch, so the same techniques apply.\nHowever, \"it is considered bad form for two controllers to share information via $scope inheritance\" -- <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/\">http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/</a>\nA service should be used to share data between controllers instead.</p>\n\n<p>(If you really want to share data via controllers scope inheritance, there is nothing you need to do.  The child scope will have access to all of the parent scope properties.\nSee also <a href=\"http://stackoverflow.com/questions/13825419/controller-load-order-differs-when-loading-or-navigating/13843771#13843771\">Controller load order differs when loading or navigating</a>)</p>\n\n<h3>directives</h3>\n\n<ol>\n<li>default (<code>scope: false</code>) - the directive does not create a new scope, so there is no inheritance here.  This is easy, but also dangerous because, e.g., a directive might think it is creating a new property on the scope, when in fact it is clobbering an existing property.  This is not a good choice for writing directives that are intended as reusable components.</li>\n<li><code>scope: true</code> - the directive creates a new child scope that prototypically inherits from the parent scope.  If more than one directive (on the same DOM element) requests a new scope, only one new child scope is created.  Since we have \"normal\" prototypal inheritance, this is like ng-include and ng-switch, so be wary of 2-way data binding to parent scope primitives, and child scope hiding/shadowing of parent scope properties.</li>\n<li><code>scope: { ... }</code> - the directive creates a new isolate/isolated scope.  It does not prototypically inherit.  This is usually your best choice when creating reusable components, since the directive cannot accidentally read or modify the parent scope.  However, such directives often need access to a few parent scope properties.  The object hash is used to set up two-way binding (using '=') or one-way binding (using '@') between the parent scope and the isolate scope.  There is also '&amp;' to bind to parent scope expressions.  So, these all create local scope properties that are derived from the parent scope.\nNote that attributes are used to help set up the binding -- you can't just reference parent scope property names in the object hash, you have to use an attribute.  E.g., this won't work if you want to bind to parent property <code>parentProp</code> in the isolated scope: <code>&lt;div my-directive&gt;</code> and <code>scope: { localProp: '@parentProp' }</code>.  An attribute must be used to specify each parent property that the directive wants to bind to: <code>&lt;div my-directive the-Parent-Prop=parentProp&gt;</code> and <code>scope: { localProp: '@theParentProp' }</code>.\n<br>Isolate scope's <code>__proto__</code> references Object.\nIsolate scope's $parent references the parent scope, so although it is isolated and doesn't inherit prototypically from the parent scope, it is still a child scope.\n<br>For the picture below we have\n<br>  <code>&lt;my-directive interpolated=\"{{parentProp1}}\" twowayBinding=\"parentProp2\"&gt;</code> and\n<br>  <code>scope: { interpolatedProp: '@interpolated', twowayBindingProp: '=twowayBinding' }</code>\n<br>Also, assume the directive does this in its linking function: <code>scope.someIsolateProp = \"I'm isolated\"</code>\n<br> <img src=\"http://i.stack.imgur.com/MUxS4.png\" alt=\"isolated scope\">\n<br>For more information on isolate scopes see <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/\">http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/</a></li>\n<li><code>transclude: true</code> - the directive creates a new \"transcluded\" child scope, which prototypically inherits from the parent scope.  The transcluded and the isolated scope (if any) are siblings -- the $parent property of each scope references the same parent scope.  When a transcluded and an isolate scope both exist, isolate scope property $$nextSibling will reference the transcluded scope.  I'm not aware of any nuances with the transcluded scope.\n<br>For the picture below, assume the same directive as above with this addition: <code>transclude: true</code>\n<br><img src=\"http://i.stack.imgur.com/fkWHA.png\" alt=\"transcluded scope\"></li>\n</ol>\n\n<p>This <a href=\"http://jsfiddle.net/mrajcok/7g3QM/\">fiddle</a> has a <code>showScope()</code> function that can be used to examine an isolate and transcluded scope.  See the instructions in the comments in the fiddle.</p>\n\n<hr>\n\n<h2>Summary</h2>\n\n<p>There are four types of scopes:</p>\n\n<ol>\n<li>normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with <code>scope: true</code></li>\n<li>normal prototypal scope inheritance with a copy/assignment -- ng-repeat.  Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.</li>\n<li>isolate scope -- directive with <code>scope: {...}</code>.  This one is not prototypal, but '=', '@', and '&amp;' provide a mechanism to access parent scope properties, via attributes.</li>\n<li>transcluded scope -- directive with <code>transclude: true</code>.  This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope.</li>\n</ol>\n\n<p>For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via properties $parent and $$childHead and $$childTail.</p>\n\n<p>Diagrams were generated with <a href=\"/questions/tagged/graphviz\" class=\"post-tag\" title=\"show questions tagged 'graphviz'\" rel=\"tag\">graphviz</a> \"*.dot\" files, which are on <a href=\"https://github.com/mrajcok/angularjs-prototypal-inheritance-diagrams\">github</a>. Tim Caswell's \"<a href=\"http://howtonode.org/object-graphs\">Learning JavaScript with Object Graphs</a>\" was the inspiration for using GraphViz for the diagrams. </p>\n    "},{"t":"Working with $scope.$emit and .$on","l":"http://stackoverflow.com/questions/14502006/working-with-scope-emit-and-on","q":"\n\n<p>How can I send my <code>$scope</code> object from one controller to another using <code>.$emit</code> and <code>.$on</code> methods?</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$emit('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$on('someEvent', function(mass) { console.log(mass); });\n}\n</code></pre>\n\n<p>It doesn't work the way I think it should. How do <code>$emit</code> and <code>$on</code> work?</p>\n    ","a":"\n<p>First of all, parent-child scope relation does matter. You have two possibilities to emit some event:</p>\n\n<ul>\n<li><code>$broadcast</code> -- dispatches the event downwards to all child scopes,</li>\n<li><code>$emit</code> -- dispatches the event upwards through the scope hierarchy.</li>\n</ul>\n\n<p>I don't know anything about your controllers (scopes) relation, but there are several options:</p>\n\n<ol>\n<li><p>If scope of <code>firstCtrl</code> is parent of the <code>secondCtrl</code> scope, your code should\nwork by replacing <code>$emit</code> by <code>$broadcast</code> in <code>firstCtrl</code>:</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$broadcast('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$on('someEvent', function(event, mass) { console.log(mass); });\n}\n</code></pre></li>\n<li><p>In case there is no parent-child relation between your scopes you\ncan inject <code>$rootScope</code> into the controller and broadcast the event\nto all child scopes (i.e. also <code>secondCtrl</code>).</p>\n\n<pre><code>function firstCtrl($rootScope)\n{\n    $rootScope.$broadcast('someEvent', [1,2,3]);\n}\n</code></pre></li>\n<li><p>Finally, when you need to dispatch the event from child controller\nto scopes upwards you can use <code>$scope.$emit</code>. If scope of <code>firstCtrl</code> is parent of the <code>secondCtrl</code> scope:</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$on('someEvent', function(event, data) { console.log(data); });\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$emit('someEvent', [1,2,3]);\n}\n</code></pre></li>\n</ol>\n    "},{"t":"How to access the angular $scope variable in browser's console?","l":"http://stackoverflow.com/questions/13743058/how-to-access-the-angular-scope-variable-in-browsers-console","q":"\n\n<p>I would like to access my <code>$scope</code> variable in Chrome's JS console. How do I do that? I can neither see <code>$scope</code> nor the name of my module <code>myapp</code> in the console as variables.</p>\n    ","a":"\n<p>Pick an element in the HTML panel of the developer tools and type this in the console</p>\n\n<pre><code>angular.element($0).scope() \n</code></pre>\n\n<p>In webkit <code>$0</code> is a reference to the selected DOM node in the elements tab, so by doing this you get the selected DOM node scope printed out in the console</p>\n\n<p><strong>Addons/Extensions</strong></p>\n\n<p>There are some very useful Chrome Extensions that you might want to checkout:</p>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk\">Batarang</a>. This has been around for a while.</p></li>\n<li><p><a href=\"http://ng-inspector.org/\">ng-inspector</a>. This is the newest one, and as the name suggests, it allows you to inspect your application's scopes.</p></li>\n</ul>\n\n<p><strong>Playing with JS Fiddle</strong></p>\n\n<p>When working with jsfiddle you can open the fiddle in <em>show</em> mode by adding <code>/show</code> at the end of the url. When running like this you have access to the <code>angular</code> global. You can try it here</p>\n\n<p><a href=\"http://jsfiddle.net/jaimem/Yatbt/show\">http://jsfiddle.net/jaimem/Yatbt/show</a></p>\n\n<p><strong>jQuery Lite</strong></p>\n\n<p>If you load jQuery before angular, <code>angular.element</code> can be passed a jQuery selector. So you could inspect the scope of a controller with</p>\n\n<pre><code>angular.element('[ng-controller=ctrl]').scope()\n</code></pre>\n\n<p>Of a button</p>\n\n<pre><code> angular.element('button:eq(1)').scope()\n</code></pre>\n\n<p>... and so on.</p>\n\n<p>You might actually want to use a global function to make it easier</p>\n\n<pre><code>window.SC = function(selector){\n    return angular.element(selector).scope();\n};\n</code></pre>\n\n<p>Now you could do this</p>\n\n<pre><code>SC('button:eq(10)')\nSC('button:eq(10)').row   // -&gt; value of scope.row\n</code></pre>\n\n<p>check here: <a href=\"http://jsfiddle.net/jaimem/DvRaR/1/show/\">http://jsfiddle.net/jaimem/DvRaR/1/show/</a></p>\n    "},{"t":"Using scope.$watch and scope.$apply","l":"http://stackoverflow.com/questions/15112584/using-scope-watch-and-scope-apply","q":"\n\n<p>I don't understand how to use <code>scope.$watch</code> and <code>scope.$apply</code>. The official documentation isn't helpful.</p>\n\n<p>What I don't understand specifically:</p>\n\n<ul>\n<li>Are they connected to the DOM? </li>\n<li>How can I update DOM changes to the model?</li>\n<li>What is the connection point between them?</li>\n</ul>\n\n<p>I <a href=\"http://css.dzone.com/articles/drag-and-drop-angularjs-using\">tried this tutorial</a>  but it takes the understanding of <code>$watch</code> and <code>$apply</code> for granted.</p>\n\n<p>What do <code>$apply</code> and <code>$watch</code> do, and how do I use them appropriately?</p>\n    ","a":"\n<p>You need to be aware about how Angular works in order to understand it. </p>\n\n<h2>Digest cycle and $scope</h2>\n\n<p>First and foremost, Angular defines a concept of a so called <strong>digest cycle</strong>. This cycle can be considered as a loop, during which Angular checks if there are any changes to all the variables <strong>watched</strong> by all the <code>$scopes</code>. So if you have <code>$scope.myVar</code> defined in your controller and this variable was <strong>marked for being watched</strong>, then you are implicitly telling Angular to monitor the changes on <code>myVar</code> in each iteration of the loop.</p>\n\n<p>A natural follow up question would be: is everything attached to <code>$scope</code> being watched?\nFortunately, no. If you would watch for changes to every object in your <code>$scope</code>, then quickly digest loop would take ages to evaluate and you would quickly run into performance issues. That is why Angular team gave us two ways of declaring some <code>$scope</code> variable as being watched (read below).</p>\n\n<h2>$watch helps to listen for $scope changes</h2>\n\n<p>There are two ways of declaring a <code>$scope</code> variable as being watched.</p>\n\n<ol>\n<li>By using it in your template via expression: <code>&lt;span&gt;{{myVar}}&lt;/span&gt;</code></li>\n<li>By adding it manually via <code>$watch</code> service</li>\n</ol>\n\n<p>Ad 1) \nThis is the most common scenario and I'm sure you've seen it before, but you didn't know that this has created a watch in the background. Yes it had! Using Angular directives (such as <code>ng-repeat</code>) can also create implicit watches.</p>\n\n<p>Ad 2) \nThis is how you create your own <strong>watches</strong>. <code>$watch</code> service helps you to run some code when some value attached to the <code>$scope</code> has changed. It is rarely used, but sometimes is helpful. For instance, if you want to run some code each time 'myVar' changes, you could do the following:</p>\n\n<pre><code>function MyController($scope) {\n\n   $scope.myVar = 1;\n\n   $scope.$watch('myVar', function() {\n       alert('hey, myVar has changed!');\n   });\n\n   $scope.buttonClicked = function() {\n      $scope.myVar = 2; // This will trigger $watch expression to kick in\n   };\n\n}\n</code></pre>\n\n<h2>$apply enables to integrate changes with the digest cycle</h2>\n\n<p>You can think of the <strong><code>$apply</code> function as of an integration mechanism</strong>. You see, each time you change some <strong>watched variable attached to the <code>$scope</code></strong> object directly, Angular will know that the change has happened. This is because Angular already knew to monitor those changes. So if it happens in code managed by the framework, the digest cycle will carry on.\nHowever, sometimes you want to <strong>change some value outside of the Angular world</strong> and see the changes propagate normally.\nConsider this - you have a <code>$scope.myVar</code> value which will be modified within a jQuery's <code>$.ajax()</code> handler. This will happen at some point in future. Angular can't wait for this to happen, since it hasn't been instructed to wait on jQuery. \nTo tackle this, <code>$apply</code> has been introduced. It lets you to start the digestion cycle explicitly. However, you should only use this to migrate some data to Angular (integration with other frameworks), but never use this method combined with regular Angular code, as Angular will throw an error then.</p>\n\n<h2>How all of this is related to DOM?</h2>\n\n<p>Well, you should really follow the tutorial again, now that you know all this. The digest cycle will make sure that the UI and the JS code stays synced, by evaluating every watcher attached to the all <code>$scope</code>s as long as nothing changes. If no more changes happen in the digest loop, then it's considered to be finished.\nYou can attach objects to the <code>$scope</code> object either explicitly in the Controller, or by declaring them in <code>{{expression}}</code> form directly in the view.</p>\n\n<p>Hope that helps to clarify some basic knowledge about all this.</p>\n\n<p>Further readings:</p>\n\n<ul>\n<li><a href=\"http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html\">http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html</a> (Awesome article!)</li>\n</ul>\n    "},{"t":"this vs $scope in AngularJS controllers","l":"http://stackoverflow.com/questions/11605917/this-vs-scope-in-angularjs-controllers","q":"\n\n<p>In the <a href=\"https://angularjs.org/#create-components\">\"Create Components\" section of AngularJS's homepage</a>, there is this example:</p>\n\n<pre><code>controller: function($scope, $element) {\n  var panes = $scope.panes = [];\n  $scope.select = function(pane) {\n    angular.forEach(panes, function(pane) {\n      pane.selected = false;\n    });\n    pane.selected = true;\n  }\n  this.addPane = function(pane) {\n    if (panes.length == 0) $scope.select(pane);\n    panes.push(pane);\n  }\n}\n</code></pre>\n\n<p>Notice how <code>select</code> method is added to <code>$scope</code>, but <code>addPane</code> method is added to <code>this</code>. If I change it to <code>$scope.addPane</code>, the code breaks.</p>\n\n<p>The docs say that there in fact is a difference but don't mention what the difference is:</p>\n\n<blockquote>\n  <p>Previous versions of Angular (pre 1.0 RC) allowed you to use <code>this</code> interchangeably with the <code>$scope</code> method, but this is no longer the case. Inside of methods defined on the scope <code>this</code> and <code>$scope</code> are interchangeable (angular sets <code>this</code> to <code>$scope</code>), but not otherwise inside your controller constructor.</p>\n</blockquote>\n\n<p>How does <code>this</code> and <code>$scope</code> work in AngularJS controllers?</p>\n    ","a":"\n<blockquote>\n  <p>\"How does 'this' and $scope work in AngularJS controllers?\"</p>\n</blockquote>\n\n<p><strong>Short answer</strong>:</p>\n\n<ul>\n<li><code>this</code>\n<ul>\n<li>When the controller constructor function is called, <code>this</code> is the controller.</li>\n<li>When a function defined on a $scope object is called, <code>this</code> is the \"scope in effect when the function was called\".  This may (or may not!) be the $scope that the function is defined on.  So, inside the function, <code>this</code> and $scope may <strong>not</strong> be the same.</li>\n</ul></li>\n<li>$scope\n<ul>\n<li>Every controller has an associated $scope object.</li>\n<li>A controller (constructor) function is responsible for setting model properties and functions/behavior on its associated $scope.</li>\n<li>Only methods defined on this $scope object (and parent scope objects, if prototypical inheritance is in play) are accessible from the HTML/view.  E.g., from ng-click, filters, etc.</li>\n</ul></li>\n</ul>\n\n<p><strong>Long answer</strong>:</p>\n\n<p>A controller function is a JavaScript constructor function.  When the constructor function executes (e.g., when a view loads), <code>this</code> (i.e., the \"function context\") is set to the controller object. So in the \"tabs\" controller constructor function, when the addPane function is created</p>\n\n<pre><code>this.addPane = function(pane) { ... }\n</code></pre>\n\n<p>it is created on the controller object, not on $scope.  Views cannot see the addPane function -- they only have access to functions defined on $scope.  In other words, in the HTML, this won't work: <code>&lt;a ng-click=\"addPane(newPane)\"&gt;won't work&lt;/a&gt;</code>.</p>\n\n<p>After the \"tabs\" controller constructor function executes, we have the following:</p>\n\n<p><img src=\"http://i.stack.imgur.com/PUMuU.png\" alt=\"after tabs controller constructor function\"></p>\n\n<p>The dashed black line indicates prototypal inheritance -- an isolate scope prototypically inherits from <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope\">Scope</a>.  (It does not prototypically inherit from the scope in effect where the directive was encountered in the HTML.)</p>\n\n<p>Now, the pane directive's link function wants to communicate with the tabs directive (which really means it needs to affect the tabs isolate $scope in some way).  Events could be used, but another mechanism is to have the pane directive <code>require</code> the tabs controller.  (There appears to be no mechanism for the pane directive to <code>require</code> the tabs $scope.)</p>\n\n<p>So, this begs the question: if we only have access to the tabs controller, how do we get access to the tabs isolate $scope (which is what we really want)?</p>\n\n<p>Well, the red dotted line is the answer.  The addPane() function's \"scope\" (I'm referring to JavaScript's function scope/closures here) gives the function access to the tabs isolate $scope.  I.e., addPane() has access to the \"tabs IsolateScope\" in the diagram above because of a closure that was created when addPane() was defined.  (If we instead defined addPane() on the tabs $scope object, the pane directive would not have access to this function, and hence it would have no way to communicate with the tabs $scope.)</p>\n\n<p>To answer the other part of your question: <code>how does $scope work in controllers?</code>:</p>\n\n<p>Within functions defined on $scope, <code>this</code> is set to \"the $scope in effect where/when the function was called\".  Suppose we have the following HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"ParentCtrl\"&gt;\n   &lt;a ng-click=\"logThisAndScope()\"&gt;log \"this\" and $scope&lt;/a&gt; - parent scope\n   &lt;div ng-controller=\"ChildCtrl\"&gt;\n      &lt;a ng-click=\"logThisAndScope()\"&gt;log \"this\" and $scope&lt;/a&gt; - child scope\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And the ParentCtrl has</p>\n\n<pre><code>$scope.logThisAndScope = function() {\n    console.log(this, $scope)\n}\n</code></pre>\n\n<p>Clicking the first link will show that <code>this</code> and scope are the same, since \"the scope in effect when the function was called\" is the scope associated with the ParentCtrl.</p>\n\n<p>Clicking the second link will reveal <code>this</code> and scope are <strong>not</strong> the same, since \"the scope in effect when the function was called\" is the scope associated with the ChildCtrl.  So here, <code>this</code> is set to ChildCtrl's $scope.  Inside the method, $scope is still the ParentCtrl's $scope.</p>\n\n<p><a href=\"http://jsfiddle.net/mrajcok/sbZw7/\">Fiddle</a></p>\n\n<p>I try to not use <code>this</code> inside of a function defined on $scope, as it becomes confusing which $scope is being affected, especially considering that ng-repeat, ng-include, ng-switch, and directives can all create their own child scopes.</p>\n    "},{"t":"Prevent error $digest already in progress when calling $scope.$apply()","l":"http://stackoverflow.com/questions/12729122/prevent-error-digest-already-in-progress-when-calling-scope-apply","q":"\n\n<p>I'm finding that I need to update the my page to my scope manually more and more since building an application in angular. The only way I know of to do this is to call <code>$apply()</code> from the scope of my controllers and directives. The problem with this is that it keeps throwing an error to the console that reads </p>\n\n<blockquote>\n  <p>Error: $digest already in progress</p>\n</blockquote>\n\n<p>Does anyone know how to avoid this error or achieve the same thing but a different way?</p>\n    ","a":"\n<p>You can check if a $digest is already in progress by checking $scope.$$phase. </p>\n\n<pre><code>if(!$scope.$$phase) {\n  //$digest or $apply\n}\n</code></pre>\n\n<p>$scope.$$phase will return \"$digest\" or \"$apply\" if a $digest or $apply is in progress. I believe the difference between these states is that $digest will process the watches of the current scope and it's children, and $apply will process the watchers of all scopes.</p>\n\n<p>To dnc253's point, if you find yourself calling $digest or $apply frequently, you may be doing it wrong. I generally find I need to digest when I need to update the scope's state as a result of a DOM event firing outside the reach of angular. For example, when a twitter bootstrap modal becomes hidden. Sometimes the DOM event fires when a $digest is in progress, sometimes not. That's why I use this check. </p>\n\n<p>I would love to know a better way if anyone knows one.</p>\n\n<hr>\n\n<p>From comments: \nby @anddoutoi</p>\n\n<p><a href=\"https://github.com/angular/angular.js/wiki/Anti-Patterns\">angular.js Anti Patterns</a></p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Don't do <code>if (!$scope.$$phase) $scope.$apply()</code>, it means your <code>$scope.$apply()</code> isn't high enough in the call stack.</li>\n  </ol>\n</blockquote>\n    "},{"t":"Complex nesting of partials and templates","l":"http://stackoverflow.com/questions/12863663/complex-nesting-of-partials-and-templates","q":"\n\n<p>My question involves how to go about dealing with complex nesting of <strong>templates</strong> (also called <strong>partials</strong>) in an AngularJS application.</p>\n\n<p>The best way to describe my situation is with an image I created:</p>\n\n<p><img src=\"http://i.stack.imgur.com/V17C3.png\" alt=\"AngularJS Page Diagram\"></p>\n\n<p>As you can see this has the potential to be a fairly complex application with lots of nested models.</p>\n\n<p>The application is single-page, so it loads an <strong>index.html</strong> that contains a div element in the DOM with the <code>ng-view</code> attribute.</p>\n\n<p><strong>For circle 1</strong>, You see that there is a Primary navigation that loads the appropriate templates into the <code>ng-view</code>.  I'm doing this by passing <code>$routeParams</code> to the main app module.  Here is an example of what's in my app:</p>\n\n<pre><code>angular.module('myApp', []).\n    config(['$routeProvider', function($routeProvider) {\n        $routeProvider.                     \n            when(\"/job/:jobId/zones/:zoneId\", { controller: JobDetailController, templateUrl: 'assets/job_list_app/templates/zone_edit.html' }).\n            when(\"/job/:jobId/initial_inspection\", { controller: JobDetailController, templateUrl: 'assets/job_list_app/templates/initial_inspection.html' }).\n            when(\"/job/:jobId/zones/:zoneId/rooms/:roomId\", { controller: JobDetailController, templateUrl: 'assets/job_list_app/templates/room_edit.html' })       \n\n    }]);\n</code></pre>\n\n<p><strong>In circle 2</strong>, the template that is loaded into the <code>ng-view</code> has an additional <strong>sub-navigation</strong>.  This sub-nav then needs to load templates into the area below it - but since ng-view is already being used, I'm not sure how to go about doing this.</p>\n\n<p>I know that I can include additional templates within the 1st template, but these templates are all going to be pretty complex.  I would like to keep all the templates separate in order to make the application easier to update and not have a dependency on the parent template having to be loaded in order to access its children.</p>\n\n<p><strong>In circle 3</strong>, you can see things get even more complex.  There is the potential that the sub-navigation templates will have a <strong>2nd sub-navigation</strong> that will need to load its own templates as well into the area in <strong>circle 4</strong></p>\n\n<p><strong>How does one go about structuring an AngularJS app to deal with such complex nesting of templates while keeping them all separate from one another?</strong></p>\n    ","a":"\n<p>Well, since you can currently only have one ngView directive... I use nested directive controls. This allows you to set up templating and inherit (or isolate) scopes among them. Outside of that I use ng-switch or even just ng-show to choose which controls I'm displaying based on what's coming in from $routeParams.</p>\n\n<p><strong>EDIT</strong> Here's some example pseudo-code to give you an idea of what I'm talking about. With a nested sub navigation.</p>\n\n<p>Here's the main app page</p>\n\n<pre><code>&lt;!-- primary nav --&gt;\n&lt;a href=\"#/page/1\"&gt;Page 1&lt;/a&gt;\n&lt;a href=\"#/page/2\"&gt;Page 2&lt;/a&gt;\n&lt;a href=\"#/page/3\"&gt;Page 3&lt;/a&gt;\n\n&lt;!-- display the view --&gt;\n&lt;div ng-view&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Directive for the sub navigation</p>\n\n<pre><code>app.directive('mySubNav', function(){\n    return {\n        restrict: 'E',\n        scope: {\n           current: '=current'\n        },\n        templateUrl: 'mySubNav.html',\n        controller: function($scope) {\n        }\n    };\n});\n</code></pre>\n\n<p>template for the sub navigation</p>\n\n<pre><code>&lt;a href=\"#/page/1/sub/1\"&gt;Sub Item 1&lt;/a&gt;\n&lt;a href=\"#/page/1/sub/2\"&gt;Sub Item 2&lt;/a&gt;\n&lt;a href=\"#/page/1/sub/3\"&gt;Sub Item 3&lt;/a&gt;\n</code></pre>\n\n<p>template for a main page (from primary nav)</p>\n\n<pre><code>&lt;my-sub-nav current=\"sub\"&gt;&lt;/my-sub-nav&gt;\n\n&lt;ng-switch on=\"sub\"&gt;\n  &lt;div ng-switch-when=\"1\"&gt;\n      &lt;my-sub-area1&gt;&lt;/my-sub-area&gt;\n  &lt;/div&gt;\n  &lt;div ng-switch-when=\"2\"&gt;\n      &lt;my-sub-area2&gt;&lt;/my-sub-area&gt;\n  &lt;/div&gt;\n  &lt;div ng-switch-when=\"3\"&gt;\n      &lt;my-sub-area3&gt;&lt;/my-sub-area&gt;\n  &lt;/div&gt;\n&lt;/ng-switch&gt;\n</code></pre>\n\n<p>Controller for a main page. (from the primary nav)</p>\n\n<pre><code>app.controller('page1Ctrl', function($scope, $routeParams) {\n     $scope.sub = $routeParams.sub;\n});\n</code></pre>\n\n<p>Directive for a Sub Area</p>\n\n<pre><code>app.directive('mySubArea1', function(){\n    return {\n        restrict: 'E',\n        templateUrl: 'mySubArea1.html',\n        controller: function($scope) {\n            //controller for your sub area.\n        }\n    };\n});\n</code></pre>\n    "},{"t":"What is the difference between Polymer elements and AngularJS directives?","l":"http://stackoverflow.com/questions/18089075/what-is-the-difference-between-polymer-elements-and-angularjs-directives","q":"\n\n<p>On the Polymer <a href=\"http://www.polymer-project.org/docs/start/usingelements.html\">Getting Started</a> page, we see an example of Polymer in action:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- 1. Shim missing platform features --&gt;\n    &lt;script src=\"polymer-all/platform/platform.js\"&gt;&lt;/script&gt;\n    &lt;!-- 2. Load a component --&gt;\n    &lt;link rel=\"import\" href=\"x-foo.html\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- 3. Declare the component by its tag. --&gt;\n    &lt;x-foo&gt;&lt;/x-foo&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>What you will notice is <code>&lt;x-foo&gt;&lt;/x-foo&gt;</code> being defined by <code>platform.js</code> and <code>x-foo.html</code>.</p>\n\n<p>It seems like this is the equivalent to a directive module in AngularJS:</p>\n\n<pre><code>angular.module('xfoo', [])\n.controller('X-Foo', ['$scope',function($scope) {\n    $scope.text = 'hey hey!';\n})\n.directive('x-foo', function() {\n    return {\n        restrict: 'EA',\n        replace: true,\n        controller: 'X-Foo',\n        templateUrl: '/views/x-foo.html',\n        link: function(scope, controller) {\n        }\n    };\n});\n</code></pre>\n\n<ul>\n<li><p>What is the difference between the two?</p></li>\n<li><p>What problems does Polymer solve that AngularJS has not or will not?</p></li>\n<li><p>Are there plans to tie Polymer in with AngularJS in the future?</p></li>\n</ul>\n    ","a":"\n<p>You're not the first to ask this question :) Let me clarify a couple of things before getting to your questions.</p>\n\n<ol>\n<li><p>Polymer's <code>webcomponents.js</code> is a library that contains several polyfills for various W3C APIs that fall under the Web Components umbrella. These are:</p>\n\n<ul>\n<li>Custom Elements</li>\n<li>HTML Imports</li>\n<li><code>&lt;template&gt;</code></li>\n<li>Shadow DOM</li>\n<li>Pointer Events</li>\n<li>others</li>\n</ul>\n\n<p>The left-nav in the documentation (<a href=\"http://www.polymer-project.org/\">polymer-project.org</a>) has a page for all of these \"Platform technologies\". Each of those pages also has a pointer to the individual polyfill.</p></li>\n<li><p><code>&lt;link rel=\"import\" href=\"x-foo.html\"&gt;</code> is an HTML Import. Imports are a useful tool for including HTML in other HTML. You can include <code>&lt;script&gt;</code>, <code>&lt;link&gt;</code>, markup, or whatever else in an import.</p></li>\n<li><p>Nothing \"links\" <code>&lt;x-foo&gt;</code> to x-foo.html. In your example, it's assumed the Custom Element definition of <code>&lt;x-foo&gt;</code> (e.g. <code>&lt;element name=\"x-foo\"&gt;</code>) is defined in x-foo.html. When the browser sees that definition, it's registered as a new element.</p></li>\n</ol>\n\n<p>On to questions!</p>\n\n<p><strong>What is the difference between Angular and Polymer?</strong></p>\n\n<p>We covered some of this in our <a href=\"http://www.youtube.com/watch?v=irGDN5Ysi_A&amp;t=21m45s\">Q&amp;A video</a>. In general, Polymer is a framework that aims to use (and show how to use) Web Components. It's foundation is Custom Elements (e.g. everything you build is a web component) and it evolves as the web evolves. To that end, we only support the latest version of the modern browsers.</p>\n\n<p>I'll use this image to describe Polymer's entire architecture stack:</p>\n\n<p><img src=\"http://i.stack.imgur.com/Ksn6s.png\" alt=\"enter image description here\"></p>\n\n<p>RED layer: We get tomorrow's web through a set of polyfills. Keep in mind, those libraries go away over time as browsers adopt the new APIs.</p>\n\n<p>YELLOW layer: Sprinkle in some sugar with polymer.js. This layer is our opinion on how to use the spec'd APIs, together. It also adds things like data-binding, syntatic sugar, change watchers, published properties...We think these things are helpful for building web component-based apps.</p>\n\n<p>GREEN: The comprehensive set of UI components (green layer) is still in progress. These will be web components that use all of the red + yellow layers.</p>\n\n<p><strong>Angular directives vs. Custom Elements?</strong></p>\n\n<p>See Alex Russell's <a href=\"https://groups.google.com/forum/?fromgroups=#!searchin/polymer-dev/angular/polymer-dev/s761szb9WJc/Lb29XuoJdqAJ\">answer</a>. Basically, Shadow DOM allows composing bits of HTML but also is a tool for encapsulating that HTML. This is fundamentally a new concept on the web and something other frameworks will leverage.</p>\n\n<p><strong>What problems does Polymer solve that AngularJS has not or will not?</strong></p>\n\n<p>Similarities: declarative templates, data binding. </p>\n\n<p>Differences: Angular has high level APIs for services, filters, animations, etc., supports IE8, and at this point, is a much more robust framework for building production apps. Polymer is just starting out in alpha.</p>\n\n<p><strong>Are there plans to tie Polymer in with AngularJS in the future?</strong></p>\n\n<p>They're <a href=\"http://www.polymer-project.org/resources/faq.html#frameworks\">separate projects</a>. That said, both the Angular and Ember teams <a href=\"https://groups.google.com/forum/#!msg/polymer-dev/4RSYaKmbtEk/uYnY3900wpIJ\">announced</a> they'll eventually move to using the underlying platform APIs in their own frameworks.</p>\n\n<p>^ This is a huge win IMO. In a world where web developers have powerful tools (Shadow DOM, Custom Elements), framework authors also can utilize these primitives to create better frameworks. Most of them currently go through great hoops to \"get the job done\".</p>\n\n<p>UPDATE:</p>\n\n<p>There's a really great article on this topic: \"<a href=\"http://www.binpress.com/blog/2014/06/26/polymer-vs-angular/\">Here’s the difference between Polymer and Angular</a>\"</p>\n    "},{"t":"How do search engines deal with AngularJS applications?","l":"http://stackoverflow.com/questions/13499040/how-do-search-engines-deal-with-angularjs-applications","q":"\n\n<p>I see two issues with AngularJS application regarding search engines and SEO:</p>\n\n<p>1) What happens with custom tags? Do search engines ignore the whole content within those tags? i.e. suppose I have</p>\n\n<pre><code>&lt;custom&gt;\n  &lt;h1&gt;Hey, this title is important&lt;/h1&gt;\n&lt;/custom&gt;\n</code></pre>\n\n<p>would <code>&lt;h1&gt;</code> be indexed despite being inside custom tags?</p>\n\n<p><br></p>\n\n<p>2) Is there a way to avoid search engines of indexing {{}} binds literally? i.e.</p>\n\n<pre><code>&lt;h2&gt;{{title}}&lt;/h2&gt;\n</code></pre>\n\n<p>I know I could do something like</p>\n\n<pre><code>&lt;h2 ng-bind=\"title\"&gt;&lt;/h2&gt;\n</code></pre>\n\n<p>but what if I want to actually let the crawler \"see\" the title? Is server-side rendering the only solution?</p>\n    ","a":"\n<p>If you want to optimize your app for search engines there is unfortunately no way around serving a pre-rendered version to the crawler. You can read more about Google's recommendations for ajax and javascript-heavy sites <a href=\"https://developers.google.com/webmasters/ajax-crawling/docs/html-snapshot\">here</a>.</p>\n\n<p>If this is an option I'd recommend reading <a href=\"http://www.yearofmoo.com/2012/11/angularjs-and-seo.html\">this article</a> about how to do SEO for Angular with server-side rendering. </p>\n\n<p>I’m not sure what the crawler does when it encounters custom tags.</p>\n\n<p><strong>Update May 2014</strong></p>\n\n<p>Google crawlers <a href=\"http://googlewebmastercentral.blogspot.no/2014/05/understanding-web-pages-better.html\">now executes javascript</a> - you can use the <a href=\"https://www.google.com/webmasters/tools/home\">Google Webmaster Tools</a> to better understand how your sites are rendered by Google.</p>\n    "},{"t":"Does it make sense to use Require.js with Angular.js? [closed]","l":"http://stackoverflow.com/questions/12529083/does-it-make-sense-to-use-require-js-with-angular-js","q":"\n\n<p>I'm a newbie to Angular.js and trying to understand how it's different from Backbone.js... We used to manage our packages dependencies with Require.js while using Backbone. Does it make sense to do the same with Angular.js?</p>\n    ","a":"\n<p>Yes it makes sense to use <code>angular.js</code> along with <code>require.js</code> wherein you can use <code>require.js</code> for modularizing components.<br></p>\n\n<p>I can point you to a <a href=\"https://github.com/tnajdek/angular-requirejs-seed\">seed project</a> which uses <code>both angular.js and require.js</code>. Hope that helps! </p>\n    "},{"t":"What is the difference between '@' and '=' in directive scope","l":"http://stackoverflow.com/questions/14050195/what-is-the-difference-between-and-in-directive-scope","q":"\n\n<p>I've read the AngularJS documentation on the topic carefully, and then fiddled around with a directive. Here's the <a href=\"http://jsfiddle.net/iweinfuld/7g3QM/3/\">fiddle</a>.</p>\n\n<p>And here are some relevant snippets:</p>\n\n<ul>\n<li><p>from the html:</p>\n\n<pre><code>&lt;pane bi-title=\"title\" title=\"{{title}}\"&gt;{{text}}&lt;/pane&gt;\n</code></pre></li>\n<li><p>from the pane directive: </p>\n\n<pre><code>scope: { biTitle: '=', title: '@', bar: '=' },\n</code></pre></li>\n</ul>\n\n<p>There are several things I don't get:</p>\n\n<ul>\n<li>why do I have to use \"{{title}}\" with '@' and \"title\" with '='?</li>\n<li>can I also access the parent scope directly, without decorating my element with an attribute?</li>\n<li>The documentation says <em>\"Often it's desirable to pass data from the isolated scope via an expression and to the parent scope\"</em>, but that seems to work fine with bidirectional binding too. Why would the expression route be better?</li>\n</ul>\n\n<p>I found another fiddle that shows the expression solution too: <a href=\"http://jsfiddle.net/maxisam/QrCXh/\">http://jsfiddle.net/maxisam/QrCXh/</a></p>\n    ","a":"\n<blockquote>\n  <p>why do I have to use \"{{title}}\" with '@' and \"title\" with '='?</p>\n</blockquote>\n\n<p>@ binds a local/directive scope property to the <strong>evaluated value of the DOM attribute</strong>.  If you use <code>title=title1</code> or <code>title=\"title1\"</code>, the value of DOM attribute \"title\" is simply the string <code>title1</code>.  If you use <code>title=\"{{title}}\"</code>, the value of the DOM attribute \"title\" is the interpolated value of <code>{{title}}</code>, hence the string will be whatever parent scope property \"title\" is currently set to.  Since attribute values are always strings, you will always end up with a string value for this property in the directive's scope when using @.</p>\n\n<p>= binds a local/directive scope property to <strong>a parent scope property</strong>.  So with =, you use the parent model/scope property name as the value of the DOM attribute.  You can't use <code>{{}}</code>s with =.</p>\n\n<p>With @, you can do things like <code>title=\"{{title}} and then some\"</code> -- {{title}} is interpolated, then the string \"and them some\" is concatenated with it.  The final concatenated string is what the local/directive scope property gets.  (You can't do this with =, only @.)</p>\n\n<p>With @, you will need to use <code>attr.$observe('title', function(value) { ... })</code> if you need to use the value in your link(ing) function.  E.g., <code>if(scope.title == \"...\")</code> won't work like you expect.  Note that this means you can only access this attribute <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Directives\"><em>asynchronously</em></a>.\nYou don't need to use $observe() if you are only using the value in a template.  E.g., <code>template: '&lt;div&gt;{{title}}&lt;/div&gt;'</code>.</p>\n\n<p>With =, you don't need to use $observe.</p>\n\n<blockquote>\n  <p>can I also access the parent scope directly, without decorating my element with an attribute?</p>\n</blockquote>\n\n<p>Yes, but only if you don't use an isolate scope.  Remove this line from your directive -- <code>scope: { ... }</code> -- and then your directive will not create a new scope.  It will use the parent scope.  You can then access all of the parent scope properties directly.</p>\n\n<blockquote>\n  <p>The documentation says \"Often it's desirable to pass data from the isolated scope via an expression and to the parent scope\", but that seems to work fine with bidirectional binding too. Why would the expression route be better?</p>\n</blockquote>\n\n<p>Yes, bidirectional binding allows the local/directive scope and the parent scope to share data.  \"Expression binding\" allows the directive to call an expression (or function) defined by a DOM attribute -- and you can also pass data as arguments to the expression or function.  So, if you don't need to share data with the parent -- you just want to call a function defined in the parent scope -- you can use the &amp; syntax.</p>\n\n<p>See also</p>\n\n<ul>\n<li><a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope/\">Lukas's isolated scope blog post</a> (covers @, =, &amp;)</li>\n<li><a href=\"http://stackoverflow.com/questions/13032621/need-some-examples-of-binding-attributes-in-custom-angularjs-tags/13033249#13033249\">dnc253's explanation</a> of @ and =</li>\n<li><a href=\"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs/14049482#14049482\">my blog-like answer</a> about scopes -- the <strong>directives</strong> section (way at the bottom, just before the Summary section) has a picture of an isolate scope and its parent scope -- the directive scope uses @ for one property and = for another</li>\n<li><a href=\"http://stackoverflow.com/questions/14908133/what-is-the-difference-between-vs-and-in-angularjs\">What is the difference between &amp; vs @ and = in angularJS</a></li>\n</ul>\n    "},{"t":"How to set the value property in AngularJS' ng-options?","l":"http://stackoverflow.com/questions/12139152/how-to-set-the-value-property-in-angularjs-ng-options","q":"\n\n<p>Here is what seems to be bothering a lot of people (including me).\nWhen using the <code>ng-options</code> directive in AngluarJS to fill in the options for a <code>&lt;select&gt;</code> tag I cannot figure out how to set the value for an option. The documentation for this is really unclear - at least for a simpleton like me. </p>\n\n<p>I can set the text for an option easily like so: </p>\n\n<pre><code>ng-options=\"select p.text for p in resultOptions\"\n</code></pre>\n\n<p>when <code>resultOptions</code> is for example: </p>\n\n<pre><code>[\n    {\n        \"value\": 1,\n        \"text\": \"1st\"\n    },\n    {\n        \"value\": 2,\n        \"text\": \"2nd\"\n    }\n]\n</code></pre>\n\n<p>Should be (and probably is) the most simple thing to set the option values, but so far I just don't get it.</p>\n    ","a":"\n<blockquote>\n  <p><a href=\"http://docs.angularjs.org/api/ng.directive:select\">http://docs.angularjs.org/api/ng.directive:select</a></p>\n  \n  <p><strong>ngOptions(optional)</strong> – {<code>comprehension_expression=</code>} – in one of the\n  following forms: </p>\n  \n  <p><em>for array data sources</em>:<br>\n  <code>label for value in array</code><br>\n  <code>select as label for value in array</code><br>\n  <code>label group by group for value in array</code><br>\n  <code>select as label group by group for value in array track by trackexpr</code><br>\n  <em>for object data sources:</em><br>\n  <code>label for (key , value) in object</code><br>\n  <code>select as label for (key , value) in object</code><br>\n  <code>label group by group for (key, value) in object</code><br>\n  <code>select as label group by group for (key, value) in object</code></p>\n</blockquote>\n\n<p>In your case, it should be</p>\n\n<pre><code>array = [{ \"value\": 1, \"text\": \"1st\" }, { \"value\": 2, \"text\": \"2nd\" }];\n\n&lt;select ng-options=\"obj.value as obj.text for obj in array\"&gt;&lt;/select&gt;\n</code></pre>\n\n<h2>Update</h2>\n\n<p>With the updates on Angular, it is now possible to set the actual value for the <code>value</code> attribute of <code>select</code> element with <code>track by</code> expression.</p>\n\n<pre><code>&lt;select ng-options=\"obj.text for obj in array track by obj.value\"&gt;\n&lt;/select&gt;\n</code></pre>\n\n<h2>How to remember this ugly stuff</h2>\n\n<p>To all the people who are having hard time to remember this syntax form: I agree this isn't the most easiest or beautiful syntax. This syntax is kind of an extended version of Python's list comprehensions and knowing that helps me to remember the syntax very easily. It's something like this:</p>\n\n<p>Python code:</p>\n\n<pre><code>my_list = [x**2 for x in [1, 2, 3, 4, 5]]\n&gt; [1, 4, 9, 16, 25]\n# let people to be a list of person instances\nmy_list2 = [person.name for person in people]\n&gt; my_list2 = ['Alice', 'Bob']\n</code></pre>\n\n<p>This is actually the same syntax as the first one listed above. However, in <code>&lt;select&gt;</code> we usually need to differentiate between the actual value in code and the text shown (the label) in a <code>&lt;select&gt;</code> element. Like, we need <code>person.id</code> in the code but we don't want to show the <code>id</code> to the user, we want to show its name. Likewise, we're not interested in the <code>person.name</code> in the code. There comes <code>as</code> keyword to label stuff. So it becomes like this:</p>\n\n<pre><code>person.id as person.name for person in people\n</code></pre>\n\n<p>Or, instead of <code>person.id</code> we could need the <code>person</code> instance/reference itself. See below:</p>\n\n<pre><code>person as person.name for person in people\n</code></pre>\n\n<p>For JS objects, the same method applies as well, just remember that the items in the object is deconstructed with <code>(key, value)</code> pairs.</p>\n    "},{"t":"How can I post data as form data instead of a request payload?","l":"http://stackoverflow.com/questions/11442632/how-can-i-post-data-as-form-data-instead-of-a-request-payload","q":"\n\n<p>In the code below, the AngularJS <code>$http</code> method calls the URL, and submits the xsrf object as a \"Request Payload\" (as described in the Chrome debugger network tab). The jQuery <code>$.ajax</code> method does the same call, but submits xsrf as \"Form Data\".</p>\n\n<p>How can I make AngularJS submit xsrf as form data instead of a request payload?</p>\n\n<pre><code>var url = 'http://somewhere.com/';\nvar xsrf = {fkey: 'xsrf key'};\n\n$http({\n    method: 'POST',\n    url: url,\n    data: xsrf\n}).success(function () {});\n\n$.ajax({\n    type: 'POST',\n    url: url,\n    data: xsrf,\n    dataType: 'json',\n    success: function() {}\n});\n</code></pre>\n    ","a":"\n<p>The following line needs to be added to the $http object that is passed:</p>\n\n<pre><code>headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n</code></pre>\n\n<p>And the data passed should be converted to a URL-encoded string:</p>\n\n<pre><code>&gt; $.param({fkey: \"key\"})\n'fkey=key'\n</code></pre>\n\n<p>So you have something like:</p>\n\n<pre><code>$http({\n    method: 'POST',\n    url: url,\n    data: $.param({fkey: \"key\"}),\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n})\n</code></pre>\n\n<p>From: <a href=\"https://groups.google.com/forum/#!msg/angular/5nAedJ1LyO0/4Vj_72EZcDsJ\">https://groups.google.com/forum/#!msg/angular/5nAedJ1LyO0/4Vj_72EZcDsJ</a></p>\n    "},{"t":"How to set focus on input field?","l":"http://stackoverflow.com/questions/14833326/how-to-set-focus-on-input-field","q":"\n\n<p>What is the 'Angular way' to set focus on input field in AngularJS?</p>\n\n<p>More specific requirements:</p>\n\n<ol>\n<li>When a <a href=\"http://angular-ui.github.com/bootstrap/#modal\">Modal</a> is opened, set focus on a predefined <code>&lt;input&gt;</code> inside this Modal.</li>\n<li>Everytime <code>&lt;input&gt;</code> becomes visible (e.g. by clicking some button), set focus on it.</li>\n</ol>\n\n<p><a href=\"http://plnkr.co/edit/XL1NP0?p=preview\">I tried to achieve the first requirement</a> with <code>autofocus</code>, but this works only when the Modal is opened for the first time, and only in certain browsers (e.g. in Firefox it doesn't work).</p>\n\n<p>Any help will be appreciated.</p>\n    ","a":"\n<blockquote>\n  <ol>\n  <li>When a Modal is opened, set focus on a predefined &lt;input&gt; inside this Modal.</li>\n  </ol>\n</blockquote>\n\n<p>Define a directive and have it $watch a property/trigger so it knows when to focus the element:</p>\n\n<pre><code>Name: &lt;input type=\"text\" focus-me=\"shouldBeOpen\"&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout, $parse) {\n  return {\n    //scope: true,   // optionally create a child scope\n    link: function(scope, element, attrs) {\n      var model = $parse(attrs.focusMe);\n      scope.$watch(model, function(value) {\n        console.log('value=',value);\n        if(value === true) { \n          $timeout(function() {\n            element[0].focus(); \n          });\n        }\n      });\n      // to address @blesh's comment, set attribute value to 'false'\n      // on blur event:\n      element.bind('blur', function() {\n         console.log('blur');\n         scope.$apply(model.assign(scope, false));\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/LbHRBB?p=preview\">Plunker</a></p>\n\n<p>The $timeout seems to be needed to give the modal time to render.</p>\n\n<blockquote>\n  <p>'2.' Everytime &lt;input&gt; becomes visible (e.g. by clicking some button), set focus on it.</p>\n</blockquote>\n\n<p>Create a directive essentially like the one above.  Watch some scope property, and when it becomes true (set it in your ng-click handler), execute <code>element[0].focus()</code>.  Depending on your use case, you may or may not need a $timeout for this one:</p>\n\n<pre><code>&lt;button class=\"btn\" ng-click=\"showForm=true; focusInput=true\"&gt;show form and\n focus input&lt;/button&gt;\n&lt;div ng-show=\"showForm\"&gt;\n  &lt;input type=\"text\" ng-model=\"myInput\" focus-me=\"focusInput\"&gt; {{ myInput }}\n  &lt;button class=\"btn\" ng-click=\"showForm=false\"&gt;hide form&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout) {\n  return {\n    link: function(scope, element, attrs) {\n      scope.$watch(attrs.focusMe, function(value) {\n        if(value === true) { \n          console.log('value=',value);\n          //$timeout(function() {\n            element[0].focus();\n            scope[attrs.focusMe] = false;\n          //});\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/V8PSie?p=preview\">Plunker</a></p>\n\n<hr>\n\n<p><strong>Update 7/2013</strong>:  I've seen a few people use my original isolate scope directives and then have problems with embedded input fields (i.e., an input field in the modal).  A directive with no new scope (or possibly a new child scope) should alleviate some of the pain.  So above I updated the answer to not use isolate scopes.  Below is the original answer:</p>\n\n<p>Original answer for 1., using an isolate scope:</p>\n\n<pre><code>Name: &lt;input type=\"text\" focus-me=\"{{shouldBeOpen}}\"&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout) {\n  return {\n    scope: { trigger: '@focusMe' },\n    link: function(scope, element) {\n      scope.$watch('trigger', function(value) {\n        if(value === \"true\") { \n          $timeout(function() {\n            element[0].focus(); \n          });\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/6kHuj0?p=preview\">Plunker</a>.</p>\n\n<p>Original answer for 2., using an isolate scope:</p>\n\n<pre><code>&lt;button class=\"btn\" ng-click=\"showForm=true; focusInput=true\"&gt;show form and\n focus input&lt;/button&gt;\n&lt;div ng-show=\"showForm\"&gt;\n  &lt;input type=\"text\" focus-me=\"focusInput\"&gt;\n  &lt;button class=\"btn\" ng-click=\"showForm=false\"&gt;hide form&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>app.directive('focusMe', function($timeout) {\n  return {\n    scope: { trigger: '=focusMe' },\n    link: function(scope, element) {\n      scope.$watch('trigger', function(value) {\n        if(value === true) { \n          //console.log('trigger',value);\n          //$timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          //});\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/gmaQCl?p=preview\">Plunker</a>.</p>\n\n<p>Since we need to reset the trigger/focusInput property in the directive, '=' is used for two-way databinding.  In the first directive, '@' was sufficient.  Also note that when using '@' we compare the trigger value to \"true\" since @ always results in a string.</p>\n    "},{"t":"Difference between angular-route and angular-ui-router","l":"http://stackoverflow.com/questions/21023763/difference-between-angular-route-and-angular-ui-router","q":"\n\n<p>I am new to AngularJS. I find Angular quite interesting and planning to use angular in my big apps. So I am in the process to find out the right modules to use.</p>\n\n<p>What is the difference between <strong>ngRoute (angular-route.js)</strong> and <strong>ui-router (angular-ui-router.js)</strong> modules?</p>\n\n<p>In many articles when <em>ngRoute</em> is used, route is configured with <strong><em>$routeProvider</em></strong>. However, when used with <em>ui-router</em>, route is configured with <strong><em>$stateProvider and $urlRouterProvider</em></strong>. </p>\n\n<p>This creates a bit of confusion for me. Which module should I use for better manageability and extensibility? Your answers are greatly appreciated. </p>\n    ","a":"\n<p><a href=\"https://github.com/angular-ui/ui-router\">ui-router</a> is a 3rd-party module and is very powerful.  It supports everything the normal ngRoute can do as well as many extra functions.</p>\n\n<p>Here are some common reason ui-router is chosen over ngRoute:</p>\n\n<ul>\n<li><p>ui-router allows for <a href=\"https://github.com/angular-ui/ui-router/wiki/Nested-States-%26-Nested-Views\">nested views</a> and <a href=\"https://github.com/angular-ui/ui-router/wiki/Multiple-Named-Views\">multiple named views</a>.  This is very useful with larger app where you may have pages that inherit from other sections.</p></li>\n<li><p>ui-router allows for you to have strong-type linking between states based on state names.  Change the url in one place will update every link to that state when you build your links with <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-sref\"><code>ui-sref</code></a>. Very useful for larger projects where URLs might change.</p></li>\n<li><p>There is also the concept of the <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$stateProvider#methods_decorator\">decorator</a> which could be used to allow your routes to be dynamically created based on the URL that is trying to be accessed. This could mean that you will not need to specify all of your routes before hand.</p></li>\n<li><p><a href=\"https://github.com/angular-ui/ui-router/wiki#state-manager\">states</a> allow you to map and access different information about different states and you can easily pass information between states via <a href=\"https://github.com/angular-ui/ui-router/wiki/URL-Routing#stateparams-service\"><code>$stateParams</code></a>.</p></li>\n<li><p>You can easily determine if you are in a state or parent of a state to adjust UI element (highlighting the navigation of the current state) within your templates via <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$state\"><code>$state</code></a> provided by ui-router which you can expose via setting it in <code>$rootScope</code> on <code>run</code>.</p></li>\n</ul>\n\n<p>In essence, ui-router is ngRouter with more features, under the sheets it is quite different. These additional features are very useful for larger applications.</p>\n\n<p>More Information:</p>\n\n<ul>\n<li>Github: <a href=\"https://github.com/angular-ui/ui-router\">https://github.com/angular-ui/ui-router</a></li>\n<li>Documentation:\n<ul>\n<li>API Reference: <a href=\"http://angular-ui.github.io/ui-router/site/#/api\">http://angular-ui.github.io/ui-router/site/#/api</a></li>\n<li>Guide: <a href=\"https://github.com/angular-ui/ui-router/wiki\">https://github.com/angular-ui/ui-router/wiki</a></li>\n</ul></li>\n<li>FAQs: <a href=\"https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions\">https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions</a></li>\n<li>Sample Application: <a href=\"http://angular-ui.github.io/ui-router/sample/#/\">http://angular-ui.github.io/ui-router/sample/#/</a> </li>\n</ul>\n    "},{"t":"Insert HTML into view using AngularJS","l":"http://stackoverflow.com/questions/9381926/insert-html-into-view-using-angularjs","q":"\n\n<p>Is it possible to create an HTML fragment in an Angular controller and have this HTML shown in the view?</p>\n\n<p>This comes from a requirement to turn an inconsistent JSON blob into a nested list of <code>id : value</code> pairs. Therefore the HTML is created in the controller and I am now looking to display it.</p>\n\n<p>I have created a model property, but cannot render this in the view without it just printing the HTML.</p>\n\n<hr>\n\n<p>Update</p>\n\n<p>It appears that the problem arises from angular rendering the created HTML as a string within quotes. Will attempt to find a way around this.</p>\n\n<p>Example controller :</p>\n\n<pre><code>var SomeController = function () {\n\n    this.customHtml = '&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;';\n}\n</code></pre>\n\n<p>Example view :</p>\n\n<pre><code>&lt;div ng:bind=\"customHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Gives :</p>\n\n<pre><code>&lt;div&gt;\n    \"&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;\"\n&lt;/div&gt;\n</code></pre>\n    ","a":"\n<p>Swaff's answer was correct as of that date but that doesn't work anymore; now you use:</p>\n\n<p>For Angular 1.3, use <code>ng-bind-html</code> in the HTML:</p>\n\n<pre><code>&lt;div ng-bind-html=\"thisCanBeusedInsideNgBindHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and use <code>$sce.trustAsHtml()</code> in the controller to convert the html string.</p>\n\n<pre><code> $scope.thisCanBeusedInsideNgBindHtml = $sce.trustAsHtml(someHtmlVar);\n</code></pre>\n\n<p>UPDATE 2: as Sasha points out, for Angular 1.2, use:</p>\n\n<pre><code>&lt;div ng-bind-html=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>UPDATE: as Damax pointed out, now use:</p>\n\n<pre><code>&lt;div ng-bind-html-unsafe=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>OLD WAY:</p>\n\n<pre><code>&lt;div ng-bind-html=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>&lt;div&gt;{{expression}}&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md\">https://github.com/angular/angular.js/blob/master/CHANGELOG.md</a> (scroll down / search for \"ng-bind-html\" in this page to see details of the change)</p>\n\n<p>ALSO, this now requires the \"ngSanitize\" module (I got hung up on this for awhile and couldn't figure out why it wasn't working - and the documentation doesn't seem clear on how to include this module). There's 2 steps:</p>\n\n<ol>\n<li><p>include the angular-sanitize.min.js resource, i.e.:<br>\n<code>&lt;script src=\"lib/angular/angular-sanitize.min.js\"&gt;&lt;/script&gt;</code></p></li>\n<li><p>In a js file (controller or usually app.js), include ngSanitize, i.e.:<br>\n<code>angular.module('myApp', ['myApp.filters', 'myApp.services', 'myApp.directives', 'ngSanitize'])</code></p></li>\n</ol>\n    "},{"t":"confused about service vs factory","l":"http://stackoverflow.com/questions/13762228/confused-about-service-vs-factory","q":"\n\n<p>As I understand it, when inside a factory I return a object that gets injected into a controller. When inside a service I am dealing with the object using <code>this</code> and not returning anything. </p>\n\n<p>I was under the assumption that a service was <em>always a singleton</em>, and that a <strong>new factory object</strong> gets injected in every controller. However as it turns out, a factory object is a singleton too?</p>\n\n<p>Example code to demonstrate:</p>\n\n<pre><code>var factories = angular.module('app.factories', []);\nvar app = angular.module('app',  ['ngResource', 'app.factories']);\n\nfactories.factory('User', function () {\n  return {\n    first: 'John',\n    last: 'Doe'\n  };\n});\n\napp.controller('ACtrl', function($scope, User) {\n  $scope.user = User;\n});\n\napp.controller('BCtrl', function($scope, User) {\n  $scope.user = User;\n});\n</code></pre>\n\n<p>When changing <code>user.first</code> in <code>ACtrl</code> it turns out that <code>user.first</code> in <code>BCtrl</code> is also changed, e.g. <code>User</code> is a singleton? </p>\n\n<p>My assumption was that a new instance was injected in a controller with a factory?</p>\n    ","a":"\n<p><strong>All angular services are singletons</strong>:</p>\n\n<p>Docs (see <em>Services as singletons</em>): <a href=\"https://docs.angularjs.org/guide/services\">https://docs.angularjs.org/guide/services</a></p>\n\n<blockquote>\n  <p>Lastly, it is important to realize that all Angular services are application singletons. This means that there is only one instance of a given service per injector. </p>\n</blockquote>\n\n<p>Basically the difference between the service and factory is as follows:</p>\n\n<pre><code>app.service('myService', function() {\n\n  // service is just a constructor function\n  // that will be called with 'new'\n\n  this.sayHello = function(name) {\n     return \"Hi \" + name + \"!\";\n  };\n});\n\napp.factory('myFactory', function() {\n\n  // factory returns an object\n  // you can run some code before\n\n  return {\n    sayHello : function(name) {\n      return \"Hi \" + name + \"!\";\n    }\n  }\n});\n</code></pre>\n\n<p>Check out this presentation about $provide: <a href=\"http://slides.wesalvaro.com/20121113/#/\">http://slides.wesalvaro.com/20121113/#/</a></p>\n\n<p>Those slides were used in one of the AngularJs meetups: <a href=\"http://blog.angularjs.org/2012/11/more-angularjs-meetup-videos.html\">http://blog.angularjs.org/2012/11/more-angularjs-meetup-videos.html</a></p>\n    "},{"t":"Redirecting to a certain route based on condition","l":"http://stackoverflow.com/questions/11541695/redirecting-to-a-certain-route-based-on-condition","q":"\n\n<p>I'm writing a small AngularJS app that has a login view and a main view, configured like so:</p>\n\n<pre><code>$routeProvider\n .when('/main' , {templateUrl: 'partials/main.html',  controller: MainController})\n .when('/login', {templateUrl: 'partials/login.html', controller: LoginController})\n .otherwise({redirectTo: '/login'});\n</code></pre>\n\n<p>My LoginController checks the user/pass combination and sets a property on the $rootScope reflecting this:</p>\n\n<pre><code>function LoginController($scope, $location, $rootScope) {\n $scope.attemptLogin = function() {\n   if ( $scope.username == $scope.password ) { // test\n        $rootScope.loggedUser = $scope.username;\n        $location.path( \"/main\" );\n    } else {\n        $scope.loginError = \"Invalid user/pass.\";\n    }\n}\n</code></pre>\n\n<p>Everything works, but if I access <code>http://localhost/#/main</code> I end up bypassing the login screen. I wanted to write something like \"whenever the route changes, if $rootScope.loggedUser is null then redirect to /login\"</p>\n\n<p>...</p>\n\n<p>... wait. Can I listen to route changes somehow? I'll post this question anyway and keep looking.</p>\n    ","a":"\n<p>Sorry to answer my own question, but after some diving through some documentation and source code, I think I got it working. Perhaps this will be useful for someone else?</p>\n\n<p>I added the following to my module configuration:</p>\n\n<pre><code>angular.module(...)\n .config( ['$routeProvider', function($routeProvider) {...}] )\n .run( function($rootScope, $location) {\n\n    // register listener to watch route changes\n    $rootScope.$on( \"$routeChangeStart\", function(event, next, current) {\n      if ( $rootScope.loggedUser == null ) {\n        // no logged user, we should be going to #login\n        if ( next.templateUrl == \"partials/login.html\" ) {\n          // already going to #login, no redirect needed\n        } else {\n          // not going to #login, we should redirect now\n          $location.path( \"/login\" );\n        }\n      }         \n    });\n })\n</code></pre>\n\n<p>The one thing that seems odd is that I had to test the partial name (<code>login.html</code>) because the \"next\" Route object did not have a url or something else. Maybe there's a better way?</p>\n    "},{"t":"Can one controller call another?","l":"http://stackoverflow.com/questions/9293423/can-one-controller-call-another","q":"\n\n<p>Is it possible to have one controller use another?</p>\n\n<p>For example:</p>\n\n<p>This HTML document simply prints a message delivered by the <code>MessageCtrl</code> controller in the <code>messageCtrl.js</code> file.</p>\n\n<pre><code>&lt;html xmlns:ng=\"http://angularjs.org/\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Inter Controller Communication&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div ng:controller=\"MessageCtrl\"&gt;\n        &lt;p&gt;{{message}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Angular Scripts --&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-0.9.19.js\" ng:autobind&gt;&lt;/script&gt;\n    &lt;script src=\"js/messageCtrl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The controller file contains the following code:</p>\n\n<pre><code>function MessageCtrl()\n{\n    this.message = function() { \n        return \"The current date is: \" + new Date().toString(); \n    };\n}\n</code></pre>\n\n<p>Which simply prints the current date;</p>\n\n<p>If I were to add another controller, <code>DateCtrl</code> which handed the date in a specific format back to <code>MessageCtrl</code>, how would one go about doing this?  The DI framework seems to be concerned with <code>XmlHttpRequests</code> and accessing services.</p>\n\n<p>Can anyone help?</p>\n    ","a":"\n<p>There are multiple ways how to communicate between controllers.</p>\n\n<p>The best one is probably sharing a service:</p>\n\n<pre><code>function FirstController(someDataService) \n{\n  // use the data service, bind to template...\n  // or call methods on someDataService to send a request to server\n}\n\nfunction SecondController(someDataService) \n{\n  // has a reference to the same instance of the service\n  // so if the service updates state for example, this controller knows about it\n}\n</code></pre>\n\n<p>Another way is emitting an event on scope:</p>\n\n<pre><code>function FirstController($scope) \n{\n  $scope.$on('someEvent', function(event, args) {});\n  // another controller or even directive\n}\n\nfunction SecondController($scope) \n{\n  $scope.$emit('someEvent', args);\n}\n</code></pre>\n\n<p>In both cases, you can communicate with any directive as well.</p>\n    "},{"t":"How can AngularJS bind to list of checkbox values?","l":"http://stackoverflow.com/questions/14514461/how-can-angularjs-bind-to-list-of-checkbox-values","q":"\n\n<p>I have a few checkboxes:</p>\n\n<pre><code>&lt;input type='checkbox' value=\"apple\" checked&gt;\n&lt;input type='checkbox' value=\"orange\"&gt;\n&lt;input type='checkbox' value=\"pear\" checked&gt;\n&lt;input type='checkbox' value=\"naartjie\"&gt;\n</code></pre>\n\n<p>That I would like to bind to a list in my controller such that whenever a checkbox is changed the controller maintains a list of all the checked values e.g. <code>['apple', 'pear']</code>. </p>\n\n<p>ng-model seems to only be able to bind the value of one single checkbox to a variable in the controller. </p>\n\n<p>Is there another way to do it so that I can bind the four checkboxes to a list in the contrller?</p>\n    ","a":"\n<p>There are two ways to approach this problem. Either use a simple array or an array of objects. Each solution has it pros and cons. Below you'll find one for each case.</p>\n\n<hr>\n\n<h3>With a simple array as input data</h3>\n\n<p>the html could look like:</p>\n\n<pre><code>&lt;label ng-repeat=\"fruitName in fruits\"&gt;\n  &lt;input\n    type=\"checkbox\"\n    name=\"selectedFruits[]\"\n    value=\"{{fruitName}}\"\n    ng-checked=\"selection.indexOf(fruitName) &gt; -1\"\n    ng-click=\"toggleSelection(fruitName)\"\n  &gt; {{fruitName}}\n&lt;/label&gt;\n</code></pre>\n\n<p>and the appropriate controller code would be:</p>\n\n<pre><code>app.controller('SimpleArrayCtrl', ['$scope', function SimpleArrayCtrl($scope) {\n  // fruits\n  $scope.fruits = ['apple', 'orange', 'pear', 'naartjie'];\n\n  // selected fruits\n  $scope.selection = ['apple', 'pear'];\n\n  // toggle selection for a given fruit by name\n  $scope.toggleSelection = function toggleSelection(fruitName) {\n    var idx = $scope.selection.indexOf(fruitName);\n\n    // is currently selected\n    if (idx &gt; -1) {\n      $scope.selection.splice(idx, 1);\n    }\n\n    // is newly selected\n    else {\n      $scope.selection.push(fruitName);\n    }\n  };\n}]);\n</code></pre>\n\n<p><strong>Pros</strong>: simple data structure and toggling by name is easy to handle</p>\n\n<p><strong>Cons</strong>: add/remove is cumbersome as two lists (the input and selection) have to be managed</p>\n\n<hr>\n\n<h3>With an object array as input data</h3>\n\n<p>the html could look like:</p>\n\n<pre><code>&lt;label ng-repeat=\"fruit in fruits\"&gt;\n  &lt;!--\n    - use `value=\"{{fruit.name}}\"` to give the input a real value, in case the form gets submitted\n      traditionally\n\n    - use `ng-checked=\"fruit.selected\"` to have the checkbox checked based on some angular expression\n      (no two-way-data-binding)\n\n    - use `ng-model=\"fruit.selected\"` to utilize two-way-data-binding. Note that `.selected`\n      is arbitrary. The property name could be anything and will be created on the object if not present.\n  --&gt;\n  &lt;input\n    type=\"checkbox\"\n    name=\"selectedFruits[]\"\n    value=\"{{fruit.name}}\"\n    ng-model=\"fruit.selected\"\n  &gt; {{fruit.name}}\n&lt;/label&gt;\n</code></pre>\n\n<p>and the appropriate controller code would be:</p>\n\n<pre><code>app.controller('ObjectArrayCtrl', ['$scope', 'filterFilter', function ObjectArrayCtrl($scope, filterFilter) {\n  // fruits\n  $scope.fruits = [\n    { name: 'apple',    selected: true },\n    { name: 'orange',   selected: false },\n    { name: 'pear',     selected: true },\n    { name: 'naartjie', selected: false }\n  ];\n\n  // selected fruits\n  $scope.selection = [];\n\n  // helper method to get selected fruits\n  $scope.selectedFruits = function selectedFruits() {\n    return filterFilter($scope.fruits, { selected: true });\n  };\n\n  // watch fruits for changes\n  $scope.$watch('fruits|filter:{selected:true}', function (nv) {\n    $scope.selection = nv.map(function (fruit) {\n      return fruit.name;\n    });\n  }, true);\n}]);\n</code></pre>\n\n<p><strong>Pros</strong>: add/remove is very easy</p>\n\n<p><strong>Cons</strong>: somewhat more complex data structure and toggling by name is cumbersome or requires a helper method</p>\n\n<hr>\n\n<p><strong>Demo</strong>: <a href=\"http://jsbin.com/ImAqUC/1/\">http://jsbin.com/ImAqUC/1/</a></p>\n    "},{"t":"Where to put model data and behaviour?","l":"http://stackoverflow.com/questions/11112608/where-to-put-model-data-and-behaviour","q":"\n\n<p>I am working with AngularJS for my latest project. In the documentation and tutorials all model data is put into the controller scope. I understand that is has to be there to be available for the controller and thus within the corresponding views.</p>\n\n<p>However I dont think the model should actually be implemented there. It might be complex and have private attributes for example. Furthermore one might want to reuse it in another context/app. Putting everything into the controller totally breaks MVC pattern.</p>\n\n<p>The same holds true for the behaviour of any model. If I would use <a href=\"http://www.artima.com/articles/dci_vision.html\">DCI architecture</a> and separate behaviour from the data model, I would have to introduce additional objects to hold the behaviour. This would be done by introducing roles and contexts.</p>\n\n<p>Of course model data and behaviour could be implemented with plain javascript objects or any \"class\" pattern. But what would be the AngularJS way to do it? Using services?</p>\n\n<p><strong>So it comes down to this question:</strong></p>\n\n<p>How do you implement models decoupled from the controller, following AngularJS best practices?</p>\n    ","a":"\n<p>You should use services if you want something usable by multiple controllers. Here's a simple contrived example:</p>\n\n<pre><code>myApp.factory('ListService', function() {\n  var ListService = {};\n  var list = [];\n  ListService.getItem = function(index) { return list[index]; }\n  ListService.addItem = function(item) { list.push(item); }\n  ListService.removeItem = function(item) { list.splice(list.indexOf(item), 1) }\n  ListService.size = function() { return list.length; }\n\n  return ListService;\n});\n\nfunction Ctrl1($scope, ListService) {\n  //Can add/remove/get items from shared list\n}\n\nfunction Ctrl2($scope, ListService) {\n  //Can add/remove/get items from shared list\n}\n</code></pre>\n    "},{"t":"What's the correct way to communicate between controllers in AngularJS?","l":"http://stackoverflow.com/questions/11252780/whats-the-correct-way-to-communicate-between-controllers-in-angularjs","q":"\n\n<p>What's the correct way to communicate between controllers in AngularJS?</p>\n\n<p>I'm currently using a horrible fudge involving 'window':</p>\n\n<pre><code>function StockSubgroupCtrl($scope, $http) {\n    $scope.subgroups = [];\n    $scope.handleSubgroupsLoaded = function(data, status) {\n        $scope.subgroups = data;\n    }\n    $scope.fetch = function(prod_grp) {\n        $http.get('/api/stock/groups/' + prod_grp + '/subgroups/').success($scope.handleSubgroupsLoaded);\n    }\n    window.fetchStockSubgroups = $scope.fetch;\n}\n\nfunction StockGroupCtrl($scope, $http) {\n    ...\n    $scope.select = function(prod_grp) {\n        $scope.selectedGroup = prod_grp;\n        window.fetchStockSubgroups(prod_grp);\n    }\n}\n</code></pre>\n    ","a":"\n<p><strong>Edit</strong>: The issue addressed in this answer have been resolved in recent versions of angular.js <code>$broadcast</code> now avoids bubbling over unregistered scopes and runs just as fast as $emit.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ti7Ph.png\" alt=\"$broadcast performances are identical to $emit with angular 1.2.16\"></p>\n\n<hr>\n\n<p><strong>Original Answer Below</strong></p>\n\n<p>I highly advise not to use <code>$rootScope.$broadcast</code> + <code>$scope.$on</code> but rather <code>$rootScope.$emit</code>+ <code>$rootScope.$on</code>. The former can cause serious performance problems as raised by @numan. That is because the event will bubble down through <strong>all</strong> scopes. </p>\n\n<p>However, the latter (using <code>$rootScope.$emit</code> + <code>$rootScope.$on</code>) does <strong>not</strong> suffer from this and can therefore be used as a fast communication channel!</p>\n\n<p>From the angular documentation of <code>$emit</code>:</p>\n\n<blockquote>\n  <p>Dispatches an event name upwards through the scope hierarchy notifying the registered</p>\n</blockquote>\n\n<p>Since there is no scope above <code>$rootScope</code>, there is no bubbling happening. It is totally safe to use <code>$rootScope.$emit()</code>/ <code>$rootScope.$on()</code> as an EventBus.</p>\n\n<p>However, there is one gotcha when using it from within Controllers. If you directly bind to <code>$rootScope.$on()</code> from within a controller, you'll have to clean up the binding yourself when  your local <code>$scope</code> gets destroyed. This is because controllers (in contrast to services) can get instantiated multiple times over the lifetime of an application which would result into bindings summing up eventually creating memory leaks all over the place :)</p>\n\n<p>To unregister, just listen on your <code>$scope</code>'s <code>$destroy</code> event and then call the function that was returned by <code>$rootScope.$on</code>.</p>\n\n<pre><code>angular\n    .module('MyApp')\n    .controller('MyController', ['$scope', '$rootScope', function MyController($scope, $rootScope) {\n\n            var unbind = $rootScope.$on('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n\n            $scope.$on('$destroy', unbind);\n        }\n    ]);\n</code></pre>\n\n<p>I would say, that's not really an angular specific thing as it applies to other EventBus implementations as well, that you have to clean up resources.</p>\n\n<p>However, you <em>can</em> make your life easier for those cases. For instance, you could monkey patch <code>$rootScope</code> and give it a <code>$onRootScope</code> that subscribes to events emitted on the <code>$rootScope</code> but also directly cleans up the handler when the local <code>$scope</code> gets destroyed.</p>\n\n<p>The cleanest way to monkey patch the <code>$rootScope</code> to provide such <code>$onRootScope</code> method would be through a decorator (a run block will probably do it just fine as well but pssst, don't tell anybody)</p>\n\n<p>To make sure the <code>$onRootScope</code> property doesn't show up unexpected when enumerating over <code>$scope</code> we use <code>Object.defineProperty()</code> and set <code>enumerable</code> to <code>false</code>. Keep in mind that you might need an ES5 shim.</p>\n\n<pre><code>angular\n    .module('MyApp')\n    .config(['$provide', function($provide){\n        $provide.decorator('$rootScope', ['$delegate', function($delegate){\n\n            Object.defineProperty($delegate.constructor.prototype, '$onRootScope', {\n                value: function(name, listener){\n                    var unsubscribe = $delegate.$on(name, listener);\n                    this.$on('$destroy', unsubscribe);\n\n                    return unsubscribe;\n                },\n                enumerable: false\n            });\n\n\n            return $delegate;\n        }]);\n    }]);\n</code></pre>\n\n<p>With this method in place the controller code from above can be simplified to:</p>\n\n<pre><code>angular\n    .module('MyApp')\n    .controller('MyController', ['$scope', function MyController($scope) {\n\n            $scope.$onRootScope('someComponent.someCrazyEvent', function(){\n                console.log('foo');\n            });\n        }\n    ]);\n</code></pre>\n\n<p>So as a final outcome of all this I highly advise you to use <code>$rootScope.$emit</code> + <code>$scope.$onRootScope</code>.</p>\n\n<p>Btw, I'm trying to convince the angular team to address the problem within angular core. There's a discussion going on here: <a href=\"https://github.com/angular/angular.js/issues/4574\">https://github.com/angular/angular.js/issues/4574</a></p>\n\n<p>Here is a jsperf that shows how much of a perf impact <code>$broadcast</code>brings to the table in a decent scenario with just 100 <code>$scope</code>'s.</p>\n\n<p><a href=\"http://jsperf.com/rootscope-emit-vs-rootscope-broadcast\">http://jsperf.com/rootscope-emit-vs-rootscope-broadcast</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/FQ9dE.png\" alt=\"jsperf results\"></p>\n    "},{"t":"Why does angularjs include an empty option in select","l":"http://stackoverflow.com/questions/12654631/why-does-angularjs-include-an-empty-option-in-select","q":"\n\n<p>I've been working with angular for the last few weeks and the one thing which is really bothering me is that even after trying all permutations or the configuration defined in the spec at <a href=\"http://docs.angularjs.org/api/ng.directive:select\">http://docs.angularjs.org/api/ng.directive:select</a>, I still get an empty option as the first child of select element.</p>\n\n<p>Here's the Jade</p>\n\n<pre><code>select.span9(ng-model='form.type', required, ng-options='option.value as option.name for option in typeOptions');\n</code></pre>\n\n<p>Here the controller</p>\n\n<pre><code>$scope.typeOptions = [\n    { name: 'Feature', value: 'feature' }, \n    { name: 'Bug', value: 'bug' }, \n    { name: 'Enhancement', value: 'enhancement' }\n];\n</code></pre>\n\n<p>Finally, here's the HTML which gets generated</p>\n\n<pre><code>&lt;select ng-model=\"form.type\" required=\"required\" ng-options=\"option.value as option.name for option in typeOptions\" class=\"span9 ng-pristine ng-invalid ng-invalid-required\"&gt;\n    &lt;option value=\"?\" selected=\"selected\"&gt;&lt;/option&gt;\n    &lt;option value=\"0\"&gt;Feature&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Bug&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Enhancement&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>What do I need to do to get rid of it?</p>\n\n<p>P.S. Things work without this as well, but it just looks odd if you use select2 without multiple selection.</p>\n    ","a":"\n<p>The empty <code>option</code> is generated when a value referenced by <code>ng-model</code> doesn't exist in a set of options passed to <code>ng-options</code>. This happens to prevent accidental model selection: AngularJS can see that the initial model is either undefined or not in the set of options and don't want to decide model value on its own.</p>\n\n<p>If you want to get rid of the empty option just select an initial value in your controller, something like:</p>\n\n<pre><code>$scope.form.type = $scope.typeOptions[0].value;\n</code></pre>\n\n<p>Here is the jsFiddle: <a href=\"http://jsfiddle.net/MTfRD/3/\">http://jsfiddle.net/MTfRD/3/</a></p>\n\n<p>In short: the empty option means that no valid model is selected (by valid I mean: from the set of options). You need to select a valid model value to get rid of this empty option.</p>\n    "},{"t":"Combating AngularJS executing controller twice","l":"http://stackoverflow.com/questions/15535336/combating-angularjs-executing-controller-twice","q":"\n\n<p>I understand AngularJS runs through some code twice, sometimes even more, like $watch events, constantly checking model states etc.</p>\n\n<p>However my code:</p>\n\n<pre><code>function MyController($scope, User, local) {\n\nvar $scope.User = local.get(); // Get locally save user data\n\nUser.get({ id: $scope.User._id.$oid }, function(user) {\n  $scope.User = new User(user);\n  local.save($scope.User);\n});\n\n//...\n</code></pre>\n\n<p>Is executed twice, inserting 2 records into my DB. I'm clearly still learning as I've been banging my head against this for ages!</p>\n    ","a":"\n<p>Ok figured it out with some guidance from Stewie in the comments.</p>\n\n<p>My app has routing, and it was navigating to <code>MyController</code> like so:</p>\n\n<pre><code>$routeProvider.when('/',\n                   { templateUrl: 'pages/home.html',\n                     controller: MyController });\n</code></pre>\n\n<p>But I also had this in <code>home.html</code>:</p>\n\n<pre><code>&lt;div data-ng-controller=\"MyController\"&gt;\n</code></pre>\n\n<p>Which was instructing AngularJS to digest my controller twice.</p>\n\n<p><strong>To solve it I simply removed the <code>data-ng-controller</code> from my HTML.</strong></p>\n\n<p>Obviously really when I think about it!</p>\n\n<p>Note: If you want you could remove the <code>controller:</code> property from the routing and keep the <code>ngController</code> directive in your HTML. Either way Angular will now only execute your controller once.</p>\n    "},{"t":"AngularJS 1.2 $injector:modulerr","l":"http://stackoverflow.com/questions/18287482/angularjs-1-2-injectormodulerr","q":"\n\n<p>When using angular 1.2 instead of 1.07 the following piece of code is not valid anymore, why?</p>\n\n<pre><code>'use strict';\n\nvar app = angular.module('myapp', []);\n\napp.config(['$routeProvider', '$locationProvider',\n    function($routeProvider, $locationProvider) {\n        $locationProvider.html5Mode(true);\n        $routeProvider.\n        when('/', {\n            templateUrl: 'part.html',\n            controller: 'MyCtrl'\n        }).\n        otherwise({\n            redirectTo: '/'\n        });\n    }\n]);\n</code></pre>\n\n<p>the issue is in the injector configuration part (app.config):</p>\n\n<pre><code>Uncaught Error: [$injector:modulerr] http://errors.angularjs.org/1.2.0rc1/$injector/modulerr?p0=muninn&amp;p1=Error%…eapis.com%2Fajax%2Flibs%2Fangularjs%2F1.2.0rc1%2Fangular.min.js%3A31%3A252) \n</code></pre>\n\n<p>If I remember correctly this issue started with angular 1.1.6.</p>\n    ","a":"\n<p>The problem was caused by missing inclusion of ngRoute module. Since version 1.1.6 it's a separate part:</p>\n\n<pre><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0rc1/angular-route.min.js\"&gt;&lt;/script&gt;\n\nvar app = angular.module('myapp', ['ngRoute']);\n</code></pre>\n    "},{"t":"if else statement in AngularJS templates","l":"http://stackoverflow.com/questions/15810278/if-else-statement-in-angularjs-templates","q":"\n\n<p>I want to do a condition in an AngularJS template. I fetch a video list from the Youtube API. Some of the videos are in 16:9 ratio and some are in 4:3 ratio.</p>\n\n<p>I want to make a condition like this:</p>\n\n<pre><code>if video.yt$aspectRatio equals widescreen then \n    element's attr height=\"270px\"\nelse\n    element's attr height=\"360px\"\n</code></pre>\n\n<p>I'm iterating the videos using <code>ng-repeat</code>. Have no idea what should I do for this condition:</p>\n\n<ul>\n<li>Add a function in the scope? </li>\n<li>Do it in template?</li>\n</ul>\n    ","a":"\n<p>Angularjs (versions below 1.1.5) does not provide the <code>if/else</code> functionality . Following are a few options to consider for what you want to achieve:</p>\n\n<p>(<strong><em>Jump to the update below (#4) if you are using version 1.1.5 or greater</em></strong>)</p>\n\n<h3>1. <a href=\"http://docs.angularjs.org/api/ng.directive%3angSwitch\"><code>ng-switch</code></a> directive:</h3>\n\n<p>can be used something like the following.</p>\n\n<pre><code>&lt;div ng-switch on=\"video\"&gt;\n    &lt;div ng-switch-when=\"video.large\"&gt;\n        &lt;!-- code to render a large video block--&gt;\n    &lt;/div&gt;\n    &lt;div ng-switch-default&gt;\n        &lt;!-- code to render the regular video block --&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<h3>2. <a href=\"http://docs.angularjs.org/api/ng.directive%3angHide\"><code>ng-hide</code></a> / <a href=\"http://docs.angularjs.org/api/ng.directive%3angShow\"><code>ng-show</code></a> directives</h3>\n\n<p>Alternatively, you might also use <code>ng-show/ng-hide</code> but using this will actually render both a large video and a small video element and then hide the one that meets the <code>ng-hide</code> condition and shows the one that meets <code>ng-show</code> condition. So on each page you'll actually be rendering two different elements.</p>\n\n<h3>3. Another option to consider is <a href=\"http://docs.angularjs.org/api/ng.directive%3angClass\"><code>ng-class</code></a> directive.</h3>\n\n<p>This can be used as follows.</p>\n\n<pre><code>&lt;div ng-class=\"{large-video: video.large}\"&gt;\n    &lt;!-- video block goes here --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The above basically will add a <code>large-video</code> css class to the div element if <code>video.large</code> is truthy.</p>\n\n<h3>UPDATE: <a href=\"http://code.angularjs.org/1.1.5/docs/\">Angular 1.1.5</a> introduced the <a href=\"http://docs.angularjs.org/api/ng.directive%3angIf\"><code>ngIf directive</code></a></h3>\n\n<h3>4. <a href=\"http://docs.angularjs.org/api/ng.directive%3angIf\"><code>ng-if</code></a> directive:</h3>\n\n<p>In the versions above <code>1.1.5</code> you can use the <code>ng-if</code> directive. This would remove the element if the expression provided returns <code>false</code> and re-inserts the <code>element</code> in the DOM if the expression returns <code>true</code>. Can be used as follows.</p>\n\n<pre><code>&lt;div ng-if=\"video == video.large\"&gt;\n    &lt;!-- code to render a large video block--&gt;\n&lt;/div&gt;\n&lt;div ng-if=\"video != video.large\"&gt;\n    &lt;!-- code to render the regular video block --&gt;\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"What's the difference between ng-model and ng-bind","l":"http://stackoverflow.com/questions/12419619/whats-the-difference-between-ng-model-and-ng-bind","q":"\n\n<p>I'm currently learning angularjs and am having difficulty understanding the difference between <code>ng-bind</code> and <code>ng-model</code>.</p>\n\n<p>Can anyone tell me how they differ and when one should be used over the other?</p>\n    ","a":"\n<p><strong>ng-bind</strong> has one-way data binding ($scope --&gt; view). It has a shortcut <code>{{ val }}</code>\nwhich displays the scope value <code>$scope.val</code> inserted into html where <code>val</code> is a variable name.</p>\n\n<p><strong>ng-model</strong> is intended to be put inside of form elements and has two-way data binding ($scope --&gt; view and view --&gt; $scope) e.g. <code>&lt;input ng-model=\"val\"/&gt;</code>.</p>\n    "},{"t":"How to use a filter in a controller?","l":"http://stackoverflow.com/questions/14302267/how-to-use-a-filter-in-a-controller","q":"\n\n<p>I have written a filter function which will return data based on the argument you are passing. I want the same functionality in my controller. Is it possible to reuse the filter function in a controller? </p>\n\n<p>This is what I've tried so far:</p>\n\n<pre><code>function myCtrl($scope,filter1)\n{ \n    // i simply used the filter function name, it is not working.\n}\n</code></pre>\n    ","a":"\n<p>Inject $filter to your controller</p>\n\n<pre><code>function myCtrl($scope, $filter)\n{\n}\n</code></pre>\n\n<p>Then wherever you want to use that filter, just use it like this:</p>\n\n<pre><code>$filter('filtername');\n</code></pre>\n\n<p>If you want to pass arguments to that filter, do it using separate parentheses:</p>\n\n<pre><code>function myCtrl($scope, $filter)\n{\n    $filter('filtername')(arg1,arg2);\n}\n</code></pre>\n    "},{"t":"Initialize AngularJS service with asynchronous data","l":"http://stackoverflow.com/questions/16286605/initialize-angularjs-service-with-asynchronous-data","q":"\n\n<p>I have an AngularJS service that I want to initialize with some asynchronous data. Something like this:</p>\n\n<pre><code>myModule.service('MyService', function($http) {\n    var myData = null;\n\n    $http.get('data.json').success(function (data) {\n        myData = data;\n    });\n\n    return {\n        setData: function (data) {\n            myData = data;\n        },\n        doStuff: function () {\n            return myData.getSomeData();\n        }\n    };\n});\n</code></pre>\n\n<p>Obviously this won't work because if something tries to call <code>doStuff()</code> before <code>myData</code> gets back I will get a null pointer exception. As far as I can tell from reading some of the other questions asked <a href=\"http://stackoverflow.com/questions/12657389/angularjs-load-service-then-call-controller-and-render\">here</a> and <a href=\"http://stackoverflow.com/questions/15164013/json-to-initialize-data-in-service\">here</a> I have a few options, but none of them seem very clean (perhaps I am missing something):</p>\n\n<p><strong>Setup Service with \"run\"</strong></p>\n\n<p>When setting up my app do this:</p>\n\n<pre><code>myApp.run(function ($http, MyService) {\n    $http.get('data.json').success(function (data) {\n        MyService.setData(data);\n    });\n});\n</code></pre>\n\n<p>Then my service would look like this:</p>\n\n<pre><code>myModule.service('MyService', function() {\n    var myData = null;\n    return {\n        setData: function (data) {\n            myData = data;\n        },\n        doStuff: function () {\n            return myData.getSomeData();\n        }\n    };\n});\n</code></pre>\n\n<p>This works some of the time but if the asynchronous data happens to take longer than it takes for everything to get initialized I get a null pointer exception when I call <code>doStuff()</code></p>\n\n<p><strong>Use promise objects</strong></p>\n\n<p>This would probably work. The only downside it everywhere I call MyService I will have to know that doStuff() returns a promise and all the code will have to us <code>then</code> to interact with the promise. I would rather just wait until myData is back before loading the my application.</p>\n\n<p><strong>Manual Bootstrap</strong> </p>\n\n<pre><code>angular.element(document).ready(function() {\n    $.getJSON(\"data.json\", function (data) {\n       // can't initialize the data here because the service doesn't exist yet\n       angular.bootstrap(document);\n       // too late to initialize here because something may have already\n       // tried to call doStuff() and would have got a null pointer exception\n    });\n});\n</code></pre>\n\n<p><strong>Global Javascript Var</strong>\nI could send my JSON directly to a global Javascript variable:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"data.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>data.js:</p>\n\n<pre><code>var dataForMyService = { \n// myData here\n};\n</code></pre>\n\n<p>Then it would be available when initializing <code>MyService</code>:</p>\n\n<pre><code>myModule.service('MyService', function() {\n    var myData = dataForMyService;\n    return {\n        doStuff: function () {\n            return myData.getSomeData();\n        }\n    };\n});\n</code></pre>\n\n<p>This would work too, but then I have a global javascript variable which smells bad.</p>\n\n<p>Are these my only options? Are one of these options better than the others? I know this is a pretty long question, but I wanted to show that I have tried to explore all my options. Any guidance would greatly be appreciated. </p>\n    ","a":"\n<p>Have you had a look at <a href=\"https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider\"><code>$routeProvider.when('/path',{ resolve:{...}</code></a>? It can make the promise approach a bit cleaner:</p>\n\n<p>Expose a promise in your service:\n</p>\n\n<pre><code>app.service('MyService', function($http) {\n    var myData = null;\n\n    var promise = $http.get('data.json').success(function (data) {\n      myData = data;\n    });\n\n    return {\n      promise:promise,\n      setData: function (data) {\n          myData = data;\n      },\n      doStuff: function () {\n          return myData;//.getSomeData();\n      }\n    };\n});\n</code></pre>\n\n<p>Add <code>resolve</code> to your route config:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.config(function($routeProvider){\n  $routeProvider\n    .when('/',{controller:'MainCtrl',\n    template:'&lt;div&gt;From MyService:&lt;pre&gt;{{data | json}}&lt;/pre&gt;&lt;/div&gt;',\n    resolve:{\n      'MyServiceData':function(MyService){\n        // MyServiceData will also be injectable in your controller, if you don't want this you could create a new promise with the $q service\n        return MyService.promise;\n      }\n    }})\n  }):\n</code></pre>\n\n<p>Your controller won't get instantiated before all dependencies are resolved:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.controller('MainCtrl', function($scope,MyService) {\n  console.log('Promise is now resolved: '+MyService.doStuff().data)\n  $scope.data = MyService.doStuff();\n});\n</code></pre>\n\n<p>I've made an example at plnkr: <a href=\"http://plnkr.co/edit/GKg21XH0RwCMEQGUdZKH?p=preview\">http://plnkr.co/edit/GKg21XH0RwCMEQGUdZKH?p=preview</a></p>\n    "},{"t":"Delaying AngularJS route change until model loaded to prevent flicker","l":"http://stackoverflow.com/questions/11972026/delaying-angularjs-route-change-until-model-loaded-to-prevent-flicker","q":"\n\n<p>I am wondering if there is a way (similar to Gmail) for AngularJS to <strong>delay showing a new route until after each model and its data has been fetched</strong> using its respective services.</p>\n\n<p>For example, if there were a <code>ProjectsController</code> that listed all Projects and <code>project_index.html</code> which was the template that showed these Projects, <code>Project.query()</code> would be fetched completely before showing the new page.</p>\n\n<p>Until then, the old page would still continue to show (for example, if I were browsing another page and then decided to see this Project index).</p>\n    ","a":"\n<p><a href=\"http://docs.angularjs.org/api/ngRoute.$routeProvider\" rel=\"nofollow\">$routeProvider</a> <a href=\"http://docs.angularjs.org/api/ngRoute.$routeProvider\" rel=\"nofollow\">resolve</a> property allows delaying of route change until data is loaded.</p>\n\n<p>First define a route with <code>resolve</code> attribute like this.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('phonecat', ['phonecatFilters', 'phonecatServices', 'phonecatDirectives']).\n  config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n      when('/phones', {\n        templateUrl: 'partials/phone-list.html', \n        controller: PhoneListCtrl, \n        resolve: PhoneListCtrl.resolve}).\n      when('/phones/:phoneId', {\n        templateUrl: 'partials/phone-detail.html', \n        controller: PhoneDetailCtrl, \n        resolve: PhoneDetailCtrl.resolve}).\n      otherwise({redirectTo: '/phones'});\n}]);\n</code></pre>\n\n<p>notice that the <code>resolve</code> property is defined on route.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function PhoneListCtrl($scope, phones) {\n  $scope.phones = phones;\n  $scope.orderProp = 'age';\n}\n\nPhoneListCtrl.resolve = {\n  phones: function(Phone, $q) {\n    // see: https://groups.google.com/forum/?fromgroups=#!topic/angular/DGf7yyD4Oc4\n    var deferred = $q.defer();\n    Phone.query(function(successData) {\n            deferred.resolve(successData); \n    }, function(errorData) {\n            deferred.reject(); // you could optionally pass error data here\n    });\n    return deferred.promise;\n  },\n  delay: function($q, $defer) {\n    var delay = $q.defer();\n    $defer(delay.resolve, 1000);\n    return delay.promise;\n  }\n}\n</code></pre>\n\n<p>Notice that the controller definition contains a resolve object which declares things which should be available to the controller constructor. Here the <code>phones</code> is injected into the controller and it is defined in the <code>resolve</code> property.</p>\n\n<p>The <code>resolve.phones</code> function is responsible for returning a promise. All of the promises are collected and the route change is delayed until after all of the promises are resolved.</p>\n\n<p>Working demo: <a href=\"http://mhevery.github.com/angular-phonecat/app/#/phones\" rel=\"nofollow\">http://mhevery.github.com/angular-phonecat/app/#/phones</a>\nSource: <a href=\"https://github.com/mhevery/angular-phonecat/commit/ba33d3ec2d01b70eb5d3d531619bf90153496831\" rel=\"nofollow\">https://github.com/mhevery/angular-phonecat/commit/ba33d3ec2d01b70eb5d3d531619bf90153496831</a></p>\n    "},{"t":"Working with select using Angular's ng-options","l":"http://stackoverflow.com/questions/13047923/working-with-select-using-angulars-ng-options","q":"\n\n<p>I have read about it in other posts but couldn't figure out. \nI have array:</p>\n\n<pre><code>$scope.items = [\n   {ID: '000001', Title: 'Chicago'},\n   {ID: '000002', Title: 'New York'},\n   {ID: '000003', Title: 'Washington'},\n];\n</code></pre>\n\n<p>I want to render this</p>\n\n<pre><code>&lt;select&gt;\n  &lt;option value=\"000001\"&gt;Chicago&lt;/option&gt;\n  &lt;option value=\"000002\"&gt;New York&lt;/option&gt;\n  &lt;option value=\"000003\"&gt;Washington&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>And also I want to select option with ID=000002.</p>\n\n<p>I have read this <a href=\"http://docs.angularjs.org/api/ng.directive%3aselect\">http://docs.angularjs.org/api/ng.directive:select</a> and tried but can't figure out.</p>\n    ","a":"\n<p>One thing to note is that ngModel is <em>required</em> for ngOptions to work... note the <code>ng-model=\"blah\"</code> which is saying \"set $scope.blah to the selected value\".</p>\n\n<p>Try this:</p>\n\n<pre><code>&lt;select ng-model=\"blah\" ng-options=\"item.ID as item.Title for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Here's more from Angular's documentation (if you haven't seen it):</p>\n\n<blockquote>\n  <p>for array data sources:</p>\n  \n  <ul>\n  <li>label for value in array</li>\n  <li>select as label for value in array</li>\n  <li>label group by group for value in array\n  = select as label group by group for value in array</li>\n  </ul>\n  \n  <p>for object data sources:</p>\n  \n  <ul>\n  <li>label for (key , value) in object</li>\n  <li>select as label for (key , value) in object</li>\n  <li>label group by group for (key, value) in object</li>\n  <li>select as label group by group for (key, value) in object</li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<h2>EDIT: For some clarification on option tag values in Angular</h2>\n\n<p>When you use <code>ng-options</code>, <strong>the values of option tags written out by ng-options will always be the index of the array item the option tag relates to</strong>. This is because Angular actually allows you to select entire objects with select controls, and not just primitive types. For example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.controller('MainCtrl', function($scope) {\n   $scope.items = [\n     { id: 1, name: 'foo' },\n     { id: 2, name: 'bar' },\n     { id: 3, name: 'blah' }\n   ];\n});\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-controller=\"MainCtrl\"&gt;\n   &lt;select ng-model=\"selectedItem\" ng-options=\"item as item.name for item in items\"&gt;&lt;/select&gt;\n   &lt;pre&gt;{{selectedItem | json}}&lt;/pre&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The above will allow you to select an entire object into <code>$scope.selectedItem</code> directly. <strong>The point is, with Angular, you don't need to worry about what's in your option tag. Let Angular handle that, you should only care about what's in your model in your scope.</strong></p>\n\n<p><a href=\"http://plnkr.co/edit/SxIvt4KThWLtWvh3PnOh?p=preview\">Here is a plunker demonstrating the behavior above, and showing the html written out</a></p>\n\n<hr>\n\n<h2>EDIT 2: Dealing with the default option:</h2>\n\n<p>There are a few things I've failed to mention above relating to the default option.</p>\n\n<p><strong>Selecting first option and removing the empty option:</strong></p>\n\n<p>You can do this by adding a simple <code>ng-init</code> that sets the model (from <code>ng-model</code>) to the first element in the items your repeating in <code>ng-options</code>:</p>\n\n<pre><code>&lt;select ng-init=\"foo = foo || items[0]\" ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Note: this could get a little crazy if foo happens to be initialized properly to something \"falsy\". In that case, you'll want to handle the initialization of foo in your controller, most likely.</p>\n\n<p><strong>Customizing the default option:</strong></p>\n\n<p>This is a little different, here all you need to do is add an option tag as a child of your select, with an empty value attribute, then customize it's inner text:</p>\n\n<pre><code>&lt;select ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;\n   &lt;option value=\"\"&gt;Nothing selected&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Note: that in this case the \"empty\" option will stay there even after you select a different option. This isn't the case for the default behavior of selects under Angular.</p>\n\n<p><strong>A customized default option that hides after a selection is made:</strong></p>\n\n<p>If you wanted your customized default option to go away after you select a value, you can add an ng-hide attribute to your default option:</p>\n\n<pre><code>&lt;select ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;\n   &lt;option value=\"\" ng-if=\"foo\"&gt;Select something to remove me.&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n    "},{"t":"Directive: link vs compile vs controller","l":"http://stackoverflow.com/questions/15676614/directive-link-vs-compile-vs-controller","q":"\n\n<p>when you create a directive, you can put code into the compiler, the link function or the controller. \nIn the docs they explain that:</p>\n\n<ul>\n<li>compile and link function are used in different phases of the angular\ncycle</li>\n<li>controllers are shared between directives.</li>\n</ul>\n\n<p>However, for me it is not clear, which kind of code should go where. E.g.:\nI can create functions in compile and have them attached to the scope in link. Or I only attach functions to the scope in the controller? How are controllers shared between directives, if each directive can have its own controller? Are really the controllers shared or is it just the scope properties?</p>\n\n<p>Thanks\nschacki</p>\n    ","a":"\n<p><strong>Compile :</strong> </p>\n\n<p>This is the phase where Angular actually compiles your directive. This compile function is called just once for each references to the given directive. For example, say you are using the ng-repeat directive. ng-repeat will have to look up the element it is attached to, extract the html fragment that it is attached to and create a template function. </p>\n\n<p>If you have used HandleBars, underscore templates or equivalent, its like compiling their templates to extract out a template function. To this template function you pass data and the return value of that function is the html with the data in the right places. </p>\n\n<p>The compilation phase is that step in Angular which returns the template function. This template function in angular is called the linking function. </p>\n\n<p><strong>Linking phase :</strong> </p>\n\n<p>The linking phase is where you attach the data ( $scope ) to the linking function and it should return you the linked html. Since the directive also specifies where this html goes or what it changes, it is already good to go. This is the function where you want to make changes to the linked html, i.e the html that already has the data attached to it. In angular if you write code in the linking function its generally the post-link function (by default). It is kind of a callback that gets called after the linking function has linked the data with the template.  </p>\n\n<p><strong>Controller :</strong></p>\n\n<p>The controller is a place where you put in some directive specific logic. This logic can go into the linking function as well, but then you would have to put that logic on the scope to make it \"shareable\". The problem with that is that you would then be corrupting the scope with your directives stuff which is not really something that is expected.\nSo what is the alternative if two Directives want to talk to each other / co-operate with each other? Ofcourse you could put all that logic into a service and then make both these directives depend on that service but that just brings in one more dependency. The alternative is to provide a Controller for this scope ( usually isolate scope ? ) and then this controller is injected into another directive when that directive \"requires\" the other one. See tabs and panes on the first page of angularjs.org for an example. </p>\n    "},{"t":"Difference between the 'controller', 'link' and 'compile' functions when defining a directive","l":"http://stackoverflow.com/questions/12546945/difference-between-the-controller-link-and-compile-functions-when-definin","q":"\n\n<p>Some places seem to use the controller function for directive logic and other use link. The tabs example on the angular homepage uses controller for one and link for other directive. What is the difference between two? </p>\n    ","a":"\n<p>I'm going to expand your question a bit and also include the compile function.</p>\n\n<ul>\n<li><p><em>compile function</em> - use for <strong>template</strong> DOM manipulation (i.e., manipulation of tElement = template element), hence manipulations that apply to all DOM clones of the template associated with the directive.  (If you also need a link function (or pre and post link functions), and you defined a compile function, the compile function must return the link function(s) because the <code>'link'</code> attribute is ignored if the <code>'compile'</code> attribute is defined.)</p></li>\n<li><p><em>link function</em> - normally use for registering DOM listeners (i.e., <code>$watch</code> expressions on the scope) as well as updating the DOM (i.e., manipulation of iElement = individual instance element). It is executed after the template has been cloned -- e.g., inside an <code>&lt;li ng-repeat...&gt;</code>, the link function is executed after the <code>&lt;li&gt;</code> template (tElement) has been cloned (into an iElement) for that particular <code>&lt;li&gt;</code> element.  A <code>$watch</code> allows a directive to be notified of scope property changes (a scope is associated with each instance), which allows the directive to render an updated instance value to the DOM.</p></li>\n<li><p><em>controller function</em> - must be used when another directive needs to interact with this directive.  E.g., on the AngularJS home page, the pane directive needs to add itself to the scope maintained by the tabs directive, hence the tabs directive needs to define a controller method (think API) that the pane directive can access/call. <br> <br>For a more in-depth explanation of the tabs and pane directives, and why the tabs directive creates a function on its controller using <code>this</code> (rather than on <code>$scope</code>), please see <a href=\"http://stackoverflow.com/questions/11605917/this-vs-scope-in-angularjs-controllers/14168699#14168699\">this vs $scope in AngularJS controllers</a>.</p></li>\n</ul>\n\n<p>In general, you can put methods, <code>$watches</code>, etc. into either the directive's controller or link function.  The controller will run first, which sometimes matters (see this <a href=\"http://jsfiddle.net/mrajcok/xfh3F/\">fiddle</a> which logs when the ctrl and link functions run with two nested directives).  As Josh mentioned in a <a href=\"http://stackoverflow.com/questions/14620521/how-to-write-a-directive-in-angularjs/14621193#comment20441740_14621193\">comment</a>, you may want to put scope-manipulation functions inside a controller just for consistency with the rest of the framework.</p>\n    "},{"t":"angular.min.js.map not found, what is it exactly?","l":"http://stackoverflow.com/questions/18425841/angular-min-js-map-not-found-what-is-it-exactly","q":"\n\n<p>When I load the page and check chrome console i find these errors:\n<img src=\"http://i.stack.imgur.com/U3lBw.png\" alt=\"enter image description here\"></p>\n\n<p>what exactly are map files in angular? </p>\n\n<p>I did reference the angular.min.js but not the angular.min.js.map.\nI am using the angular 1.2 rc release by the way and I just started seeing these errors when i switched to this release.</p>\n\n<pre><code>ERRORS:\nGET http://localhost:44786/Scripts/angular-route.min.js.map 404 (Not Found)       :44786/Scripts/angular-route.min.js.map:1\nGET http://localhost:44786/Scripts/angular-animate.min.js.map 404 (Not Found) :44786/Scripts/angular-animate.min.js.map:1\nGET http://localhost:44786/Scripts/angular-resource.min.js.map 404 (Not Found) :44786/Scripts/angular-resource.min.js.map:1\nGET http://localhost:44786/Scripts/angular.min.js.map 404 (Not Found) :44786/Scripts/angular.min.js.map:1\n</code></pre>\n    ","a":"\n<p>As eaon21 and monkey said, source map files basically turn minified code into its unminified version for debugging.</p>\n\n<p>You can find the .map files <a href=\"http://code.angularjs.org/1.2.12/\">here</a>. Just add them into the same directory as the minified js files and it'll stop complaining. The reason they get fetched is the</p>\n\n<pre><code>/*\n//@ sourceMappingURL=angular.min.js.map\n*/\n</code></pre>\n\n<p>at the end of angular.min.js. If you don't want to add the .map files you can remove those lines and it'll stop the fetch attempt, but if you plan on debugging it's always good to keep the source maps linked.</p>\n    "},{"t":"How to preventDefault on anchor tags?","l":"http://stackoverflow.com/questions/10931315/how-to-preventdefault-on-anchor-tags","q":"\n\n<p>Let's say I have an anchor tag such as</p>\n\n<pre><code>&lt;a href=\"#\" ng-click=\"do()\"&gt;Click&lt;/a&gt;\n</code></pre>\n\n<p>How can I prevent the browser from navigating to # in <strong>AngularJS</strong> ?</p>\n    ","a":"\n<p><strong>UPDATE</strong>:  I've since changed my mind on this solution.  After more development and time spent working on this, I believe a better solution to this problem is to do the following:</p>\n\n<pre><code>&lt;a ng-click=\"myFunction()\"&gt;Click Here&lt;/a&gt;\n</code></pre>\n\n<p>And then update your <code>css</code> to have an extra rule:</p>\n\n<pre><code>a[ng-click]{\n    cursor: pointer;\n}\n</code></pre>\n\n<p>Its much more simple and provides the exact same functionality and is much more efficient.  Hope that might be helpful to anyone else looking up this solution in the future.</p>\n\n<hr>\n\n<p><em>The following is my previous solution, which I am leaving here just for legacy purposes:</em></p>\n\n<p>If you are having this problem a lot, a simple directive that would fix this issue is the following:</p>\n\n<pre><code>app.directive('a', function() {\n    return {\n        restrict: 'E',\n        link: function(scope, elem, attrs) {\n            if(attrs.ngClick || attrs.href === '' || attrs.href === '#'){\n                elem.on('click', function(e){\n                    e.preventDefault();\n                });\n            }\n        }\n   };\n});\n</code></pre>\n\n<p>It checks all anchor tags (<code>&lt;a&gt;&lt;/a&gt;</code>) to see if their <code>href</code> attribute is either an empty string (<code>\"\"</code>) or a hash (<code>'#'</code>) or there is an <code>ng-click</code> assignment.  If it finds any of these conditions, it catches the event and prevents the default behavior.</p>\n\n<p>The only down side is that it runs this directive for all anchor tags.  So if you have a lot of anchor tags on the page and you only want to prevent the default behavior for a small number of them, then this directive isn't very efficient.  However, I almost always want to <code>preventDefault</code>, so I use this directive all over in my AngularJS apps.</p>\n    "},{"t":"How can I iterate over the keys, value in ng-repeat in angular","l":"http://stackoverflow.com/questions/15127834/how-can-i-iterate-over-the-keys-value-in-ng-repeat-in-angular","q":"\n\n<p>In my controller, I have data like:\n<code>$scope.object = data</code></p>\n\n<p>Now this data is the dictionary with keys and values from <code>json</code>.</p>\n\n<p>I can access the attribute with <code>object.name</code> in the template. Is there any way that I can iterate over the keys as well and display them in table like</p>\n\n<p><code>&lt;tr&gt;&lt;td&gt; {{key}} &lt;/td&gt; &lt;td&gt; data.key &lt;/td&gt;</code></p>\n\n<p>The data is like this</p>\n\n<pre><code>{\n    \"id\": 2,\n    \"project\": \"wewe2012\",\n    \"date\": \"2013-02-26\",\n    \"description\": \"ewew\",\n    \"eet_no\": \"ewew\",\n}\n</code></pre>\n    ","a":"\n<p>How about:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;tr ng-repeat=\"(key, value) in data\"&gt;\n  &lt;td&gt; {{key}} &lt;/td&gt; &lt;td&gt; {{ value }} &lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n\n<p>This method is listed in the docs: <a href=\"http://docs.angularjs.org/api/ng.directive:ngRepeat\">http://docs.angularjs.org/api/ng.directive:ngRepeat</a></p>\n    "},{"t":"Angular ng-repeat Error “Duplicates in a repeater are not allowed.”","l":"http://stackoverflow.com/questions/16296670/angular-ng-repeat-error-duplicates-in-a-repeater-are-not-allowed","q":"\n\n<p>I am defining a custom filter like so:</p>\n\n<pre><code>&lt;div class=\"idea item\" ng-repeat=\"item in items\" isoatom&gt;    \n    &lt;div class=\"section comment clearfix\" ng-repeat=\"comment in item.comments | range:1:2\"&gt;\n        ....\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>As you can see the ng-repeat where the filter is being used is nested within another ng-repeat</p>\n\n<p>The filter is defined like this:</p>\n\n<pre><code>myapp.filter('range', function() {\n    return function(input, min, max) {\n        min = parseInt(min); //Make string input int\n        max = parseInt(max);\n        for (var i=min; i&lt;max; i++)\n            input.push(i);\n        return input;\n    };\n});\n</code></pre>\n\n<p>I'm getting:</p>\n\n<blockquote>\n  <p>Error: Duplicates in a repeater are not allowed. Repeater: comment in item.comments | range:1:2 ngRepeatAction@<a href=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.4/an\">https://ajax.googleapis.com/ajax/libs/angularjs/1.1.4/an</a></p>\n</blockquote>\n    ","a":"\n<p>The solution is actually described here: <a href=\"http://www.anujgakhar.com/2013/06/15/duplicates-in-a-repeater-are-not-allowed-in-angularjs/\">http://www.anujgakhar.com/2013/06/15/duplicates-in-a-repeater-are-not-allowed-in-angularjs/</a></p>\n\n<p>AngularJS does not allow duplicates in a ng-repeat directive. This means if you are trying to do the following, you will get an error.</p>\n\n<pre><code>// the below will throw the error Duplicates in a repeater are not allowed. Repeater: row in [1,1,1] key: number:1\n&lt;div ng-repeat=\"row in [1,1,1]\"&gt;\n</code></pre>\n\n<p>However, changing the above code slightly to define an index to determine uniqueness as below will get it working again.</p>\n\n<pre><code>// this will work\n&lt;div ng-repeat=\"row in [1,1,1] track by $index\"&gt;\n</code></pre>\n\n<p>Official docs are here: <a href=\"https://docs.angularjs.org/error/ngRepeat/dupes\">https://docs.angularjs.org/error/ngRepeat/dupes</a></p>\n    "},{"t":"How is AngularJS different from jQuery","l":"http://stackoverflow.com/questions/13151725/how-is-angularjs-different-from-jquery","q":"\n\n<p>I only know one js library and that is <a href=\"http://jquery.com/\">jQuery</a>.<br>\nBut my other coders in the group are changing <a href=\"http://angularjs.org/\">AngularJS</a> as their default library in new project.</p>\n\n<p>I don't know anything about it. How is it different from jQuery?<br>\nI already have a set of functions done for similar tasks in jQuery. Can I still use jQuery stuff with AngularJS?</p>\n    ","a":"\n<p>Basically, jQuery is a great tool for you to manipulate and control DOM elements.\nIf you only focus on DOM elements and no Data CRUD, like building a website not web application, jQuery is the one of the top tools. (You can use AngularJS for this purpose as well.)</p>\n\n<p>AngularJS is a <strong>framework</strong>. It has following features</p>\n\n<ol>\n<li>Two way data binding</li>\n<li>MVW pattern (MVC-ish)</li>\n<li>Template</li>\n<li>Custom-directive (reusable components, custom markup)</li>\n<li>REST-friendly</li>\n<li>Deep Linking (set up a link for any dynamic page)</li>\n<li>Form Validation</li>\n<li>Server Communication</li>\n<li>Localization</li>\n<li>Dependency injection</li>\n<li>Full testing environment (both unit, e2e)</li>\n</ol>\n\n<p>check this <a href=\"http://sberan.github.com/angularTalk/\">presentation</a> and this <a href=\"http://www.yearofmoo.com/2012/08/use-angularjs-to-power-your-web-application.html\">badass introduction</a> </p>\n\n<p>Don't forget to read the official <a href=\"http://docs.angularjs.org/guide/\">developer guide</a> </p>\n\n<p>Or learn it from these awesome <a href=\"http://egghead.io/\">video tutorials</a> </p>\n\n<p>If you wanna watch more tutorial video, check out this post, <a href=\"http://www.thesocialmediatoday.com/collection-of-best-60-angularjs-tutorials/\">Collection of best 60+ Angularjs tutorials</a>.</p>\n\n<p>You can use jQuery with AngularJS without any issue. </p>\n\n<p>In fact, AngularJS uses jQuery lite in it. Like I said jQ is a great tool.</p>\n\n<p>From <a href=\"http://docs.angularjs.org/misc/faq\">FAQ</a></p>\n\n<blockquote>\n  <p>Does Angular use the jQuery library?</p>\n  \n  <p>Yes, Angular can use jQuery if it's present in your app when the\n  application is being bootstrapped. If jQuery is not present in your\n  script path, Angular falls back to its own implementation of the\n  subset of jQuery that we call jQLite.</p>\n</blockquote>\n\n<p>However, don't try to use jQuery to modify the DOM in AngularJS controllers, do it in your directives.</p>\n    "},{"t":"AngularJS ng-include","l":"http://stackoverflow.com/questions/13943471/angularjs-ng-include","q":"\n\n<p>I'm trying to include an html snippet inside of an <code>ng-repeat</code>, but I can't get the include to work. It seems the current syntax of <code>ng-include</code> is different than what it was previously: I see many examples using <code>&lt;div ng-include src=\"path/file.html\"&gt;&lt;/div&gt;</code> but in the <a href=\"http://docs.angularjs.org/api/ng.directive:ngInclude#Usage\">official docs</a>, it says to use <code>&lt;div ng-include=\"path/file.html\"&gt;&lt;/div&gt;</code> but then <a href=\"http://docs.angularjs.org/api/ng.directive:ngInclude#Example\">down the page</a> it is shown as <code>&lt;div ng-include src=\"path/file.html\"&gt;&lt;/div&gt;</code>.</p>\n\n<p>Regardles, I tried</p>\n\n<blockquote>\n  <p><code>&lt;div ng-include=\"views/sidepanel.html\"&gt;&lt;/div&gt;</code></p>\n  \n  <p><code>&lt;div ng-include src=\"views/sidepanel.html\"&gt;&lt;/div&gt;</code></p>\n  \n  <p><code>&lt;ng-include src=\"views/sidepanel.html\"&gt;&lt;/ng-include&gt;</code></p>\n  \n  <p><code>&lt;ng-include=\"views/sidepanel.html\"&gt;&lt;/ng-include&gt;</code></p>\n  \n  <p><code>&lt;ng:include src=\"views/sidepanel.html\"&gt;&lt;/ng:include&gt;</code></p>\n</blockquote>\n\n<p>My snippet is not very much code, but it's got a lot going on; I read in <a href=\"http://stackoverflow.com/questions/12361680/\">SO#12361680</a> that that could cause a problem, so I replaced the content of <code>sidepanel.html</code> with just the word <code>foo</code>, and still nothing.</p>\n\n<p>I also tried declaring the template directly in the page like this:</p>\n\n<pre><code>&lt;script type=\"text/ng-template\" id=\"tmpl\"&gt;\n    foo\n&lt;/script&gt;\n</code></pre>\n\n<p>And running thru all the variations of <code>ng-include</code> referencing the script's <code>id</code>, and still nothin'.</p>\n\n<p>My page had a lot more in it, but now I've stripped it down to just this:</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;!-- angular includes --&gt;\n&lt;/head&gt;\n&lt;body ng-view=\"views/main.html\"&gt; &lt;!-- view is actually set in the router --&gt;\n    &lt;!-- views/main.html --&gt;\n    &lt;header&gt;\n        &lt;h2&gt;Blah&lt;/h2&gt;\n    &lt;/header&gt;\n    &lt;article id=\"sidepanel\"&gt;\n        &lt;section class=\"panel\"&gt; &lt;!-- will have ng-repeat=\"panel in panels\" --&gt;\n            &lt;div ng-include src=\"views/sidepanel.html\"&gt;&lt;/div&gt;\n        &lt;/section&gt;\n    &lt;/article&gt;\n&lt;!-- index.html --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The header renders, but then my template doesn't. I get no errors in console or from Node, and if I click the link in <code>src=\"views/sidepanel.html\"</code> in dev tools, it takes me to my template (and displays <code>foo</code>).</p>\n    ","a":"\n<p>You have to single quote your <code>src</code> string inside of the double quotes:</p>\n\n<pre><code>&lt;div ng-include src=\"'views/sidepanel.html'\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://groups.google.com/d/msg/angular/PNK5_uvm1v8/3nXLipPzWvMJ\">Source</a></p>\n    "},{"t":"Watch multiple $scope attributes","l":"http://stackoverflow.com/questions/11952579/watch-multiple-scope-attributes","q":"\n\n<p>Is there a way to subscribe to events on multiple objects using <code>$watch</code></p>\n\n<p>E.g.</p>\n\n<pre><code>$scope.$watch('item1, item2', function () { });\n</code></pre>\n    ","a":"\n<p>Starting from AngularJS 1.3 there's a new method called <a href=\"https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24watchGroup\"><code>$watchGroup</code></a> for observing a set of expressions.</p>\n\n<pre><code>$scope.foo = 'foo';\n$scope.bar = 'bar';\n\n$scope.$watchGroup(['foo', 'bar'], function(newValues, oldValues, scope) {\n  // newValues array contains the current values of the watch expressions\n  // with the indexes matching those of the watchExpression array\n  // i.e.\n  // newValues[0] -&gt; $scope.foo \n  // and \n  // newValues[1] -&gt; $scope.bar \n});\n</code></pre>\n    "},{"t":"AngularJS passing data to $http.get request","l":"http://stackoverflow.com/questions/13760070/angularjs-passing-data-to-http-get-request","q":"\n\n<p>I have a function which does a http POST request. The code is specified below. This works fine.</p>\n\n<pre><code> $http({\n  url: user.update_path, \n  method: \"POST\",\n  data: {user_id: user.id, draft: true}\n });\n</code></pre>\n\n<p>I have another function for http GET and i want to send data to that request. But i dont have that option in get.</p>\n\n<pre><code> $http({\n  url: user.details_path, \n  method: \"GET\",\n  data: {user_id: user.id}\n });\n</code></pre>\n\n<p>The syntax for http.get is</p>\n\n<p><strong>get(url, config)</strong></p>\n\n<p>Can someone help me with this.</p>\n    ","a":"\n<p>A HTTP GET request can't contain data to be posted to the server. However you can add a query string to the request. </p>\n\n<p>angular.http provides an option for it <code>params</code>.</p>\n\n<pre><code>$http({\n    url: user.details_path, \n    method: \"GET\",\n    params: {user_id: user.id}\n });\n</code></pre>\n\n<p>See: <a href=\"http://docs.angularjs.org/api/ng.%24http#get\">http://docs.angularjs.org/api/ng.$http#get</a></p>\n    "},{"t":"How to watch service variables?","l":"http://stackoverflow.com/questions/12576798/how-to-watch-service-variables","q":"\n\n<p>I have a service, say:</p>\n\n<pre><code>factory('aService', ['$rootScope', '$resource', function ($rootScope, $resource) {\n  var service = {\n    foo: []\n  };\n\n  return service;\n}]);\n</code></pre>\n\n<p>And I would like to use <code>foo</code> to control a list that is rendered in HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"FooCtrl\"&gt;\n  &lt;div ng-repeat=\"item in foo\"&gt;{{ item }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In order for the controller to detect when <code>aService.foo</code> is updated I have cobbled together this pattern where I add aService to the controller's <code>$scope</code> and then use <code>$scope.$watch()</code>:</p>\n\n<pre><code>function FooCtrl($scope, aService) {                                                                                                                              \n  $scope.aService = aService;\n  $scope.foo = aService.foo;\n\n  $scope.$watch('aService.foo', function (newVal, oldVal, scope) {\n    if(newVal) { \n      scope.foo = newVal;\n    }\n  });\n}\n</code></pre>\n\n<p>This feels long-handed, and I've been repeating it in every controller that uses the service's variables.  Is there a better way to accomplish watching shared variables?</p>\n    ","a":"\n<p>You can always use the good old observer pattern if you want to avoid the tyranny and overhead of <code>$watch</code>.</p>\n\n<p>In the service:</p>\n\n<pre><code>factory('aService', function() {\n  var observerCallbacks = [];\n\n  //register an observer\n  this.registerObserverCallback = function(callback){\n    observerCallbacks.push(callback);\n  };\n\n  //call this when you know 'foo' has been changed\n  var notifyObservers = function(){\n    angular.forEach(observerCallbacks, function(callback){\n      callback();\n    });\n  };\n\n  //example of when you may want to notify observers\n  this.foo = someNgResource.query().$then(function(){\n    notifyObservers();\n  });\n});\n</code></pre>\n\n<p>And in the controller:</p>\n\n<pre><code>function FooCtrl($scope, aService){\n  var updateFoo = function(){\n    $scope.foo = aService.foo;\n  };\n\n  aService.registerObserverCallback(updateFoo);\n  //service now in control of updating foo\n};\n</code></pre>\n    "},{"t":"How to dynamically change header based on angularjs partial view?","l":"http://stackoverflow.com/questions/12506329/how-to-dynamically-change-header-based-on-angularjs-partial-view","q":"\n\n<p>I am using ng-view to include Angularjs partial views, and I want to update the page title and h1 header tags based on the included view. These are out of scope of the partial view controllers though, and so I can't figure out how to bind them to data set in the controllers.</p>\n\n<p>If it was ASP.net MVC you could use @ViewBag to do this, but I don't know the equivalent in angularjs. I've searched about shared services, events etc but still can't get it working. Any way to modify my example so it works would be much appreciated. </p>\n\n<p>My HTML:</p>\n\n<pre><code>&lt;html data-ng-app=\"myModule\"&gt;\n&lt;head&gt;\n&lt;!-- include js files --&gt;\n&lt;title&gt;&lt;!-- should changed when ng-view changes --&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;&lt;!-- should changed when ng-view changes --&gt;&lt;/h1&gt;\n\n&lt;div data-ng-view&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>My Javascript:</p>\n\n<pre><code>var myModule = angular.module('myModule', []);\nmyModule.config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n        when('/test1', {templateUrl: 'test1.html', controller: Test1Ctrl}).\n        when('/test2', {templateUrl: 'test2.html', controller: Test2Ctrl}).\n        otherwise({redirectTo: '/test1'});\n}]);\n\nfunction Test1Ctrl($scope, $http) { $scope.header = \"Test 1\"; \n                                  /* ^ how can I put this in title and h1 */ }\nfunction Test2Ctrl($scope, $http) { $scope.header = \"Test 2\"; }\n</code></pre>\n    ","a":"\n<p>You could define controller at the <code>&lt;html&gt;</code> level.</p>\n\n<pre><code> &lt;html ng-app=\"app\" ng-controller=\"titleCtrl\"&gt;\n   &lt;head&gt;\n     &lt;title&gt;{{ Page.title() }}&lt;/title&gt;\n ...\n</code></pre>\n\n<p>You create service: <code>Page</code> and modify from controllers.</p>\n\n<pre><code>myModule.factory('Page', function() {\n   var title = 'default';\n   return {\n     title: function() { return title; },\n     setTitle: function(newTitle) { title = newTitle }\n   };\n});\n</code></pre>\n\n<p>Inject <code>Page</code> and Call 'Page.setTitle()' from controllers.</p>\n\n<p>Here is the concrete example:  <a href=\"http://plnkr.co/edit/0e7T6l\">http://plnkr.co/edit/0e7T6l</a></p>\n    "},{"t":"AngularJS with Django - Conflicting template tags","l":"http://stackoverflow.com/questions/8302928/angularjs-with-django-conflicting-template-tags","q":"\n\n<p>I want to use AngularJS with Django however they both use <code>{{ }}</code> as their template tags.  Is there an easy way to change one of the two to use some other custom templating tag?</p>\n    ","a":"\n<p>For Angular 1.0 you should use the $interpolateProvider apis to configure the interpolation symbols: <a href=\"http://docs.angularjs.org/api/ng.%24interpolateProvider\">http://docs.angularjs.org/api/ng.$interpolateProvider</a>.</p>\n\n<p>Something like this should do the trick:</p>\n\n<pre><code>myModule.config(function($interpolateProvider) {\n  $interpolateProvider.startSymbol('{[{');\n  $interpolateProvider.endSymbol('}]}');\n});\n</code></pre>\n\n<p>Keep in mind two things:</p>\n\n<ul>\n<li>mixing server-side and client-side templates is rarely a good idea and should be used with caution. The main issues are: maintainability  (hard to read) and security (double interpolation could expose a new security vector - e.g. while escaping of serverside and clientside templating by themselves might be secure, their combination might not be).</li>\n<li>if you start using third-party directives (components) that use <code>{{ }}</code> in their templates then your configuration will break them. (<a href=\"https://github.com/angular/angular.js/pull/1256\">fix pending</a>)</li>\n</ul>\n\n<p>While there is nothing we can do about the first issue, except for warning people, we do need to address the second issue.</p>\n    "},{"t":"Difference between the $observe and $watch methods","l":"http://stackoverflow.com/questions/14876112/difference-between-the-observe-and-watch-methods","q":"\n\n<p>I know that both <code>Watchers</code> and <code>Observers</code> are computed as soon as something in <code>$scope</code> changes in AngularJS. But couldn't understand what exactly is the difference between the two.</p>\n\n<p>My initial understanding is that <code>Observers</code> are computed for angular expressions which are conditions on the HTML side where as <code>Watchers</code> executed when <code>$scope.$watch()</code> function is executed. Am I thinking properly?</p>\n    ","a":"\n<p><strong><a href=\"https://docs.angularjs.org/api/ng.$compile.directive.Attributes#$observe\">$observe()</a></strong> is a method on the <a href=\"http://docs.angularjs.org/api/ng.$compile.directive.Attributes\">Attributes</a> object, and as such, it can only be used to observe/watch the value change of a DOM attribute.  It is only used/called inside directives.  Use $observe when you need to observe/watch a DOM attribute that contains interpolation (i.e., {{}}'s). \n<br>E.g., <code>attr1=\"Name: {{name}}\"</code>, then in a directive: <code>attrs.$observe('attr1', ...)</code>. \n<br>(If you try <code>scope.$watch(attrs.attr1, ...)</code> it won't work because of the {{}}s -- you'll get <code>undefined</code>.)  Use $watch for everything else.</p>\n\n<p><strong><a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch\">$watch()</a></strong> is more complicated.  It can observe/watch an \"expression\", where the expression can be either a function or a string.  If the expression is a string, it is <a href=\"http://docs.angularjs.org/api/ng.$parse\">$parse</a>'d (i.e., evaluated as an <a href=\"http://docs.angularjs.org/guide/expression\">Angular expression</a>) into a function.  (It is this function that is called every digest cycle.)  The string expression can not contain {{}}'s.  $watch is a method on the <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope\">Scope</a> object, so it can be used/called wherever you have access to a scope object, hence in </p>\n\n<ul>\n<li>a controller -- any controller -- one created via ng-view, ng-controller, or a directive controller</li>\n<li>a linking function in a directive, since this has access to a scope as well</li>\n</ul>\n\n<p>Because strings are evaluated as Angular expressions, $watch is often used when you want to observe/watch a model/scope property.  E.g., <code>attr1=\"myModel.some_prop\"</code>, then in a controller or link function: <code>scope.$watch('myModel.some_prop', ...)</code> or <code>scope.$watch(attrs.attr1, ...)</code> (or <code>scope.$watch(attrs['attr1'], ...)</code>).\n<br>(If you try <code>attrs.$observe('attr1')</code> you'll get the string <code>myModel.some_prop</code>, which is probably not what you want.)</p>\n\n<p>As discussed in comments on @PrimosK's answer, all $observes and $watches are checked every <a href=\"http://docs.angularjs.org/guide/concepts\">digest cycle</a>.</p>\n\n<p>Directives with isolate scopes are more complicated.  If the '@' syntax is used, you can $observe <em>or $watch</em> a DOM attribute that contains interpolation (i.e., {{}}'s).  (The reason it works with $watch is because the '@' syntax does the <a href=\"http://docs.angularjs.org/api/ng.$interpolate\">interpolation</a> for us, hence $watch sees a string without {{}}'s.)  To make it easier to remember which to use when, I suggest using $observe for this case also.</p>\n\n<p>To help test all of this, I wrote a <a href=\"http://plnkr.co/edit/HBha8sVdeCqhJtQghGxw?p=preview\">Plunker</a> that defines two directives.  One (<code>d1</code>) does not create a new scope, the other (<code>d2</code>) creates an isolate scope.  Each directive has the same six attributes.  Each attribute is both $observe'd and $watch'ed.</p>\n\n<pre><code>&lt;div d1 attr1=\"{{prop1}}-test\" attr2=\"prop2\" attr3=\"33\" attr4=\"'a_string'\"\n        attr5=\"a_string\" attr6=\"{{1+aNumber}}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Look at the console log to see the differences between $observe and $watch in the linking function.  Then click the link and see which $observes and $watches are triggered by the property changes made by the click handler.</p>\n\n<p>Notice that when the link function runs, any attributes that contain {{}}'s are not evaluated yet (so if you try to examine the attributes, you'll get <code>undefined</code>).  The only way to see the interpolated values is to use $observe (or $watch if using an isolate scope with '@').  Therefore, getting the values of these attributes is an <em>asynchronous</em> operation.  (And this is why we need the $observe and $watch functions.)</p>\n\n<p>Sometimes you don't need $observe or $watch.  E.g., if your attribute contains a number or a boolean (not a string), just evaluate it once: <code>attr1=\"22\"</code>, then in, say, your linking function: <code>var count = scope.$eval(attrs.attr1)</code>.  If it is just a constant string – <code>attr1=\"my string\"</code> – then just use <code>attrs.attr1</code> in your directive (no need for $eval()).</p>\n\n<p>See also <a href=\"https://groups.google.com/d/msg/angular/TbRQhG-G14I/bYcipV1OYwcJ\">Vojta's google group post</a> about $watch expressions.</p>\n    "},{"t":"How to display length of filtered ng-repeat data","l":"http://stackoverflow.com/questions/15316363/how-to-display-length-of-filtered-ng-repeat-data","q":"\n\n<p>I have a data array which contains many objects (JSON format). The following can be assumed as  the contents of this array:</p>\n\n<pre><code>var data = [\n  {\n    \"name\": \"Jim\",\n    \"age\" : 25\n  },\n  {\n    \"name\": \"Jerry\",\n    \"age\": 27\n  }\n];\n</code></pre>\n\n<p>Now, I display these details as:</p>\n\n<pre><code>&lt;div ng-repeat=\"person in data | filter: query\"&gt;\n&lt;/div\n</code></pre>\n\n<p>Here, query is modeled to an input field in which the user can restrict the data displayed.</p>\n\n<p>Now, I have another location in which I display the current count of people / person being display, i.e <code>Showing {{data.length}} Persons</code>  </p>\n\n<p>What I want to do is that when the user searches for a person and the data displayed is filtered based on the query, the <code>Showing...persons</code> also change the value of people being shown currently. But it is not happening. It always displays the total persons in data rather than the filtered one - how do I get the count of filtered data?</p>\n    ","a":"\n<p>Assign the results to a new variable (e.g. <code>filtered</code>) and access it:</p>\n\n<pre><code>&lt;div ng-repeat=\"person in filtered = (data | filter: query)\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Display the number of results:</p>\n\n<pre><code>Showing {{filtered.length}} Persons\n</code></pre>\n\n<p>Fiddle a <a href=\"http://jsfiddle.net/joshkurz/Nk8qy/3/\">similar example</a>. Credits go to <a href=\"https://groups.google.com/forum/#!topic/angular/7WY_BmFzd3U\">Pawel Kozlowski</a></p>\n    "},{"t":"MVW - What does it stand for?","l":"http://stackoverflow.com/questions/13329485/mvw-what-does-it-stand-for","q":"\n\n<p>Here's the content description for AngularJS page:</p>\n\n<blockquote>\n  <p>AngularJS is what HTML would have been, had it been designed for building web-apps. Declarative templates with data-binding, MVW, MVVM, MVC, dependency injection and great testability story all implemented with pure client-side JavaScript!</p>\n</blockquote>\n\n<p>So what does MVW stand for?\n(Considering the MVC, MVVW, MVP etc squabble, I would guess \"whatever\", Model-View-Whatever =P)</p>\n    ","a":"\n<p>It stands indeed for whatever, as in <a href=\"https://plus.google.com/+AngularJS/posts/aZNVhj355G2\">whatever works for you</a></p>\n    "},{"t":"Difference between MEAN.js and MEAN.io","l":"http://stackoverflow.com/questions/23199392/difference-between-mean-js-and-mean-io","q":"\n\n<p>I wanted to use the MEAN JavaScript Stack, but I noticed that there are two different stacks with either their own website and installation methods: mean.js and mean.io. So I came up asking myself this question: \"Which one do I use?\".</p>\n\n<p>So in order to answer this question I ask the community if you could explain what are the differences between these two? And if possible pros and cons? Because they look very similar to me.</p>\n    ","a":"\n<p>They're essentially the same... They both use swig for templating, they both use karma and mocha for tests, passport integration, nodemon, etc. </p>\n\n<p>Why so similar? Mean.js is a fork of Mean.io and both initiatives were started by <a href=\"https://github.com/amoshaviv\" rel=\"nofollow\">the same guy</a>... Mean.io is now under the umbrella of the company Linnovate and looks like the guy (Amos Haviv) stopped his collaboration with this company and started Mean.js. You can read more about the reasons <a href=\"http://blog.meanjs.org/post/76726660228/forking-out-of-an-open-source-conflict\" rel=\"nofollow\">here</a>. </p>\n\n<p>Now... main (or little) differences you can see right now are:</p>\n\n<p><br></p>\n\n<p><strong>SCAFFOLDING AND BOILERPLATE GENERATION</strong></p>\n\n<p>Mean.io uses a custom cli tool named 'mean'<br>\nMean.js uses Yeoman Generators</p>\n\n<p><br>\n<strong>MODULARITY</strong></p>\n\n<p>Mean.io uses a more self-contained node packages modularity with client and server files inside the modules.<br>\nMean.js uses modules just in the front-end (for angular), and connects them with Express. Although they were working on vertical modules as well...</p>\n\n<p><br>\n<strong>BUILD SYSTEM</strong></p>\n\n<p>Mean.io has recently moved to gulp<br>\nMean.js uses grunt</p>\n\n<p><br>\n<strong>DEPLOYMENT</strong></p>\n\n<p>Both have Dockerfiles in their respective repos, and Mean.io has one-click install on <a href=\"https://cloud.google.com/solutions/mean/click-to-deploy\" rel=\"nofollow\">Google Compute Engine</a>, while Mean.js can also be deployed with <a href=\"https://www.digitalocean.com/features/one-click-apps/mean/\" rel=\"nofollow\">one-click install on Digital Ocean</a>.</p>\n\n<p><br>\n<strong>DOCUMENTATION</strong></p>\n\n<p>Mean.io has ok docs<br>\nMean.js has AWESOME docs</p>\n\n<p><br>\n<strong>COMMUNITY</strong></p>\n\n<p>Mean.io has a bigger community since it was the original boilerplate<br>\nMean.js has less momentum but steady growth</p>\n\n<p><br>\nOn a personal level, I like more the philosophy and openness of MeanJS and more the traction and modules/packages approach of MeanIO. Both are nice, and you'll end probably modifying them, so you can't really go wrong picking one or the other. Just take them as starting point and as a learning exercise.</p>\n\n<p><br></p>\n\n<h2>ALTERNATIVE “MEAN” SOLUTIONS</h2>\n\n<p>MEAN is a generic way (coined by <a href=\"http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and\" rel=\"nofollow\">Valeri Karpov</a>) to describe a boilerplate/framework that takes \"Mongo + Express + Angular + Node\" as the base of the stack. You can find frameworks with this stack that use other denomination, some of them really good for RAD (Rapid Application Development) and building SPAs. Eg:</p>\n\n<ul>\n<li><strong><a href=\"https://www.meteor.com/\" rel=\"nofollow\">Meteor</a></strong>. Now with official <a href=\"http://angular-meteor.com/\" rel=\"nofollow\">Angular support</a>, represents a <a href=\"http://info.meteor.com/blog/thoughts-on-angular-meteor-as-a-great-mean-stack\" rel=\"nofollow\">great MEAN stack</a> </li>\n<li><a href=\"http://strongloop.com/mobile-application-development/loopback/\" rel=\"nofollow\">StrongLoop Loopback</a> (main Node.js core contributors and <a href=\"http://strongloop.com/strongblog/tj-holowaychuk-sponsorship-of-express/\" rel=\"nofollow\">Express maintainers</a>)</li>\n<li><a href=\"https://github.com/DaftMonk/generator-angular-fullstack\" rel=\"nofollow\">Generator Angular Fullstack</a></li>\n<li><a href=\"http://www.quora.com/Node-js/Should-I-use-a-MEAN-stack-or-Angular-+-Sails-js-for-a-node-js-powered-back-end-structure-or-framework\" rel=\"nofollow\">Sails.js</a></li>\n<li><a href=\"http://cleverstack.io/\" rel=\"nofollow\">Cleverstack</a></li>\n<li>Deployd, etc (there are more)</li>\n</ul>\n\n<p>You also have <a href=\"https://github.com/sahat/hackathon-starter\" rel=\"nofollow\">Hackathon Starter</a>. It doesn't have A of MEAN (it is 'MEN'), but it rocks..</p>\n\n<p>Have fun!</p>\n    "},{"t":"Angular directives - when and how to use compile, controller, pre-link and post-link [closed]","l":"http://stackoverflow.com/questions/24615103/angular-directives-when-and-how-to-use-compile-controller-pre-link-and-post","q":"\n\n<p>When writing an Angular directive, one can use any of the following functions to manipulate the DOM behaviour, contents and look of the element on which the directive is declared:</p>\n\n<ul>\n<li>compile</li>\n<li>controller</li>\n<li>pre-link</li>\n<li>post-link</li>\n</ul>\n\n<p>There seem to be some confusion as for which function should one use. This question covers:</p>\n\n<h2>Directive basics</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/24615123/1179377\">How to declare the various functions?</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615137/1179377\">What is the difference between a <em>source template</em> and an <em>instance template</em>?</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615162/1179377\">In which order the directive functions are executed?</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615185/1179377\">What else happens between these function calls?</a></li>\n</ul>\n\n<h2>Function nature, do's and dont's</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/24615207/1179377\">Compile</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615239/1179377\">Controller</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615261/1179377\">Pre-link</a></li>\n<li><a href=\"http://stackoverflow.com/a/24615104/1179377\">Post-link</a></li>\n</ul>\n\n<h2>Related questions:</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/15676614/\">Directive: link vs compile vs controller</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/12546945\">Difference between the 'controller', 'link' and 'compile' functions when defining an angular.js directive</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/12164138\">What is the difference between compile and link function in angularjs</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/17534343\">Difference between the pre-compile and post-compile element in AngularJS directives?</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/23770882\">Angular JS Directive - Template, compile or link?</a>.</li>\n<li><a href=\"http://stackoverflow.com/questions/18297208\">post link vs pre link in Angular js directives</a>.</li>\n</ul>\n    ","a":"\n<h1>In which order the directive functions are executed?</h1>\n\n<h2>For a single directive</h2>\n\n<p>Based on the following <a href=\"http://plnkr.co/edit/wIhRr0\">plunk</a>, consider the following HTML markup:</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div log='some-div'&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>With the following directive declaration:</p>\n\n<pre><code>myApp.directive('log', function() {\n\n    return {\n        controller: function( $scope, $element, $attrs, $transclude ) {\n            console.log( $attrs.log + ' (controller)' );\n        },\n        compile: function compile( tElement, tAttributes ) {\n            console.log( tAttributes.log + ' (compile)'  );\n            return {\n                pre: function preLink( scope, element, attributes ) {\n                    console.log( attributes.log + ' (pre-link)'  );\n                },\n                post: function postLink( scope, element, attributes ) {\n                    console.log( attributes.log + ' (post-link)'  );\n                }\n            };\n         }\n     };  \n\n});\n</code></pre>\n\n<p>The console output will be:</p>\n\n<pre><code>some-div (compile)\nsome-div (controller)\nsome-div (pre-link)\nsome-div (post-link)\n</code></pre>\n\n<p>We can see that <code>compile</code> is executed first, then <code>controller</code>, then <code>pre-link</code> and finally followed by <code>post-link</code>.</p>\n\n<h2>For nested directives</h2>\n\n<blockquote>\n  <p><strong>Note:</strong> The following does not apply to directives that render their children in their link function. Quite a few Angular directives (like ngIf, ngRepeat, or any directive with <code>transclude</code>) do so. These type of directives will natively have their <code>link</code> function called <em>before</em> their child directives <code>compile</code> is called.</p>\n</blockquote>\n\n<p>The original HTML markup is often made of nested elements, each with its own directive. Like in the following markup (see <a href=\"http://plnkr.co/edit/pWJhfgdA2iDzSKV5bjyh\">plunk</a>):</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div log='parent'&gt;\n        &lt;div log='..first-child'&gt;&lt;/div&gt;\n        &lt;div log='..second-child'&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>The console output will look like this (without the comments):</p>\n\n<pre><code>// The compile phase\nparent (compile)\n..first-child (compile)\n..second-child (compile)\n\n// The link phase   \nparent (controller)\nparent (pre-link)\n..first-child (controller)\n..first-child (pre-link)\n..first-child (post-link)\n..second-child (controller)\n..second-child (pre-link)\n..second-child (post-link)\nparent (post-link)\n</code></pre>\n\n<p>We can distinguish two phases here - the <em>compile</em> phase and the <em>link</em> phase.</p>\n\n<h3>The compile phase</h3>\n\n<p>When the DOM is loaded Angular starts the compile phase, where it traverses the markup top-down, and calls <code>compile</code> on all directives. Graphically, we could express it like so:</p>\n\n<p><img src=\"http://i.stack.imgur.com/PZPOm.png\" alt=\"An image illustrating the compilation loop for children\"></p>\n\n<p>It is perhaps important to mention that at this stage, the templates the compile function gets are the source templates (not instance template).</p>\n\n<h3>The link phase</h3>\n\n<p>DOM instances are often simply the result of a source template being rendered to the DOM, but they may be created by <code>ng-repeat</code>, or introduced on the fly.</p>\n\n<p>Whenever a new instance of an element with a directive is rendered to the DOM, the link phase starts.</p>\n\n<p>In this phase, Angular calls <code>controller</code>, <code>pre-link</code>, iterates children, and call <code>post-link</code> on all directives, like so:</p>\n\n<p><img src=\"http://i.stack.imgur.com/XRDs6.png\" alt=\"An illustration demonstrating the link phase steps\"></p>\n    "},{"t":"Angular JS ng-repeat handle empty list case","l":"http://stackoverflow.com/questions/12340095/angular-js-ng-repeat-handle-empty-list-case","q":"\n\n<p>I thought this would be a very common thing but couldn't find how to handle it in Angular JS. Let's say I have a list of events and want to output them with angular, then that's pretty easy:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"event in events\"&gt;{{event.title}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But how do I handle the case when the list is empty? I want to have a message box in place where the list is with something like \"No events\" or similar. The only thing that would come close is the <code>ng-switch</code> with <code>events.length</code> (how do I check if empty when an object and not an array?), but is that really the only option I have?</p>\n    ","a":"\n<p>You can use <a href=\"http://docs.angularjs.org/api/ng.directive%3angShow\">ngShow</a>.</p>\n\n<pre><code>&lt;li ng-show=\"!events.length\"&gt;No events&lt;/li&gt;\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/C29As/\">example</a>.</p>\n\n<p>Or you can use <a href=\"http://docs.angularjs.org/api/ng.directive%3angHide\">ngHide</a></p>\n\n<pre><code>&lt;li ng-hide=\"events.length\"&gt;No events&lt;/li&gt;\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/C29As/37/\">example</a>.</p>\n\n<p>For object you can test <a href=\"http://stackoverflow.com/a/6921193/457375\">Object.keys</a>.</p>\n    "},{"t":"Global variables in AngularJS","l":"http://stackoverflow.com/questions/11938380/global-variables-in-angularjs","q":"\n\n<p>I have a problem where i'm initialising a variable on the scope in a controller. Then it gets changed in another controller when a user logs in. This variable is used to control things such as the navigation bar and restricts access to parts of the site depending on the type of user, so its important that it holds its value. The problem with it is that the controller that initialises it, gets called again by angular some how and then resets the variable back to its initial value. </p>\n\n<p>I assume this is not the correct way of declaring and initialising global variables, well its not really global, so my question is what is the correct way and is there any good examples around that work with the current version of angular?</p>\n    ","a":"\n<p>You've got basically 2 options for \"global\" variables:</p>\n\n<ul>\n<li>use a <code>$rootScope</code> <a href=\"http://docs.angularjs.org/api/ng.$rootScope\">http://docs.angularjs.org/api/ng.$rootScope</a></li>\n<li>use a service <a href=\"http://docs.angularjs.org/guide/services\">http://docs.angularjs.org/guide/services</a></li>\n</ul>\n\n<p><code>$rootScope</code> is a parent of all scopes so values exposed there will be visible in all templates and controllers. Using the <code>$rootScope</code> is very easy as you can simply inject it into any controller and change values in this scope. It might be convenient but has all the <a href=\"http://c2.com/cgi/wiki?GlobalVariablesAreBad\">problems of global variables</a>.</p>\n\n<p>Services are singletons that you can inject to any controller and expose their values in a controller's scope. Services, being singletons are still 'global' but you've got far better control over where those are used and exposed.</p>\n\n<p>Using services is a bit more complex, but not that much, here is an example:</p>\n\n<pre><code>var myApp = angular.module('myApp',[]);\nmyApp.factory('UserService', function() {\n  return {\n      name : 'anonymous'\n  };\n});\n</code></pre>\n\n<p>and then in a controller:</p>\n\n<pre><code>function MyCtrl($scope, UserService) {\n    $scope.name = UserService.name;\n}\n</code></pre>\n\n<p>Here is the working jsFiddle: <a href=\"http://jsfiddle.net/pkozlowski_opensource/BRWPM/2/\">http://jsfiddle.net/pkozlowski_opensource/BRWPM/2/</a></p>\n    "},{"t":"Prevent double curly brace notation from displaying momentarily before angular.js compiles/interpolates document","l":"http://stackoverflow.com/questions/12866447/prevent-double-curly-brace-notation-from-displaying-momentarily-before-angular-j","q":"\n\n<p>It seems to be primarily an issue in IE when there is a number of images/scripts to load, there can be a good amount of time where the literal <code>{{stringExpression}}</code> in the markup are displayed, then disappear once angular is done with it's compilation/interpolation of the document.</p>\n\n<p>Is there a common reason why this would happen which would indicate I'm doing something generally wrong, or is there a known way to prevent this?</p>\n    ","a":"\n<p>I think that you are looking for the <code>ngCloak</code> directive: <a href=\"http://docs.angularjs.org/api/ng.directive:ngCloak\">http://docs.angularjs.org/api/ng.directive:ngCloak</a></p>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p>The ngCloak directive is used to prevent the Angular html template\n  from being briefly displayed by the browser in its raw (uncompiled)\n  form while your application is loading. Use this directive to avoid\n  the undesirable flicker effect caused by the html template display.</p>\n  \n  <p>The directive can be applied to the <code>&lt;body&gt;</code> element, but typically a\n  fine-grained application is prefered in order to benefit from\n  progressive rendering of the browser view.</p>\n</blockquote>\n    "},{"t":"When writing a directive, how do I decide if a need no new scope, a new child scope, or a new isolate scope?","l":"http://stackoverflow.com/questions/14914213/when-writing-a-directive-how-do-i-decide-if-a-need-no-new-scope-a-new-child-sc","q":"\n\n<p>I'm looking for some guidelines that one can use to help determine which type of scope to use when writing a new directive.  Ideally, I'd like something similar to a flowchart that walks me though a bunch of questions and out pops the correct answer – no new new scope, new child scope, or new isolate scope – but that is likely asking for too much.  Here's my current paltry set of guidelines:</p>\n\n<ul>\n<li>don't use an isolate scope if the element that will use the directive uses ng-model \n<br>See <a href=\"http://stackoverflow.com/questions/11896732/ngmodel-and-component-with-isolated-scope\">ngModel and component with isolated scope</a> and <br> <a href=\"http://stackoverflow.com/questions/14495882/why-formatters-does-not-work-with-isolated-scope\">Why formatters does not work with isolated scope?</a></li>\n<li>if the directive doesn't modify any scope/model properties, don't create a new scope</li>\n<li>isolate scopes seem to work well if the directive is encapsulating a set of DOM elements (the <a href=\"http://docs.angularjs.org/guide/directive\">docs</a> say \"a complex DOM structure\") and the directive will be used as an element, or with no other directives on the same element</li>\n</ul>\n\n<p>I'm aware that using a directive with an isolate scope on an element forces all other directives on that same element to use the same (one) isolate scope, so doesn't this severely limit when an isolate scope can be used?</p>\n\n<p>I am hoping that some from the Angular-UI team (or others that have written many directives) can share their experiences.</p>\n\n<p>Please don't add an answer that simply says \"use an isolate scope for reusable components\".</p>\n    ","a":"\n<p>What a great question! I'd <em>love</em> to hear what others have to say, but here are the guidelines I use.</p>\n\n<p>The high-altitude premise: scope is used as the \"glue\" that we use to communicate between the parent controller, the directive, and the directive template.</p>\n\n<p><strong>Parent Scope:</strong> <code>scope: false</code>, so no new scope at all</p>\n\n<p>I don't use this very often, but as @MarkRajcok said, if the directive doesn't access any scope variables (and obviously doesn't set any!) then this is just fine as far as I am concerned. This is also helpful for child directives that are <em>only</em> used in the context of the parent directive (though there are always exceptions to this) and that don't have a template. Basically anything with a template doesn't belong sharing a scope, because you are inherently exposing that scope for access and manipulation (but I'm sure there are exceptions to this rule).</p>\n\n<p>As an example, I recently created a directive that draws a (static) vector graphic using an SVG library I'm in the process of writing. It <code>$observe</code>s two attributes (<code>width</code> and <code>height</code>) and uses those in its calculations, but it neither sets nor reads any scope variables and has no template. This is a good use case for not creating another scope; we don't need one, so why bother?</p>\n\n<p>But in another SVG directive, however, I required a set of data to use and additionally had to store a tiny bit of state. In this case, using the parent scope would be irresponsible (again, generally speaking). So instead...</p>\n\n<p><strong>Child Scope:</strong> <code>scope: true</code></p>\n\n<p>Directives with a child scope are context-aware and are intended to interact with the current scope.</p>\n\n<p>Obviously, a key advantage of this over an isolate scope is that the user is free to use interpolation on any attributes they want; e.g. using <code>class=\"item-type-{{item.type}}\"</code> on a directive with an isolate scope will not work by default, but works fine on one with a child scope because whatever is interpolated can still by default be found in the parent scope. Also, the directive itself can safely evaluate attributes and expressions in the context of its own scope without worrying about pollution in or damage to the parent.</p>\n\n<p>For example, a tooltip is something that just gets added; an isolate scope wouldn't work (by default, see below) because it is expected that we will use other directives or interpolated attributes here. The tooltip is just an enhancement. But the tooltip also needs to set some things on the scope to use with a sub-directive and/or template and obviously to manage its own state, so it would be quite bad indeed to use the parent scope. We are either polluting it or damaging it, and neither is bueno.</p>\n\n<p>I find myself using child scopes more often than isolate or parent scopes.</p>\n\n<p><strong>Isolate scope:</strong> <code>scope: {}</code></p>\n\n<p>This is for reusable components. :-) </p>\n\n<p>But seriously, I think of \"reusable components\" as \"self-contained components\". The intent is that they are to be used for a specific purpose, so combining them with other directives or adding other interpolated attributes to the DOM node inherently doesn't make sense.</p>\n\n<p>To be more specific, anything needed for this standalone functionality is provided through specified attributes evaluated in the context of the parent scope; they are either one-way strings ('@'), one-way expressions ('&amp;'), or two-way variable bindings ('='). </p>\n\n<p>On self-contained components, it doesn't make sense to need to apply other directives or attributes on it because it exists by itself. Its style is governed by its own template (if necessary) and can have the appropriate content transcluded (if necessary). It's standalone, so we put it in an isolate scope also to say: \"Don't mess with this. I'm giving you a defined API through these few attributes.\"</p>\n\n<p>A good best practice is to exclude as much template-based stuff from the directive link and controller functions as possible. This provides another \"API-like\" configuration point: the user of the directive can simply replace the template! The functionality all stayed the same, and its internal API was never touched, but we can mess with styling and DOM implementation as much as we need to. ui/bootstrap is a <em>great</em> example of how to do this well because Peter &amp; Pawel are awesome.</p>\n\n<p>Isolate scopes are also great for use with transclusion. Take tabs; they are not only the whole functionality, but whatever is <em>inside</em> of it can be evaluated freely from within the parent scope while leaving the tabs (and panes) to do whatever they want. The tabs clearly have their own <em>state</em>, which belongs on the scope (to interact with the template), but that state has nothing to do with the context in which it was used - it's entirely internal to what makes a tab directive a tab directive. Further, it doesn't make much sense to use any other directives with the tabs. They're tabs - and we already got that functionality!</p>\n\n<p>Surround it with more functionality or transclude more functionality, but the directive is what it is already.</p>\n\n<p>All that said, I should note that there are ways around some of the limitations (i.e. features) of an isolate scope, as @ProLoser hinted at in his answer. For example, in the child scope section, I mentioned interpolation on non-directive attributes breaking when using an isolate scope (by default). But the user could, for example, simply use <code>class=\"item-type-{{$parent.item.type}}\"</code> and it would once again work. So if there is a compelling reason to use an isolate scope over a child scope but you're worried about some of these limitations, know that you can work around virtually all of them if you need to.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Directives with no new scope are read-only; they're completely trusted (i.e. internal to the app) and they don't touch jack. Directives with a child scope <em>add</em> functionality, but they are not <em>the only</em> functionality. Lastly, isolate scopes are for directives that are the entire goal; they are standalone, so it's okay (and most \"correct\") to let them go rogue.</p>\n\n<p>I wanted to get my initial thoughts out, but as I think of more things, I'll update this. But holy crap - this is long for an SO answer...</p>\n\n<hr>\n\n<p>PS: Totally tangential, but since we're talking about scopes, I prefer to say \"prototypical\" whereas others prefer \"prototypal\", which seems to be more accurate but just rolls off the tongue not at all well. :-)</p>\n    "},{"t":"Typical Angular.js workflow and project structure (with Python Flask)","l":"http://stackoverflow.com/questions/11522151/typical-angular-js-workflow-and-project-structure-with-python-flask","q":"\n\n<p>I am pretty new to this whole MV* client-side framework frenzy. It doesn't have to be Angular.js, but I picked it because it feels more natural to me than either Knockout, Ember or Backbone. Anyway what is the workflow like? Do people start with developing a client-side application in Angular.js and then hooking up the back-end to it?\nOr the other way around by first building the back-end in Django, Flask, Rails and then attaching an Angular.js app to it? Is there a \"right\" way of doing it, or is it just a personal preference in the end?</p>\n\n<p>I am also not sure whether to structure my project according to the Flask or Angular.js? community practices.</p>\n\n<p>For example, Flask's minitwit app is structured like so:</p>\n\n<pre><code>minitwit\n|-- minitwit.py\n|-- static\n   |-- css, js, images, etc...\n`-- templates\n   |-- html files and base layout\n</code></pre>\n\n<p>Angular.js tutorial app is structured like this:</p>\n\n<pre><code>angular-phonecat\n|-- app\n    `-- css\n    `-- img\n    `-- js\n    `-- lib\n    `-- partials\n    `-- index.html\n|-- scripts\n `-- node.js server and test server files\n</code></pre>\n\n<p>I could picture a Flask app by itself, and it's fairly easy to see Angular.js app like ToDo List by itself but when it comes to using both of these technologies I don't understand how they work together. It almost seems like I don't need a server-side web-framework when you already have Angular.js, a simple Python web server will suffice. In the Angular to-do app for example they use MongoLab to talk to the database using Restful API. There was no need having a web framework on the back-end.</p>\n\n<p>Maybe I am just awfully confused, and Angular.js is nothing more than a fancy jQuery library so I should use just like I would use jQuery in my Flask projects (assuming I change Angular's template syntax to something that doesn't conflict with Jinja2). I hope my questions make some sense. I mainly work on the back-end and this client-side framework is an unknown territory for me.</p>\n    ","a":"\n<p>I would start out by organizing the Flask app in the standard structure as follows:</p>\n\n<pre><code>app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n|-- templates\n</code></pre>\n\n<p>And as btford mentioned, if you are doing an Angular app, you'll want to focus on using Angular client-side templates and stay away from server-side templates. Using render_template('index.html') will cause Flask to interpret your angular templates as jinja templates, so they won't render correctly. Instead, you'll want to do the following:</p>\n\n<pre><code>@app.route(\"/\")\ndef index():\n    return send_file('templates/index.html')\n</code></pre>\n\n<p>Note that using send_file() means that the files will be cached, so you might want to use make_response() instead, at least for development:</p>\n\n<pre><code>    return make_response(open('templates/index.html').read())\n</code></pre>\n\n<p>Afterwards, build out the AngularJS part of your app, modifying the app structure so that it looks like this:</p>\n\n<pre><code>app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n        |-- app.js, controllers.js, etc.\n    |-- lib\n        |-- angular\n            |-- angular.js, etc.\n    |-- partials\n|-- templates\n    |-- index.html\n</code></pre>\n\n<p>Make sure your index.html includes AngularJS, as well as any other files:</p>\n\n<pre><code>&lt;script src=\"static/lib/angular/angular.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>At this point, you haven't yet constructed your RESTful API, so you can have your js controllers return predefined sample data (only a temporary setup). When you're ready, implement the RESTful API and hook it up to your angular app with angular-resource.js.</p>\n\n<p>EDIT: I put together an app template that, though a little more complex that what I've described above, illustrates how one could build an app with AngularJS + Flask, complete with communication between AngularJS and a simple Flask API. Here it is if you want to check it out: <a href=\"https://github.com/rxl/angular-flask\">https://github.com/rxl/angular-flask</a></p>\n    "},{"t":"How to use ng-repeat for dictionaries in AngularJs?","l":"http://stackoverflow.com/questions/11985863/how-to-use-ng-repeat-for-dictionaries-in-angularjs","q":"\n\n<p>I know that we can easily use <em>ng-repeat</em> for json objects or arrays like:</p>\n\n<pre><code>&lt;div ng-repeat=\"user in users\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>but how can we use the ng-repeat for dictionaries, for example:</p>\n\n<pre><code>var users = null;\nusers[\"182982\"] = \"{...json-object...}\";\nusers[\"198784\"] = \"{...json-object...}\";\nusers[\"119827\"] = \"{...json-object...}\";\n</code></pre>\n\n<p>I want to use that with users dictionary:</p>\n\n<pre><code>&lt;div ng-repeat=\"user in users\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Is it possible?. If yes, how can I do it in AngularJs?</p>\n\n<p>Example for my question:\nIn C# we define dictionaries like:</p>\n\n<pre><code>Dictionary&lt;key,value&gt; dict = new Dictionary&lt;key,value&gt;();\n\n//and then we can search for values, without knowing the keys\nforeach(var val in dict.Values)\n{\n}\n</code></pre>\n\n<p>Is there a build-in function that returns the values from a dictionary like in c#?</p>\n\n<p>Thank You!</p>\n    ","a":"\n<p>You can use</p>\n\n<pre><code>&lt;li ng-repeat=\"(name, age) in items\"&gt;{{name}}: {{age}}&lt;/li&gt;\n</code></pre>\n\n<p>See <a href=\"http://docs.angularjs.org/api/ng.directive%3angRepeat\">ngRepeat documentation</a>. Example: <a href=\"http://jsfiddle.net/WRtqV/1/\">http://jsfiddle.net/WRtqV/1/</a></p>\n    "},{"t":"How to get evaluated attributes inside a custom directive","l":"http://stackoverflow.com/questions/12371159/how-to-get-evaluated-attributes-inside-a-custom-directive","q":"\n\n<p>I'm trying to get an <strong>evaluated</strong> attribute from my custom directive, but I can't find the right way of doing it.</p>\n\n<p>I've created <a href=\"http://jsfiddle.net/neuTA/1/\">this jsFiddle</a> to elaborate.</p>\n\n<pre><code>&lt;div ng-controller=\"MyCtrl\"&gt;\n    &lt;input my-directive value=\"123\"&gt;\n    &lt;input my-directive value=\"{{1+1}}\"&gt;\n&lt;/div&gt;\n\nmyApp.directive('myDirective', function () {\n    return function (scope, element, attr) {\n        element.val(\"value = \"+attr.value);\n    }\n});\n</code></pre>\n\n<p>What am I missing?</p>\n    ","a":"\n<p><em>Notice: I do update this answer as I find better solutions. I also keep the old answers for future reference as long as they remain related. Latest and best answer comes first.</em> </p>\n\n<h2>Better answer:</h2>\n\n<p>Directives in angularjs are very powerful, but it takes time to comprehend which processes lie behind them.</p>\n\n<p>While creating directives, angularjs allows you to create an <em>isolated scope</em> with some bindings to the parent scope. These bindings are specified by the <strong>attribute</strong> you attach the element in DOM and how you define <strong>scope</strong> property in the <em>directive definition object</em>.</p>\n\n<p>There are 3 types of binding options which you can define in scope and you write those as prefixes related attribute.</p>\n\n<pre><code>angular.module(\"myApp\", []).directive(\"myDirective\", function () {\n    return {\n        restrict: \"A\",\n        scope: {\n            text: \"@myText\",\n            twoWayBind: \"=myTwoWayBind\",\n            oneWayBind: \"&amp;myOneWayBind\"\n        }\n    };\n}).controller(\"myController\", function ($scope) {\n    $scope.foo = {name: \"Umur\"};\n    $scope.bar = \"qwe\";\n});\n</code></pre>\n\n<p><em>HTML</em></p>\n\n<pre><code>&lt;div ng-controller=\"myController\"&gt;\n    &lt;div my-directive my-text=\"hello {{ bar }}\" my-two-way-bind=\"foo\" my-one-way-bind=\"bar\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In that case, in the scope of directive (whether it's in linking function or controller), we can access these properties like this:</p>\n\n<pre><code>/* Directive scope */\n\nin: $scope.text\nout: \"hello qwe\"\n// this would automatically update the changes of value in digest\n// this is always string as dom attributes values are always strings\n\nin: $scope.twoWayBind\nout: {name:\"Umur\"}\n// this would automatically update the changes of value in digest\n// changes in this will be reflected in parent scope\n\n// in directive's scope\nin: $scope.twoWayBind.name = \"John\"\n\n//in parent scope\nin: $scope.foo.name\nout: \"John\"\n\n\nin: $scope.oneWayBind() // notice the function call, this binding is read only\nout: \"qwe\"\n// any changes here will not reflect in parent, as this only a getter .\n</code></pre>\n\n<h2>\"Still OK\" Answer:</h2>\n\n<p>Since this answer got accepted, but has some issues, I'm going to update it to a better one. Apparently, <code>$parse</code> is a service which does not lie in properties of the current scope, which means it only takes angular expressions and cannot reach scope. \n<code>{{</code>,<code>}}</code> expressions are compiled while angularjs initiating which means when we try to access them in our directives <code>postlink</code> method, they are already compiled. (<code>{{1+1}}</code> is <code>2</code> in directive already).</p>\n\n<p>This is how you would want to use:</p>\n\n<pre><code>var myApp = angular.module('myApp',[]);\n\nmyApp.directive('myDirective', function ($parse) {\n    return function (scope, element, attr) {\n        element.val(\"value=\" + $parse(attr.myDirective)(scope));\n    };\n});\n\nfunction MyCtrl($scope) {\n    $scope.aaa = 3432;\n}​\n</code></pre>\n\n<p>.</p>\n\n<pre><code>&lt;div ng-controller=\"MyCtrl\"&gt;\n    &lt;input my-directive=\"123\"&gt;\n    &lt;input my-directive=\"1+1\"&gt;\n    &lt;input my-directive=\"'1+1'\"&gt;\n    &lt;input my-directive=\"aaa\"&gt;\n&lt;/div&gt;​​​​​​​​\n</code></pre>\n\n<p>One thing you should notice here is that, if you want set the value string, you should wrap it in quotes. (See 3rd input)</p>\n\n<p>Here is the fiddle to play with: <a href=\"http://jsfiddle.net/neuTA/6/\">http://jsfiddle.net/neuTA/6/</a></p>\n\n<h2>Old Answer:</h2>\n\n<p><em>I'm not removing this for folks who can be misled like me, note that using <code>$eval</code> is perfectly fine the correct way to do it, but <code>$parse</code> has a different behavior, you probably won't need this to use in most of the cases.</em></p>\n\n<p>The way to do it is, once again, using <code>scope.$eval</code>. Not only it compiles the angular expression, it has also access to the current scope's properties.</p>\n\n<pre><code>var myApp = angular.module('myApp',[]);\n\nmyApp.directive('myDirective', function () {\n    return function (scope, element, attr) {\n        element.val(\"value = \"+ scope.$eval(attr.value));\n    }\n});\n\nfunction MyCtrl($scope) {\n\n}​\n</code></pre>\n\n<p>What you are missing was <code>$eval</code>.</p>\n\n<blockquote>\n  <p><a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$eval\">http://docs.angularjs.org/api/ng.$rootScope.Scope#$eval</a></p>\n  \n  <p>Executes the expression on the current scope returning the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating angular expressions.</p>\n</blockquote>\n    "},{"t":"How do I implement the bootstrap navbar active class with Angular JS","l":"http://stackoverflow.com/questions/16199418/how-do-i-implement-the-bootstrap-navbar-active-class-with-angular-js","q":"\n\n<p>If I have a navbar in bootstrap with the items</p>\n\n<pre><code>Home | About | Contact\n</code></pre>\n\n<p>How do I set the active class for each menu item when they are active? That is, how can I set <code>class=\"active\"</code> when the angular route is at </p>\n\n<ol>\n<li><code>#/</code> for home</li>\n<li><code>#/about</code> for the about page</li>\n<li><code>#/contact</code> for the contact page</li>\n</ol>\n    ","a":"\n<p>A very elegant way is to use ng-controller to run a single controller outside of the ng-view:</p>\n\n<pre><code>&lt;div class=\"collapse navbar-collapse\" ng-controller=\"HeaderController\"&gt;\n    &lt;ul class=\"nav navbar-nav\"&gt;\n        &lt;li ng-class=\"{ active: isActive('/')}\"&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li ng-class=\"{ active: isActive('/dogs')}\"&gt;&lt;a href=\"/dogs\"&gt;Dogs&lt;/a&gt;&lt;/li&gt;\n        &lt;li ng-class=\"{ active: isActive('/cats')}\"&gt;&lt;a href=\"/cats\"&gt;Cats&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div ng-view&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and include in controllers.js:</p>\n\n<pre><code>function HeaderController($scope, $location) \n{ \n    $scope.isActive = function (viewLocation) { \n        return viewLocation === $location.path();\n    };\n}\n</code></pre>\n    "},{"t":"Failed to instantiate module [$injector:unpr] Unknown provider: $routeProvider","l":"http://stackoverflow.com/questions/18481863/failed-to-instantiate-module-injectorunpr-unknown-provider-routeprovider","q":"\n\n<p>I received this error upon upgrading from AngularJS <strong>1.0.7</strong> to <strong>1.2.0rc1</strong>. </p>\n    ","a":"\n<p>The ngRoute module is no longer part of the core <code>angular.js</code> file. If you are continuing to use $routeProvider then you will now need to include <code>angular-route.js</code> in your HTML:</p>\n\n<pre><code>&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-route.js\"&gt;\n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/ngRoute\">API Reference</a></p>\n\n<p>You also have to add <code>ngRoute</code> as a dependency for your application:</p>\n\n<pre><code>var app = angular.module('MyApp', ['ngRoute', ...]);\n</code></pre>\n\n<p>If instead you are planning on using <a href=\"https://github.com/angular-ui/ui-router\"><code>angular-ui-router</code></a> or the like then just remove the <code>$routeProvider</code>  dependency from your module <code>.config()</code> and substitute it with the relevant provider of choice (e.g. <code>$stateProvider</code>). You would then use the <code>ui.router</code> dependency:</p>\n\n<pre><code>var app = angular.module('MyApp', ['ui.router', ...]);\n</code></pre>\n    "},{"t":"Can you pass parameters to an AngularJS controller on creation?","l":"http://stackoverflow.com/questions/14523679/can-you-pass-parameters-to-an-angularjs-controller-on-creation","q":"\n\n<p>I have a controller responsible for communicating with an API to update properties of a user, name, email, etc. Each user has an <code>'id'</code> which is passed from the server when the profile page is viewed. </p>\n\n<p>I would like to pass this value to the AngularJS controller so it knows what the API entry point is for the current user. I've tried passing the value in <code>ng-controller</code>. For example:</p>\n\n<pre><code>function UserCtrl(id, $scope, $filter) {\n\n$scope.connection = $resource('api.com/user/' + id)\n</code></pre>\n\n<p>and in the HTML</p>\n\n<pre><code>&lt;body ng-controller=\"UserCtrl({% id %})\"&gt;\n</code></pre>\n\n<p>where <code>{% id %}</code> print the id sent from the server. but I get errors. </p>\n\n<p>What is the correct way to pass a value into a controller on its creation?</p>\n    ","a":"\n<p><strong>Notes:</strong></p>\n\n<p>This answer is old. This is just a proof of concept on how it the desired outcome can be achieved. However, it may not be the best solution as per some comments below. I don't have any document to support or reject the following approach. Please refer to some of the comments below for further discussion on this topic.</p>\n\n<p><strong>Original Answer:</strong></p>\n\n<p>I answered this to \nYes you absolutely can do so using <code>ng-init</code> and a simple init function.</p>\n\n<p>Here is the example of it on <a href=\"http://plnkr.co/edit/jDOgjENkqEaucBX9Tvc9\">plunker</a></p>\n\n<p><strong>HTML</strong> </p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"angularjs-starter\"&gt;\n  &lt;head lang=\"en\"&gt;\n    &lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.0.3/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;  \n  &lt;body ng-controller=\"MainCtrl\" ng-init=\"init('James Bond','007')\"&gt;\n    &lt;h1&gt;I am  {{name}} {{id}}&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>var app = angular.module('angularjs-starter', []);\n\napp.controller('MainCtrl', function($scope) {\n\n  $scope.init = function(name, id)\n  {\n    //This function is sort of private constructor for controller\n    $scope.id = id;\n    $scope.name = name; \n    //Based on passed argument you can make a call to resource\n    //and initialize more objects\n    //$resource.getMeBond(007)\n  };\n\n\n});\n</code></pre>\n    "},{"t":"What's the most concise way to read query parameters in AngularJS?","l":"http://stackoverflow.com/questions/11063673/whats-the-most-concise-way-to-read-query-parameters-in-angularjs","q":"\n\n<p>I'd like to read the values of URL query parameters using AngularJS.  I'm accessing the HTML with the following URL:</p>\n\n<p><code>http://127.0.0.1:8080/test.html?target=bob</code></p>\n\n<p>As expected, <code>location.search</code> is <code>\"?target=bob\"</code>.\nFor accessing the value of <em>target</em>, I've found various examples listed on the web, but none of them work in AngularJS 1.0.0rc10.  In particular, the following are all <code>undefined</code>:</p>\n\n<ul>\n<li><code>$location.search.target</code></li>\n<li><code>$location.search['target']</code></li>\n<li><code>$location.search()['target']</code></li>\n</ul>\n\n<p>Anyone know what will work? (I'm using <code>$location</code> as a parameter to my controller)</p>\n\n<hr>\n\n<p>Update:</p>\n\n<p>I've posted a solution below, but I'm not entirely satisfied with it.\nThe documentation at <a href=\"http://docs.angularjs.org/guide/%24location\">Developer Guide: Angular Services: Using $location</a> states the following about <code>$location</code>:</p>\n\n<blockquote>\n  <p>When should I use $location?</p>\n  \n  <p>Any time your application needs to react to a change in the current\n  URL or if you want to change the current URL in the browser.</p>\n</blockquote>\n\n<p>For my scenario, my page will be opened from an external webpage with a query parameter, so I'm not \"reacting to a change in the current URL\" per se.  So maybe <code>$location</code> isn't the right tool for the job (for the ugly details, see my answer below). I've therefore changed the title of this question from \"How to read query parameters in AngularJS using $location?\" to \"What's the most concise way to read query parameters in AngularJS?\".  Obviously I could just use javascript and regular expression to parse <code>location.search</code>, but going that low-level for something so basic really offends my programmer sensibilities.</p>\n\n<p>So: is there a better way to use <code>$location</code> than I do in my answer, or is there a concise alternate?</p>\n    ","a":"\n<p>You can inject <a href=\"http://docs.angularjs.org/api/ngRoute.$routeParams\">$routeParams</a> into your controller. Here's an example from the docs:</p>\n\n<pre><code>// Given:\n// URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n// Route: /Chapter/:chapterId/Section/:sectionId\n//\n// Then\n$routeParams ==&gt; {chapterId:1, sectionId:2, search:'moby'}\n</code></pre>\n\n<p>EDIT: You can also get and set query parameters with <a href=\"http://docs.angularjs.org/api/ng.$location#search\">$location.search()</a> - since $routeParams are less useful after the controller's initial load.</p>\n    "},{"t":"How to handle anchor hash linking in AngularJS","l":"http://stackoverflow.com/questions/14712223/how-to-handle-anchor-hash-linking-in-angularjs","q":"\n\n<p>Do any of you know how to nicely handle anchor hash linking in AngularJS?</p>\n\n<p>I have the following markup for a simple FAQ-page</p>\n\n<pre><code>&lt;a href=\"#faq-1\"&gt;Question 1&lt;/a&gt;\n&lt;a href=\"#faq-2\"&gt;Question 2&lt;/a&gt;\n&lt;a href=\"#faq-3\"&gt;Question 3&lt;/a&gt;\n\n&lt;h3 id=\"faq-1\"&gt;Question 1&lt;/h3&gt;\n&lt;h3 id=\"faq-2\"&gt;Question 2&lt;/h3&gt;\n&lt;h3 id=\"fa1-3\"&gt;Question 3&lt;/h3&gt;\n</code></pre>\n\n<p>When clicking on any of the above links AngularJS intercepts and routes me to a completely different page (in my case, a 404-page as there are no routes matching the links.)</p>\n\n<p>My first thought was to create a route matching \"/faq/:chapter\" and in the corresponding controller check $routeParams.chapter after a matching element and then use jQuery to scroll down to it.\nBut then AngularJS shits on me again and just scrolls to the top of the page anyway.</p>\n\n<p>So, anyone here done anything similar in the past and knows a good solution to it?</p>\n\n<p>Edit: Switching to html5Mode should solve my problems but we kinda have to support IE8+ anyway  so I fear it's not an accepted solution :/</p>\n    ","a":"\n<p>You're looking for <code>$anchorScroll()</code>.</p>\n\n<p><a href=\"http://docs.angularjs.org/api/ng.$anchorScroll\">Here's the (crappy) documentation.</a></p>\n\n<p><a href=\"https://github.com/angular/angular.js/blob/master/src/ng/anchorScroll.js\">And here's the source.</a></p>\n\n<p>Basically you just inject it and call it in your controller, and it will scroll you to any element with the id found in <code>$location.hash()</code></p>\n\n<pre><code>app.controller('TestCtrl', function($scope, $location, $anchorScroll) {\n   $scope.scrollTo = function(id) {\n      $location.hash(id);\n      $anchorScroll();\n   }\n});\n\n&lt;a ng-click=\"scrollTo('foo')\"&gt;Foo&lt;/a&gt;\n\n&lt;div id=\"foo\"&gt;Here you are&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/PCO051UJS8EHbdkmFV40?p=preview\">Here is a plunker to demonstrate</a></p>\n\n<p><strong>EDIT: to use this with routing</strong></p>\n\n<p>Set up your angular routing as usual, then just add the following code.</p>\n\n<pre><code>app.run(function($rootScope, $location, $anchorScroll, $routeParams) {\n  //when the route is changed scroll to the proper element.\n  $rootScope.$on('$routeChangeSuccess', function(newRoute, oldRoute) {\n    $location.hash($routeParams.scrollTo);\n    $anchorScroll();  \n  });\n});\n</code></pre>\n\n<p>and your link would look like this:</p>\n\n<pre><code>&lt;a href=\"#/test?scrollTo=foo\"&gt;Test/Foo&lt;/a&gt;\n</code></pre>\n\n<p>Here is a <a href=\"http://plnkr.co/edit/De6bBrkHpojgAbEvHszu\">Plunker demonstrating scrolling with routing and $anchorScroll</a></p>\n\n<p><strong>And even simpler:</strong></p>\n\n<pre><code>app.run(function($rootScope, $location, $anchorScroll) {\n  //when the route is changed scroll to the proper element.\n  $rootScope.$on('$routeChangeSuccess', function(newRoute, oldRoute) {\n    if($location.hash()) $anchorScroll();  \n  });\n});\n</code></pre>\n\n<p>and your link would look like this:</p>\n\n<pre><code>&lt;a href=\"#/test#foo\"&gt;Test/Foo&lt;/a&gt;\n</code></pre>\n    "},{"t":"How can I pass variables between controllers?","l":"http://stackoverflow.com/questions/12008908/how-can-i-pass-variables-between-controllers","q":"\n\n<p>I have two Angular controllers:</p>\n\n<pre><code>function Ctrl1($scope) {\n    $scope.prop1 = \"First\";\n}\n\nfunction Ctrl2($scope) {\n    $scope.prop2 = \"Second\";\n    $scope.both = Ctrl1.prop1 + $scope.prop2; //This is what I would like to do ideally\n}\n</code></pre>\n\n<p>I can't use <code>Ctrl1</code> inside <code>Ctrl2</code> because it is undefined. However if I try to pass it in like so…</p>\n\n<pre><code>function Ctrl2($scope, Ctrl1) {\n    $scope.prop2 = \"Second\";\n    $scope.both = Ctrl1.prop1 + $scope.prop2; //This is what I would like to do ideally\n}\n</code></pre>\n\n<p>I get an error. Does anyone know how to do this?</p>\n\n<p>Doing </p>\n\n<pre><code>Ctrl2.prototype = new Ctrl1();\n</code></pre>\n\n<p>Also fails.</p>\n\n<p><strong>NOTE:</strong> These controllers are not nested inside each other.</p>\n    ","a":"\n<p>One way to share variables across multiple controllers is to <a href=\"https://code.angularjs.org/1.2.21/docs/guide/services\">create a service</a> and inject it in any controller where you want to use it.</p>\n\n<p><strong>Simple service example:</strong></p>\n\n<pre><code>angular.module('myApp', [])\n    .service('sharedProperties', function () {\n        var property = 'First';\n\n        return {\n            getProperty: function () {\n                return property;\n            },\n            setProperty: function(value) {\n                property = value;\n            }\n        };\n    });\n</code></pre>\n\n<p><strong>Using the service in a controller:</strong></p>\n\n<pre><code>function Ctrl2($scope, sharedProperties) {\n    $scope.prop2 = \"Second\";\n    $scope.both = sharedProperties.getProperty() + $scope.prop2;\n}\n</code></pre>\n\n<p>This is described very nicely in <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/\">this blog</a> (Lesson 2 and on in particular).</p>\n\n<p>I've found that if you want to bind to these properties across multiple controllers it works better if you bind to an object's property instead of a primitive type (boolean, string, number) to retain the bound reference. </p>\n\n<p>Example: <code>var property = { Property1: 'First' };</code> instead of <code>var property = 'First';</code>.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong> To (hopefully) make things more clear <a href=\"http://jsfiddle.net/b2fCE/1/\">here is a fiddle</a> that shows an example of:</p>\n\n<ul>\n<li><strong>Binding to static copies of the shared value (in myController1)</strong>\n<ul>\n<li>Binding to a primitive (string)</li>\n<li>Binding to an object's property (saved to a scope variable)</li>\n</ul></li>\n<li><strong>Binding to shared values that update the UI as the values are updated (in myController2)</strong>\n<ul>\n<li>Binding to a function that returns a primitive (string)</li>\n<li>Binding to the object's property</li>\n<li>Two way binding to an object's property</li>\n</ul></li>\n</ul>\n    "},{"t":"AngularJS - Create a directive that uses ng-model","l":"http://stackoverflow.com/questions/14115701/angularjs-create-a-directive-that-uses-ng-model","q":"\n\n<p>I am trying to create a directive that would create an input field with the same ng-model as the element that creates the directive.</p>\n\n<p>Here's what I came up with so far:</p>\n\n<p><strong>HTML</strong></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"plunker\" &gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;AngularJS Plunker&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n  &lt;script&gt;document.write(\"&lt;base href=\\\"\" + document.location + \"\\\" /&gt;\");&lt;/script&gt;\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=\"MainCtrl\"&gt;\n  This scope value &lt;input ng-model=\"name\"&gt;\n  &lt;my-directive ng-model=\"name\"&gt;&lt;/my-directive&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope) {\n  $scope.name = \"Felipe\";\n});\n\napp.directive('myDirective', function($compile) {\n  return {\n    restrict: 'E',\n    scope: {\n      ngModel: '='\n    },\n    template: '&lt;div class=\"some\"&gt;&lt;label for=\"{{id}}\"&gt;{{label}}&lt;/label&gt;' +\n      '&lt;input id=\"{{id}}\" ng-model=\"value\"&gt;&lt;/div&gt;',\n    replace: true,\n    require: 'ngModel',\n    link: function($scope, elem, attr, ctrl) {\n      $scope.label = attr.ngModel;\n      $scope.id = attr.ngModel;\n      console.debug(attr.ngModel);\n      console.debug($scope.$parent.$eval(attr.ngModel));\n      var textField = $('input', elem).\n        attr('ng-model', attr.ngModel).\n        val($scope.$parent.$eval(attr.ngModel));\n\n      $compile(textField)($scope.$parent);\n    }\n  };\n});\n</code></pre>\n\n<p>However, I am not confident this is the right way to handle this scenario, and there is a bug that my control is not getting initialized with the value of the ng-model target field.</p>\n\n<p>Here's a Plunker of the code above: <a href=\"http://plnkr.co/edit/IvrDbJ\">http://plnkr.co/edit/IvrDbJ</a></p>\n\n<p>What's the correct way of handling this?</p>\n\n<p><strong>EDIT</strong>: After removing the <code>ng-model=\"value\"</code> from the template, this seems to be working fine. However, I will keep this question open because I want to double check this is the right way of doing this.</p>\n    ","a":"\n<p>It's actually pretty good logic but you can simplify things a bit.</p>\n\n<h3>Directive</h3>\n\n<pre><code>var app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope) {\n  $scope.model = { name: 'World' };\n  $scope.name = \"Felipe\";\n});\n\napp.directive('myDirective', function($compile) {\n  return {\n    restrict: 'AE', //attribute or element\n    scope: {\n      myDirectiveVar: '=',\n     //bindAttr: '='\n    },\n    template: '&lt;div class=\"some\"&gt;' +\n      '&lt;input ng-model=\"myDirectiveVar\"&gt;&lt;/div&gt;',\n    replace: true,\n    //require: 'ngModel',\n    link: function($scope, elem, attr, ctrl) {\n      console.debug($scope);\n      //var textField = $('input', elem).attr('ng-model', 'myDirectiveVar');\n      // $compile(textField)($scope.$parent);\n    }\n  };\n});\n</code></pre>\n\n<h3>Html with directive</h3>\n\n<pre><code>&lt;body ng-controller=\"MainCtrl\"&gt;\n  This scope value &lt;input ng-model=\"name\"&gt;\n  &lt;my-directive my-directive-var=\"name\"&gt;&lt;/my-directive&gt;\n&lt;/body&gt;\n</code></pre>\n\n<h3>CSS</h3>\n\n<pre><code>.some {\n  border: 1px solid #cacaca;\n  padding: 10px;\n}\n</code></pre>\n\n<p>You can see it in action with this <a href=\"http://plnkr.co/edit/A29hl6\">Plunker</a>.</p>\n\n<p>Here's what I see:</p>\n\n<ul>\n<li>I understand why you want to use 'ng-model' but in your case it's not necessary.  ng-model is to link <em>existing</em> html elements with a value in the scope.  Since you're creating a directive yourself you're creating a 'new' html element, so you don't need ng-model.</li>\n</ul>\n\n<p><strong>EDIT</strong> As mentioned by Mark in his comment, there's no reason that you <em>can't</em> use ng-model, just to keep with convention.</p>\n\n<ul>\n<li>By explicitly creating a scope in your directive (an 'isolated' scope), the directive's scope cannot access the 'name' variable on the parent scope (which is why, I think, you wanted to use ng-model).</li>\n<li>I removed ngModel from your directive and replaced it with a custom name that you can change to whatever.</li>\n<li>The thing that makes it all still work is that '=' sign in the scope.  Checkout the docs  <a href=\"http://docs.angularjs.org/guide/directive\">docs</a> under the 'scope' header.</li>\n</ul>\n\n<p>In general, your directives should use the isolated scope (which you did correctly) and use the '=' type scope if you want a value in your directive to always map to a value in the parent scope. </p>\n    "},{"t":"How can I test an an AngularJS service from the console?","l":"http://stackoverflow.com/questions/15527832/how-can-i-test-an-an-angularjs-service-from-the-console","q":"\n\n<p>I have a service like:</p>\n\n<pre><code>angular.module('app').factory('ExampleService', function(){\n  this.f1 = function(world){\n    return 'Hello '+world;\n  }\n  return this;\n})\n</code></pre>\n\n<p>I would like to <strong>test it from the JavaScript console</strong> and call the function <code>f1()</code> of the service. </p>\n\n<p>How can I do that?</p>\n    ","a":"\n<p>So I found out that you can not simply call <code>angular.injector(['app'])</code> if there already exists an injector. Because this function tries to create a new injector.</p>\n\n<p>Instead you have to call <code>injector = angular.element(document.body).injector()</code></p>\n\n<p>From the retrieved <code>injector</code> you can then get whatever service you like with <code>injector.get('ServiceName')</code></p>\n\n<p>So in <strong>one line</strong> the command would look like this:</p>\n\n<pre><code>angular.element(document.body).injector().get('serviceName')\n</code></pre>\n\n<p>More information on that in this answer: <a href=\"http://stackoverflow.com/questions/13400687/cant-retrieve-the-injector-from-angular\">Can't retrieve the injector from angular</a> <br>\nAnd even more here: <a href=\"http://stackoverflow.com/questions/10490570/call-angular-js-from-legacy-code\">Call Angular JS from legacy code</a>\n</p><hr>\nAnother useful trick to get the <code>$scope</code> of a particular element. \nSelect the element with the <strong>DOM inspection tool</strong> of your developer tools and then run the following line (<code>$0</code> is always the selected element): <br>\n<code>angular.element($0).scope()</code><p></p>\n    "},{"t":"When to favor ng-if vs. ng-show/ng-hide?","l":"http://stackoverflow.com/questions/21869283/when-to-favor-ng-if-vs-ng-show-ng-hide","q":"\n\n<p>I understand that <code>ng-show</code> and <code>ng-hide</code> affect the class set on an element and that <code>ng-if</code> controls whether an element is rendered as part of the DOM. </p>\n\n<p><strong>Are there guidelines on choosing <code>ng-if</code> over <code>ng-show</code>/<code>ng-hide</code> or vice-versa?</strong></p>\n    ","a":"\n<p>Depends on your use case but to summarise the difference:</p>\n\n<ol>\n<li><code>ng-if</code> will remove elements from DOM. This means that all your handlers or anything else attached to those elements will be lost. For example, if you bound a click handler to one of child elements, when <code>ng-if</code> evaluates to false, that element will be removed from DOM and your click handler will not work any more, even after <code>ng-if</code> later evaluates to true and displays the element. You will need to reattach the handler.</li>\n<li><code>ng-show/ng-hide</code> does not remove the elements from DOM. It uses CSS styles to hide/show elements (note: you might need to add your own classes). This way your handlers that were attached to children will not be lost.</li>\n<li><code>ng-if</code> creates a child scope while <code>ng-show/ng-hide</code> does not</li>\n</ol>\n\n<p>Elements that are not in the DOM have less performance impact and your web app might appear to be faster when using <code>ng-if</code> compared to <code>ng-show/ng-hide</code>. In my experience, the difference is negligible. Animations are possible when using both ng-show/ng-hide and ng-if, with examples for both in the Angular documentation.</p>\n\n<p>Ultimately, the question you need to answer is whether you can remove element from DOM or not?</p>\n    "},{"t":"Submit form on pressing Enter with AngularJS","l":"http://stackoverflow.com/questions/15417125/submit-form-on-pressing-enter-with-angularjs","q":"\n\n<p>In this particular case, what options do I have to make these inputs call a function when I press Enter?</p>\n\n<pre><code>// HTML view //\n&lt;form&gt;\n    &lt;input type=\"text\" ng-model=\"name\" &lt;!-- Press ENTER and call myFunc --&gt; /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"text\" ng-model=\"email\" &lt;!-- Press ENTER and call myFunc --&gt; /&gt;\n&lt;/form&gt;\n\n// Controller //\n.controller('mycontroller', ['$scope',\n                            function($scope) {\n\n    $scope.name = '';\n    $scope.email = '';\n\n    // Function to be called when pressing ENTER\n    $scope.myFunc = function() {\n       alert('Submitted');\n    };\n}])\n</code></pre>\n    ","a":"\n<p>Angular supports this out of the box. Have you tried <a href=\"http://docs.angularjs.org/api/ng.directive:ngSubmit\">ngSubmit</a> on your form element?</p>\n\n<pre><code>&lt;form ng-submit=\"myFunc()\" ng-controller=\"mycontroller\"&gt;\n   &lt;input type=\"text\" ng-model=\"name\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"text\" ng-model=\"email\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>EDIT: Per the comment regarding the submit button, see <a href=\"http://stackoverflow.com/questions/477691/submitting-a-form-by-pressing-enter-without-a-submit-button\">Submitting a form by pressing enter without a submit button</a> which gives the solution of:</p>\n\n<pre><code>&lt;input type=\"submit\" style=\"position: absolute; left: -9999px; width: 1px; height: 1px;\"/&gt;\n</code></pre>\n\n<p>If you don't like the hidden submit button solution, you'll need to bind a controller function to the Enter keypress or keyup event.  This normally requires a custom directive, but the AngularUI library has a nice keypress solution set up already.  See <a href=\"http://angular-ui.github.com/\">http://angular-ui.github.com/</a> </p>\n\n<p>After adding the angularUI lib, your code would be something like: </p>\n\n<pre><code>&lt;form ui-keypress=\"{13:'myFunc($event)'}\"&gt;\n  ... input fields ...\n&lt;/form&gt;\n</code></pre>\n\n<p>or you can bind the enter keypress to each individual field.</p>\n\n<p>Also, see this SO questions for creating a simple keypres directive:\n<a href=\"http://stackoverflow.com/questions/11264188/how-can-i-detect-onkeyup-in-angularjs\">How can I detect onKeyUp in AngularJS?</a></p>\n\n<p>EDIT (2014-08-28): At the time this answer was written, ng-keypress/ng-keyup/ng-keydown did not exist as native directives in AngularJS.  In the comments below @darlan-alves has a pretty good solution with: </p>\n\n<p><code>&lt;input ng-keyup=\"$event.keyCode == 13 &amp;&amp; myFunc()\"... /&gt;</code></p>\n    "},{"t":"How do I conditionally apply CSS styles in AngularJS?","l":"http://stackoverflow.com/questions/13813254/how-do-i-conditionally-apply-css-styles-in-angularjs","q":"\n\n<p>Q1. Suppose I want to alter the look of each \"item\" that a user marks for deletion before the main \"delete\" button is pressed.  (This immediate visual feedback should eliminate the need for the proverbial \"are you sure?\" dialog box.) The user will check checkboxes to indicate which items should be deleted.  If a checkbox is unchecked, that item should revert back to its normal look.</p>\n\n<p>What's the best way to apply or remove the CSS styling?</p>\n\n<p>Q2. Suppose I want to allow each user to personalize how my site is presented.  E.g., select from a fixed set of font sizes, allow user-definable foreground and background colors, etc.</p>\n\n<p>What's the best way to apply the CSS styling the user selects/inputs?</p>\n    ","a":"\n<p>Angular provides a number of built-in directives for manipulating CSS styling conditionally/dynamically:</p>\n\n<ul>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angClass\">ng-class</a></strong> - use when the set of CSS styles is static/known ahead of time</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angStyle\">ng-style</a></strong> - use when you can't define a CSS class because the style values may change dynamically.  Think programmable control of the style values.</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angShow\">ng-show</a></strong> and <strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angHide\">ng-hide</a></strong> - use if you only need to show or hide something (modifies CSS)</li>\n<li><strong><a href=\"http://code.angularjs.org/1.1.5/docs/api/ng.directive%3angIf\">ng-if</a></strong> - new in version 1.1.5, use instead of the more verbose ng-switch if you only need to check for a single condition (modifies DOM)</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angSwitch\">ng-switch</a></strong> - use instead of using several mutually exclusive ng-shows (modifies DOM)</li>\n<li><strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angDisabled\">ng-disabled</a></strong> and <strong><a href=\"http://docs.angularjs.org/api/ng.directive%3angReadonly\">ng-readonly</a></strong> - use to restrict form element behavior</li>\n<li><strong><a href=\"http://code.angularjs.org/1.1.4/docs/api/ng.directive%3angAnimate\">ng-animate</a></strong> - new in version 1.1.4, use to add CSS3 transitions/animations</li>\n</ul>\n\n<p>The normal \"Angular way\" involves tying a model/scope property to a UI element that will accept user input/manipulation (i.e., use ng-model), and then associating that model property to one of the built-in directives mentioned above.  </p>\n\n<p>When the user changes the UI, Angular will automatically update the associated elements on the page.</p>\n\n<p></p><hr>\nQ1 sounds like a good case for ng-class -- the CSS styling can be captured in a class.<p></p>\n\n<p><strong>ng-class</strong> accepts an \"expression\" that must evaluate to one of the following:</p>\n\n<ol>\n<li>a string of space-delimited class names</li>\n<li>an array of class names</li>\n<li>a map/object of class names to boolean values</li>\n</ol>\n\n<p>Assuming your items are displayed using ng-repeat over some array model, and that when the checkbox for an item is checked you want to apply the <code>pending-delete</code> class:</p>\n\n<pre><code>&lt;div ng-repeat=\"item in items\" ng-class=\"{'pending-delete': item.checked}\"&gt;\n   ... HTML to display the item ...\n   &lt;input type=\"checkbox\" ng-model=\"item.checked\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Above, we used ng-class expression type #3 - a map/object of class names to boolean values.</p>\n\n<p></p><hr>\nQ2 sounds like a good case for ng-style -- the CSS styling is dynamic, so we can't define a class for this.<p></p>\n\n<p><strong>ng-style</strong> accepts an \"expression\" that must evaluate to:</p>\n\n<ol>\n<li>an map/object of CSS style names to CSS values</li>\n</ol>\n\n<p>For a contrived example, suppose the user can type in a color name into a texbox for the background color (a jQuery color picker would be much nicer):</p>\n\n<pre><code>&lt;div class=\"main-body\" ng-style=\"{color: myColor}\"&gt;\n   ...\n   &lt;input type=\"text\" ng-model=\"myColor\" placeholder=\"enter a color name\"&gt;\n</code></pre>\n\n<p></p><hr>\n<a href=\"http://jsfiddle.net/mrajcok/eTTZj/\">Fiddle</a> for both of the above.<p></p>\n\n<p>The fiddle also contains an example of <strong>ng-show</strong> and <strong>ng-hide</strong>.  If a checkbox is checked, in addition to the background-color turning pink, some text is shown.  If 'red' is entered in the textbox, a div becomes hidden.</p>\n    "},{"t":"ng-repeat :filter by single field","l":"http://stackoverflow.com/questions/14733136/ng-repeat-filter-by-single-field","q":"\n\n<p>I have an array of products that I'm repeating over using ng-repeat and am using </p>\n\n<pre><code>&lt;div ng-repeat=\"product in products | filter:by_colour\"&gt; \n</code></pre>\n\n<p>to filter these products by colour. The filter is working but if the product name / description etc contains the colour then the product remains after the filter is applied.</p>\n\n<p>How do I set the filter to only apply to the colour field of my array rather than every field?</p>\n    ","a":"\n<p>See the example on the <a href=\"http://docs.angularjs.org/api/ng.filter%3afilter\">filter</a> page.  Use an object, and set the color in the color property:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>Search by color: &lt;input type=\"text\" ng-model=\"search.color\"&gt;\n&lt;div ng-repeat=\"product in products | filter:search\"&gt; \n</code></pre>\n    "},{"t":"What is the difference between required and ng-required?","l":"http://stackoverflow.com/questions/16648669/what-is-the-difference-between-required-and-ng-required","q":"\n\n<p>What is the difference between <code>required</code> and <code>ng-required</code> (form validation)?</p>\n    ","a":"\n<p>AngularJS form elements look for the required attribute to perform validation functions. ng-required allows you to set the required attibute depending on a boolean test (for instance, only require field B - <em>say, a student number</em> - if the field A has a certain value - <em>if you selected \"student\" as a choice</em>)</p>\n\n<p>As an example, <code>&lt;input required&gt;</code> and <code>&lt;input ng-required=\"true\"&gt;</code> are essentially the same thing</p>\n\n<p>If you are wondering <strong>why</strong> this is this way, (and not just make <code>&lt;input required=\"true\"&gt;</code> or <code>&lt;input required=\"false\"&gt;</code>), it is due to the limitations of HTML - the <code>required</code> attribute has no associated value - it's mere presence means (as per HTML standards) that the element is required - so angular needs a way to set/unset required value (<code>required=\"false\"</code> would be invalid HTML)</p>\n    "},{"t":"How to deep watch an array in angularjs?","l":"http://stackoverflow.com/questions/14712089/how-to-deep-watch-an-array-in-angularjs","q":"\n\n<p>There is an array of objects in my scope, I want to watch all the values of each object.</p>\n\n<p>This is my code:</p>\n\n<pre><code>function TodoCtrl($scope) {\n  $scope.columns = [\n      { field:'title', displayName: 'TITLE'},\n      { field: 'content', displayName: 'CONTENT' }\n  ];\n   $scope.$watch('columns', function(newVal) {\n       alert('columns changed');\n   });\n}\n</code></pre>\n\n<p>But when I modify the values, e.g. I change <code>TITLE</code> to <code>TITLE2</code>, the <code>alert('columns changed')</code> never popped.</p>\n\n<p>How to deep watch the objects inside an array?</p>\n\n<p>There is a live demo: <a href=\"http://jsfiddle.net/SYx9b/\">http://jsfiddle.net/SYx9b/</a></p>\n    ","a":"\n\n\n<p>You can set the 3rd argument of <code>$watch</code> to <code>true</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>scope.$watch('data', function (newVal, oldVal) { /*...*/ }, true);\n</code></pre>\n\n<p>See <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch\">http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch</a></p>\n\n<p>Since Angular 1.1.x you can also use $watchCollection to watch shallow watch (just the \"first level\" of) the collection.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>scope.$watchCollection('data', function (newVal, oldVal) { /*...*/ });\n</code></pre>\n\n<p>See <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watchCollection\">https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watchCollection</a></p>\n    "},{"t":"How to access cookies in AngularJS?","l":"http://stackoverflow.com/questions/10961963/how-to-access-cookies-in-angularjs","q":"\n\n<p>What's the AngularJS way to access cookies?  I've seen references to both a service and a module for cookies, but no examples.  </p>\n\n<p>Is there, or is there not an AngularJS canonical approach?</p>\n    ","a":"\n<p>This answer has been updated to reflect latest stable angularjs version. One important note is that $cookieStore is a thin wrapper surrounding $cookies. They are pretty much the same in that they only work with session cookies. Although, this answers the original question, there are other solutions you may wish to consider such as using localstorage, or jquery.cookie plugin (which would give you more fine-grained control and do serverside cookies. Of course doing so in angularjs means you probably would want to wrap them in a service and use scope.apply to notify angular of changes to models (in some cases).</p>\n\n<p>One other note and that is that there is a slight difference between the two when pulling data out depending on if you used $cookie to store value or $cookieStore. Of course, you'd really want to use one or the other.</p>\n\n<p>In addition to adding reference to the js file you need to inject ngCookies into your app definition such as: </p>\n\n<pre><code>angular.module('myApp', ['ngCookies']);\n</code></pre>\n\n<p>you should then be good to go.</p>\n\n<p>Here is a functional minimal example, where I show that cookieStore is a thin wrapper around cookies:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n   &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n&lt;body ng-controller=\"MyController\"&gt;\n\n  &lt;h3&gt;Cookies&lt;/h3&gt;\n  &lt;pre&gt;{{usingCookies|json}}&lt;/pre&gt;\n  &lt;h3&gt;Cookie Store&lt;/h3&gt;\n  &lt;pre&gt;{{usingCookieStore|json}}&lt;/pre&gt;\n\n  &lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular-cookies.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n    angular.module('myApp', ['ngCookies']);\n    app.controller('MyController',['$scope','$cookies','$cookieStore', \n                       function($scope,$cookies,$cookieStore) {\n      var someSessionObj = { 'innerObj' : 'somesessioncookievalue'};\n\n    $cookies.dotobject = someSessionObj;\n    $scope.usingCookies = { 'cookies.dotobject' : $cookies.dotobject, \"cookieStore.get\" : $cookieStore.get('dotobject') };\n\n    $cookieStore.put('obj', someSessionObj);\n    $scope.usingCookieStore = { \"cookieStore.get\" : $cookieStore.get('obj'), 'cookies.dotobject' : $cookies.obj, };\n    }\n  &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The steps are:</p>\n\n<ol>\n<li>include angular.js</li>\n<li>include angular-cookies.js</li>\n<li>inject <code>ngCookies</code> into your app module (and make sure you reference that module in the <code>ng-app</code> attribute)</li>\n<li>add a <code>$cookies</code> or <code>$cookieStore</code> parameter to the controller</li>\n<li>access the cookie as a member variable using the dot (.) operator\n-- OR --</li>\n<li>access cookieStore using put/get methods</li>\n</ol>\n    "},{"t":"Correct way to integrate Jquery plugins in Angular.js","l":"http://stackoverflow.com/questions/16935095/correct-way-to-integrate-jquery-plugins-in-angular-js","q":"\n\n<p>I was wondering what is the correct way to integrate jquery plugins into my angular app. I've found several tutorials and screen-casts but they seem catered to a specific plugin.</p>\n\n<p>For Example:\n<a href=\"http://amitgharat.wordpress.com/2013/02/03/an-approach-to-use-jquery-plugins-with-angularjs/\">http://amitgharat.wordpress.com/2013/02/03/an-approach-to-use-jquery-plugins-with-angularjs/</a>\n<a href=\"http://www.youtube.com/watch?v=8ozyXwLzFYs\">http://www.youtube.com/watch?v=8ozyXwLzFYs</a></p>\n\n<p>Should I create a directive like so - </p>\n\n<pre><code>App.directive('directiveName', function() {\n    return {\n        restrict: 'A',\n        link: function(scope, element, attrs) {\n            $(element).'pluginActivationFunction'(scope.$eval(attrs.directiveName));\n        }\n    };\n}); \n</code></pre>\n\n<p>And then in the html call the script and the directive?</p>\n\n<pre><code>&lt;div directiveName &gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"pluginName.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Thanks ahead</p>\n    ","a":"\n<p>Yes, you are correct. If you are using a jQuery plugin, do not put the code in the controller. Instead create a directive and put the code that you would normally have inside the <code>link</code> function of the directive.  </p>\n\n<p>There are a couple of points in the documentation that you could take a look at. You can find them here:<br>\n<a href=\"http://docs.angularjs.org/misc/faq#faq_common-pitfalls\">Common Pitfalls</a>  </p>\n\n<p><a href=\"http://docs.angularjs.org/guide/controller#using-controllers-correctly\">Using controllers correctly</a></p>\n\n<p>Ensure that when you are referencing the script in your view, you refer it last - after the angularjs library, controllers, services and filters are referenced.</p>\n\n<p>EDIT: Rather than using <code>$(element)</code>, you can make use of <code>angular.element(element)</code> when using AngularJS with jQuery</p>\n    "},{"t":"How to use a keypress event in angularjs","l":"http://stackoverflow.com/questions/17470790/how-to-use-a-keypress-event-in-angularjs","q":"\n\n<p>I want to catch the enter key press event on the textbox below ... to make it more clear i am using a ng-repeat to populate the tbody .. here is the html ... </p>\n\n<pre><code>&lt;td&gt;&lt;input type=\"number\" id=\"closeqty{{$index}}\" class=\"pagination-right closefield\" \n    data-ng-model=\"closeqtymodel\" data-ng-change=\"change($index)\" required placeholder=\"{{item.closeMeasure}}\" /&gt;&lt;/td&gt;\n</code></pre>\n\n<p>this is my module..</p>\n\n<pre><code>angular.module('components', ['ngResource']);\n</code></pre>\n\n<p>i am using resource to populate the table and my controller code is ... </p>\n\n<pre><code>function Ajaxy($scope, $resource) {\n//controller which has resource to populate the table \n}\n</code></pre>\n\n<p>if there is anymore info needed please comment .. thanks in advance</p>\n    ","a":"\n<p>You need to add a <code>directive</code>, like this:</p>\n\n<p><strong>Javascript</strong>:</p>\n\n<pre><code>app.directive('ngEnter', function () {\n    return function (scope, element, attrs) {\n        element.bind(\"keydown keypress\", function (event) {\n            if(event.which === 13) {\n                scope.$apply(function (){\n                    scope.$eval(attrs.ngEnter);\n                });\n\n                event.preventDefault();\n            }\n        });\n    };\n});\n</code></pre>\n\n<p><strong>HTML</strong>:</p>\n\n<pre><code>&lt;div ng-app=\"\" ng-controller=\"MainCtrl\"&gt;\n    &lt;input type=\"text\" ng-enter=\"doSomething()\"&gt;    \n&lt;/div&gt;\n</code></pre>\n    "},{"t":"When to use service instead of factory","l":"http://stackoverflow.com/questions/18939709/when-to-use-service-instead-of-factory","q":"\n\n<blockquote>\n  <p>Please bear with me here. I know there are other answers such as:\n  <a href=\"http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory\">Angular.js: service vs provider vs factory?</a></p>\n</blockquote>\n\n<p><strong>However I still can't figure out when you'd use service over factory.</strong></p>\n\n<p>From what I can tell factory is commonly used to create \"common\" functions that can be called by multiple Controllers: <a href=\"http://stackoverflow.com/questions/11324202/angularjs-common-controller-functions?lq=1\">AngularJS - Common controller functions</a></p>\n\n<p>The Angular docs seem to prefer factory over service. They even refer to \"service\" when they use factory which is even more confusing! <a href=\"http://docs.angularjs.org/guide/dev_guide.services.creating_services\">http://docs.angularjs.org/guide/dev_guide.services.creating_services</a></p>\n\n<p><strong>So when would one use service?</strong></p>\n\n<p>Is there something that is only possible or much easier done with service?</p>\n\n<p>Is there anything different that goes on behind the scenes? Performance/memory differences? </p>\n\n<p>Here's an example. Other than the method of declaration, they seem identical and I can't figure out why I'd do one vs the other. <a href=\"http://jsfiddle.net/uEpkE/\">http://jsfiddle.net/uEpkE/</a> </p>\n\n<p><strong>Update:</strong> From Thomas' answer it seems to imply that service is for simpler logic and factory for more complex logic with private methods, so I updated the fiddle code below and it seems that both are able to support private functions?</p>\n\n<pre><code>myApp.factory('fooFactory', function() {\n    var fooVar;\n    var addHi = function(foo){ fooVar = 'Hi '+foo; }\n\n    return {\n        setFoobar: function(foo){\n            addHi(foo);\n        },\n        getFoobar:function(){\n            return fooVar;\n        }\n    };\n});\nmyApp.service('fooService', function() {\n    var fooVar;\n    var addHi = function(foo){ fooVar = 'Hi '+foo;}\n\n    this.setFoobar = function(foo){\n        addHi(foo);\n    }\n    this.getFoobar = function(){\n        return fooVar;\n    }\n});\n\nfunction MyCtrl($scope, fooService, fooFactory) {\n    fooFactory.setFoobar(\"fooFactory\");\n    fooService.setFoobar(\"fooService\");\n    //foobars = \"Hi fooFactory, Hi fooService\"\n    $scope.foobars = [\n        fooFactory.getFoobar(),\n        fooService.getFoobar()\n    ];\n}\n</code></pre>\n    ","a":"\n<h2>Explanation</h2>\n\n<p>You got different things here : </p>\n\n<p><strong>First:</strong></p>\n\n<ul>\n<li>If you use a service you will get <strong>the instance of a function</strong> (\"this\"\nkeyword). </li>\n<li>If you use a factory you will get  <strong>the value that is returned by\ninvoking the function reference</strong> (the return statement in    factory).</li>\n</ul>\n\n<p><em>ref:</em> <a href=\"http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory\">angular.service vs angular.factory</a></p>\n\n<p><strong>Second:</strong> </p>\n\n<p>Keep in mind all providers in AngularJS (value, constant, services, factories) are singletons ! </p>\n\n<p><strong>Three:</strong> </p>\n\n<p>Using one or the other (service or factory) is about code style.\nBut, the <strong>common way</strong> in AngularJS is to use <strong>factory</strong>. </p>\n\n<p>Why ? </p>\n\n<p><strong>Because</strong> <em>\"The factory method is the most common way of getting objects into AngularJS dependency injection system. It is very flexible and can contain sophisticated creation logic. Since factories are regular functions, we can also take advantage  of a new lexical scope to simulate \"private\" variables. This is very useful as we can hide implementation details of a given service.\"</em> </p>\n\n<p>(<em>ref</em>: <a href=\"http://rads.stackoverflow.com/amzn/click/1782161821\">http://www.amazon.com/Mastering-Web-Application-Development-AngularJS/dp/1782161821</a>).</p>\n\n<h2>Usage</h2>\n\n<p><em>Service :</em> Could be useful for sharing utility functions that are useful to invoke by simply appending () to the injected function reference. Could also be run with injectedArg.call(this) or similar.</p>\n\n<p><em>Factory :</em> Could be useful for returning a ‘class’ function that can then be new’ed to create instances.</p>\n\n<p>So, <strong>use a factory when you have complex logic</strong> in your service and <strong>you don't want expose this complexity</strong>. </p>\n\n<p>In other cases <strong>if you want to return an instance of a service just use service</strong>. </p>\n\n<p>But you'll see with time that you'll use factory in 80% of cases i think.</p>\n\n<p>For more details : <a href=\"http://blog.manishchhabra.com/2013/09/angularjs-service-vs-factory-with-example/\">http://blog.manishchhabra.com/2013/09/angularjs-service-vs-factory-with-example/</a> </p>\n\n<hr>\n\n<p><strong>UPDATE :</strong></p>\n\n<p>Excellent post here : \n<a href=\"http://iffycan.blogspot.com.ar/2013/05/angular-service-or-factory.html\">http://iffycan.blogspot.com.ar/2013/05/angular-service-or-factory.html</a></p>\n\n<blockquote>\n  <p>\"If you want your function to be called like a normal function, use\n  factory. If you want your function to be instantiated with the new\n  operator, use service. If you don't know the difference, use factory.\"</p>\n</blockquote>\n\n<hr>\n\n<p><strong>UPDATE :</strong></p>\n\n<p>AngularJS team does his work and give an explanation : \n<a href=\"http://docs.angularjs.org/guide/providers\">http://docs.angularjs.org/guide/providers</a></p>\n\n<p>And from this page : </p>\n\n<blockquote>\n  <p>\"Factory and Service are the most commonly used recipes. The only difference between them is that Service recipe works better for objects of custom type, while Factory can produce JavaScript primitives and functions.\"</p>\n</blockquote>\n    "},{"t":"Adding parameter to ng-click function inside ng-repeat doesn't seem to work","l":"http://stackoverflow.com/questions/17039926/adding-parameter-to-ng-click-function-inside-ng-repeat-doesnt-seem-to-work","q":"\n\n<p>I have a simple loop with <code>ng-repeat</code> like this:</p>\n\n<pre><code>&lt;li ng-repeat='task in tasks'&gt;\n  &lt;p&gt; {{task.name}}\n  &lt;button ng-click=\"removeTask({{task.id}})\"&gt;remove&lt;/button&gt;\n&lt;/li&gt;\n</code></pre>\n\n<p>There is a function in the controller <code>$scope.removeTask(taskID)</code>.</p>\n\n<p>As far as I know Angular will first render the view and replace interpolated <code>{{task.id}}</code> with a number, and then, on click event, will evaluate <code>ng-click</code> string.</p>\n\n<p>In this case <code>ng-click</code> gets totally what is expected, ie: <code>ng-click=\"removeTask(5)\".</code> However... it's not doing anything.</p>\n\n<p>Of course I can write a code to get <code>task.id</code> from the <code>$tasks</code> array or even the DOM, but this does not seem like the Angular way.</p>\n\n<p>So, how can one add dynamic content to <code>ng-click</code> directive inside a <code>ng-repeat</code> loop?</p>\n    ","a":"\n<p>Instead of </p>\n\n<pre><code>&lt;button ng-click=\"removeTask({{task.id}})\"&gt;remove&lt;/button&gt;\n</code></pre>\n\n<p>do this:</p>\n\n<pre><code>&lt;button ng-click=\"removeTask(task.id)\"&gt;remove&lt;/button&gt;\n</code></pre>\n\n<p>Please see this fiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/JSWorld/Hp4W7/34/\">http://jsfiddle.net/JSWorld/Hp4W7/34/</a></p>\n    "},{"t":"Is there a way to make AngularJS load partials in the beginning and not at when needed?","l":"http://stackoverflow.com/questions/12346690/is-there-a-way-to-make-angularjs-load-partials-in-the-beginning-and-not-at-when","q":"\n\n<p>I have a route setup like this:</p>\n\n<pre><code>var myApp = angular.module('myApp', []).\n    config(['$routeProvider', function ($routeProvider) {\n    $routeProvider.\n        when('/landing', {\n            templateUrl: '/landing-partial',\n            controller: landingController\n        }).\n        when('/:wkspId/query', {\n            templateUrl: '/query-partial',\n            controller: queryController\n        }).\n        otherwise({\n            redirectTo: '/landing'\n        });\n}]);\n</code></pre>\n\n<p>I want to be able to make angularjs download both the partials in the beginning and not when requested.</p>\n\n<p>Is it possible?</p>\n    ","a":"\n<p>Yes, there are at least 2 solutions for this:</p>\n\n<ol>\n<li>Use the <code>script</code> directive (<a href=\"http://docs.angularjs.org/api/ng.directive%3ascript\">http://docs.angularjs.org/api/ng.directive:script</a>) to put your partials in the initially loaded HTML</li>\n<li>You could also fill in <code>$templateCache</code> (<a href=\"http://docs.angularjs.org/api/ng.%24templateCache\">http://docs.angularjs.org/api/ng.$templateCache</a>) from JavaScript if needed (possibly based on result of <code>$http</code> call)</li>\n</ol>\n\n<p>If you would like to use method (2) to fill in <code>$templateCache</code> you can do it like this:</p>\n\n<pre><code>$templateCache.put('second.html', '&lt;b&gt;Second&lt;/b&gt; template');\n</code></pre>\n\n<p>Of course the templates content could come from a <code>$http</code> call:</p>\n\n<pre><code>$http.get('third.html', {cache:$templateCache});\n</code></pre>\n\n<p>Here is the plunker those techniques: <a href=\"http://plnkr.co/edit/J6Y2dc?p=preview\">http://plnkr.co/edit/J6Y2dc?p=preview</a></p>\n    "},{"t":"Adding multiple class using ng-class","l":"http://stackoverflow.com/questions/18871277/adding-multiple-class-using-ng-class","q":"\n\n<p>Can we have multiple expression to add multiple ng-class ?</p>\n\n<p>for eg.</p>\n\n<pre><code>&lt;div ng-class=\"{class1: expressionData1, class2: expressionData2}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>If yes can anyone put up the example to do so.</p>\n\n<p>.</p>\n    ","a":"\n<p>To apply different classes when different expressions evaluate to <code>true</code>:</p>\n\n<pre><code>&lt;div ng-class=\"{'class1' : expression1, 'class2' : expression2}\"&gt;\n    Hello World!\n&lt;/div&gt;\n</code></pre>\n\n<p>To apply multiple classes when an expression holds true:</p>\n\n<pre><code>&lt;!-- notice expression1 used twice --&gt;\n&lt;div ng-class=\"{'class1' : expression1, 'class2' : expression1}\"&gt;\n    Hello World!\n&lt;/div&gt;\n</code></pre>\n\n<p>or quite simply:</p>\n\n<pre><code>&lt;div ng-class=\"{'class1 class2' : expression1}\"&gt;\n    Hello World!\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"How to create separate AngularJS controller files?","l":"http://stackoverflow.com/questions/20087627/how-to-create-separate-angularjs-controller-files","q":"\n\n<p>I have all of my AngularJS controllers in one file, controllers.js.  This file is structured as follows:</p>\n\n<pre><code>angular.module('myApp.controllers', [])\n  .controller('Ctrlr1', ['$scope', '$http', function($scope, $http) {   \n  }])\n  .controller('Ctlr2', ['$scope', '$http', function($scope, $http) }\n  }])\n</code></pre>\n\n<p>What I'd like to do is put Ctrl1 and Ctrl2 into separate files.  I would then include both files in my index.html, but how should that be structured?  I tried doing some thing like this and it throws an error in the web browser console saying it can't find my controllers.  Any hints?</p>\n\n<p>I searched StackOverflow and found this similar question - however, this syntax is using a different framework (CoffeeScript) on top of Angular, and so I haven't been able to follow.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/12655890/angularjs-how-do-i-create-controllers-in-multiple-files\">AngularJS: How do I create controllers in multiple files</a></p>\n    ","a":"\n<p>File one:</p>\n\n<pre><code>angular.module('myApp.controllers', []);\n</code></pre>\n\n<p>File two:</p>\n\n<pre><code>angular.module('myApp.controllers').controller('Ctrlr1', ['$scope', '$http', function($scope, $http){\n\n}]);\n</code></pre>\n\n<p>File three:</p>\n\n<pre><code>angular.module('myApp.controllers').controller('Ctlr2', ['$scope', '$http', function($scope, $http){\n\n}]);\n</code></pre>\n\n<p>Include in that order. I recommend 3 files so the module declaration is on its own.</p>\n\n<hr>\n\n<p>As for folder structure there are many many many opinions on the subject, but these two are pretty good</p>\n\n<p><a href=\"https://github.com/angular/angular-seed\">https://github.com/angular/angular-seed</a></p>\n\n<p><a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\">http://briantford.com/blog/huuuuuge-angular-apps.html</a></p>\n    "},{"t":"Recommended way of getting data from the server","l":"http://stackoverflow.com/questions/11850025/recommended-way-of-getting-data-from-the-server","q":"\n\n<p>What is the recommended way to connect to server data sources in AngularJS without using $resource.</p>\n\n<p>The $resource has many limitations such as: not using proper futures, not being flexible enough.</p>\n    ","a":"\n<p>There are cases when $resource may not be appropriate when talking to backend. This shows how to set up $resource like behavior without using resource.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('myApp').factory('Book', function($http) {\n  // Book is a class which we can use for retrieving and \n  // updating data on the server\n  var Book = function(data) {\n    angular.extend(this, data);\n  }\n\n  // a static method to retrieve Book by ID\n  Book.get = function(id) {\n    return $http.get('/Book/' + id).then(function(response) {\n      return new Book(response.data);\n    });\n  };\n\n  // an instance method to create a new Book\n  Book.prototype.create = function() {\n    var book = this;\n    return $http.post('/Book/', book).then(function(response) {\n      book.id = response.data.id;\n      return book;\n    });\n  }\n\n  return Book;\n});\n</code></pre>\n\n<p>Then inside your controller you can:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var AppController = function(Book) {\n  // to create a Book\n  var book = new Book();\n  book.name = 'AngularJS in nutshell';\n  book.create();\n\n  // to retrieve a book\n  var bookPromise = Book.get(123);\n  bookPromise.then(function(b) {\n    book = b;\n  });\n};\n</code></pre>\n    "},{"t":"what is the difference between ng-if and ng-show/ng-hide","l":"http://stackoverflow.com/questions/19177732/what-is-the-difference-between-ng-if-and-ng-show-ng-hide","q":"\n\n<p>I'm trying to understand the difference between <code>ng-if</code> and <code>ng-show</code>/<code>ng-hide</code>, but they look the same to me.</p>\n\n<p>Is there a difference that I should keep in mind choosing to use one or the other ?</p>\n    ","a":"\n<h2>ngIf</h2>\n\n<p>The <code>ngIf</code> directive <strong>removes or recreates</strong> a portion of the DOM tree based on an expression. If the expression assigned to <code>ngIf</code> evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</p>\n\n<pre><code>&lt;!-- when $scope.myValue is truthy (element is restored) --&gt;\n&lt;div ng-if=\"1\"&gt;&lt;/div&gt;\n\n&lt;!-- when $scope.myValue is falsy (element is removed) --&gt;\n&lt;div ng-if=\"0\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>When an element is removed using <code>ngIf</code> its scope is destroyed and a new scope is created when the element is restored. The scope created within <code>ngIf</code> inherits from its parent scope using prototypal inheritance.</p>\n\n<p>If <code>ngModel</code> is used within <code>ngIf</code> to bind to a JavaScript primitive defined in the parent scope, any modifications made to the variable within the child scope will not affect the value in the parent scope, e.g.</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"data\"&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"data\"&gt;\n&lt;/div&gt;        \n</code></pre>\n\n<p>To get around this situation and update the model in the parent scope from inside the child scope, use an object:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"data.input\"&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"data.input\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Or, <code>$parent</code> variable to reference the parent scope object:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"data\"&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"$parent.data\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<h2>ngShow</h2>\n\n<p>The <code>ngShow</code> directive <strong>shows or hides</strong> the given HTML element based on the expression provided to the <code>ngShow</code> attribute. The element is shown or hidden by removing or adding the <code>ng-hide</code> CSS class onto the element. The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an <code>!important</code> flag).</p>\n\n<pre><code>&lt;!-- when $scope.myValue is truthy (element is visible) --&gt;\n&lt;div ng-show=\"1\"&gt;&lt;/div&gt;\n\n&lt;!-- when $scope.myValue is falsy (element is hidden) --&gt;\n&lt;div ng-show=\"0\" class=\"ng-hide\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>When the <code>ngShow</code> expression evaluates to <code>false</code> then the <code>ng-hide</code> CSS class is added to the <code>class</code> attribute on the element causing it to become hidden. When <code>true</code>, the <code>ng-hide</code> CSS class is removed from the element causing the element not to appear hidden.</p>\n    "},{"t":"Removing the hashtag from AngularJS urls (# symbol)","l":"http://stackoverflow.com/questions/14771091/removing-the-hashtag-from-angularjs-urls-symbol","q":"\n\n<p>Is it possible to remove the # symbol from angular.js urls?</p>\n\n<p>I still want to be able to use the browsers back button etc when i change the view and will update the url with params, but I don't want the # symbol.</p>\n\n<p>The tutorial routprovider is declared as follows</p>\n\n<pre><code>angular.module('phonecat', []).\n  config(['$routeProvider', function($routeProvider) {\n  $routeProvider.\n  when('/phones', {templateUrl: 'partials/phone-list.html',   controller: PhoneListCtrl}).\n  when('/phones/:phoneId', {templateUrl: 'partials/phone-detail.html', controller: PhoneDetailCtrl}).\n  otherwise({redirectTo: '/phones'});\n}]);\n</code></pre>\n\n<p>can I edit this to have the same functionality without the #?</p>\n    ","a":"\n<p>Yes, you should configure <a href=\"https://docs.angularjs.org/api/ng/provider/$locationProvider\"><code>$locationProvider</code></a> and set <a href=\"https://docs.angularjs.org/api/ng/provider/$locationProvider\"><code>html5Mode</code></a> to <code>true</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('phonecat', []).\n  config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {\n\n    $routeProvider.\n      when('/phones', {templateUrl: 'partials/phone-list.html',   controller: PhoneListCtrl}).\n      when('/phones/:phoneId', {templateUrl: 'partials/phone-detail.html', controller: PhoneDetailCtrl}).\n      otherwise({redirectTo: '/phones'});\n\n    $locationProvider.html5Mode(true);\n\n  }]);\n</code></pre>\n    "},{"t":"Way to ng-repeat defined number of times instead of repeating over array?","l":"http://stackoverflow.com/questions/16824853/way-to-ng-repeat-defined-number-of-times-instead-of-repeating-over-array","q":"\n\n<p>Is there a way to ng-repeat a defined number of times instead of always having to iterate over an array?</p>\n\n<p>For example, below I want the list item to show up 5 times assuming <code>$scope.number</code> equal to 5 in addition incrementing the number so each list item increments like 1, 2, 3, 4, 5</p>\n\n<p>Desired result:</p>\n\n<pre><code>&lt;ul&gt;\n   &lt;li&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;2&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;3&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;4&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;&lt;span&gt;5&lt;/span&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    ","a":"\n<p>At the moment, <code>ng-repeat</code> only accepts a collection as a parameter, but you could do this:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"i in getNumber(number)\"&gt;&lt;span&gt;{{$index+1}}&lt;/span&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>And somewhere in your controller:</p>\n\n<pre><code>$scope.number = 5;\n$scope.getNumber = function(num) {\n    return new Array(num);   \n}\n</code></pre>\n\n<p>This would allow you to change <code>$scope.number</code> to any number as you please and still maintain the binding you're looking for.</p>\n\n<p><a href=\"http://jsfiddle.net/sh0ber/cHQLH/\">Here is a fiddle</a> with a couple of lists using the same <code>getNumber</code> function.</p>\n\n<p><strong>EDIT 1/6/2014</strong>:  Newer versions of Angular make use of the following syntax:</p>\n\n<pre><code>&lt;li ng-repeat=\"i in getNumber(number) track by $index\"&gt;\n</code></pre>\n    "},{"t":"A ternary in templates","l":"http://stackoverflow.com/questions/12008580/a-ternary-in-templates","q":"\n\n<p>How do you do a ternary with AngularJS (in the templates)?</p>\n\n<p>It would be nice to use some in html attributes (classes and style) instead of creating and calling a function of the controller.</p>\n    ","a":"\n<p><strong>Update</strong>: Angular 1.1.5 added a <a href=\"https://github.com/angular/angular.js/commit/6798fec4390a72b7943a49505f8a245b6016c84b\">ternary operator</a>, so now we can simply write</p>\n\n<pre><code>&lt;li ng-class=\"$first ? 'firstRow' : 'nonFirstRow'\"&gt;\n</code></pre>\n\n<hr>\n\n<p>If you are using an earlier version of Angular, your two choices are:</p>\n\n<ol>\n<li><code>(condition &amp;&amp; result_if_true || !condition &amp;&amp; result_if_false)</code></li>\n<li><code>{true: 'result_if_true', false: 'result_if_false'}[condition]</code></li>\n</ol>\n\n<p>item 2. above creates an object with two properties.  The array syntax is used to select either the property with name true or the property with name false, and return the associated value.</p>\n\n<p>E.g.,</p>\n\n<pre><code>&lt;li class=\"{{{true: 'myClass1 myClass2', false: ''}[$first]}}\"&gt;...&lt;/li&gt;\n or\n&lt;li ng-class=\"{true: 'myClass1 myClass2', false: ''}[$first]\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>$first is set to true inside an ng-repeat for the first element, so the above would apply class 'myClass1' and 'myClass2' only the first time through the loop.</p>\n\n<p>With <strong>ng-class</strong> there is an easier way though:  ng-class takes an expression that must evaluate to one of the following:</p>\n\n<ol>\n<li>a string of space-delimited class names</li>\n<li>an array of class names</li>\n<li>a map/object of class names to boolean values.  </li>\n</ol>\n\n<p>An example of 1) was given above.  Here is an example of 3, which I think reads much better:</p>\n\n<pre><code> &lt;li ng-class=\"{myClass: $first, anotherClass: $index == 2}\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>The first time through an ng-repeat loop, class myClass is added.  The 3rd time through ($index starts at 0), class anotherClass is added.</p>\n\n<p><strong>ng-style</strong> takes an expression that must evaluate to a map/object of CSS style names to CSS values.  E.g.,</p>\n\n<pre><code> &lt;li ng-style=\"{true: {color: 'red'}, false: {}}[$first]\"&gt;...&lt;/li&gt;\n</code></pre>\n    "},{"t":"With ng-bind-html-unsafe removed, how do I inject HTML?","l":"http://stackoverflow.com/questions/19415394/with-ng-bind-html-unsafe-removed-how-do-i-inject-html","q":"\n\n<p>I'm trying to use <code>$sanitize</code> provider and the <code>ng-bind-htm-unsafe</code> directive to allow my controller to inject HTML into a DIV.</p>\n\n<p>However, I can't get it to work.</p>\n\n<pre><code>&lt;div ng-bind-html-unsafe=\"{{preview_data.preview.embed.html}}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>I discovered that it is because it was removed from AngularJS (thanks).</p>\n\n<p>But without <code>ng-bind-html-unsafe</code>, I get this error:<br></p>\n\n<p><a href=\"http://errors.angularjs.org/undefined/$sce/unsafe\">http://errors.angularjs.org/undefined/$sce/unsafe</a></p>\n    ","a":"\n<p>You indicated that you're using Angular 1.2.0... as one of the other comments indicated, <code>ng-bind-html-unsafe</code> has been deprecated.</p>\n\n<p>Instead, you'll want to do something like this:</p>\n\n<pre><code>&lt;div ng-bind-html=\"preview_data.preview.embed.htmlSafe\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>In your controller, inject the <code>$sce</code> service, and mark the HTML as \"trusted\":</p>\n\n<pre><code>myApp.controller('myCtrl', ['$scope', '$sce', function($scope, $sce) {\n  // ...\n  $scope.preview_data.preview.embed.htmlSafe = \n     $sce.trustAsHtml(preview_data.preview.embed.html);\n}\n</code></pre>\n\n<p>Note that you'll want to be using 1.2.0-rc3 or newer.  (They fixed <a href=\"https://github.com/angular/angular.js/issues/3932\">a bug</a> in rc3 that prevented \"watchers\" from working properly on trusted HTML.)<br></p>\n    "},{"t":"Call Angular JS from legacy code","l":"http://stackoverflow.com/questions/10490570/call-angular-js-from-legacy-code","q":"\n\n<p>I'm using angular to build HTML controls that interact with a legacy Flex application. All callbacks from the Flex app must be attached to the DOM window.</p>\n\n<p>For example (in AS3)</p>\n\n<pre><code>ExternalInterface.call(\"save\", data);\n</code></pre>\n\n<p>Will call</p>\n\n<pre><code>window.save = function(data){\n    // want to update a service \n    // or dispatch an event here...\n}\n</code></pre>\n\n<p>From within the JS resize function I'd like to dispatch an event that a controller can hear. It seems that creating a service is the way to go. Can you update a service from outside of Angular? Can a controller listen for events from a service? In one <a href=\"http://jsfiddle.net/6JvRV/\">experiment (click for fiddle)</a> I did it seems like I can access a service but updating the service's data doesn't get reflected in the view (in the example an <code>&lt;option&gt;</code> should be added to the <code>&lt;select&gt;</code>).</p>\n\n<p>thanks!</p>\n    ","a":"\n<p>Interop from outside of angular to angular is same as debugging angular application or integrating with third party library.</p>\n\n<p>For any DOM element you can do this:</p>\n\n<ul>\n<li><code>angular.element(domElement).scope()</code> to get the current scope for the element</li>\n<li><code>angular.element(domElement).injector()</code> to get the current app injector</li>\n<li><code>angular.element(domElement).controller()</code> to get a hold of the <code>ng-controller</code> instance.</li>\n</ul>\n\n<p>From the injector you can get a hold of any service in angular application. Similarly from the scope you can invoke any methods which have been published to it.</p>\n\n<p>Keep in mind that any changes to the angular model or any method invocations on the scope need to be wrapped in <code>$apply()</code> like this:</p>\n\n<pre><code>$scope.$apply(function(){\n  // perform any model changes or method invocations here on angular app.\n});\n</code></pre>\n    "},{"t":"execute function on page load?","l":"http://stackoverflow.com/questions/15458609/execute-function-on-page-load","q":"\n\n<p>Currently I have an Angular.js page that allows searching and displays results. User clicks on a search result, then clicks back button. I want the search results to be displayed again but I can't work out how to trigger the search to execute.  Here's the detail:</p>\n\n<ul>\n<li>My Angular.js page is a search page, with a search field and a search\nbutton. The user can manually type in a query and press a button and\nand ajax query is fired and the results are displayed.  I update the URL with the search term. That all works fine.</li>\n<li>User clicks on a result of the search and is taken to a different page - that works fine too. </li>\n<li>User clicks back button, and goes back to my angular search page, and the correct URL is displayed, including the search term. All works fine.</li>\n<li>I have bound the search field value to the search term in the URL, so it contains the expected search term. All works fine.</li>\n</ul>\n\n<p>How do I get the search function to execute again without the user having to press the \"search button\"? If it was jquery then I would execute a function in the documentready function. I can't see the Angular.js equivalent.</p>\n    ","a":"\n<p>On the one hand as @Mark-Rajcok said you can just get away with private inner function:</p>\n\n<pre><code>// at the bottom of your controller\nvar init = function () {\n   // check if there is query in url\n   // and fire search in case its value is not empty\n};\n// and fire it after definition\ninit();\n</code></pre>\n\n<p>Also you can take a look at <a href=\"http://docs.angularjs.org/api/ng.directive%3angInit\">ng-init</a> directive. Implementation will be much like:</p>\n\n<pre><code>// register controller in html\n&lt;div data-ng-controller=\"myCtrl\" data-ng-init=\"init()\"&gt;&lt;/div&gt;\n\n// in controller\n$scope.init = function () {\n    // check if there is query in url\n    // and fire search in case its value is not empty\n};\n</code></pre>\n\n<p>But take care about it as <a href=\"http://docs.angularjs.org/api/ng.directive%3angInit\">angular documentation implies (since v1.2)</a> to NOT use <code>ng-init</code> for that. However imo it depends on architecture of your app.</p>\n\n<p>I used <code>ng-init</code> when I wanted to pass a value from back-end into angular app:</p>\n\n<pre><code>&lt;div data-ng-controller=\"myCtrl\" data-ng-init=\"init('%some_backend_value%')\"&gt;&lt;/div&gt;\n</code></pre>\n    "},{"t":"How do I configure different environments in Angular.js?","l":"http://stackoverflow.com/questions/16339595/how-do-i-configure-different-environments-in-angular-js","q":"\n\n<p>How do you manage configuration variables/constants for different environments?</p>\n\n<p>This could be an example:  </p>\n\n<p>My rest API is reachable on <code>localhost:7080/myapi/</code>, but my friend that works on the same code under Git version control has the API deployed on his Tomcat on <code>localhost:8099/hisapi/</code>.</p>\n\n<p>Supposing that we have something like this : </p>\n\n<pre><code>angular\n    .module('app', ['ngResource'])\n\n    .constant('API_END_POINT','&lt;local_end_point&gt;')\n\n    .factory('User', function($resource, API_END_POINT) {\n        return $resource(API_END_POINT + 'user');\n    });\n</code></pre>\n\n<p>How do I dynamically inject the correct value of the API endpoint, depending on the environment?</p>\n\n<p>In PHP I usually do this kind of stuff with a <code>config.username.xml</code> file, merging the basic configuration file (config.xml) with the local environment configuration file recognised by the name of the user. But I don't know how to manage this kind of thing in JavaScript?</p>\n    ","a":"\n<p>I'm a little late to the thread, but if you're using <a href=\"http://gruntjs.com/\">Grunt</a> I've had great success with <a href=\"https://npmjs.org/package/grunt-ng-constant\"><code>grunt-ng-constant</code></a>.</p>\n\n<p>The config section for <code>ngconstant</code> in my <code>Gruntfile.js</code> looks like</p>\n\n<pre><code>ngconstant: {\n  options: {\n    name: 'config',\n    wrap: '\"use strict\";\\n\\n{%= __ngModule %}',\n    space: '  '\n  },\n  development: {\n    options: {\n      dest: '&lt;%= yeoman.app %&gt;/scripts/config.js',\n    },\n    constants: {\n      ENV: 'development'\n    }\n  },\n  production: {\n    options: {\n      dest: '&lt;%= yeoman.dist %&gt;/scripts/config.js',\n    },\n    constants: {\n      ENV: 'production'\n    }\n  }\n}\n</code></pre>\n\n<p>The tasks that use <code>ngconstant</code> look like</p>\n\n<pre><code>grunt.registerTask('server', function (target) {\n  if (target === 'dist') {\n    return grunt.task.run([\n      'build',\n      'open',\n      'connect:dist:keepalive'\n    ]);\n  }\n\n  grunt.task.run([\n    'clean:server',\n    'ngconstant:development',\n    'concurrent:server',\n    'connect:livereload',\n    'open',\n    'watch'\n  ]);\n});\n\ngrunt.registerTask('build', [\n  'clean:dist',\n  'ngconstant:production',\n  'useminPrepare',\n  'concurrent:dist',\n  'concat',\n  'copy',\n  'cdnify',\n  'ngmin',\n  'cssmin',\n  'uglify',\n  'rev',\n  'usemin'\n]);\n</code></pre>\n\n<p>So running <code>grunt server</code> will generate a <code>config.js</code> file in <code>app/scripts/</code> that looks like</p>\n\n<pre><code>\"use strict\";\nangular.module(\"config\", []).constant(\"ENV\", \"development\");\n</code></pre>\n\n<p>Finally, I declare the dependency on whatever modules need it:</p>\n\n<pre><code>// the 'config' dependency is generated via grunt\nvar app = angular.module('myApp', [ 'config' ]);\n</code></pre>\n\n<p>Now my constants can be dependency injected where needed. E.g.,</p>\n\n<pre><code>app.controller('MyController', ['ENV', function( ENV ) {\n  if( ENV === 'production' ) {\n    ...\n  }\n}]);\n</code></pre>\n    "},{"t":"AngularJs: ng-show / ng-hide","l":"http://stackoverflow.com/questions/12599637/angularjs-ng-show-ng-hide","q":"\n\n<p>I am trying to show / hide some HTML using the <code>ng-show</code> and <code>ng-hide</code> functions provided by <a href=\"http://docs.angularjs.org/api\"><strong>AngularJS</strong></a>.</p>\n\n<p>According to the documentation, the respective usage for these functions are as follows:</p>\n\n<blockquote>\n  <p>ngHide – {expression} - If the expression truthy then the element is shown or hidden respectively.\n  ngShow – {expression} - If the expression is truthy then the element is shown or hidden respectively.</p>\n</blockquote>\n\n<p>This works for the following usecase:</p>\n\n<pre><code>&lt;p ng-hide=\"true\"&gt;I'm hidden&lt;/p&gt;\n&lt;p ng-show=\"true\"&gt;I'm shown&lt;/p&gt;\n</code></pre>\n\n<p>However, should we use a parameter from an object as the expression then the <code>ng-hide</code> and <code>ng-show</code> are given the correct <code>true</code>/<code>false</code> value but the values are not treated as a boolean so always return <code>false</code>:</p>\n\n<p><b>Source</b></p>\n\n<pre><code>&lt;p ng-hide=\"{{foo.bar}}\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n&lt;p ng-show=\"{{foo.bar}}\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n</code></pre>\n\n<p><b>Result</b></p>\n\n<pre><code>&lt;p ng-hide=\"true\"&gt;I should be hidden but I'm actually shown&lt;/p&gt;\n&lt;p ng-show=\"true\"&gt;I should be shown but I'm actually hidden&lt;/p&gt;\n</code></pre>\n\n<p>This is either a bug or I am not doing this correctly.</p>\n\n<p>I cannot find any relative information on referencing object parameters as expressions so I was hoping anyone with a better understanding of AngularJs might be able to help me out?</p>\n    ","a":"\n<p>The <code>foo.bar</code> reference should not contain the braces:</p>\n\n<pre><code>&lt;p ng-hide=\"foo.bar\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n&lt;p ng-show=\"foo.bar\"&gt;I could be shown, or I could be hidden&lt;/p&gt;\n</code></pre>\n\n<p>Angular <a href=\"http://docs.angularjs.org/guide/expression\">expressions</a> need to be within the curly-brace bindings, where as Angular <a href=\"http://docs.angularjs.org/guide/directive\">directives</a> do not.</p>\n\n<p>See also <a href=\"http://docs.angularjs.org/guide/templates\">Understanding Angular Templates</a>.</p>\n    "},{"t":"Processing $http response in service","l":"http://stackoverflow.com/questions/12505760/processing-http-response-in-service","q":"\n\n<p>I recently posted a detailed description of the issue I am facing <a href=\"http://stackoverflow.com/questions/12504747/angularjs-processing-asynchronous-data-in-service\">here</a> at SO. As I couldn't send an actual <code>$http</code> request, I used timeout to simulate asynchronous behavior. Data binding from my model to view is working correct, with the help of @Gloopy</p>\n\n<p>Now, when I use <code>$http</code> instead of <code>$timeout</code> (tested locally), I could see the asynchronous request was successful and <code>data</code> is filled with json response in my service. But, my view is not updating.</p>\n\n<p>updated Plunkr <a href=\"http://plnkr.co/edit/RbzODj?p=preview\">here</a></p>\n    ","a":"\n<p>Here is a Plunk that does what you want: <a href=\"http://plnkr.co/edit/TTlbSv?p=preview\">http://plnkr.co/edit/TTlbSv?p=preview</a></p>\n\n<p>The idea is that you work with promises directly and their \"then\" functions to manipulate and access the asynchronously returned responses.</p>\n\n<pre><code>app.factory('myService', function($http) {\n  var myService = {\n    async: function() {\n      // $http returns a promise, which has a then function, which also returns a promise\n      var promise = $http.get('test.json').then(function (response) {\n        // The then function here is an opportunity to modify the response\n        console.log(response);\n        // The return value gets picked up by the then in the controller.\n        return response.data;\n      });\n      // Return the promise to the controller\n      return promise;\n    }\n  };\n  return myService;\n});\n\napp.controller('MainCtrl', function( myService,$scope) {\n  // Call the async method and then do stuff with what is returned inside our own then function\n  myService.async().then(function(d) {\n    $scope.data = d;\n  });\n});\n</code></pre>\n\n<p>Here is a slightly more complicated version that caches the request so you only make it first time (<a href=\"http://plnkr.co/edit/2yH1F4IMZlMS8QsV9rHv?p=preview\">http://plnkr.co/edit/2yH1F4IMZlMS8QsV9rHv?p=preview</a>):</p>\n\n<pre><code>app.factory('myService', function($http) {\n  var promise;\n  var myService = {\n    async: function() {\n      if ( !promise ) {\n        // $http returns a promise, which has a then function, which also returns a promise\n        promise = $http.get('test.json').then(function (response) {\n          // The then function here is an opportunity to modify the response\n          console.log(response);\n          // The return value gets picked up by the then in the controller.\n          return response.data;\n        });\n      }\n      // Return the promise to the controller\n      return promise;\n    }\n  };\n  return myService;\n});\n\napp.controller('MainCtrl', function( myService,$scope) {\n  $scope.clearData = function() {\n    $scope.data = {};\n  };\n  $scope.getData = function() {\n    // Call the async method and then do stuff with what is returned inside our own then function\n    myService.async().then(function(d) {\n      $scope.data = d;\n    });\n  };\n});\n</code></pre>\n    "},{"t":"AngularJS ngClass conditional","l":"http://stackoverflow.com/questions/16529825/angularjs-ngclass-conditional","q":"\n\n<p>Is there any way to make an expression for something like ngClass to be a conditional. For example, I have tried the following:</p>\n\n<pre><code>&lt;span ng-class=\"{test: 'obj.value1 == \\'someothervalue\\''}\"&gt;test&lt;/span&gt;\n</code></pre>\n\n<p>The issue with this code is that no matter what obj.value1 is, the class test is always applied to the element. Doing this:</p>\n\n<pre><code>&lt;span ng-class=\"{test: obj.value2}\"&gt;test&lt;/span&gt;\n</code></pre>\n\n<p>As long as obj.value2 does not equal a truthy value, the class in not applied.  Now I can work around the issue in the first example by doing this:</p>\n\n<pre><code>&lt;span ng-class=\"{test: checkValue1()}\"&gt;test&lt;/span&gt;\n</code></pre>\n\n<p>where the checkValue1 function looks like this:</p>\n\n<pre><code>$scope.checkValue1 = function() {\n  return $scope.obj.value === 'somevalue';\n}\n</code></pre>\n\n<p>I am just wondering if this is how ngClass is supposed to work.  I am also building a custom directive where I would like to do something similar to this. However I can't find a way to watch an expression (and maybe that is impossible and the reason why it works like this).</p>\n\n<p>Here is a plnkr to show what I mean:</p>\n\n<p><a href=\"http://plnkr.co/edit/iSh0t8swDEyGbh7ylZg2?p=preview\">http://plnkr.co/edit/iSh0t8swDEyGbh7ylZg2?p=preview</a></p>\n    ","a":"\n<p>Your first attempt was almost right, It should work without the quotes.</p>\n\n<pre><code>{test: obj.value1 == 'someothervalue'}\n</code></pre>\n\n<p>Here is a <a href=\"http://plnkr.co/edit/j4r8MDt3Q77NFJlhv7oQ?p=preview\" rel=\"nofollow\">plnkr</a>.</p>\n\n<p>The ngClass directive will work with any expression that evaluates truthy or falsey, a bit similar to Javascript expressions but with some differences, you can read about <a href=\"http://docs.angularjs.org/guide/expression\" rel=\"nofollow\">here</a>.\nIf your conditional is too complex, then you can use a function that returns truthy or falsey, as you did in your third attempt.</p>\n\n<p>Just to complement: You can also use logical operators to form logical expressions like </p>\n\n<pre><code>ng-class=\"{'test': obj.value1 == 'someothervalue' || obj.value2 == 'somethingelse'}\"\n</code></pre>\n    "},{"t":"Angular JS: How/when to use ng-click to call a route?","l":"http://stackoverflow.com/questions/14201753/angular-js-how-when-to-use-ng-click-to-call-a-route","q":"\n\n<p>Suppose you are using routes:</p>\n\n<pre><code>// bootstrap\nmyApp.config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n\n    $routeProvider.when('/home', {\n        templateUrl: 'partials/home.html',\n        controller: 'HomeCtrl'\n    });\n    $routeProvider.when('/about', {\n        templateUrl: 'partials/about.html',\n        controller: 'AboutCtrl'\n    });\n...\n</code></pre>\n\n<p>And in your html, you want to navigate to the about page when a button is clicked.  One way would be </p>\n\n<pre><code>&lt;a href=\"#/about\"&gt;\n</code></pre>\n\n<p>... but it seems ng-click would be useful here too.</p>\n\n<ol>\n<li>Is that assumption correct?  That ng-click be used instead of anchor?</li>\n<li>If so, how would that work?  IE: \n</li>\n</ol>\n    ","a":"\n<p>Routes monitor the <code>$location</code> service and respond to changes in URL (typically through the hash). To \"activate\" a route, you simply change the URL. The easiest way to do that is with anchor tags.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"#/home\"&gt;Go Home&lt;/a&gt;\n&lt;a href=\"#/about\"&gt;Go to About&lt;/a&gt;\n</code></pre>\n\n<p>Nothing more complicated is needed. If, however, you must do this from code, the proper way is by using the <code>$location</code> service:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.go = function ( path ) {\n  $location.path( path );\n};\n</code></pre>\n\n<p>Which, for example, a button could trigger:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;button ng-click=\"go('/home')\"&gt;&lt;/button&gt;\n</code></pre>\n    "},{"t":"How to access parent scope from within a custom directive *with own scope* in AngularJS?","l":"http://stackoverflow.com/questions/17900201/how-to-access-parent-scope-from-within-a-custom-directive-with-own-scope-in-an","q":"\n\n<p>I'm looking for any manner of accessing the \"parent\" scope within a directive.  Any combination of scope, transclude, require, passing in variables (or the scope itself) from above, etc.  I'm totally willing to bend over backwards, but I want to avoid something totally hacky or unmaintainable.  For example, I know I could do it right now by taking the <code>$scope</code> from the preLink parameters and iterating over it's <code>$sibling</code> scopes to find the conceptual \"parent\".</p>\n\n<p>What I really want is to be able to <code>$watch</code> an expression in the parent scope.  If I can do that, then I can accomplish what I'm trying to do over here: \n<a href=\"http://stackoverflow.com/questions/17863732/angularjs-how-to-render-a-partial-with-variables\">AngularJS - How to render a partial with variables?</a></p>\n\n<p><strong>An important note</strong> is that the directive must be re-usable within the same parent scope.  Therefore the default behavior (scope: false) doesn't work for me.  I need an individual scope per instance of the directive, and then I need to <code>$watch</code> a variable that lives in the parent scope.</p>\n\n<p>A code sample is worth 1000 words, so:</p>\n\n<pre><code>app.directive('watchingMyParentScope', function() {\n    return {\n        require: /* ? */,\n        scope: /* ? */,\n        transclude: /* ? */,\n        controller: /* ? */,\n        compile: function(el,attr,trans) {\n            // Can I get the $parent from the transclusion function somehow?\n            return {\n                pre: function($s, $e, $a, parentControl) {\n                    // Can I get the $parent from the parent controller?\n                    // By setting this.$scope = $scope from within that controller?\n\n                    // Can I get the $parent from the current $scope?\n\n                    // Can I pass the $parent scope in as an attribute and define\n                    // it as part of this directive's scope definition?\n\n                    // What don't I understand about how directives work and\n                    // how their scope is related to their parent?\n                },\n                post: function($s, $e, $a, parentControl) {\n                    // Has my situation improved by the time the postLink is called?\n                }\n            }\n        }\n    };\n});\n</code></pre>\n    ","a":"\n<p>See <a href=\"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs\">What are the nuances of scope prototypal / prototypical inheritance in AngularJS?</a></p>\n\n<p>To summarize: the way a directive accesses its parent (<code>$parent</code>) scope depends on the type of scope the directive creates:</p>\n\n<ol>\n<li><p>default (<code>scope: false</code>) - the directive does not create a new scope, so there is no inheritance here.  The directive's scope is the same scope as the parent/container.  In the link function, use the first parameter (typically <code>scope</code>).</p></li>\n<li><p><code>scope: true</code> - the directive creates a new child scope that prototypically inherits from the parent scope.  Properties that are defined on the parent scope are available to the directive <code>scope</code> (because of prototypal inheritance).  Just beware of writing to a primitive scope property -- that will create a new property on the directive scope (that hides/shadows the parent scope property of the same name).</p></li>\n<li><p><code>scope: { ... }</code> - the directive creates a new isolate/isolated scope.  It does not prototypically inherit the parent scope.  You can still access the parent scope using <code>$parent</code>, but this is not normally recommended.  Instead, you should specify which parent scope properties (and/or function) the directive needs via additional attributes on the same element where the directive is used, using the <code>=</code>, <code>@</code>, and <code>&amp;</code> notation.</p></li>\n<li><p><code>transclude: true</code> - the directive creates a new \"transcluded\" child scope, which prototypically inherits from the parent scope.  If the directive also creates an isolate scope, the transcluded and the isolate scopes are siblings.  The <code>$parent</code> property of each scope references the same parent scope.<br><strong>Angular v1.3 update</strong>: If the directive also creates an isolate scope, the transcluded scope is now a child of the isolate scope.  The transcluded and isolate scopes are no longer siblings.  The <code>$parent</code> property of the transcluded scope now references the isolate scope.</p></li>\n</ol>\n\n<p>The above link has examples and pictures of all 4 types.</p>\n\n<p>You cannot access the scope in the directive's compile function (as mentioned here: <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Directives\">https://github.com/angular/angular.js/wiki/Understanding-Directives</a>).  You can access the directive's scope in the link function.</p>\n\n<p><strong>Watching:</strong></p>\n\n<p>For 1. and 2. above: normally you specify which parent property the directive needs via an attribute, then $watch it:</p>\n\n<p></p>\n\n<pre><code>&lt;div my-dir attr1=\"prop1\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>scope.$watch(attrs.attr1, function() { ... });\n</code></pre>\n\n<p>If you are watching an object property, you'll need to use $parse:</p>\n\n<pre><code>&lt;div my-dir attr2=\"obj.prop2\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>var model = $parse(attrs.attr2);\nscope.$watch(model, function() { ... });\n</code></pre>\n\n<p>For 3. above (isolate scope), watch the name you give the directive property using the <code>@</code> or <code>=</code> notation:</p>\n\n<pre><code>&lt;div my-dir attr3=\"{{prop3}}\" attr4=\"obj.prop4\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<pre><code>scope: {\n  localName3: '@attr3',\n  attr4:      '='  // here, using the same name as the attribute\n},\nlink: function(scope, element, attrs) {\n   scope.$watch('localName3', function() { ... });\n   scope.$watch('attr4',      function() { ... });\n</code></pre>\n    "},{"t":"AngularJS performs an OPTIONS HTTP request for a cross-origin resource","l":"http://stackoverflow.com/questions/12111936/angularjs-performs-an-options-http-request-for-a-cross-origin-resource","q":"\n\n<p>I'm trying to setup AngularJS to communicate with a cross-origin resource where the asset host which delivers my template files is on a different domain and therefore the XHR request that angular performs must be cross-domain. I've added the appropriate CORS header to my server for the HTTP request to make this work, but it doesn't seem to work. The problem is that when I inspect the HTTP requests in my browser (chrome) the request sent to the asset file is an OPTIONS request (it should be a GET request).</p>\n\n<p>I'm not sure whether this is a bug in AngularJS or if I need to configure something. From what I understand the XHR wrapper can't make an OPTIONS HTTP request so it looks like the browser is trying to figure out if is \"allowed\" to download the asset first before it performs the GET request. If this is the case, then do I need to set the CORS header (Access-Control-Allow-Origin: <a href=\"http://asset.host\">http://asset.host</a>...) with the asset host as well?</p>\n    ","a":"\n<p>OPTION request are by no means AngularJS bug, this is how Cross-Origin Resource Sharing standard mandates browsers to behave. Please refer to this document: <a href=\"https://developer.mozilla.org/en-US/docs/HTTP_access_control\">https://developer.mozilla.org/en-US/docs/HTTP_access_control</a>, where in the \"Overview\" section it says:</p>\n\n<blockquote>\n  <p>The Cross-Origin Resource Sharing standard works by adding new HTTP\n  headers that allow servers to describe the set of origins that are\n  permitted to read that information using a web browser.  Additionally,\n  for HTTP request methods that can cause side-effects on user data (in\n  particular, for HTTP methods other than GET, or for POST usage with\n  certain MIME types), the specification mandates that browsers\n  \"preflight\" the request, soliciting supported methods from the server\n  with an HTTP OPTIONS request header, and then, upon \"approval\" from\n  the server, sending the actual request with the actual HTTP request\n  method.  Servers can also notify clients whether \"credentials\"\n  (including Cookies and HTTP Authentication data) should be sent with\n  requests.</p>\n</blockquote>\n\n<p>It is very hard to provide a generic solution that would work for all the WWW servers as setup will vary depending on the server itself and HTTP verbs that you intend to support. I would encourage you to get over this excellent article (<a href=\"http://www.html5rocks.com/en/tutorials/cors/\">http://www.html5rocks.com/en/tutorials/cors/</a>) that has much more details on the exact headers that needs to be sent by a server.</p>\n    "},{"t":"angularjs Access parent scope from child controller","l":"http://stackoverflow.com/questions/21453697/angularjs-access-parent-scope-from-child-controller","q":"\n\n<p>I've set up my controllers using <code>data-ng-controller=\"xyzController as vm\"</code></p>\n\n<p>I have a scenario with parent / child nested controllers. I have no problem accessing parent properties in the nested html by using <code>$parent.vm.property</code>, but I cannot figure out how to access the parent property from within my child controller.</p>\n\n<p>I've tried injecting $scope and then using <code>$scope.$parent.vm.property</code>, but this isn't working?</p>\n\n<p>Can anyone offer advice?</p>\n    ","a":"\n<p>If your HTML is like below you could do something like this:</p>\n\n<pre><code>&lt;div ng-controller=\"ParentCtrl\"&gt;\n    &lt;div ng-controller=\"ChildCtrl\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then you can access the parent scope as follows</p>\n\n<pre><code>function ParentCtrl($scope) {\n    $scope.cities = [\"NY\", \"Amsterdam\", \"Barcelona\"];\n}\n\nfunction ChildCtrl($scope) {\n    $scope.parentcities = $scope.$parent.cities;\n}\n</code></pre>\n\n<p>If you want to access a parent controller from your view you have to do something like this:</p>\n\n<pre><code>&lt;div ng-controller=\"xyzController as vm\"&gt;\n   {{$parent.property}}\n&lt;/div&gt;\n</code></pre>\n\n<p>See jsFiddle: <a href=\"http://jsfiddle.net/2r728/\">http://jsfiddle.net/2r728/</a></p>\n\n<p><strong>Update</strong></p>\n\n<p>Actually since you defined <code>cities</code> in the parent controller your child controller will inherit all scope variables. So theoritically you don't have to call <code>$parent</code>. The above example can also be written as follows:</p>\n\n<pre><code>function ParentCtrl($scope) {\n    $scope.cities = [\"NY\",\"Amsterdam\",\"Barcelona\"];\n}\n\nfunction ChildCtrl($scope) {\n    $scope.parentCities = $scope.cities;\n}\n</code></pre>\n\n<p>The AngularJS docs use this approach, <a href=\"http://docs.angularjs.org/guide/scope\">here</a> you can read more about the <code>$scope</code>.</p>\n\n<p><strong>Another update</strong></p>\n\n<p>I think this is a better answer to the original poster. </p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div ng-app ng-controller=\"ParentCtrl as pc\"&gt;\n    &lt;div ng-controller=\"ChildCtrl as cc\"&gt;\n        &lt;pre&gt;{{cc.parentCities | json}}&lt;/pre&gt;\n        &lt;pre&gt;{{pc.cities | json}}&lt;/pre&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>JS</strong></p>\n\n<pre><code>function ParentCtrl() {\n    var vm = this;\n    vm.cities = [\"NY\", \"Amsterdam\", \"Barcelona\"];\n}\n\nfunction ChildCtrl() {\n    var vm = this;\n    ParentCtrl.apply(vm, arguments); // Inherit parent control\n\n    vm.parentCities = vm.cities;\n}\n</code></pre>\n\n<p>If you use the <code>controller as</code> method you can also access the parent scope as follows</p>\n\n<pre><code>function ChildCtrl($scope) {\n    var vm = this;\n    vm.parentCities = $scope.pc.cities; // note pc is a reference to the \"ParentCtrl as pc\"\n}\n</code></pre>\n\n<p>As you can see there are many different ways in accessing <code>$scopes</code>.</p>\n\n<p><a href=\"http://jsfiddle.net/2r728/10/\"></a></p><h3><a href=\"http://jsfiddle.net/2r728/10/\">Updated fiddle</a></h3>\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function ParentCtrl() {\n    var vm = this;\n    vm.cities = [\"NY\", \"Amsterdam\", \"Barcelona\"];\n}\n    \nfunction ChildCtrl($scope) {\n    var vm = this;\n    ParentCtrl.apply(vm, arguments);\n    \n    vm.parentCitiesByScope = $scope.pc.cities;\n    vm.parentCities = vm.cities;\n}\n    </code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.20/angular.min.js\"&gt;&lt;/script&gt;\n&lt;div ng-app ng-controller=\"ParentCtrl as pc\"&gt;\n  &lt;div ng-controller=\"ChildCtrl as cc\"&gt;\n    &lt;pre&gt;{{cc.parentCities | json}}&lt;/pre&gt;\n    &lt;pre&gt;{{cc.parentCitiesByScope | json }}&lt;/pre&gt;\n    &lt;pre&gt;{{pc.cities | json}}&lt;/pre&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n</div>\n</div>\n<p></p>\n    "},{"t":"AngularJS $http and $resource","l":"http://stackoverflow.com/questions/13181406/angularjs-http-and-resource","q":"\n\n<p>I am newly exposed to AngularJS, so please forgive my ignorance.</p>\n\n<p>I have some web services that I want to call. <code>$resource</code> or <code>$http</code>, which one should I use?</p>\n\n<p><code>$resource</code>: <a href=\"https://docs.angularjs.org/api/ngResource/service/%24resource\">https://docs.angularjs.org/api/ngResource/service/$resource</a></p>\n\n<p><code>$http</code>: <a href=\"https://docs.angularjs.org/api/ng/service/%24http\">https://docs.angularjs.org/api/ng/service/$http</a></p>\n\n<p>After I read the two above API pages I am lost.</p>\n\n<p>Could you please explain to me in plain English what is the difference and in what situation should I use them? How do I structure these calls and read the results into js objects correctly? </p>\n    ","a":"\n<p><code>$http</code> is for general purpose AJAX. In most cases this is what you'll be using. With <code>$http</code> you're going to be making <code>GET</code>, <code>POST</code>, <code>DELETE</code> type calls manually and processing the objects they return on your own.</p>\n\n<p><code>$resource</code> wraps <code>$http</code> for use in RESTful web API scenarios. </p>\n\n<hr>\n\n<p>Speaking VERY generally: A RESTful web service will be a service with one endpoint for a data type that does different things with that data type based on HTTP methods like <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc. So with a <code>$resource</code>, you can call a <code>GET</code> to get the resource as a JavaScript object, then alter it and send it back with a <code>POST</code>, or even delete it with <code>DELETE</code>.</p>\n\n<p>... if that makes sense.</p>\n    "},{"t":"Tracking Google Analytics Page Views with Angular.js","l":"http://stackoverflow.com/questions/10713708/tracking-google-analytics-page-views-with-angular-js","q":"\n\n<p>I'm setting up a new app using Angular.JS as the frontend. Everything on the client side is done with HTML5 pushstate and I'd like to be able to track my page views in Google Analytics.</p>\n    ","a":"\n<p>If you're using <code>ng-view</code> in your Angular app you can listen for the <code>$viewContentLoaded</code> event and push a tracking event to Google Analytics.</p>\n\n<p>Assuming you've setup your tracking code in your main index.html file with a name of <code>var _gaq</code> and MyCtrl is what you've defined in the <code>ng-controller</code> directive.</p>\n\n<pre><code>function MyCtrl($scope, $location, $window) {\n  $scope.$on('$viewContentLoaded', function(event) {\n    $window._gaq.push(['_trackPageview', $location.url()]);\n  });\n}\n</code></pre>\n\n<p><strong>UPDATE:</strong> \nfor new version of google-analytics use this one</p>\n\n<pre><code>$window.ga('send', 'pageview', { page: $location.url() });\n</code></pre>\n    "},{"t":"What is the difference between compile and link function in angularjs","l":"http://stackoverflow.com/questions/12164138/what-is-the-difference-between-compile-and-link-function-in-angularjs","q":"\n\n<p>Can someone explain in simple terms?</p>\n\n<p>The docs seems a bit obtuse. I am not getting the essence and the big picture of when to use one over the other. An example contrasting the two would be awesome.</p>\n    ","a":"\n<ul>\n<li><p>compile function - use for <strong>template</strong> DOM manipulation (i.e., manipulation of tElement = template element), hence manipulations that apply to all DOM clones of the template associated with the directive.</p></li>\n<li><p>link function - use for registering DOM listeners (i.e., $watch expressions on the instance scope) as well as <strong>instance</strong> DOM manipulation (i.e., manipulation of iElement = individual instance element).<br> It is executed after the template has been cloned.  E.g., inside an &lt;li ng-repeat...&gt;, the link function is executed after the &lt;li&gt; template (tElement) has been cloned (into an iElement) for that particular &lt;li&gt; element.<br> A $watch() allows a directive to be notified of instance scope property changes (an instance scope is associated with each instance), which allows the directive to render an updated instance value to the DOM -- by copying content from the instance scope into the DOM.</p></li>\n</ul>\n\n<p>Note that DOM transformations can be done in the compile function and/or the link function.</p>\n\n<p>Most directives only need a link function, since most directives only deal with a specific DOM element instance (and its instance scope).</p>\n\n<p>One way to help determine which to use: consider that the compile function does not receive a  <code>scope</code> argument.  (I'm purposely ignoring the transclude linking function argument, which receives a transcluded scope -- this is <a href=\"http://stackoverflow.com/questions/13183005/what-exactly-do-you-do-with-the-transclude-function-and-the-clone-linking-functi\">rarely</a> used.) So the compile function can't do anything you would want to do that requires an (instance) scope -- you can't $watch any model/instance scope properties, you can't manipulate the DOM using instance scope information, you can't call functions defined on the instance scope, etc.</p>\n\n<p>However, the compile function (like the link function) does have access to the attributes. So if your DOM manipulations don't require the instance scope, you can use a compile function.  Here's <a href=\"http://stackoverflow.com/questions/13852248/how-to-write-a-double-and-a-ntimes-directive-for-angularjs/13873098#13873098\">an example</a> of a directive that only uses a compile function, for those reasons.  It examines the attributes, but it doesn't need an instance scope to do its job.</p>\n\n<p>Here's <a href=\"http://stackoverflow.com/a/14107024/215945\">an example</a> of a directive that also only uses a compile function.  The directive only needs to transform the template DOM, so a compile function can be used.</p>\n\n<p>Another way to help determine which to use: if you don't use the \"element\" parameter in the link function, then you probably don't need a link function.</p>\n\n<p>Since most directives have a link function, I'm not going to provide any examples -- they should be very easy to find.</p>\n\n<p>Note that if you need a compile function and a link function (or pre and post link functions),  the compile function must return the link function(s) because the 'link' attribute is ignored if the 'compile' attribute is defined.</p>\n\n<p>See also </p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/12546945/difference-between-the-controller-and-link-functions-when-defining-an-angula\">Difference between the 'controller', 'link' and 'compile' functions when defining a directive</a></li>\n<li>Dave Smith's excellent <a href=\"http://youtu.be/UMkd0nYmLzY?t=21m59s\">ng-conf 2104 talk on directives</a> (the link goes to the section of the video that talks about compile and link)</li>\n</ul>\n    "},{"t":"How to do paging in AngularJS?","l":"http://stackoverflow.com/questions/10816073/how-to-do-paging-in-angularjs","q":"\n\n<p>I have a dataset of about 1000 items in-memory and am attempting to create a pager for\nthis dataset, but I'm unsure how to do this.</p>\n\n<p>I'm using a custom filter function to filter the results, and that works fine, but somehow I need to get the number of pages out.</p>\n\n<p>Any clues?</p>\n    ","a":"\n<h1>Angular UI Bootstrap - Pagination Directive</h1>\n\n<p>Check out <a href=\"http://angular-ui.github.io/bootstrap/\">UI Bootstrap</a>'s <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/pagination\">pagination directive</a>. I ended up using it rather than what is posted here as it has enough features for my current use and has a <a href=\"https://github.com/angular-ui/bootstrap/blob/master/src/pagination/test/pagination.spec.js\">thorough test spec</a> to accompany it.</p>\n\n<h2>View</h2>\n\n<pre><code>&lt;!-- table here --&gt;\n\n&lt;pagination \n  ng-model=\"currentPage\"\n  total-items=\"todos.length\"\n  max-size=\"maxSize\"  \n  boundary-links=\"true\"&gt;\n&lt;/pagination&gt;\n\n&lt;!-- items/page select here if you like --&gt;\n</code></pre>\n\n<h2>Controller</h2>\n\n<pre><code>todos.controller(\"TodoController\", function($scope) {\n   $scope.filteredTodos = []\n  ,$scope.currentPage = 1\n  ,$scope.numPerPage = 10\n  ,$scope.maxSize = 5;\n\n  $scope.makeTodos = function() {\n    $scope.todos = [];\n    for (i=1;i&lt;=1000;i++) {\n      $scope.todos.push({ text:\"todo \"+i, done:false});\n    }\n  };\n  $scope.makeTodos(); \n\n  $scope.$watch(\"currentPage + numPerPage\", function() {\n    var begin = (($scope.currentPage - 1) * $scope.numPerPage)\n    , end = begin + $scope.numPerPage;\n\n    $scope.filteredTodos = $scope.todos.slice(begin, end);\n  });\n});\n</code></pre>\n\n<p>I have made a <a href=\"http://plnkr.co/edit/81fPZxpnOQnIHQgp957q?p=preview\">working plunker</a> for reference.</p>\n\n<hr>\n\n<h1>Legacy Version:</h1>\n\n<h2>View</h2>\n\n<pre><code>&lt;!-- table here --&gt;\n\n&lt;div data-pagination=\"\" data-num-pages=\"numPages()\" \n  data-current-page=\"currentPage\" data-max-size=\"maxSize\"  \n  data-boundary-links=\"true\"&gt;&lt;/div&gt;\n\n&lt;!-- items/page select here if you like --&gt;\n</code></pre>\n\n<h2>Controller</h2>\n\n<pre><code>todos.controller(\"TodoController\", function($scope) {\n   $scope.filteredTodos = []\n  ,$scope.currentPage = 1\n  ,$scope.numPerPage = 10\n  ,$scope.maxSize = 5;\n\n  $scope.makeTodos = function() {\n    $scope.todos = [];\n    for (i=1;i&lt;=1000;i++) {\n      $scope.todos.push({ text:\"todo \"+i, done:false});\n    }\n  };\n  $scope.makeTodos(); \n\n  $scope.numPages = function () {\n    return Math.ceil($scope.todos.length / $scope.numPerPage);\n  };\n\n  $scope.$watch(\"currentPage + numPerPage\", function() {\n    var begin = (($scope.currentPage - 1) * $scope.numPerPage)\n    , end = begin + $scope.numPerPage;\n\n    $scope.filteredTodos = $scope.todos.slice(begin, end);\n  });\n});\n</code></pre>\n\n<p>I have made a <a href=\"http://plnkr.co/edit/6PFCPuFrN6lfGHjHVwGf?p=preview\">working plunker</a> for reference.</p>\n    "},{"t":"AngularJs ReferenceError: $http is not defined","l":"http://stackoverflow.com/questions/13759120/angularjs-referenceerror-http-is-not-defined","q":"\n\n<p>I have the following angular function</p>\n\n<pre><code>$scope.updateStatus = function(user){    \n $http({\n  url: user.update_path, \n  method: \"POST\",\n  data: {user_id: user.id, draft: true}\n });\n};\n</code></pre>\n\n<p>But whenever this function is called, I am getting the <strong>ReferenceError: $http is not defined</strong> in my console. Can anyone help me understand what i am doing wrong here.</p>\n    ","a":"\n<p>Probably you haven't injected <code>$http</code> service to your controller. There are several ways of doing that.</p>\n\n<p>Please read <a href=\"http://docs.angularjs.org/guide/di\">this reference about DI</a>. Then it gets very simple:</p>\n\n<pre><code>function MyController($scope, $http) {\n   // ... your code\n}\n</code></pre>\n    "},{"t":"AngularJs $http.post() does not send data","l":"http://stackoverflow.com/questions/19254029/angularjs-http-post-does-not-send-data","q":"\n\n<p>I'm pulling my hair out - could anyone tell me why the following statement does not send the post data to the designated url? The url is called but on the server when I print $_POST - I get an empty array. If I print message in the console before adding it to the data - it shows the correct content.</p>\n\n<pre><code>$http.post('request-url',  { 'message' : message });\n</code></pre>\n\n<p>I've also tried it with the data as string (with the same outcome):</p>\n\n<pre><code>$http.post('request-url',  \"message=\" + message);\n</code></pre>\n\n<p>It seem to be working when I use it in the following format:</p>\n\n<pre><code>$http({\n    method: 'POST',\n    url: 'request-url',\n    data: \"message=\" + message,\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n});\n</code></pre>\n\n<p>but is there a way of doing it with the $http.post() - and do I always have to include the header in order for it to work? I believe that the above content type is specifying format of the sent data, but can I send it as javascript object?</p>\n    ","a":"\n<p>I had the same problem using asp.net MVC and <a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\" rel=\"nofollow\">found the solution here</a></p>\n\n<blockquote>\n  <p>There is much confusion among newcomers to <strong>AngularJS</strong> as to why the\n  <code>$http</code> service shorthand functions (<code>$http.post()</code>, etc.) don’t appear to\n  be swappable with the <strong>jQuery</strong> equivalents (<code>jQuery.post()</code>, etc.)</p>\n  \n  <p>The difference is in how <strong>jQuery</strong> and <strong>AngularJS</strong> serialize and transmit the data. Fundamentally, the problem lies with your server language of choice being unable to understand AngularJS’s transmission natively ... By default, <strong>jQuery</strong> transmits data using </p>\n\n<pre><code>Content-Type: x-www-form-urlencoded\n</code></pre>\n  \n  <p>and the familiar <code>foo=bar&amp;baz=moe</code> serialization.</p>\n  \n  <p><strong>AngularJS</strong>, however, transmits data using </p>\n\n<pre><code>Content-Type: application/json \n</code></pre>\n  \n  <p>and <code>{ \"foo\": \"bar\", \"baz\": \"moe\" }</code></p>\n  \n  <p>JSON serialization, which unfortunately some Web server languages—<em>notably\n   PHP</em>—do not unserialize natively.</p>\n</blockquote>\n\n<p>Works like a charm.</p>\n\n<p><b>CODE</b></p>\n\n<pre><code>// Your app's root module...\nangular.module('MyModule', [], function($httpProvider) {\n  // Use x-www-form-urlencoded Content-Type\n  $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n\n  /**\n   * The workhorse; converts an object to x-www-form-urlencoded serialization.\n   * @param {Object} obj\n   * @return {String}\n   */ \n  var param = function(obj) {\n    var query = '', name, value, fullSubName, subName, subValue, innerObj, i;\n\n    for(name in obj) {\n      value = obj[name];\n\n      if(value instanceof Array) {\n        for(i=0; i&lt;value.length; ++i) {\n          subValue = value[i];\n          fullSubName = name + '[' + i + ']';\n          innerObj = {};\n          innerObj[fullSubName] = subValue;\n          query += param(innerObj) + '&amp;';\n        }\n      }\n      else if(value instanceof Object) {\n        for(subName in value) {\n          subValue = value[subName];\n          fullSubName = name + '[' + subName + ']';\n          innerObj = {};\n          innerObj[fullSubName] = subValue;\n          query += param(innerObj) + '&amp;';\n        }\n      }\n      else if(value !== undefined &amp;&amp; value !== null)\n        query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&amp;';\n    }\n\n    return query.length ? query.substr(0, query.length - 1) : query;\n  };\n\n  // Override $http service's default transformRequest\n  $httpProvider.defaults.transformRequest = [function(data) {\n    return angular.isObject(data) &amp;&amp; String(data) !== '[object File]' ? param(data) : data;\n  }];\n});\n</code></pre>\n    "},{"t":"$watch an object in angular","l":"http://stackoverflow.com/questions/19455501/watch-an-object-in-angular","q":"\n\n<p>I'm pretty sure i'm missing something very simple here.</p>\n\n<p>I want to watch for changes in a dictionary, but for some reason watch callback is not called.</p>\n\n<p>Here is a controller that I use:</p>\n\n<pre><code>function MyController($scope) {\n    $scope.form = {\n        name: 'my name',\n        surname: 'surname'\n    }\n\n    $scope.$watch('form', function(newVal, oldVal){\n        console.log('changed');\n    });\n}\n</code></pre>\n\n<p>Here is fiddle: <a href=\"http://jsfiddle.net/Y8ByG/\">http://jsfiddle.net/Y8ByG/</a></p>\n\n<p>I expect $watch callback to be fired each time name or surname is changed, but it doesn't happen.</p>\n\n<p>What is the correct way to do it?</p>\n\n<p>Thank you</p>\n    ","a":"\n<p>Call <code>$watch</code> with <code>true</code> as the third argument:</p>\n\n<pre><code>$scope.$watch('form', function(newVal, oldVal){\n    console.log('changed');\n}, true);\n</code></pre>\n\n<p>By default when comparing two complex objects in JavaScript, they will be checked for \"reference\" equality, which asks if the two objects refer to the same thing, rather than \"value\" equality, which checks if the values of all the properties of those objects are equal.</p>\n\n<p>Per the <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch\">Angular documentation</a>, the third parameter is for <code>objectEquality</code>:</p>\n\n<blockquote>\n  <p>When <code>objectEquality == true</code>, inequality of the watchExpression is determined according to the <a href=\"https://docs.angularjs.org/api/ng/function/angular.equals\"><code>angular.equals</code></a> function. To save the value of the object for later comparison, the <a href=\"https://docs.angularjs.org/api/ng/function/angular.copy\"><code>angular.copy</code></a> function is used. This therefore means that watching complex objects will have adverse memory and performance implications.</p>\n</blockquote>\n    "},{"t":"Angular.js vs Knockout.js vs Backbone.js [closed]","l":"http://stackoverflow.com/questions/19032249/angular-js-vs-knockout-js-vs-backbone-js","q":"\n\n<p>I am considering to use either Knockout or Angular or  Backbone for my personal project. I need to build some bigger, longer-running client-side interactions to go with my server-side stuff. </p>\n\n<p>I want a simple and effective way to manage data-driven user interfaces.</p>\n\n<p>Which framework would you choose to solve my problem described above based on the feasibility as well as the performance aspect?</p>\n    ","a":"\n<p>It depends on the nature of your application. And since you did not describe it in great detail, it is an impossible question to answer. I find Backbone to be the easiest, but I work in Angular all day. Performance is more up to the coder than the framework, in my opinion.</p>\n\n<p>Are you doing heavy DOM manipulation? I would use jquery and backbone</p>\n\n<p>Very data driven app? Angular with it's nice data binding</p>\n\n<p>Game programming? none, direct to canvas, maybe a game engine</p>\n    "},{"t":"How do I switch views in AngularJS from a controller function?","l":"http://stackoverflow.com/questions/11003916/how-do-i-switch-views-in-angularjs-from-a-controller-function","q":"\n\n<p>I am trying to use the <em>ng-click</em> feature of AngularJS to switch views. How would I go about doing this with the code below?</p>\n\n<p>index.html</p>\n\n<pre><code> &lt;div ng-controller=\"Cntrl\"&gt;\n        &lt;div ng-click=\"someFunction()\"&gt;\n            click me\n        &lt;div&gt;\n    &lt;div&gt;\n</code></pre>\n\n<p>controller.js</p>\n\n<pre><code>  function Cntrl ($scope) {\n        $scope.someFunction = function(){\n            //code to change view?\n        }\n    }\n</code></pre>\n    ","a":"\n<p>In order to switch between different views, you could directly change the window.location (using the $location service!) in\nindex.html file</p>\n\n<pre><code>&lt;div ng-controller=\"Cntrl\"&gt;\n        &lt;div ng-click=\"changeView('edit')\"&gt;\n            edit\n        &lt;/div&gt;\n        &lt;div ng-click=\"changeView('preview')\"&gt;\n            preview\n        &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Controller.js</p>\n\n<pre><code>function Cntrl ($scope,$location) {\n        $scope.changeView = function(view){\n            $location.path(view); // path not hash\n        }\n    }\n</code></pre>\n\n<p>and configure the router to switch to different partials based on the location ( as shown here <a href=\"https://github.com/angular/angular-seed/blob/master/app/app.js\">https://github.com/angular/angular-seed/blob/master/app/app.js</a> ). This would have the benefit of history as well as using ng-view. </p>\n\n<p>Alternatively, you use ng-include with different partials and then use a ng-switch as shown in here ( <a href=\"https://github.com/ganarajpr/Angular-UI-Components/blob/master/index.html\">https://github.com/ganarajpr/Angular-UI-Components/blob/master/index.html</a> )</p>\n    "},{"t":"$location / switching between html5 and hashbang mode / link rewriting","l":"http://stackoverflow.com/questions/16677528/location-switching-between-html5-and-hashbang-mode-link-rewriting","q":"\n\n<p>I was under the impression that Angular would rewrite URLs that appear in href attributes of anchor tags within tempaltes, such that they would work whether in html5 mode or hashbang mode. The <a href=\"http://docs.angularjs.org/guide/dev_guide.services.$location\">documentation for the location service</a> seems to say that HTML Link Rewriting takes care of the hashbang situation.  I would thus expect that when not in HTML5 mode, hashes would be inserted, and in HTML5 mode, they would not.</p>\n\n<p>However, it seems that no rewriting is taking place.  The following example does not allow me to just change the mode.  All links in the application would need to be rewritten by hand (or derived from a variable at runtime.  Am I required to manually rewrite all URLs depending on the mode?</p>\n\n<p>I don't see any client-side url rewriting going on in Angular 1.0.6, 1.1.4 or 1.1.3.  It seems that all href values need to be prepended with #/ for hashbang mode and / for html5 mode.</p>\n\n<p>Is there some configuration necessary to cause rewriting? Am I misreading the docs? Doing something else silly?</p>\n\n<p>Here's a small example:</p>\n\n<p>\n</p>\n\n<pre><code>&lt;head&gt;\n    &lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/angular.js/1.1.3/angular.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div ng-view&gt;&lt;/div&gt;\n    &lt;script&gt;\n        angular.module('sample', [])\n            .config(\n        ['$routeProvider', '$locationProvider',\n            function ($routeProvider, $locationProvider) {\n\n                //commenting out this line (switching to hashbang mode) breaks the app\n                //-- unless # is added to the templates\n                $locationProvider.html5Mode(true);\n\n                $routeProvider.when('/', {\n                    template: 'this is home. go to &lt;a href=\"/about\"/&gt;about&lt;/a&gt;'\n                });\n                $routeProvider.when('/about', {\n                    template: 'this is about. go to &lt;a href=\"/\"/&gt;home&lt;/a'\n                });\n            }\n        ])\n            .run();\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n\n<p>Addendum: in re-reading my question, I see that I used the term \"rewriting\" without an abundance of clarity as to who and when I wanted to do the rewriting. The question is about how to get <strong>Angular</strong> to rewrite the URLs when it renders paths and how to get it to interpret paths in the JS code uniformly across the two modes.  It is <strong>not</strong> about how to cause a web server to do HTML5-compatible rewriting of requests.</p>\n    ","a":"\n<p>The documentation is not very clear about AngularJS routing. It talks about Hashbang and HTML5 mode. In fact, AngularJS routing operates in three modes:</p>\n\n<ul>\n<li>Hashbang Mode</li>\n<li>HTML5 Mode</li>\n<li>Hashbang in HTML5 Mode</li>\n</ul>\n\n<p>For each mode there is a a respective LocationUrl class (LocationHashbangUrl, LocationUrl and LocationHashbangInHTML5Url).</p>\n\n<p>In order to simulate URL rewriting you must actually set html5mode to true and decorate the $sniffer class as follows:</p>\n\n<pre><code>$provide.decorator('$sniffer', function($delegate) {\n  $delegate.history = false;\n  return $delegate;\n});\n</code></pre>\n\n<p>I will now explain this in more detail:</p>\n\n<h1>Hashbang Mode</h1>\n\n<p>Configuration:</p>\n\n<pre><code>$routeProvider\n  .when('/path', {\n    templateUrl: 'path.html',\n});\n$locationProvider\n  .html5Mode(false)\n  .hashPrefix('!');\n</code></pre>\n\n<p>This is the case when you need to use URLs with hashes in your HTML files such as in</p>\n\n<pre><code>&lt;a href=\"index.html#!/path\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>In the Browser you must use the following Link: <code>http://www.example.com/base/index.html#!/base/path</code></p>\n\n<p>As you can see in pure Hashbang mode all links in the HTML files must begin with the base such as \"index.html#!\".</p>\n\n<h1>HTML5 Mode</h1>\n\n<p>Configuration:</p>\n\n<pre><code>$routeProvider\n  .when('/path', {\n    templateUrl: 'path.html',\n  });\n$locationProvider\n  .html5Mode(true);\n</code></pre>\n\n<p>You should set the base in HTML-file</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;base href=\"/\"&gt;\n  &lt;/head&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>In this mode you can use links without the # in HTML files</p>\n\n<pre><code>&lt;a href=\"/path\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>Link in Browser:</p>\n\n<pre><code>http://www.example.com/base/path\n</code></pre>\n\n<h1>Hashbang in HTML5 Mode</h1>\n\n<p>This mode is activated when we actually use HTML5 mode but in an incompatible browser. We can simulate this mode in a compatible browser by decorating the $sniffer service and setting history to false.</p>\n\n<p>Configuration:</p>\n\n<pre><code>$provide.decorator('$sniffer', function($delegate) {\n  $delegate.history = false;\n  return $delegate;\n});\n$routeProvider\n  .when('/path', {\n    templateUrl: 'path.html',\n  });\n$locationProvider\n  .html5Mode(true)\n  .hashPrefix('!');\n</code></pre>\n\n<p>Set the base in HTML-file:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;base href=\"/\"&gt;\n  &lt;/head&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>In this case the links can also be written without the hash in the HTML file</p>\n\n<pre><code>&lt;a href=\"/path\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>Link in Browser:</p>\n\n<pre><code>http://www.example.com/index.html#!/base/path\n</code></pre>\n    "},{"t":"How to have a default option in select box - Angular.js","l":"http://stackoverflow.com/questions/18194255/how-to-have-a-default-option-in-select-box-angular-js","q":"\n\n<p>I have searched Google and can't find anything on this.</p>\n\n<p>I have this code.</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\" \n        ng-options=\"option.value as option.name for option in options\"\n&gt;&lt;/select&gt;\n</code></pre>\n\n<p>With some data like this </p>\n\n<pre><code>options = [{\n   name: 'Something Cool',\n   value: 'something-cool-value'\n}, {\n   name: 'Something Else',\n   value: 'something-else-value'\n}];\n</code></pre>\n\n<p>And the output is something like this.</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\"  \n        ng-options=\"option.value as option.name for option in options\" \n        class=\"ng-pristine ng-valid\"&gt;\n\n    &lt;option value=\"?\" selected=\"selected\"&gt;&lt;/option&gt;\n    &lt;option value=\"0\"&gt;Something Cool&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Something Else&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>How is it possible to set the first option in the data as the default value so you would get a result like this.</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\" ....&gt;\n    &lt;option value=\"0\" selected=\"selected\"&gt;Something Cool&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Something Else&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n    ","a":"\n<p>You can simply use <a href=\"http://docs.angularjs.org/api/ng.directive:ngInit\">ng-init</a> like this</p>\n\n<pre><code>&lt;select ng-init=\"somethingHere = options[0]\" ng-model=\"somethingHere\" ng-options=\"option.name for option in options\"&gt;&lt;/select&gt;\n</code></pre>\n    "},{"t":"ngClass style with dash in key","l":"http://stackoverflow.com/questions/15557151/ngclass-style-with-dash-in-key","q":"\n\n<p>I hope this saves someone a headache with styles that use dashes, especially since bootstrap has become so popular.</p>\n\n<p>I am using angular 1.0.5 by way of</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.0.5/angular.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>In the <a href=\"http://docs.angularjs.org/api/ng.directive:ngClass\">ngClass documentation</a>, the example is simple, but it also mentions the expression can be a map of class names to boolean values. I was trying to use the \"icon-white\" style on my icon as shown in the <a href=\"http://twitter.github.com/bootstrap/base-css.html#icons\">bootstrap documentation</a>, depending on a boolean variable.</p>\n\n<pre><code>&lt;i class=\"icon-home\" ng-class=\"{icon-white: someBooleanValue}\"&gt;\n</code></pre>\n\n<p>The line above does not work. The class is not appended with <code>icon-white</code> when <code>someBooleanValue</code> is true. However, if I change the key to <code>iconWhite</code>, it is successfully added to the list of class values. How would one add a value with a dash?</p>\n    ","a":"\n<p>After hours of hacking around, it turns out the dash gets interpolated! Quotes are needed.</p>\n\n<pre><code>&lt;i class=\"icon-home\" ng-class=\"{'icon-white': someBooleanValue}\"&gt;\n</code></pre>\n\n<p>I hope this helps someone from tearing their hair out.</p>\n\n<p>UPDATE:</p>\n\n<p>In older versions of Angular, using a backslash also does the trick, but not in the newer versions.</p>\n\n<pre><code>&lt;i class=\"icon-home\" ng-class=\"{icon\\-white: someBooleanValue}\"&gt;\n</code></pre>\n\n<p>The former is probably preferred, since you can search for it in your favorite editor.</p>\n    "},{"t":"AngularJS, show popups - The most elegant way?","l":"http://stackoverflow.com/questions/15812203/angularjs-show-popups-the-most-elegant-way","q":"\n\n<p>This time i've a question more conceptual than else...\nso there isn't much real code here.</p>\n\n<p>I've this angularJS app. Everything works just fine.</p>\n\n<p>Now I need to show different popups when specific conditions become true, and i was wondering what is the best way to procede.</p>\n\n<p>Currently i'm evaluating two options, but i'm absolutely open to other options (if are better).</p>\n\n<p><strong>(Option 1)</strong></p>\n\n<blockquote>\n  <p>I could create the new html element for the popup, and append to the\n  DOM directly from the controller.</p>\n</blockquote>\n\n<p>This will break the MVC design pattern.</p>\n\n<p>I'm not happy with this solution.</p>\n\n<p><strong>(Option 2)</strong></p>\n\n<blockquote>\n  <p>I could insert always the code for all the popups in the static html\n  file.</p>\n  \n  <p>Then, using <code>ngShow</code>, i can hide/show only the correct popup.</p>\n</blockquote>\n\n<p>This option is not really scalable.</p>\n\n<p><strong>So i'm pretty sure there has to be a better way to achieve what i want.</strong></p>\n\n<p>As always, any help is welcomed.</p>\n\n<p>Thank you in advance</p>\n    ","a":"\n<p>Based on my experience with AngularJS modals so far I believe that the most elegant approach is a dedicated service to which we can provide a partial (HTML) template to be displayed in a modal.</p>\n\n<p>When we think about it modals are kind of AngularJS routes but just displayed in modal popup. </p>\n\n<p>The AngularUI bootstrap project (<a href=\"http://angular-ui.github.com/bootstrap/\">http://angular-ui.github.com/bootstrap/</a>) has an excellent <code>$modal</code> service (used to be called $dialog prior to version 0.6.0) that is an implementation of a service to display partial's content as a modal popup.</p>\n    "},{"t":"How do you use $sce.trustAsHtml(string) to replicate ng-bind-html-unsafe in Angular 1.2+","l":"http://stackoverflow.com/questions/18340872/how-do-you-use-sce-trustashtmlstring-to-replicate-ng-bind-html-unsafe-in-angu","q":"\n\n<p><code>ng-bind-html-unsafe</code> was removed in Angular 1.2</p>\n\n<p>I'm trying to implement something where I need to use <code>ng-bind-html-unsafe</code>. In the docs and on the github commit they say:</p>\n\n<blockquote>\n  <p>ng-bind-html provides ng-html-bind-unsafe like behavior (innerHTML's the result without\n  sanitization) when bound to the result of $sce.trustAsHtml(string).</p>\n</blockquote>\n\n<p>How do you do this?</p>\n    ","a":"\n<p>That should be:</p>\n\n<pre><code>&lt;div ng-bind-html=\"trustedHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>plus in your controller:</p>\n\n<pre><code>$scope.html = '&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;';\n$scope.trustedHtml = $sce.trustAsHtml($scope.html);\n</code></pre>\n\n<p>instead of old syntax, where you could reference <code>$scope.html</code> variable directly:</p>\n\n<pre><code>&lt;div ng-bind-html-unsafe=\"html\"&gt;&lt;/div&gt;\n</code></pre>\n    "},{"t":"AngularJS-Twig conflict with double curly braces","l":"http://stackoverflow.com/questions/13671701/angularjs-twig-conflict-with-double-curly-braces","q":"\n\n<p>As you know, both angular and twig has common control construction - double curly braces. How can I change default value of Angular?</p>\n\n<p>I know that I can do it in Twig, but in some projects I can't, only JS.</p>\n    ","a":"\n<p>You can change the start and end interpolation tags using <code>interpolateProvider</code> service. One convenient place for this is at the module initialization time.</p>\n\n<pre><code>angular.module('myApp', []).config(function($interpolateProvider){\n    $interpolateProvider.startSymbol('{[{').endSymbol('}]}');\n});\n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/ng.$interpolateProvider\">http://docs.angularjs.org/api/ng.$interpolateProvider</a></p>\n    "},{"t":"why ng-bind is better than {{}} in angular?","l":"http://stackoverflow.com/questions/16125872/why-ng-bind-is-better-than-in-angular","q":"\n\n<p>I was in one of the angular presentation and one of the person in the meeting mentioned ng-bind is better than {{}} binding. </p>\n\n<p>One of the reason, ng-bind put the variable in the watch list and only when there is a model change the data get pushed to view, on the other hand, {{}} will interpolate the expression every time (I guess it is the angular cycle) and push the value, even if the value changed or not. </p>\n\n<p>Also it is said that, if you have not much data in on the screen you can use {{}} and the performance issue will not be visible. Can someone shed some light on this issue for me?</p>\n    ","a":"\n<p>If you are not using <code>ng-bind</code>, instead something like this:</p>\n\n<pre><code>&lt;div&gt;\n  Hello, {{user.name}}\n&lt;/div&gt;\n</code></pre>\n\n<p>you might see the actual <code>Hello, {{user.name}}</code> for a second before <code>user.name</code> is resolved (before the data is loaded)</p>\n\n<p>You could do something like this</p>\n\n<pre><code>&lt;div&gt;\n  Hello, &lt;span ng-bind=\"user.name\"&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>if that's an issue for you.</p>\n\n<p>Another solution is to use <a href=\"http://docs.angularjs.org/api/ng.directive%3angCloak\"><code>ng-cloak</code></a>.</p>\n    "},{"t":"Is it possible to make a Tree View with Angular?","l":"http://stackoverflow.com/questions/11854514/is-it-possible-to-make-a-tree-view-with-angular","q":"\n\n<p>I'm looking to display data in a tree structure in a web app. I was hoping to use Angular for this task.</p>\n\n<p>Looks like ng-repeat will allow me to iterate through a list of nodes, but how can I then do nesting when a given node's depth increases?</p>\n\n<p>I tried the <a href=\"http://jsbin.com/ihuvuf/1/\">following code</a>, but the auto-escaping of the HTML is preventing this from working. Plus, the end ul tag is in the wrong place.</p>\n\n<p>I'm pretty sure that I'm going about this problem entirely the wrong way.</p>\n\n<p>Any ideas?</p>\n    ","a":"\n<p>Have a look at this fiddle <a href=\"http://jsfiddle.net/brendanowen/uXbn6/8/\">http://jsfiddle.net/brendanowen/uXbn6/8/</a></p>\n\n<p>This should give you a good idea of how to display a <code>tree like structure</code> using angular. It is kind of using recursion in html!</p>\n    "},{"t":"How to unsubscribe to a broadcast event in angularJS. How to remove function registered via $on","l":"http://stackoverflow.com/questions/14898296/how-to-unsubscribe-to-a-broadcast-event-in-angularjs-how-to-remove-function-reg","q":"\n\n<p>I have registered my listener to a $broadcast event using $on function</p>\n\n<pre><code>$scope.$on(\"onViewUpdated\", this.callMe);\n</code></pre>\n\n<p>and I want to un-register this listener based on a particular business rule. But my problem is that once it is registered I am not able to un-register it. </p>\n\n<p>Is there any method in AngularJS to un-register a particular listener? A method like $on that un-register this event, may be $off. So that based on the business logic i can say</p>\n\n<pre><code> $scope.$off(\"onViewUpdated\", this.callMe);\n</code></pre>\n\n<p>and this function stop being called when somebody broadcast \"onViewUpdated\" event.</p>\n\n<p>Thanks</p>\n\n<p><strong>EDIT</strong>:\nI want to de-register the listener from another function. Not the function where i register it.</p>\n    ","a":"\n<p>This is found in the source code :) at least in 1.0.4. I'll just post the full code since it's short</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>/**\n  * @param {string} name Event name to listen on.\n  * @param {function(event)} listener Function to call when the event is emitted.\n  * @returns {function()} Returns a deregistration function for this listener.\n  */\n$on: function(name, listener) {\n    var namedListeners = this.$$listeners[name];\n    if (!namedListeners) {\n      this.$$listeners[name] = namedListeners = [];\n    }\n    namedListeners.push(listener);\n\n    return function() {\n      namedListeners[indexOf(namedListeners, listener)] = null;\n    };\n},\n</code></pre>\n\n<p>In your case you need to remember the return function</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var offCallMeFn = $scope.$on(\"onViewUpdated\", callMe);\n\n//this will deregister that listener\noffCallMeFn();\n</code></pre>\n    "},{"t":"Accessing clicked element in angularjs","l":"http://stackoverflow.com/questions/12430820/accessing-clicked-element-in-angularjs","q":"\n\n<p>I'm relatively new to AngularJS and suspect I'm not grasping a concept. I'm also using Twitter Bootstrap and I've got jQuery loaded.</p>\n\n<p>Workflow: User clicks a link from a list, \"master\" section is updated and link user clicked on gains active class.</p>\n\n<p>Basic HTML Markup:</p>\n\n<pre><code>&lt;ul class=\"list-holder\" ng-controller=\"adminController\"&gt;\n   &lt;li&gt;&lt;a ng-click=\"setMaster('client')\"&gt;Clients&lt;/li&gt;\n   &lt;li&gt;&lt;a ng-click=\"setMaster('employees')\"&gt;Employees&lt;/li&gt;\n   &lt;li&gt;&lt;a ng-click=\"setMaster('etc')&gt;Etc...&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Doing this in jQuery:</p>\n\n<pre><code>jQuery(\".list-holder\").on('click', 'a', function(event){\n    event.preventDefault();\njQuery(\".list-holder li\").removeClass('active');\njQuery(this).parent('li').addClass('active');\n});\n</code></pre>\n\n<p>But I can't figure out how to integrate Angular and jQuery to get this done, because I'm using Angular to fetch the master list (in JSON form) from the server and update a list on the page.</p>\n\n<p>How do I integrate this? I can't seem to find the element I've clicked on once I'm inside the angular controller function</p>\n\n<p>Controller:</p>\n\n<pre><code>function adminController($scope)\n    {    \n        $scope.setMaster = function(obj)\n        {\n            // How do I get clicked element's parent li?\n            console.log(obj);\n        }\n    }\n</code></pre>\n    ","a":"\n<p>While AngularJS allows you to get a hand on a click event (and thus a target of it) with the following syntax (note the <code>$event</code> argument to the <code>setMaster</code> function; documentation here: <a href=\"http://docs.angularjs.org/api/ng.directive:ngClick\">http://docs.angularjs.org/api/ng.directive:ngClick</a>):</p>\n\n<pre><code>function AdminController($scope) {    \n  $scope.setMaster = function(obj, $event){\n    console.log($event.target);\n  }\n}\n</code></pre>\n\n<p>this is not very angular-way of solving this problem. With AngularJS the focus is on the model manipulation. One would mutate a model and let AngularJS figure out rendering.</p>\n\n<p>The AngularJS-way of solving this problem (without using jQuery and <strong>without the need to pass the <code>$event</code> argument</strong>) would be:</p>\n\n<pre><code>&lt;div ng-controller=\"AdminController\"&gt;\n    &lt;ul class=\"list-holder\"&gt;\n        &lt;li ng-repeat=\"section in sections\" ng-class=\"{active : isSelected(section)}\"&gt;\n            &lt;a ng-click=\"setMaster(section)\"&gt;{{section.name}}&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;hr&gt;\n    {{selected | json}}\n&lt;/div&gt;\n</code></pre>\n\n<p>where methods in the controller would look like this:</p>\n\n<pre><code>$scope.setMaster = function(section) {\n    $scope.selected = section;\n}\n\n$scope.isSelected = function(section) {\n    return $scope.selected === section;\n}\n</code></pre>\n\n<p>Here is the complete jsFiddle: <a href=\"http://jsfiddle.net/pkozlowski_opensource/WXJ3p/15/\">http://jsfiddle.net/pkozlowski_opensource/WXJ3p/15/</a></p>\n    "},{"t":"Best way to represent a Grid or Table in AngularJS with Bootstrap 3? [closed]","l":"http://stackoverflow.com/questions/21375073/best-way-to-represent-a-grid-or-table-in-angularjs-with-bootstrap-3","q":"\n\n<p>I am creating an App with AngularJS and Bootstrap 3. I want to show a table/grid with thousands of rows. What is the best available control for AngularJS &amp; Bootstrap with features like Sorting, Searching, Pagination etc.</p>\n    ","a":"\n<p>After trying out ngGrid, ngTable, trNgGrid and <a href=\"http://lorenzofox3.github.io/smart-table-website/\">Smart Table</a>, I have come to the conclusion that <a href=\"http://lorenzofox3.github.io/smart-table-website/\">Smart Table</a> is by far the best implementation AngularJS-wise and Bootstrap-wise. It is built exactly the same way as you would build your own, naive table using standard angular. On top of that, they have added a few directives that help you do sorting, filtering etc. Their approach also makes it quite simple to extend yourself. The fact that they use the regular html tags for tables and the standard ng-repeat for the rows and standard bootstrap for formatting makes this my clear winner.</p>\n\n<p>Their JS code depends on angular and your html can depend on bootstrap if you want to. The JS code is 4 kb in total and you can even easily pick stuff out of there if you want to reach an even smaller footprint.</p>\n\n<p>Where the other grids will give you claustrophobia in different areas, Smart Table just feels open and to the point.</p>\n\n<p>If you rely heavily on inline editing and other advanced features, you might get up and running quicker with ngTable for instance. However, you are free to add such features quite easily in Smart Table.</p>\n\n<p>Don't miss <a href=\"http://lorenzofox3.github.io/smart-table-website/\">Smart Table</a>!!!</p>\n\n<p>I have no relation to Smart Table, except from using it myself.</p>\n    "},{"t":"Calling a function when ng-repeat has finished","l":"http://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished","q":"\n\n<p>What I am trying to implement is basically a \"on ng repeat finished rendering\" handler. I am able to detect when it is done but I can't figure out how to trigger a function from it.</p>\n\n<p>Check the fiddle:<a href=\"http://jsfiddle.net/paulocoelho/BsMqq/3/\">http://jsfiddle.net/paulocoelho/BsMqq/3/</a></p>\n\n<p>JS</p>\n\n<pre><code>var module = angular.module('testApp', [])\n    .directive('onFinishRender', function () {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attr) {\n            if (scope.$last === true) {\n                element.ready(function () {\n                    console.log(\"calling:\"+attr.onFinishRender);\n                    // CALL TEST HERE!\n                });\n            }\n        }\n    }\n});\n\nfunction myC($scope) {\n    $scope.ta = [1, 2, 3, 4, 5, 6];\n    function test() {\n        console.log(\"test executed\");\n    }\n}\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;div ng-app=\"testApp\" ng-controller=\"myC\"&gt;\n    &lt;p ng-repeat=\"t in ta\" on-finish-render=\"test()\"&gt;{{t}}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>Answer</strong>:\nWorking fiddle from finishingmove: <a href=\"http://jsfiddle.net/paulocoelho/BsMqq/4/\">http://jsfiddle.net/paulocoelho/BsMqq/4/</a> </p>\n    ","a":"\n<pre><code>var module = angular.module('testApp', [])\n    .directive('onFinishRender', function ($timeout) {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attr) {\n            if (scope.$last === true) {\n                $timeout(function () {\n                    scope.$emit('ngRepeatFinished');\n                });\n            }\n        }\n    }\n});\n</code></pre>\n\n<p>Notice that I didn't use .ready() but rather wrapped it in a $timeout. $timeout makes sure it's executed when the ng-repeated elements have REALLY finished rendering (because the $timeout will execute at the end of the current digest cycle -- <strong>and it will also call $apply internally, unlike setTimeout</strong>). So after the ng-repeat has finished, we use $emit to emit an event to outer scopes (sibling and parent scopes).</p>\n\n<p>And then in your controller, you can catch it with $on:</p>\n\n<pre><code>$scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n    //you also get the actual event object\n    //do stuff, execute functions -- whatever...\n});\n</code></pre>\n\n<p>With html that looks something like this:</p>\n\n<pre><code>&lt;div ng-repeat=\"item in items\" on-finish-render=\"ngRepeatFinished\"&gt;\n    &lt;div&gt;{{item.name}}}&lt;div&gt;\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"How to highlight a current menu item?","l":"http://stackoverflow.com/questions/12592472/how-to-highlight-a-current-menu-item","q":"\n\n<p>Does AngularJS help in any way with setting an <code>active</code> class on the link for the current page?</p>\n\n<p>I imagine there is some magical way this is done, but I can't seem to find.</p>\n\n<p>My menu looks like:</p>\n\n<pre><code> &lt;ul&gt;\n   &lt;li&gt;&lt;a class=\"active\" href=\"/tasks\"&gt;Tasks&lt;/a&gt;\n   &lt;li&gt;&lt;a href=\"/actions\"&gt;Tasks&lt;/a&gt;\n &lt;/ul&gt;\n</code></pre>\n\n<p>and I have controllers for each of them in my routes: <code>TasksController</code> and <code>ActionsController</code>.</p>\n\n<p>But I can't figure out a way to bind the \"active\" class on the <code>a</code> links to the controllers.</p>\n\n<p>Any hints?</p>\n    ","a":"\n<p>on view</p>\n\n<pre><code>&lt;a ng-class=\"getClass('/tasks')\" href=\"/tasks\"&gt;Tasks&lt;/a&gt;\n</code></pre>\n\n<p>on controller</p>\n\n<pre><code>$scope.getClass = function(path) {\n    if ($location.path().substr(0, path.length) == path) {\n      return \"active\"\n    } else {\n      return \"\"\n    }\n}\n</code></pre>\n\n<p>With this the tasks link will have the active class in any url that starts with '/tasks'(e.g. '/tasks/1/reports')</p>\n    "},{"t":"AngularJS disable partial caching on dev machine","l":"http://stackoverflow.com/questions/14718826/angularjs-disable-partial-caching-on-dev-machine","q":"\n\n<p>I have problem with caching partials in AngularJS.</p>\n\n<p>In my html page i have :</p>\n\n<pre><code>&lt;body&gt;\n &lt;div ng-view&gt;&lt;/div&gt;\n&lt;body&gt;\n</code></pre>\n\n<p>where my partials are loaded.</p>\n\n<p>When i change html code in my partial, browser still load old data.</p>\n\n<p>Is here any workaround?</p>\n\n<p>Thanks </p>\n    ","a":"\n<p>For Development you can also deactivate the browser cache - In Chrome Dev Tools on the bottom right click on the gear and tick the option </p>\n\n<blockquote>\n  <p>Disable cache (while DevTools is open)</p>\n</blockquote>\n\n<p>Update: In Firefox there is the same option in Debugger -&gt; Settings -&gt; Advanced Section (checked for Version 33)</p>\n\n<p>Update 2: Although this option appears in Firefox some report it doesn't work. I suggest using firebug and following hadaytullah answer.</p>\n    "},{"t":"Angular Js Clear $watch","l":"http://stackoverflow.com/questions/14957614/angular-js-clear-watch","q":"\n\n<p>I have a watch function at my Angular Js application.</p>\n\n<pre><code>$scope.$watch('quartzCrystal', function () {\n   ...\n}\n</code></pre>\n\n<p>However after some condition(in my example changing the page at my single page application) I want to stop that watch (as like clearing timeout)</p>\n\n<p>How can I do that?</p>\n    ","a":"\n<p><code>$watch</code> returns a deregistration function, calling it would deregister the <code>$watcher</code>.</p>\n\n<pre><code>var listener = $scope.$watch(\"quartz\", function () {});\n// ...\nlistener(); // would clear the watch\n</code></pre>\n    "},{"t":"AngularJS ng-click stopPropagation","l":"http://stackoverflow.com/questions/20300866/angularjs-ng-click-stoppropagation","q":"\n\n<p>I have a click Event on a table row and in this row there is also a delete Button with a click Event. When i click the delete button the click Event on the row is also fired. Here is my code.</p>\n\n<pre><code>    &lt;tbody&gt;\n      &lt;tr ng-repeat=\"user in users\" class=\"repeat-animation\" ng-click=\"showUser(user, $index)\"&gt;\n        &lt;td&gt;{{user.firstname}}&lt;/td&gt;\n        &lt;td&gt;{{user.lastname}}&lt;/td&gt;\n        &lt;td&gt;{{user.email}}&lt;/td&gt;\n        &lt;td&gt;&lt;button class=\"btn red btn-sm\" ng-click=\"deleteUser(user.id, $index)\"&gt;Delete&lt;/button&gt;&lt;/td&gt;              \n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n</code></pre>\n\n<p>How can I prevent that the showUser Event is fired when i click the delete Button in the table cell?</p>\n    ","a":"\n<p>ngClick directive (as well as all other event directives) creates <code>$event</code> variable which is available on same scope. This variable is a reference to JS <code>event</code> object and can be used to call <code>stopPropagation()</code>:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table&gt;\n  &lt;tr ng-repeat=\"user in users\" ng-click=\"showUser(user)\"&gt;\n    &lt;td&gt;{{user.firstname}}&lt;/td&gt;\n    &lt;td&gt;{{user.lastname}}&lt;/td&gt;\n    &lt;td&gt;\n      &lt;button class=\"btn\" ng-click=\"deleteUser(user.id, $index); $event.stopPropagation();\"&gt;\n        Delete\n      &lt;/button&gt;\n    &lt;/td&gt;              \n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p><kbd><a href=\"http://plnkr.co/edit/tTgu6LJkoVVahMMtHokt?p=preview\">PLUNKER</a></kbd></p>\n    "},{"t":"AngularJS Folder Structure [closed]","l":"http://stackoverflow.com/questions/18542353/angularjs-folder-structure","q":"\n\n<p>How do you layout a folder structure for a large and scaleable AngularJS application?</p>\n    ","a":"\n<p><img src=\"http://i.stack.imgur.com/qDI2g.jpg\" alt=\"enter image description here\"></p>\n\n<h3>Sort By Type</h3>\n\n<p>On the left we have the app organized by type. Not too bad for smaller apps, but even here you can start to see it gets more difficult to find what you are looking for. When I want to find a specific view and its controller, they are in different folders. It can be good to start here if you are not sure how else to organize the code as it is quite easy to shift to the technique on the right: structure by feature.</p>\n\n<h3>Sort By Feature (prefered)</h3>\n\n<p>On the right the project is organized by feature. All of the layout views and controllers go in the layout folder, the admin content goes in the admin folder, and the services that are used by all of the areas go in the services folder. The idea here is that when you are looking for the code that makes a feature work, it is located in one place. Services are a bit different as they “service” many features. I like this once my app starts to take shape as it becomes a lot easier to manage for me.</p>\n\n<p>Video Explanation: <a href=\"http://www.dosoma.com/library/angularjs/folder-structure\">http://www.dosoma.com/library/angularjs/folder-structure</a></p>\n\n<p>A well written blog post: <a href=\"http://www.johnpapa.net/angular-growth-structure/\">http://www.johnpapa.net/angular-growth-structure/</a></p>\n\n<p>Example App: <a href=\"https://github.com/angular-app/angular-app\">https://github.com/angular-app/angular-app</a></p>\n    "},{"t":"Promises in AngularJS and where to use them?","l":"http://stackoverflow.com/questions/15604196/promises-in-angularjs-and-where-to-use-them","q":"\n\n<p>I saw some examples of Facebook Login services that were using <strong>promises</strong> to access FB Graph API </p>\n\n<p><strong>Example #1</strong>:</p>\n\n<pre><code>this.api = function(item) {\n  var deferred = $q.defer();\n  if (item) {\n    facebook.FB.api('/' + item, function (result) {\n      $rootScope.$apply(function () {\n        if (angular.isUndefined(result.error)) {\n          deferred.resolve(result);\n        } else {\n          deferred.reject(result.error);\n        }\n      });\n    });\n  }\n  return deferred.promise;\n}\n</code></pre>\n\n<p>And services that used <code>\"$scope.$digest() // Manualy scope evaluation\"</code> when got the response </p>\n\n<p><strong>Example #2</strong>:</p>\n\n<pre><code>angular.module('HomePageModule', []).factory('facebookConnect', function() {\n    return new function() {\n        this.askFacebookForAuthentication = function(fail, success) {\n            FB.login(function(response) {\n                if (response.authResponse) {\n                    FB.api('/me', success);\n                } else {\n                    fail('User cancelled login or did not fully authorize.');\n                }\n            });\n        }\n    }\n});\n\nfunction ConnectCtrl(facebookConnect, $scope, $resource) {\n\n    $scope.user = {}\n    $scope.error = null;\n\n    $scope.registerWithFacebook = function() {\n        facebookConnect.askFacebookForAuthentication(\n        function(reason) { // fail\n            $scope.error = reason;\n        }, function(user) { // success\n            $scope.user = user\n            $scope.$digest() // Manual scope evaluation\n        });\n    }\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mkotsur/Hxbqd/\">JSFiddle</a> </p>\n\n<p>The questions are: </p>\n\n<ul>\n<li>what the <strong>difference</strong> in examples above?   </li>\n<li>what the <strong>reasons</strong> and <strong>cases</strong> to use <em>$q</em> service?</li>\n<li>and how does it <strong>work</strong>?</li>\n</ul>\n    ","a":"\n<p>This is not going to be a complete answer to your question, but hopefully this will help you and others when you try to read the documentation on the <code>$q</code> service.  It took me a while to understand it.</p>\n\n<p>Let's set aside AngularJS for a moment and just consider the Facebook API calls.  Both the API calls use a <em>callback</em> mechanism to notify the caller when the response from Facebook is available:</p>\n\n<pre><code>  facebook.FB.api('/' + item, function (result) {\n    if (result.error) {\n      // handle error\n    } else {\n      // handle success\n    }\n  });\n  // program continues while request is pending\n  ...\n</code></pre>\n\n<p>This is a standard pattern for handling asynchronous operations in JavaScript and other languages.</p>\n\n<p>One big problem with this pattern arises when you need to perform a sequence of asynchronous operations, where each successive operation depends on the result of the previous operation.  That's what this code is doing:</p>\n\n<pre><code>  FB.login(function(response) {\n      if (response.authResponse) {\n          FB.api('/me', success);\n      } else {\n          fail('User cancelled login or did not fully authorize.');\n      }\n  });\n</code></pre>\n\n<p>First it tries to log in, and then only after verifying that the login was successful does it make the request to the Graph API.</p>\n\n<p>Even in this case, which is only chaining together two operations, things start to get messy.  The method <code>askFacebookForAuthentication</code> accepts a callback for failure and success, but what happens when <code>FB.login</code> succeeds but <code>FB.api</code> fails?  This method always invokes the <code>success</code> callback regardless of the result of the <code>FB.api</code> method.  </p>\n\n<p>Now imagine that you're trying to code a robust sequence of three or more asynchronous operations, in a way that properly handles errors at each step and will be legible to anyone else or even to you after a few weeks.  Possible, but it's very easy to just keep nesting those callbacks and lose track of errors along the way.</p>\n\n<p>Now, let's set aside the Facebook API for a moment and just consider the Angular Promises API, as implemented by the <code>$q</code> service.  The pattern implemented by this service is an attempt to turn asynchronous programming back into something resembling a linear series of simple statements, with the ability to 'throw' an error at any step of the way and handle it at the end, semantically similar to the familiar <code>try/catch</code> block.</p>\n\n<p>Consider this contrived example.  Say we have two functions, where the second function consumes the result of the first one:</p>\n\n<pre><code> var firstFn = function(param) {\n    // do something with param\n    return 'firstResult';\n };\n\n var secondFn = function(param) {\n    // do something with param\n    return 'secondResult';\n };\n\n secondFn(firstFn()); \n</code></pre>\n\n<p>Now imagine that firstFn and secondFn both take a long time to complete, so we want to process this sequence asynchronously.  First we create a new <code>deferred</code> object, which represents a chain of operations:</p>\n\n<pre><code> var deferred = $q.defer();\n var promise = deferred.promise;\n</code></pre>\n\n<p>The <code>promise</code> property represents the eventual result of the chain.  If you log a promise immediately after creating it, you'll see that it is just an empty object (<code>{}</code>).  Nothing to see yet, move right along.</p>\n\n<p>So far our promise only represents the starting point in the chain.  Now let's add our two operations:</p>\n\n<pre><code> promise = promise.then(firstFn).then(secondFn);\n</code></pre>\n\n<p>The <code>then</code> method adds a step to the chain and then returns a new promise representing the eventual result of the extended chain.  You can add as many steps as you like.</p>\n\n<p>So far, we have set up our chain of functions, but nothing has actually happened.  You get things started by calling <code>deferred.resolve</code>, specifying the initial value you want to pass to the first actual step in the chain:</p>\n\n<pre><code> deferred.resolve('initial value');\n</code></pre>\n\n<p>And then...still nothing happens.  To ensure that model changes are properly observed, Angular doesn't actually call the first step in the chain until the next time <code>$apply</code> is called:</p>\n\n<pre><code> deferred.resolve('initial value');\n $rootScope.$apply();\n\n // or     \n $rootScope.$apply(function() {\n    deferred.resolve('initial value');\n });\n</code></pre>\n\n<p>So what about error handling?  So far we have only specified a <em>success handler</em> at each step in the chain.  <code>then</code> also accepts an error handler as an optional second argument.  Here's another, longer example of a promise chain, this time with error handling:</p>\n\n<pre><code> var firstFn = function(param) {\n    // do something with param\n    if (param == 'bad value') {\n      return $q.reject('invalid value');\n    } else {\n      return 'firstResult';\n    }\n };\n\n var secondFn = function(param) {\n    // do something with param\n    if (param == 'bad value') {\n      return $q.reject('invalid value');\n    } else {\n      return 'secondResult';\n    }\n };\n\n var thirdFn = function(param) {\n    // do something with param\n    return 'thirdResult';\n };\n\n var errorFn = function(message) {\n   // handle error\n };\n\n var deferred = $q.defer();\n var promise = deferred.promise.then(firstFn).then(secondFn).then(thirdFn, errorFn);\n</code></pre>\n\n<p>As you can see in this example, each handler in the chain has the opportunity to divert traffic to the next <em>error</em> handler instead of the next <em>success</em> handler.  In most cases you can have a single error handler at the end of the chain, but you can also have intermediate error handlers that attempt recovery.</p>\n\n<p>To quickly return to your examples (and your questions), I'll just say that they represent two different ways to adapt Facebook's callback-oriented API to Angular's way of observing model changes.  The first example wraps the API call in a promise, which can be added to a scope and is understood by Angular's templating system.  The second takes the more brute-force approach of setting the callback result directly on the scope, and then calling <code>$scope.$digest()</code> to make Angular aware of the change from an external source.  </p>\n\n<p>The two examples are not directly comparable, because the first is missing the login step.  However, it's generally desirable to encapsulate interactions with external APIs like this in separate services, and deliver the results to controllers as promises.  That way you can keep your controllers separate from external concerns, and test them more easily with mock services.</p>\n    "},{"t":"How to watch for a route change in AngularJS","l":"http://stackoverflow.com/questions/14765719/how-to-watch-for-a-route-change-in-angularjs","q":"\n\n<p>How would one watch/trigger an event on a route change?</p>\n    ","a":"\n<p><strong>Note</strong> : this is a proper answer for a legacy version of Angular, see <a href=\"http://stackoverflow.com/questions/16344223/angularjs-cancel-route-change-event\">this question</a> for updated version</p>\n\n<pre><code>$scope.$on('$routeChangeStart', function(next, current) { \n   ... you could trigger something here ...\n });\n</code></pre>\n\n<p>The following events are also available (their callback functions take different arguments):</p>\n\n<ul>\n<li>$routeChangeSuccess</li>\n<li>$routeChangeError</li>\n<li>$routeUpdate - if <a href=\"http://code.angularjs.org/1.0.8/docs/api/ng.$routeProvider#when\">reloadOnSearch</a> property has been set to false</li>\n</ul>\n\n<p>See the <a href=\"http://code.angularjs.org/1.0.8/docs/api/ng.$route\">$route</a> docs.</p>\n\n<p>There are two other <a href=\"http://stackoverflow.com/questions/14700325/what-are-the-undocumented-features-of-angular\">undocumented</a> events: </p>\n\n<ul>\n<li>$locationChangeStart</li>\n<li>$locationChangeSuccess</li>\n</ul>\n\n<p>See <a href=\"http://stackoverflow.com/questions/15006849/angularjs-whats-the-difference-between-locationchangesuccess-and-locationch\">What's the difference between $locationChangeSuccess and $locationChangeStart?</a></p>\n    "},{"t":"angular ui-router login authentication","l":"http://stackoverflow.com/questions/22537311/angular-ui-router-login-authentication","q":"\n\n<p>I am new to AngularJS, and I'm little confused of how can I use anguler-ui-router in the following scenario.</p>\n\n<p>I'm building a web application consists of two sections, first is the homepage with it's login and signup views, and the second is the dashboard (after login successful).</p>\n\n<p>I've created index.html for the home section with its angular app and ui-router config to handle '/login' and '/signup' views\nand there is another file dashboard.html for the dashboard section with its app and ui-router config to handle many sub views</p>\n\n<p>now I finished the dashboard section and don't know how to combine the two sections with their different angular apps. how could I tell the home app to redirect to the dashboard app?</p>\n    ","a":"\n<p>I'm in the process of making a nicer demo as well as cleaning up some of these services into a usable module, but here's what I've come up with. This is a complex process to work around some caveats, so hang in there. You'll need to break this down into several pieces.</p>\n\n<p><a href=\"http://plnkr.co/edit/UkHDqFD8P7tTEqSaCOcc?p=preview\">Take a look at this plunk</a>.</p>\n\n<p>First, you need a service to store the user's identity. I call this <code>principal</code>. It can be checked to see if the user is logged in, and upon request, it can resolve an object that represents the essential information about the user's identity. This can be whatever you need, but the essentials would be a display name, a username, possibly an email, and the roles a user belongs to (if this applies to your app). Principal also has methods to do role checks.</p>\n\n<pre><code>.factory('principal', ['$q', '$http', '$timeout',\n  function($q, $http, $timeout) {\n    var _identity = undefined,\n      _authenticated = false;\n\n    return {\n      isIdentityResolved: function() {\n        return angular.isDefined(_identity);\n      },\n      isAuthenticated: function() {\n        return _authenticated;\n      },\n      isInRole: function(role) {\n        if (!_authenticated || !_identity.roles) return false;\n\n        return _identity.roles.indexOf(role) != -1;\n      },\n      isInAnyRole: function(roles) {\n        if (!_authenticated || !_identity.roles) return false;\n\n        for (var i = 0; i &lt; roles.length; i++) {\n          if (this.isInRole(roles[i])) return true;\n        }\n\n        return false;\n      },\n      authenticate: function(identity) {\n        _identity = identity;\n        _authenticated = identity != null;\n      },\n      identity: function(force) {\n        var deferred = $q.defer();\n\n        if (force === true) _identity = undefined;\n\n        // check and see if we have retrieved the identity data from the server. if we have, reuse it by immediately resolving\n        if (angular.isDefined(_identity)) {\n          deferred.resolve(_identity);\n\n          return deferred.promise;\n        }\n\n        // otherwise, retrieve the identity data from the server, update the identity object, and then resolve.\n        //                   $http.get('/svc/account/identity', { ignoreErrors: true })\n        //                        .success(function(data) {\n        //                            _identity = data;\n        //                            _authenticated = true;\n        //                            deferred.resolve(_identity);\n        //                        })\n        //                        .error(function () {\n        //                            _identity = null;\n        //                            _authenticated = false;\n        //                            deferred.resolve(_identity);\n        //                        });\n\n        // for the sake of the demo, fake the lookup by using a timeout to create a valid\n        // fake identity. in reality,  you'll want something more like the $http request\n        // commented out above. in this example, we fake looking up to find the user is\n        // not logged in\n        var self = this;\n        $timeout(function() {\n          self.authenticate(null);\n          deferred.resolve(_identity);\n        }, 1000);\n\n        return deferred.promise;\n      }\n    };\n  }\n])\n</code></pre>\n\n<p>Second, you need a service that checks the state the user wants to go to, makes sure they're logged in (if necessary; not necessary for signin, password reset, etc.), and then does a role check (if your app needs this). If they are not authenticated, send them to the sign-in page. If they are authenticated, but fail a role check, send them to an access denied page. I call this service <code>authorization</code>.</p>\n\n<pre><code>.factory('authorization', ['$rootScope', '$state', 'principal',\n  function($rootScope, $state, principal) {\n    return {\n      authorize: function() {\n        return principal.identity()\n          .then(function() {\n            var isAuthenticated = principal.isAuthenticated();\n\n            if ($rootScope.toState.data.roles &amp;&amp; $rootScope.toState.data.roles.length &gt; 0 &amp;&amp; !principal.isInAnyRole($rootScope.toState.data.roles)) {\n              if (isAuthenticated) $state.go('accessdenied'); // user is signed in but not authorized for desired state\n              else {\n                // user is not authenticated. stow the state they wanted before you\n                // send them to the signin state, so you can return them when you're done\n                $rootScope.returnToState = $rootScope.toState;\n                $rootScope.returnToStateParams = $rootScope.toStateParams;\n\n                // now, send them to the signin state so they can log in\n                $state.go('signin');\n              }\n            }\n          });\n      }\n    };\n  }\n])\n</code></pre>\n\n<p>Now all you need to do is listen in on <code>ui-router</code>'s <a href=\"https://github.com/angular-ui/ui-router/wiki\"><code>$stateChangeStart</code></a>. This gives you a chance to examine the current state, the state they want to go to, and insert your authorization check. If it fails, you can cancel the route transition, or change to a different route.</p>\n\n<pre><code>.run(['$rootScope', '$state', '$stateParams', 'authorization', 'principal',\n    function($rootScope, $state, $stateParams, authorization, principal) {\n      $rootScope.$on('$stateChangeStart', function(event, toState, toStateParams) {\n        // track the state the user wants to go to; authorization service needs this\n        $rootScope.toState = toState;\n        $rootScope.toStateParams = toStateParams;\n        // if the principal is resolved, do an authorization check immediately. otherwise,\n        // it'll be done when the state it resolved.\n        if (principal.isIdentityResolved()) authorization.authorize();\n      });\n    }\n  ]);\n</code></pre>\n\n<p>The tricky part about tracking a user's identity is looking it up if you've already authenticated (say, you're visiting the page after a previous session, and saved an auth token in a cookie, or maybe you hard refreshed a page, or dropped onto a URL from a link). Because of the way <code>ui-router</code> works, you need to do your identity resolve once, before your auth checks. You can do this using the <code>resolve</code> option in your state config. I have one parent state for the site that all states inherit from, which forces the principal to be resolved before anything else happens. </p>\n\n<pre><code>$stateProvider.state('site', {\n  'abstract': true,\n  resolve: {\n    authorize: ['authorization',\n      function(authorization) {\n        return authorization.authorize();\n      }\n    ]\n  }\n})\n</code></pre>\n\n<p>There's another problem here... <code>resolve</code> only gets called once. Once your promise for identity lookup completes, it won't run the resolve delegate again. So we have to do your auth checks in two places: once pursuant to your identity promise resolving in <code>resolve</code>, which covers the first time your app loads, and once in <code>$stateChangeStart</code> if the resolution has been done, which covers any time you navigate around states.</p>\n\n<p>OK, so what have we done so far?</p>\n\n<ol>\n<li>We check to see when the app loads if the user is logged in.</li>\n<li>We track info about the logged in user.</li>\n<li>We redirect them to sign in state for states that require the user to be logged in.</li>\n<li>We redirect them to an access denied state if they do not have authorization to access it.</li>\n<li>We have a mechanism to redirect users back to the original state they requested, if we needed them to log in.</li>\n<li>We can sign a user out (needs to be wired up in concert with any client or server code that manages your auth ticket).</li>\n<li>We <em>don't</em> need to send users back to the sign-in page every time they reload their browser or drop on a link.</li>\n</ol>\n\n<p>Where do we go from here? Well, you can organize your states into regions that require sign in. You can require authenticated/authorized users by adding <code>data</code> with <code>roles</code> to these states (or a parent of them, if you want to use inheritance). Here, we restrict a resource to Admins:</p>\n\n<pre><code>.state('restricted', {\n    parent: 'site',\n    url: '/restricted',\n    data: {\n      roles: ['Admin']\n    },\n    views: {\n      'content@': {\n        templateUrl: 'restricted.html'\n      }\n    }\n  })\n</code></pre>\n\n<p>Now you can control state-by-state what users can access a route. Any other concerns? Maybe varying only part of a view based on whether or not they are logged in? No problem. Use the <code>principal.isAuthenticated()</code> or even <code>principal.isInRole()</code> with any of the numerous ways you can conditionally display a template or an element.</p>\n\n<p>First, inject <code>principal</code> into a controller or whatever, and stick it to the scope so you can use it easily in your view:</p>\n\n<pre><code>.scope('HomeCtrl', ['$scope', 'principal', function($scope, principal) {\n  $scope.principal = principal;\n});\n</code></pre>\n\n<p>Show or hide an element:</p>\n\n<pre><code>&lt;div ng-show=\"principal.isAuthenticated()\"&gt;\n   I'm logged in\n&lt;/div&gt;\n&lt;div ng-hide=\"principal.isAuthenticated()\"&gt;\n  I'm not logged in\n&lt;/div&gt;\n</code></pre>\n\n<p>Etc., so on, so forth. Anyways, in your example app, you would have a state for home page that would let unauthenticated users drop by. They could have links to the sign-in or sign-up states, or have those forms built into that page. Whatever suits you.</p>\n\n<p>The dashboard pages could all inherit from a state that requires the users to be logged in and, say, be a <code>User</code> role member. All the authorization stuff we've discussed would flow from there.</p>\n    "},{"t":"orderBy multiple fields in Angular","l":"http://stackoverflow.com/questions/17037524/orderby-multiple-fields-in-angular","q":"\n\n<p>How to sort by using multiple fields at same time in angular? fist by group and then by sub-group \nfor Example</p>\n\n<pre><code>$scope.divisions = [{'group':1,'sub':1}, {'group':2,'sub':10}, {'group':1,'sub':2},{'group':1,'sub':20},{'group':2,'sub':1},\n    {'group':2,'sub':11}];\n</code></pre>\n\n<p>I wanted to display this as</p>\n\n<h3>group : Sub-group</h3>\n\n<p>1 - 1</p>\n\n<p>1 - 2</p>\n\n<p>1 - 20</p>\n\n<p>2 - 1</p>\n\n<p>2 - 10</p>\n\n<p>2 - 11</p>\n\n<pre><code>&lt;select ng-model=\"divs\" ng-options=\"(d.group+' - '+d.sub) for d in divisions | orderBy:'group' | orderBy:'sub'\" /&gt;\n</code></pre>\n    ","a":"\n<p>Please see this:</p>\n\n<p><a href=\"http://jsfiddle.net/JSWorld/Hp4W7/32/\">http://jsfiddle.net/JSWorld/Hp4W7/32/</a></p>\n\n<pre><code>&lt;div ng-repeat=\"division in divisions | orderBy:['group','sub']\"&gt;{{division.group}}-{{division.sub}}&lt;/div&gt;\n</code></pre>\n    "},{"t":"How to call a method defined in an AngularJS directive?","l":"http://stackoverflow.com/questions/16881478/how-to-call-a-method-defined-in-an-angularjs-directive","q":"\n\n<p>I have a directive, here is the code : </p>\n\n<pre><code>.directive('map', function() {\n    return {\n        restrict: 'E',\n        replace: true,\n        template: '&lt;div&gt;&lt;/div&gt;',\n        link: function($scope, element, attrs) {\n\n            var center = new google.maps.LatLng(50.1, 14.4); \n            $scope.map_options = {\n                zoom: 14,\n                center: center,\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n            };\n            // create map\n            var map = new google.maps.Map(document.getElementById(attrs.id), $scope.map_options);\n            var dirService= new google.maps.DirectionsService();\n            var dirRenderer= new google.maps.DirectionsRenderer()\n\n            var showDirections = function(dirResult, dirStatus) {\n                if (dirStatus != google.maps.DirectionsStatus.OK) {\n                    alert('Directions failed: ' + dirStatus);\n                    return;\n                  }\n                  // Show directions\n                dirRenderer.setMap(map);\n                //$scope.dirRenderer.setPanel(Demo.dirContainer);\n                dirRenderer.setDirections(dirResult);\n            };\n\n            // Watch\n            var updateMap = function(){\n                dirService.route($scope.dirRequest, showDirections); \n            };    \n            $scope.$watch('dirRequest.origin', updateMap);\n\n            google.maps.event.addListener(map, 'zoom_changed', function() {\n                $scope.map_options.zoom = map.getZoom();\n              });\n\n            dirService.route($scope.dirRequest, showDirections);  \n        }\n    }\n})\n</code></pre>\n\n<p>I would like to call <code>updateMap()</code> on a user action. The action button is not on the directive. </p>\n\n<p>What is the best way to call <code>updateMap()</code> from a controller?</p>\n    ","a":"\n<p>If you want to use isolated scopes you can pass a control object using bi-directional binding ('=') of a variable from the controller scope. In this way you can control also several instances of the same directive on a page.</p>\n\n<p>I created a <a href=\"http://plnkr.co/edit/JPh3wZ?p=preview\">short plunker example</a> for reference:</p>\n\n<p><strong>Controller/Directive:</strong></p>\n\n<pre><code>var app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope) {\n  $scope.focusinControl = {\n  };\n});\n\napp.directive('focusin', function factory() {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '&lt;div&gt;A:{{internalControl}}&lt;/div&gt;',\n    scope: {\n      control: '='\n    },\n    link      : function (scope, element, attrs) {\n      scope.internalControl = scope.control || {};\n      scope.internalControl.takenTablets = 0;\n      scope.internalControl.takeTablet = function() {\n        scope.internalControl.takenTablets += 1;  \n      }\n    }\n  };\n});\n</code></pre>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;button ng-click=\"focusinControl.takeTablet()\"&gt;Call directive function&lt;/button&gt;\n&lt;h4&gt;In controller scope:&lt;/h4&gt;\n{{focusinControl}}\n&lt;h4&gt;In directive scope:&lt;/h4&gt;\n&lt;focusin control=\"focusinControl\"&gt;&lt;/focusin&gt;\n&lt;h4&gt;Without control object:&lt;/h4&gt;\n&lt;focusin&gt;&lt;/focusin&gt;\n</code></pre>\n    "},{"t":"Angular: Should I use this or $scope","l":"http://stackoverflow.com/questions/16619740/angular-should-i-use-this-or-scope","q":"\n\n<p>There are two patterns in use for accessing controller functions:  \"this\" and \"$scope\".\nWhich should I use and when?  I understand \"this\" is set to the controller and \"$scope\" is an object in the scope chain for views. But with the new \"Controller as Var\" syntax, you can easily use either. So what I'm asking is what is best and what is the direction for the future?</p>\n\n<p>Example:</p>\n\n<ol>\n<li><p>Using \"this\":</p>\n\n<pre><code>function UserCtrl() {\n  this.bye = function() { alert('....'); };\n}\n\n&lt;body ng-controller='UserCtrl as uCtrl'&gt;\n  &lt;button ng-click='uCtrl.bye()'&gt;bye&lt;/button&gt;\n</code></pre></li>\n<li><p>Using $scope</p>\n\n<pre><code>function UserCtrl($scope) {\n    $scope.bye = function () { alert('....'); };\n}\n\n&lt;body ng-controller='UserCtrl'&gt;\n    &lt;button ng-click='bye()'&gt;bye&lt;/button&gt;\n</code></pre></li>\n</ol>\n\n<p>I personally find the this.name easier on the eye and more natural compared to other Javascript OO patterns.</p>\n\n<p>Advice please?</p>\n    ","a":"\n<p>Both have their uses. <strong>First, some history ...</strong></p>\n\n<p>$scope is the \"classic\" technique while \"controller as\" is much more recent (as of version 1.2.0 officially though it did appear in unstable pre-releases prior to this). </p>\n\n<p>Both work perfectly well and the only wrong answer is to mix them in the same app without an explicit reason. Frankly, mixing them will work, but it will just add to the confusion. So pick one and roll with it. The most important thing is to be consistent.</p>\n\n<p>Which one? That depends on you. There are many more examples out there of $scope, but \"controller as\" is picking up steam as well. Is one better than the other? That's debatable. So how do you choose?</p>\n\n<p><strong>Comfort</strong></p>\n\n<p>I prefer the \"controller as\" because I like hiding the $scope and exposing the members from the controller to the view via an intermediary object. By setting this.*, I can expose just what I want to expose from the controller to the view. You can do that with $scope too, I just prefer to use standard JavaScript for this. In fact, I code it like this:</p>\n\n<pre><code>var vm = this;\n\nvm.title = 'some title';\nvm.saveData = function(){ ... } ;\n\nreturn vm;\n</code></pre>\n\n<p>This feels cleaner to me and makes it easy to see what is being exposed to the view. Notice I name the variable that I return \"vm\" , which stands for viewmodel. That's just my convention. </p>\n\n<p>With $scope I can do the same things, so I'm not adding or detracting with the technique.</p>\n\n<pre><code>$scope.title = 'some title';\n$scope.saveData = function() { ... };\n</code></pre>\n\n<p>So its up to you there.</p>\n\n<p><strong>Injection</strong></p>\n\n<p>With $scope I do need to inject $scope into the controller. I don't have to do this with controller as, unless I need it for some other reason (like $broadcast or watches, though I try to avoid watches in the controller).</p>\n\n<p><strong>UPDATE</strong>\nI wrote this post about the 2 choices: \n<a href=\"http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/\">http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/</a></p>\n    "},{"t":"Angularjs - ng-cloak/ng-show elements blink","l":"http://stackoverflow.com/questions/11249768/angularjs-ng-cloak-ng-show-elements-blink","q":"\n\n<p>I have an issue in angularjs with directive/class <code>ng-cloak</code> or <code>ng-show</code>.</p>\n\n<p>Chrome works fine, but Firefox is causing blink of elements with <code>ng-cloak</code> or <code>ng-show</code>.\nIMHO it's caused by the converting <code>ng-cloak</code>/<code>ng-show</code> to <code>style=\"display: none;\"</code>, probably the FF javascript compiler is little bit slower, so the elements appears for a while and then hide?</p>\n\n<p>Example:</p>\n\n<pre><code>&lt;ul ng-show=\"foo != null\" ng-cloak&gt;..&lt;/ul&gt;\n</code></pre>\n\n<p>I would appreciate any tips or help, it's very annoying,</p>\n    ","a":"\n<p>Though the documentation doesn't mention it, it might not be enough to add the <code>display: none;</code> rule to your CSS.  In cases where you are loading angular.js in the body or templates aren't compiled soon enough, use the <code>ng-cloak</code> directive <strong>and</strong> include the following in your CSS:</p>\n\n<pre><code>/* \n  Allow angular.js to be loaded in body, hiding cloaked elements until \n  templates compile.  The !important is important given that there may be \n  other selectors that are more specific or come later and might alter display.  \n */\n[ng\\:cloak], [ng-cloak], .ng-cloak {\n  display: none !important;\n}\n</code></pre>\n\n<p>As mentioned in the comment, the <code>!important</code> is important.  For example, if you have the following markup</p>\n\n<pre><code>&lt;ul class=\"nav\"&gt;\n  &lt;li&gt;&lt;a href=\"/foo\" ng-cloak&gt;{{bar}}&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>and you happen to be using <code>bootstrap.css</code>, the following selector is more specific for your <code>ng-cloak</code>'ed element</p>\n\n<pre><code>.nav &gt; li &gt; a {\n  display: block;\n}\n</code></pre>\n\n<p>So if you include a rule with simply <code>display: none;</code>, Bootstrap's rule will take precedence and the <code>display</code> will be set to <code>block</code>, so you'll see the flicker before the template compiles.</p>\n    "},{"t":"How do I call an Angular.js filter with multiple arguments?","l":"http://stackoverflow.com/questions/16227325/how-do-i-call-an-angular-js-filter-with-multiple-arguments","q":"\n\n<p>As from the <a href=\"http://docs.angularjs.org/api/ng.$filter\">documentation</a>, we can call a filter such as <a href=\"http://docs.angularjs.org/api/ng.filter:date\">date</a> like this:</p>\n\n<pre><code>{{ myDateInScope | date: 'yyyy-MM-dd' }}\n</code></pre>\n\n<p>Here date is a filter that takes one argument.</p>\n\n<p>What is the syntax to call filters with more parameters both from templates and from JavaScript code?</p>\n    ","a":"\n<p>In templates, you can separate filter arguments by <strong>colons</strong>.</p>\n\n<pre><code>{{ yourExpression | yourFilter: arg1:arg2:... }}\n</code></pre>\n\n<p>From Javascript, you call it as</p>\n\n<pre><code>$filter('yourFilter')(arg1, arg2, ...)\n</code></pre>\n\n<p>There is actually an example hidden in the <a href=\"http://docs.angularjs.org/api/ng.filter%3aorderBy\">orderBy</a> filter docs.</p>\n\n<hr>\n\n<p><strong>Example:</strong></p>\n\n<p>Let's say  you make a filter that can replace things with regular expressions:</p>\n\n<pre><code>myApp.filter(\"regexReplace\", function() { // register new filter\n\n  return function(input, searchRegex, replaceRegex) { // filter arguments\n\n    return input.replace(RegExp(searchRegex), replaceRegex); // implementation\n\n  };\n});\n</code></pre>\n\n<p>Invocation in a template to censor out all digits:</p>\n\n<pre><code>&lt;p&gt;{{ myText | regexReplace: '[0-9]':'X' }}&lt;/p&gt;\n</code></pre>\n    "},{"t":"Showing Spinner GIF during $http request in angular","l":"http://stackoverflow.com/questions/15033195/showing-spinner-gif-during-http-request-in-angular","q":"\n\n<p>I am using the <code>$http</code> service of angular to make an ajax request. </p>\n\n<p>How to show a loader gif during the ajax request? </p>\n\n<p>I don't see any <code>ajaxstartevent</code> or similar event in documentation.</p>\n    ","a":"\n<p><strong>Here are the <s>current</s> past AngularJS incantations:</strong></p>\n\n<pre><code>angular.module('SharedServices', [])\n    .config(function ($httpProvider) {\n        $httpProvider.responseInterceptors.push('myHttpInterceptor');\n        var spinnerFunction = function (data, headersGetter) {\n            // todo start the spinner here\n            //alert('start spinner');\n            $('#mydiv').show();\n            return data;\n        };\n        $httpProvider.defaults.transformRequest.push(spinnerFunction);\n    })\n// register the interceptor as a service, intercepts ALL angular ajax http calls\n    .factory('myHttpInterceptor', function ($q, $window) {\n        return function (promise) {\n            return promise.then(function (response) {\n                // do something on success\n                // todo hide the spinner\n                //alert('stop spinner');\n                $('#mydiv').hide();\n                return response;\n\n            }, function (response) {\n                // do something on error\n                // todo hide the spinner\n                //alert('stop spinner');\n                $('#mydiv').hide();\n                return $q.reject(response);\n            });\n        };\n    });\n\n//regular angular initialization continued below....\nangular.module('myApp', [ 'myApp.directives', 'SharedServices']).\n//.......\n</code></pre>\n\n<p><strong>Here is the rest of it (HTML / CSS)....using</strong></p>\n\n<pre><code>$('#mydiv').show(); \n$('#mydiv').hide(); \n</code></pre>\n\n<p><strong>to toggle it.  NOTE: the above is used in the angular module at beginning of post</strong></p>\n\n<pre><code>#mydiv {  \n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n    z-index:1000;\n    background-color:grey;\n    opacity: .8;\n }\n\n.ajax-loader {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -32px; /* -1 * image width / 2 */\n    margin-top: -32px;  /* -1 * image height / 2 */\n    display: block;     \n}\n\n&lt;div id=\"mydiv\"&gt;\n    &lt;img src=\"lib/jQuery/images/ajax-loader.gif\" class=\"ajax-loader\"/&gt;\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"What is the lifecycle of an AngularJS Controller?","l":"http://stackoverflow.com/questions/16094940/what-is-the-lifecycle-of-an-angularjs-controller","q":"\n\n<p>Can someone please clarify what the lifecycle of an AngularJS controller is?</p>\n\n<ul>\n<li>Is a controller a singleton, or created / destroyed on demand?</li>\n<li>If the latter, what triggers the creation / destruction of the controller?</li>\n</ul>\n\n<p>Consider the below example:</p>\n\n<pre><code>var demoApp = angular.module('demo')\n  .config(function($routeProvider, $locationProvider) {\n    $routeProvider\n      .when('/home', {templateUrl: '/home.html', controller: 'HomeCtrl'})\n      .when('/users',{templateUrl: '/users.html', controller: 'UsersCtrl'})\n      .when('/users/:userId', {templateUrl: '/userEditor.html', controller: 'UserEditorCtrl'});\n  });\n\ndemoApp.controller('UserEditorCtrl', function($scope, $routeParams, UserResource) {\n  $scope.user = UserResource.get({id: $routeParams.userId});\n});\n</code></pre>\n\n<p>eg:</p>\n\n<p>In the above example, when I navigate to <code>/users/1</code>,user 1 is loaded, and set to the <code>$scope</code>.</p>\n\n<p>Then, when I navigate to <code>/users/2</code>, user 2 is loaded.  Is the same instance of <code>UserEditorCtrl</code> reused, or is a new instance created?</p>\n\n<ul>\n<li>If it's a new instance, what triggers the destruction of the first instance?</li>\n<li>If it's reused, how does this work?  (ie., the method to load the data appears to run on creation of the controller)</li>\n</ul>\n    ","a":"\n<p>Well, actually the question is what is the life cycle for a <code>ngView</code> controller. </p>\n\n<p>Controllers are not singletons. Anyone can create a new controller and they are never auto-destroyed. The fact is that it's generally bound to the life cycle of its underlying scope. The controller is not automatically destroyed whenever its scope is destroyed. However, after destroying an underlying scope, its controller is useless (at least, by design, it should be).</p>\n\n\n\n<p>Answering your specific question, a <code>ngView</code> directive (as well for <code>ngController</code> directive) will always <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/directive/ngView.js#L201-L206\">create a new controller and a new scope</a> every time a navigation happens. And the <a href=\"https://github.com/angular/angular.js/blob/65f5e856a161e7c91b9ebde1360242dc704d0510/src/ngRoute/directive/ngView.js#L179\">last scope is going to be destroyed</a> as well.</p>\n\n<p>The life cycle \"events\" are quite simple. Your <strong>\"creation event\"</strong> is the construction of your controller itself. Just run your code. To know when it gets useless (<strong>\"destruction event\"</strong>), listen to scope <code>$destroy</code> event: </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.$on('$destroy', function iVeBeenDismissed() {\n  // say goodbye to your controller here\n  // release resources, cancel request...\n})\n</code></pre>\n\n<p>For <code>ngView</code> specifically, you are able to know when the content gets loaded through the scope event <code>$viewContentLoaded</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.$on('$viewContentLoaded', function readyToTrick() {\n  // say hello to your new content here\n  // BUT NEVER TOUCHES THE DOM FROM A CONTROLLER\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/ZddQ5W?p=preview\">Here is a Plunker</a> with a concept proof (open your console window).</p>\n    "},{"t":"What does the ng stand for in Angular.js directives","l":"http://stackoverflow.com/questions/14669322/what-does-the-ng-stand-for-in-angular-js-directives","q":"\n\n<p>Angular.js uses several directives prefixed with <code>ng</code> like below:</p>\n\n<p><code>ng</code> (base directive)</p>\n\n<pre><code>ng-switch\nng-repeat\nng-view\n</code></pre>\n\n<p>I was wondering if anyone knew what <code>ng</code> stood for because I couldn't find it in the docs. Is it an acronym for something?</p>\n    ","a":"\n<p>The prefix <code>ng</code> stands for \"Angular;\" all of the built-in directives that ship with Angular use that prefix. Similarly, it is recommended that you <em>do not</em> use the <code>ng</code> prefix on your <em>own</em> directives in order to avoid possible name collisions in future versions of Angular.</p>\n\n<p>From <a href=\"http://docs.angularjs.org/misc/faq\">the FAQ</a>:</p>\n\n<blockquote>\n  <p><strong>Why is this project called \"AngularJS\"? Why is the namespace called \"ng\"?</strong></p>\n  \n  <p>Because HTML has Angular brackets and \"ng\" sounds like \"Angular\".</p>\n</blockquote>\n    "},{"t":"Angular.js Backbone.js or which has better performance","l":"http://stackoverflow.com/questions/11458436/angular-js-backbone-js-or-which-has-better-performance","q":"\n\n<p>I am a web developer and I'm starting to develop a web application on a large scale, but I'm not sure what framework to use. I was thinking of Angular.js, but I also considered Backbone.js. For you, what would be the best framework? or at least have a comparison between the two\nto see the performance.</p>\n    ","a":"\n<p>Anybody here claiming that one solution is faster or slower than other either doesn't know much about any of these libraries or frameworks (or perf testing in general) or is a liar.</p>\n\n<p>Performance is a very tricky characteristic to measure because of so many variables that affect it. Just to name few:</p>\n\n<ul>\n<li>quality of the test/benchmark code</li>\n<li>quality of the library/framework code</li>\n<li>type of application</li>\n<li>quality of the application code</li>\n<li>browser used</li>\n<li>client hw</li>\n<li>other processes running at the same time on the client hw</li>\n<li>quality and speed of the internet connection</li>\n<li>server load and server performance</li>\n<li>and the list goes on and on...</li>\n</ul>\n\n<p>but more importantly, what exactly do you mean by performance? performance is a very broad term that covers too many things, including:</p>\n\n<ul>\n<li>time it takes to bootstrap the app</li>\n<li>time it takes to respond to a user action</li>\n<li>resource utilization (cpu/memory/network)</li>\n<li>performance of dom manipulation done by the library/framework/app code</li>\n<li>garbage collector friendliness</li>\n<li>and again the list goes on and on...</li>\n</ul>\n\n<p>The best way to answer your question is to create an application that is well representative of the application <em>you are intending to build</em> and implement it with the competing libraries/frameworks. Then write a quality benchark that will compare them head to head in a stable environment.</p>\n\n<p>This is obviously a very laborious task and only someone with a lot at stake would undertake it.</p>\n\n<p>There is however a different solution to this problem: understand the framework/library you are using and specifically:</p>\n\n<ul>\n<li>learn the core flows and algorithms that the framework/library internally uses. while you typically shouldn't care, when you get into a perf problems, understanding how your application executes, will enable you to identify and fix perf problems</li>\n<li>check if performance is something that the library/framework writers have expertise in</li>\n<li>check if the framework/library helps you to identify performance problems and fix them</li>\n</ul>\n\n<p>As for the actual comparison between Backbone and AngularJS, you are comparing two very different solutions.</p>\n\n<p>Backbone doesn't do any dom manipulation for you, so the speed of your app will mostly depend on how well can you do dom manipulation (is this your expertise?).</p>\n\n<p>AngularJS does most of the dom manipulation for you and we have a ton of expertise in this area, so unless you are really good, you'll have a hard time matching us.</p>\n\n<p>Secondly, backbone's model mutation observation is based on events, model wrappers and use of artificial getters and setters. Not only that this can be very inefficient due to lack of event coalescence (there might be a workaround for this in latest backbone versions), but the use of artificial getters and setters also interferes with the JIT compiler in your browser.</p>\n\n<p>Misko wrote up a <a href=\"http://stackoverflow.com/questions/9682092/databinding-in-angularjs/9693933#9693933\">long post</a> on how Angular does its magical model mutation observation. So I'm not going to repeat it here. But basically the performance of an AngularJS app is directly related to the number and complexity of bindings used in the current view of the application. With this in mind, you can easily predict Angular's performance. Even better is that with tools like AngularJS Batarang extension for Chrome, we allow you to easily instrument your application and understand which bindings on the page are slow and this allows you to focus on fixing the parts of your code that really matter.</p>\n\n<p>I'm going to conclude by saying that no library or framework will be the best solution for all of your use cases, so you should learn more about the tools you build your apps with and when it really matters, decide which one is the best for a given use case. My bet is that for most of the apps you are going to write, performance is not going to noticeably change if you switch framework or library. So I would put more weight on other factors like productivity, easy of use, testability, community and documentation before I would worry about performance.</p>\n\n<p>And the very last thing: benchmarks are often misleading, but check out these ones and take them with a grain of salt.</p>\n\n<ul>\n<li><code>Backbone + Ember</code>: <a href=\"http://jsfiddle.net/jashkenas/CGSd5/\">http://jsfiddle.net/jashkenas/CGSd5/</a></li>\n<li><code>AngularJS</code>: <a href=\"http://jsfiddle.net/mhevery/vYknU/23/\">http://jsfiddle.net/mhevery/vYknU/23/</a></li>\n</ul>\n    "},{"t":"ng-repeat finish event","l":"http://stackoverflow.com/questions/13471129/ng-repeat-finish-event","q":"\n\n<p>I want to call some jQuery function targeting div with table. That table is populated with <code>ng-repeat</code>.  </p>\n\n<p>When I call it on </p>\n\n<pre><code>$(document).ready()\n</code></pre>\n\n<p>I have no result.  </p>\n\n<p>Also </p>\n\n<pre><code>$scope.$on('$viewContentLoaded', myFunc);\n</code></pre>\n\n<p>doesn't help.</p>\n\n<p>Is there any way to execute function right after ng-repeat population completes? I've read an advice about using custom <code>directive</code>, but I have no clue how to use it with ng-repeat and my div...</p>\n    ","a":"\n<p>Indeed, you should use directives, and there no event tied to the end of a ng-Repeat loop (as each element is constructed individually, and has it's own event). But a) using directives might be all you need and b) there are a few ng-Repeat specific properties you can use to make your \"on ngRepeat finished\" event.</p>\n\n<p>Specifically, if all you want is to style/add events to the whole of the table, you can do so using in a directive that encompasses all the ngRepeat elements. On the other hand, if you want to address each element specifically, you can use a directive within the ngRepeat, and it will act on each element, after it is created.</p>\n\n<p>Then, there are the $index, $first, $middle and $last properties you can use to trigger events. So for this HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"Ctrl\" my-main-directive&gt;\n  &lt;div ng-repeat=\"thing in things\" my-repeat-directive&gt;\n    thing {{thing}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>You can use directives like so:</p>\n\n<pre><code>angular.module('myApp', [])\n.directive('myRepeatDirective', function() {\n  return function(scope, element, attrs) {\n    angular.element(element).css('color','blue');\n    if (scope.$last){\n      window.alert(\"im the last!\");\n    }\n  };\n})\n.directive('myMainDirective', function() {\n  return function(scope, element, attrs) {\n    angular.element(element).css('border','5px solid red');\n  };\n});\n</code></pre>\n\n<p>See it in action in this <a href=\"http://plnkr.co/edit/or5mys?p=preview\">Plunker</a>. Hope it helps!</p>\n    "},{"t":"What is the advantage of using Restangular over ngResource?","l":"http://stackoverflow.com/questions/16554580/what-is-the-advantage-of-using-restangular-over-ngresource","q":"\n\n<p><code>ngResource</code> already <em>seems really simple</em> to implement things with...</p>\n\n<p>What are the Advantages / Disadvantages of using <a href=\"https://github.com/mgonto/restangular\"><strong>Restangular</strong></a> over <a href=\"http://docs.angularjs.org/api/ngResource.%24resource\"><strong>ngResource</strong></a>?</p>\n\n<p>1.1.3 <code>$resource</code> will return promises and can be implimented using <a href=\"http://stackoverflow.com/questions/16429832/callback-after-async-foreach-angularjs/16447884#16447884\"><strong>latest PR commit</strong></a>.  Will future support be offered to <code>$resource</code> to support additional verbs that Restangular does? And if that happens Restangular seems like it will disappear and become irrelivant.</p>\n    ","a":"\n<p>I'm the creator of Restangular.</p>\n\n<p>I've created a section on the README with the differences against $resource. You can check them out here <a href=\"https://github.com/mgonto/restangular/blob/master/README.md#differences-with-resource\">https://github.com/mgonto/restangular/blob/master/README.md#differences-with-resource</a></p>\n\n<p>Anyway, as a sum up, besides the additional features and the promise based approach, the idea is that Restangular can also handle all of your URLs, so that you don't have to know anything about them.</p>\n\n<p>Suppose that you have something like this for cars : /users/123/cars/456</p>\n\n<p>In $resource, You'd have to construct that URL manually and you'd also have to construct the $resource object for this manually. Restangular helps you in this by \"remembering\" the URLs.</p>\n\n<p>So if you do in some place</p>\n\n<pre><code>Restangular.one(\"users\", 123).get().then(function(user) {\n  $scope.user = user;\n});\n\n// Some other code\n\n//Automatically does the request to /users/123/cars as it remembers in which object you're asking it.\n$scope.user.getList('cars')\n</code></pre>\n\n<p>Hope this helps!</p>\n    "},{"t":"How to add custom validation to an Angular js form?","l":"http://stackoverflow.com/questions/12581439/how-to-add-custom-validation-to-an-angular-js-form","q":"\n\n<p>I have a form with input fields and validation setup by adding the <code>required</code> attributes and such. But for some fields I need to do some extra validation. How would I \"tap in\" to the validation that <code>FormController</code> controls? </p>\n\n<p>Custom validation could be something like \"if these 3 fields are filled in, then this field is required and needs to be formatted in a particular way\".</p>\n\n<p>There's a method in <code>FormController.$setValidity</code> but that doesn't look like a public API so I rather not use it. Creating a custom directive and using <code>NgModelController</code> looks like another option, but would basically require me to create a directive for each custom validation rule, which I do not want.</p>\n\n<p>Actually, marking a field from the controller as invalid (while also keeping <code>FormController</code> in sync) might be the thing that I need in the simplest scenario to get the job done, but I don't know how to do that.</p>\n    ","a":"\n<p><strong>Edit: added information about ngMessages (&gt;= 1.3.X) below.</strong></p>\n\n<h2>Standard form validation messages (1.0.X and above)</h2>\n\n<p>Since this is one of the top results if you Google \"Angular Form Validation\", currently, I want to add another answer to this for anyone coming in from there.</p>\n\n<blockquote>\n  <p>There's a method in FormController.$setValidity but that doesn't look like a public API so I rather not use it. </p>\n</blockquote>\n\n<p>It's \"public\", no worries. Use it. That's what it's for. If it weren't meant to be used, the Angular devs would have privatized it in a closure.</p>\n\n<p>To do custom validation, if you don't want to use Angular-UI as the other answer suggested, you can simply roll your own validation directive.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.directive('blacklist', function (){ \n   return {\n      require: 'ngModel',\n      link: function(scope, elem, attr, ngModel) {\n          var blacklist = attr.blacklist.split(',');\n\n          //For DOM -&gt; model validation\n          ngModel.$parsers.unshift(function(value) {\n             var valid = blacklist.indexOf(value) === -1;\n             ngModel.$setValidity('blacklist', valid);\n             return valid ? value : undefined;\n          });\n\n          //For model -&gt; DOM validation\n          ngModel.$formatters.unshift(function(value) {\n             ngModel.$setValidity('blacklist', blacklist.indexOf(value) === -1);\n             return value;\n          });\n      }\n   };\n});\n</code></pre>\n\n<p>And here's some example usage:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form name=\"myForm\" ng-submit=\"doSomething()\"&gt;\n   &lt;input type=\"text\" name=\"fruitName\" ng-model=\"data.fruitName\" blacklist=\"coconuts,bananas,pears\" required/&gt;\n   &lt;span ng-show=\"myForm.fruitName.$error.blacklist\"&gt;\n      The phrase \"{{data.fruitName}}\" is blacklisted&lt;/span&gt;\n   &lt;span ng-show=\"myForm.fruitName.$error.required\"&gt;required&lt;/span&gt;\n   &lt;button type=\"submit\" ng-disabled=\"myForm.$invalid\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>Note: in 1.2.X it's probably preferrable to substitute <code>ng-if</code> for <code>ng-show</code> above</strong></p>\n\n<p>Here is an obligatory <a href=\"http://plnkr.co/edit/4u8FV869aD33WozdqdQ2?p=preview\">plunker link</a></p>\n\n<p>Also, I've written a few blog entries about just this subject that goes into a little more detail:</p>\n\n<p><a href=\"http://www.benlesh.com/2012/11/angular-js-form-validation.html\">Angular Form Validation</a></p>\n\n<p><a href=\"http://www.benlesh.com/2012/12/angular-js-custom-validation-via.html\">Custom Validation Directives</a></p>\n\n<h2>Edit: using ngMessages in 1.3.X</h2>\n\n<p>You can now use the ngMessages module instead of ngShow to show your error messages. It will actually work with anything, it doesn't have to be an error message, but here's the basics:</p>\n\n<ol>\n<li>Include <code>&lt;script src=\"angular-messages.js\"&gt;&lt;/script&gt;</code></li>\n<li><p>Reference <code>ngMessages</code> in your module declaration:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var app = angular.module('myApp', ['ngMessages']);\n</code></pre></li>\n<li><p>Add the appropriate markup:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form name=\"personForm\"&gt;\n  &lt;input type=\"email\" name=\"email\" ng-model=\"person.email\" required/&gt;\n\n  &lt;div ng-messages=\"personForm.email.$error\"&gt;\n    &lt;div ng-message=\"required\"&gt;required&lt;/div&gt;\n    &lt;div ng-message=\"email\"&gt;invalid email&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre></li>\n</ol>\n\n<p>In the above markup, <code>ng-message=\"personForm.email.$error\"</code> basically specifies a context for the <code>ng-message</code> child directives. Then  <code>ng-message=\"required\"</code> and <code>ng-message=\"email\"</code> specify properties on that context to watch. <strong>Most importantly, they also specify an order to check them in</strong>. The first one it finds in the list that is \"truthy\" wins, and it will show that message and none of the others.</p>\n\n<p>And a <a href=\"http://plnkr.co/edit/ucbkRcZxaSvWSLBC5v2z?p=preview\">plunker for the ngMessages example</a></p>\n    "},{"t":"AngularJS routing without the hash '#'","l":"http://stackoverflow.com/questions/14319967/angularjs-routing-without-the-hash","q":"\n\n<p>I'm learning AngularJS and there's one thing that really annoys me.</p>\n\n<p>I use <code>$routeProvider</code> to declare routing rules for my application:</p>\n\n<pre><code>$routeProvider.when('/test', {\n  controller: TestCtrl,\n  templateUrl: 'views/test.html'\n})\n.otherwise({ redirectTo: '/test' });\n</code></pre>\n\n<p>but when I navigate to my app in browser I see <code>app/#/test</code> instead of <code>app/test</code>.</p>\n\n<p>So my question is why AngularJS adds this hash <code>#</code> to urls? Is there any possibility to avoid it?</p>\n    ","a":"\n<p>In fact you need the # (hashtag) for non HTML5 browsers.</p>\n\n<p>Otherwise they will just do an HTTP call to the server at the mentioned href.\nThe # is an old browser shortcircuit which doesn't fire the request, which allows many js frameworks to build their own clientside rerouting on top of that.</p>\n\n<p>You can use <code>$locationProvider.html5Mode(true)</code> to tell angular to use HTML5 strategy if available.</p>\n\n<p>Here the list of browser that support HTML5 strategy: <a href=\"http://caniuse.com/#feat=history\">http://caniuse.com/#feat=history</a></p>\n    "},{"t":"Is Angular.js Just for Single Page Applications (SPA)","l":"http://stackoverflow.com/questions/15231251/is-angular-js-just-for-single-page-applications-spa","q":"\n\n<p>We are looking at options to build the front end of an application we are creating and are trying to evaluate a tool that will work for us and give us the best platform to move forwards.</p>\n\n<p>This is a Node.js project Our initial plan was to use Express and go down that route but we decided that before we kick off this stage it might be best to review what is out there.  Our application has several areas which we don't believe fit the single page model in that they are related from an application perspective but not from a view one.</p>\n\n<p>We have seen a few of the frameworks we could use to build out the client like Backbone, Meteor etc and also Angular.js.</p>\n\n<p>This may be a fairly obvious question but we cannot seem to decipher if angular.js is purely for single page applications or it can be used for multi page applications like Express for instance.</p>\n\n<p><strong>UPDATE 17 July 2013</strong>\nJust to keep people in the loop, i will be updating this question as we go through the process.  We are going to build everything together for now, and we will see how well that performs.  We have reached out to a few people who are more qualified with Angular then us and posed the question regarding splitting up larger apps that share context but may be too large working on a single page.</p>\n\n<p>The consensus was that we could serve multiple static pages and create Angular apps that work with only those pages, effectively creating a collection of SPA and linking those apps together using standard linking.  Now our use case is very specific in our solution has several apps, and as i said we are going to try the single code base first and optimise from there. </p>\n    ","a":"\n<p>Not at all. You can use Angular to build a variety of apps. Client-side routing is just a small piece of that.</p>\n\n<p>You have a large list of features that will benefit you outside of client-side routing:</p>\n\n<ul>\n<li>two-way binding</li>\n<li>templating</li>\n<li>currency formatting</li>\n<li>pluralization</li>\n<li>reusable controls</li>\n<li>RESTful api handling</li>\n<li>AJAX handling</li>\n<li>modularization</li>\n<li>dependency injection</li>\n</ul>\n\n<p>It's crazy to think that all of that \"could only be used in a single page app\".  Of course not.. that's like saying \"Jquery is only for projects with animations\".</p>\n\n<p>If it fits your project, use it.</p>\n    "},{"t":"Angular IE Caching issue for $http","l":"http://stackoverflow.com/questions/16098430/angular-ie-caching-issue-for-http","q":"\n\n<p>All the ajax calls that are sent from the IE are cached by Angular and I get a <code>304 response</code> for all the subsequent calls . Though the request is the same, the response is not gonna be the same in my case. I wanna disable this cache. I tried adding the <code>cache attribute</code> to $http.get but still it didnt help. How can this issue be resolved?</p>\n    ","a":"\n<p>You can either append a unique querystring (I believe this is what jQuery does with the cache: false option) to the request.</p>\n\n<pre><code>$http({\n    url: '...',\n    params: { 'foobar': new Date().getTime() }\n})\n</code></pre>\n\n<p>A perhaps better solution is if you have access to the server, then you can make sure that necessary headers are set to prevent caching. If you're using <code>ASP.NET MVC</code> <a href=\"http://stackoverflow.com/a/10011896/1378453\">this answer</a> might help.</p>\n    "},{"t":"When to use transclude 'true' and transclude 'element'?","l":"http://stackoverflow.com/questions/18449743/when-to-use-transclude-true-and-transclude-element","q":"\n\n<p>When I should use <code>transclude: 'true'</code> and when i should use <code>transclude: 'element'</code> ?\nI cant find anything about <code>transclude: 'element'</code> in angular docs, they are pretty confusing.</p>\n\n<p>I would be happy if someone can tell about it in simple language.\nWhat is the benefit of each option-true or element?\nWhat really is the difference between them?</p>\n\n<p>This is what I have found :</p>\n\n<blockquote>\n<pre><code>transclude: true\n</code></pre>\n  \n  <p>Inside a compile function, you can manipulate the DOM with the help of transclude linking function or you can insert the transcluded DOM into the template using ngTransclude directive on any HTML tag. </p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n<pre><code>transclude: ‘element’\n</code></pre>\n  \n  <p>This transcludes the entire element and a transclude linking function is introduced in the compile function. You can not have access to scope here because the scope is not yet created. Compile function creates a link function for the directive which has access to scope and transcludeFn lets you touch the cloned element (which was transcluded) for DOM manipulation or make use of data bound to scope in it. For your information, this is used in ng-repeat and ng-switch.</p>\n</blockquote>\n    ","a":"\n<p>From <a href=\"http://docs.angularjs.org/guide/directive\">AngularJS Documentation on Directives</a>:</p>\n\n<blockquote>\n  <p><code>transclude</code> - compile the content of the element and make it available to the directive. Typically used with ngTransclude. The advantage of transclusion is that the linking function receives a transclusion function which is pre-bound to the correct scope. In a typical setup the widget creates an isolate scope, but the transclusion is not a child, but a sibling of the isolate scope. This makes it possible for the widget to have private state, and the transclusion to be bound to the parent (pre-isolate) scope.</p>\n  \n  <blockquote>\n    <p><code>true</code> - transclude the content of the directive.</p>\n    \n    <p><code>'element'</code> - transclude the whole element including any directives defined at lower priority.</p>\n  </blockquote>\n</blockquote>\n\n<h2>transclude: true</h2>\n\n<p>So let's say you have a directive called <code>my-transclude-true</code> declared with <code>transclude: true</code> that looks like this:</p>\n\n<pre><code>&lt;div&gt;\n  &lt;my-transclude-true&gt;\n    &lt;span&gt;{{ something }}&lt;/span&gt;\n    {{ otherThing }}\n  &lt;/my-transclude-true&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>After compiling and before linking this becomes:</p>\n\n<pre><code>&lt;div&gt;\n  &lt;my-transclude-true&gt;\n    &lt;!-- transcluded --&gt;\n  &lt;/my-transclude-true&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The <strong>content</strong> (children) of <code>my-transclude-true</code> which is <code>&lt;span&gt;{{ something }}&lt;/span&gt; {{...</code>, is transcluded and available to the directive.</p>\n\n<h2>transclude: 'element'</h2>\n\n<p>If you have a directive called <code>my-transclude-element</code> declared with <code>transclude: 'element'</code> that looks like this:</p>\n\n<pre><code>&lt;div&gt;\n  &lt;my-transclude-element&gt;\n    &lt;span&gt;{{ something }}&lt;/span&gt;\n    {{ otherThing }}\n  &lt;/my-transclude-element&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>After compiling and before linking this becomes:</p>\n\n<pre><code>&lt;div&gt;\n   &lt;!-- transcluded --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Here, the <strong>whole element including its children</strong> are transcluded and made available to the directive.</p>\n\n<h2>What happens after linking?</h2>\n\n<p>That's up to your directive to do what it needs to do with the transclude function. <code>ngRepeat</code> uses <code>transclude: 'element'</code> so that it can repeat the whole element and its children when the scope changes. However, if you only need to replace the tag and want to retain it's contents, you can use <code>transclude: true</code> with the <code>ngTransclude</code> directive which does this for you.</p>\n    "},{"t":"AngularJS - losing scope when using ng-include","l":"http://stackoverflow.com/questions/11412410/angularjs-losing-scope-when-using-ng-include","q":"\n\n<p>I have this module routes:</p>\n\n<pre><code>var mainModule = angular.module('lpConnect', []).\n    config(['$routeProvider', function ($routeProvider) {\n    $routeProvider.\n        when('/home', {template:'views/home.html', controller:HomeCtrl}).\n        when('/admin', {template:'views/admin.html', controller:AdminCtrl}).\n        otherwise({redirectTo:'/connect'});\n}]);\n</code></pre>\n\n<p>Home html:</p>\n\n<pre><code>&lt;div ng-include src=\"views.partial1\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>partial1 html:</p>\n\n<pre><code>&lt;form ng-submit=\"addLine()\"&gt;\n    &lt;input type=\"text\" ng-model=\"lineText\" size=\"30\" placeholder=\"Type your message here\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>HomeCtrl:</p>\n\n<pre><code>function HomeCtrl($scope, $location, $window, $http, Common) {\n    ...\n    $scope.views = {\n        partial1:\"views/partial1.html\"\n    };\n\n    $scope.addLine = function () {\n        $scope.chat.addLine($scope.lineText);\n        $scope.lines.push({text:$scope.lineText});\n        $scope.lineText = \"\";\n    };\n...\n}\n</code></pre>\n\n<p>in the addLine function $scope.lineText is undefined, this can be resolved by adding  <strong>ng-controller=\"HomeCtrl\"</strong> to partial1.html , however it causes the controller to be called twice, what am I missing here?</p>\n    ","a":"\n<p>This is because of ng-include that create a new child scope, so $scope.lineText isn't changed. I think that <code>this</code> refer to the current scope, so <code>this.lineText</code> should be set.</p>\n    "},{"t":"Can an AngularJS controller inherit from another controller in the same module?","l":"http://stackoverflow.com/questions/18461263/can-an-angularjs-controller-inherit-from-another-controller-in-the-same-module","q":"\n\n<p>Within a module, a controller can inherit properties from an outside controller:</p>\n\n<pre><code>var app = angular.module('angularjs-starter', []);\n\nvar ParentCtrl = function ($scope, $location) {\n};\n\napp.controller('ChildCtrl', function($scope, $injector) {\n  $injector.invoke(ParentCtrl, this, {$scope: $scope});\n});\n</code></pre>\n\n<p>Example via: <a href=\"http://blog.omkarpatil.com/2013/02/controller-inheritance-in-angularjs.html\">http://blog.omkarpatil.com/2013/02/controller-inheritance-in-angularjs.html</a></p>\n\n<p>Can also a controller inside a module inherit from a sibling?</p>\n\n<pre><code>var app = angular.module('angularjs-starter', []);\n\napp.controller('ParentCtrl ', function($scope) {\n  //I'm the sibling, but want to act as parent\n});\n\napp.controller('ChildCtrl', function($scope, $injector) {\n  $injector.invoke(ParentCtrl, this, {$scope: $scope}); //This does not work\n});\n</code></pre>\n\n<p>The second code does not work since <code>$injector.invoke</code> requires a function as first parameter and does not find the reference to <code>ParentCtrl</code>.</p>\n    ","a":"\n<p>Yes, it can but you have to use the <code>$controller</code> service to instantiate the controller instead:-</p>\n\n<pre><code>var app = angular.module('angularjs-starter', []);\n\napp.controller('ParentCtrl ', function($scope) {\n  // I'm the sibling, but want to act as parent\n});\n\napp.controller('ChildCtrl', function($scope, $controller) {\n  $controller('ParentCtrl', {$scope: $scope}); //This works\n});\n</code></pre>\n    "},{"t":"What is the difference between ui-bootstrap-tpls.min.js and ui-bootstrap.min.js","l":"http://stackoverflow.com/questions/19820625/what-is-the-difference-between-ui-bootstrap-tpls-min-js-and-ui-bootstrap-min-js","q":"\n\n<p>At the <a href=\"http://cdnjs.com/libraries/angular-ui-bootstrap/\">Angular-UI-Bootstrap page</a> on cdnjs, is says:</p>\n\n<p>Native AngularJS (Angular) directives for Twitter's Bootstrap. Small footprint (5kB gzipped!), no 3rd party JS dependencies (jQuery, bootstrap JS) required!</p>\n\n<p>... and has options for </p>\n\n<pre><code>//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap-tpls.min.js\n</code></pre>\n\n<p>and</p>\n\n<pre><code>//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap.min.js\n</code></pre>\n\n<p>Diff'ing these shows a subtle difference, and I can't seem to find any documentation on it...</p>\n\n<p><strong>Edit</strong>:  </p>\n\n<blockquote>\n  <p>Long story short use tpls unless you are going to create customized\n  templates.</p>\n</blockquote>\n\n<p><strong>Edit</strong>:  </p>\n\n<blockquote>\n  <p>It is documented here:\n  github.com/angular-ui/bootstrap/tree/gh-pages#build-files (linked from\n  the home page as well). In short the -tpls version has default BS\n  templates bundled. In any case you should only include one of the\n  listed files. - Thanks pkozlowski.opensource</p>\n</blockquote>\n    ","a":"\n<p>So,  <strong>ui-bootstrap-tpls.min.js == (ui-bootstrap.min.js + html templates)</strong> required by the js.  If you only included ui-bootstrap.min.js, you will also need to provide your own html templates.</p>\n\n<p>Otherwise you will see something like:</p>\n\n<pre><code>GET http://localhost:8989/hello-world/template/tooltip/tooltip-popup.html 404 (Not Found) angular.js:7073\nError: [$compile:tpload] http://errors.angularjs.org/undefined/$compile/tpload?p0=template%2Ftooltip%2Ftooltip-popup.html\n    at Error (&lt;anonymous&gt;)\n    at http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:6:453\n    at http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:54:14\n    at http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:64:438\n    at A (http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:89:258)\n    at A (http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:89:258)\n    at http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:90:465\n    at g.$eval (http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:98:272)\n    at g.$digest (http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:96:142)\n    at g.$apply (http://localhost:8989/hello-world/js/vendor/angular-1.2.0-rc.3/angular.min.js:99:100) \n</code></pre>\n    "},{"t":"AngularJS How to remove an Item from scope","l":"http://stackoverflow.com/questions/14250642/angularjs-how-to-remove-an-item-from-scope","q":"\n\n<p><strong>Simple ToDo list, but with a delete button on list page for each item!</strong></p>\n\n<p><img src=\"http://i.stack.imgur.com/s0Oxd.jpg\" alt=\"enter image description here\"></p>\n\n<p><strong>1. Relevant template html:</strong></p>\n\n<pre><code>    &lt;tr ng-repeat=\"person in persons\"&gt;\n        &lt;td&gt;{{person.name}} - # {{person.id}}&lt;/td&gt;\n        &lt;td&gt;{{person.description}}&lt;/td&gt;\n        &lt;td nowrap=nowrap&gt;\n            &lt;a href=\"#!/edit\"&gt;&lt;i class=\"icon-edit\"&gt;&lt;/i&gt;&lt;/a&gt;\n            &lt;button ng-click=\"delete(person)\"&gt;&lt;i class=\"icon-minus-sign\"&gt;&lt;/i&gt;&lt;/button&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n</code></pre>\n\n<p><strong>2. Relevant controller method:</strong></p>\n\n<pre><code>$scope.delete = function (person) {\n    API.DeletePerson({ id: person.id }, function (success) {\n    **// I NEED SOME CODE HERE TO PULL THE PERSON FROM MY SCOPE**\n    });\n};\n</code></pre>\n\n<p><strong>I tried $scope.persons.pull(person)</strong></p>\n\n<p><strong>I tried $scope.persons.remove(person)</strong></p>\n\n<p>Although the db deleted successfully, I can not pull this item from scope and I do not want to make a method call to the server for data the client already has, I just want to remove this one person from scope.</p>\n\n<p>Any ideas?</p>\n\n<p><strong>Solution:</strong></p>\n\n<ol>\n<li><p>Going for the index was the correct approach in the HTML:</p>\n\n<p></p></li>\n<li><p>However, just changing the angular parameter to  (idx) was not enough, I had to create an instance of that person to send off to the server for deletion.</p>\n\n<pre><code>$scope.delete = function (idx) {\n\n    var delPerson = $scope.persons[idx];\n\n    API.DeletePerson({ id: delPerson.id }, function (success) {\n\n        $scope.persons.splice(idx, 1);\n    });\n};\n</code></pre></li>\n</ol>\n\n<p>Thanks Guys!</p>\n\n<p>Angular is GREAT and I encourage everyone who hasn't already to check it out!\n    };</p>\n    ","a":"\n<p>Your issue is not really with Angular, but with Array methods. The proper way to remove a particularly item from an array is with <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array.splice</code></a>. Also, when using ng-repeat, you have access to the special <code>$index</code> property, which is the current index of the array you passed in.</p>\n\n<p>The solution is actually pretty straightforward:</p>\n\n<p><strong>View:</strong></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a ng-click=\"delete($index)\"&gt;Delete&lt;/a&gt;\n</code></pre>\n\n<p><strong>Controller:</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.delete = function ( idx ) {\n  var person_to_delete = $scope.persons[idx];\n\n  API.DeletePerson({ id: person_to_delete.id }, function (success) {\n    $scope.persons.splice(idx, 1);\n  });\n};\n</code></pre>\n    "},{"t":"Angular HttpPromise: difference between `success`/`error` methods and `then`'s arguments","l":"http://stackoverflow.com/questions/16385278/angular-httppromise-difference-between-success-error-methods-and-thens-a","q":"\n\n<p>According to <a href=\"http://docs.angularjs.org/api/ng.%24http\">AngularJS doc</a>, calls to <code>$http</code> return the following:</p>\n\n<blockquote>\n  <p>Returns a <strong>promise</strong> object with the standard <strong>then</strong> method and two http specific methods: <strong>success</strong> and <strong>error</strong>. The <strong>then</strong> method takes two arguments a <strong>success</strong> and an <strong>error</strong> callback which will be called with a response object. The <strong>success</strong> and <strong>error</strong> methods take a single argument - a function that will be called when the request succeeds or fails respectively. The arguments passed into these functions are destructured representation of the response object passed into the then method.</p>\n</blockquote>\n\n<p>Aside from the fact that the <code>response</code> object is destructured in one case, I don't get the difference between</p>\n\n<ul>\n<li>the success/error callbacks passed to be passed as arguments of <code>promise.then</code></li>\n<li>the callbacks passed as arguments for the <code>promise.success</code>/<code>promise.error</code> methods of the promise</li>\n</ul>\n\n<p>Is there any? What's the point of these two different ways to pass seemingly identical callbacks?</p>\n    ","a":"\n<p><em>NB</em> This answer is factually incorrect; as pointed out by a comment below, <strong>success() does return the original promise.</strong>  I'll not change; and leave it to OP to edit.</p>\n\n<hr>\n\n<p>The major difference between the 2 is that <code>.then()</code> call returns a promise (resolved with a value returned from a callback) while <code>.success()</code> is more traditional way of registering callbacks and doesn't return a promise.</p>\n\n<p>Promise-based callbacks (<code>.then()</code>) make it easy to chain promises (do a call, interpret results and <em>then</em> do another call, interpret results, do yet another call etc.).</p>\n\n<p>The <code>.success()</code> method is a streamlined, convenience method when you don't need to chain call nor work with the promise API (for example, in routing).</p>\n\n<p>In short:</p>\n\n<ul>\n<li><code>.then()</code> - full power of the promise API but slightly more verbose</li>\n<li><code>.success()</code> - doesn't return a promise but offeres slightly more convienient syntax</li>\n</ul>\n    "},{"t":"What is the $$hashKey added to my JSON.stringify result","l":"http://stackoverflow.com/questions/18826320/what-is-the-hashkey-added-to-my-json-stringify-result","q":"\n\n<p>I have tried looking on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">Mozilla JSON stringify</a> page of their docs as well as here on SO and Google but found no explanation. I have used JSOn stringify many time but never come across this result</p>\n\n<p>I have an array of JSON objects </p>\n\n<pre><code>[\n    {\n        \"param_2\": \"Description 1\",\n        \"param_0\": \"Name 1\",\n        \"param_1\": \"VERSION 1\"\n    },\n    {\n        \"param_2\": \"Description 2\",\n        \"param_0\": \"Name 2\",\n        \"param_1\": \"VERSION 2\"\n    },\n    {\n        \"param_2\": \"Description 3\",\n        \"param_0\": \"Name 3\",\n        \"param_1\": \"VERSION 3\"\n    }\n]\n</code></pre>\n\n<p>attached to my <code>$scope</code> and in order to <code>POST</code> them as one paramater I used the JSON.stringify() method and I get the following:</p>\n\n<pre><code>   [\n        {\n            \"param_2\": \"Description 1\",\n            \"param_0\": \"Name 1\",\n            \"param_1\": \"VERSION 1\",\n            \"$$hashKey\": \"005\"\n        },\n        {\n            \"param_2\": \"Description 2\",\n            \"param_0\": \"Name 2\",\n            \"param_1\": \"VERSION 2\",\n            \"$$hashKey\": \"006\"\n        },\n        {\n            \"param_2\": \"Description 3\",\n            \"param_0\": \"Name 3\",\n            \"param_1\": \"VERSION 3\",\n            \"$$hashKey\": \"007\"\n        }\n    ]\n</code></pre>\n\n<p>I am just curious what exactly is the $$hashkey as I expected something more similar to the following from the stringify method:</p>\n\n<pre><code>[\n    {\n        \"1\":{\n            \"param_2\": \"Description 1\",\n            \"param_0\": \"Name 1\",\n            \"param_1\": \"VERSION 1\"\n        },\n         \"2\":{\n            \"param_2\": \"Description 2\",\n            \"param_0\": \"Name 2\",\n            \"param_1\": \"VERSION 2\"\n        },\n         \"3\":{\n            \"param_2\": \"Description 3\",\n            \"param_0\": \"Name 3\",\n            \"param_1\": \"VERSION 3\"\n        }\n    }\n]\n</code></pre>\n\n<p>I am not sure if it is a factor but I am using <code>Angularjs 1.1.5, JQuery 1.8.2 and Spring 3.0.4 and Spring security 3.0.7 on the Server side</code></p>\n\n<p>It is not causeing me any issues but I would like to know the cause and reason for the <code>$$hashkey</code></p>\n    ","a":"\n<p>Angular adds this to keep track of your changes, so it knows when it needs to update the DOM.</p>\n\n<p>If you use <code>angular.toJson(obj)</code> instead of <code>JSON.stringify(obj)</code> then Angular will strip out these internal-use values for you.</p>\n\n<p>Also, if you change your repeat expression to use the <code>track by {uniqueProperty}</code> suffix, Angular won't have to add <code>$$hashKey</code> at all. For example</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"link in navLinks track by link.href\"&gt;\n        &lt;a ng-href=\"link.href\"&gt;{{link.title}}&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Just always remember you need the \"link.\" part of the expression - I always tend to forget that.  Just <code>track by href</code> will surely not work.</p>\n    "},{"t":"File Upload using angularjs","l":"http://stackoverflow.com/questions/18571001/file-upload-using-angularjs","q":"\n\n<p>Here is my html form</p>\n\n<pre><code>&lt;form name=\"myForm\" ng-submit=\"\"&gt;\n    &lt;input ng-model='file' type=\"file\"/&gt;\n    &lt;input type=\"submit\" value='Submit'/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I want to upload an image from local machine and want to read the content of the uploaded file. All this I want to do using AngularJS.</p>\n\n<p>When I try to print the value of <code>$scope.file</code> it comes as undefined.</p>\n    ","a":"\n<p>Please note that solutions that use FormData(), such as the ones presented here in other answers, do not work correctly in older versions of Internet Explorer. The correct solution should use a backup strategy for that, such as using iframes. There are already many Angular.js modules to perform file uploading:</p>\n\n<ul>\n<li><a href=\"https://github.com/nervgh/angular-file-upload/\">https://github.com/nervgh/angular-file-upload/</a></li>\n<li><a href=\"https://github.com/leon/angular-upload\">https://github.com/leon/angular-upload</a></li>\n<li><a href=\"https://github.com/uor/angular-file\">https://github.com/uor/angular-file</a></li>\n<li><a href=\"https://github.com/danialfarid/angular-file-upload\">https://github.com/danialfarid/angular-file-upload</a></li>\n<li><a href=\"https://github.com/twilson63/ngUpload\">https://github.com/twilson63/ngUpload</a></li>\n<li><a href=\"https://github.com/uploadcare/angular-uploadcare\">https://github.com/uploadcare/angular-uploadcare</a></li>\n</ul>\n\n<p>I would advise you to choose one and use it, or have a look at its code.</p>\n    "},{"t":"Injecting service to Directive","l":"http://stackoverflow.com/questions/15569168/injecting-service-to-directive","q":"\n\n<p>I am trying to inject a service to Directive like below  </p>\n\n<pre><code> var app = angular.module('app',[]);\n app.factory('myData', function(){\n     return {\n        name : \"myName\"\n     }\n });\n app.directive('changeIt',function($compile, myData){\n    return {\n            restrict: 'C',\n            link: function (scope, element, attrs) {\n                scope.name = myData.name;\n            }\n        }\n });\n</code></pre>\n\n<p>But this is returning me error <code>Unknown provider: myDataProvider</code>. Someone please look into the code and tell me if I am doing wrong somewhere..</p>\n    ","a":"\n<p>You can do injection on Directives, and it looks just like it does everywhere else.</p>\n\n<pre><code>app.directive('changeIt', ['$compile', 'myData', function($compile, myData){\n    return {\n        restrict: 'C',\n        link: function (scope, element, attrs) {\n            scope.name = myData.name;\n        }\n    }\n }]);\n</code></pre>\n    "},{"t":"AngularJS For Loop with Numbers & Ranges","l":"http://stackoverflow.com/questions/11873570/angularjs-for-loop-with-numbers-ranges","q":"\n\n<p>Angular does provide some support for a for loop using numbers within its HTML directives:</p>\n\n<pre><code>&lt;div data-ng-repeat=\"i in [1,2,3,4,5]\"&gt;\n  do something\n&lt;/div&gt;\n</code></pre>\n\n<p>But if your scope variable includes a range that has a dynamic number then you will need to create an empty array each time.</p>\n\n<p>In the controller</p>\n\n<pre><code>var range = [];\nfor(var i=0;i&lt;total;i++) {\n  range.push(i);\n}\n$scope.range = range;\n</code></pre>\n\n<p>In the HTML</p>\n\n<pre><code>&lt;div data-ng-repeat=\"i in range\"&gt;\n  do something\n&lt;/div&gt;\n</code></pre>\n\n<p>This works, but it is unnecessary since we won't be using the range array at all within the loop. Does anyone know of setting a range or a regular for min/max value? </p>\n\n<p>Something like:</p>\n\n<pre><code>&lt;div data-ng-repeat=\"i in 1 .. 100\"&gt;\n  do something\n&lt;/div&gt;\n</code></pre>\n    ","a":"\n<p>I tweaked <a href=\"http://stackoverflow.com/a/11161353/1207991\">this answer</a> a bit and came up with <a href=\"http://jsfiddle.net/gwfPh/\">this fiddle</a>.</p>\n\n<p>Filter defined as:</p>\n\n<pre><code>var myApp = angular.module('myApp', []);\nmyApp.filter('range', function() {\n  return function(input, total) {\n    total = parseInt(total);\n    for (var i=0; i&lt;total; i++)\n      input.push(i);\n    return input;\n  };\n});\n</code></pre>\n\n<p>With the repeat used like this:</p>\n\n<pre><code>&lt;div ng-repeat=\"n in [] | range:100\"&gt;\n  do something\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"passing 2 $index values within nested ng-repeat","l":"http://stackoverflow.com/questions/15256600/passing-2-index-values-within-nested-ng-repeat","q":"\n\n<p>So I have an ng-click nested within another ng-click in order to build a nav menu. On each <code>&lt;li&gt;</code> on the inner ng-repeat loop I set an ng-click which calls the relevant controller for that menu item by passing in the $index to let the app know which one we need. However I need to also pass in the $index from the outer ng-repeat so the app knows which section we are in as well as which tutorial.</p>\n\n<pre><code>&lt;ul ng-repeat=\"section in sections\"&gt;\n    &lt;li  class=\"section_title {{section.active}}\" &gt;\n        {{section.name}}\n    &lt;/li&gt;\n    &lt;ul&gt;\n        &lt;li class=\"tutorial_title {{tutorial.active}}\" ng-click=\"loadFromMenu($index)\" ng-repeat=\"tutorial in section.tutorials\"&gt;\n            {{tutorial.name}}\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>here's a Plunker <a href=\"http://plnkr.co/edit/bJUhI9oGEQIql9tahIJN?p=preview\">http://plnkr.co/edit/bJUhI9oGEQIql9tahIJN?p=preview</a></p>\n    ","a":"\n<p>Each ng-repeat creates a child scope with the passed data, and also adds an additional <code>$index</code> variable in that scope.</p>\n\n<p>So what you need to do is reach up to the parent scope, and use that <code>$index</code>.</p>\n\n<p>See <a href=\"http://plnkr.co/edit/FvVhirpoOF8TYnIVygE6?p=preview\">http://plnkr.co/edit/FvVhirpoOF8TYnIVygE6?p=preview</a></p>\n\n<pre><code>&lt;li class=\"tutorial_title {{tutorial.active}}\" ng-click=\"loadFromMenu($parent.$index)\" ng-repeat=\"tutorial in section.tutorials\"&gt;\n    {{tutorial.name}}\n&lt;/li&gt;\n</code></pre>\n    "},{"t":"$routeParams doesn't work in resolve function","l":"http://stackoverflow.com/questions/13433116/routeparams-doesnt-work-in-resolve-function","q":"\n\n<p>I'm using <a href=\"http://stackoverflow.com/questions/11972026/delaying-angularjs-route-change-until-model-loaded-to-prevent-flicker\">this</a> technique to load data. So I have created the following resolve function: </p>\n\n<pre><code>NoteController.resolve = {\n    note: function($routeParams, Note) {\n         return Note.get($routeParams.key);\n    }\n}\n</code></pre>\n\n<p>The problems is that <code>$routeParams.key</code> is <code>undefined</code> at the moment of <code>resolve</code> function execution. Is it correct/bug? How can I fix it?</p>\n    ","a":"\n<p>You need to use <code>$route.current.params.key</code> instead. The <code>$routeParams</code> is updated only <em>after</em> a route is changed. So your code should look along those lines:</p>\n\n<pre><code>NoteController.resolve = {\n    note: function($route, Note) {\n         return Note.get($route.current.params.key);\n    }\n}\n</code></pre>\n    "},{"t":"How to cache an http get service in angularjs","l":"http://stackoverflow.com/questions/14117653/how-to-cache-an-http-get-service-in-angularjs","q":"\n\n<p>I want to be able to create a custom service that fetches an http get request in the case ts data object is empty and populate the data object on success. The next time a service call is made the device will not call the http get and instead will present the data object.</p>\n\n<p>Any ideas how to do it?</p>\n    ","a":"\n<p>Angular's <a href=\"http://docs.angularjs.org/api/ng.%24http\">$http</a> has a cache built in. Just set <code>cache</code> to <strong>true</strong> in its options:</p>\n\n<pre><code>$http.get(url, { cache: true}).success(...);\n</code></pre>\n\n<p>or </p>\n\n<pre><code>$http({ cache: true, url: url, method: 'GET'}).success(...);\n</code></pre>\n\n<p>Or you can implement it yourself using <a href=\"http://docs.angularjs.org/api/ng.%24cacheFactory\">$cacheFactory</a> (especially handly when using $resource):</p>\n\n<pre><code>var cache = $cacheFactory('myCache');\n\nvar data = cache.get(someKey);\n\nif (!data) {\n   $http.get(url).success(function(result) {\n      data = result;\n      cache.put(someKey, data);\n   });\n</code></pre>\n    "},{"t":"AngularJS $resource RESTful example","l":"http://stackoverflow.com/questions/13269882/angularjs-resource-restful-example","q":"\n\n<p>I would like to use $resource to call my RESTful web service, (which I am still working on) but I would like to find out if I got my AngularJS script correct first.</p>\n\n<p>The todo DTO has: <code>{id, order, content, done}</code></p>\n\n<p><code>:cmd</code> is so I can call <code>api/1/todo/reset</code> to clear the todo table in database.</p>\n\n<p>Here is the code with comment of my understanding:</p>\n\n<pre><code>function TodoService($resource) {\n    var src = $resource('api/1/todo/:id:cmd',\n              {id: \"@id\", cmd: \"@cmd\"}, //parameters default\n              {\n                ListTodos: { method: \"GET\", params: {} },\n                GetTodo: { method: \"GET\", params: { id: 0 } },                            \n                CreateTodo: { method: \"POST\", params: { content: \"\", order: 0, done: false } },\n                UpdateTodo: { method: \"PATCH\", params: { /*...*/ } },\n                DeleteTodo: { method: \"DELETE\", params: { id: 0 } },\n                ResetTodos: { method: \"GET\", params: { cmd: \"reset\" } },\n              });\n\n    //Usage:\n\n    //GET without ID\n    //it calls -&gt; api/1/todo\n    src.ListTodos();\n\n    //GET with ID\n    //it calls -&gt; api/1/todo/4\n    src.GetTodo({ id: 4 });\n\n    //POST with content, order, done\n    //it calls -&gt; api/1/todo\n    src.CreateTodo({ content: \"learn Javascript\", order: 1, done: false });\n\n    //UPDATE content only\n    //it calls -&gt; api/1/todo/5\n    src.UpdateTodo({ id: 5, content: \"learn AngularJS\" }); \n\n    //UPDATE done only\n    //it calls -&gt; api/1/todo/5\n    src.UpdateTodo({ id: 5, done: true });\n\n    //RESET with cmd\n    //it calls -&gt; api/1/todo/reset\n    src.ResetTodos();\n}\n</code></pre>\n\n<p>One particular thing I am not sure is the PATCH method, I don't want to update everything, can I update just one field? Am I constructing this piece of code correctly?</p>\n    ","a":"\n<p>$resource was meant to retrieve data from an endpoint, manipulate it and send it back. You've got <em>some</em> of that in there, but you're not really leveraging it for what it was made to do.</p>\n\n<p>It's fine to have custom methods on your resource, but you don't want to miss out on the cool features it comes with OOTB.</p>\n\n<p><strong>EDIT</strong>: I don't think I explained this well enough originally, but $resource does some funky stuff with returns. Todo.get() and Todo.query() both <em>return</em> the resource object, <em>and</em> pass it into the <em>callback</em> for when the get completes. It does some fancy stuff with promises behind the scenes that mean you can call $save() before the get() callback actually fires, and it will wait. It's probably best just to deal with your resource inside of a promise then() or the callback method.</p>\n\n<h3>Standard use</h3>\n\n<pre><code>var Todo = $resource('/api/1/todo/:id');\n\n//create a todo\nvar todo1 = new Todo();\ntodo1.foo = 'bar';\ntodo1.something = 123;\ntodo1.$save();\n\n//get and update a todo\nvar todo2 = Todo.get({id: 123});\ntodo2.foo += '!';\ntodo2.$save();\n\n//which is basically the same as...\nTodo.get({id: 123}, function(todo) {\n   todo.foo += '!';\n   todo.$save();\n});\n\n//get a list of todos\nTodo.query(function(todos) {\n  //do something with todos\n  angular.forEach(todos, function(todo) {\n     todo.foo += ' something';\n     todo.$save();\n  });\n});\n\n//delete a todo\nTodo.$delete({id: 123});\n</code></pre>\n\n<p>Likewise, in the case of what you posted in the OP, you could get a resource object and then call any of your custom functions on it (theoretically):</p>\n\n<pre><code>var something = src.GetTodo({id: 123});\nsomething.foo = 'hi there';\nsomething.UpdateTodo();\n</code></pre>\n\n<p>I'd experiment with the OOTB implementation before I went and invented my own however.  ANd if you find you're not using any of the default features of $resource, you should probably just be using $http on it's own.</p>\n\n<h2>Update: Angular 1.2 and Promises</h2>\n\n<p>As of Angular 1.2, resources support promises. But they didn't change the rest of the behavior.</p>\n\n<p>To leverage promises with <code>$resource</code>, you need to use the <code>$promise</code> property on the returned value.</p>\n\n<h3>Example using promises</h3>\n\n<pre><code>var Todo = $resource('/api/1/todo/:id');\n\nTodo.get({id: 123}).$promise.then(function(todo) {\n   // success\n   $scope.todos = todos;\n}, function(errResponse) {\n   // fail\n});\n\nTodo.query().$promise.then(function(todos) {\n   // success\n   $scope.todos = todos;\n}, function(errResponse) {\n   // fail\n});\n</code></pre>\n\n<p>Just keep in mind that the $promise property is a property on the same values it was returning above. So you can get weird:</p>\n\n<h3>These are equivalent</h3>\n\n<pre><code>var todo = Todo.get({id: 123}, function() {\n   $scope.todo = todo;\n});\n\nTodo.get({id: 123}, function(todo) {\n   $scope.todo = todo;\n});\n\nTodo.get({id: 123}).$promise.then(function(todo) {\n   $scope.todo = todo;\n});\n\nvar todo = Todo.get({id: 123});\ntodo.$promise.then(function() {\n   $scope.todo = todo;\n});\n</code></pre>\n    "},{"t":"AngularJS ng-include does not include view unless passed in $scope","l":"http://stackoverflow.com/questions/12521905/angularjs-ng-include-does-not-include-view-unless-passed-in-scope","q":"\n\n<p>Is it wrong to assume that <code>ngInclude</code> can take a raw path?  I keep trying to set my <code>ngInclude</code> as follows:</p>\n\n<pre><code>&lt;div ng-include src=\"views/header.html\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>This does not work but if I do something like this it does work.</p>\n\n<pre><code>// HeaderController\napp.controller('HeaderCtrl', function($scope){\n   $scope.templates = {[\n     template: { url: 'views/header.html' }\n   ]};\n\n   $scope.template = $scope.templates[0].template;\n});\n</code></pre>\n\n<p>In my index.html</p>\n\n<pre><code>&lt;div ng-controller=\"HeaderCtrl\"&gt;\n  &lt;div ng-include src=\"template.url\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Does <code>ngInclude</code> only except values off of the scope?  If so why is it this way and not a straight include of the html partial.</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>ng-include accepts an expression.\nIf you want to specify the explicit url directly in there, you have to give a string.</p>\n\n<pre><code> &lt;div ng-include src=\"'page.html'\"&gt;&lt;/div&gt;\n</code></pre>\n    "},{"t":"AngularJS - Value attribute on an input text box is ignored when there is a ng-model used?","l":"http://stackoverflow.com/questions/10610282/angularjs-value-attribute-on-an-input-text-box-is-ignored-when-there-is-a-ng-m","q":"\n\n<p>Using AngularJS if I set a simple input text box value to something like \"bob\" below.  The value does not display if the <code>ng-model</code> attribute is added.</p>\n\n<pre><code>    &lt;input type=\"text\"\n           id=\"rootFolder\"\n           ng-model=\"rootFolders\"\n           disabled=\"disabled\"\n           value=\"Bob\"\n           size=\"40\"/&gt;\n</code></pre>\n\n<p>Anyone know of a simple work around to default this input to something and keep the <code>ng-model</code>? I tried to use a <code>ng-bind</code> with the default value but that seems not to work either.</p>\n    ","a":"\n<p>That's desired behavior, you should define the model in the controller, not in the view.</p>\n\n<pre><code>&lt;div ng-controller=\"Main\"&gt;\n  &lt;input type=\"text\" ng-model=\"rootFolders\"&gt;\n&lt;/div&gt;\n\n\nfunction Main($scope) {\n  $scope.rootFolders = 'bob';\n}\n</code></pre>\n    "},{"t":"getting the ng-object selected with ng-change","l":"http://stackoverflow.com/questions/14386570/getting-the-ng-object-selected-with-ng-change","q":"\n\n<p>Given the following select element</p>\n\n<pre><code>&lt;select ng-options=\"size.code as size.name for size in sizes \" \n        ng-model=\"item.size.code\" \n        ng-change=\"update(MAGIC_THING)\"&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Is there a way to get MAGIC_THING to be equal to the currently selected size, so I have access to size.name and size.code in my controller?</p>\n\n<p>size.code affects a lot of the other parts of the app (image urls, etc), but when the ng-model of item.size.code is updated, item.size.name needs to be updated as well for the user facing stuff. I assume that the correct way to do this is capturing the change event and setting the values inside of my controller, but I'm not sure what I can pass into update to get the proper values.</p>\n\n<p>If this is completely the wrong way to go about it, i'd love to know the right way.</p>\n    ","a":"\n<p>Instead of setting the ng-model to item.size.code, how about setting it to size:</p>\n\n<pre><code>&lt;select ng-options=\"size as size.name for size in sizes\" \n   ng-model=\"item\" ng-change=\"update()\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Then in your update() method, $scope.item will be set to the currently selected item.</p>\n\n<p>And whatever code needed item.size.code, can get that property via $scope.item.code.</p>\n\n<p><a href=\"http://jsfiddle.net/mrajcok/G8S32/\">Fiddle</a>.</p>\n\n<p><strong>Update</strong> based on more info in comments:</p>\n\n<p>Use some other $scope property for your select ng-model then:</p>\n\n<pre><code>&lt;select ng-options=\"size as size.name for size in sizes\" \n   ng-model=\"selectedItem\" ng-change=\"update()\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Controller:</p>\n\n<pre><code>$scope.update = function() {\n   $scope.item.size.code = $scope.selectedItem.code\n   // use $scope.selectedItem.code and $scope.selectedItem.name here\n   // for other stuff ...\n}\n</code></pre>\n    "},{"t":"angular js unknown provider","l":"http://stackoverflow.com/questions/12339272/angular-js-unknown-provider","q":"\n\n<p>I'm trying to \"customize\" the mongolab example to fit my own REST API. Now I'm running into this error and I am not sure what I am doing wrong:</p>\n\n<pre><code>Error: Unknown provider: ProductProvider &lt;- Product\n    at Error (unknown source)\n    at http://localhost:3000/js/vendor/angular.min.js:28:395\n    at Object.c [as get] (http://localhost:3000/js/vendor/angular.min.js:26:180)\n    at http://localhost:3000/js/vendor/angular.min.js:28:476\n    at c (http://localhost:3000/js/vendor/angular.min.js:26:180)\n    at d (http://localhost:3000/js/vendor/angular.min.js:26:314)\n</code></pre>\n\n<p>This is my controller:</p>\n\n<pre><code>function ProductListCtrl($scope, Product) {\n  $scope.products = Product.query();\n}\n</code></pre>\n\n<p>and this is the module:</p>\n\n<pre><code>angular.module('productServices', ['ngResource']).\n    factory('Product', ['$resource', function($resource){\n      var Product = $resource('/api/products/:id', {  }, {\n        update: { method: 'PUT' }\n      });\n\n      return Product;\n    }]);\n</code></pre>\n\n<p>can someone give me a hint on what  I'm missing?</p>\n\n<p>many thanks</p>\n    ","a":"\n<p>Your code looks good, in fact it works (apart from the calls themselves) when copied &amp; pasted into a sample jsFiddle: <a href=\"http://jsfiddle.net/VGaWD/\">http://jsfiddle.net/VGaWD/</a></p>\n\n<p>Hard to say what is going on without seeing a more complete example but I hope that the above jsFiddle will be helpful. <strong>What I'm suspecting is that you are not initializing your app with the 'productServices' module</strong>. It would give the same error, we can see this in another jsFiddle: <a href=\"http://jsfiddle.net/a69nX/1/\">http://jsfiddle.net/a69nX/1/</a></p>\n\n<p>If you are planning to work with AngularJS and MongoLab <strong>I would suggest using an existing adapter for the $resource and MongoLab</strong>: <a href=\"https://github.com/pkozlowski-opensource/angularjs-mongolab\">https://github.com/pkozlowski-opensource/angularjs-mongolab</a>\nIt eases much of the pain working with MongoLab, you can see it in action here: <a href=\"http://jsfiddle.net/pkozlowski_opensource/DP4Rh/\">http://jsfiddle.net/pkozlowski_opensource/DP4Rh/</a>\nDisclaimer! I'm maintaining this adapter (written based on AngularJS examples) so I'm obviously biased here.</p>\n    "},{"t":"What is the best practice for making an AJAX call in Angular.js?","l":"http://stackoverflow.com/questions/17646034/what-is-the-best-practice-for-making-an-ajax-call-in-angular-js","q":"\n\n<p>I was reading this article: <a href=\"http://eviltrout.com/2013/06/15/ember-vs-angular.html\">http://eviltrout.com/2013/06/15/ember-vs-angular.html</a></p>\n\n<p>And it said, </p>\n\n<blockquote>\n  <p>Due to it’s lack of conventions, I wonder how many Angular projects\n  rely on bad practices such as AJAX calls directly within controllers?\n  Due to dependency injection, are developers injecting router\n  parameters into directives? Are novice AngularJS developers going to\n  structure their code in a way that an experienced AngularJS developer\n  believes is idiomatic?</p>\n</blockquote>\n\n<p>I am actually making <code>$http</code> calls from my Angular.js controller. Why is it a bad practice? What is the best practice for making <code>$http</code> calls then? and why? </p>\n    ","a":"\n<p><strong>EDIT: This answer was primarily focus on version 1.0.X. To prevent confusion it's being changed to reflect the best answer for ALL current versions of Angular as of today, 2013-12-05.</strong> </p>\n\n<p>The idea is to create a service that returns a promise to the returned data, then call that in your controller and handle the promise there to populate your $scope property.</p>\n\n<h1>The Service</h1>\n\n<pre class=\"lang-js prettyprint-override\"><code>module.factory('myService', function($http) {\n   return {\n        getFoos: function() {\n             //return the promise directly.\n             return $http.get('/foos')\n                       .then(function(result) {\n                            //resolve the promise as the data\n                            return result.data;\n                        });\n        }\n   }\n});\n</code></pre>\n\n<h1>The Controller:</h1>\n\n<p>Handle the promise's <code>then()</code> method and get the data out of it. Set the $scope property, and do whatever else you might need to do.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>module.controller('MyCtrl', function($scope, myService) {\n    myService.getFoos().then(function(foos) {\n        $scope.foos = foos;\n    });\n});\n</code></pre>\n\n<h2>In-View Promise Resolution (1.0.X only):</h2>\n\n<p>In Angular 1.0.X, the target of the original answer here, promises will get special treatment by the View. When they resolve, their resolved value will be bound to the view. <strong>This has been deprecated in 1.2.X</strong></p>\n\n<pre><code>module.controller('MyCtrl', function($scope, myService) {\n    // now you can just call it and stick it in a $scope property.\n    // it will update the view when it resolves.\n    $scope.foos = myService.getFoos();\n});\n</code></pre>\n    "},{"t":"Should I mix AngularJS with a PHP framework? [closed]","l":"http://stackoverflow.com/questions/15623967/should-i-mix-angularjs-with-a-php-framework","q":"\n\n<p>AngularJS is very powerful when it comes to interactive HTML5 and model binding. On the other hand, PHP frameworks like Yii enable quick, well-structured, safe and powerful web application development. Both technologies provide sophisticated means for data access, iteration and page layouting.</p>\n\n<p>Is it good or bad practice to mix those two approaches (client-side and server-side \"page setup\") or is this rather against the meaning of interactive, seamless HTML5 AJAX web applications?</p>\n\n<p>I am not talking about generating JS using PHP (<a href=\"http://stackoverflow.com/questions/549506/should-php-frameworks-generate-javascript/\">See this question</a>) - I'm talking about generating a view that will make use of AngularJS.</p>\n\n<p>I also know that an AngularJS page should (or can) communicate with the server via REST services to get data (<a href=\"http://stackoverflow.com/questions/13067607/angularjs-client-mvc-pattern/\">See this question</a>) instead of retrieving it from for example PHP variables directly. But to me it seems more convenient to design the \"frame\" for the entire web application separately in PHP (e.g. build the main menu or handle authorization/ sessions etc.)</p>\n    ","a":"\n<p>It seems you may be more comfortable with developing in PHP you let this hold you back from utilizing the full potential with web applications.</p>\n\n<p>It is indeed possible to have PHP render partials and whole views, but I would not recommend it.</p>\n\n<p>To fully utilize the possibilities of HTML and javascript to make a web application, that is, a web page that acts more like an application and relies heavily on client side rendering, you should consider letting the client maintain all responsibility of managing state and presentation. This will be easier to maintain, and will be more user friendly.</p>\n\n<p>I would recommend you to get more comfortable thinking in a more API centric approach. Rather than having PHP output a pre-rendered view, and use angular for mere DOM manipulation, you should consider having the PHP backend output the data that should be acted upon RESTFully, and have Angular present it. </p>\n\n<p>Using PHP to render the view:</p>\n\n<p><code>/user/account</code></p>\n\n<pre><code>if($loggedIn)\n{\n    echo \"&lt;p&gt;Logged in as \".$user.\"&lt;/p&gt;\";\n}\nelse\n{\n    echo \"Please log in.\";\n}\n</code></pre>\n\n<p>How the same problem can be solved with an API centric approach by outputting JSON like this:</p>\n\n<p><code>api/auth/</code></p>\n\n<pre><code>{\n  authorized:true,\n  user: {\n      username: 'Joe', \n      securityToken: 'secret'\n  }\n}\n</code></pre>\n\n<p>and in Angular you could do a get, and handle the response client side.</p>\n\n<pre><code>$http.post(\"http://example.com/api/auth\", {})\n.success(function(data) {\n    $scope.isLoggedIn = data.authorized;\n});\n</code></pre>\n\n<p>To blend both client side and server side the way you proposed may be fit for smaller projects where maintainance is not important and you are the single author, but I lean more towards the API centric way as this will be more correct separation of conserns and will be easier to maintain.</p>\n    "},{"t":"AngularJS - The correct way of binding to a service properties","l":"http://stackoverflow.com/questions/15800454/angularjs-the-correct-way-of-binding-to-a-service-properties","q":"\n\n<p>I’m looking for the best practice of how to bind to a service property in AngularJS.</p>\n\n<p>I have worked through multiple examples to understand how to bind to properties in a service that is created using AngularJS.  </p>\n\n<p>Below I have two examples of how to bind to properties in a service; they both work.  The first example uses basic bindings and the second example used $scope.$watch to bind to the service properties</p>\n\n<p>Are either of these example preferred when binding to properties in a service or is there another option that I’m not aware of that would be recommended?</p>\n\n<p>The premise of these examples is that the service should updated its properties “lastUpdated” and “calls” every 5 seconds.  Once the service properties are updated the view should reflect these changes.  Both these example work successfully; I wonder if there is a better way of doing it.</p>\n\n<p><strong>Basic Binding</strong></p>\n\n<p>The following code can be view and ran here: <a href=\"http://plnkr.co/edit/d3c16z\">http://plnkr.co/edit/d3c16z</a></p>\n\n<pre><code>&lt;html&gt;\n&lt;body ng-app=\"ServiceNotification\" &gt;\n\n    &lt;div ng-controller=\"TimerCtrl1\" style=\"border-style:dotted\"&gt; \n        TimerCtrl1 &lt;br/&gt;\n        Last Updated: {{timerData.lastUpdated}}&lt;br/&gt;\n        Last Updated: {{timerData.calls}}&lt;br/&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.5/angular.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var app = angular.module(\"ServiceNotification\", []);\n\n        function TimerCtrl1($scope, Timer) {\n            $scope.timerData = Timer.data;\n        };\n\n        app.factory(\"Timer\", function ($timeout) {\n            var data = { lastUpdated: new Date(), calls: 0 };\n\n            var updateTimer = function () {\n                data.lastUpdated = new Date();\n                data.calls += 1;\n                console.log(\"updateTimer: \" + data.lastUpdated);\n\n                $timeout(updateTimer, 5000);\n            };\n            updateTimer();\n\n            return {\n                data: data\n            };\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The other way I solved binding to service properties is to use $scope.$watch in the controller.</p>\n\n<p><strong>$scope.$watch</strong></p>\n\n<p>The following code can be view and ran here: <a href=\"http://plnkr.co/edit/dSBlC9\">http://plnkr.co/edit/dSBlC9</a></p>\n\n<pre><code>&lt;html&gt;\n&lt;body ng-app=\"ServiceNotification\"&gt;\n    &lt;div style=\"border-style:dotted\" ng-controller=\"TimerCtrl1\"&gt;\n        TimerCtrl1&lt;br/&gt;\n        Last Updated: {{lastUpdated}}&lt;br/&gt;\n        Last Updated: {{calls}}&lt;br/&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.5/angular.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var app = angular.module(\"ServiceNotification\", []);\n\n        function TimerCtrl1($scope, Timer) {\n            $scope.$watch(function () { return Timer.data.lastUpdated; },\n                function (value) {\n                    console.log(\"In $watch - lastUpdated:\" + value);\n                    $scope.lastUpdated = value;\n                }\n            );\n\n            $scope.$watch(function () { return Timer.data.calls; },\n                function (value) {\n                    console.log(\"In $watch - calls:\" + value);\n                    $scope.calls = value;\n                }\n            );\n        };\n\n        app.factory(\"Timer\", function ($timeout) {\n            var data = { lastUpdated: new Date(), calls: 0 };\n\n            var updateTimer = function () {\n                data.lastUpdated = new Date();\n                data.calls += 1;\n                console.log(\"updateTimer: \" + data.lastUpdated);\n\n                $timeout(updateTimer, 5000);\n            };\n            updateTimer();\n\n            return {\n                data: data\n            };\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I’m aware that I can use $rootscope.$broadcast in the service and $root.$on in the controller, but in other examples that I’ve created that use $broadcast/$on the first broadcast is not captured by the controller, but additional calls that are broadcasted are triggered in the controller.  If you are aware of a way to solve $rootscope.$broadcast problem, please provide an answer.</p>\n\n<p>But to restate what I mentioned earlier, I would like to know the best practice of how to bind to a service properties.</p>\n\n<p></p><hr>\n<strong>Update</strong><p></p>\n\n<p>This question was originally asked and answered in April 2013. In May 2014, Gil Birman provided a new answer, which I changed as the correct answer. Since Gil Birman answer has very few up-votes, my concern is that people reading this question will disregard his answer in favor of other answers with many more votes.  Before you make a decision on what's the best answer, I highly recommend Gil Birman's answer.</p>\n    ","a":"\n<p>Consider some <strong>pros and cons of the second approach</strong>:</p>\n\n<ul>\n<li><p><strong>0</strong>  <code>{{lastUpdated}}</code> instead of <code>{{timerData.lastUpdated}}</code>, which could just as easily be <code>{{timer.lastUpdated}}</code>, which I might argue is more readable (but let's not argue... I'm giving this point a neutral rating so you decide for yourself)</p></li>\n<li><p><strong>+1</strong> It may be convenient that the controller acts as a sort of API for the markup such that if somehow the structure of the data model changes you can (in theory) update the controller's <em>API mappings</em> without touching the html partial. </p></li>\n<li><p><strong>-1</strong> However, theory isn't always practice and I usually find myself having to modify markup <em>and</em> controller logic when changes are called for, <em>anyway</em>. So the extra effort of writing the API negates it's advantage.</p></li>\n<li><p><strong>-1</strong> Furthermore, this approach isn't very DRY.</p></li>\n<li><p><strong>-1</strong> If you want to bind the data to <code>ng-model</code> your code become even less DRY as you have to re-package the <code>$scope.scalar_values</code> in the controller to make a new REST call.</p></li>\n<li><p><strong>-0.1</strong> There's a tiny performance hit creating extra watcher(s). Also, if data properties are attached to the model that don't need to be watched in a particular controller they will create additional overhead for the deep watchers.</p></li>\n<li><p><strong>-1</strong> What if multiple controllers need the same data models? That means that you have multiple API's to update with every model change. </p></li>\n</ul>\n\n<p><code>$scope.timerData = Timer.data;</code> is starting to sound mighty tempting right about now...  Let's dive a little deeper into that last point... What kind of model changes were we talking about? A model on the back-end (server)? Or a model which is created and lives only in the front-end? In either case, what is essentially the <em>data mapping API</em> belongs in the <em>front-end service layer</em>, (an angular factory or service). (Note that your first example--my preference-- doesn't have such an API in the <em>service layer</em>, which is fine because it's simple enough it doesn't need it.)</p>\n\n<p><strong>In conclusion</strong>, everything does not have to be decoupled. And as far as decoupling the markup entirely from the data model, the drawbacks outweigh the advantages.</p>\n\n<hr>\n\n<p><strong>Controllers, in general</strong> shouldn't be littered with <code>$scope = injectable.data.scalar</code>'s. Rather, they should be sprinkled with <code>$scope = injectable.data</code>'s, <code>promise.then(..)</code>'s, and <code>$scope.complexClickAction = function() {..}</code>'s</p>\n\n<p>As an alternative approach to achieve data-decoupling and thus view-encapsulation, the only place that <strong>it really makes sense to decouple the view from the model</strong> is <strong>with a directive</strong>. But even there, don't <code>$watch</code> scalar values in the <code>controller</code> or <code>link</code> functions. That won't save time or make the code any more maintainable nor readable. It won't even make testing easier since <em>robust tests in angular usually test the resulting DOM anyway</em>. Rather, in a directive demand your <em>data API</em> in object form, and favor using just the <code>$watch</code>ers created by <code>ng-bind</code>.</p>\n\n<hr>\n\n<p>Example\n<a href=\"http://plnkr.co/edit/MVeU1GKRTN4bqA3h9Yio\">http://plnkr.co/edit/MVeU1GKRTN4bqA3h9Yio</a></p>\n\n<pre><code>&lt;body ng-app=\"ServiceNotification\"&gt;\n    &lt;div style=\"border-style:dotted\" ng-controller=\"TimerCtrl1\"&gt;\n        TimerCtrl1&lt;br/&gt;\n        Bad:&lt;br/&gt;\n        Last Updated: {{lastUpdated}}&lt;br/&gt;\n        Last Updated: {{calls}}&lt;br/&gt;\n        Good:&lt;br/&gt;\n        Last Updated: {{data.lastUpdated}}&lt;br/&gt;\n        Last Updated: {{data.calls}}&lt;br/&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.5/angular.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var app = angular.module(\"ServiceNotification\", []);\n\n        function TimerCtrl1($scope, Timer) {\n\n            $scope.data = Timer.data;\n             $scope.lastUpdated = Timer.data.lastUpdated;\n             $scope.calls = Timer.data.calls;\n        };\n\n        app.factory(\"Timer\", function ($timeout) {\n            var data = { lastUpdated: new Date(), calls: 0 };\n\n            var updateTimer = function () {\n                data.lastUpdated = new Date();\n                data.calls += 1;\n                console.log(\"updateTimer: \" + data.lastUpdated);\n\n                $timeout(updateTimer, 500);\n            };\n            updateTimer();\n\n            return {\n                data: data\n            };\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>UPDATE</strong>: I've finally come back to this question to add that I don't think that either approach is \"wrong\". Originally I had written that Josh David Miller's answer was incorrect, but in retrospect his points are completely valid, especially his point about separation of concerns.</p>\n\n<p>Separation of concerns aside (but tangentially related), there's another reason for <em>defensive copying</em> that I failed to consider. This question mostly deals with reading data directly from a service. But what if a developer on your team decides that the controller needs to transform the data in some trivial way before the view displays it? (Whether controllers should transform data at all is another discussion.) If she doesn't make a copy of the object first she might unwittingly cause regressions in another view component which consumes the same data.</p>\n\n<p>What this question really highlights are architectural shortcomings of the typical angular application (and really any javascript application): tight coupling of concerns, and object mutability. I have recently become enamored with architecting application with React <em>and</em> immutable data structures. Doing so solves the following two problems wonderfully:</p>\n\n<ol>\n<li><p><strong>Separation of concerns</strong>: A component consumes all of it's data via props and has little-to-no reliance on global singletons (such as angular services), and knows nothing about what happened <em>above</em> it in the view hierarchy.</p></li>\n<li><p><strong>Mutability</strong>: All props are immutable which eliminates the risk of unwitting data mutation.</p></li>\n</ol>\n\n<p>angular 2.0 is now on track to borrow heavily from React to achieve the two points above.</p>\n    "},{"t":"AngularJS call method in directive controller from other controller","l":"http://stackoverflow.com/questions/14883476/angularjs-call-method-in-directive-controller-from-other-controller","q":"\n\n<p>I am trying to figure this one out but it seems google is not my friend today so I'm going to ask you guys here. Basically I have a directive that has its own controller. See the below code:</p>\n\n<pre><code>var popdown = angular.module('xModules',[]);\n\npopdown.directive('popdown', function () {\n    var PopdownController = function ($scope) {\n        this.scope = $scope;\n    }\n\n    PopdownController.prototype = {\n        show:function (message, type) {\n            this.scope.message = message;\n            this.scope.type = type;\n        },\n\n        hide:function () {\n            this.scope.message = '';\n            this.scope.type = '';\n        }\n    }\n\n    var linkFn = function (scope, lElement, attrs, controller) {\n\n    };\n\n    return {\n        controller: PopdownController,\n        link: linkFn,\n        replace: true,\n        templateUrl: './partials/modules/popdown.html'\n    }\n\n});\n</code></pre>\n\n<p>This is meant to be a notification system for errors/notifications/warnings. What I want to do is from another controller (not a directive one) to call the function show on this controller. And when I do that I would also want my link function to detect that some properties changed and perform some animations.</p>\n\n<p>Here is some code to exemplify what I'm asking for:</p>\n\n<pre><code>var app = angular.module('app', ['RestService']);\n\napp.controller('IndexController', function($scope, RestService) {\n    var result = RestService.query();\n\n    if(result.error) {\n        popdown.notify(error.message, 'error');\n    }\n});\n</code></pre>\n\n<p>So when calling <code>show</code> on the <code>popdown</code> directive controller the link function should also be triggered and perform an animation. How could I achieve that?</p>\n    ","a":"\n<p>This is an interesting question, and I started thinking about how I would implement something like this. </p>\n\n<p>I came up with <a href=\"http://jsfiddle.net/9KX3k/1/\">this (fiddle)</a>;</p>\n\n<p>Basically, instead of trying to call a directive from a controller, I created a module to house all the popdown logic:</p>\n\n<pre><code>var PopdownModule = angular.module('Popdown', []);\n</code></pre>\n\n<p>I put two things in the module, a <code>factory</code> for the API which can be injected anywhere, and the <code>directive</code> for defining the behavior of the actual popdown element:</p>\n\n<p>The factory just defines a couple of functions <code>success</code> and <code>error</code> and keeps track of a couple of variables:</p>\n\n<pre><code>PopdownModule.factory('PopdownAPI', function() {\n    return {\n        status: null,\n        message: null,\n        success: function(msg) {\n            this.status = 'success';\n            this.message = msg;\n        },\n        error: function(msg) {\n            this.status = 'error';\n            this.message = msg;\n        },\n        clear: function() {\n            this.status = null;\n            this.message = null;\n        }\n    }\n});\n</code></pre>\n\n<p>The directive gets the API injected into its controller, and watches the api for changes (I'm using bootstrap css for convenience):</p>\n\n<pre><code>PopdownModule.directive('popdown', function() {\n    return {\n        restrict: 'E',\n        scope: {},\n        replace: true,\n        controller: function($scope, PopdownAPI) {\n            $scope.show = false;\n            $scope.api = PopdownAPI;\n\n            $scope.$watch('api.status', toggledisplay)\n            $scope.$watch('api.message', toggledisplay)\n\n            $scope.hide = function() {\n                $scope.show = false;\n                $scope.api.clear();\n            };\n\n            function toggledisplay() {\n                $scope.show = !!($scope.api.status &amp;&amp; $scope.api.message);               \n            }\n        },\n        template: '&lt;div class=\"alert alert-{{api.status}}\" ng-show=\"show\"&gt;' +\n                  '  &lt;button type=\"button\" class=\"close\" ng-click=\"hide()\"&gt;&amp;times;&lt;/button&gt;' +\n                  '  {{api.message}}' +\n                  '&lt;/div&gt;'\n    }\n})\n</code></pre>\n\n<p>Then I define an <code>app</code> module that depends on <code>Popdown</code>:</p>\n\n<pre><code>var app = angular.module('app', ['Popdown']);\n\napp.controller('main', function($scope, PopdownAPI) {\n    $scope.success = function(msg) { PopdownAPI.success(msg); }\n    $scope.error   = function(msg) { PopdownAPI.error(msg); }\n});\n</code></pre>\n\n<p>And the HTML looks like:</p>\n\n<pre><code>&lt;html ng-app=\"app\"&gt;\n    &lt;body ng-controller=\"main\"&gt;\n        &lt;popdown&gt;&lt;/popdown&gt;\n        &lt;a class=\"btn\" ng-click=\"success('I am a success!')\"&gt;Succeed&lt;/a&gt;\n        &lt;a class=\"btn\" ng-click=\"error('Alas, I am a failure!')\"&gt;Fail&lt;/a&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I'm not sure if it's completely ideal, but it seemed like a reasonable way to set up communication with a global-ish popdown directive.</p>\n\n<p>Again, for reference, <a href=\"http://jsfiddle.net/9KX3k/1/\">the fiddle</a>.</p>\n    "},{"t":"Angularjs clicking a button within a form causes page refresh","l":"http://stackoverflow.com/questions/12319758/angularjs-clicking-a-button-within-a-form-causes-page-refresh","q":"\n\n<p>I have a form in Angular that has two buttons tags in it.  One button submits the form on ng-click.  The other button is purely for navigation using ng-click.  However, when this second button is clicked Angularjs is causing a page refresh which triggers a 404.  I've dropped a breakpoint in the function and it is triggering my function.  If I do any of the following it stops:</p>\n\n<ol>\n<li>If I remove the ng-click the button doesn't cause a page refresh.  </li>\n<li>If I comment out the code in the function it doesn't cause a page refresh.  </li>\n<li>If I change the button tag to an anchor tag (a) with href=\"\" then it doesn't cause a refresh.</li>\n</ol>\n\n<p>The later being the simplest workaround, but why is Angular even running any code after my function that causes the page to reload?  Seems like a bug. </p>\n\n<p>Here is the form:</p>\n\n<pre><code>&lt;form class=\"form-horizontal\" name=\"myProfile\" ng-switch-when=\"profile\"&gt;\n   &lt;fieldset&gt;\n\n      &lt;div class=\"control-group\"&gt;\n         &lt;label class=\"control-label\" for=\"passwordButton\"&gt;Password&lt;/label&gt;\n         &lt;div class=\"controls\"&gt;\n            &lt;button id=\"passwordButton\" class=\"secondaryButton\" ng-click=\"showChangePassword()\"&gt;Change&lt;/button&gt;\n         &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"buttonBar\"&gt;\n           &lt;button id=\"saveProfileButton\" class=\"primaryButton\" ng-click=\"saveUser()\"&gt;Save&lt;/button&gt;\n      &lt;/div&gt;\n   &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Here is the controller method:</p>\n\n<pre><code> $scope.showChangePassword = function() {\n    $scope.selectedLink = \"changePassword\";\n };\n</code></pre>\n    ","a":"\n<p>If you have a look at the <a href=\"http://www.w3.org/TR/html-markup/button.html\">W3C specification</a>, it would seem like the obvious thing to try is to mark your button elements with <code>type='button'</code> when you don't want them to submit.</p>\n\n<p>The thing to note in particular is where it says </p>\n\n<blockquote>\n  <p>A button element with no type attribute specified represents the same thing as a button element with its type attribute set to \"submit\"</p>\n</blockquote>\n    "},{"t":"AngularJs: How to check for changes in file input fields?","l":"http://stackoverflow.com/questions/17922557/angularjs-how-to-check-for-changes-in-file-input-fields","q":"\n\n<p>I am new to angular. I am trying to read the uploaded file path from HTML 'file' field whenever a 'change' happens on this field. If i use 'onChange' it works but when i use it angular way using 'ng-change' it doesn't work.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script&gt;\n   var DemoModule = angular.module(\"Demo\",[]);\n   DemoModule .controller(\"form-cntlr\",function($scope){\n   $scope.selectFile = function()\n   {\n        $(\"#file\").click();\n   }\n   $scope.fileNameChaged = function()\n   {\n        alert(\"select file\");\n   }\n});\n&lt;/script&gt;\n\n&lt;div ng-controller=\"form-cntlr\"&gt;\n    &lt;form&gt;\n         &lt;button ng-click=\"selectFile()\"&gt;Upload Your File&lt;/button&gt;\n         &lt;input type=\"file\" style=\"display:none\" \n                          id=\"file\" name='file' ng-Change=\"fileNameChaged()\"/&gt;\n    &lt;/form&gt;  \n&lt;/div&gt;\n</code></pre>\n\n<p><strong>fileNameChaged()</strong> is never calling. Firebug also doesn't show any error.</p>\n    ","a":"\n<p>No binding support for File Upload control</p>\n\n<p><a href=\"https://github.com/angular/angular.js/issues/1375\">https://github.com/angular/angular.js/issues/1375</a>   </p>\n\n<pre><code>&lt;div ng-controller=\"form-cntlr\"&gt;\n        &lt;form&gt;\n             &lt;button ng-click=\"selectFile()\"&gt;Upload Your File&lt;/button&gt;\n             &lt;input type=\"file\" style=\"display:none\" \n                id=\"file\" name='file' onchange=\"angular.element(this).scope().fileNameChanged(this)\" /&gt;\n        &lt;/form&gt;  \n    &lt;/div&gt;\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code> &lt;input type=\"file\" style=\"display:none\" \n    id=\"file\" name='file' ng-Change=\"fileNameChanged()\" /&gt;\n</code></pre>\n\n<p>can you try</p>\n\n<pre><code>&lt;input type=\"file\" style=\"display:none\" \n    id=\"file\" name='file' onchange=\"angular.element(this).scope().fileNameChanged()\" /&gt;\n</code></pre>\n\n<p>and in your function changes\ninstead of</p>\n\n<pre><code>$scope.fileNameChanged = function() {\n   alert(\"select file\");\n}\n</code></pre>\n\n<p>can you try</p>\n\n<pre><code>$scope.fileNameChanged = function() {\n  console.log(\"select file\");\n}\n</code></pre>\n\n<p>Below is one working example of file upload with drag drop file upload may be helpful\n<a href=\"http://jsfiddle.net/danielzen/utp7j/\">http://jsfiddle.net/danielzen/utp7j/</a></p>\n\n<p><strong>Angular File Upload Information</strong></p>\n\n<p>URL for AngularJS File Upload in ASP.Net</p>\n\n<p><a href=\"http://cgeers.com/2013/05/03/angularjs-file-upload/\">http://cgeers.com/2013/05/03/angularjs-file-upload/</a></p>\n\n<p>AngularJs native multi-file upload with progress with NodeJS</p>\n\n<p><a href=\"http://jasonturim.wordpress.com/2013/09/12/angularjs-native-multi-file-upload-with-progress/\">http://jasonturim.wordpress.com/2013/09/12/angularjs-native-multi-file-upload-with-progress/</a></p>\n\n<p>ngUpload - An AngularJS Service for uploading files using iframe </p>\n\n<p><a href=\"http://ngmodules.org/modules/ngUpload\">http://ngmodules.org/modules/ngUpload</a></p>\n    "},{"t":"Add directives from directive in AngularJS","l":"http://stackoverflow.com/questions/19224028/add-directives-from-directive-in-angularjs","q":"\n\n<p>I'm trying to build a directive that takes care of <strong>adding more directives</strong> to the element it is declared on.\nFor example, I want to build a directive that takes care of adding <code>datepicker</code>, <code>datepicker-language</code> and <code>ng-required=\"true\"</code>.</p>\n\n<p>If I try to add those attributes and then use <code>$compile</code> I obviously generate an infinite loop, so I am checking if I have already added the needed attributes:</p>\n\n<pre><code>angular.module('app')\n  .directive('superDirective', function ($compile, $injector) {\n    return {\n      restrict: 'A',\n      replace: true,\n      link: function compile(scope, element, attrs) {\n        if (element.attr('datepicker')) { // check\n          return;\n        }\n        element.attr('datepicker', 'someValue');\n        element.attr('datepicker-language', 'en');\n        // some more\n        $compile(element)(scope);\n      }\n    };\n  });\n</code></pre>\n\n<p>Of course, if I don't <code>$compile</code> the element, the attributes will be set but the directive won't be bootstrapped.</p>\n\n<p>Is this approach correct or am I doing it wrong? Is there a better way to achieve the same behavior?</p>\n\n<p><strong>UDPATE</strong>: given the fact that <code>$compile</code> is the only way to achieve this, is there a way to skip the first compilation pass (the element may contain several children)? Maybe by setting <code>terminal:true</code>?</p>\n\n<p><strong>UPDATE 2</strong>: I have tried putting the directive into a <code>select</code> element and, as expected, the compilation runs twice, which means there is twice the number of expected <code>option</code>s.</p>\n    ","a":"\n<p>In cases where you have multiple directives on a single DOM element and where the\norder in which they’re applied matters, you can use the <code>priority</code> property to order their\napplication. Higher numbers run first. The default priority is 0 if you don’t specify one.</p>\n\n<p><strong>EDIT</strong>: after the discussion, here's the complete working solution. The key was to <strong>remove the attribute</strong>: <code>element.removeAttr(\"common-things\");</code>, and also <code>element.removeAttr(\"data-common-things\");</code> (in case users specify <code>data-common-things</code> in the html)</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('app')\n  .directive('commonThings', function ($compile) {\n    return {\n      restrict: 'A',\n      replace: false, \n      terminal: true, //this setting is important, see explanation below\n      priority: 1000, //this setting is important, see explanation below\n      compile: function compile(element, attrs) {\n        element.attr('tooltip', '{{dt()}}');\n        element.attr('tooltip-placement', 'bottom');\n        element.removeAttr(\"common-things\"); //remove the attribute to avoid indefinite loop\n        element.removeAttr(\"data-common-things\"); //also remove the same attribute with data- prefix in case users specify data-common-things in the html\n\n        return {\n          pre: function preLink(scope, iElement, iAttrs, controller) {  },\n          post: function postLink(scope, iElement, iAttrs, controller) {  \n            $compile(iElement)(scope);\n          }\n        };\n      }\n    };\n  });\n</code></pre>\n\n<p>Working plunker is available at: <a href=\"http://plnkr.co/edit/Q13bUt?p=preview\">http://plnkr.co/edit/Q13bUt?p=preview</a></p>\n\n<p>Or:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('app')\n  .directive('commonThings', function ($compile) {\n    return {\n      restrict: 'A',\n      replace: false,\n      terminal: true,\n      priority: 1000,\n      link: function link(scope,element, attrs) {\n        element.attr('tooltip', '{{dt()}}');\n        element.attr('tooltip-placement', 'bottom');\n        element.removeAttr(\"common-things\"); //remove the attribute to avoid indefinite loop\n        element.removeAttr(\"data-common-things\"); //also remove the same attribute with data- prefix in case users specify data-common-things in the html\n\n        $compile(element)(scope);\n      }\n    };\n  });\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/Tw1Pbt?p=preview\">DEMO</a></p>\n\n<p><strong>Explanation why we have to set <code>terminal: true</code> and <code>priority: 1000</code> (a high number):</strong></p>\n\n<p>When the DOM is ready, angular walks the DOM to identify all registered directives and compile the directives one by one based on <code>priority</code> <strong>if these directives are on the same element</strong>. We set our custom directive's priority to a high number to ensure that it will be compiled <strong>first</strong> and with <code>terminal: true</code>, the other directives will be <strong>skipped</strong> after this directive is compiled. </p>\n\n<p>When our custom directive is compiled, it will modify the element by adding directives and removing itself and use $compile service to <strong>compile all the directives (including those that were skipped)</strong>.</p>\n\n<p>If we don't set <code>terminal:true</code> and <code>priority: 1000</code>, there is a chance that some directives are compiled <strong>before</strong> our custom directive. And when our custom directive uses $compile to compile the element =&gt; compile again the already compiled directives. This will cause unpredictable behavior especially if the directives compiled before our custom directive have already transformed the DOM.</p>\n\n<p>For more information about priority and terminal, check out <a href=\"http://stackoverflow.com/questions/15266840/how-to-understand-the-terminal-of-directive\">How to understand the `terminal` of directive?</a></p>\n\n<p>An example of a directive that also modifies the template is <code>ng-repeat</code> (priority = 1000), when <code>ng-repeat</code> is compiled, <code>ng-repeat</code> <em>make copies of the template element before other directives get applied</em>. </p>\n\n<p>Thanks to @Izhaki's comment, here is the reference to <code>ngRepeat</code> source code: <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js\">https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js</a></p>\n    "},{"t":"Maintain model of scope when changing between views in AngularJS","l":"http://stackoverflow.com/questions/12940974/maintain-model-of-scope-when-changing-between-views-in-angularjs","q":"\n\n<p>I am learning AngularJS. Say I have /view1 using My1Ctrl and /view2 using My2Ctrl that can be navigated to using tabs where each view has its own simple but different form. How would I make sure that the values entered in the form of view1 are not reset when a user leaves view1 then returns to view1? What I mean is, how can the second visit to view1 have the exact same state of the model as I left it.</p>\n    ","a":"\n<p>I took a bit of time to work out what the best way of doing this is.  I also wanted to keep the state, when the user left the page and then pressed the backbutton and not just put all my data into the rootscope</p>\n\n<p>the end result is to have a service for each controller.  in the controller, you just have functions and variables that you dont care if they are cleared.</p>\n\n<p>The service for the controller is injected by dependency injection. As services are singletons, their data is not destroyed like the data in the controller.</p>\n\n<p>in the service, i have a model.  the model ONLY has data, no functions. that way it can be converted back and forth from json to persist it.  I used the html5 localstorage to persist it.</p>\n\n<p>lastly i used window.onbeforeunload and $rootScope.$broadcast('saveState'); to let all the services know that they should save their state and $rootScope.$broadcast('restoreState') to let them know to restore their state.  ( used for when the user leaves the page and presses the back button to return to the page respectively)</p>\n\n<p>example service called userService for my userController</p>\n\n<pre><code>app.factory('userService', ['$rootScope', function ($rootScope) {\n\n    var service = {\n\n        model: {\n            name: '',\n            email: ''\n        },\n\n        SaveState: function () {\n            sessionStorage.userService = angular.toJson(service.model);\n        },\n\n        RestoreState: function () {\n            service.model = angular.fromJson(sessionStorage.userService);\n        }\n    }\n\n    $rootScope.$on(\"savestate\", service.SaveState);\n    $rootScope.$on(\"restorestate\", service.RestoreState);\n\n    return service;\n}]);\n</code></pre>\n\n<p>userController example</p>\n\n<pre><code>function userCtrl($scope, userService) {\n    $scope.user = userService;\n}\n</code></pre>\n\n<p>the view then uses binding like this</p>\n\n<pre><code>&lt;h1&gt;{{user.model.name}}&lt;/h1&gt;\n</code></pre>\n\n<p>and in the app module, within the run function i handle the broadcasting of the saveState and restoreState</p>\n\n<pre><code>$rootScope.$on(\"$routeChangeStart\", function (event, next, current) {\n    if (sessionStorage.restorestate == \"true\") {\n        $rootScope.$broadcast('restorestate'); //let everything know we need to restore state\n        sessionStorage.restorestate = false;\n    }\n});\n\n//let everthing know that we need to save state now.\nwindow.onbeforeunload = function (event) {\n    $rootScope.$broadcast('savestate');\n};\n</code></pre>\n\n<p>as i mentioned this took a while to come to this point.  It is a very clean way of doing it, but it is a fair bit o engineering to do something that i would suspect is a very common issue when developing in angular.</p>\n\n<p>I would love to see easier, but as clean ways to handle keeping state across controllers, including when the user leaves and returns to the page.</p>\n    "},{"t":"Angular JS: How to set an iframe src attribute from a variable","l":"http://stackoverflow.com/questions/20045150/angular-js-how-to-set-an-iframe-src-attribute-from-a-variable","q":"\n\n<p>I'm trying to set the <code>src</code> attribute of an iframe from a variable and I can't get it to work...</p>\n\n<p>The markup:</p>\n\n<pre><code>&lt;div class=\"col-xs-12\" ng-controller=\"AppCtrl\"&gt;\n\n    &lt;ul class=\"\"&gt;\n        &lt;li ng-repeat=\"project in projects\"&gt;\n            &lt;a ng-click=\"setProject(project.id)\" href=\"\"&gt;{{project.url}}&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;iframe  ng-src=\"{{trustSrc(currentProject.url)}}\"&gt;\n        Something wrong...\n    &lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>controllers/app.js:</p>\n\n<pre><code>function AppCtrl ($scope) {\n\n    $scope.projects = {\n\n        1 : {\n            \"id\" : 1,\n            \"name\" : \"Mela Sarkar\",\n            \"url\" : \"http://blabla.com\",\n            \"description\" : \"A professional portfolio site for McGill University professor Mela Sarkar.\"\n        },\n\n        2 : {\n            \"id\" : 2,\n            \"name\" : \"Good Watching\",\n            \"url\" : \"http://goodwatching.com\",\n            \"description\" : \"Weekend experiment to help my mom decide what to watch.\"    \n        }\n    };\n\n    $scope.setProject = function (id) {\n        $scope.currentProject = $scope.projects[id];\n        console.log( $scope.currentProject );\n\n    }\n}\n</code></pre>\n\n<p>With this code, nothing gets inserted into the iframe's <code>src</code> attribute. It's just blank.</p>\n\n<p><strong>Update 1:</strong>\nI injected the <code>$sce</code> dependancy into the AppCtrl and $sce.trustUrl() now works without throwing errors. However it returns <code>TrustedValueHolderType</code> which I'm not sure how to use to insert an actual URL. The same type is returned whether I use $sce.trustUrl() inside the interpolation braces in the attribute <code>src=\"{{trustUrl(currentProjectUrl))}}\"</code> or if I do it inside the controller when setting the value of currentProjectUrl. I even tried it with both.</p>\n\n<p><strong>Update 2:</strong>\nI figured out how to return the url from the trustedUrlHolder using .toString() but when I do that, it throws the security warning when I try to pass it into the src attribute.</p>\n\n<p><strong>Update 3:</strong>\nIt works if I use trustAsResourceUrl() in the controller and pass that to a variable used inside the ng-src attribute:</p>\n\n<pre><code>$scope.setProject = function (id) {\n    $scope.currentProject = $scope.projects[id];\n    $scope.currentProjectUrl = $sce.trustAsResourceUrl($scope.currentProject.url);\n    console.log( $scope.currentProject );\n    console.log( $scope.currentProjectUrl );\n\n}\n</code></pre>\n\n<p>My problem seems to be solved by this, although I'm not quite sure why.</p>\n    ","a":"\n<p>I suspect looking at the excerpt that the function <code>trustSrc</code> from <code>trustSrc(currentProject.url)</code> is not defined in the controller. </p>\n\n<p>You need to inject the <a href=\"http://docs.angularjs.org/api/ng.%24sce\"><code>$sce</code> service</a> in the controller and <code>trustAsResourceUrl</code> the <code>url</code> there.</p>\n\n<p>In the controller:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function AppCtrl($scope, $sce) {\n    // ...\n    $scope.setProject = function (id) {\n      $scope.currentProject = $scope.projects[id];\n      $scope.currentProjectUrl = $sce.trustAsResourceUrl($scope.currentProject.url);\n    }\n}\n</code></pre>\n\n<p>In the Template:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;iframe ng-src=\"{{currentProjectUrl}}\"&gt; &lt;/iframe&gt;\n</code></pre>\n    "},{"t":"Difference between double and single curly brace in angular JS?","l":"http://stackoverflow.com/questions/17878560/difference-between-double-and-single-curly-brace-in-angular-js","q":"\n\n<p>I am new to this angular world, i am bit confused with the use of double curly braces    {{}}\nand single curly braces{} or sometime no curly brace is used to include the expression like in the directives </p>\n\n<ol>\n<li><code>ng-class={expression}</code></li>\n<li><code>normal data binding like{{obj.key}}</code></li>\n<li><code>ng-hide='mydata===\"red\"'</code></li>\n</ol>\n    ","a":"\n<h2>{{}} - double curly braces:</h2>\n\n<p><code>{{}}</code> are Angular expressions and come quite handy when you wish to write stuff to HTML:</p>\n\n<pre><code>&lt;div&gt;\n    {{planet.name == \"Earth\" ? \"Yeah! We 're home!\" : \"Eh! Where 're we?\"}}\n&lt;/div&gt;\n\n&lt;!-- with some directives like `ngSrc` --&gt;\n&lt;img ng-src=\"http://www.example.com/gallery/{{hash}}\"/&gt;\n\n&lt;!-- set the title attribute --&gt;\n&lt;div ng-attr-title=\"{{celebrity.name}}\"&gt;...\n\n&lt;!-- set a custom attribute for your custom directive --&gt;\n&lt;div custom-directive custom-attr=\"{{pizza.size}}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Don't use these at a place that is already an expression!</p>\n\n<p>For instance, the directive <code>ngClick</code> treats anything written in between the quotes as an expression:</p>\n\n<pre><code>&lt;!-- so dont do this! --&gt;\n&lt;!-- &lt;button ng-click=\"activate({{item}})\"&gt;... --&gt;  \n</code></pre>\n\n<h2>{} - single curly braces:</h2>\n\n<p><code>{}</code> as we know stand for objects in JavaScript. Here, too, nothing different:</p>\n\n<pre><code>&lt;div ng-init=\"distanceWalked = {mon:2, tue:2.5, wed:0.8, thu:3, fri:1.5, \nsat:2, sun:3}\"&gt;\n</code></pre>\n\n<p>With some directives like <code>ngClass</code> or <code>ngStyle</code> that accept map:</p>\n\n<pre><code>&lt;span ng-style=\"{'color' : 'red'}\"&gt;{{viruses.length}} viruses found!&lt;/span&gt;\n\n&lt;div ng-class=\"{'green' : vegetable == 'lettuce', \n'red' : vegetable == 'tomato'}\"&gt;..\n</code></pre>\n\n<h2>no curly braces:</h2>\n\n<p>As already mentioned just go bracketless when inside expressions. Quite simple:</p>\n\n<pre><code>&lt;div ng-if=\"zoo.enclosure.inmatesCount == 0\"&gt;\n    Alarm! All the monkeys have escaped!\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"Rails CSRF Protection + Angular.js: protect_from_forgery makes me to log out on POST","l":"http://stackoverflow.com/questions/14734243/rails-csrf-protection-angular-js-protect-from-forgery-makes-me-to-log-out-on","q":"\n\n<p>If the <code>protect_from_forgery</code> option is mentioned in application_controller, then I can log in and perform any GET requests, but on very first POST request Rails resets the session, which logs me out.</p>\n\n<p>I turned the <code>protect_from_forgery</code> option off temporarily, but would like to use it with Angular.js. Is there some way to do that?</p>\n    ","a":"\n<p>I think reading CSRF-value from DOM is not a good solution, it's just a workaround.</p>\n\n<p>Here is a document form angularJS official website <a href=\"https://docs.angularjs.org/api/ng/service/$http#cross-site-request-forgery-xsrf-protection\">http://docs.angularjs.org/api/ng.$http</a>  :</p>\n\n<blockquote>\n  <p>Since only JavaScript that runs on your domain could read the cookie, your server can be assured that the XHR came from JavaScript running on your domain.</p>\n  \n  <p>To take advantage of this (CSRF Protection), your server needs to set a token in a JavaScript readable session\n  cookie called XSRF-TOKEN on first HTTP GET request. On subsequent\n  non-GET requests the server can verify that the cookie matches\n  X-XSRF-TOKEN HTTP header</p>\n</blockquote>\n\n<p>Here is my solution based on those instructions:</p>\n\n<p>First, set the cookie:</p>\n\n<pre><code># app/controllers/application_controller.rb\n\n# Turn on request forgery protection\nprotect_from_forgery\n\nafter_filter :set_csrf_cookie_for_ng\n\ndef set_csrf_cookie_for_ng\n  cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?\nend\n</code></pre>\n\n<p>Then, we should verify the token on every non-GET request.<br>\nSince Rails has already built with the similar method, we can just simply override it to append our logic:</p>\n\n<pre><code># app/controllers/application_controller.rb\n\nprotected\n\n  # In Rails 4.2 and above\n  def verified_request?\n    super || valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])\n  end\n\n  # In Rails 4.1 and below\n  def verified_request?\n    super || form_authenticity_token == request.headers['X-XSRF-TOKEN']\n  end\n</code></pre>\n    "},{"t":"Javascript .map files - javascript source maps","l":"http://stackoverflow.com/questions/21719562/javascript-map-files-javascript-source-maps","q":"\n\n<p>Recently I have seen files with <code>.js.map</code> extension shipped with some JavaScript libraries (like <a href=\"http://code.angularjs.org/\">Angular</a>), and that just raised few questions in my head:</p>\n\n<ul>\n<li>What is it for? Why do the guys at Angular care to deliver a <code>.js.map</code> file?</li>\n<li>How can I (as a JavaScript developer) use the <code>angular.min.js.map</code> file?</li>\n<li>Should I care about creating <code>.js.map</code> files for my JavaScript applications?</li>\n<li>How does it get created? I took a look at <code>angular.min.js.map</code> and it was filled with strange-formatted strings so I assume it's not created manually.</li>\n</ul>\n    ","a":"\n<p>The .map files are for js and css files that have been minified. They are called SourceMaps. When you minify a file, like the angular.js file, it takes thousands of lines of pretty code and turns it into only a few lines of ugly code. Hopefully, when you are shipping your code to production, you are using the minified code instead of the full, unminified version. When your app is in production, and has an error, the sourcemap will help take your ugly file, and will allow you to see the original version of the code. If you didn't have the sourcemap, then any error would seem cryptic at best. </p>\n\n<p>Same for CSS files. Once you take a SASS or LESS file and compile it to CSS, it looks nothing like it's original form. If you enable sourcemaps, then you can see the original state of the file, instead of the modified state. </p>\n\n<p>So, to answer you questions in order:</p>\n\n<ul>\n<li><strong>What is it for?</strong> To de-reference uglified code</li>\n<li><strong>How can a developer use it?</strong> You use it for debugging a production app. In development mode you can use the full version of Angular. In production, you would use the minified version. </li>\n<li><strong>Should I care about creating a js.map file?</strong> If you care about being able to debug production code easier, then yes, you should do it. </li>\n<li><strong>How does it get created?</strong> It is created at build time. There are build tools that can build your .map file for you as it does other files. <a href=\"https://github.com/gruntjs/grunt-contrib-uglify/issues/71\">https://github.com/gruntjs/grunt-contrib-uglify/issues/71</a></li>\n</ul>\n\n<p>I hope this makes sense. </p>\n    "},{"t":"AngularJS - How can I reference the property name within an ng-Repeat","l":"http://stackoverflow.com/questions/10954286/angularjs-how-can-i-reference-the-property-name-within-an-ng-repeat","q":"\n\n<p>In addition to rendering the value of the properties in an object, I'd also like to render the property name as a label.  Is there a way to do this with <code>ng-repeat</code>?  For example:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"option in data\"&gt;{{propertyName}}: {{option}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Which might spit out something like this:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Name: John&lt;/li&gt;\n    &lt;li&gt;Phone: (123) 456-7890&lt;/li&gt;\n    &lt;li&gt;Country: England&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    ","a":"\n<p>Try this:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"(key,val) in data\"&gt;{{key}}: {{val}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    "},{"t":"ng-model for <input type=“file”/>","l":"http://stackoverflow.com/questions/17063000/ng-model-for-input-type-file","q":"\n\n<p>I tried to use ng-model on input tag with type file:</p>\n\n<pre><code>&lt;input type=\"file\" ng-model=\"vm.uploadme\" /&gt;\n</code></pre>\n\n<p>But after selecting a file, in controller, $scope.vm.uploadme is still undefined.</p>\n\n<p>How do I get the selected file in my controller?</p>\n    ","a":"\n<p>I created a workaround with directive:</p>\n\n<pre><code>.directive(\"fileread\", [function () {\n    return {\n        scope: {\n            fileread: \"=\"\n        },\n        link: function (scope, element, attributes) {\n            element.bind(\"change\", function (changeEvent) {\n                var reader = new FileReader();\n                reader.onload = function (loadEvent) {\n                    scope.$apply(function () {\n                        scope.fileread = loadEvent.target.result;\n                    });\n                }\n                reader.readAsDataURL(changeEvent.target.files[0]);\n            });\n        }\n    }\n}]);\n</code></pre>\n\n<p>And the input tag becomes:</p>\n\n<pre><code>&lt;input type=\"file\" fileread=\"vm.uploadme\" /&gt;\n</code></pre>\n\n<p>Or if just the file definition is needed:</p>\n\n<pre><code>.directive(\"fileread\", [function () {\n    return {\n        scope: {\n            fileread: \"=\"\n        },\n        link: function (scope, element, attributes) {\n            element.bind(\"change\", function (changeEvent) {\n                scope.$apply(function () {\n                    scope.fileread = changeEvent.target.files[0];\n                    // or all selected files:\n                    // scope.fileread = changeEvent.target.files;\n                });\n            });\n        }\n    }\n}]);\n</code></pre>\n    "},{"t":"Passing data between controllers in Angular JS?","l":"http://stackoverflow.com/questions/20181323/passing-data-between-controllers-in-angular-js","q":"\n\n<p>I have a basic controller that displays my products,</p>\n\n<pre><code>App.controller('ProductCtrl',function($scope,$productFactory){\n     $productFactory.get().success(function(data){\n           $scope.products = data;\n     });\n});\n</code></pre>\n\n<p>In my view I'm displaying this products in a list</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"product as products\"&gt;\n        {{product.name}}\n    &lt;/li&gt;\n&lt;/ul\n</code></pre>\n\n<p>What I'm trying to do is when someone click on the product name, i have another view named cart where this product is added.</p>\n\n<pre><code> &lt;ul class=\"cart\"&gt;\n      &lt;li&gt;\n          //click one added here\n      &lt;/li&gt;\n      &lt;li&gt;\n          //click two added here\n      &lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n\n<p>So my doubt here is, how do pass this clicked products from first controller to second? i assumed that cart should be a controller too.</p>\n\n<p>I handle click event using directive. Also i feel i should be using service to achieve above functionality just can't figure how? because cart will be predefined number of products added could be 5/10 depending on which page user is. So i would like to keep this generic.</p>\n\n<p>Update: </p>\n\n<p>I created a service to broadcast and in the second controller i receive it. Now the query is how do i update dom? Since my list to drop product is pretty hardcoded.</p>\n    ","a":"\n<p>From the description, seems as though you could be using a service. Check out <a href=\"http://egghead.io/lessons/angularjs-sharing-data-between-controllers\">http://egghead.io/lessons/angularjs-sharing-data-between-controllers</a> and <a href=\"http://stackoverflow.com/questions/17952620/angularjs-service-passing-data-between-controllers\">AngularJS Service Passing Data Between Controllers</a> to see some examples.</p>\n\n<p>You could define your product service as such:</p>\n\n<pre><code>app.service('productService', function() {\n  var productList = [];\n\n  var addProduct = function(newObj) {\n      productList.push(newObj);\n  };\n\n  var getProducts = function(){\n      return productList;\n  };\n\n  return {\n    addProduct: addProduct,\n    getProducts: getProducts\n  };\n\n});\n</code></pre>\n\n<p>Dependency inject the service into both controllers. </p>\n\n<p>In your ProductController, define some action that adds the selected object to the array:</p>\n\n<pre><code>app.controller('ProductController', function($scope, productService) {\n    $scope.callToAddToProductList = function(currObj){\n        productService.addProduct(currObj);\n    };\n});\n</code></pre>\n\n<p>In your CartController, get the products from the service:</p>\n\n<pre><code>app.controller('CartController', function($scope, productService) {\n    $scope.products = productService.getProducts();\n});\n</code></pre>\n    "},{"t":"AngularJS $evalAsync vs $timeout","l":"http://stackoverflow.com/questions/17301572/angularjs-evalasync-vs-timeout","q":"\n\n<p>I've been using AngularJS for a little while now, and have found the need to use <a href=\"http://docs.angularjs.org/api/ng.%24timeout\">$timeout</a> every once in a while (Seems to usually be to init a jQuery plugin). Recently, I've been trying to get a better and more in-depth understanding of the digest cycle, and I came across <a href=\"http://docs.angularjs.org/api/ng.%24rootScope.Scope#%24evalAsync\">$evalAsync</a> function. It seems like that function produces similar results to <code>$timeout</code>, only you don't give it delay. Every time I've used <code>$timeout</code> it has been with a delay of 0, so now I'm wondering if I should have used <code>$evalAsync</code> instead. Are there any fundamental differences between the two? What cases would you use one over the other? I'd like to get a better feeling of when to use which one. Thank you.</p>\n    ","a":"\n<p>I recently answered essentially this question here: <a href=\"http://stackoverflow.com/a/17239084/215945\">http://stackoverflow.com/a/17239084/215945</a>\n(That answer links to some github exchanges with Misko.)</p>\n\n<p>To summarize: </p>\n\n<ul>\n<li>if code is queued using <strong>$evalAsync from a directive</strong>, it should run <em>after</em> the DOM has been manipulated by Angular, but <em>before</em> the browser renders</li>\n<li>if code is queued using <strong>$evalAsync from a controller</strong>, it should run <em>before</em> the DOM has been manipulated by Angular (and before the browser renders) -- rarely do you want this</li>\n<li>if code is queued using <strong>$timeout</strong>, it should run <em>after</em> the DOM has been manipulated by Angular, and <em>after</em> the browser renders (which may cause flicker in some cases)</li>\n</ul>\n    "},{"t":"Multiple ng-view in single template (angular js)","l":"http://stackoverflow.com/questions/17544558/multiple-ng-view-in-single-template-angular-js","q":"\n\n<p>I am building a dynamic web app by using angular js. Is it possible to have multiple <code>ng-view</code> on a single template?</p>\n    ","a":"\n<p>You can have just one <code>ng-view</code>.  </p>\n\n<p>You can change its content in several ways: <a href=\"https://docs.angularjs.org/api/ng/directive/ngInclude\" rel=\"nofollow\"><code>ng-include</code></a>, <a href=\"https://docs.angularjs.org/api/ng/directive/ngSwitch\" rel=\"nofollow\"><code>ng-switch</code></a> or mapping different controllers and templates through the routeProvider. </p>\n    "},{"t":"AngularJS browser autofill workaround by using a directive","l":"http://stackoverflow.com/questions/14965968/angularjs-browser-autofill-workaround-by-using-a-directive","q":"\n\n<p>When submitting a form in AngularJS and use the browser remember password functionality, and in a subsequent login attempt you let the browser fill in the login form with the username and password, the <code>$scope</code> model won't be changed based on the autofill.</p>\n\n<p>The only dirty hack I found is to use the following directive:</p>\n\n<pre><code>app.directive(\"xsInputSync\", [\"$timeout\" , function($timeout) {\n    return {\n        restrict : \"A\",\n        require: \"?ngModel\",\n        link : function(scope, element, attrs, ngModel) {\n            $timeout(function() {\n                if (ngModel.$viewValue &amp;&amp; ngModel.$viewValue !== element.val()) {\n                    scope.apply(function() {\n                        ngModel.$setViewValue(element.val());\n                    });\n                }\n                console.log(scope);\n                console.log(ngModel.$name);\n                console.log(scope[ngModel.$name]);\n            }, 3000);\n        }\n    };\n}]);\n</code></pre>\n\n<p>The problem is that the <code>ngModel.$setViewValue(element.val());</code> doesn't change the model nor the view based on the <code>element.val()</code> returned value. How can I accomplish that?</p>\n    ","a":"\n<p><a href=\"https://github.com/angular/angular.js/issues/1460\">Apparently this is a known issue with Angular and is currently open</a></p>\n\n<p>I'm not sure what you could do here besides some sort of work around like you're trying. It seems you're on the right track. I couldn't get my browser to try to remember a password for your plunk, so I'm not sure if this will work but have a look:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.directive('autoFillSync', function($timeout) {\n   return {\n      require: 'ngModel',\n      link: function(scope, elem, attrs, ngModel) {\n          var origVal = elem.val();\n          $timeout(function () {\n              var newVal = elem.val();\n              if(ngModel.$pristine &amp;&amp; origVal !== newVal) {\n                  ngModel.$setViewValue(newVal);\n              }\n          }, 500);\n      }\n   }\n});\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form name=\"myForm\" ng-submit=\"login()\"&gt;\n   &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n   &lt;input type=\"text\" id=\"username\" name=\"username\" ng-model=\"username\" auto-fill-sync/&gt;&lt;br/&gt;\n   &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n   &lt;input type=\"password\" id=\"password\" name=\"password\" ng-model=\"password\" auto-fill-sync/&gt;&lt;br/&gt;\n   &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I think you just need to simplify your approach a bit. The one thing I definitely recommend is to check <code>ngModel.$pristine</code> and make sure you're not overwriting some poor user's input. Also, 3 seconds is probably too long. You shouldn't have to call $apply() in a $timeout, BTW, it should queue a $digest for you automatically.</p>\n\n<p><strong>The real catch: Will your browser beat Angular to execution? What about my browser?</strong></p>\n\n<p>This is probably an unwinnable war, which is why Angular (or Knockout) hasn't been able to solve it readily. There's no guarantee of the state of the data in your input at the time of the directive's initial execution. Not even at the time of Angular's initialization.... So it's a tricky problem to solve.</p>\n    "},{"t":"AngularJS: How to run additional code after AngularJS has rendered a template?","l":"http://stackoverflow.com/questions/12304291/angularjs-how-to-run-additional-code-after-angularjs-has-rendered-a-template","q":"\n\n<p>I have an Angular template in the DOM.  When my controller gets new data from a service, it updates the model in the $scope, and re-renders the template.  All good so far.</p>\n\n<p>The issue is that I need to also do some extra work after the template has been re-rendered and is in the DOM (in this case a jQuery plugin).</p>\n\n<p>It seems like there should be an event to listen to, such as AfterRender, but I can't find any such thing.  Maybe a directive would be a way to go, but it seemed to fire too early as well.</p>\n\n<p>Here is a jsFiddle outlining my problem: <a href=\"http://jsfiddle.net/gorebash/uNREn/3/\">Fiddle-AngularIssue</a></p>\n\n<p><strong>== UPDATE ==</strong></p>\n\n<p>Based on helpful comments, I've accordingly switched to a directive to handle DOM manipulation, and implemented a model $watch inside the directive.  However, I still am having the same base issue; the code inside of the $watch event fires before the template has been compiled and inserted into the DOM, therefore, the jquery plugin is always evaluating an empty table.</p>\n\n<p>Interestingly, if I remove the async call the whole thing works fine, so that's a step in the right direction.</p>\n\n<p>Here is my updated Fiddle to reflect these changes: <a href=\"http://jsfiddle.net/uNREn/12/\">http://jsfiddle.net/uNREn/12/</a></p>\n    ","a":"\n<p>This post is old, but I change your code to:</p>\n\n<pre><code>scope.$watch(\"assignments\", function (value) {//I change here\n  var val = value || null;            \n  if (val)\n    element.dataTable({\"bDestroy\": true});\n  });\n}\n</code></pre>\n\n<p>see:\n<a href=\"http://jsfiddle.net/dnzY9/\" rel=\"nofollow\">http://jsfiddle.net/dnzY9/</a></p>\n\n<p>I hope it help you</p>\n    "},{"t":"How to reload or re-render the entire page using AngularJS","l":"http://stackoverflow.com/questions/16703215/how-to-reload-or-re-render-the-entire-page-using-angularjs","q":"\n\n<p>After rendering the entire page based on several user contexts and having made several <code>$http</code> requests, I want the user to be able to switch contexts and re-render everything again (resending all <code>$http</code> requests, etc). If I just redirect the user somewhere else, things work properly:</p>\n\n<pre><code>$scope.on_impersonate_success = function(response) {\n  //$window.location.reload(); // This cancels any current request\n  $location.path('/'); // This works as expected, if path != current_path\n};\n\n$scope.impersonate = function(username) {\n  return auth.impersonate(username)\n    .then($scope.on_impersonate_success, $scope.on_auth_failed);\n};\n</code></pre>\n\n<p>If I use <code>$window.location.reload()</code>, then some of the <code>$http</code> requests on <code>auth.impersonate(username)</code> that are waiting for a response get cancelled, so I can't use that. Also, the hack <code>$location.path($location.path())</code> doesn't work either (nothing happens).</p>\n\n<p>Is there another way to re-render the page without manually issuing all requests again?</p>\n    ","a":"\n<p>For the record, to force angular to re-render the current page, you can use:</p>\n\n<pre><code>$route.reload();\n</code></pre>\n\n<p>According to AngularJS <a href=\"http://docs.angularjs.org/api/ngRoute/service/%24route\">documentation</a>:</p>\n\n<blockquote>\n  <p>Causes $route service to reload the current route even if $location hasn't changed.</p>\n  \n  <p>As a result of that, ngView creates new scope, reinstantiates the controller.</p>\n</blockquote>\n    "},{"t":"Changing route doesn't scroll to top in the new page","l":"http://stackoverflow.com/questions/21055952/changing-route-doesnt-scroll-to-top-in-the-new-page","q":"\n\n<p>I've found some undesired, at least for me, behaviour when the route changes.\nIn the step 11 of the tutorial <a href=\"http://angular.github.io/angular-phonecat/step-11/app/#/phones\">http://angular.github.io/angular-phonecat/step-11/app/#/phones</a>\nyou can see the list of phones. If you scroll to the bottom and click on one of the latest, you can see that the scroll isn't at top, instead is kind of in the middle.</p>\n\n<p>I've found this in one of my apps too and I was wondering how can I get this to scroll to the top. I can do it mannually, but I think that there should be other elegant way to do this which I don't know.</p>\n\n<p>So, is there an elegant way to scroll to the top when the route changes?</p>\n\n<p>Thanks in advance!</p>\n    ","a":"\n<p>The problem is that your <strong>ngView</strong> retains the scroll position when it loads a new view. You can instruct <code>$anchorScroll</code> to \"scroll the viewport after the view is updated\" (the <a href=\"https://docs.angularjs.org/api/ngRoute/directive/ngView\">docs</a> are a bit vague, but scrolling here means <strong>scrolling to the top</strong> of the new view).</p>\n\n<p><strong>The solution</strong> is to add <code>autoscroll=\"true\"</code> to your ngView element:</p>\n\n<pre><code>&lt;div class=\"ng-view\" autoscroll=\"true\"&gt;&lt;/div&gt;\n</code></pre>\n    "},{"t":"AngularJS app.run() documentation?","l":"http://stackoverflow.com/questions/20663076/angularjs-app-run-documentation","q":"\n\n<p>How and where is app.run() used? After module definition, after app.config(), after app.controller()?</p>\n\n<p>I am adopting the <a href=\"http://www.breezejs.com/breeze-labs/breezeangularqjs\">BreezeJS Angular Q</a>, which asks that certain code be run in the app.run() function.</p>\n    ","a":"\n<p>Here's the calling order:</p>\n\n<ol>\n<li><code>app.config()</code>  </li>\n<li><code>app.run()</code>     </li>\n<li><em>directive's compile functions (if they are found in the dom)</em></li>\n<li><code>app.controller()</code></li>\n<li><em>directive's link functions (again if found)</em></li>\n</ol>\n\n<p>Here's a <a href=\"http://jsfiddle.net/ysq3m/\">simple demo</a> where you can watch each execute (and experiment if you'd like).</p>\n\n<p>From <a href=\"https://github.com/angular/angular.js/blob/ce669edfa14dc7eb7c389d2f82c9c98399a9009b/docs/content/guide/module.ngdoc\">Angular's module docs</a>:</p>\n\n<blockquote>\n  <p><strong>Run blocks</strong> - get executed after the injector is created and are\n  used to kickstart the\n      application. Only instances and constants can be injected into run blocks. This is to prevent\n      further system configuration during application run time.</p>\n  \n  <p>Run blocks are the closest thing in Angular to the main method. A run\n  block is the code which needs to run to kickstart the application. It\n  is executed after all of the service have been configured and the\n  injector has been created. Run blocks typically contain code which is\n  hard to unit-test, and for this reason should be declared in isolated\n  modules, so that they can be ignored in the unit-tests.</p>\n</blockquote>\n\n<p>One place you see run blocks used is for <a href=\"http://arthur.gonigberg.com/2013/06/29/angularjs-role-based-auth/\">authentication</a></p>\n    "},{"t":"How to do two-way filtering in angular.js?","l":"http://stackoverflow.com/questions/11616636/how-to-do-two-way-filtering-in-angular-js","q":"\n\n<p>One of the interesting things Angular.js can do is apply a filter to a particular databinding expression, which is a convenient way to apply, for example, culture-specific currency or date formatting of a model's properties. It is also nice to have computed properties on the scope. The problem is that neither of these features work with two-way databinding scenarios - only one-way databinding from the scope to the view. This seems to be a glaring omission in an otherwise excellent library - or am I missing something?</p>\n\n<p>In <a href=\"http://knockoutjs.com/\">KnockoutJS</a>, I could create a read/write computed property, which allowed me to specify a pair of functions, one which is called to get the value of the property, and one which is called when the property is set. This allowed me to implement, for example, culture-aware input - letting the user type \"$1.24\" and parsing that into a float in the ViewModel, and have changes in the ViewModel reflected in the input. </p>\n\n<p>The closest thing I could find similar to this is the use of $scope.$watch(propertyName, functionOrNGExpression); This allows me to have a function invoked when a property in the $scope changes. But this doesn't solve, for example, the culture-aware input problem. Notice the problems when I try to modify the $watched property within the $watch method itself:</p>\n\n<pre><code>$scope.$watch(\"property\", function (newValue, oldValue) {\n    $scope.outputMessage = \"oldValue: \" + oldValue + \" newValue: \" + newValue;\n    $scope.property = Globalize.parseFloat(newValue);\n});\n</code></pre>\n\n<p>(http://jsfiddle.net/gyZH8/2/)</p>\n\n<p>The input element gets very confused when the user starts typing. I improved it by splitting the property into two properties, one for the unparsed value and one for the parsed value:</p>\n\n<pre><code>$scope.visibleProperty= 0.0;\n$scope.hiddenProperty = 0.0;\n$scope.$watch(\"visibleProperty\", function (newValue, oldValue) {\n    $scope.outputMessage = \"oldValue: \" + oldValue + \" newValue: \" + newValue;\n    $scope.hiddenProperty = Globalize.parseFloat(newValue);\n});\n</code></pre>\n\n<p>(http://jsfiddle.net/XkPNv/1/)</p>\n\n<p>This was an improvement over the first version, but is a bit more verbose, and notice that there is still an issue of the parsedValue property of the scope changes (type something in the second input, which changes the parsedValue directly. notice the top input does not update). This might happen from a controller action or from loading data from a data service.</p>\n\n<p>Is there some easier way to implement this scenario using Angular.js? Am I missing some functionality in the documentation?</p>\n    ","a":"\n<p>It turns out that there's a very elegant solution to this, but it's not well documented.</p>\n\n<p>Formatting model values for display can be handled by the <code>|</code> operator and an angular <code>formatter</code>. It turns out that the ngModel that has not only a list of formatters but also a list of parsers.</p>\n\n<h2>1. Use <code>ng-model</code> to create the two-way data binding</h2>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"foo.bar\"&gt;&lt;/input&gt;\n</code></pre>\n\n<h2>2. Create a directive in your angular module that will be applied to the same element and that depends on the <code>ngModel</code> controller</h2>\n\n<pre><code>module.directive('lowercase', function() {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attr, ngModel) {\n            ...\n        }\n    };\n});\n</code></pre>\n\n<h2>3. Within the <code>link</code> method, add your custom converters to the <code>ngModel</code> controller</h2>\n\n<pre><code>function fromUser(text) {\n    return (text || '').toUpperCase();\n}\n\nfunction toUser(text) {\n    return (text || '').toLowerCase();\n}\nngModel.$parsers.push(fromUser);\nngModel.$formatters.push(toUser);\n</code></pre>\n\n<h2>4. Add your new directive to the same element that already has the <code>ngModel</code></h2>\n\n<pre><code>&lt;input type=\"text\" lowercase ng-model=\"foo.bar\"&gt;&lt;/input&gt;\n</code></pre>\n\n<p>Here's a <a href=\"http://jsfiddle.net/phaas/8jFpV/\">working example</a> that transforms text to lowercase in the <code>input</code> and back to uppercase in the model</p>\n\n<p>The <a href=\"http://docs.angularjs.org/api/ng.directive%3angModel.NgModelController\">API Documentation for the Model Controller</a> also has a brief explanation and an overview of the other available methods.</p>\n    "},{"t":"Testing service in Angular returns module is not defined","l":"http://stackoverflow.com/questions/13334749/testing-service-in-angular-returns-module-is-not-defined","q":"\n\n<p>I am trying to run the default service unit test in my project (Taken from the Angular Seed project on GitHub), but I keep getting the error \"module is not defined\".</p>\n\n<p>I have read that it could be something to do with the order of the <a href=\"https://github.com/vojtajina/testacular/issues/66\">referenced JavaScript files</a>, but I can't seem to get it to work, so hopefully one of you might be able to help.</p>\n\n<p>My configuration for the test looks like this:</p>\n\n<blockquote>\n  <p>basePath = '../';</p>\n  \n  <p>files = [<br>\n  'public/javascripts/lib/jquery-1.8.2.js',<br>\n  'public/javascripts/lib/angular.js',<br>\n  'public/javascripts/lib/angular-<em>.js',<br>\n   'public/app.js',<br>\n  'public/controllers/</em>.js',<br>\n  'public/directives.js',<br>\n  'public/filters.js',<br>\n  'public/services.js',<br>\n  JASMINE,<br>\n  JASMINE_ADAPTER,<br>\n  'public/javascripts/lib/angular-mocks.js',<br>\n  'test/unit/*.js' ];</p>\n  \n  <p>autoWatch = true;</p>\n  \n  <p>browsers = ['Chrome'];</p>\n  \n  <p>junitReporter = {   outputFile: 'test_out/unit.xml',   suite: 'unit'\n  };</p>\n</blockquote>\n\n<p>The service looks like the following:</p>\n\n<pre><code>angular.module('myApp.services', []).\n  value('version', '0.1');\n</code></pre>\n\n<p>The test looks like this:</p>\n\n<pre><code>'use strict';\n\ndescribe('service', function() {\n  beforeEach(module('myApp.services'));\n\n\n  describe('version', function() {\n    it('should return current version', inject(function(version) {\n      expect(version).toEqual('0.1');\n    }));\n  });\n});\n</code></pre>\n\n<p>And the error when running the test through testacular is this:</p>\n\n<blockquote>\n  <p>ReferenceError: module is not defined</p>\n</blockquote>\n    ","a":"\n<p>You are missing the <strong>angular-mocks.js</strong> file.</p>\n    "},{"t":"How do I use $rootScope in Angular to store variables?","l":"http://stackoverflow.com/questions/18880737/how-do-i-use-rootscope-in-angular-to-store-variables","q":"\n\n<p>How do I use <code>$rootScope</code> to store variables in a controller I want to later access in another controller? For example:</p>\n\n<pre><code>angular.module('myApp').controller('myCtrl', function($scope) {\n  var a = //something in the scope\n  //put it in the root scope\n});\n\nangular.module('myApp').controller('myCtrl2', function($scope) {\n  var b = //get var a from root scope somehow\n  //use var b\n});\n</code></pre>\n\n<p>How would I do this?</p>\n    ","a":"\n<p>Variables set at the root-scope are available to the controller scope via prototypical inheritance.</p>\n\n<p>Here is a modified version of @Nitish's demo that shows the relationship a bit clearer:\n<a href=\"http://jsfiddle.net/TmPk5/6/\">http://jsfiddle.net/TmPk5/6/</a></p>\n\n<p>Notice that the rootScope's variable is set when the module initializes, and then each of the inherited scope's get their own copy which can be set independently (the <code>change</code> function).  Also, he rootScope's value can be updated too (the <code>changeRs</code> function in <code>myCtrl2</code>)</p>\n\n<pre><code>angular.module('myApp', [])\n.run(function($rootScope) {\n    $rootScope.test = new Date();\n})\n.controller('myCtrl', function($scope, $rootScope) {\n  $scope.change = function() {\n        $scope.test = new Date();\n    };\n\n    $scope.getOrig = function() {\n        return $rootScope.test;\n    };\n})\n.controller('myCtrl2', function($scope, $rootScope) {\n    $scope.change = function() {\n        $scope.test = new Date();\n    };\n\n    $scope.changeRs = function() {\n        $rootScope.test = new Date();\n    };\n\n    $scope.getOrig = function() {\n        return $rootScope.test;\n    };\n});\n</code></pre>\n    "},{"t":"Pagination on a list using ng-repeat","l":"http://stackoverflow.com/questions/11581209/pagination-on-a-list-using-ng-repeat","q":"\n\n<p>I'm trying to add pages to my list. I followed the AngularJS tutorial, the one about smartphones and I'm trying to display only certain number of objects. Here is my html file:</p>\n\n<pre><code>  &lt;div class='container-fluid'&gt;\n    &lt;div class='row-fluid'&gt;\n        &lt;div class='span2'&gt;\n            Search: &lt;input ng-model='searchBar'&gt;\n            Sort by: \n            &lt;select ng-model='orderProp'&gt;\n                &lt;option value='name'&gt;Alphabetical&lt;/option&gt;\n                &lt;option value='age'&gt;Newest&lt;/option&gt;\n            &lt;/select&gt;\n            You selected the phones to be ordered by: {{orderProp}}\n        &lt;/div&gt;\n\n        &lt;div class='span10'&gt;\n          &lt;select ng-model='limit'&gt;\n            &lt;option value='5'&gt;Show 5 per page&lt;/option&gt;\n            &lt;option value='10'&gt;Show 10 per page&lt;/option&gt;\n            &lt;option value='15'&gt;Show 15 per page&lt;/option&gt;\n            &lt;option value='20'&gt;Show 20 per page&lt;/option&gt;\n          &lt;/select&gt;\n          &lt;ul class='phones'&gt;\n            &lt;li class='thumbnail' ng-repeat='phone in phones | filter:searchBar | orderBy:orderProp | limitTo:limit'&gt;\n                &lt;a href='#/phones/{{phone.id}}' class='thumb'&gt;&lt;img ng-src='{{phone.imageUrl}}'&gt;&lt;/a&gt;\n                &lt;a href='#/phones/{{phone.id}}'&gt;{{phone.name}}&lt;/a&gt;\n                &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n            &lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n</code></pre>\n\n<p>I've added a select tag with some values in order to limit the number of items that will be displayed. What I want now is to add the pagination to display the next 5, 10, etc.</p>\n\n<p>I have a controller that works with this:</p>\n\n<pre><code>function PhoneListCtrl($scope, Phone){\n    $scope.phones = Phone.query();\n    $scope.orderProp = 'age';\n    $scope.limit = 5;\n}\n</code></pre>\n\n<p>And also I have a module in order to retrieve the data from the json files.</p>\n\n<pre><code>angular.module('phonecatServices', ['ngResource']).\n    factory('Phone', function($resource){\n        return $resource('phones/:phoneId.json', {}, {\n            query: {method: 'GET', params:{phoneId:'phones'}, isArray:true}\n        });\n    });\n</code></pre>\n\n<p>Hope you can help me. Thanks in advance.</p>\n    ","a":"\n<p>If you have not too much data, you can definitely do pagination by just storing all the data in the browser and filtering what's visible at a certain time.  </p>\n\n<p>Here's a simple pagination example: <a href=\"http://jsfiddle.net/2ZzZB/56/\">http://jsfiddle.net/2ZzZB/56/</a></p>\n\n<p>That example was on the list of fiddles on the angular.js github wiki, which should be helpful: <a href=\"https://github.com/angular/angular.js/wiki/JsFiddle-Examples\">https://github.com/angular/angular.js/wiki/JsFiddle-Examples</a>  </p>\n\n<p>EDIT:\n<a href=\"http://jsfiddle.net/2ZzZB/16/\">http://jsfiddle.net/2ZzZB/16/</a> \nto \n<a href=\"http://jsfiddle.net/2ZzZB/56/\">http://jsfiddle.net/2ZzZB/56/</a> (won't show \"1/4.5\" if there is 45 results)    </p>\n    "},{"t":"What is the difference between the $parse, $interpolate and $compile services?","l":"http://stackoverflow.com/questions/17900588/what-is-the-difference-between-the-parse-interpolate-and-compile-services","q":"\n\n<p>What is the difference between <code>$parse</code>, <code>$interpolate</code> and <code>$compile</code> services?\nFor me they all do the same thing: take template and compile it to template-function.</p>\n    ","a":"\n<p>Those are all examples of services that aid in AngularJS view rendering (although <code>$parse</code> and  <code>$interpolate</code> could be used outside of this domain). To illustrate what is the role of each service let's take example of this piece of HTML:</p>\n\n<pre><code>var imgHtml = '&lt;img ng-src=\"/path/{{name}}.{{extension}}\"&gt;'\n</code></pre>\n\n<p>and values on the scope:</p>\n\n<pre><code>$scope.name = 'image';\n$scope.extension = 'jpg';\n</code></pre>\n\n<p>Given this markup here is what each service brings to the table:</p>\n\n<ul>\n<li><code>$compile</code> - it can take the whole markup and turn it into a linking function that, when executed against a certain scope will turn a piece of HTML text into dynamic, live DOM with all the directives (here: <code>ng-src</code>) reacting to model changes. One would invoke it as follows: $compile(imgHtml)($scope) and would get a DOM element with all the DOM event bounds as a result. <code>$compile</code> is making use of <code>$interpolate</code> (among other things) to do its job.</li>\n<li><code>$interpolate</code> knows how to process a string with embedded interpolation expressions, ex.: <code>/path/{{name}}.{{extension}}</code>. In other words it can take a string with interpolation expressions, a scope and turn it into the resulting text. One can think of the <code>$interpolation</code> service as a very simple, string-based template language. Given the above example one would use this service like: <code>$interpolate(\"/path/{{name}}.{{extension}}\")($scope)</code> to get the <code>path/image.jpg</code> string as a result.</li>\n<li><code>$parse</code> is used by <code>$interpolate</code> to evaluate individual expressions (<code>name</code>, <code>extension</code>) against a scope. It can be used to both <em>read</em> and <em>set</em> values for a given expression. For example, to evaluate the <code>name</code> expression one would do: <code>$parse('name')($scope)</code> to get the \"image\" value. To set the value one would do: <code>$parse('name').assign($scope, 'image2')</code></li>\n</ul>\n\n<p>All those services are working together to provide a live UI in AngularJS. But they operate on different levels:</p>\n\n<ul>\n<li><code>$parse</code> is concerned with individual expressions only (<code>name</code>, <code>extension</code>). It is a read-write service.</li>\n<li><code>$interpolate</code> is read only and is concerned with strings containing multiple expressions (<code>/path/{{name}}.{{extension}}</code>)</li>\n<li><code>$compile</code> is at the heart of AngularJS machinery and can turn HTML strings (with directives and interpolation expressions) into live DOM.</li>\n</ul>\n    "},{"t":"Dynamically add directives on angularjs","l":"http://stackoverflow.com/questions/15279244/dynamically-add-directives-on-angularjs","q":"\n\n<p>I have a very boiled down version of what I am doing that gets the problem across.</p>\n\n<p>I have a simple directive. Whenever you click an element it adds another one. However, it needs to be compiled first in order to render it correctly.</p>\n\n<p>My reasearch led me to $compile. But all the examples use a complicated structure that I don't really know how to apply here.</p>\n\n<p>Fiddle fiddles here: <a href=\"http://jsfiddle.net/paulocoelho/fBjbP/1/\">http://jsfiddle.net/paulocoelho/fBjbP/1/</a></p>\n\n<p>And the JS is here:</p>\n\n<pre><code>var module = angular.module('testApp', [])\n    .directive('test', function () {\n    return {\n        restrict: 'E',\n        template: '&lt;p&gt;{{text}}&lt;/p&gt;',\n        scope: {\n            text: '@text'\n        },\n        link:function(scope,element){\n            $( element ).click(function(){\n                // does not compile :(\n                $(this).parent().append(\"&lt;test text='n'&gt;&lt;/test&gt;\");\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>Solution by Josh David Miller:</p>\n\n<p><a href=\"http://jsfiddle.net/paulocoelho/fBjbP/2/\">http://jsfiddle.net/paulocoelho/fBjbP/2/</a></p>\n    ","a":"\n<p>You have a lot of pointless jQuery in there, but the $compile service is actually <em>super simple</em> in this case:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'test', function ( $compile ) {\n  return {\n    restrict: 'E',\n    scope: { text: '@' },\n    template: '&lt;p ng-click=\"add()\"&gt;{{text}}&lt;/p&gt;',\n    controller: function ( $scope, $element ) {\n      $scope.add = function () {\n        var el = $compile( \"&lt;test text='n'&gt;&lt;/test&gt;\" )( $scope );\n        $element.parent().append( el );\n      };\n    }\n  };\n});\n</code></pre>\n\n<p>You'll notice I refactored your directive too in order to follow some best practices. Let me know if you have questions about any of those.</p>\n    "},{"t":"Cannot get to $rootScope","l":"http://stackoverflow.com/questions/10486769/cannot-get-to-rootscope","q":"\n\n<p>The following file \"works\" (the sense that it does not throw any errors):</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"modx\"&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-1.0.0rc7.js\"&gt;&lt;/script&gt; \n    &lt;script&gt;\n        angular.module(\"modx\", [], function($routeProvider) {\n        });\n    &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>but this</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"modx\"&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-1.0.0rc7.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        angular.module(\"modx\", [], function($routeProvider, $rootScope) {\n        });\n    &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>gives the error:</p>\n\n<blockquote>\n  <p>Error: Unknown provider: $rootScope from modx<br>\n  Source File: <a href=\"http://code.angularjs.org/angular-1.0.0rc7.js\">http://code.angularjs.org/angular-1.0.0rc7.js</a><br>\n  Line: 2491</p>\n</blockquote>\n\n<p>WTF?</p>\n    ","a":"\n<p>You can not ask for instance during configuration phase - you can ask only for providers.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var app = angular.module('modx', []);\n\n// configure stuff\napp.config(function($routeProvider, $locationProvider) {\n  // you can inject any provider here\n});\n\n// run blocks\napp.run(function($rootScope) {\n  // you can inject any instance here\n});\n</code></pre>\n\n<p>See <a href=\"http://docs.angularjs.org/guide/module\">http://docs.angularjs.org/guide/module</a> for more info.</p>\n    "},{"t":"Math functions in angular bindings","l":"http://stackoverflow.com/questions/12740329/math-functions-in-angular-bindings","q":"\n\n<p>Is there a way to use math functions in angular bindings?</p>\n\n<p>e.g. </p>\n\n<pre><code>&lt;p&gt;The percentage is {{Math.round(100*count/total)}}%&lt;/p&gt;\n</code></pre>\n\n<p>This fiddle shows the problem</p>\n\n<p><a href=\"http://jsfiddle.net/ricick/jtA99/1/\">http://jsfiddle.net/ricick/jtA99/1/</a></p>\n    ","a":"\n<p>You have to inject <code>Math</code> into your scope, if you need to use it as\n<code>$scope</code> know nothing about Math.</p>\n\n<p>Simplest way, you can do</p>\n\n<pre><code>$scope.Math = window.Math;\n</code></pre>\n\n<p>in your controller.\nAngular way to do this correctly would be create a Math service, I guess.</p>\n    "},{"t":"angular ng-repeat in reverse","l":"http://stackoverflow.com/questions/15266671/angular-ng-repeat-in-reverse","q":"\n\n<p>How can i get a reversed array in angular?\ni'm trying to use orderBy filter, but it needs a predicate(e.g. 'name') to sort:</p>\n\n<pre><code>&lt;tr ng-repeat=\"friend in friends | orderBy:'name':true\"&gt;\n      &lt;td&gt;{{friend.name}}&lt;/td&gt;\n      &lt;td&gt;{{friend.phone}}&lt;/td&gt;\n      &lt;td&gt;{{friend.age}}&lt;/td&gt;\n&lt;tr&gt;\n</code></pre>\n\n<p>Is there a way to reverse original array, without sorting.\nlike that:</p>\n\n<pre><code>&lt;tr ng-repeat=\"friend in friends | orderBy:'':true\"&gt;\n      &lt;td&gt;{{friend.name}}&lt;/td&gt;\n      &lt;td&gt;{{friend.phone}}&lt;/td&gt;\n      &lt;td&gt;{{friend.age}}&lt;/td&gt;\n&lt;tr&gt;\n</code></pre>\n    ","a":"\n<p>I would suggest using a custom filter such as this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.filter('reverse', function() {\n  return function(items) {\n    return items.slice().reverse();\n  };\n});\n</code></pre>\n\n<p>Which can then be used like:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-repeat=\"friend in friends | reverse\"&gt;{{friend.name}}&lt;/div&gt;\n</code></pre>\n\n<p>See it working here: <a href=\"http://plnkr.co/edit/REU7mTsfG5HISCnLKEr8?p=preview\">Plunker Demonstration</a></p>\n\n<hr>\n\n<p>This filter can be customized to fit your needs as seen fit. I have provided other examples in the demonstration. Some options include checking that the variable is an array before performing the reverse, or making it more lenient to allow the reversal of more things such as strings.</p>\n    "},{"t":"What “things” can be injected into others in Angular.js?","l":"http://stackoverflow.com/questions/16828287/what-things-can-be-injected-into-others-in-angular-js","q":"\n\n<p>I'm having a little hard time understanding Dependency Injection in Angular. So my question is, can anyone explain which of the \"types\", like Controller, Factory, Provider, etc can we inject into others, including other instances of same \"type\"?</p>\n\n<p>What I'm actually looking for is this table filled with y/n. For cells with same row/column, that means injecting the value of one \"type\" into another another one with the same \"type\"</p>\n\n<pre><code>+----------------+----------+------------+-----------+---------+--------+----------+---------+-------+\n| Can we inject? | Constant | Controller | Directive | Factory | Filter | Provider | Service | Value |\n+----------------+----------+------------+-----------+---------+--------+----------+---------+-------+\n| Constant       |          |            |           |         |        |          |         |       |\n| Controller     |          |            |           |         |        |          |         |       |\n| Directive      |          |            |           |         |        |          |         |       |\n| Factory        |          |            |           |         |        |          |         |       |\n| Filter         |          |            |           |         |        |          |         |       |\n| Provider       |          |            |           |         |        |          |         |       |\n| Service        |          |            |           |         |        |          |         |       |\n| Value          |          |            |           |         |        |          |         |       |\n+----------------+----------+------------+-----------+---------+--------+----------+---------+-------+\n</code></pre>\n    ","a":"\n\n\n<p>Rather that just fill in the table with \"yes\" and \"no\" with no explanation, I'll go into a little bit more detail.</p>\n\n<p>[Note, added after finishing: this ended up being... quite a bit longer than I expected. There's a tl;dr at the bottom, but I hope this proves informational.]</p>\n\n<p>[This answer has also been added to the AngularJS wiki: <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection\">Understanding Dependency Injection</a>]</p>\n\n<hr>\n\n<h2>The Provider (<a href=\"http://docs.angularjs.org/api/AUTO.%24provide\"><code>$provide</code></a>)</h2>\n\n<p>The <code>$provide</code> service is responsible for telling Angular how to create new injectable things; these things are called <strong>services</strong>. Services are defined by things called <strong>providers</strong>, which is what you're creating when you use <code>$provide</code>. Defining a provider is done via the <code>provider</code> method on the <code>$provide</code> service, and you can get hold of the <code>$provide</code> service by asking for it to be injected into an application's <code>config</code> function. An example might be something like this:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>app.config(function($provide) {\n  $provide.provider('greeting', function() {\n    this.$get = function() {\n      return function(name) {\n        alert(\"Hello, \" + name);\n      };\n    };\n  });\n});\n</code></pre>\n\n<p>Here we've defined a new provider for a service called <code>greeting</code>; we can inject a variable named <code>greeting</code> into any injectable function (like controllers, more on that later) and Angular will call the provider's <code>$get</code> function in order to return a new instance of the service. In this case, the thing that will be injected is a function that takes a <code>name</code> parameter and <code>alert</code>s a message based on the name. We might use it like this:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>app.controller('MainController', function($scope, greeting) {\n  $scope.onClick = function() {\n    greeting('Ford Prefect');\n  };\n});\n</code></pre>\n\n<p><strong>Now here's the trick.</strong> <code>factory</code>, <code>service</code>, and <code>value</code> are all just shortcuts to define various parts of a provider--that is, they provide a means of defining a provider without having to type all that stuff out. For example, you could write that <strong>exact same provider</strong> just like this:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>app.config(function($provide) {\n  $provide.factory('greeting', function() {\n    return function(name) {\n      alert(\"Hello, \" + name);\n    };\n  });\n});\n</code></pre>\n\n<p>It's important to understand, so I'll rephrase: under the hood, AngularJS is calling the <strong>exact same code</strong> that we wrote above (the <code>$provide.provider</code> version) <em>for</em> us. There is literally, 100% no difference in the two versions. <code>value</code> works just the same way--if whatever we would return from our <code>$get</code> function (aka our <code>factory</code> function) is always exactly the same, we can write even less code using <code>value</code>. For example, since we always return the same function for our <code>greeting</code> service, we can use <code>value</code> to define it, too:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>app.config(function($provide) {\n  $provide.value('greeting', function(name) {\n    alert(\"Hello, \" + name);\n  });\n});\n</code></pre>\n\n<p>Again, this is 100% identical to the other two methods we've used to define this function--it's just a way to save some typing.</p>\n\n<p>Now you probably noticed this annoying <code>app.config(function($provide) { ... })</code> thing I've been using. Since defining new providers (via <em>any</em> of the given methods above) is so common, AngularJS exposes the <code>$provider</code> methods directly on the module object, to save even more typing:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var myMod = angular.module('myModule', []);\n\nmyMod.provider(\"greeting\", ...);\nmyMod.factory(\"greeting\", ...);\nmyMod.value(\"greeting\", ...);\n</code></pre>\n\n<p>These all do the same thing as the more verbose <code>app.config(...)</code> versions we used previously.</p>\n\n<p>The one injectable I've skipped so far is <code>constant</code>. For now, it's easy enough to say that it works just like <code>value</code>. We'll see there's one difference later.</p>\n\n<p><strong>To review</strong>, <em>all</em> these pieces of code are doing the <em>exact</em> same thing:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>myMod.provider('greeting', function() {\n  this.$get = function() {\n    return function(name) {\n      alert(\"Hello, \" + name);\n    };\n  };\n});\n\nmyMod.factory('greeting', function() {\n  return function(name) {\n    alert(\"Hello, \" + name);\n  };\n});\n\nmyMod.value('greeting', function(name) {\n  alert(\"Hello, \" + name);\n});\n</code></pre>\n\n<h2>The Injector (<a href=\"http://docs.angularjs.org/api/AUTO.%24injector\"><code>$injector</code></a>)</h2>\n\n<p>The injector is responsible for actually creating instances of our services using the code we provided via <code>$provide</code> (no pun intended). Any time you write a function that takes injected arguments, you're seeing the injector at work. Each AngularJS application has a single <code>$injector</code> that gets created when the application first starts; you can get a hold of it by injecting <code>$injector</code> into any injectable function (yes, <code>$injector</code> knows how to inject itself!)</p>\n\n<p>Once you have <code>$injector</code>, you can get an instance of a defined service by calling <code>get</code> on it with the name of the service. For example,</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var greeting = $injector.get('greeting');\ngreeting('Ford Prefect');\n</code></pre>\n\n<p>The injector is also responsible for injecting services into functions; for example, you can magically inject services into any function you have using the injector's <code>invoke</code> method;</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var myFunction = function(greeting) {\n  greeting('Ford Prefect');\n};\n$injector.invoke(myFunction);\n</code></pre>\n\n<p>Its worth noting that the injector will only create an instance of a service <em>once</em>. It then caches whatever the provider returns by the service's name; the next time you ask for the service, you'll actually get the exact same object.</p>\n\n<p>So, to answer your question, you can inject services into <strong>any function that is called with <code>$injector.invoke</code></strong>. This includes</p>\n\n<ul>\n<li>controller definition functions</li>\n<li>directive definition functions</li>\n<li>filter definition functions</li>\n<li>the <code>$get</code> methods of providers (aka the <code>factory</code> definition functions)</li>\n</ul>\n\n<p>Since <code>constant</code>s and <code>value</code>s always return a static value, they are not invoked via the injector, and thus you cannot inject then with anything.</p>\n\n<h2>Configuring Providers</h2>\n\n<p>You may be wondering why anyone would bother to set up a full-fledged provider with the <code>provide</code> method if <code>factory</code>, <code>value</code>, etc. are so much easier. The answer is that providers allow a lot of configuration. We've already mentioned that when you create a service via the provider (or any of the shortcuts Angular gives you), you create a new provider that defines how that service is constructed. What I <em>didn't</em> mention is that these providers can be injected into <code>config</code> sections of your application so you can interact with them!</p>\n\n<p>First, Angular runs your application in two-phases--the <code>config</code> and <code>run</code> phases. The <code>config</code> phase, as we've seen, is where you can set up any providers as necessary. This is also where directives, controllers, filters, and the like get set up. The <code>run</code> phase, as you might guess, is where Angular actually compiles your DOM and starts up your app.</p>\n\n<p>You can add additional code to be run in these phases with the <code>myMod.config</code> and <code>myMod.run</code> functions--each take a function to run during that specific phase. As we saw in the first section, these functions are injectable--we injected the built-in <code>$provide</code> service in our very first code sample. However, what's worth noting is that <strong>during the <code>config</code> phase, only providers can be injected</strong> (with the exception of the services in the <code>AUTO</code> module--<code>$provide</code> and <code>$injector</code>).</p>\n\n<p>For example, the following is <strong>not allowed</strong>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>myMod.config(function(greeting) {\n  // WON'T WORK -- greeting is an *instance* of a service.\n  // Only providers for services can be injected in config blocks.\n});\n</code></pre>\n\n<p>What you <em>do</em> have access to are any <em>providers</em> for services you've made:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>myMod.config(function(greetingProvider) {\n  // a-ok!\n});\n</code></pre>\n\n<p>There is one important exception: <code>constant</code>s, since they cannot be changed, are allowed to be injected inside <code>config</code> blocks (this is how they differ from <code>value</code>s). They are accessed by their name alone (no <code>Provider</code> suffix necessary).</p>\n\n<p>Whenever you defined a provider for a service, that provider gets named <code>serviceProvider</code>, where <code>service</code> is the name of the service. Now we can use the power of providers do do some more complicated stuff!</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>myMod.provider('greeting', function() {\n  var text = 'Hello, ';\n\n  this.setText = function(value) {\n    text = value;\n  };\n\n  this.$get = function() {\n    return function(name) {\n      alert(text + name);\n    };\n  };\n});\n\nmyMod.config(function(greetingProvider) {\n  greetingProvider.setText(\"Howdy there, \");\n});\n\nmyMod.run(function(greeting) {\n  greeting('Ford Prefect');\n});\n</code></pre>\n\n<p>Now we have a function on our provider called <code>setText</code> that we can use to customize our <code>alert</code>; we can get access to this provider in a <code>config</code> block to call this method and customize the service. When we finally run our app, we can grab the <code>greeting</code> service, and try it out to see that our customization took effect.</p>\n\n<p>Since this is a more complex example, here's a working demonstration: <a href=\"http://jsfiddle.net/BinaryMuse/9GjYg/\">http://jsfiddle.net/BinaryMuse/9GjYg/</a></p>\n\n<h2>Controllers (<a href=\"http://docs.angularjs.org/api/ng.%24controller\"><code>$controller</code></a>)</h2>\n\n<p>Controller functions can be injected into, but controllers themselves can't be injected into other things. That's because controllers aren't created via the provider. Instead, there is a built-in Angular service called <code>$controller</code> that is responsible for setting up your controllers. When you call <code>myMod.controller(...)</code>, you're actually accessing <a href=\"http://docs.angularjs.org/api/ng.%24controllerProvider\">this service's provider</a>, just like in the last section.</p>\n\n<p>For example, when you define a controller like this:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>myMod.controller('MainController', function($scope) {\n  // ...\n});\n</code></pre>\n\n<p>What you're actually doing is this:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>myMod.config(function($controllerProvider) {\n  $controllerProvider.register('MainController', function($scope) {\n    // ...\n  });\n});\n</code></pre>\n\n<p>Later, when Angular needs to create an instance of your controller, it uses the <code>$controller</code> service (which in turn uses the <code>$injector</code> to invoke your controller function so it gets its dependencies injected too).</p>\n\n<h2>Filters and Directives</h2>\n\n<p><code>filter</code> and <code>directive</code> work exactly the same way as <code>controller</code>; <code>filter</code> uses a service called <code>$filter</code> and its provider <code>$filterProvider</code>, while <code>directive</code> uses a service called <code>$compile</code> and its provider <code>$compileProvider</code>. Some links:</p>\n\n<ul>\n<li>$filter: <a href=\"http://docs.angularjs.org/api/ng.%24filter\">http://docs.angularjs.org/api/ng.$filter</a></li>\n<li>$filterProvider: <a href=\"http://docs.angularjs.org/api/ng.%24filterProvider\">http://docs.angularjs.org/api/ng.$filterProvider</a></li>\n<li>$compile: <a href=\"http://docs.angularjs.org/api/ng.%24compile\">http://docs.angularjs.org/api/ng.$compile</a></li>\n<li>$compileProvider: <a href=\"http://docs.angularjs.org/api/ng.%24compileProvider\">http://docs.angularjs.org/api/ng.$compileProvider</a></li>\n</ul>\n\n<p>As per the other examples, <code>myMod.filter</code> and <code>myMod.directive</code> are shortcuts to configuring these services.</p>\n\n<hr>\n\n<p><img src=\"https://dl.dropboxusercontent.com/u/113308/dnd/so/tldr.jpg\" alt=\"tl;dr\"></p>\n\n<p>So, to summarize, any function that gets called with <code>$injector.invoke</code> <strong>can be injected into</strong>. This includes, from your chart (but is not limited to):</p>\n\n<ul>\n<li>controller</li>\n<li>directive</li>\n<li>factory</li>\n<li>filter</li>\n<li>provider <code>$get</code> (when defining provider as an object)</li>\n<li>provider function (when defining provider as a constructor function)</li>\n<li>service</li>\n</ul>\n\n<p>The provider creates new services <strong>that can be injected into things</strong>. This includes:</p>\n\n<ul>\n<li>constant</li>\n<li>factory</li>\n<li>provider</li>\n<li>service</li>\n<li>value</li>\n</ul>\n\n<p>That said, built-in services like <code>$controller</code> and <code>$filter</code> <em>can</em> be injected, and you can <em>use</em> those service to get hold of the new filters and controllers you defined with those methods (even though the things you defined aren't, by themselves, able to be injected into things).</p>\n\n<p>Other than that, any injector-invoked function can be injected with any provider-provided service--there is no restriction (other than the <code>config</code> and <code>run</code> differences listed herein).</p>\n    "},{"t":"How to add many functions in ONE ng-click?","l":"http://stackoverflow.com/questions/16813945/how-to-add-many-functions-in-one-ng-click","q":"\n\n<p>Ive be looking for how to execute this but I can't find anything related so far, :( \nI could nest both functions yes but Im just wondering if this is possible?\nI'd like to do this literally:</p>\n\n<pre><code>&lt;td&gt;&lt;button class=\"btn\" ng-click=\"edit($index) open()\"&gt;Open me!&lt;/button&gt;&lt;/td&gt;\n</code></pre>\n\n<p>My JS code at the moment:</p>\n\n<pre><code>$scope.open = function () {\n  $scope.shouldBeOpen = true;\n};      \n\n$scope.edit = function(index){\n\n  var content_1, content_2;\n      content_1 = $scope.people[index].name;\n      content_2 = $scope.people[index].age;\n\n  console.log(content_1);\n};\n</code></pre>\n\n<p>I'd like to call two functions with just one click, how can I do this in angularJS?\nI thought it'd be straight forward like in CSS when you add multiple classes...but it's not :(</p>\n\n<p>Thanks for yr time</p>\n    ","a":"\n<p>You have 2 options :</p>\n\n<ol>\n<li><p>Create a third method that wrap both methods. Advantage here is that you put less logic in your template.</p></li>\n<li><p>Otherwise if you want to add 2 calls in ng-click you can add ';' after <code>edit($index)</code> like this</p>\n\n<p><code>ng-click=\"edit($index); open()\"</code></p></li>\n</ol>\n\n<p>See here : <a href=\"http://jsfiddle.net/laguiz/ehTy6/\">http://jsfiddle.net/laguiz/ehTy6/</a></p>\n    "},{"t":"AngularJS does not send hidden field value","l":"http://stackoverflow.com/questions/18446359/angularjs-does-not-send-hidden-field-value","q":"\n\n<p>For a specific use case I have to submit a single form the \"old way\". Means, I use a form with action=\"\". The response is streamed, so I am not reloading the page. I am completely aware that a typical AngularJS app would not submit a form that way, but so far I have no other choice.</p>\n\n<p>That said, i tried to populate some hidden fields from Angular:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"someData\" ng-model=\"data\" /&gt; {{data}}\n</code></pre>\n\n<p>Please note, the correct value in data is shown.</p>\n\n<p>The form looks like a standard form:</p>\n\n<pre><code>&lt;form id=\"aaa\" name=\"aaa\" action=\"/reports/aaa.html\" method=\"post\"&gt;\n...\n&lt;input type=\"submit\" value=\"Export\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>If i hit submit, no value is sent to the server. If I change the input field to type \"text\" it works as expected. My assumption is the hidden field is not really populated, while the text field actually is shown due two-way-binding.</p>\n\n<p>Any ideas how I can submit a hidden field populated by AngularJS?</p>\n    ","a":"\n<p>You cannot use double binding with hidden field.\nThe solution is to use brackets :</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"someData\" value=\"{{data}}\" /&gt; {{data}}\n</code></pre>\n\n<p>EDIT : See this thread on github : <a href=\"https://github.com/angular/angular.js/pull/2574\">https://github.com/angular/angular.js/pull/2574</a></p>\n\n<p>EDIT:</p>\n\n<p>Since Angular 1.2, you can use 'ng-value' directive to bind an expression to the value attribute of input. This directive should be used with input radio or checkbox but works well with hidden input.</p>\n\n<p>Here is the solution using ng-value:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"someData\" ng-value=\"data\" /&gt;\n</code></pre>\n\n<p>Here is a fiddle using ng-value with an hidden input: <a href=\"http://jsfiddle.net/6SD9N\">http://jsfiddle.net/6SD9N</a></p>\n    "},{"t":"Angular JS - Angular UI Router - Reloading current state - refresh data","l":"http://stackoverflow.com/questions/21714655/angular-js-angular-ui-router-reloading-current-state-refresh-data","q":"\n\n<p>I'm using Angular UI Router and would like to reload the current state and refresh all data / re-run the controllers for the current state and it's parent.</p>\n\n<p>I have 3 state levels: <strong>directory.organisations.details</strong></p>\n\n<p><strong>directory.organisations</strong> contains a table with a list of organisations. Clicking on an item in the table loads <strong>directory.organisations.details</strong> with $StateParams passing the ID of the item. So in the details state I load the details for this item, edit them and then save data. All fine so far. </p>\n\n<p>Now I need to reload this state and refresh all the data.</p>\n\n<p>I have tried:</p>\n\n<pre><code> $state.transitionTo('directory.organisations');\n</code></pre>\n\n<p>Which goes to the parent state but doesn't reload the controller, I guess because the path hasn't changed. Ideally I just want to stay in the <strong>directory.organisations.details</strong> state and refresh all data in the parent too.</p>\n\n<p>I have also tried:</p>\n\n<pre><code>$state.reload()\n</code></pre>\n\n<p>I have seen this on the API WIKI for $state.reload \"(bug with controllers reinstantiating right now, fixing soon).\"</p>\n\n<p>Any help would be appreciated?</p>\n    ","a":"\n<p>This solution works in AngularJS V.1.2.2:</p>\n\n<pre><code>$state.transitionTo($state.current, $stateParams, {\n    reload: true,\n    inherit: false,\n    notify: true\n});\n</code></pre>\n    "},{"t":"Recursion in Angular directives","l":"http://stackoverflow.com/questions/14430655/recursion-in-angular-directives","q":"\n\n<p>There are a couple of popular recursive angular directive Q&amp;A's out there, which all come down to one of the following solutions:</p>\n\n<ul>\n<li>manually incrementally 'compile' HTML based on runtime scope state\n<ul>\n<li><a href=\"http://jsfiddle.net/galloc/KNM4q/1/\">example 1</a> [<a href=\"http://stackoverflow.com/questions/11854514/is-it-possible-to-make-a-tree-view-with-angular\">stackoverflow</a>]</li>\n<li><a href=\"http://jsfiddle.net/IgorMinar/CHVbb/423/\">example 2</a> [<a href=\"https://github.com/angular/angular.js/wiki/JsFiddle-Examples\">angular jsfiddles page</a>]</li>\n</ul></li>\n<li>don't use a directive at all, but a &lt;script&gt; template which refers to itself\n<ul>\n<li><a href=\"http://jsfiddle.net/ganarajpr/vzvmS/3/\">example 1</a> [<a href=\"https://groups.google.com/forum/#!topic/angular/I5Z5oglW6Xw\">google groups</a>]</li>\n</ul></li>\n</ul>\n\n<p><strong>The first one</strong> has the problem that you can't remove previously compiled code unless you comprehensibly manage the manual compile process. <strong>The second approach</strong> has the problem of... not being a directive and missing out on its powerful capabilities, but more urgently, it can't be parameterised the same way a directive can be; it's simply bound to a new controller instance.</p>\n\n<p>I've been playing with manually doing an <code>angular.bootstrap</code> or <code>@compile()</code> in the link function, but that leaves me with the problem of manually keeping track of elements to remove and add.</p>\n\n<p>Is there a good way to have a parameterized recursive pattern that manages adding/removing elements to reflect runtime state? That is to say, a tree with a add/delete node button and some input field whose value is passed down a node's child nodes. Perhaps a combination of the second approach with chained scopes (but I have no idea how to do this)?</p>\n    ","a":"\n<p>Inspired by the solutions described in the thread mentioned by @dnc253, I abstracted the recursion functionality <a href=\"https://github.com/marklagendijk/angular-recursion\">into a service</a>.</p>\n\n<pre><code>module.factory('RecursionHelper', ['$compile', function($compile){\n    return {\n        /**\n         * Manually compiles the element, fixing the recursion loop.\n         * @param element\n         * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.\n         * @returns An object containing the linking functions.\n         */\n        compile: function(element, link){\n            // Normalize the link parameter\n            if(angular.isFunction(link)){\n                link = { post: link };\n            }\n\n            // Break the recursion loop by removing the contents\n            var contents = element.contents().remove();\n            var compiledContents;\n            return {\n                pre: (link &amp;&amp; link.pre) ? link.pre : null,\n                /**\n                 * Compiles and re-adds the contents\n                 */\n                post: function(scope, element){\n                    // Compile the contents\n                    if(!compiledContents){\n                        compiledContents = $compile(contents);\n                    }\n                    // Re-add the compiled contents to the element\n                    compiledContents(scope, function(clone){\n                        element.append(clone);\n                    });\n\n                    // Call the post-linking function, if any\n                    if(link &amp;&amp; link.post){\n                        link.post.apply(null, arguments);\n                    }\n                }\n            };\n        }\n    };\n}]);\n</code></pre>\n\n<p>Which is used as follows:</p>\n\n<pre><code>module.directive(\"tree\", function(RecursionHelper) {\n    return {\n        restrict: \"E\",\n        scope: {family: '='},\n        template: \n            '&lt;p&gt;{{ family.name }}&lt;/p&gt;'+\n            '&lt;ul&gt;' + \n                '&lt;li ng-repeat=\"child in family.children\"&gt;' + \n                    '&lt;tree family=\"child\"&gt;&lt;/tree&gt;' +\n                '&lt;/li&gt;' +\n            '&lt;/ul&gt;',\n        compile: function(element) {\n            // Use the compile function from the RecursionHelper,\n            // And return the linking function(s) which it returns\n            return RecursionHelper.compile(element);\n        }\n    };\n});\n</code></pre>\n\n<p>See this <a href=\"http://plnkr.co/edit/JAIyolmqPqO9KsynSiZp?p=preview\">Plunker</a> for a demo.\nI like this solution best because:</p>\n\n<ol>\n<li>You don't need an special directive which makes your html less clean.</li>\n<li>The recursion logic is abstracted away into the RecursionHelper service, so you keep your directives clean.</li>\n</ol>\n    "},{"t":"How to validate inputs dynamically created using ng-repeat, ng-show (angular)","l":"http://stackoverflow.com/questions/12044277/how-to-validate-inputs-dynamically-created-using-ng-repeat-ng-show-angular","q":"\n\n<p>I have a table that is created using ng-reapeat. I want to add validation to each element in the table. The problem is that each input cell has the same name as the cell above and below it. I attempted to use the <code>{{$index}}</code> value to name the inputs, but despite the string literals in HTML appearing correct, it is now working.</p>\n\n<p>Here is my code as of now:\n</p>\n\n<pre><code>&lt;td&gt;\n    &lt;input ng-model=\"r.QTY\" class=\"span1\" name=\"QTY{{$index}}\" ng-pattern=\"/^[\\d]*\\.?[\\d]*$/\" required/&gt;\n    &lt;span class=\"alert-error\" ng-show=\"form.QTY{{$index}}.$error.pattern\"&gt;&lt;strong&gt;Requires a number.&lt;/strong&gt;&lt;/span&gt;\n    &lt;span class=\"alert-error\" ng-show=\"form.QTY{{$index}}.$error.required\"&gt;&lt;strong&gt;*Required&lt;/strong&gt;&lt;/span&gt;\n&lt;/td&gt;\n</code></pre>\n\n<p>I have tried removing the `{{}}' from index, but that does not work either. As of now, the validation property of the input is working correctly, but the error message is not displayed.</p>\n\n<p>Anyone have any suggestions?</p>\n\n<p><strong>Edit:</strong> In addition to the great answers below, here is a blog article that covers this issue in more detail: <a href=\"http://www.thebhwgroup.com/blog/2014/08/angularjs-html-form-design-part-2/\">http://www.thebhwgroup.com/blog/2014/08/angularjs-html-form-design-part-2/</a></p>\n    ","a":"\n<p>AngularJS relies on input names to expose validation errors.</p>\n\n<p>Unfortunately, as of today, it is not possible (without using a custom directive) to dynamically generate a name of an input. Indeed, checking <a href=\"http://docs.angularjs.org/api/angular.module.ng.$compileProvider.directive.input\">input docs</a> we can see that the name attribute accepts a string only.</p>\n\n<p>To solve the 'dynamic name' problem <strong>you need to create an inner form (see <a href=\"http://docs.angularjs.org/api/ng.directive:ngForm\">ng-form</a>)</strong>:</p>\n\n<pre><code>&lt;div ng-repeat=\"social in formData.socials\"&gt;\n      &lt;ng-form name=\"urlForm\"&gt;\n            &lt;input type=\"url\" name=\"socialUrl\" ng-model=\"social.url\"&gt;\n            &lt;span class=\"alert error\" ng-show=\"urlForm.socialUrl.$error.url\"&gt;URL error&lt;/span&gt;\n      &lt;/ng-form&gt;\n  &lt;/div&gt;\n</code></pre>\n\n<p>The other alternative would be to write a custom directive for this.</p>\n\n<p>Here is the jsFiddle showing the usage of the ngForm: <a href=\"http://jsfiddle.net/pkozlowski_opensource/XK2ZT/2/\">http://jsfiddle.net/pkozlowski_opensource/XK2ZT/2/</a></p>\n    "},{"t":"How to implement history.back() in angular.js","l":"http://stackoverflow.com/questions/14070285/how-to-implement-history-back-in-angular-js","q":"\n\n<p>I have directive which is site header with back button and i want on click to go back to the previous page how do i do it in the angular way?</p>\n\n<p>i have tried:</p>\n\n<pre><code>&lt;header class=\"title\"&gt;\n&lt;a class=\"back\" ng-class=\"icons\"&gt;&lt;img src=\"../media/icons/right_circular.png\" ng-click=\"history.back()\" /&gt;&lt;/a&gt;\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;a href=\"/home\" class=\"home\" ng-class=\"icons\"&gt;&lt;img src=\"../media/icons/53-house.png\" /&gt;&lt;/a&gt;   \n&lt;/header&gt;\n</code></pre>\n\n<p>and this is the directive js:</p>\n\n<pre><code>myApp.directive('siteHeader', function () {\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/siteHeader.html',\n        scope: {\n            title: '@title',\n            icons: '@icons'\n        }\n    };\n});\n</code></pre>\n\n<p>but nothing happens. i looked in the angular.js api about <a href=\"http://docs.angularjs.org/api/ng.%24location\">$location</a> but did'nt find anything about back button or history.back().</p>\n    ","a":"\n<p>You need to use a link function in your directive:</p>\n\n<pre><code>link: function(scope, element, attrs) {\n     element.on('click', function() {\n         $window.history.back();\n     });\n }\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/asgoth/WaRKv/\">jsFiddle</a>.</p>\n    "},{"t":"AngularJS toggle class using ng-class","l":"http://stackoverflow.com/questions/15397252/angularjs-toggle-class-using-ng-class","q":"\n\n<p>I am trying to toggle the class of an element using <code>ng-class</code></p>\n\n<pre><code>&lt;button class=\"btn\"&gt;\n  &lt;i ng-class=\"{(isAutoScroll()) ? 'icon-autoscroll' : 'icon-autoscroll-disabled'}\"&gt;&lt;/i&gt;\n&lt;/button&gt;\n</code></pre>\n\n<p>isAutoScroll():</p>\n\n<pre><code>$scope.isAutoScroll = function()\n{\n    $scope.autoScroll = ($scope.autoScroll) ? false : true;\n    return $scope.autoScroll;\n}\n</code></pre>\n\n<p>Basically, if <code>$scope.autoScroll</code> is true, I want ng-class to be <code>icon-autoscroll</code> and if its false, I want it to be <code>icon-autoscroll-disabled</code></p>\n\n<p>What I have now isn't working and is producing this error in the console</p>\n\n<p><code>Error: Lexer Error: Unexpected next character  at columns 18-18 [?] in expression [{(isAutoScroll()) ? 'icon-autoscroll' : 'icon-autoscroll-disabled'}].</code></p>\n\n<p>How do I correctly do this?</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>solution 1: (outdated)</p>\n\n<pre><code>&lt;button class=\"btn\" ng-click=\"autoScroll = !autoScroll\"&gt;\n  &lt;i ng-class=\"{'icon-autoscroll': autoScroll, 'icon-autoscroll-disabled': !autoScroll}\"&gt;&lt;/i&gt;\n&lt;/button&gt;\n</code></pre>\n\n<p><strong>EDIT 2</strong></p>\n\n<p>solution 2:</p>\n\n<p>I wanted to update the solution as Solution 3 provided by Stewie should be the one used. It is the most standard when it comes to ternary operator (and to me easiest to read). The solution would be</p>\n\n<pre><code>&lt;button class=\"btn\" ng-click=\"autoScroll = !autoScroll\"&gt;\n  &lt;i ng-class=\"autoScroll ? 'icon-autoscroll' : 'icon-autoscroll-disabled'\"&gt;&lt;/i&gt;\n&lt;/button&gt;\n</code></pre>\n\n<p>translates to:</p>\n\n<p><code>if (autoScroll == true) ?</code> //use class <code>'icon-autoscroll' :</code> //else use <code>'icon-autoscroll-disabled'</code></p>\n    ","a":"\n<p>How to use conditional in ng-class: </p>\n\n<p>Solution 1:</p>\n\n<pre><code>&lt;i ng-class=\"{'icon-autoscroll': autoScroll, 'icon-autoscroll-disabled': !autoScroll}\"&gt;&lt;/i&gt;\n</code></pre>\n\n<p>Solution 2:</p>\n\n<pre><code>&lt;i ng-class=\"{true: 'icon-autoscroll', false: 'icon-autoscroll-disabled'}[autoScroll]\"&gt;&lt;/i&gt;\n</code></pre>\n\n<p>Solution 3 (angular v.1.1.4+ introduced support for ternary operator):</p>\n\n<pre><code>&lt;i ng-class=\"autoScroll ? 'icon-autoscroll' : 'icon-autoscroll-disabled'\"&gt;&lt;/i&gt;\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/EdiNmaQYbVSftTuvNVpG\">Plunker</a></p>\n    "},{"t":"What are “decorators” and how are they used?","l":"http://stackoverflow.com/questions/16075982/what-are-decorators-and-how-are-they-used","q":"\n\n<p>I'm curious what exactly decorators are in AngularJS. There isn't much information online for decorators save for a blurb in the <a href=\"http://docs.angularjs.org/api/AUTO.$provide#decorator\">AngularJS documentation</a> and a brief (albeit interesting) mention in a <a href=\"http://www.youtube.com/watch?v=VxuN6WO3tIA\">youtube video</a>.</p>\n\n<p>As the Angular guys put it a decorator is:</p>\n\n<blockquote>\n  <p>Decoration of service, allows the decorator to intercept the service\n  instance creation. The returned instance may be the original instance,\n  or a new instance which delegates to the original instance.</p>\n</blockquote>\n\n<p>I don't really know what that <em>means</em>, and I'm not sure why you would separate this logic from the service itself. For example if I wanted to return something different under different conditions I would just pass different arguments to the relevant functions or use another function sharing that private state.</p>\n\n<p>I'm still kind of an AngularJS noob so I'm sure it's just ignorance and/or bad habits I've picked up.</p>\n    ","a":"\n<p>A good use case of <code>$provide.decorator</code> is when you need to do minor \"tweak\" on some third-party/upstream service, on which your module depends, while leaving the service intact (because you are not the owner/maintainer of the service). <a href=\"http://plnkr.co/edit/lj9srM2KXZmwmTxLb1p7?p=preview\">Here</a> is a demonstration on plunkr.</p>\n    "},{"t":"What is the best way to conditionally apply attributes in Angular?","l":"http://stackoverflow.com/questions/15696416/what-is-the-best-way-to-conditionally-apply-attributes-in-angular","q":"\n\n<p>I need to be able to add for example \"contenteditable\" to elements, based on a boolean variable on scope.</p>\n\n<p>Example use:</p>\n\n<pre><code>&lt;h1 attrs=\"{'contenteditable=\\\"true\\\"': editMode}\"&gt;{{content.title}}&lt;/h1&gt;\n</code></pre>\n\n<p>Would result in contenteditable=true being added to the element if <code>$scope.editMode</code> was set to <code>true</code>.\nIs there some easy way to implement this ng-class like attribute behavior? I'm considering writing a directive and sharing if not.</p>\n\n<p><strong>Edit:</strong> \nI can see that there seems to be some similarities between my proposed attrs directive and <a href=\"https://github.com/angular/angular.js/commit/55027132f3d57e5dcf94683e6e6bd7b0aae0087d#L1L233\">ng-bind-attrs, but it was removed in 1.0.0.rc3</a>, why so?</p>\n    ","a":"\n<p>I am using the following to conditionally set the class attr when ng-class can't be used (for example when styling SVG):</p>\n\n<pre><code>ng-attr-class=\"{{someBoolean &amp;&amp; 'class-when-true' || 'class-when-false' }}\"\n</code></pre>\n\n<p>The same approach should work for other attribute types.</p>\n\n<p>(I think you need to be on latest unstable Angular to use ng-attr-, I'm currently on 1.1.4)</p>\n    "},{"t":"Can you change a path without reloading the controller in AngularJS?","l":"http://stackoverflow.com/questions/14974271/can-you-change-a-path-without-reloading-the-controller-in-angularjs","q":"\n\n<p>It's been asked before, and from the answers it doesn't look good. I'd like to ask with this sample code in consideration...</p>\n\n<p>My app loads the current item in the service that provides it. There are several controllers that manipulate the item data without the item being reloaded.</p>\n\n<p>My controllers will reload the item if it's not set yet, otherwise, it will use the currently loaded item from the service, between controllers.</p>\n\n<p><strong>Problem</strong>: I would like to use different paths for each controller without reloading Item.html.</p>\n\n<p>1) Is that possible?</p>\n\n<p>2) If that is not possible, is there a better approach to having a path per controller vs what I came up with here?</p>\n\n<p>app.js</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var app = angular.module('myModule', []).\n  config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n      when('/items', {templateUrl: 'partials/items.html',   controller: ItemsCtrl}).\n      when('/items/:itemId/foo', {templateUrl: 'partials/item.html', controller: ItemFooCtrl}).\n      when('/items/:itemId/bar', {templateUrl: 'partials/item.html', controller: ItemBarCtrl}).\n      otherwise({redirectTo: '/items'});\n    }]);\n</code></pre>\n\n<p>Item.html</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!-- Menu --&gt;\n&lt;a id=\"fooTab\" my-active-directive=\"view.name\" href=\"#/item/{{item.id}}/foo\"&gt;Foo&lt;/a&gt;\n&lt;a id=\"barTab\" my-active-directive=\"view.name\" href=\"#/item/{{item.id}}/bar\"&gt;Bar&lt;/a&gt;\n&lt;!-- Content --&gt;\n&lt;div class=\"content\" ng-include=\"\" src=\"view.template\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>controller.js</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// Helper function to load $scope.item if refresh or directly linked\nfunction itemCtrlInit($scope, $routeParams, MyService) {\n  $scope.item = MyService.currentItem;\n  if (!$scope.item) {\n    MyService.currentItem = MyService.get({itemId: $routeParams.itemId});\n    $scope.item = MyService.currentItem;\n  }\n}\nfunction itemFooCtrl($scope, $routeParams, MyService) {\n  $scope.view = {name: 'foo', template: 'partials/itemFoo.html'};\n  itemCtrlInit($scope, $routeParams, MyService);\n}\nfunction itemBarCtrl($scope, $routeParams, MyService) {\n  $scope.view = {name: 'bar', template: 'partials/itemBar.html'};\n  itemCtrlInit($scope, $routeParams, MyService);\n}\n</code></pre>\n\n<p><strong>Resolution.</strong></p>\n\n<p><strong>Status</strong>: Using search query as recommended in the accepted answer allowed me to provide different urls without reloading the main controller.</p>\n\n<p>app.js</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var app = angular.module('myModule', []).\n  config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n      when('/items', {templateUrl: 'partials/items.html',   controller: ItemsCtrl}).\n      when('/item/:itemId/', {templateUrl: 'partials/item.html', controller: ItemCtrl, reloadOnSearch: false}).\n      otherwise({redirectTo: '/items'});\n    }]);\n</code></pre>\n\n<p>Item.html</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!-- Menu --&gt;\n&lt;dd id=\"fooTab\" item-tab=\"view.name\" ng-click=\"view = views.foo;\"&gt;&lt;a href=\"#/item/{{item.id}}/?view=foo\"&gt;Foo&lt;/a&gt;&lt;/dd&gt;\n&lt;dd id=\"barTab\" item-tab=\"view.name\" ng-click=\"view = views.bar;\"&gt;&lt;a href=\"#/item/{{item.id}}/?view=foo\"&gt;Bar&lt;/a&gt;&lt;/dd&gt;\n\n&lt;!-- Content --&gt;\n&lt;div class=\"content\" ng-include=\"\" src=\"view.template\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>controller.js</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function ItemCtrl($scope, $routeParams, Appts) {\n  $scope.views = {\n    foo: {name: 'foo', template: 'partials/itemFoo.html'},\n    bar: {name: 'bar', template: 'partials/itemBar.html'},\n  }\n  $scope.view = $scope.views[$routeParams.view];\n}\n</code></pre>\n\n<p>directives.js</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.directive('itemTab', function(){\n  return function(scope, elem, attrs) {\n    scope.$watch(attrs.itemTab, function(val) {\n      if (val+'Tab' == attrs.id) {\n        elem.addClass('active');\n      } else {\n        elem.removeClass('active');\n      }\n    });\n  }\n});\n</code></pre>\n\n<p>The content inside my partials are wrapped with <code>ng-controller=...</code></p>\n    ","a":"\n<p>If you don't have to use URLs like <code>#/item/{{item.id}}/foo</code> and <code>#/item/{{item.id}}/bar</code> but <code>#/item/{{item.id}}/?foo</code> and <code>#/item/{{item.id}}/?bar</code> instead, you can set up your route for <code>/item/{{item.id}}/</code> to have reloadOnSearch set to false (<a href=\"http://docs.angularjs.org/api/ngRoute.%24routeProvider\">docs.angularjs.org/api/ngRoute.$routeProvider</a>). That tells AngularJS to not reload the view if the search part of the url changes.</p>\n    "},{"t":"Access index of the parent ng-repeat from child ng-repeat","l":"http://stackoverflow.com/questions/14807258/access-index-of-the-parent-ng-repeat-from-child-ng-repeat","q":"\n\n<p>I want to use the index of the parent list (foos) as an argument to a function call in the child list (foos.bars).</p>\n\n<p>I found a post where someone recommends using $parent.$index, but $index is not a property of $parent.</p>\n\n<p>How can I access the index of the parent ng-repeat?</p>\n\n<pre><code>&lt;div ng-repeat=\"f in foos\"&gt;\n  &lt;div&gt;\n    &lt;div ng-repeat=\"b in foos.bars\"&gt;\n      &lt;a ng-click=\"addSomething($parent.$index)\"&gt;Add Something&lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n    ","a":"\n<p>My example code was correct and the issue was something else in my actual code. Still, I know it was difficult to find examples of this so I'm answering it in case someone else is looking.</p>\n\n<pre><code>&lt;div ng-repeat=\"f in foos\"&gt;\n  &lt;div&gt;\n    &lt;div ng-repeat=\"b in foos.bars\"&gt;\n      &lt;a ng-click=\"addSomething($parent.$index)\"&gt;Add Something&lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"AngularJs: Customizing the template within a Directive","l":"http://stackoverflow.com/questions/10629238/angularjs-customizing-the-template-within-a-directive","q":"\n\n<p>I have a form that is using markup from Bootstrap, like the following:</p>\n\n<pre><code>&lt;form class=\"form-horizontal\"&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Legend text&lt;/legend&gt;\n    &lt;div class=\"control-group\"&gt;\n      &lt;label class=\"control-label\" for=\"nameInput\"&gt;Name&lt;/label&gt;\n      &lt;div class=\"controls\"&gt;\n        &lt;input type=\"text\" class=\"input-xlarge\" id=\"nameInput\"&gt;\n        &lt;p class=\"help-block\"&gt;Supporting help text&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>There's a lot of boilerplate code in there, that I'd like to reduce to a new directive - form-input, like follows:</p>\n\n<pre><code>&lt;form-input label=\"Name\" form-id=\"nameInput\"&gt;&lt;/form-input&gt;\n</code></pre>\n\n<p>generates:</p>\n\n<pre><code>   &lt;div class=\"control-group\"&gt;\n      &lt;label class=\"control-label\" for=\"nameInput\"&gt;Name&lt;/label&gt;\n      &lt;div class=\"controls\"&gt;\n        &lt;input type=\"text\" class=\"input-xlarge\" id=\"nameInput\"&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>I have this much working via a simple template.</p>\n\n<pre><code>angular.module('formComponents', [])\n    .directive('formInput', function() {\n        return {\n            restrict: 'E',\n            scope: {\n                label: 'bind',\n                formId: 'bind'\n            },\n            template:   '&lt;div class=\"control-group\"&gt;' +\n                            '&lt;label class=\"control-label\" for=\"{{formId}}\"&gt;{{label}}&lt;/label&gt;' +\n                            '&lt;div class=\"controls\"&gt;' +\n                                '&lt;input type=\"text\" class=\"input-xlarge\" id=\"{{formId}}\" name=\"{{formId}}\"&gt;' +\n                            '&lt;/div&gt;' +\n                        '&lt;/div&gt;'\n\n        }\n    })\n</code></pre>\n\n<p>However it's when I come to add in more advanced functionality that I'm getting stuck.</p>\n\n<h2>How can I support default values in the template?</h2>\n\n<p>I'd like to expose the \"type\" parameter as an optional attribute on my directive, eg:</p>\n\n<pre><code>&lt;form-input label=\"Password\" form-id=\"password\" type=\"password\"/&gt;&lt;/form-input&gt;\n&lt;form-input label=\"Email address\" form-id=\"emailAddress\" type=\"email\" /&gt;&lt;/form-input&gt;\n</code></pre>\n\n<p>However, if nothing is specified, I'd like to default to <code>\"text\"</code>.  How can I support this?</p>\n\n<h2>How can I customize the template based on the presence / absence of attributes?</h2>\n\n<p>I'd also like to be able to support the \"required\" attribute, if it's present.\nEg:</p>\n\n<pre><code>&lt;form-input label=\"Email address\" form-id=\"emailAddress\" type=\"email\" required/&gt;&lt;/form-input&gt;\n</code></pre>\n\n<p>If <code>required</code> is present in the directive, I'd like to add it to the generated <code>&lt;input /&gt;</code> in the output, and ignore it otherwise.  I'm not sure how to achieve this.</p>\n\n<p>I suspect these requirements may have moved beyond a simple template, and have to start using the pre-compile phases, but I'm at a loss where to start.</p>\n    ","a":"\n<pre><code>angular.module('formComponents', [])\n  .directive('formInput', function() {\n    return {\n        restrict: 'E',\n        compile: function(element, attrs)\n        {\n            var type = attrs.type || 'text';\n            var required = attrs.hasOwnProperty('required') ? \"required='required'\" : \"\";\n            var htmlText = '&lt;div class=\"control-group\"&gt;' +\n                '&lt;label class=\"control-label\" for=\"' + attrs.formId + '\"&gt;' + attrs.label + '&lt;/label&gt;' +\n                    '&lt;div class=\"controls\"&gt;' +\n                    '&lt;input type=\"' + type + '\" class=\"input-xlarge\" id=\"' + attrs.formId + '\" name=\"' + attrs.formId + '\" ' + required + '&gt;' +\n                    '&lt;/div&gt;' +\n                '&lt;/div&gt;';\n            element.replaceWith(htmlText);\n        }\n    }\n})\n</code></pre>\n    "},{"t":"Angular JS break ForEach","l":"http://stackoverflow.com/questions/13843972/angular-js-break-foreach","q":"\n\n<p>I have an angular foreach loop and i want to break from loop if i match a value. The following code does not work.</p>\n\n<pre><code>angular.forEach([0,1,2], function(count){\n  if(count == 1){\n    break;\n  }\n});\n</code></pre>\n\n<p>How can i get this? </p>\n    ","a":"\n<p>There's no way to do this. See <a href=\"https://github.com/angular/angular.js/issues/263\">https://github.com/angular/angular.js/issues/263</a>. Depending on what you're doing you can use a boolean to just not going into the body of the loop. Something like:</p>\n\n<pre><code>var keepGoing = true;\nangular.forEach([0,1,2], function(count){\n  if(keepGoing) {\n    if(count == 1){\n      keepGoing = false;\n    }\n  }\n});\n</code></pre>\n    "},{"t":"ng-app vs. data-ng-app, what is the difference?","l":"http://stackoverflow.com/questions/16589853/ng-app-vs-data-ng-app-what-is-the-difference","q":"\n\n<p>I'm currently looking at <a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=i9MHigUZKEM\">this start tutorial video</a> for <code>angular.js</code></p>\n\n<p>At some moment (after 12'40\"), the speaker states that the attributes <code>ng-app</code> and <code>data-ng-app=\"\"</code> are more or less equivalent inside the <code>&lt;html&gt;</code> tag, and so are <code>ng-model=\"my_data_binding</code> and <code>data-ng-model=\"my_data_binding\"</code>. However The speaker says the html would be validated through different validators, depending on which attribute is used.</p>\n\n<p>Could you explain the difference between the two ways, <code>ng-</code> prefix against <code>data-ng-</code> prefix ? </p>\n    ","a":"\n<p>Good question. The difference is simple - there is absolutely no difference between the two <strong>except</strong> that certain HTML5 validators will throw an error on a property like <code>ng-app</code>, but don't throw an error again anything prefixed with <code>data-</code>, like <code>data-ng-app</code>.</p>\n\n<p>So to answer your question, use <code>data-ng-app</code> if you would like validating your HTML to be a bit easier.</p>\n\n<p>Fun fact: You can also use <code>x-ng-app</code> to the same effect.</p>\n    "},{"t":"Angularjs code/naming conventions [closed]","l":"http://stackoverflow.com/questions/20802798/angularjs-code-naming-conventions","q":"\n\n<p>Does anyone know if exists any official or most accepted reference for Angular naming conventions to use when we build our applications?</p>\n\n<p>Angular has a lot of different type of components such as filters, directives, services and so on. Wouldn't you agree that having a reference naming convention when we implement them in our applications will make sense?</p>\n\n<p>For example:</p>\n\n<p>If we need to create new filters how should we name them like [Something]Filter or filter[Something] or something else? </p>\n\n<p>And same applies for Controllers, Services, Directives and so on.</p>\n\n<p>Other things I wonder about is if variables/functions that belongs to the scope should have an special prefix or suffix. In some situations it may be useful to have a way to differentiate them from functions and other (none angular code). </p>\n    ","a":"\n<p>Check out <a href=\"https://github.com/mgechev/angularjs-style-guide\">this GitHub repository</a> that describes best practices for AngularJS apps. It has naming conventions for different components. It is not complete, but it is community-driven so everyone can contribute.</p>\n    "},{"t":"using html5 pushstate on angular.js","l":"http://stackoverflow.com/questions/11095179/using-html5-pushstate-on-angular-js","q":"\n\n<p>i am trying to implement html5's pushstate instead of the # navigation used by angular.js i have tried searching google for an answer and also tried the angular irc chat room with no luck yet.</p>\n\n<p>this is my controllers.js</p>\n\n<pre><code>function PhoneListCtrl($scope, $http) {\n    $http.get('phones/phones.json').success(function(data) {\n        $scope.phones = data;\n    });\n}\n\nfunction PhoneDetailCtrl($scope, $routeParams) {\n  $scope.phoneId = $routeParams.phoneId;\n}\n\n\n\nfunction greetCntr($scope, $window) {\n    $scope.greet = function() {\n    $(\"#modal\").slideDown();\n    }\n}\n</code></pre>\n\n<p>app.js</p>\n\n<pre><code>angular.module('phoneapp', []).\n    config(['$routeProvider', function($routeProvider){\n        $routeProvider.\n            when('/phones', {\n                templateUrl: 'partials/phone-list.html',\n                controller: PhoneListCtrl\n            }).\n            when('/phones/:phoneId', {\n                templateUrl: 'partials/phone-detail.html',\n                controller: PhoneDetailCtrl\n            }).\n            otherwise({\n                redirectTo: '/phones'\n            });\n    }])\n</code></pre>\n    ","a":"\n<p>Inject $locationProvider into your config, and set <code>$locationProvider.html5Mode(true)</code>.</p>\n\n<p><a href=\"http://docs.angularjs.org/api/ng.%24locationProvider\">http://docs.angularjs.org/api/ng.$locationProvider</a></p>\n\n<p>Simple example:</p>\n\n<p>JS:</p>\n\n<pre><code>myApp.config(function($routeProvider, $locationProvider) {\n  $locationProvider.html5Mode(true);\n  $routeProvider\n    .when('/page1', { template: 'page1.html', controller: 'Page1Ctrl' })\n    .when('/page2', { template: 'page2.html', controller: 'Page2Ctrl' })\n});\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a href=\"/page1\"&gt;Page 1&lt;/a&gt; | &lt;a href=\"/page2\"&gt;Page 2&lt;/a&gt;\n</code></pre>\n    "},{"t":"Passing current scope to an AngularJS Service","l":"http://stackoverflow.com/questions/15509457/passing-current-scope-to-an-angularjs-service","q":"\n\n<p>Is it correct to pass the \"current\" <code>$scope</code> to an AngularJS service?</p>\n\n<p>I'm in the situation where I've a $service knowing it's consumed by only one controller, and I'd like to have a reference to the controller's scope in the $service methods themselves.</p>\n\n<p>Is it <em>philosophically</em> correct?</p>\n\n<p>Or I'd better to broadcast events to the $rootScope and then make my controller listen to them?</p>\n    ","a":"\n<p>To let the controller know when something async happens, use <a href=\"http://docs.angularjs.org/api/ng.%24q\">Angular promises</a>.</p>\n\n<p>To provoke the <code>$apply</code>, you don't need the scope, you can call <code>$rootScope.$apply</code>, as there is no difference calling it in a specific scope or in the root.</p>\n\n<p>Regarding the variable reading, it would be better if you received parameters. But you could also read it from a scope as an object parameter, but I would go with parameter, that would make your service interface much more clearer.</p>\n    "},{"t":"How can I conditionally require form inputs with AngularJS?","l":"http://stackoverflow.com/questions/13466133/how-can-i-conditionally-require-form-inputs-with-angularjs","q":"\n\n<p>Suppose we're building an address book application (contrived example) with AngularJS. We have a form for contacts that has inputs for email and phone number, and we want to require one or the other, but not both. We only want the <code>email</code> input to be required if the <code>phone</code> input is empty or invalid, and vice versa. Angular has a <code>required</code> directive, but it's not clear from the documentation how to use it in this case. So how can we conditionally require a form field? Write a custom directive?</p>\n    ","a":"\n<p>There's no need to write a custom directive. Angular's documentation is good but not complete. <a href=\"https://github.com/angular/angular.js/issues/1202\">In fact</a>, there is a directive called <code>ngRequired</code>, that takes an Angular expression.</p>\n\n<pre><code>&lt;input type='email'\n       name='email'\n       ng-model='contact.email' \n       placeholder='your@email.com'\n       ng-required='!contact.phone' /&gt;\n\n&lt;input type='text'\n       ng-model='contact.phone'             \n       placeholder='(xxx) xxx-xxxx'\n       ng-required='!contact.email' /&gt;  \n</code></pre>\n\n<p>Here's a more complete example: <a href=\"http://jsfiddle.net/uptnx/1/\">http://jsfiddle.net/uptnx/1/</a></p>\n    "},{"t":"Image Get Requests with AngularJS","l":"http://stackoverflow.com/questions/12922509/image-get-requests-with-angularjs","q":"\n\n<p>I am storing the the source string of an image to be rendered in HTML in the AngularJS controller, however it yields a 404 before the Angular controller is initialized.</p>\n\n<p>Here is the HTML:</p>\n\n<pre><code> &lt;div ng-controller=\"Cont\"&gt;\n      &lt;img src=\"{{imageSource}}\"&gt;\n &lt;/div&gt;\n</code></pre>\n\n<p>Angular controller:</p>\n\n<pre><code> var Cont = function($scope) {\n      $scope.imageSource = '/tests.png';\n }\n</code></pre>\n\n<p>And the error I get (<code>%7D%7D</code> corresponds to the <code>{{</code> in the template).</p>\n\n<pre><code> GET https://localhost:9000/%7B%7BimageSource%7D%7D 404 (Not Found) \n</code></pre>\n\n<p>How can I prevent this from happening? That is, only load the image when the Angular controller has been initialized?</p>\n    ","a":"\n<p>Try replacing your src with ng-src for more info see <a href=\"http://docs.angularjs.org/api/ng.directive%3angSrc\">the documentation</a>: </p>\n\n<blockquote>\n  <p>Using Angular markup like {{hash}} in a src attribute doesn't work\n  right: The browser will fetch from the URL with the literal text\n  {{hash}} until Angular replaces the expression inside {{hash}}. The\n  ngSrc directive solves this problem.</p>\n</blockquote>\n\n<pre><code> &lt;div ng-controller=\"Cont\"&gt;\n      &lt;img ng-src=\"{{imageSource}}\"&gt;\n &lt;/div&gt;\n</code></pre>\n    "},{"t":"How do I test an AngularJS service with Jasmine?","l":"http://stackoverflow.com/questions/13013772/how-do-i-test-an-angularjs-service-with-jasmine","q":"\n\n<p>(There is a related question here: <a href=\"http://stackoverflow.com/questions/12938388/jasmine-test-does-not-see-angularjs-module\">Jasmine test does not see AngularJS module</a>)</p>\n\n<p>I just want to test a service without bootstrapping Angular.</p>\n\n<p>I have look at some examples and the tutorial but I am not going anywhere.</p>\n\n<p>I have just three files:</p>\n\n<ul>\n<li><p>myService.js: where I define an AngularJS service</p></li>\n<li><p>test_myService.js: where I define a Jasmine test for the service.</p></li>\n<li><p>specRunner.html: a HTML file with the normal jasmine configuration\nand where I import the previous two other files and the Jasmine, Angularjs and angular-mocks.js.</p></li>\n</ul>\n\n<p>This is the code for the service (that works as expected when I am not testing):</p>\n\n<pre><code>var myModule = angular.module('myModule', []);\n\nmyModule.factory('myService', function(){\n\n    var serviceImplementation   = {};\n    serviceImplementation.one   = 1;\n    serviceImplementation.two   = 2;\n    serviceImplementation.three = 3;\n\n    return serviceImplementation\n\n});\n</code></pre>\n\n<p>As I am trying to test the service in isolation, I should be able to access it and check their methods.\nMy question is: how can I inject the service in my test without bootstrapping AngularJS?</p>\n\n<p>For instance, how can I test the value returned for a method of the service with Jasmine like this:</p>\n\n<pre><code>describe('myService test', function(){\n    describe('when I call myService.one', function(){\n        it('returns 1', function(){\n            myModule = angular.module('myModule');\n                    //something is missing here..\n            expect( myService.one ).toEqual(1);\n        })\n\n    })\n\n});\n</code></pre>\n\n<p>Thanks in advance.</p>\n    ","a":"\n<p>The problem is that the factory method, that instantiate the service, is not called in the example above (only creating the module doesn't instantiate the service).</p>\n\n<p>In order to the service to be instantiated <a href=\"http://docs.angularjs.org/api/AUTO.$injector\">angular.injector</a> has to be called with the module where our service is defined. Then, we can ask to the new injector object for the service and its only then when the service is finally instantiated.</p>\n\n<p>Something like this works:</p>\n\n<pre><code>describe('myService test', function(){\n    describe('when I call myService.one', function(){\n        it('returns 1', function(){\n            var $injector = angular.injector([ 'myModule' ]);\n            var myService = $injector.get( 'myService' );\n            expect( myService.one ).toEqual(1);\n        })\n\n    })\n\n});\n</code></pre>\n\n<p>Another way would be passing the service to a function using '<a href=\"http://docs.angularjs.org/api/angular.injector\">invoke</a>':</p>\n\n<pre><code>describe('myService test', function(){\n    describe('when I call myService.one', function(){\n        it('returns 1', function(){\n\n            myTestFunction = function(aService){\n                expect( aService.one ).toEqual(1);\n            }\n\n            //we only need the following line if the name of the \n            //parameter in myTestFunction is not 'myService' or if\n            //the code is going to be minify.\n            myTestFunction.$inject = [ 'myService' ];\n\n            var myInjector = angular.injector([ 'myModule' ]);\n            myInjector.invoke( myTestFunction );\n        })\n\n    })\n\n});\n</code></pre>\n\n<p>And, finally, the 'proper' way to do it is using '<a href=\"http://docs.angularjs.org/api/ngMock/function/angular.mock.inject\">inject</a>' and '<a href=\"http://docs.angularjs.org/api/ngMock/function/angular.mock.module\">module</a>' in a '<a href=\"http://pivotal.github.com/jasmine/\">beforeEach</a>' jasmine block.\nWhen doing it we have to realize that the 'inject' function it's not in the standard angularjs package, but in the ngMock module and that it only works with jasmine.</p>\n\n<pre><code>describe('myService test', function(){\n    describe('when I call myService.one', function(){\n        beforeEach(module('myModule'));\n        it('returns 1', inject(function(myService){ //parameter name = service name\n\n            expect( myService.one ).toEqual(1);\n\n        }))\n\n    })\n\n});\n</code></pre>\n    "},{"t":"Is there an IDE with explicit support for Angular JS? [closed]","l":"http://stackoverflow.com/questions/8361982/is-there-an-ide-with-explicit-support-for-angular-js","q":"\n\n<p>I've tried WebStorm but there only seems to be a basic JavaScript support there, like in any other web IDE I have tried. I'm looking for something that would allow me to click-through from HTML pages to Controllers etc.</p>\n\n<p>If the answer is \"no\" to this question, is there any other JavaScript framework similar to Angular that would have something like an Eclipse plugin or any other kind of explicit support in some IDE?</p>\n    ","a":"\n<p>John Lindquist says he'll make a plugin for WebStorm:\n<a href=\"http://youtrack.jetbrains.com/issue/IDEA-84299\">http://youtrack.jetbrains.com/issue/IDEA-84299</a></p>\n    "},{"t":"Set active tab style with AngularJS","l":"http://stackoverflow.com/questions/12295983/set-active-tab-style-with-angularjs","q":"\n\n<p>I have routes set in AngularJS like this:</p>\n\n<pre><code>$routeProvider\n    .when('/dashboard', {templateUrl:'partials/dashboard', controller:widgetsController})\n    .when('/lab', {templateUrl:'partials/lab', controller:widgetsController})\n</code></pre>\n\n<p>I have some links on the topbar styled as tabs. How can I add 'active' class to a tab depending on current template or url?</p>\n    ","a":"\n<p>A way to solve this without having to rely on URLs is to add a custom attribute to every partial during <code>$routeProvider</code> configuration, like this: </p>\n\n<pre><code>$routeProvider.\n    when('/dashboard', {\n        templateUrl: 'partials/dashboard.html',\n        controller: widgetsController,\n        activetab: 'dashboard'\n    }).\n    when('/lab', {\n        templateUrl: 'partials/lab.html',\n        controller: widgetsController,\n        activetab: 'lab'\n    });\n</code></pre>\n\n<p>Expose <code>$route</code> in your controller:</p>\n\n<pre><code>function widgetsController($scope, $route) {\n    $scope.$route = $route;\n}\n</code></pre>\n\n<p>Set the <code>active</code> class based on the current active tab:</p>\n\n<pre><code>&lt;li ng-class=\"{active: $route.current.activetab == 'dashboard'}\"&gt;&lt;/li&gt;\n&lt;li ng-class=\"{active: $route.current.activetab == 'lab'}\"&gt;&lt;/li&gt;\n</code></pre>\n    "},{"t":"What's the best way to cancel event propagation between nested ng-click calls?","l":"http://stackoverflow.com/questions/15193539/whats-the-best-way-to-cancel-event-propagation-between-nested-ng-click-calls","q":"\n\n<p>Here's an example.  Let's say I want to have an image overlay like a lot of sites.  So when you click a thumbnail, a black overlay appears over your whole window, and a larger version of the image is centered in it.  Clicking the black overlay dismisses it; clicking the image will call a function that shows the next image.</p>\n\n<p>The html:</p>\n\n<pre><code>&lt;div ng-controller=\"OverlayCtrl\" class=\"overlay\" ng-click=\"hideOverlay()\"&gt;\n    &lt;img src=\"http://some_src\" ng-click=\"nextImage()\"/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The javascript:</p>\n\n<pre><code>function OverlayCtrl($scope) {\n    $scope.hideOverlay = function() {\n        // Some code to hdie the overlay\n    }\n    $scope.nextImage = function() {\n        // Some code to find and display the next image\n    }\n}\n</code></pre>\n\n<p>The problem is that with this setup, if you click the image, both <code>nextImage()</code> and <code>hideOverlay()</code> are called.  But what I want is for only <code>nextImage()</code> to be called.</p>\n\n<p>I know you can capture and cancel the event in the <code>nextImage()</code> function like this:</p>\n\n<pre><code>if (window.event) {\n    window.event.stopPropagation();\n}\n</code></pre>\n\n<p>...But I want to know if there's a better AngularJS way of doing it that won't require me to prefix all of the functions on elements inside the overlay with this snippet.</p>\n    ","a":"\n<p>What @JosephSilber said, or pass the $event object into <code>ng-click</code> callback and stop the propagation inside of it:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-controller=\"OverlayCtrl\" class=\"overlay\" ng-click=\"hideOverlay()\"&gt;\n  &lt;img src=\"http://some_src\" ng-click=\"nextImage($event)\"/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.nextImage = function($event) {\n  $event.stopPropagation();\n  // Some code to find and display the next image\n}\n</code></pre>\n    "},{"t":"How do I delete an item or object from an array using ng-click?","l":"http://stackoverflow.com/questions/15453979/how-do-i-delete-an-item-or-object-from-an-array-using-ng-click","q":"\n\n<p>I am trying to write a function that enables me to remove an item when the button is clicked but I think I am getting confused with the function - do I use <code>$digest</code>?</p>\n\n<p>HTML &amp; app.js:</p>\n\n<pre><code>&lt;ul ng-repeat=\"bday in bdays\"&gt;\n  &lt;li&gt;\n    &lt;span ng-hide=\"editing\" ng-click=\"editing = true\"&gt;{{bday.name}} | {{bday.date}}&lt;/span&gt;\n    &lt;form ng-show=\"editing\" ng-submit=\"editing = false\"&gt;\n      &lt;label&gt;Name:&lt;/label&gt;\n      &lt;input type=\"text\" ng-model=\"bday.name\" placeholder=\"Name\" ng-required/&gt;\n      &lt;label&gt;Date:&lt;/label&gt;\n      &lt;input type=\"date\" ng-model=\"bday.date\" placeholder=\"Date\" ng-required/&gt;\n      &lt;br/&gt;\n      &lt;button class=\"btn\" type=\"submit\"&gt;Save&lt;/button&gt;\n      &lt;a class=\"btn\" ng-click=\"remove()\"&gt;Delete&lt;/a&gt;\n    &lt;/form&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n$scope.remove = function(){\n  $scope.newBirthday = $scope.$digest();\n};\n</code></pre>\n    ","a":"\n<p>To remove item you need to remove it from array and can pass <code>bday</code> item to your remove function in markup. Then in controller look up the index of item and remove from array</p>\n\n<pre><code>&lt;a class=\"btn\" ng-click=\"remove(item)\"&gt;Delete&lt;/a&gt;\n</code></pre>\n\n<p>Then in controller:</p>\n\n<pre><code>$scope.remove = function(item) { \n  var index = $scope.bdays.indexOf(item);\n  $scope.bdays.splice(index, 1);     \n}\n</code></pre>\n\n<p>Angular will automatically detect the change to the <code>bdays</code> array and do the update of <code>ng-repeat</code></p>\n\n<p>DEMO: <a href=\"http://plnkr.co/edit/ZdShIA?p=preview\">http://plnkr.co/edit/ZdShIA?p=preview</a></p>\n\n<p>EDIT: If doing live updates with server would use a service you create using  <code>$resource</code> to manage the array updates at same time it updates server</p>\n    "},{"t":"Angular js init ng-model from default values","l":"http://stackoverflow.com/questions/13769732/angular-js-init-ng-model-from-default-values","q":"\n\n<p>Say you have a form that has values loaded from database.  How do you initialize ng-model?</p>\n\n<p>Example:</p>\n\n<pre><code>&lt;input name=\"card[description]\" ng-model=\"card.description\" value=\"Visa-4242\"&gt;\n</code></pre>\n\n<p>In my controller, $scope.card is undefined initially.  Is there a way besides doing something like this?</p>\n\n<pre><code>$scope.card = {\n  description: $('myinput').val()\n}\n</code></pre>\n    ","a":"\n<p>This is a common mistake in new Angular applications. You don't want to write your values into your HTML on the server if you can avoid it. If fact, if you can get away from having your server render HTML entirely, all the better.</p>\n\n<p>Ideally, you want to send out your Angular HTML templates, then pull down your values via $http in JSON and put them in your scope.</p>\n\n<p>So if at all possible, do this:</p>\n\n<pre><code>app.controller('MyController', function($scope, $http) {\n    $http.get('/getCardInfo.php', function(data) {\n       $scope.card = data;\n    });\n});\n\n&lt;input type=\"text\" ng-model=\"card.description\" /&gt;\n</code></pre>\n\n<p>If you absolutely MUST render your values into your HTML from your server, you could put them in a global variable and access them with $window:</p>\n\n<p>In the header of your page you'd write out:</p>\n\n<pre><code>&lt;head&gt;\n   &lt;script&gt;\n       window.card = { description: 'foo' };\n   &lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>And then in your controller you'd get it like so:</p>\n\n<pre><code>app.controller('MyController', function($scope, $window) {\n   $scope.card = $window.card;\n});\n</code></pre>\n\n<p>I hope that helps.</p>\n    "},{"t":"How to understand the `transclude` of directive defination?","l":"http://stackoverflow.com/questions/15296284/how-to-understand-the-transclude-of-directive-defination","q":"\n\n<p>I think this is one of the hardest concept for me to understand with angularjs's directive.</p>\n\n<p>The document from <a href=\"http://docs.angularjs.org/guide/directive\">http://docs.angularjs.org/guide/directive</a> says:</p>\n\n<blockquote>\n  <p><strong>transclude</strong> - compile the content of the element and make it available to the directive. Typically used with ngTransclude. The advantage of transclusion is that the linking function receives a transclusion function which is pre-bound to the correct scope. In a typical setup the widget creates an isolate scope, but the transclusion is not a child, but a sibling of the isolate scope. This makes it possible for the widget to have private state, and the transclusion to be bound to the parent (pre-isolate) scope.</p>\n  \n  <ul>\n  <li>true - transclude the content of the directive.</li>\n  <li>'element' - transclude the whole element including any directives defined at lower priority.</li>\n  </ul>\n</blockquote>\n\n<p>It says <code>transclude</code> typically used with <code>ngTransclude</code>. But the sample from the doc of <a href=\"http://docs.angularjs.org/api/ng.directive:ngTransclude\">ngTransclude</a> doesn't use <code>ngTransclude</code> directive at all.</p>\n\n<p>I'd like some good examples to help me understand this. Why do we need it? What does it solve? How to use it?</p>\n    ","a":"\n<p>Consider a directive called <em>myDirective</em> in an element, and that element is enclosing some other content, let's say:</p>\n\n<pre><code>&lt;div my-directive&gt;\n    &lt;button&gt;some button&lt;/button&gt;\n    &lt;a href=\"#\"&gt;and a link&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>If <em>myDirective</em> is using a template, you'll see that the content of <code>&lt;div my-directive&gt;</code> will be replaced by your directive template. So having:</p>\n\n<pre><code>app.directive('myDirective', function(){\n    return{\n        template: '&lt;div class=\"something\"&gt; This is my directive content&lt;/div&gt;'\n    }\n});\n</code></pre>\n\n<p>will result in this render:</p>\n\n<pre><code>&lt;div class=\"something\"&gt; This is my directive content&lt;/div&gt; \n</code></pre>\n\n<p>Notice that the content of your original element <code>&lt;div my-directive&gt;</code> <strong>will be lost</strong> (or better said, replaced). So, say good-bye to these buddies:</p>\n\n<pre><code>&lt;button&gt;some button&lt;/button&gt;\n&lt;a href=\"#\"&gt;and a link&lt;/a&gt;\n</code></pre>\n\n<p>So, what if you want to keep your <code>&lt;button&gt;...</code> and <code>&lt;a href&gt;...</code> in the DOM? You'll need something called transclusion. The concept is pretty simple: <strong>Include the content from one place into another</strong>. So now your directive will look something like this:</p>\n\n<pre><code>app.directive('myDirective', function(){\n    return{\n        transclude: true,\n        template: '&lt;div class=\"something\" ng-transclude&gt; This is my directive content&lt;/div&gt;'\n    }\n});\n</code></pre>\n\n<p>This would render:</p>\n\n<pre><code>&lt;div class=\"something\"&gt; This is my directive content\n    &lt;button&gt;some button&lt;/button&gt;\n    &lt;a href=\"#\"&gt;and a link&lt;/a&gt;\n&lt;/div&gt;. \n</code></pre>\n\n<p>In conclusion, you basically use transclude when you want to preserve the contents of an element when you're using a directive.     </p>\n\n<p>My code example is here <a href=\"http://jsfiddle.net/7LRDS/1/\">http://jsfiddle.net/7LRDS/1/</a>\nYou could also benefit from watching: <a href=\"http://egghead.io/video/angularjs-transclusion-basics/\">http://egghead.io/video/angularjs-transclusion-basics/</a></p>\n    "},{"t":"Sorting dropdown alphabetically in AngularJS","l":"http://stackoverflow.com/questions/12310782/sorting-dropdown-alphabetically-in-angularjs","q":"\n\n<p>I'm populating a dropdown through the use of ng-options which is hooked to a controller that in turn is calling a service. Unfortunately the data coming in is a mess and I need to be able to sort it alphabetically.</p>\n\n<p>You figure that something like <code>$.sortBy</code> would do it but unfortunately it didn't do jack. I know I can sort it via javascript with a helper method <code>function asc(a,b)</code> or something like that but I refuse to believe that there is not cleaner way of doing this plus I don't want to bloat the controller with helper methods. It is something so basic in principle so I don't understand why AngularJS doesn't have this.</p>\n\n<p>Is there a way of doing something like <code>$orderBy('asc')</code>?</p>\n\n<p>Example:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;select ng-option=\"items in item.$orderBy('asc')\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>It would be extremely useful to have options in <code>orderBy</code> so you can do whatever you want, whenever you usually try to sort data. </p>\n    ","a":"\n<p>Angular has an <a href=\"http://docs.angularjs.org/api/ng.filter%3aorderBy\">orderBy</a> filter that can be used like this:</p>\n\n<pre><code>&lt;select ng-model=\"selected\" ng-options=\"f.name for f in friends | orderBy:'name'\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/aBccw/\">this fiddle</a> for an example.</p>\n    "},{"t":"Can I make a function available in every controller in angular?","l":"http://stackoverflow.com/questions/15025979/can-i-make-a-function-available-in-every-controller-in-angular","q":"\n\n<p>If I have a utility function <code>foo</code> that I want to be able to call from anywhere inside of my <code>ng-app</code> declaration. Is there someway I can make it globally accessible in my module setup or do I need to add it to the scope in every controller? </p>\n    ","a":"\n<p>You basically have two options, either define it as a service, or place it on your root scope. I would suggest that you make a service out of it to avoid polluting the root scope. You create a service and make it available in your controller like this:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n    &lt;script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"http://code.angularjs.org/1.1.2/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    var myApp = angular.module('myApp', []);\n\n    myApp.factory('myService', function() {\n        return {\n            foo: function() {\n                alert(\"I'm foo!\");\n            }\n        };\n    });\n\n    myApp.controller('MainCtrl', ['$scope', 'myService', function($scope, myService) {\n        $scope.callFoo = function() {\n            myService.foo();\n        }\n    }]);\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=\"MainCtrl\"&gt;\n    &lt;button ng-click=\"callFoo()\"&gt;Call foo&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If that's not an option for you, you can add it to the root scope like this:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n    &lt;script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"http://code.angularjs.org/1.1.2/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    var myApp = angular.module('myApp', []);\n\n    myApp.run(function($rootScope) {\n        $rootScope.globalFoo = function() {\n            alert(\"I'm global foo!\");\n        };\n    });\n\n    myApp.controller('MainCtrl', ['$scope', function($scope){\n\n    }]);\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=\"MainCtrl\"&gt;\n    &lt;button ng-click=\"globalFoo()\"&gt;Call global foo&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>That way, all of your templates can call <code>globalFoo()</code> without having to pass it to the template from the controller.</p>\n    "},{"t":"Inject service in app.config","l":"http://stackoverflow.com/questions/15937267/inject-service-in-app-config","q":"\n\n<p>I want to inject a service into app.config, so that data can be retrieved before the controller is called. I tried it like this:</p>\n\n<p>Service:</p>\n\n<pre><code>app.service('dbService', function() {\n    return {\n        getData: function($q, $http) {\n            var defer = $q.defer();\n            $http.get('db.php/score/getData').success(function(data) {\n                defer.resolve(data);            \n            });\n            return defer.promise;\n        }\n    };\n});\n</code></pre>\n\n<p>Config:</p>\n\n<pre><code>app.config(function ($routeProvider, dbService) {\n    $routeProvider\n        .when('/',\n        {\n            templateUrl: \"partials/editor.html\",\n            controller: \"AppCtrl\",\n            resolve: {\n                data: dbService.getData(),\n            }\n        })\n});\n</code></pre>\n\n<p>But I get this error:</p>\n\n<blockquote>\n  <p>Error: Unknown provider: dbService from EditorApp</p>\n</blockquote>\n\n<p>How to correct setup and inject this service?</p>\n    ","a":"\n<p>Alex provided the correct reason for not being able to do what you're trying to do, so +1. But you are encountering this issue because you're not quite using resolves how they're designed.</p>\n\n<p><code>resolve</code> takes either the string of a service or a function returning a value to be injected. Since you're doing the latter, you need to pass in an actual function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>resolve: {\n  data: function (dbService) {\n    return dbService.getData();\n  }\n}\n</code></pre>\n\n<p>When the framework goes to resolve <code>data</code>, it will inject the <code>dbService</code> into the function so you can freely use it. You don't need to inject into the <code>config</code> block at all to accomplish this.</p>\n\n<p>Bon appetit!</p>\n    "},{"t":"inline conditionals in angular.js","l":"http://stackoverflow.com/questions/14164371/inline-conditionals-in-angular-js","q":"\n\n<p>I was wondering if there is a way in angular to conditionally display content other than using ng-show etc. For example in backbone.js I could do something with inline content in a template like:</p>\n\n<pre><code>&lt;% if (myVar === \"two\") { %&gt; show this&lt;% } %&gt;\n</code></pre>\n\n<p>but in angular, I seem to be limited to showing and hiding things wrapped in html tags</p>\n\n<pre><code>&lt;p ng-hide=\"true\"&gt;I'm hidden&lt;/p&gt;\n&lt;p ng-show=\"true\"&gt;I'm shown&lt;/p&gt;\n</code></pre>\n\n<p>What is the recommended way in angular to conditionally show and hide inline content in angular just using {{}} rather than wrapping the content in html tags?</p>\n    ","a":"\n<h2>EDIT: <a href=\"http://stackoverflow.com/a/21948006/135786\">2Toad's answer below</a> is what you're looking for!!! Upvote that thing</h2>\n\n<h3>If you're using Angular &lt;= 1.1.4 then this answer will do:</h3>\n\n<p>One more answer for this. I'm posting a seperate answer, because it's more of an \"exact\" attempt at a solution than a list of possible solutions:</p>\n\n<p>Here's a filter that will do an \"immediate if\" (aka iif):</p>\n\n<pre><code>app.filter('iif', function () {\n   return function(input, trueValue, falseValue) {\n        return input ? trueValue : falseValue;\n   };\n});\n</code></pre>\n\n<p>and would be used like so:</p>\n\n<pre><code>{{foo == \"bar\" | iif : \"it's true\" : \"no, it's not\"}}\n</code></pre>\n    "},{"t":"Angular changes urls to “unsafe:” in extension page","l":"http://stackoverflow.com/questions/15606751/angular-changes-urls-to-unsafe-in-extension-page","q":"\n\n<p>I am trying to use angular with a list of apps, and each one is a link to see an app in more detail (apps/app.id):</p>\n\n<pre><code>&lt;a id=\"{{app.id}}\" href=\"apps/{{app.id}}\" &gt;{{app.name}}&lt;/a&gt;\n</code></pre>\n\n<p>Every time I click on one of these links, Chrome shows the URL as unsafe:chrome-extension://kpbipnfncdpgejhmdneaagc...../apps/app.id</p>\n\n<p>Where does the <strong>unsafe</strong> come from?</p>\n    ","a":"\n<p>You need to explicitly add URL protocols to Angular's whitelist using a regular expression. Only <code>http</code>, <code>https</code>, <code>ftp</code> and <code>mailto</code> are enabled by default. Angular will prefix a non-whitelisted URL with <code>unsafe:</code> when using a protocol such as <code>chrome-extension:</code>.</p>\n\n<p>A good place to whitelist the <code>chrome-extension:</code> protocol would be in your module's config block:</p>\n\n<pre><code>var app = angular.module( 'myApp', [] )\n.config( [\n    '$compileProvider',\n    function( $compileProvider )\n    {   \n        $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|chrome-extension):/);\n        // Angular before v1.2 uses $compileProvider.urlSanitizationWhitelist(...)\n    }\n]);\n</code></pre>\n\n<p>The same procedure also applies when you need to use protocols such as <code>file:</code> and <code>tel:</code>.</p>\n\n<p>Please see the AngularJS <a href=\"http://docs.angularjs.org/api/ng.%24compileProvider\">$compileProvider API documentation</a> for more info.</p>\n    "},{"t":"Angular: Share data between controllers","l":"http://stackoverflow.com/questions/21919962/angular-share-data-between-controllers","q":"\n\n<p>I'm trying to share data across controllers. Use-case is a multi-step form, data entered in one input is later used in multiple display locations outside the original controller. Code below and in <a href=\"http://jsfiddle.net/AVhRf/\">jsfiddle here</a>.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div ng-controller=\"FirstCtrl\"&gt;\n    &lt;input type=\"text\" ng-model=\"FirstName\"&gt;&lt;!-- Input entered here --&gt;\n    &lt;br&gt;Input is : &lt;strong&gt;{{FirstName}}&lt;/strong&gt;&lt;!-- Successfully updates here --&gt;\n&lt;/div&gt;\n\n&lt;hr&gt;\n\n&lt;div ng-controller=\"SecondCtrl\"&gt;\n    Input should also be here: {{FirstName}}&lt;!-- How do I automatically updated it here? --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>JS</strong></p>\n\n<pre><code>// declare the app with no dependencies\nvar myApp = angular.module('myApp', []);\n\n// make a factory to share data between controllers\nmyApp.factory('Data', function(){\n    // I know this doesn't work, but what will?\n    var FirstName = '';\n    return FirstName;\n});\n\n// Step 1 Controller\nmyApp.controller('FirstCtrl', function( $scope, Data ){\n\n});\n\n// Step 2 Controller\nmyApp.controller('SecondCtrl', function( $scope, Data ){\n    $scope.FirstName = Data.FirstName;\n});\n</code></pre>\n\n<p>Any help is greatly appreciated.</p>\n    ","a":"\n<p>A simple solution is to have your factory return an object and let your controllers work with a reference to the same object:</p>\n\n<p>JS:</p>\n\n<pre><code>myApp.factory('Data', function () {\n    return { FirstName: '' };\n});\n\nmyApp.controller('FirstCtrl', function ($scope, Data) {\n    $scope.Data = Data;\n});\n\nmyApp.controller('SecondCtrl', function ($scope, Data) {\n    $scope.Data = Data;\n});\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"FirstCtrl\"&gt;\n  &lt;input type=\"text\" ng-model=\"Data.FirstName\"&gt;\n  &lt;br&gt;Input is : &lt;strong&gt;{{Data.FirstName}}&lt;/strong&gt;\n&lt;/div&gt;\n&lt;hr&gt;\n&lt;div ng-controller=\"SecondCtrl\"&gt;\n  Input should also be here: {{Data.FirstName}}\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/HEdJF/\">http://jsfiddle.net/HEdJF/</a></p>\n\n<p>When applications get larger, more complex and harder to test you might not want to expose the entire object from the factory this way, but instead give limited access for example via getters and setters:</p>\n\n<pre><code>myApp.factory('Data', function () {\n\n    var data = {\n        FirstName: ''\n    };\n\n    return {\n        getFirstName: function () {\n            return data.FirstName;\n        },\n        setFirstName: function (firstName) {\n            data.FirstName = firstName;\n        }\n    };\n});\n</code></pre>\n\n<p>With this approach it is up to the consuming controllers to update the factory with new values, and to watch for changes to get them:</p>\n\n<pre><code>myApp.controller('FirstCtrl', function ($scope, Data) {\n\n    $scope.firstName = '';\n\n    $scope.$watch('firstName', function (newValue, oldValue) {\n        if (newValue !== oldValue) Data.setFirstName(newValue);\n    });\n});\n\nmyApp.controller('SecondCtrl', function ($scope, Data) {\n\n    $scope.$watch(function () { return Data.getFirstName(); }, function (newValue, oldValue) {\n        if (newValue !== oldValue) $scope.firstName = newValue;\n    });\n});\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/27mk1n1o/\">http://jsfiddle.net/27mk1n1o/</a></p>\n    "},{"t":"ng-options with simple array init","l":"http://stackoverflow.com/questions/18202106/ng-options-with-simple-array-init","q":"\n\n<p>I'm a little bit confuse with angular and ng-options.</p>\n\n<p>I have a simple array and want to init a select with it. But, I want that options value = label.</p>\n\n<h3>script.js</h3>\n\n<pre><code>$scope.options = ['var1', 'var2', 'var3'];\n</code></pre>\n\n<h3>html</h3>\n\n<pre><code>&lt;select ng-model=\"myselect\" ng-options=\"o for o in options\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>What I get:</p>\n\n<pre><code>&lt;option value=\"0\"&gt;var1&lt;/option&gt;\n&lt;option value=\"1\"&gt;var2&lt;/option&gt;\n&lt;option value=\"2\"&gt;var3&lt;/option&gt;\n</code></pre>\n\n<p>What I want:</p>\n\n<pre><code>&lt;option value=\"var1\"&gt;var1&lt;/option&gt;\n&lt;option value=\"var2\"&gt;var2&lt;/option&gt;\n&lt;option value=\"var3\"&gt;var3&lt;/option&gt;\n</code></pre>\n\n<p>So I tried:</p>\n\n<pre><code>&lt;select ng-model=\"myselect2\" ng-init=0 ng-options=\"options[k] as v for (k,v) in options\"&gt;&lt;/select&gt;\n\n&lt;select ng-model=\"myselect3\" ng-init=0 ng-options=\"b as b for b in options\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>(But it didn’t work.)</p>\n\n<h3>Edit:</h3>\n\n<p>My form is submitted externally, which is why I need 'var1' as the value instead of 0.</p>\n    ","a":"\n<p>You actually had it correct in your third attempt.</p>\n\n<pre><code> &lt;select ng-model=\"myselect\" ng-options=\"o as o for o in options\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>See a working example here:\n<a href=\"http://plnkr.co/edit/xEERH2zDQ5mPXt9qCl6k?p=preview\">http://plnkr.co/edit/xEERH2zDQ5mPXt9qCl6k?p=preview</a></p>\n\n<p>The trick is that AngularJS writes the keys as numbers from 0 to n anyway, and translates back when updating the model.</p>\n\n<p>As a result, the HTML will look incorrect but the model will still be set properly when choosing a value. <em>(i.e. AngularJS will translate '0' back to 'var1')</em></p>\n\n<p>The solution by Epokk also works, however if you're loading data asynchronously you might find it doesn't always update correctly. Using ngOptions will correctly refresh when the scope changes.</p>\n    "},{"t":"from jquery $.ajax to angular $http","l":"http://stackoverflow.com/questions/12131659/from-jquery-ajax-to-angular-http","q":"\n\n<p>I have this piece of jQuery code that works fine cross origin:</p>\n\n<pre><code>jQuery.ajax({\n    url: \"http://example.appspot.com/rest/app\",\n    type: \"POST\",\n    data: JSON.stringify({\"foo\":\"bar\"}),\n    dataType: \"json\",\n    contentType: \"application/json; charset=utf-8\",\n    success: function (response) {\n        console.log(\"success\");\n    },\n    error: function (response) {\n        console.log(\"failed\");\n    }\n});\n</code></pre>\n\n<p>Now I'm tring to convert this to Angular.js code without any success:</p>\n\n<pre><code>$http({\n    url: \"http://example.appspot.com/rest/app\",\n    dataType: \"json\",\n    method: \"POST\",\n    data: JSON.stringify({\"foo\":\"bar\"}),\n    headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n}).success(function(response){\n    $scope.response = response;\n}).error(function(error){\n    $scope.error = error;\n});\n</code></pre>\n\n<p>Any help appreciated.</p>\n    ","a":"\n<p>The AngularJS way of calling $http would look like:</p>\n\n<pre><code>$http({\n    url: \"http://example.appspot.com/rest/app\",\n    method: \"POST\",\n    data: {\"foo\":\"bar\"}\n}).success(function(data, status, headers, config) {\n    $scope.data = data;\n}).error(function(data, status, headers, config) {\n    $scope.status = status;\n});\n</code></pre>\n\n<p>or could be written even simpler using shortcut methods:</p>\n\n<pre><code>$http.post(\"http://example.appspot.com/rest/app\", {\"foo\":\"bar\"})\n.success(function(data, status, headers, config) {\n    $scope.data = data;\n}).error(function(data, status, headers, config) {\n    $scope.status = status;\n});\n</code></pre>\n\n<p>There are number of things to notice:</p>\n\n<ul>\n<li>AngularJS version is more concise (especially using .post() method) </li>\n<li>AngularJS will take care of converting JS objects into JSON string and setting headers (those are customizable)</li>\n<li>Callback functions are named <code>success</code> and <code>error</code> respectively (also please note parameters of each callback) </li>\n</ul>\n\n<p>The above is just a quick example and some pointers, be sure to check AngularJS documentation for more: <a href=\"http://docs.angularjs.org/api/ng.%24http\">http://docs.angularjs.org/api/ng.$http</a></p>\n    "},{"t":"Javascript web app and Java server, build all in Maven or use Grunt for web app?","l":"http://stackoverflow.com/questions/15406977/javascript-web-app-and-java-server-build-all-in-maven-or-use-grunt-for-web-app","q":"\n\n<p>We are doing a web application with AngularJS and we like the idea of using Bower for Dependency Management and Grunt for building, running tests etc. (<a href=\"http://yeoman.io/\">Yeoman</a>)</p>\n\n<p>The server is done with Java using Maven, so of course we would like with a simple <code>mvn install</code> build everything (web application + server)</p>\n\n<p>So what approach you took and why?</p>\n\n<p>1) Treat them as two different applications, which in fact they are. So using different building methods/tools is acceptable.</p>\n\n<p>2) Forget about Grunt Bower, use Maven plugins to build, run tests, manage dependencies for the web application. If that is the case, which ones?</p>\n\n<p>3) Use Maven exec plugin to call Grunt to build the front-end webapp. I see this more as a hack than a solution.</p>\n\n<p>4) Other.</p>\n\n<p>Approach easier to integrate with Jenkins is a plus.</p>\n\n<p>Thanks in advance!</p>\n    ","a":"\n<p>After working with about every asset pipeline tool in the Java toolkit for a while I have come to a few conclusions:</p>\n\n<h3>Java Based Tooling</h3>\n\n<p>There are a handful of tools out there but the most popular are JAWR and Wro4J. The biggest problem with both of these is that they are mostly <a href=\"https://developer.mozilla.org/en-US/docs/Rhino\">Rhino</a> based (WRO4J now has some Node support) and Rhino is dog slow compared to Node based tools. You also have to consider that the JavaScript tooling is rapidly maturing so you should be looking for tools that can move quickly.</p>\n\n<ul>\n<li><p><a href=\"https://code.google.com/p/wro4j/\">WRO4J</a> - Support is great, Maven AND Eclipse integration are great the list of plugins is extensive and the framework is flexible enough that with some elbow grease you can write a plugin for whatever you need. If you're confined to a Java based asset pipeline this is for sure the way to go. The issue with Wro4j is that it is slow ( even when it kicks off Node processes ) relative to Node based tools. \n<br>\nTo give some real world numbers compiling and concatenating 25 asset bundles containing LESS, CSS CoffeeScript and JavaScript takes about ~35s when using Rhino and ~15s using Wro4j's Node support on a 2013 iMac with 16G of RAM. Using <a href=\"http://gruntjs.com/\">Grunt</a>+Node takes about 2s on my puny MacBook Air.</p></li>\n<li><p><a href=\"http://jawr.java.net/\">JAWR</a> - The integrations and feature list are pretty good but the docs aren't great and writing your own plugins can be a little tricky. When I originally wrote this post JAWR was in the middle of a 4 year hiatus but is now back under active development as of Jan 2014. If you choose to investigate Java Tools this is worth investigation.</p></li>\n</ul>\n\n<h3>Node Based Tooling (integrated with Ant/Maven Builds)</h3>\n\n<ul>\n<li><p><a href=\"http://gruntjs.com/\">Grunt</a> - It's easy, has a fantastic plugin ecosystem and the community is massive. If there is something you need to do you can bet there is a plugin for it - possibly even one written by the creators of grunt. The major criticisms of Grunt are that it is configuration driven which makes for a very setup easy but is not the \"Node Way.\" It's also worth mentioning that Grunt tasks are not easily composable so for a complex JavaScript build pipeline Grunt may not be ideal.</p></li>\n<li><p><a href=\"http://gulpjs.com/\">Gulp</a> - Gulp is the fast growing alternative to Grunt. Its concurrent by default and uses streams to avoid temporary writes to the file system which can considerably speed up your build. Gulp is very idiomatic and has an emphasis on code &gt; configuration and while this gives you a lot of power it's is not ideal for teams that don't have a core competency in JavaScript.</p></li>\n</ul>\n\n<p>The only potential hang up for JavaScript based tooling is that you will have to have <a href=\"http://nodejs.org/\">Node</a>, <a href=\"https://npmjs.org/\">npm</a> and <a href=\"https://npmjs.org/package/grunt-cli\">grunt-cli</a>/<a href=\"https://www.npmjs.org/package/gulp\">gulp</a> on any machine that needs to do the compilation. If you don't have access to your CI machines or are not using artifact based deploys this may be a hard sell.\n<br>\n<br>\nIntegrating this into your Maven project is pretty easy and you have quite a few options. You can use the Maven <a href=\"https://gist.github.com/nadavdav/5308453\">ant-run plugin</a>, you can run an <a href=\"http://ant.apache.org/manual/Tasks/exec.html\">ant exec task</a> and call it from Maven or best of all you can just use the <a href=\"http://mojo.codehaus.org/exec-maven-plugin/usage.html\">maven exec task</a>.\n<br>\nBelow is the code to integrate this into the Maven lifecycle using the exec plugin if this is helpful to anybody.</p>\n\n<pre><code>    &lt;plugin&gt;\n      &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n      &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n      &lt;version&gt;1.2.1&lt;/version&gt;\n      &lt;executions&gt;\n        &lt;execution&gt;\n          &lt;phase&gt;prepare-package&lt;/phase&gt;\n          &lt;goals&gt;\n            &lt;goal&gt;exec&lt;/goal&gt;\n          &lt;/goals&gt;\n        &lt;/execution&gt;\n      &lt;/executions&gt;\n      &lt;configuration&gt;\n        &lt;executable&gt;grunt&lt;/executable&gt;\n      &lt;/configuration&gt;\n    &lt;/plugin&gt;\n</code></pre>\n    "},{"t":"How can I add some small utility functions to my AngularJS application?","l":"http://stackoverflow.com/questions/19614545/how-can-i-add-some-small-utility-functions-to-my-angularjs-application","q":"\n\n<p>I would like to add some utility functions to my AngularJS application. For example:</p>\n\n<pre><code>$scope.isNotString = function (str) {\n    return (typeof str !== \"string\");\n}\n</code></pre>\n\n<p>Is the best way to do this to add them as a service? From what I have read I can do \nthis but then I would like to use these in my HTML pages so is it still possible if\nthey are in a service? For example can I use the following:</p>\n\n<pre><code> &lt;button data-ng-click=\"doSomething()\"\n         data-ng-disabled=\"isNotString(abc)\"&gt;Do Something\n &lt;/button&gt;\n</code></pre>\n\n<p>Can someone give me an example of how I could add these. Should I create a service\nor is there some other way of doing it. Most important I would like these utility\nfunctions in a file and not combined with another part of the main set up.</p>\n\n<p>I understand there's a few solutions but none of them are so clear.</p>\n\n<p><strong>Solution 1</strong> - Proposed by Urban</p>\n\n<pre><code>$scope.doSomething = ServiceName.functionName;\n</code></pre>\n\n<p>The problem here is I have 20 functions and ten controllers. If I did this it would mean adding a lot of code to each controller.</p>\n\n<p><strong>Solution 2</strong> - Proposed by me</p>\n\n<pre><code>    var factory = {\n\n        Setup: function ($scope) {\n\n            $scope.isNotString = function (str) {\n                return (typeof str !== \"string\");\n            }\n</code></pre>\n\n<p>The disadvantage of this is that at the start of every controller I would have one or more of these Setup calls to each service which passed the $scope.</p>\n\n<p><strong>Solution 3</strong> - Proposed by Urban</p>\n\n<p>The solution proposed by urban of creating a generic service looks good. Here's my main set up:</p>\n\n<pre><code>var app = angular\n    .module('app', ['ngAnimate', 'ui.router', 'admin', 'home', 'questions', 'ngResource', 'LocalStorageModule'])\n    .config(['$locationProvider', '$sceProvider', '$stateProvider',\n        function ($locationProvider, $sceProvider, $stateProvider) {\n\n            $sceProvider.enabled(false);\n            $locationProvider.html5Mode(true);\n</code></pre>\n\n<p>Should I add the generic service to this and how could I do it ?</p>\n    ","a":"\n<p><strong>EDIT 7/1/15:</strong> </p>\n\n<p>I wrote this answer a pretty long time ago and haven't been keeping up a lot with angular for a while, but it seems as though this answer is still relatively popular, so I wanted to point out that a couple of the point @nicolas makes below are good. For one, injecting $rootScope and attaching the helpers there will keep you from having to add them for every controller. Also - I agree that if what you're adding should be thought of as Angular services OR filters, they should be adopted into the code in that manner. </p>\n\n<p>Also, as of the current version 1.4.2, Angular exposes a \"Provider\" API, which is allowed to be injected into config blocks. See these resources for more:</p>\n\n<p><a href=\"https://docs.angularjs.org/guide/module#module-loading-dependencies\">https://docs.angularjs.org/guide/module#module-loading-dependencies</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/12903338/angularjs-dependency-injection-of-value-inside-of-module-config\">AngularJS dependency injection of value inside of module.config</a></p>\n\n<p>I don't think I'm going to update the actual code blocks below, because I'm not really actively using Angular these days and I don't really want to hazard a new answer without feeling comfortable that it's actually conforming to new best practices. If someone else feels up to it, by all means go for it. </p>\n\n<p><strong>EDIT 2/3/14:</strong></p>\n\n<p>After thinking about this and reading some of the other answers, I actually think I prefer a variation of the method brought up by @Brent Washburne and @Amogh Talpallikar. Especially if you're looking for utilities like isNotString() or similar. One of the clear advantages here is that you can re-use them outside of your angular code and you can use them inside of your config function (which you can't do with services).</p>\n\n<p>That being said, if you're looking for a generic way to re-use what should properly be services, the old answer I think is still a good one. </p>\n\n<p>What I would do now is:</p>\n\n<p>app.js:</p>\n\n<pre><code>var MyNamespace = MyNamespace || {};\n\n MyNamespace.helpers = {\n   isNotString: function(str) {\n     return (typeof str !== \"string\");\n   }\n };\n\n angular.module('app', ['app.controllers', 'app.services']).                             \n   config(['$routeProvider', function($routeProvider) {\n     // Routing stuff here...\n   }]);\n</code></pre>\n\n<p>controller.js:</p>\n\n<pre><code>angular.module('app.controllers', []).                                                                                                                                                                                  \n  controller('firstCtrl', ['$scope', function($scope) {\n    $scope.helpers = MyNamespace.helpers;\n  });\n</code></pre>\n\n<p>Then in your partial you can use:</p>\n\n<pre><code>&lt;button data-ng-click=\"console.log(helpers.isNotString('this is a string'))\"&gt;Log String Test&lt;/button&gt;\n</code></pre>\n\n<p><strong>Old answer below:</strong></p>\n\n<p>It might be best to include them as a service. If you're going to re-use them across multiple controllers, including them as a service will keep you from having to repeat code.</p>\n\n<p>If you'd like to use the service functions in your html partial, then you should add them to that controller's scope:</p>\n\n<p><code>$scope.doSomething = ServiceName.functionName;</code></p>\n\n<p>Then in your partial you can use:</p>\n\n<pre><code>&lt;button data-ng-click=\"doSomething()\"&gt;Do Something&lt;/button&gt;\n</code></pre>\n\n<p>Here's a way you might keep this all organized and free from too much hassle:</p>\n\n<p>Separate your controller, service and routing code/config into three files: controllers.js, services.js, and app.js. The top layer module is \"app\", which has app.controllers and app.services as dependencies. Then app.controllers and app.services can be declared as modules in their own files. This organizational structure is just taken from <a href=\"https://github.com/angular/angular-seed\">Angular Seed</a>:</p>\n\n<p>app.js:</p>\n\n<pre><code> angular.module('app', ['app.controllers', 'app.services']).                             \n   config(['$routeProvider', function($routeProvider) {\n     // Routing stuff here...\n   }]);  \n</code></pre>\n\n<p>services.js:</p>\n\n<pre><code> /* Generic Services */                                                                                                                                                                                                    \n angular.module('app.services', [])                                                                                                                                                                        \n   .factory(\"genericServices\", function() {                                                                                                                                                   \n     return {                                                                                                                                                                                                              \n       doSomething: function() {   \n         //Do something here\n       },\n       doSomethingElse: function() {\n         //Do something else here\n       }\n    });\n</code></pre>\n\n<p>controller.js:</p>\n\n<pre><code>angular.module('app.controllers', []).                                                                                                                                                                                  \n  controller('firstCtrl', ['$scope', 'genericServices', function($scope, genericServices) {\n    $scope.genericServices = genericServices;\n  });\n</code></pre>\n\n<p>Then in your partial you can use:</p>\n\n<pre><code>&lt;button data-ng-click=\"genericServices.doSomething()\"&gt;Do Something&lt;/button&gt;\n&lt;button data-ng-click=\"genericServices.doSomethingElse()\"&gt;Do Something Else&lt;/button&gt;\n</code></pre>\n\n<p>That way you only add one line of code to each controller and are able to access any of the services functions wherever that scope is accessible.</p>\n    "},{"t":"Using comma as list separator with AngularJS","l":"http://stackoverflow.com/questions/11540157/using-comma-as-list-separator-with-angularjs","q":"\n\n<p>I need to create a comma-separated list of items:</p>\n\n<pre><code>  &lt;li ng-repeat=\"friend in friends\"&gt;\n      &lt;b ng-repeat=\"email in friend.email\"&gt;{{email}}{{$last ? '' : ', '}}&lt;/b&gt;...\n  &lt;/li&gt;\n</code></pre>\n\n<p>According to the AngularJS documentation, no control flow statements is allowed in expressions. This is why my <code>{{$last ? '' : ', '}}</code> does not work.</p>\n\n<p>Is there an alternative way to create comma-separated lists?</p>\n\n<p><strong>EDIT 1</strong><br>\nis there something simpler than:</p>\n\n<pre><code>&lt;span ng-show=\"!$last\"&gt;, &lt;/span&gt;\n</code></pre>\n    ","a":"\n<p>You could do it this way:</p>\n\n<p><code>&lt;b ng-repeat=\"email in friend.email\"&gt;{{email}}{{$last ? '' : ', '}}&lt;/b&gt;</code></p>\n\n<p>..But I like Philipp's answer :-)</p>\n    "},{"t":"How to put a delay on AngularJS instant search?","l":"http://stackoverflow.com/questions/15304562/how-to-put-a-delay-on-angularjs-instant-search","q":"\n\n<p>I am new to AngularJS, and I have a performance issue that I can't seem to address. I have instant search but it's somewhat laggy, since it starts searching on each keyup().</p>\n\n<p>JS:</p>\n\n<pre><code>var App = angular.module('App', []);\n\nApp.controller('DisplayController', function($scope, $http) {\n$http.get('data.json').then(function(result){\n    $scope.entries = result.data;\n});\n});\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input id=\"searchText\" type=\"search\" placeholder=\"live search...\" ng-model=\"searchText\" /&gt;\n&lt;div class=\"entry\" ng-repeat=\"entry in entries | filter:searchText\"&gt;\n&lt;span&gt;{{entry.content}}&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The JSON data isn't even that large, 300KB only, I think what I need to accomplish is to put a delay of ~1 sec on the search to wait for the user to finish typing, instead of performing the action on each keystroke. AngularJS does this internally, and after reading docs and other topics on here I couldn't find a specific answer.</p>\n\n<p>I would appreciate any pointers on how I can delay the instant search.\nThanks.</p>\n    ","a":"\n<p>(See answer below for a Angular 1.3 solution.)</p>\n\n<p>The issue here is that the search will execute every time the model changes, which is every keyup action on an input.</p>\n\n<p>There would be cleaner ways to do this, but probably the easiest way would be to switch the binding so that you have a $scope property defined inside your Controller on which your filter operates. That way you can control how frequently that $scope variable is updated. Something like this:</p>\n\n<p>JS:</p>\n\n<pre><code>var App = angular.module('App', []);\n\nApp.controller('DisplayController', function($scope, $http, $timeout) {\n    $http.get('data.json').then(function(result){\n        $scope.entries = result.data;\n    });\n\n    // This is what you will bind the filter to\n    $scope.filterText = '';\n\n    // Instantiate these variables outside the watch\n    var tempFilterText = '',\n        filterTextTimeout;\n    $scope.$watch('searchText', function (val) {\n        if (filterTextTimeout) $timeout.cancel(filterTextTimeout);\n\n        tempFilterText = val;\n        filterTextTimeout = $timeout(function() {\n            $scope.filterText = tempFilterText;\n        }, 250); // delay 250 ms\n    })\n});\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input id=\"searchText\" type=\"search\" placeholder=\"live search...\" ng-model=\"searchText\" /&gt;\n&lt;div class=\"entry\" ng-repeat=\"entry in entries | filter:filterText\"&gt;\n    &lt;span&gt;{{entry.content}}&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n    "},{"t":"AngularJS: Understanding design pattern","l":"http://stackoverflow.com/questions/20286917/angularjs-understanding-design-pattern","q":"\n\n<p><a href=\"https://plus.google.com/110323587230527980117\">AngularJS</a>:  Shared publicly  -  <a href=\"https://plus.google.com/110323587230527980117/posts/aZNVhj355G2\">Jul 19, 2012</a></p>\n\n<blockquote>\n  <p><strong>MVC vs MVVM vs MVP</strong>. What a controversial topic that many developers\n  can spend hours and hours debating and arguing about.</p>\n  \n  <p>For several years AngularJS was closer to MVC (or rather one of its\n  client-side variants), but over time and thanks to many refactorings\n  and api improvements, it's now closer to <strong>MVVM</strong> – the <strong><em>$scope</em></strong> object\n  could be considered the <strong>ViewModel</strong> that is being decorated by a\n  function that we call a <strong>Controller</strong>.</p>\n  \n  <p>Being able to categorize a framework and put it into one of the MV* buckets has some advantages.\n  It can help developers get more comfortable with its apis by making it\n  easier to create a mental model that represents the application that\n  is being built with the framework. It can also help to establish\n  terminology that is used by developers.</p>\n  \n  <p>Having said, I'd rather see developers build kick-ass apps that are\n  well-designed and follow separation of concerns, than see them waste\n  time arguing about MV* nonsense. And for this reason, I hereby declare\n  <strong>AngularJS</strong> to be <strong>MVW framework - Model-View-Whatever</strong>. Where Whatever\n  stands for \"<strong>whatever works for you</strong>\".</p>\n  \n  <p>Angular gives you a lot of flexibility to nicely separate presentation\n  logic from business logic and presentation state. Please use it fuel\n  your productivity and application maintainability rather than heated\n  discussions about things that at the end of the day don't matter that\n  much.</p>\n</blockquote>\n\n<h2>Are there any recommendations or guidelines for implementing AngularJS MVW (Model View Whatever) design pattern in client-side applications?</h2>\n    ","a":"\n<p>Thanks to a huge amount of valuable sources I've got some general recommendations for implementing components in AngularJS apps:</p>\n\n<hr>\n\n<h1>Controller</h1>\n\n<ul>\n<li><p>Controller should be just an <strong>interlayer</strong> between model and view. Try to make it as <strong>thin</strong> as possible.</p></li>\n<li><p>It is highly recommended to <strong>avoid business logic</strong> in controller. It should be moved to model.</p></li>\n<li><p>Controller may communicate with other controllers using method invocation (possible when children wants to communicate with parent) or <em>$emit</em>, <em>$broadcast</em> and <em>$on</em> methods. The emitted and broadcasted messages should be kept to a minimum. </p></li>\n<li><p>Controller should <strong>not care about presentation</strong> or DOM manipulation.</p></li>\n<li><p>Try to <strong>avoid nested controllers</strong>. In this case parent controller is interpreted as model. Inject models as shared services instead.</p></li>\n<li><p><strong>Scope</strong> in controller should be used for <strong>binding</strong> model with view and<br>\nencapsulating <strong>View Model</strong> as for <strong>Presentation Model</strong> design pattern.</p></li>\n</ul>\n\n<hr>\n\n<h1>Scope</h1>\n\n<p>Treat scope as <strong>read-only in templates</strong> and <strong>write-only in controllers</strong>. The purpose of the scope is to refer to model, not to be the model.</p>\n\n<p>When doing bidirectional binding (ng-model) make sure you don't bind directly to the scope properties.</p>\n\n<hr>\n\n<h1>Model</h1>\n\n<p>Model in AngularJS is a <strong>singleton</strong> defined by <strong>service</strong>.</p>\n\n<p>Model provides an excellent way to separate data and display.</p>\n\n<p>Models are prime candidates for unit testing, as they typically have exactly one dependency (some form of event emitter, in common case the <em>$rootScope</em>) and contain highly testable <strong>domain logic</strong>.</p>\n\n<ul>\n<li><p>Model should be considered as an implementation of particular unit.\nIt is based on single-responsibility-principle. Unit is an instance that is responsible for its own scope of related logic that may represent single entity in real world and describe it in programming world in terms of <strong>data and state</strong>.</p></li>\n<li><p>Model should encapsulate your application’s data and provide an <strong>API</strong>\nto access and manipulate that data.</p></li>\n<li><p>Model should be <strong>portable</strong> so it can be easily transported to similar\napplication.</p></li>\n<li><p>By isolating unit logic in your model you have made it easier to\nlocate, update, and maintain.</p></li>\n<li><p>Model can use methods of more general global models that are common\nfor the whole application.</p></li>\n<li><p>Try to avoid composition of other models into your model using dependency injection if it is not really dependent to decrease components coupling and increase unit <strong>testability</strong> and <strong>usability</strong>.</p></li>\n<li><p>Try to avoid using event listeners in models. It makes them harder to test and generally kills models in terms of single-responsibility-principle.</p></li>\n</ul>\n\n<h2>Model Implementation</h2>\n\n<p>As model should encapsulate some logic in terms of data and state, it should architecturally restrict access to its members thus we can guarantee loose coupling.</p>\n\n<p>The way to do it in AngularJS application is to define it using <em>factory</em> service type. This will allow us to define private properties and methods very easy and also return publically accessible ones in single place that will make it really readable for developer.</p>\n\n<p><strong>An example</strong>:</p>\n\n<pre><code>angular.module('search')\n.factory( 'searchModel', ['searchResource', function (searchResource) {\n\n  var itemsPerPage = 10,\n  currentPage = 1,\n  totalPages = 0,\n  allLoaded = false,\n  searchQuery;\n\n  function init(params) {\n    itemsPerPage = params.itemsPerPage || itemsPerPage;\n    searchQuery = params.substring || searchQuery;\n  }\n\n  function findItems(page, queryParams) {\n    searchQuery = queryParams.substring || searchQuery;\n\n    return searchResource.fetch(searchQuery, page, itemsPerPage).then( function (results) {\n      totalPages = results.totalPages;\n      currentPage = results.currentPage;\n      allLoaded = totalPages &lt;= currentPage;\n\n      return results.list\n    });\n  }\n\n  function findNext() {\n    return findItems(currentPage + 1);\n  }\n\n  function isAllLoaded() {\n    return allLoaded;\n  }\n\n  // return public model API  \n  return {\n    /**\n     * @param {Object} params\n     */\n    init: init,\n\n    /**\n     * @param {Number} page\n     * @param {Object} queryParams\n     * @return {Object} promise\n     */\n    find: findItems,\n\n    /**\n     * @return {Boolean}\n     */\n    allLoaded: isAllLoaded,\n\n    /**\n     * @return {Object} promise\n     */\n    findNext: findNext\n  };\n});\n</code></pre>\n\n<h2>Creating new instances</h2>\n\n<p>Try to avoid having a factory that returns a new able function as this begins to break down dependency injection and the library will behave awkwardly, especially for third parties.</p>\n\n<p>A better way to accomplish the same thing is to use the factory as an API to return a collection of objects with getter and setter methods attached to them.</p>\n\n<pre><code>angular.module('car')\n .factory( 'carModel', ['carResource', function (carResource) {\n\n  function Car(data) {\n    angular.extend(this, data);\n  }\n\n  Car.prototype = {\n    save: function () {\n      // TODO: strip irrelevant fields\n      var carData = //...\n      return carResource.save(carData);\n    }\n  };\n\n  function getCarById ( id ) {\n    return carResource.getById(id).then(function (data) {\n      return new Car(data);\n    });\n  }\n\n  // the public API\n  return {\n    // ...\n    findById: getCarById\n    // ...\n  };\n});\n</code></pre>\n\n<h2>Global Model</h2>\n\n<p>In general try to avoid such situations and design your models properly thus it can be injected into controller and used in your view. </p>\n\n<p>In particular case some methods require global accessibility within application.\nTo make it possible you can define ‘<em>common</em>’ property in <em>$rootScope</em> and bind it to <em>commonModel</em> during application bootstrap:</p>\n\n<pre><code>angular.module('app', ['app.common'])\n.config(...)\n.run(['$rootScope', 'commonModel', function ($rootScope, commonModel) {\n  $rootScope.common = 'commonModel';\n}]);\n</code></pre>\n\n<p>All your global methods will live within ‘<em>common</em>’ property. This is some kind of <strong>namespace</strong>.</p>\n\n<p>But do not define any methods directly in your <em>$rootScope</em>. This can lead to <a href=\"http://stackoverflow.com/a/18128502/2230007\">unexpected behavior</a> when used with ngModel directive within your view scope, generally littering your scope and leads to scope methods overriding issues.</p>\n\n<hr>\n\n<h1>Resource</h1>\n\n<p>Resource lets you interact with different <strong>data sources</strong>. </p>\n\n<p>Should be implemented using <strong>single-responsibility-principle</strong>.</p>\n\n<p>In particular case it is a <strong>reusable</strong> proxy to HTTP/JSON endpoints.</p>\n\n<p>Resources are injected in models and provide possibility to send/retrieve data.</p>\n\n<h2>Resource implementation</h2>\n\n<p>A factory which creates a resource object that lets you interact with RESTful server-side data sources.</p>\n\n<p>The returned resource object has action methods which provide high-level behaviors without the need to interact with the low level $http service.</p>\n\n<hr>\n\n<h1>Services</h1>\n\n<p><strong>Both model and resource are services</strong>.</p>\n\n<p>Services are unassociated, <strong>loosely coupled</strong> units of functionality that are self-contained.</p>\n\n<p>Services are a feature that Angular brings to client-side web apps from the server side, where services have been commonly used for a long time.</p>\n\n<p>Services in Angular apps are substitutable objects that are wired together using dependency injection.</p>\n\n<p>Angular comes with different types of services. Each one with its own use cases. Please read <a href=\"http://angular-tips.com/blog/2013/08/understanding-service-types/\">Understanding Service Types</a> for details.</p>\n\n<p>Try to consider <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture#Principles\">main principles of service architecture</a> in your application.</p>\n\n<p>In general according to <a href=\"http://www.w3.org/TR/ws-gloss/#service\">Web Services Glossary</a>:</p>\n\n<blockquote>\n  <p>A service is an abstract resource that represents a capability of\n  performing tasks that form a coherent functionality from the point of\n  view of providers entities and requesters entities. To be used, a\n  service must be realized by a concrete provider agent.</p>\n</blockquote>\n\n<hr>\n\n<h1>Client-side structure</h1>\n\n<p>In general client side of the application is splitted into <strong>modules</strong>. Each module should be <strong>testable</strong> as a unit.</p>\n\n<p>Try to define modules depending on <strong>feature/functionality</strong> or <strong>view</strong>, not by type. \nSee <a href=\"http://www.youtube.com/watch?v=ZhfUv0spHCY&amp;feature=share&amp;t=34m19s\">Misko’s presentation</a> for details.</p>\n\n<p>Module components may be conventionally grouped by types such as controllers, models, views, filters, directives etc.</p>\n\n<p>But module itself remains <strong>reusable</strong>, <strong>transferable</strong> and <strong>testable</strong>.</p>\n\n<p>It is also much easier for developers to find some parts of code and all its dependencies. </p>\n\n<p>Please refer to <a href=\"http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript\">Code Organization in Large AngularJS and JavaScript Applications</a> for details.</p>\n\n<p><strong>An example of folders structuring</strong>:</p>\n\n<pre><code>|-- src/\n|   |-- app/\n|   |   |-- app.js\n|   |   |-- home/\n|   |   |   |-- home.js\n|   |   |   |-- homeCtrl.js\n|   |   |   |-- home.spec.js\n|   |   |   |-- home.tpl.html\n|   |   |   |-- home.less\n|   |   |-- user/\n|   |   |   |-- user.js\n|   |   |   |-- userCtrl.js\n|   |   |   |-- userModel.js\n|   |   |   |-- userResource.js\n|   |   |   |-- user.spec.js\n|   |   |   |-- user.tpl.html\n|   |   |   |-- user.less\n|   |   |   |-- create/\n|   |   |   |   |-- create.js\n|   |   |   |   |-- createCtrl.js\n|   |   |   |   |-- create.tpl.html\n|   |-- common/\n|   |   |-- authentication/\n|   |   |   |-- authentication.js\n|   |   |   |-- authenticationModel.js\n|   |   |   |-- authenticationService.js\n|   |-- assets/\n|   |   |-- images/\n|   |   |   |-- logo.png\n|   |   |   |-- user/\n|   |   |   |   |-- user-icon.png\n|   |   |   |   |-- user-default-avatar.png\n|   |-- index.html\n</code></pre>\n\n<p>Good example of angular application structuring is implemented by <em>angular-app</em> - <a href=\"https://github.com/angular-app/angular-app/tree/master/client/src\">https://github.com/angular-app/angular-app/tree/master/client/src</a></p>\n\n<p>This is also considered by modern application generators - <a href=\"https://github.com/yeoman/generator-angular/issues/109\">https://github.com/yeoman/generator-angular/issues/109</a></p>\n    "},{"t":"How to integrate AngularUI to AngularJS?","l":"http://stackoverflow.com/questions/12472244/how-to-integrate-angularui-to-angularjs","q":"\n\n<p>Sorry for the silly question, does everyone know how to start using AngularUI? I've downloaded it from Github and read the instruction in README but still don't understand what I have to do.</p>\n    ","a":"\n<p>Steps to integrate:</p>\n\n<ul>\n<li>Include jQuery and jQuery-ui (best served from a CDN)</li>\n<li>Include angular (it is the best to include if from a CDN)</li>\n<li>Include angular-ui JS / CSS (currently only hosted in the GitHub repository in the <code>build</code> folder)</li>\n<li>Include any jQuery plugins for the directives you are planning to use</li>\n<li>Declare dependencies on the angular-ui modules (<code>ui.directives</code> or <code>ui.filters</code> depending on what you are planning to use).</li>\n</ul>\n\n<p>Most of the outlined steps are just about including JS/CSS dependencies. The only \"tricky\" part is to declare dependencies on a ui.* module, you can do it like this:</p>\n\n<pre><code>var myApp = angular.module('myApp',['ui.directives']);\n</code></pre>\n\n<p>Once all the dependencies are included and a module configured you are ready to go. For example, using the ui-date directive is as simple as (notice the <code>ui-date</code>):</p>\n\n<pre><code>&lt;input name=\"dateField\" ng-model=\"date\" ui-date&gt;\n</code></pre>\n\n<p>Here is the complete jsFiddle showing how to use the ui-date directive: <a href=\"http://jsfiddle.net/r7UJ2/11/\" rel=\"nofollow\">http://jsfiddle.net/r7UJ2/11/</a></p>\n\n<p>You might also want to have a look at the sources of the <a href=\"http://angular-ui.github.com/\" rel=\"nofollow\">http://angular-ui.github.com/</a> where there are live examples off all the directives.</p>\n    "},{"t":"Limit the length of a string with AngularJS","l":"http://stackoverflow.com/questions/18095727/limit-the-length-of-a-string-with-angularjs","q":"\n\n<p>I have the following:</p>\n\n<pre><code>&lt;div&gt;{{modal.title}}&lt;/div&gt;\n</code></pre>\n\n<p>Is there a way that I could limit the length of the string to say 20 characters?</p>\n\n<p>And an even better question would be is there a way that I could change the string to be truncated and show <code>...</code> at the end if it's more than 20 characters?</p>\n    ","a":"\n<p><strong>Edit</strong>\nThe latest version of <code>AngularJS</code>offers <code>limitTo</code> filter <a href=\"https://docs.angularjs.org/api/ng/filter/limitTo\">DOC</a></p>\n\n<p>You need a <em>custom filter</em> like this:</p>\n\n<pre><code>angular.module('ng').filter('cut', function () {\n        return function (value, wordwise, max, tail) {\n            if (!value) return '';\n\n            max = parseInt(max, 10);\n            if (!max) return value;\n            if (value.length &lt;= max) return value;\n\n            value = value.substr(0, max);\n            if (wordwise) {\n                var lastspace = value.lastIndexOf(' ');\n                if (lastspace != -1) {\n                    value = value.substr(0, lastspace);\n                }\n            }\n\n            return value + (tail || ' …');\n        };\n    });\n</code></pre>\n\n<p><strong>Usage</strong>:</p>\n\n<p>{{some_text | cut:true:100:' ...'}}</p>\n\n<p><strong>Options</strong>:</p>\n\n<ul>\n<li>wordwise (boolean) - if true, cut only by words bounds,</li>\n<li>max (integer) - max length of the text, cut to this number of chars,</li>\n<li>tail (string, default: '&nbsp;…') - add this string to the input\n      string if the string was cut.</li>\n</ul>\n\n<p><strong>An other solution</strong>: <a href=\"http://ngmodules.org/modules/angularjs-truncate\">http://ngmodules.org/modules/angularjs-truncate</a> (by @Ehvince)</p>\n    "},{"t":"Ng-model does not update controller value","l":"http://stackoverflow.com/questions/12618342/ng-model-does-not-update-controller-value","q":"\n\n<p>Probably silly question, but I have my html form with simple input and button:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"searchText\" /&gt;\n&lt;button ng-click=\"check()\"&gt;Check!&lt;/button&gt;\n{{ searchText }}\n</code></pre>\n\n<p>Then in the controller (template and controller are called from routeProvider):</p>\n\n<pre><code>$scope.check = function () {\n    console.log($scope.searchText);\n}\n</code></pre>\n\n<p>Why do I see the view updated correctly but undefined in the console when clicking the button?</p>\n\n<p>Thanks!</p>\n\n<p>Update:\nSeems like I have actually solved that issue (before had to come up with some workarounds) with:\nOnly had to change my property name from <code>searchText</code> to <code>search.text</code>, then define empty <code>$scope.search = {};</code> object in the controller and voila... Have no idea why it's working though ;]</p>\n    ","a":"\n<p>Try this in your markup</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"searchText\" /&gt;\n&lt;button ng-click=\"check(searchText)\"&gt;Check!&lt;/button&gt;\n{{ searchText }}\n</code></pre>\n\n<p>and this in your controller</p>\n\n<pre><code>$scope.check = function (searchText) {\n    console.log(searchText);\n}\n</code></pre>\n    "},{"t":"How to run function in angular controller on document ready?","l":"http://stackoverflow.com/questions/18646756/how-to-run-function-in-angular-controller-on-document-ready","q":"\n\n<p>I have a function within my angular controller, I'd like this function to be run on document ready but I noticed that angular runs it as the dom is created.</p>\n\n<pre><code> function myController($scope)\n {\n     $scope.init = function()\n     {\n        // I'd like to run this on document ready\n     }\n\n     $scope.init(); // doesn't work, loads my init before the page has completely loaded\n }\n</code></pre>\n\n<p>Anyone know how I can go about this?</p>\n    ","a":"\n<p>We can use the <code>angular.element(document).ready()</code> method to attach callbacks for when the document is ready.  We can simply attach the callback in the controller like so</p>\n\n<pre><code>function MyCtrl($scope) {\n    angular.element(document).ready(function () {\n        console.log('Hello World');\n    });\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/cVsdp/4/\">http://jsfiddle.net/cVsdp/4/</a></p>\n    "},{"t":"Set HTTP header for one request","l":"http://stackoverflow.com/questions/11876777/set-http-header-for-one-request","q":"\n\n<p>I have one particular request in my app that requires Basic authentication, so I need to set the Authorization header for that request. I read about <a href=\"http://docs.angularjs.org/api/ng.%24http\">setting HTTP request headers</a>, but from what I can tell, it will set that header for all requests of that method. I have something like this in my code:</p>\n\n<pre><code>$http.defaults.headers.post.Authorization = \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\";\n</code></pre>\n\n<p>But I don't want every one of my post requests sending this header. Is there any way to send the header just for the one request I want? Or do I have to remove it after my request?</p>\n    ","a":"\n<p>There's a headers parameter in the config object you pass to <code>$http</code> for per-call headers:</p>\n\n<pre><code>$http({method: 'GET', url: 'www.google.com/someapi', headers: {\n    'Authorization': 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='}\n});\n</code></pre>\n\n<p>Or with the shortcut method:</p>\n\n<pre><code>$http.get('www.google.com/someapi', {\n    headers: {'Authorization': 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='}\n});\n</code></pre>\n\n<p>The list of the valid parameters is available in the <a href=\"http://docs.angularjs.org/api/ng.$http#usage\">$http</a> service documentation.</p>\n    "},{"t":"AngularJS Multiple ng-app within a page","l":"http://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page","q":"\n\n<p>I have just started learning Angular JS and created some basic samples however I am stuck with the following problem.</p>\n\n<p>I have created 2 modules and 2 controllers.</p>\n\n<pre><code>shoppingCart -&gt; ShoppingCartController\nnamesList -&gt; NamesController\n</code></pre>\n\n<p>There are associated views for each controller. The first View renders fine but second is not rendering. There are no errors.</p>\n\n<p><a href=\"http://jsfiddle.net/ep2sQ/\" rel=\"nofollow\">http://jsfiddle.net/ep2sQ/</a></p>\n\n<p>Please help me solve this issue.</p>\n\n<p>Also is there any possibility to add console in View to check what values are passed from Controller.</p>\n\n<p>e.g. in the following div can we add console.log and output the controller values</p>\n\n<pre><code>&lt;div ng-app=\"shoppingCart\" ng-controller=\"ShoppingCartController\"&gt;\n&lt;/div&gt;\n</code></pre>\n    ","a":"\n<p>So basically as  mentioned by Cherniv we need to bootstrap the modules to have multiple ng-app within the same page. Many thanks for all the inputs.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"angular.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"App1\" ng-app=\"shoppingCart\" ng-controller=\"ShoppingCartController\"&gt;\n        &lt;h1&gt;Your order&lt;/h1&gt;\n        &lt;div ng-repeat=\"item in items\"&gt;\n            &lt;span&gt;{{item.product_name}}&lt;/span&gt;\n            &lt;span&gt;{{item.price | currency}}&lt;/span&gt;\n            &lt;button ng-click=\"remove($index);\"&gt;Remove&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"App2\" ng-app=\"namesList\" ng-controller=\"NamesController\"&gt;\n        &lt;h1&gt;List of Names&lt;/h1&gt;\n        &lt;div ng-repeat=\"_name in names\"&gt;\n            &lt;p&gt;{{_name.username}}&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n            var shoppingCartModule = angular.module(\"shoppingCart\", [])\n            shoppingCartModule.controller(\"ShoppingCartController\",\n                function($scope) {\n                    $scope.items = [\n                        {product_name: \"Product 1\", price: 50},\n                        {product_name: \"Product 2\", price: 20},\n                        {product_name: \"Product 3\", price: 180}\n                    ];\n                    $scope.remove = function(index) {\n                        $scope.items.splice(index, 1);\n                    }\n                }\n            );\n            var namesModule = angular.module(\"namesList\", [])\n            namesModule.controller(\"NamesController\",\n                function($scope) {\n                    $scope.names = [\n                        {username: \"Nitin\"},\n                        {username: \"Mukesh\"}\n                    ];\n                }\n            );\n            angular.bootstrap(document.getElementById(\"App2\"),['namesList']);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n    "},{"t":"Angular: Extending controller","l":"http://stackoverflow.com/questions/16539999/angular-extending-controller","q":"\n\n<p>What's the recommended way in Angular for extending controllers?\nI have three controllers that are quite similar. I want to have a controller which these three extend and share its functions.</p>\n    ","a":"\n<p>Perhaps <em>you</em> don't extend a controller but it is possible to extend a controller or make a single controller a mixin of multiple controllers.</p>\n\n<pre><code>module.controller('CtrlImplAdvanced', ['$scope', '$controller', function ($scope, $controller) {\n    // Initialize the super class and extend it.\n    angular.extend(this, $controller('CtrlImpl', {$scope: $scope}));\n    … Additional extensions to create a mixin.\n}]);\n</code></pre>\n\n<p>When the parent controller is created the logic contained within it is also executed.\nSee $controller() for for more information about but only the <code>$scope</code> value needs to be passed. All other values will be injected normally.</p>\n\n<p><em>@mwarren</em>, your concern is taken care of auto-magically by Angular dependency injection. All you need is to inject $scope, although you could override the other injected values if desired.\nTake the following example:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function(angular) {\n\n\tvar module = angular.module('stackoverflow.example',[]);\n\n\tmodule.controller('simpleController', function($scope, $document) {\n\t\tthis.getOrigin = function() {\n\t\t\treturn $document[0].location.origin;\n\t\t};\n\t});\n\n\tmodule.controller('complexController', function($scope, $controller) {\n\t\tangular.extend(this, $controller('simpleController', {$scope: $scope}));\n\t});\n\n})(angular);</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.15/angular.js\"&gt;&lt;/script&gt;\n\n&lt;div ng-app=\"stackoverflow.example\"&gt;\n    &lt;div ng-controller=\"complexController as C\"&gt;\n        &lt;span&gt;&lt;b&gt;Origin from Controller:&lt;/b&gt; {{C.getOrigin()}}&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>Although $document is not passed into 'simpleController' when it is created by 'complexController' $document is injected for us.</p>\n    "},{"t":"Can angularjs routes have optional parameter values?","l":"http://stackoverflow.com/questions/17510962/can-angularjs-routes-have-optional-parameter-values","q":"\n\n<p>Can I set a route with optional params (same template and controller, but some params should be ignored if they don't exist?</p>\n\n<p>So instead of writing the following two rules, have only one?</p>\n\n<pre><code>module.config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n     when('/users/', {templateUrl: 'template.tpl.html', controller: myCtrl}).            \n     when('/users/:userId', {templateUrl: 'template.tpl.html', controller: myCtrl})\n}]);\n</code></pre>\n\n<p>Something like this ([this param is optional])</p>\n\n<pre><code>when('/users[/:userId]', {templateUrl: 'template.tpl.html', controller: myCtrl})\n//note: this previous doesn't work\n</code></pre>\n\n<p>I couldn't find anything in their documentation.</p>\n    ","a":"\n<p>It looks like Angular has support for this now.</p>\n\n<p>From the latest (v1.2.0) docs for <a href=\"http://docs.angularjs.org/api/ngRoute.%24routeProvider\"><code>$routeProvider.when(path, route)</code></a>:</p>\n\n<p><code>path</code> can contain optional named groups with a question mark (<code>:name?</code>)</p>\n    "},{"t":"AngularJS and its use of Dollar Variables","l":"http://stackoverflow.com/questions/12648543/angularjs-and-its-use-of-dollar-variables","q":"\n\n<p>Does anyone know if the reasoning behind the use of dollar methods and variables in angularJS is to instruct angularJS to avoid checking those values when a digestion is going on? So, if angular comes across <code>$scope.$value</code> and <code>$scope.value</code>, then it will avoid checking the former since it's prefixed with a dollar character in its variable name?</p>\n    ","a":"\n<p>There are a few times Angular ignores variables prefixed with the dollar sign:</p>\n\n<ol>\n<li>In <a href=\"http://stackoverflow.com/questions/12648543/angularjs-and-its-use-of-dollar-variables#comment19433906_12648794\">Schumli's comment</a> below, where json filters will not output them</li>\n<li><p>When using the <code>{{ }}</code> directive, angular will not show <em>nested</em> <code>$</code>\nvariables. For example this only displays the <code>visible</code> property.</p>\n\n<pre><code>&lt;div ng-init=\"n = { visible: 'foo', $ignore: 'bar' };\"&gt;{{ n }}&lt;/div&gt;\n</code></pre></li>\n<li><p>Additionally when adding an explicit watcher on a scope object, changes to properties with a leading dollar sign of this object will not trigger the watcher. See <a href=\"http://jsfiddle.net/R9Tfb/13/\">this updated fiddle</a>.</p></li>\n<li><p><code>angular.equals()</code> <a href=\"http://jsfiddle.net/R9Tfb/14/\">ignores keys prefixed with <code>$</code></a>.</p></li>\n</ol>\n    "},{"t":"Angular.js and ASP.NET MVC 4","l":"http://stackoverflow.com/questions/18199174/angular-js-and-asp-net-mvc-4","q":"\n\n<p>I have an ASP.NET MVC 4 project and I'm stuck on an architectural decision on which JavaScript framework or library to use Angular.js or Knock.js. I am currently leaning towards using Angular.js over Knockout.js, but don't want to find out midway during project development I made a mistake.</p>\n\n<p>Here is some background: </p>\n\n<ul>\n<li>We need two-way model data binding</li>\n<li>We need the ability to test views. I want to be able to do end to end unit testing. Also, we are using continuous integration. </li>\n<li>\"Save Changes\" functionality. i.e. if a user makes changes on a page we need the ability to detect any changes and prompt the user to save their changes before they navigate away from the page</li>\n<li>\"Notifications\" functionality. i.e. user will be logged on approximately 8 hours and will need to be notified and updated of changes made by other users (errors, data status changes and the like)</li>\n<li>We need to \"future proof\" our application. Currently the business unit hasn't decided if we will need to support mobile devices, but I know it's just a matter of time.</li>\n<li>Our team consists of developers with varying experience levels from very junior to senior developers.</li>\n<li>Currently our models are complicated and may get even more so</li>\n<li>We need to also consider RAD, code reuse, and maintainability</li>\n</ul>\n\n<p>I have read the excellent answer <a href=\"http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-emberjs-or-other-client-mvc-frameworks-if-i-have\">here</a> and watched Scott Allen's interview about Angular <a href=\"http://www.youtube.com/watch?v=D8vc-cTzvCk\">here</a></p>\n\n<p>Since we are unable to change from our current ASP.NET MVC 4 architecture to use something on the server side like Web API I have some <a href=\"http://stackoverflow.com/questions/17262309/razor-templates-views-and-angular-js\">concerns</a> in trying to implement Angular.js with MVC 4. Will this cause us to have two models one on the server and one on the client? </p>\n\n<p>I am not looking for a \"which is better\" discussion about Angular and Knockout because I think they both have their pros and cons. I am looking for actual code on implementing a JavaScript framework or library in an ASP.NET MVC 4 application. I need a solution that I can live with 2+ years from now :)</p>\n\n<p>Any ideas or suggestions? Maybe the answer is not Knock or Angular, but some other JavaScript framework?</p>\n    ","a":"\n<p>Glad to see this questions was of interest to the community ;) Just for completeness here's what I ended up doing:</p>\n\n<p>I did go with AngularJS and ASP.NET MVC 4 and was glad that I did. Although, Angular has a steep learning curve but its worth it because of the power of directives. </p>\n\n<ul>\n<li>We need two-way model data binding - On occassion I needed to set some initial values coming from the MVC controller. I used the ng-init attribute to accomplish this.</li>\n<li>We need the ability to test views - I followed the <a href=\"http://docs.angularjs.org/guide/dev_guide.unit-testing\">AngularJS docs</a> for testing</li>\n<li>\"Save Changes\" functionality - I implemented this using a directive in Angular</li>\n<li>\"Notifications\" functionality - I implemented this using toastr.js and and directives (schweet)</li>\n<li>We need to \"future proof\" our application - I don't know Google's plans for AngularJS, but after working with AngularJS I can't see it going anywhere anytime soon and expected it to become more widely adopted :) </li>\n</ul>\n    "},{"t":"AngularJS: Basic example to use authentication in Single Page Application","l":"http://stackoverflow.com/questions/16139660/angularjs-basic-example-to-use-authentication-in-single-page-application","q":"\n\n<p>I am new to <a href=\"http://angularjs.org/\">AngularJS</a> and gone through their tutorial and got a feel for it.</p>\n\n<p>I have a backend for my project ready where each of the <code>REST</code> endpoints needs to be authenticated.</p>\n\n<p><strong>What I want to do</strong><br>\na.) I want to have a single page for my project <code>http://myproject.com</code>.<br>\nb.) Once a user hits the URL in browser, based on if user is logged in or not, he is presented with a home page/view or login page/view under the same url <code>http://myproject.com</code>.<br>\nc.) if a user is not logged in, it fills out the form and server sets a <code>USER_TOKEN</code> in session, so all further requests to endpoints will be authenticated based on <code>USER_TOKEN</code>  </p>\n\n<p><strong>My Confusions</strong><br>\na.) How can I handle client-side authentication using AngularJS? I saw <a href=\"https://github.com/witoldsz/angular-http-auth\">here</a> and <a href=\"https://github.com/angular-app/angular-app\">here</a> but did not understand how to use them<br>\nb.) How can I present different views to user based on if user is logged in or not under same url <code>http://myproject.com</code>  </p>\n\n<p>I am using angular.js for the very first time and really getting confused as to how to start. Any advices and/or resources are very much appreciated.</p>\n    ","a":"\n<p>I like the approach and implemented it on server-side without doing any authentication related thing on front-end</p>\n\n<blockquote>\n  <p>My 'technique' on my latest app is.. the client doesn't care about\n  Auth.  Every single thing in the app requires a login first, so the\n  server just always serves a login page unless an existing user is\n  detected in the session.  If session.user is found, the server just\n  sends index.html. Bam :-o</p>\n</blockquote>\n\n<p>Look for the comment by \"Andy Joslin\". </p>\n\n<p><a href=\"https://groups.google.com/forum/?fromgroups=#!searchin/angular/authentication/angular/POXLTi_JUgg/VwStpoWCPUQJ\">https://groups.google.com/forum/?fromgroups=#!searchin/angular/authentication/angular/POXLTi_JUgg/VwStpoWCPUQJ</a></p>\n    "},{"t":"$on and $broadcast in angular","l":"http://stackoverflow.com/questions/19446755/on-and-broadcast-in-angular","q":"\n\n<p>I have a footerController and codeScannerController with different views.</p>\n\n<pre><code>angular.module('myApp').controller('footerController', [\"$scope\", function($scope) {}]);\n\nangular.module('myApp').controller('codeScannerController', [\"$scope\", function($scope) {\nconsole.log(\"start\");\n$scope.startScanner = function(){...\n</code></pre>\n\n<p>When I click on a <code>&lt;li&gt;</code> in footer.html I should get this event in codeScannerController.</p>\n\n<pre><code>&lt;li class=\"button\" ng-click=\"startScanner()\"&gt;3&lt;/li&gt;\n</code></pre>\n\n<p>I think it can be realised with <code>$on</code> and <code>$broadcast</code>, but I don't know how and can't find examples anywhere.</p>\n    ","a":"\n<p>If you want to <code>$broadcast</code> use the <code>$rootScope</code>:</p>\n\n<pre><code>$scope.startScanner = function() {\n\n    $rootScope.$broadcast('scanner-started');\n}\n</code></pre>\n\n<p>And then to receive, use the <code>$scope</code> of your controller:</p>\n\n<pre><code>$scope.$on('scanner-started', function(event, args) {\n\n    // do what you want to do\n});\n</code></pre>\n\n<p>If you want you can pass arguments when you <code>$broadcast</code>:</p>\n\n<pre><code>$rootScope.$broadcast('scanner-started', { any: {} });\n</code></pre>\n\n<p>And then receive them:</p>\n\n<pre><code>$scope.$on('scanner-started', function(event, args) {\n\n    var anyThing = args.any;\n    // do what you want to do\n});\n</code></pre>\n\n<p>Documentation for this inside the <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on\" rel=\"nofollow\">Scope docs</a>.</p>\n    "},{"t":"AngularJS - Binding radio buttons to models with boolean values","l":"http://stackoverflow.com/questions/16970248/angularjs-binding-radio-buttons-to-models-with-boolean-values","q":"\n\n<p>I am having a problem binding radio buttons to an object whose properties have boolean values. I am trying to display exam questions retrieved from a $resource.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;label data-ng-repeat=\"choice in question.choices\"&gt;\n  &lt;input type=\"radio\" name=\"response\" data-ng-model=\"choice.isUserAnswer\" value=\"true\" /&gt;\n  {{choice.text}}\n&lt;/label&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$scope.question = {\n    questionText: \"This is a test question.\",\n    choices: [{\n            id: 1,\n            text: \"Choice 1\",\n            isUserAnswer: false\n        }, {\n            id: 2,\n            text: \"Choice 2\",\n            isUserAnswer: true\n        }, {\n            id: 3,\n            text: \"Choice 3\",\n            isUserAnswer: false\n        }]\n};   \n</code></pre>\n\n<p>With this example object, the \"isUserAnswer: true\" property does not cause the radio button to be selected. If I encapsulate the boolean values in quotes, it works.</p>\n\n<p>JS:</p>\n\n<pre><code>$scope.question = {\n    questionText: \"This is a test question.\",\n    choices: [{\n            id: 1,\n            text: \"Choice 1\",\n            isUserAnswer: \"false\"\n        }, {\n            id: 2,\n            text: \"Choice 2\",\n            isUserAnswer: \"true\"\n        }, {\n            id: 3,\n            text: \"Choice 3\",\n            isUserAnswer: \"false\"\n        }]\n};   \n</code></pre>\n\n<p>Unfortunately my REST service treats that property as a boolean and it will be difficult to change the JSON serialization to encapsulate those values in quotes. Is there another way to set up the model binding without changing the structure of my model?</p>\n\n<p><a href=\"http://jsfiddle.net/hgxjv/1/\">Here's the jsFiddle showing non-working and working objects</a></p>\n    ","a":"\n<p>The correct approach in Angularjs is to use <code>ng-value</code> for non-string values of models.</p>\n\n<p>Modify your code like this:</p>\n\n<pre><code>&lt;label data-ng-repeat=\"choice in question.choices\"&gt;\n  &lt;input type=\"radio\" name=\"response\" data-ng-model=\"choice.isUserAnswer\" data-ng-value=\"true\" /&gt;\n  {{choice.text}}\n&lt;/label&gt;\n</code></pre>\n\n<p>Ref: <a href=\"https://groups.google.com/d/msg/angular/6KV44uPJxMU/XXLiez7Z8AcJ\">Straight from the horse's mouth</a></p>\n    "},{"t":"What is an angularjs directive?","l":"http://stackoverflow.com/questions/13875466/what-is-an-angularjs-directive","q":"\n\n<p>I have spent quite a lot of time reading through angularjs documentation and several tutorials, and I have been quite surprised at how unapproachable the documentation is.</p>\n\n<p>I have a simple, answerable question that may also be useful to others looking to pick up angularjs:</p>\n\n<p><strong><em>What is an angularjs directive??</em></strong></p>\n\n<p>There should be a simple, precise definition of a directive somewhere, but the <a href=\"http://angularjs.org/\">angularjs website</a> offers these surprisingly useless definitions:</p>\n\n<ul>\n<li><p><em><a href=\"http://angularjs.org/\">On the home page</a></em>:  Directives is a unique and powerful feature available only in Angular. Directives let you invent new HTML syntax, specific to your application.</p></li>\n<li><p><em>In the <a href=\"http://docs.angularjs.org/guide/directive\">developer documentation</a></em>:  Directives are a way to teach HTML new tricks. During DOM compilation directives are matched against the HTML and executed. This allows directives to register behavior, or transform the DOM.</p></li>\n<li><p>There is a <a href=\"http://blog.angularjs.org/2012/11/about-those-directives.html\">series of talks</a> about directives which, ironically, seem to assume the audience already understands what they are.</p></li>\n</ul>\n\n<p>Would anyone be able to offer, for clear reference, a precise definition of what a directive is that explains:</p>\n\n<ol>\n<li>What it is (see the clear <a href=\"http://jquery.com/\">definition of jQuery</a> as an example)</li>\n<li>What practical problems and situations it is intended to address</li>\n<li>What design pattern does it embody, or alternatively, how does it fit into the purported MVC/<a href=\"https://plus.google.com/104744871076396904202/posts/DRUAkZmXjNV\">MVW</a> mission of angularjs</li>\n</ol>\n\n<p>thanks!</p>\n    ","a":"\n<blockquote>\n  <p>What it is (see the clear definition of jQuery as an example)?</p>\n</blockquote>\n\n<p>A directive is essentially a function<sup>†</sup> that executes when the Angular compiler finds it in the DOM.  The function(s) can do almost anything, which is why I think it is rather difficult to define what a directive is.  Each directive has a name (like ng-repeat, tabs, make-up-your-own) and each directive determines where it can be used: element, attribute, class, in a comment.</p>\n\n<p><sup>†</sup> A directive normally only has a (post)link function.  A complicated directive could have a compile function, a pre-link function, and a post-link function.</p>\n\n<blockquote>\n  <p>What practical problems and situations is it intended to address?</p>\n</blockquote>\n\n<p>The most powerful thing directives can do is extend HTML.  Your extensions are a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">Domain Specific Language</a> (DSL) for building your application.  E.g., if your application runs an online shopping site, you can extend HTML to have \"shopping-cart\", \"coupon\", \"specials\", etc. directives -- whatever words or objects or concepts are more natural to use within the \"online shopping\" domain, rather than \"div\"s and \"span\"s (as @WTK already mentioned).</p>\n\n<p>Directives can also componentize HTML -- group a bunch of HTML into some reusable component.  If you find yourself using ng-include to pull in lots of HTML, it is probably time to refactor into directives.</p>\n\n<blockquote>\n  <p>What design pattern does it embody, or alternatively, how does it fit into\n  the purported MVC/MVW mission of angularjs</p>\n</blockquote>\n\n<p>Directives are where you manipulate the DOM and catch DOM events.  This is why the directive's compile and link functions both receive the \"element\" as an argument.  You can </p>\n\n<ul>\n<li>define a bunch of HTML (i.e., a template) to replace the directive</li>\n<li>bind events to this element (or its children)</li>\n<li>add/remove a class</li>\n<li>change the text() value</li>\n<li>watch for changes to attributes defined in the same element (actually it is the attributes' values that are watched -- these are scope properties, hence the directive watches the \"model\" for changes)</li>\n<li>etc.</li>\n</ul>\n\n<p></p><hr>\nIn HTML we have things like <code>&lt;a href=\"...\"&gt;</code>, <code>&lt;img src=\"...\"&gt;</code>, <code>&lt;br&gt;</code>, <code>&lt;table&gt;&lt;tr&gt;&lt;th&gt;</code>.  How would you describe what a, href, img, src, br, table, tr, and th are?  That's what a directive is.<p></p>\n    "},{"t":"AngularJS. How to call controller function from outside of controller component","l":"http://stackoverflow.com/questions/16709373/angularjs-how-to-call-controller-function-from-outside-of-controller-component","q":"\n\n<p>How I can call function defined under controller from any place of web page (outside of controller component)?</p>\n\n<p>It works perfectly when I press \"get\" button. But I need to call it from outside of div controller. The logic is: by default my div is hidden. Somewhere in navigation menu I press a button and it should show() my div and execute \"get\" function. How I can achieve this?</p>\n\n<p>My web page is:</p>\n\n<pre><code>&lt;div ng-controller=\"MyController\"&gt;\n  &lt;input type=\"text\" ng-model=\"data.firstname\" required&gt;\n  &lt;input type='text' ng-model=\"data.lastname\" required&gt;\n\n  &lt;form ng-submit=\"update()\"&gt;&lt;input type=\"submit\" value=\"update\"&gt;&lt;/form&gt;\n  &lt;form ng-submit=\"get()\"&gt;&lt;input type=\"submit\" value=\"get\"&gt;&lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>My js:</p>\n\n<pre><code>function MyController($scope) {\n  // default data and structure\n  $scope.data = {\n    \"firstname\" : \"Nicolas\",\n    \"lastname\" : \"Cage\"\n  };\n\n  $scope.get = function() {\n    $.ajax({\n       url: \"/php/get_data.php?\",\n       type: \"POST\",\n       timeout: 10000, // 10 seconds for getting result, otherwise error.\n       error:function() { alert(\"Temporary error. Please try again...\");},\n       complete: function(){ $.unblockUI();},\n       beforeSend: function(){ $.blockUI()},\n       success: function(data){\n        json_answer = eval('(' + data + ')');\n        if (json_answer){\n            $scope.$apply(function () {\n              $scope.data = json_answer;\n        });\n        }\n    }\n});\n</code></pre>\n\n<p>};</p>\n\n<pre><code>  $scope.update = function() {\n$.ajax({\n    url: \"/php/update_data.php?\",\n    type: \"POST\",\n    data: $scope.data,\n    timeout: 10000, // 10 seconds for getting result, otherwise error.\n    error:function() { alert(\"Temporary error. Please try again...\");},\n    complete: function(){ $.unblockUI();},\n    beforeSend: function(){ $.blockUI()},\n    success: function(data){ }\n  });\n};\n</code></pre>\n\n<p>}</p>\n    ","a":"\n<p>Here is a way to call controller's function from outside of it:  </p>\n\n<pre><code>angular.element(document.getElementById('yourControllerElementID')).scope().get();\n</code></pre>\n\n<p>where <code>get()</code> is a function from your controller.</p>\n\n<p>You can switch </p>\n\n<pre><code>document.getElementById('yourControllerElementID')` \n</code></pre>\n\n<p>to </p>\n\n<pre><code>$('#yourControllerElementID')\n</code></pre>\n\n<p>If you are using jQuery.</p>\n\n<p>Also if your function means changing anything on your View, you should call </p>\n\n<pre><code>angular.element(document.getElementById('yourControllerElementID')).scope().$apply();\n</code></pre>\n\n<p>to apply the changes.</p>\n\n<p>One more thing, you should note is that scopes are initialized after the page is loaded, so calling methods from outside of scope should always be done after the page is loaded. Else you will not get to the scope at all.</p>\n    "},{"t":"AngularJS - Any way for $http.post to send request parameters instead of JSON?","l":"http://stackoverflow.com/questions/12190166/angularjs-any-way-for-http-post-to-send-request-parameters-instead-of-json","q":"\n\n<p>I have some old code that is making an AJAX POST request through <a href=\"http://api.jquery.com/jQuery.post/\">jQuery's post method</a> and looks something like this:</p>\n\n<pre><code>$.post(\"/foo/bar\", requestData,\n    function(responseData)\n    {\n        //do stuff with response\n    }\n</code></pre>\n\n<p><code>requestData</code> is just a javascript object with some basic string properties.</p>\n\n<p>I'm in the process of moving our stuff over to use Angular, and I want to replace this call with $http.post. I came up with the following:</p>\n\n<pre><code>$http.post(\"/foo/bar\", requestData).success(\n    function(responseData) {\n        //do stuff with response\n    }\n});\n</code></pre>\n\n<p>When I did this, I got a 500 error response from the server. Using Firebug, I found that this sent the request body like this:</p>\n\n<pre><code>{\"param1\":\"value1\",\"param2\":\"value2\",\"param3\":\"value3\"}\n</code></pre>\n\n<p>The successful jQuery <code>$.post</code> sends the body like this:</p>\n\n<pre><code>param1=value1&amp;param2=value2&amp;param3=value3\n</code></pre>\n\n<p>The endpoint I am hitting is expecting request parameters and not JSON. So, my question is is there anyway to tell <code>$http.post</code> to send up the javascript object as request parameters instead of JSON? Yes, I know I could construct the string myself from the object, but I want to know if Angular provides anything for this out of the box.</p>\n    ","a":"\n<p>I think the <code>params</code> config parameter won't work here since it adds the string to the url instead of the body but to add to what Infeligo suggested here is an example of the global override of a default transform (using jQuery <a href=\"http://api.jquery.com/jQuery.param/\">param</a> as an example to convert the data to param string).</p>\n\n<p><strong>Set up global transformRequest function:</strong></p>\n\n<pre><code>var app = angular.module('myApp');\n\napp.config(function ($httpProvider) {\n    $httpProvider.defaults.transformRequest = function(data){\n        if (data === undefined) {\n            return data;\n        }\n        return $.param(data);\n    }\n});\n</code></pre>\n\n<p>That way all calls to $http.post will automatically transform the body to the same param format used by the jQuery <code>$.post</code> call.</p>\n\n<p>Note you may also want to set the Content-Type header per call or globally like this:</p>\n\n<pre><code>$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n</code></pre>\n\n<p><strong>Sample non-global transformRequest per call:</strong></p>\n\n<pre><code>    var transform = function(data){\n        return $.param(data);\n    }\n\n    $http.post(\"/foo/bar\", requestData, {\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'},\n        transformRequest: transform\n    }).success(function(responseData) {\n        //do stuff with response\n    });\n</code></pre>\n    "},{"t":"How can I run a directive after the dom has finished rendering?","l":"http://stackoverflow.com/questions/12240639/how-can-i-run-a-directive-after-the-dom-has-finished-rendering","q":"\n\n<p>I've got a seemingly simple problem with no apparent <em>(by reading the Angular JS docs)</em> solution.</p>\n\n<p>I have got an Angular JS directive that does some calculations based on other DOM elements' height to define the height of a container in the DOM.</p>\n\n<p>Something similar to this is going on inside the directive:</p>\n\n<pre><code>return function(scope, element, attrs) {\n    $('.main').height( $('.site-header').height() -  $('.site-footer').height() );\n}\n</code></pre>\n\n<p>The issue is that when the directive runs, <code>$('site-header')</code> cannot be found, returning an empty array instead of the jQuery wrapped DOM element I need.</p>\n\n<p>Is there a callback that I can use within my directive that only runs after the DOM has been loaded and I can access other DOM elements via the normal jQuery selector style queries?</p>\n\n<p>Any help would be much appreciated.</p>\n    ","a":"\n<p>It depends on how your $('site-header') is constructed.</p>\n\n<p>You can try to use <a href=\"http://docs.angularjs.org/api/ng.$timeout\" rel=\"nofollow\">$timeout</a> with 0 delay. Something like:</p>\n\n<pre><code>return function(scope, element, attrs) {\n    $timeout(function(){\n        $('.main').height( $('.site-header').height() -  $('.site-footer').height() );\n    });        \n}\n</code></pre>\n\n<p>Explanations how it works: <a href=\"http://ejohn.org/blog/how-javascript-timers-work/\" rel=\"nofollow\">one</a>, <a href=\"http://stackoverflow.com/questions/779379/why-does-settimeoutfn-0-sometimes-help#comment14183689_779785\">two</a>.</p>\n\n<p>Don't forget to inject <code>$timeout</code> in your directive: </p>\n\n<pre><code>.directive('sticky', function($timeout)\n</code></pre>\n    "},{"t":"How to use ng-repeat without an html element","l":"http://stackoverflow.com/questions/11490968/how-to-use-ng-repeat-without-an-html-element","q":"\n\n<p>I need to use <code>ng-repeat</code> (in AngularJS)  to list all of the elements in an array.</p>\n\n<p>The complication is that each element of the array will transform to either one, two or three rows of a table.</p>\n\n<p>I cannot create valid html, if <code>ng-repeat</code> is used on an element, as no type of repeating element is allowed between <code>&lt;tbody&gt;</code> and <code>&lt;tr&gt;</code>.</p>\n\n<p>For example, if I used ng-repeat on <code>&lt;span&gt;</code>, I would get:</p>\n\n<pre><code>&lt;table&gt;\n  &lt;tbody&gt;\n    &lt;span&gt;\n      &lt;tr&gt;...&lt;/tr&gt;\n    &lt;/span&gt;\n    &lt;span&gt;\n      &lt;tr&gt;...&lt;/tr&gt;\n      &lt;tr&gt;...&lt;/tr&gt;\n      &lt;tr&gt;...&lt;/tr&gt;\n    &lt;/span&gt;\n    &lt;span&gt;\n      &lt;tr&gt;...&lt;/tr&gt;\n      &lt;tr&gt;...&lt;/tr&gt;\n    &lt;/span&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;          \n</code></pre>\n\n<p>Which is invalid html.</p>\n\n<p>But what I need to be generated is:</p>\n\n<pre><code>&lt;table&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;          \n</code></pre>\n\n<p>where the first row has been generated by the first array element, the next three by the second and the fifth and sixth by the last array element.</p>\n\n<p>How can I use ng-repeat in such a way that the html element to which it is bound 'disappears' during rendering?</p>\n\n<p>Or is there another solution to this?</p>\n\n<hr>\n\n<p>Clarification: The generated structure should look like below.  Each array element can generate between 1-3 rows of the table.  The answer should ideally support 0-n rows per array element.</p>\n\n<pre><code>&lt;table&gt;\n  &lt;tbody&gt;\n    &lt;!-- array element 0 --&gt;\n    &lt;tr&gt;\n      &lt;td&gt;One row item&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;!-- array element 1 --&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Three row item&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Some product details&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Customer ratings&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;!-- array element 2 --&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Two row item&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Full description&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;          \n</code></pre>\n    ","a":"\n<p><strong>Update:</strong> If you are using Angular 1.2+, use <a href=\"https://code.angularjs.org/1.2.0-rc.3/docs/api/ng.directive%3angRepeat\">ng-repeat-start</a>. See @jmagnusson's answer.</p>\n\n<p>Otherwise, how about putting the ng-repeat on tbody?  (AFAIK, it is okay to have multiple &lt;tbody&gt;s in a single table.)</p>\n\n<pre><code>&lt;tbody ng-repeat=\"row in array\"&gt;\n  &lt;tr ng-repeat=\"item in row\"&gt;\n     &lt;td&gt;{{item}}&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n</code></pre>\n    "},{"t":"Difference between service, directive and module","l":"http://stackoverflow.com/questions/11171778/difference-between-service-directive-and-module","q":"\n\n<p>I am a newbie, know the basics and trying my hand on this awesome framework.\nI have been reading a lot of docs and I'm getting more and more confused.\nI basically can't figure out the difference between a </p>\n\n<ul>\n<li>service</li>\n<li>directive </li>\n<li>module</li>\n</ul>\n\n<p>I see a lot of custom components. Sometimes they're using directives, somtimes services. It always starts with a module. Can someone explain with an example what the difference is between these three types?</p>\n    ","a":"\n<p>Think of a module as being a place to wire up a number of other things, such as directives, services, constants etc. Modules can be injected into other modules giving you a high level of reuse. </p>\n\n<p>When writing an angular app, you would have a top-level module which is your application code (sans templates)</p>\n\n<p>services are mainly a way to communicate between controllers, but you can inject one service into another. services are often used as a way to get to your data stores and people will wrap the angular api's such as ngResource. This technique is useful since it makes testing (particularly mocking) quite easy. You can have services for doing other things like authentication, logging etc. </p>\n\n<p>directives are used for creating widgets or wrapping existing things like jquery plugins. Wrapping existing plugins can be a challenge and the reason you would do this is to establish a two-way data binding between the plugins and angular. If you don't need two-way data binding then you don't need to wrap them.</p>\n\n<p>directives are also a place to do DOM manipulation, catching DOM-events etc. You should not be doing DOM-related stuff in controllers or services. creating directives can get pretty complex, IMHO, I recommend first looking to api for something that will do what you are looking to do OR ask angular googlegroup for advice.</p>\n\n<p>hope this helps!</p>\n\n<p>--dan</p>\n    "},{"t":"How to count total number of watches on a page?","l":"http://stackoverflow.com/questions/18499909/how-to-count-total-number-of-watches-on-a-page","q":"\n\n<p>Is there a way, in JavaScript, to count the number of angular watches on the entire page?</p>\n\n<p>We use <a href=\"https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en\">Batarang</a>, but it doesn't always suit our needs.  Our application is big and we're interested in using automated tests to check if the watch count goes up too much.</p>\n\n<p>It would also be useful to count watches on a per-controller basis.</p>\n\n<p><strong>Edit</strong>: here is my attempt.  It counts watches in everything with class ng-scope.</p>\n\n<pre><code>(function () {\n    var elts = document.getElementsByClassName('ng-scope');\n    var watches = [];\n    var visited_ids = {};\n    for (var i=0; i &lt; elts.length; i++) {\n       var scope = angular.element(elts[i]).scope();\n       if (scope.$id in visited_ids) \n         continue;\n       visited_ids[scope.$id] = true;\n       watches.push.apply(watches, scope.$$watchers);\n    }\n    return watches.length;\n})();\n</code></pre>\n    ","a":"\n<h3>(You may need to change <code>body</code> to <code>html</code> or wherever you put your <code>ng-app</code>)</h3>\n\n<pre><code>(function () { \n    var root = angular.element(document.getElementsByTagName('body'));\n\n    var watchers = [];\n\n    var f = function (element) {\n        angular.forEach(['$scope', '$isolateScope'], function (scopeProperty) { \n            if (element.data() &amp;&amp; element.data().hasOwnProperty(scopeProperty)) {\n                angular.forEach(element.data()[scopeProperty].$$watchers, function (watcher) {\n                    watchers.push(watcher);\n                });\n            }\n        });\n\n        angular.forEach(element.children(), function (childElement) {\n            f(angular.element(childElement));\n        });\n    };\n\n    f(root);\n\n    // Remove duplicate watchers\n    var watchersWithoutDuplicates = [];\n    angular.forEach(watchers, function(item) {\n        if(watchersWithoutDuplicates.indexOf(item) &lt; 0) {\n             watchersWithoutDuplicates.push(item);\n        }\n    });\n\n    console.log(watchersWithoutDuplicates.length);\n})();\n</code></pre>\n\n<ul>\n<li><p>Thanks to erilem for pointing out this answer was missing the <code>$isolateScope</code> searching and the watchers potentially being duplicated in his/her answer/comment. </p></li>\n<li><p>Thanks to Ben2307 for pointing out that the <code>'body'</code> may need to be changed.</p></li>\n</ul>\n\n<hr>\n\n<h3>Original</h3>\n\n<p>I did the same thing except I checked the data attribute of the HTML element rather than its class.  I ran yours here:</p>\n\n<p><a href=\"http://fluid.ie/\">http://fluid.ie/</a></p>\n\n<p>And got 83.  I ran mine and got 121.</p>\n\n<pre><code>(function () { \n    var root = $(document.getElementsByTagName('body'));\n    var watchers = [];\n\n    var f = function (element) {\n        if (element.data().hasOwnProperty('$scope')) {\n            angular.forEach(element.data().$scope.$$watchers, function (watcher) {\n                watchers.push(watcher);\n            });\n        }\n\n        angular.forEach(element.children(), function (childElement) {\n            f($(childElement));\n        });\n    };\n\n    f(root);\n\n    console.log(watchers.length);\n})();\n</code></pre>\n\n<p>I also put this in mine:</p>\n\n<pre><code>for (var i = 0; i &lt; watchers.length; i++) {\n    for (var j = 0; j &lt; watchers.length; j++) {\n        if (i !== j &amp;&amp; watchers[i] === watchers[j]) {\n            console.log('here');\n        }\n    }\n}\n</code></pre>\n\n<p>And nothing printed out, so I'm guessing that mine is better (in that it found more watches) - but I lack intimate angular knowledge to know for sure that mine isn't a proper subset of the solution set.</p>\n    "},{"t":"Angular.js: Is .value() the proper way to set app wide constant and how to retrieve it in a controller","l":"http://stackoverflow.com/questions/13015523/angular-js-is-value-the-proper-way-to-set-app-wide-constant-and-how-to-retri","q":"\n\n<p>Hi there I was watching a couple of the angular.js videos and saw that the value() method was used to set a kind of module-wide constant. for example, one can set the Angular-UI library's config like so: (coffeescript)</p>\n\n<pre><code>angular.module('app',[])\n.value \"ui.config\", \n  tinymce:\n    theme: 'simple'\n    width: '500'\n    height: '300'\n</code></pre>\n\n<p>And my app is currently looking like this:</p>\n\n<pre><code>window.app = angular.module(\"app\", [ 'ui'])\n\n.config([\"$routeProvider\", ($routeProvider) -&gt;\n  $routeProvider\n  .when \"/users\",\n    templateUrl: \"assets/templates/users/index.html\"\n    controller: IndexUsersCtrl\n\n  .otherwise redirectTo: \"/users\"\n\n])\n\n.value 'csrf', $('meta[name=\"csrf-token\"]').attr('content') #&lt;---- attention here\n\nIndexUsersCtrl = ($scope) -&gt;\n  $scope.users = gon.rabl\n  console.log \"I want to log the csrf value here\" #&lt;---- then attention\nIndexUsersCtrl.$inject = ['$scope']\n</code></pre>\n\n<p>But I can't seem to get that value by tapping into the 'app' variable which is corresponding to the app module. </p>\n\n<p>I read up here on ST and over on angularjs's google group that one way to share common code btwn controllers is through a service, will this concept apply here, too?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p><code>Module.value(key, value)</code> is used to inject an editable value,\n<code>Module.constant(key, value)</code> is used to inject a constant value</p>\n\n<p>The difference between the two isn't so much that you \"can't edit a constant\", it's more that you can't intercept a constant with $provide and inject something else.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// define a value\napp.value('myThing', 'weee');\n\n// define a constant\napp.constant('myConst', 'blah');\n\n// use it in a service\napp.factory('myService', ['myThing', 'myConst', function(myThing, myConst){\n   return {\n       whatsMyThing: function() { \n          return myThing; //weee\n       },\n       getMyConst: function () {\n          return myConst; //blah\n       }\n   };\n}]);\n\n// use it in a controller\napp.controller('someController', ['$scope', 'myThing', 'myConst', \n    function($scope, myThing, myConst) {\n        $scope.foo = myThing; //weee\n        $scope.bar = myConst; //blah\n    });\n</code></pre>\n    "},{"t":"OWIN: unauthorised webapi call returning login page rather than 401","l":"http://stackoverflow.com/questions/20149750/owin-unauthorised-webapi-call-returning-login-page-rather-than-401","q":"\n\n<p>How do I configure my mvc/webapi project so that a webapi method called from a razor view doesn't return the loginpage when its unauthorised?</p>\n\n<p>Its a MVC5 application which also has WebApi controllers for calls via javascript.</p>\n\n<p>The two methods below</p>\n\n<pre><code>[Route(\"api/home/LatestProblems\")]      \n[HttpGet()]\npublic List&lt;vmLatestProblems&gt; LatestProblems()\n{\n    // Something here\n}\n\n[Route(\"api/home/myLatestProblems\")]\n[HttpGet()]\n[Authorize(Roles = \"Member\")]\npublic List&lt;vmLatestProblems&gt; mylatestproblems()\n{\n   // Something there\n}\n</code></pre>\n\n<p>are called via the following angular code:</p>\n\n<pre><code>angular.module('appWorship').controller('latest', \n    ['$scope', '$http', function ($scope,$http) {         \n        var urlBase = baseurl + '/api/home/LatestProblems';\n        $http.get(urlBase).success(function (data) {\n            $scope.data = data;\n        }).error(function (data) {\n            console.log(data);\n        });\n        $http.get(baseurl + '/api/home/mylatestproblems')\n          .success(function (data) {\n            $scope.data2 = data;\n        }).error(function (data) {\n            console.log(data);\n        });  \n    }]\n);\n</code></pre>\n\n<p>So I'm not logged in and the first method successfully returns data. the second method returns (in the success function) data which contains the equivalent of a login page. i.e. what you would get in mvc if you requested a controller action which was stamped with [Authorize] and you weren't logged in.</p>\n\n<p>I want it to return a 401 unauthorized, so that i can display different data for users based on if they are logged in or not.  Ideally if the user is logged in i want to be able to access the Controller's User property so i can return data specific to that Member.</p>\n\n<p><strong>UPDATE: Since none of the suggestions below seem to work anymore (changes to Identity or WebAPI) ive created a raw example on <a href=\"https://github.com/tbertenshaw/MVCAPI\">github</a> which should illustrate the problem.</strong></p>\n    ","a":"\n<p>There are two AuthorizeAttribute implementations and you need to make sure you are referencing the correct one for Web API's.  There is <a href=\"http://msdn.microsoft.com/en-us/library/system.web.http.authorizeattribute%28v=vs.108%29.aspx\"><em>System.Web.Http.AuthorizeAttribute</em></a> which is used for Web API's, and <a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.authorizeattribute%28v=vs.108%29.aspx\"><em>System.Web.Mvc.AuthorizeAttribute</em></a> which is used for controllers with views.  <em>Http.AuthorizeAttribute</em> will return a 401 error if authorization fails and <em>Mvc.AuthorizeAttribute</em> will redirect to the login page.</p>\n\n<p><strong>Updated 11/26/2013</strong></p>\n\n<p>So it appears things have drastically changed with MVC 5 as Brock Allen pointed out <a href=\"http://brockallen.com/2013/10/27/using-cookie-authentication-middleware-with-web-api-and-401-response-codes/\">in his article</a>.  I guess the OWIN pipeline takes over and introduces some new behavior.   Now when the user is not authorized a status of 200 is returned with the following information in the HTTP header.</p>\n\n<pre><code>X-Responded-JSON: {\"status\":401,\"headers\":{\"location\":\"http:\\/\\/localhost:59540\\/Account\\/Login?ReturnUrl=%2Fapi%2FTestBasic\"}}\n</code></pre>\n\n<p>You could change your logic on the client side to check this information in the header to determine how to handle this, instead of looking for a 401 status on the error branch. </p>\n\n<p>I tried to override this behavior in a custom <em>AuthorizeAttribute</em> by setting the status in the response in the <em>OnAuthorization</em> and <em>HandleUnauthorizedRequest</em> methods.</p>\n\n<pre><code>actionContext.Response = new HttpResponseMessage(System.Net.HttpStatusCode.Unauthorized);\n</code></pre>\n\n<p>But this did not work. The new pipeline must grab this response later and modify it to the same response I was getting before.  Throwing an HttpException did not work either as it is just changed into a 500 error status.</p>\n\n<p>I tested Brock Allen's solution and it did work when I was using a jQuery ajax call. If it is not working for you my guess is that it is because you are using angular.  Run your test with Fiddler and see if the following is in your header.</p>\n\n<pre><code>X-Requested-With: XMLHttpRequest\n</code></pre>\n\n<p>If it is not then that is the problem. I am not familiar with angular but if it lets you insert your own header values then add this to your ajax requests and it will probably start working.</p>\n    "},{"t":"Angular.js: How does $eval work and why is it different from vanilla eval?","l":"http://stackoverflow.com/questions/15671471/angular-js-how-does-eval-work-and-why-is-it-different-from-vanilla-eval","q":"\n\n<p>I was curious about the <code>$scope.$eval</code> you so often see in directives, so I checked out the source and found the following in \"rootScope.js\":</p>\n\n<pre><code>  $eval: function(expr, locals) {\n    return $parse(expr)(this, locals);\n  },\n</code></pre>\n\n<p>\"$parse\" appears to be defined by \"ParseProvider\" in \"parse.js\", which appears to define some kind of mini-syntax of its own (the file is 900 lines long).</p>\n\n<p>My questions are:</p>\n\n<ol>\n<li><p>What exactly is $eval doing?  Why does it need its own mini parsing language?</p></li>\n<li><p>Why isn't plain old javascript \"eval\" being used?</p></li>\n</ol>\n    ","a":"\n<p><code>$eval</code> and <code>$parse</code> don't evaluate JavaScript; they evaluate AngularJS <a href=\"http://docs.angularjs.org/guide/expression\">expressions</a>. The linked documentation explains the differences between expressions and JavaScript.</p>\n\n<p><strong>Q: What exactly is $eval doing? Why does it need its own mini parsing language?</strong></p>\n\n<p>From the docs:</p>\n\n<blockquote>\n  <p>Expressions are JavaScript-like code snippets that are usually placed in bindings such as {{ expression }}. Expressions are processed by $parse service.</p>\n</blockquote>\n\n<p>It's a JavaScript-like mini-language that limits what you can run (e.g. no control flow statements, excepting the ternary operator) as well as adds some AngularJS goodness (e.g. filters).</p>\n\n<p><strong>Q: Why isn't plain old javascript \"eval\" being used?</strong></p>\n\n<p>Because it's not actually evaluating JavaScript. As the docs say:</p>\n\n<blockquote>\n  <p>If ... you do want to run arbitrary JavaScript code, you should make it a controller method and call the method. If you want to eval() an angular expression from JavaScript, use the $eval() method.</p>\n</blockquote>\n\n<p>The docs linked to above have a lot more information.</p>\n    "},{"t":"How do I ignore the initial load when watching model changes in AngularJS?","l":"http://stackoverflow.com/questions/16947771/how-do-i-ignore-the-initial-load-when-watching-model-changes-in-angularjs","q":"\n\n<p>I have a web page that serves as the editor for a single entity, which sits as a deep graph in the $scope.fieldcontainer property. After I get a response from my REST API (via $resource), I add a watch to 'fieldcontainer'. I am using this watch to detect if the page/entity is \"dirty\". Right now I'm making the save button bounce but really I want to make the save button invisible until the user dirties the model.</p>\n\n<p>What I am getting is a single trigger of the watch, which I think is happening because the .fieldcontainer = ... assignment takes place immediately after I create my watch. I was thinking of just using a \"dirtyCount\" property to absorb the initial false alarm but that feels very hacky ... and I figured there has to be an \"Angular idiomatic\" way to deal with this - I'm not the only one using a watch to detect a dirty model.</p>\n\n<p>Here's the code where I set my watch:</p>\n\n<pre><code> $scope.fieldcontainer = Message.get({id: $scope.entityId },\n            function(message,headers) {\n                $scope.$watch('fieldcontainer',\n                    function() {\n                        console.log(\"model is dirty.\");\n                        if ($scope.visibility.saveButton) {\n                            $('#saveMessageButtonRow').effect(\"bounce\", { times:5, direction: 'right' }, 300);\n                        }\n                    }, true);\n            });\n</code></pre>\n\n<p>I just keep thinking there's got to be a cleaner way to do this than guarding my \"UI dirtying\" code with an \"if (dirtyCount &gt;0)\"...</p>\n    ","a":"\n<p>set a flag just before the initial load, </p>\n\n<pre><code>var initializing = true\n</code></pre>\n\n<p>and then when the first $watch fires, do </p>\n\n<pre><code>$scope.$watch('fieldcontainer', function() {\n  if (initializing) {\n    $timeout(function() { initializing = false; });\n  } else {\n    // do whatever you were going to do\n  }\n});\n</code></pre>\n\n<p>The flag will be tear down just at the end of the current digest cycle, so next change won't be blocked.</p>\n    "},{"t":"Accessing attributes from an AngularJS directive","l":"http://stackoverflow.com/questions/11913841/accessing-attributes-from-an-angularjs-directive","q":"\n\n<p>My AngularJS template contains some custom HTML syntax like:</p>\n\n<pre><code>&lt;su-label tooltip=\"{{field.su_documentation}}\"&gt;{{field.su_name}}&lt;/su-label&gt;\n</code></pre>\n\n<p>I created a directive to process it:</p>\n\n<pre><code>.directive('suLabel', function() {\n  return {\n    restrict: 'E',\n    replace: true,\n    transclude: true,\n    scope: {\n      title: '@tooltip'\n    },\n    template: '&lt;label&gt;&lt;a href=\"#\" rel=\"tooltip\" title=\"{{title}}\" data-placement=\"right\" ng-transclude&gt;&lt;/a&gt;&lt;/label&gt;',\n    link: function(scope, element, attrs) {\n      if (attrs.tooltip) {\n        element.addClass('tooltip-title');\n      }\n    },\n  }\n})\n</code></pre>\n\n<p>Everything works fine, at the exception of the <code>attrs.tooltip</code> expression, which always returns <code>undefined</code>, even though the <code>tooltip</code> attribute is visible from Google Chrome's JavaScript console when doing a <code>console.log(attrs)</code>.</p>\n\n<p>Any suggestion?</p>\n\n<p>UPDATE: A solution was offered by Artem. It consisted in doing this:</p>\n\n<pre><code>link: function(scope, element, attrs) {\n  attrs.$observe('tooltip', function(value) {\n    if (value) {\n      element.addClass('tooltip-title');\n    }\n  });\n}\n</code></pre>\n\n<p>AngularJS + stackoverflow = bliss</p>\n    ","a":"\n<p>See section <a href=\"https://docs.angularjs.org/api/ng/service/$compile#attributes\">Attributes</a> from documentation on directives.</p>\n\n<blockquote>\n  <p><em>observing interpolated attributes</em>: Use $observe to observe the value changes of attributes that contain interpolation (e.g. src=\"{{bar}}\"). Not only is this very efficient but it's also the only way to easily get the actual value because during the linking phase the interpolation hasn't been evaluated yet and so the value is at this time set to undefined.</p>\n</blockquote>\n    "},{"t":"Use underscore inside Angular controllers","l":"http://stackoverflow.com/questions/14968297/use-underscore-inside-angular-controllers","q":"\n\n<p>How do I use underscore library inside angularjs controllers?</p>\n\n<p>On this post: <a href=\"http://stackoverflow.com/questions/11943130/angularjs-limitto-by-last-2-records\">AngularJS limitTo by last 2 records</a>\n somebody suggested to assign an _ variable to the rootScope so that the library will be available to all the scopes within the app. </p>\n\n<p>But I'm not clear where to do it. I mean should it go on the app module declaration? i.e: </p>\n\n<pre><code>var myapp = angular.module('offersApp', [])\n            .config(['$rootScope', function($rootScope) { }\n</code></pre>\n\n<p>But then where do I load underscore lib? I just have on my index page the ng-app directive and script reference to both the angular-js and underscore libs?</p>\n\n<p><code>index.html</code>:</p>\n\n<pre><code>&lt;head&gt;\n&lt;/head&gt;\n&lt;body ng-app=\"offersApp\"&gt;\n...\n&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendor/angular.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendor/underscore.js\"&gt;&lt;/script&gt;\n...  \n</code></pre>\n\n<p>How do I achieve this?</p>\n    ","a":"\n<p>When you include Underscore, it attaches itself to the <code>window</code> object, and so is available globally.</p>\n\n<p>So you can use it from Angular code as-is.</p>\n\n<p>You can also wrap it up in a service or a factory, if you'd like it to be injected:</p>\n\n<pre><code>var underscore = angular.module('underscore', []);\nunderscore.factory('_', ['$window', function() {\n  return $window._; // assumes underscore has already been loaded on the page\n}]);\n</code></pre>\n\n<p>And then you can ask for the <code>_</code> in your app's module:</p>\n\n<pre><code>// Declare it as a dependency of your module\nvar app = angular.module('app', ['underscore']);\n\n// And then inject it where you need it\napp.controller('Ctrl', function($scope, _) {\n  // do stuff\n});\n</code></pre>\n    "},{"t":"What is the difference between ng-app and data-ng-app?","l":"http://stackoverflow.com/questions/16184428/what-is-the-difference-between-ng-app-and-data-ng-app","q":"\n\n<p>I have begun to learn about Angular.JS and am confused about what the difference are between the ng-app and data-ng-app directives.</p>\n    ","a":"\n<p>To make the template valid HTML, we're using <code>data-*</code> attributes.</p>\n    "},{"t":"Difficulty with ng-model, ng-repeat, and inputs","l":"http://stackoverflow.com/questions/13714884/difficulty-with-ng-model-ng-repeat-and-inputs","q":"\n\n<p>I am trying to allow the user to edit a list of items by using <code>ngRepeat</code> and <code>ngModel</code>. (<a href=\"http://jsfiddle.net/_nth/rnw3u/2/\">See this fiddle</a>.) However, both approaches I've tried lead to bizarre behavior: one doesn't update the model, and the other blurs the form on each keydown.</p>\n\n<p>Am I doing something wrong here? Is this not a supported use case?</p>\n\n<p>Here is the code from the fiddle, copied for convenience: </p>\n\n<pre><code>&lt;html ng-app&gt;\n    &lt;head&gt;\n        &lt;link href=\"//netdna.bootstrapcdn.com/twitter-bootstrap/2.2.1/css/bootstrap-combined.min.css\" rel=\"stylesheet\"&gt;\n    &lt;/head&gt;\n    &lt;body ng-init=\"names = ['Sam', 'Harry', 'Sally']\"&gt;\n        &lt;h1&gt;Fun with Fields and ngModel&lt;/h1&gt;\n        &lt;p&gt;names: {{names}}&lt;/p&gt;\n        &lt;h3&gt;Binding to each element directly:&lt;/h3&gt;\n        &lt;div ng-repeat=\"name in names\"&gt;\n            Value: {{name}}\n            &lt;input ng-model=\"name\"&gt;                         \n        &lt;/div&gt;\n        &lt;p class=\"muted\"&gt;The binding does not appear to be working: the value in the model is not changed.&lt;/p&gt;\n        &lt;h3&gt;Indexing into the array:&lt;/h3&gt;\n        &lt;div ng-repeat=\"name in names\"&gt;\n            Value: {{names[$index]}}\n            &lt;input ng-model=\"names[$index]\"&gt;                         \n        &lt;/div&gt;\n        &lt;p class=\"muted\"&gt;Type one character, and the input field loses focus. However, the binding appears to be working correctly.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>​</p>\n    ","a":"\n<p>This seems to be a binding issue. </p>\n\n<p>The advice is <a href=\"https://github.com/angular/angular.js/issues/1267\">don't bind to primitives</a>.</p>\n\n<p>Your <code>ngRepeat</code> is iterating over strings inside a collection, when it should be iterating over objects. To fix your problem</p>\n\n<pre><code>&lt;body ng-init=\"models = [{name:'Sam'},{name:'Harry'},{name:'Sally'}]\"&gt;\n    &lt;h1&gt;Fun with Fields and ngModel&lt;/h1&gt;\n    &lt;p&gt;names: {{models}}&lt;/p&gt;\n    &lt;h3&gt;Binding to each element directly:&lt;/h3&gt;\n    &lt;div ng-repeat=\"model in models\"&gt;\n        Value: {{model.name}}\n        &lt;input ng-model=\"model.name\"&gt;                         \n    &lt;/div&gt;\n</code></pre>\n\n<p>jsfiddle: <a href=\"http://jsfiddle.net/jaimem/rnw3u/5/\">http://jsfiddle.net/jaimem/rnw3u/5/</a></p>\n    "},{"t":"AngularJS: how to implement a simple file upload with multipart form?","l":"http://stackoverflow.com/questions/13963022/angularjs-how-to-implement-a-simple-file-upload-with-multipart-form","q":"\n\n<p>I want to do a simple multipart form post from AngularJS to a node.js server,\nthe form should contain a JSON object in one part and an image in the other part,\n(I'm currently posting only the JSON object with $resource)</p>\n\n<p>I figured I should start with input type=\"file\", but then found out that AngularJS can't bind to that..</p>\n\n<p>all the examples I can find are for wraping jQuery plugins for drag &amp; drop.  I want a simple upload of one file.</p>\n\n<p>I'm new to AngularJS and don't feel comfortable at all with writing my own directives.</p>\n    ","a":"\n<p>A real working solution with no other dependencies than angularjs (tested with v.1.0.6)</p>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;input type=\"file\" name=\"file\" onchange=\"angular.element(this).scope().uploadFile(this.files)\"/&gt;\n</code></pre>\n\n<p>Angularjs (1.0.6) not support <em>ng-model</em> on \"input-file\" tags so you have to do it in a \"native-way\" that pass the all (eventually) selected files from the user.</p>\n\n<p><strong>controller</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.uploadFile = function(files) {\n    var fd = new FormData();\n    //Take the first selected file\n    fd.append(\"file\", files[0]);\n\n    $http.post(uploadUrl, fd, {\n        withCredentials: true,\n        headers: {'Content-Type': undefined },\n        transformRequest: angular.identity\n    }).success( ...all right!... ).error( ..damn!... );\n\n};\n</code></pre>\n\n<p>The cool part is the <em>undefined</em> content-type and the <em>transformRequest: angular.identity</em> that give at the $http the ability to choose the right \"content-type\" and  manage the boundary needed when handling multipart data.</p>\n    "},{"t":"parsing JSONP $http.jsonp() response in angular.js","l":"http://stackoverflow.com/questions/12066002/parsing-jsonp-http-jsonp-response-in-angular-js","q":"\n\n<p>I am using angular's <code>$http.jsonp()</code> request which is successfully returning json wrapped in a function:</p>\n\n<pre><code>var url = \"http://public-api.wordpress.com/rest/v1/sites/wtmpeachtest.wordpress.com/posts?callback=jsonp_callback\";\n\n$http.jsonp(url).\n    success(function(data, status, headers, config) {\n        //what do I do here?\n    }).\n    error(function(data, status, headers, config) {\n        $scope.error = true;\n    });\n</code></pre>\n\n<p>The problem is, I don't know how to access/parse the returned function-wrapped-JSON. Any guidance is much appreciated. Thanks!</p>\n    ","a":"\n<p>All you should have to do is change <code>callback=jsonp_callback</code> to <code>callback=JSON_CALLBACK</code> like so:</p>\n\n<pre><code>var url = \"http://public-api.wordpress.com/rest/v1/sites/wtmpeachtest.wordpress.com/posts?callback=JSON_CALLBACK\";\n</code></pre>\n\n<p>And then your <code>.success</code> function should fire like you have it if the return was successful.</p>\n\n<p>Doing it this way keeps you from having to dirty up the global space. This is documented in the AngularJS documentation <a href=\"https://docs.angularjs.org/api/ng/service/$http#jsonp\">here</a>.</p>\n\n<p>Updated Matt Ball's fiddle to use this method: <a href=\"http://jsfiddle.net/subhaze/a4Rc2/114/\">http://jsfiddle.net/subhaze/a4Rc2/114/</a></p>\n\n<p><strong>Full example:</strong></p>\n\n<pre><code>var url = \"http://public-api.wordpress.com/rest/v1/sites/wtmpeachtest.wordpress.com/posts?callback=JSON_CALLBACK\";\n\n$http.jsonp(url)\n    .success(function(data){\n        console.log(data.found);\n    });\n</code></pre>\n    "},{"t":"Render value without data-binding","l":"http://stackoverflow.com/questions/18790333/render-value-without-data-binding","q":"\n\n<p>In AngularJS, how can I render a value without 2-way data binding? One may want to do this for performance reasons, or even rendering a value at a given point in time.</p>\n\n<p><strong>The following examples both use data binding:</strong></p>\n\n<p><code>&lt;div&gt;{{value}}&lt;/div&gt;</code></p>\n\n<p><code>&lt;div data-ng-bind=\"value\"&gt;&lt;/div&gt;</code></p>\n\n<p>How do I render <code>value</code> <strong>without any</strong> data binding?</p>\n    ","a":"\n<p><strong>Angular 1.3+</strong></p>\n\n<p>In 1.3, Angular has supported this using the following syntax.</p>\n\n<pre><code>&lt;div&gt;{{::message}}&lt;/div&gt;\n</code></pre>\n\n<p>As mentioned in <a href=\"http://stackoverflow.com/a/24043072/1907358\">this answer</a>.</p>\n\n<hr>\n\n<p><strong>Angular 1.2 and below</strong></p>\n\n<p>This is really simple and doesn't need a plugin. Check this out.</p>\n\n<p>This tiny directive will accomplish what you are trying to achieve.</p>\n\n<pre><code>app.directive('bindOnce', function() {\n    return {\n        scope: true,\n        link: function( $scope ) {\n            setTimeout(function() {\n                $scope.$destroy();\n            }, 0);\n        }\n    }\n});\n</code></pre>\n\n<p>You can bind once like this </p>\n\n<pre><code>&lt;div bind-once&gt;I bind once - {{message}}&lt;/div&gt;\n</code></pre>\n\n<p>You can bind like normal </p>\n\n<pre><code>&lt;div ng-bind=\"message\" bind-once&gt;&lt;/div&gt;\n</code></pre>\n\n<p><strong>Demo: <a href=\"http://jsfiddle.net/fffnb/\">http://jsfiddle.net/fffnb/</a></strong></p>\n\n<p>Some of you may be using angular batarang, and as mentioned in the comments if you use this directive the element still shows as binding when it is not, I am pretty sure this has something to do with the classes that are attached to the element so try this, it should work <em>(not tested)</em>. Let me know in the comments if it worked for you.</p>\n\n<pre><code>app.directive('bindOnce', function() {\n    return {\n        scope: true,\n        link: function( $scope, $element ) {\n            setTimeout(function() {\n                $scope.$destroy();\n                $element.removeClass('ng-binding ng-scope');\n            }, 0);\n        }\n    }\n});\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/18790333/angular-js-render-value-without-data-binding/18791503?noredirect=1#comment35565641_18791503\">@x0b</a>: If you have OCD and you want to remove the empty <code>class</code> attribute do this </p>\n\n<pre><code>!$element.attr('class') &amp;&amp; $element.removeAttr('class')\n</code></pre>\n    "},{"t":"Unit Testing AngularJS directive with templateUrl","l":"http://stackoverflow.com/questions/15214760/unit-testing-angularjs-directive-with-templateurl","q":"\n\n<p>I have an AngularJS directive that has a <code>templateUrl</code> defined.  I am trying to unit test it with Jasmine.</p>\n\n<p>My Jasmine JavaScript looks like the following, per the recommendation of <a href=\"http://stackoverflow.com/questions/14761045/jasmine-tests-angularjs-directives-with-templateurl\">this</a>:</p>\n\n<pre><code>describe('module: my.module', function () {\n    beforeEach(module('my.module'));\n\n    describe('my-directive directive', function () {\n        var scope, $compile;\n        beforeEach(inject(function (_$rootScope_, _$compile_, $injector) {\n            scope = _$rootScope_;\n            $compile = _$compile_;\n            $httpBackend = $injector.get('$httpBackend');\n            $httpBackend.whenGET('path/to/template.html').passThrough();\n        }));\n\n        describe('test', function () {\n            var element;\n            beforeEach(function () {\n                element = $compile(\n                    '&lt;my-directive&gt;&lt;/my-directive&gt;')(scope);\n                angular.element(document.body).append(element);\n            });\n\n            afterEach(function () {\n                element.remove();\n            });\n\n            it('test', function () {\n                expect(element.html()).toBe('asdf');\n            });\n\n        });\n    });\n});\n</code></pre>\n\n<p>When I run this in my Jasmine spec error I get the following error:</p>\n\n<pre><code>TypeError: Object #&lt;Object&gt; has no method 'passThrough'\n</code></pre>\n\n<p>All I want is for the templateUrl to be loaded as is - I don't want to use <code>respond</code>.  I believe this may be related to it using <a href=\"http://docs.angularjs.org/api/ngMock.%24httpBackend\">ngMock</a> instead of <a href=\"http://docs.angularjs.org/api/ngMockE2E.%24httpBackend\">ngMockE2E</a>.  If this is the culprit, how do I use the latter instead of the former?</p>\n\n<p>Thanks in advance!</p>\n    ","a":"\n<p>What I ended up doing was getting the template cache and putting the view in there.  I don't have control over not using ngMock, it turns out:</p>\n\n<pre><code>beforeEach(inject(function (_$rootScope_, _$compile_, $templateCache) {\n    scope = _$rootScope_;\n    $compile = _$compile_;\n    $templateCache.put('path/to/template.html', '.&lt;template-goes-here /&gt;');\n}));\n</code></pre>\n    "},{"t":"Injecting a mock into an AngularJS service","l":"http://stackoverflow.com/questions/14773269/injecting-a-mock-into-an-angularjs-service","q":"\n\n<p>I have an service AngularJS service written and would like to unit test it.</p>\n\n<pre><code>angular.module('myServiceProvider', ['fooServiceProvider', 'barServiceProvider']).\n    factory('myService', function ($http, fooService, barService) {\n\n    this.somthing = function() {\n        // Do something with the injected services\n    };\n\n    return this;\n});\n</code></pre>\n\n<p>My app.js file has these registered:</p>\n\n<pre><code>angular\n.module('myApp', ['fooServiceProvider','barServiceProvider','myServiceProvider']\n)\n</code></pre>\n\n<p>I can test the DI is working as such:</p>\n\n<pre><code>describe(\"Using the DI framework\", function() {\n    beforeEach(module('fooServiceProvider'));\n    beforeEach(module('barServiceProvider'));\n    beforeEach(module('myServiceProvder'));\n\n    var service;\n\n    beforeEach(inject(function(fooService, barService, myService) {\n        service=myService;\n    }));\n\n    it(\"can be instantiated\", function() {\n        expect(service).not.toBeNull();\n    });\n});\n</code></pre>\n\n<p>This proved that the service can be created by the DI framework, however next I want to unit test the service, which means mocking out the injected objects.</p>\n\n<p>How do I go about doing this?</p>\n\n<p>I've tried putting my mock objects in the module, e.g.</p>\n\n<pre><code>beforeEach(module(mockNavigationService));\n</code></pre>\n\n<p>and rewriting the service definition as:</p>\n\n<pre><code>function MyService(http, fooService, barService) {\n    this.somthing = function() {\n        // Do something with the injected services\n    };\n});\n\nangular.module('myServiceProvider', ['fooServiceProvider', 'barServiceProvider']).\n    factory('myService', function ($http, fooService, barService) { return new MyService($http, fooService, barService); })\n</code></pre>\n\n<p>But the latter seems to stop the service being created by the DI as all.</p>\n\n<p>Does anybody know how I can mock the injected services for my unit tests?</p>\n\n<p>Thanks</p>\n\n<p>David</p>\n    ","a":"\n<p>You can inject mocks into your service by using <code>$provide</code>.</p>\n\n<p>If you have the following service with a dependency that has a method called getSomething:</p>\n\n<pre><code>angular.module('myModule', [])\n  .factory('myService', function (myDependency) {\n        return {\n            useDependency: function () {\n                return myDependency.getSomething();\n            }\n        };\n  });\n</code></pre>\n\n<p>You can inject a mock version of myDependency as follows:</p>\n\n<pre><code>describe('Service: myService', function () {\n\n  var mockDependency;\n\n  beforeEach(module('myModule'));\n\n  beforeEach(function () {\n\n      mockDependency = {\n          getSomething: function () {\n              return 'mockReturnValue';\n          }\n      };\n\n      module(function ($provide) {\n          $provide.value('myDependency', mockDependency);\n      });\n\n  });\n\n  it('should return value from mock dependency', inject(function (myService) {\n      expect(myService.useDependency()).toBe('mockReturnValue');\n  }));\n\n});\n</code></pre>\n\n<p>Note that because of the call to <code>$provide.value</code> you don't actually need to explicitly inject myDependency anywhere. It happens under the hood during the injection of myService. When setting up mockDependency here, it could just as easily be a spy.</p>\n\n<p>Thanks to <a href=\"http://stackoverflow.com/a/17350129/373981\">loyalBrown</a> for the link to <a href=\"http://www.youtube.com/watch?v=qK-Z0oEdE4Y\">that great video</a>.</p>\n    "},{"t":"Can Protractor and Karma be used together?","l":"http://stackoverflow.com/questions/17070522/can-protractor-and-karma-be-used-together","q":"\n\n<p>If <a href=\"https://github.com/juliemr/protractor\">Protractor</a> is replacing Angular Scenario Runner for E2E testing, does that mean I will still be able to use it with <a href=\"https://github.com/karma-runner/karma\">Karma</a> as my E2E testing framework ?</p>\n    ","a":"\n<p>Not recommended by the current maintainer of Protractor: </p>\n\n<blockquote>\n  <p><strong><a href=\"https://github.com/angular/protractor/issues/9#issuecomment-19927049\">https://github.com/angular/protractor/issues/9#issuecomment-19927049</a></strong></p>\n  \n  <p>Protractor and Karma should not be used together; instead they provide separate systems for running tests. Protractor and Karma cover different aspects of testing - Karma is intended mostly for unit tests, while Protractor should be used for end to end testing.</p>\n  \n  <p>Protractor is built on top of WebDriverJS, which uses a Selenium/WebDriver server to provision browsers and drive test execution. Examples of pure WebDriverJS can be found here: <a href=\"http://code.google.com/p/selenium/wiki/WebDriverJs\">http://code.google.com/p/selenium/wiki/WebDriverJs</a></p>\n</blockquote>\n\n<p>And</p>\n\n<blockquote>\n  <p><strong><a href=\"https://github.com/angular/protractor/issues/9#issuecomment-19931154\">https://github.com/angular/protractor/issues/9#issuecomment-19931154</a></strong></p>\n  \n  <p>Georgios - I think it makes sense to keep Protractor and Karma separate - for end to end tests, you want the native event driving and flexibility of webdriver, while for unit tests you want fast execution and autowatching of files.</p>\n</blockquote>\n    "},{"t":"AngularJS HTML5 mode reloading the page gives wrong GET request","l":"http://stackoverflow.com/questions/16569841/angularjs-html5-mode-reloading-the-page-gives-wrong-get-request","q":"\n\n<p>I want to enable HTML5 mode for my app. I have put the following code for the configuration, as shown <a href=\"http://docs.angularjs.org/guide/dev_guide.services.%24location\">here</a>:</p>\n\n<pre><code>return app.config(['$routeProvider','$locationProvider', function($routeProvider,$locationProvider) {\n\n    $locationProvider.html5Mode(true);\n    $locationProvider.hashPrefix = '!';\n\n    $routeProvider.when('/', {\n        templateUrl: '/views/index.html',\n        controller: 'indexCtrl'\n    });\n    $routeProvider.when('/about',{\n        templateUrl: '/views/about.html',\n        controller: 'AboutCtrl'\n    });\n</code></pre>\n\n<p>As you can see, I used the $locationProvider.html5mode and I changed all my links at the ng-ref to exclude the /#/.</p>\n\n<h2>The Problem</h2>\n\n<p>At the moment I can go to localhost:9000/ and see the index page and navigate to the other pages like localhost:9000/about. </p>\n\n<p>However the problem occurs when I refresh the localhost:9000/about page. I get the following output: <code>Cannot GET /about</code></p>\n\n<p>If I look at the network calls:</p>\n\n<pre><code>Request URL:localhost:9000/about\nRequest Method:GET\n</code></pre>\n\n<p>While if I first go to localhost:9000/ and then click on a button that navigates to /about I get:</p>\n\n<pre><code>Request URL:http://localhost:9000/views/about.html\n</code></pre>\n\n<p>Which renders the page perfectly. </p>\n\n<p><strong>How can I enable angular to get the correct page when I refresh?</strong></p>\n\n<p>Thank you in advance.</p>\n    ","a":"\n<p>From the <a href=\"https://docs.angularjs.org/guide/$location\">angular docs</a></p>\n\n<blockquote>\n  <p><strong>Server side</strong><br>\n  Using this mode requires URL rewriting on server side, basically you have to rewrite all your links to entry point of your application (e.g. index.html)</p>\n</blockquote>\n\n<p>The reason for this is that when you first visit the page (/about), e.g. after a refresh, the browser has no way of knowing that this isn't a real url, so it goes ahead and loads it. However if you have loaded up the root page first, and all the javascript code, then when you navigate to /about angular can get in there before the browser tries to hit the server and handle it accordingly</p>\n    "},{"t":"angularjs: ng-src equivalent for background-image:url(…)","l":"http://stackoverflow.com/questions/13781685/angularjs-ng-src-equivalent-for-background-imageurl","q":"\n\n<p>In angularjs you have the <a href=\"http://docs.angularjs.org/api/ng.directive%3angSrc\">tag ng-src</a> which has the purpose that you won't receive an error for an invalid url before angularjs gets to evaluate the variables placed in between <code>{{</code> and <code>}}</code>.</p>\n\n<p>The problem is that I use quite some DIV's with a <code>background-image</code> set to an url. I do this because of the excellent CSS3 property <code>background-size</code> which crops the image to the exact size of the DIV.</p>\n\n<p>The only problem is that I receive a lot of errors for the exact same reason they created a ng-src tag: I have some variables in the url and the browser thinks the image doesn't exist.</p>\n\n<p>I realize that there is a possibility of writing a crude <code>{{\"style='background-image:url(myVariableUrl)'\"}}</code>, but this seems 'dirty'.</p>\n\n<p>I've searched a lot and can't find the right way to do this. My app is becoming a mess because of all of these errors.</p>\n    ","a":"\n<p><code>ngSrc</code> is a native directive, so it seems you want a similar directive that modifies your div's  <code>background-image</code> style. </p>\n\n<p>You could write your own directive that does exactly what you want. For example</p>\n\n<pre><code>app.directive('backImg', function(){\n    return function(scope, element, attrs){\n        var url = attrs.backImg;\n        element.css({\n            'background-image': 'url(' + url +')',\n            'background-size' : 'cover'\n        });\n    };\n});​\n</code></pre>\n\n<p>Which you would invoke like this</p>\n\n<pre><code>&lt;div back-img=\"&lt;some-image-url&gt;\" &gt;&lt;/div&gt;\n</code></pre>\n\n<p>JSFiddle with cute cats as a bonus: <a href=\"http://jsfiddle.net/jaimem/aSjwk/1/\">http://jsfiddle.net/jaimem/aSjwk/1/</a></p>\n    "},{"t":"Reconcile Angular.js and Bootstrap form validation styling","l":"http://stackoverflow.com/questions/14348384/reconcile-angular-js-and-bootstrap-form-validation-styling","q":"\n\n<p>I am using Angular with Bootstrap. Here is the code for reference:</p>\n\n<pre><code>&lt;form name=\"newUserForm\" ng-submit=\"add()\" class=\"\" novalidate&gt;\n    &lt;input type=\"text\" class=\"input\" ng-model=\"newUser.uname\" placeholder=\"Twitter\" ng-pattern=\"/^@[A-Za-z0-9_]{1,15}$/\" required&gt;&lt;/td&gt;\n    &lt;button type=\"submit\" ng-disabled=\"newUserForm.$invalid\" class=\"btn btn-add btn-primary\"&gt;Add&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Bootstrap has styles for invalid fields in the form of <code>input:invalid {.... }</code>; these kick in when the field is empty. Now I also have some pattern matching via Angular. This creates odd cases when \":invalid\" is off, but \".ng-invalid\" is on, which would require me to re-implement bootstrap CSS classes for the \".ng-invalid\" class.</p>\n\n<p>I see two options, but having trouble with both</p>\n\n<ul>\n<li>Make Angular use some custom classname instead of \"ng-valid\" (I don't know how to do this).</li>\n<li>Disable html5 validation (I thought that that's what \"novalidate\" attribute in the form tag should do, but couldn't get it work for some reason).</li>\n</ul>\n\n<p>The Angular-Bootstrap directives out there don't cover styling.</p>\n    ","a":"\n<p>Use Bootstrap's \"error\" class for styling. You can write less code.</p>\n\n<pre><code>&lt;form name=\"myForm\"&gt;\n  &lt;div class=\"control-group\" ng-class=\"{error: myForm.name.$invalid}\"&gt;\n    &lt;label&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\" ng-model=\"project.name\" required&gt;\n    &lt;span ng-show=\"myForm.name.$error.required\" class=\"help-inline\"&gt;\n        Required&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>EDIT:</strong>\nAs other answers and comments point out - in Bootstrap 3 the class is now  \"has-error\", not \"error\".</p>\n    "},{"t":"Redirect using AngularJS","l":"http://stackoverflow.com/questions/11907961/redirect-using-angularjs","q":"\n\n<p>I'm trying to redirect to another route using:</p>\n\n<pre><code>$location.path(\"/route\");\n</code></pre>\n\n<p>But for some reason it is not working. I did an auto-complete widget using jQuery-UI and I'm calling a function from the scope once the user selects an option. I debugged it and it enters the function but it is never redirected to the other route. It only changes the route when I press a key.</p>\n\n<p>I think it is kind of strange but I haven't figured out how to solve this. I used</p>\n\n<pre><code>window.location = \"#/route\";\n</code></pre>\n\n<p>and it works but I want to use the <code>path()</code> function.</p>\n\n<p>Does anybody have any idea why this is happening?</p>\n    ","a":"\n<p>With an example of the not working code will be easy to answer this question, but with this information the best that I can think is that you are calling the $location.path outside of the angularjs digest.</p>\n\n<p>Try doing this on the directive <code>scope.$apply(function() { $location.path(\"/route\"); });</code></p>\n    "},{"t":"Global Ajax error handler with AngularJS","l":"http://stackoverflow.com/questions/11971213/global-ajax-error-handler-with-angularjs","q":"\n\n<p>When my website was 100% jQuery, I used to do this:</p>\n\n<pre><code>$.ajaxSetup({\n    global: true,\n    error: function(xhr, status, err) {\n        if (xhr.status == 401) {\n           window.location = \"./index.html\";\n        }\n    }\n});\n</code></pre>\n\n<p>to set a global handler for 401 errors. Now, I use angularjs with <code>$resource</code> and <code>$http</code> to do my (REST) requests to the server. Is there any way to similarly set a global error handler with angular?</p>\n    ","a":"\n<p>I'm also building a website with angular and I came across this same obstacle for global 401 handling. I ended up using http interceptor when I came across this blog post. Maybe you'll find it as helpful as I did.</p>\n\n<p><a href=\"http://www.espeo.pl/1-authentication-in-angularjs-application/\" rel=\"nofollow\">\"Authentication in AngularJS (or similar) based application.\"</a>, <em>espeo software</em></p>\n\n<p><strong>EDIT: final solution</strong></p>\n\n<pre><code>angular.module('myApp', ['myApp.filters', 'myApp.services', 'myApp.directives'], function ($routeProvider, $locationProvider, $httpProvider) {\n\n    var interceptor = ['$rootScope', '$q', function (scope, $q) {\n\n        function success(response) {\n            return response;\n        }\n\n        function error(response) {\n            var status = response.status;\n\n            if (status == 401) {\n                window.location = \"./index.html\";\n                return;\n            }\n            // otherwise\n            return $q.reject(response);\n\n        }\n\n        return function (promise) {\n            return promise.then(success, error);\n        }\n\n    }];\n    $httpProvider.responseInterceptors.push(interceptor);\n</code></pre>\n    "},{"t":"AngularJS - Compiling dynamic HTML strings from database","l":"http://stackoverflow.com/questions/18157305/angularjs-compiling-dynamic-html-strings-from-database","q":"\n\n<h2>The Situation</h2>\n\n<p>Nested within our Angular app is a directive called Page, backed by a controller, which contains a div with an ng-bind-html-unsafe attribute. This is assigned to a $scope var called 'pageContent'. This var gets assigned dynamically generated HTML from a database. When the user flips to the next page, a called to the DB is made, and the pageContent var is set to this new HTML, which gets rendered onscreen through ng-bind-html-unsafe. Here's the code:</p>\n\n<p><strong>Page directive</strong></p>\n\n<pre><code>angular.module('myApp.directives')\n    .directive('myPage', function ($compile) {\n\n        return {\n            templateUrl: 'page.html',\n            restrict: 'E',\n            compile: function compile(element, attrs, transclude) {\n                // does nothing currently\n                return {\n                    pre: function preLink(scope, element, attrs, controller) {\n                        // does nothing currently\n                    },\n                    post: function postLink(scope, element, attrs, controller) {\n                        // does nothing currently\n                    }\n                }\n            }\n        };\n    });\n</code></pre>\n\n<p><strong>Page directive's template</strong> (\"page.html\" from the templateUrl property above)</p>\n\n<pre><code>&lt;div ng-controller=\"PageCtrl\" &gt;\n   ...\n   &lt;!-- dynamic page content written into the div below --&gt;\n   &lt;div ng-bind-html-unsafe=\"pageContent\" &gt;\n   ...\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>Page controller</strong></p>\n\n<pre><code>angular.module('myApp')\n  .controller('PageCtrl', function ($scope) {\n\n        $scope.pageContent = '';\n\n        $scope.$on( \"receivedPageContent\", function(event, args) {\n            console.log( 'new page content received after DB call' );\n            $scope.pageContent = args.htmlStrFromDB;\n        });\n\n});\n</code></pre>\n\n<p>That works. We see the page's HTML from the DB rendered nicely in the browser. When the user flips to the next page, we see the next page's content, and so on. So far so good.</p>\n\n<h2>The Problem</h2>\n\n<p>The problem here is that we want to have interactive content inside of a page's content. For instance, the HTML may contain a thumbnail image where, when the user clicks on it, Angular should do something awesome, such as displaying a pop-up modal window. I've placed Angular method calls (ng-click) in the HTML strings in our database, but of course Angular isn't going to recognize either method calls or directives unless it somehow parses the HTML string, recognizes them and compiles them.</p>\n\n<p><strong>In our DB</strong></p>\n\n<p>Content for Page 1:</p>\n\n<pre><code>&lt;p&gt;Here's a cool pic of a lion. &lt;img src=\"lion.png\" ng-click=\"doSomethingAwesone('lion', 'showImage')\" &gt; Click on him to see a large image.&lt;/p&gt;\n</code></pre>\n\n<p>Content for Page 2:</p>\n\n<pre><code>&lt;p&gt;Here's a snake. &lt;img src=\"snake.png\" ng-click=\"doSomethingAwesone('snake', 'playSound')\" &gt;Click to make him hiss.&lt;/p&gt;\n</code></pre>\n\n<p>Back in the Page controller, we then add the corresponding $scope function:</p>\n\n<p><strong>Page controller</strong></p>\n\n<pre><code>$scope.doSomethingAwesome = function( id, action ) {\n    console.log( \"Going to do \" + action + \" with \"+ id );\n}\n</code></pre>\n\n<p>I can't figure out how to call that 'doSomethingAwesome' method from within the HTML string from the DB. I realize Angular has to parse the HTML string somehow, but how? I've read vague mumblings about the $compile service, and copied and pasted some examples, but nothing works. Also, most examples show dynamic content only getting set during the linking phase of the directive. We would want Page to stay alive throughout the life of the app. It constantly receives, compiles and displays new content as the user flips through pages. </p>\n\n<p>In an abstract sense, I guess you could say we are trying to dynamically nest chunks of Angular within an Angular app, and need to be able to swap them in and out.</p>\n\n<p>I've read various bits of Angular documentation multiple times, as well as all sorts of blog posts, and JS Fiddled with people's code. I don't know whether I'm completely misunderstanding Angular, or just missing something simple, or maybe I'm slow. In any case, I could use some advice.</p>\n    ","a":"\n<p><code>ng-bind-html-unsafe</code> only renders the content as HTML. It doesn't bind Angular scope to the resulted DOM. You have to use <code>$compile</code> service for that purpose. I created <a href=\"http://plnkr.co/edit/F91xvGHBASvqCGBJcEYY?p=preview\">this plunker</a> to demonstrate how to use <code>$compile</code> to create a directive rendering dynamic HTML entered by users and binding to the controller's scope. The source is posted below.</p>\n\n<p><strong>demo.html</strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"app\"&gt;\n\n  &lt;head&gt;\n    &lt;script data-require=\"angular.js@1.0.7\" data-semver=\"1.0.7\" src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Compile dynamic HTML&lt;/h1&gt;\n    &lt;div ng-controller=\"MyController\"&gt;\n      &lt;textarea ng-model=\"html\"&gt;&lt;/textarea&gt;\n      &lt;div dynamic=\"html\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>script.js</strong></p>\n\n<pre><code>var app = angular.module('app', []);\n\napp.directive('dynamic', function ($compile) {\n  return {\n    restrict: 'A',\n    replace: true,\n    link: function (scope, ele, attrs) {\n      scope.$watch(attrs.dynamic, function(html) {\n        ele.html(html);\n        $compile(ele.contents())(scope);\n      });\n    }\n  };\n});\n\nfunction MyController($scope) {\n  $scope.click = function(arg) {\n    alert('Clicked ' + arg);\n  }\n  $scope.html = '&lt;a ng-click=\"click(1)\" href=\"#\"&gt;Click me&lt;/a&gt;';\n}\n</code></pre>\n    "},{"t":"Angular.js ng-repeat across multiple trs","l":"http://stackoverflow.com/questions/12979205/angular-js-ng-repeat-across-multiple-trs","q":"\n\n<p>I am using Angular.js for an application that uses hidden trs to simulate a sliding out effect by showing the tr and sliding down the div in the td below. This process worked fantastically using knockout.js when iterating over an array of these rows, because I could use <code>&lt;!-- ko:foreach --&gt;</code> around both tr elements.</p>\n\n<p>With angular, <code>ng-repeat</code> must be applied to an html element, meaning I cannot seem to repeat these double rows using standard methods. My first response to this was to create a directive to represent these double trs, but that fell short because directive templates must have a single root element, but I have two (<code>&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;</code>).</p>\n\n<p>If anyone with experience with ng-repeat and angular who has cracked this can explain how to solve this problem, I would be greatly appreciative.</p>\n\n<p>(I should also note that attaching ng-repeat to the tbody is an option, but this produces multiple tbodys, and I am assuming that is bad form for standard HTML, although correct me if I'm wrong)</p>\n    ","a":"\n<p>Using <code>ng-repeat</code> on <code>tbody</code> appears to be valid see <a href=\"http://stackoverflow.com/questions/3076708/can-we-have-multiple-tbody-in-same-table\">this post</a>.</p>\n\n<p>Also a quick test through an <a href=\"http://validator.w3.org/\">html validator</a> allowed multiple <code>tbody</code> elements in the same table.</p>\n\n<p><strong>Update:</strong> As of at least Angular 1.2 there is an <code>ng-repeat-start</code> and <code>ng-repeat-end</code> to allow repeating a series of elements. See <a href=\"http://docs.angularjs.org/api/ng.directive%3angRepeat\">the documentation</a> for more information and thanks to @Onite for the comment!</p>\n    "},{"t":"Is angular-seed the de-facto empty project to start with?","l":"http://stackoverflow.com/questions/16611799/is-angular-seed-the-de-facto-empty-project-to-start-with","q":"\n\n<p>After having been convinced to learn and use Angular.js, I was going to start a concrete web UI application so as to launch the learning wheel of experience. ( The app is going to be some kind of personal planning, to do list, reminder, pomodoro technique oriented, and so on...)</p>\n\n<p><a href=\"http://www.youtube.com/watch?v=ZhfUv0spHCY\">One of the tutorial videos I have seen, by the author of Angular, is about best practices.</a> And one of the best practices is to start with the <code>angular-seed</code> project.</p>\n\n<p>That is what I was going to do, but after googling a little, there are already at least two other projects that claim to be the good starting point:</p>\n\n<ul>\n<li><code>angular-enterprise-seed</code> </li>\n<li><code>angular-sprout</code></li>\n</ul>\n\n<p>I'm beginner, but I like to invest in the long term. Should I worry about using something else than <code>angular-seed</code> ? I feel like it's too early to ask myself this question, but if there are already <strong>two</strong> other projects, maybe there are some good reasons.</p>\n    ","a":"\n<p>I've found that though many people use various seed projects, the easiest &amp; most consistent starting point for an angular app (or any javascript web app) is <a href=\"http://yeoman.io/\">Yeoman</a>.</p>\n\n<p>This app is a scaffolding tool that allows you to specify generators which will build the up the kernel of your application, complete with whatever libraries you desire (via <a href=\"https://github.com/bower/bower\">bower</a>) and a working <a href=\"http://gruntjs.com/\">grunt</a> build file (most generators come stock with a build task, server task for live editing, and testing task)</p>\n\n<p>Though an app like this is necessarily opinionated, the scaffolding it produces is still very generic.</p>\n\n<p>example:</p>\n\n<pre><code>mkdir my-app\ncd my-app\nnpm install generator-angular\nnpm install generator-karma\nyo angular\n</code></pre>\n    "},{"t":"Are complex expressions possible in ng-hide / ng-show?","l":"http://stackoverflow.com/questions/15166184/are-complex-expressions-possible-in-ng-hide-ng-show","q":"\n\n<p>I want to do so:</p>\n\n<pre><code>ng-hide=\"!globals.isAdmin &amp;&amp; mapping.is_default\"\n</code></pre>\n\n<p>but the expression evaluates always to <code>false</code>.</p>\n\n<p>I do not want to define special function on <code>$scope</code>.</p>\n    ","a":"\n<p>Use a controller method if you need to run arbitrary JavaScript code, or you could define a filter that returned true or false.</p>\n\n<p>I just tested (should have done that first), and something like <code>ng-show=\"!a &amp;&amp; b\"</code> worked as expected.</p>\n    "},{"t":"Mixing Angular and ASP.NET MVC/Web api?","l":"http://stackoverflow.com/questions/21097592/mixing-angular-and-asp-net-mvc-web-api","q":"\n\n<p>I come from using ASP.NET MVC/Web API and now I am starting to use Angular but I am not clear on the proper way to mix them.</p>\n\n<p>Once I am using Angular does the MVC sever side concepts still provide any value ? Or should I strictly be using Web API purely to get data for the angular HTTP calls ?</p>\n\n<p>Any tips you have for a ASP.NET MVC guy transitioning to Angular would be helpful</p>\n    ","a":"\n<p><strong>Pure Web API</strong></p>\n\n<p>I used to be pretty hardcore with ASP.NET MVC but since I've met Angular I do not see one reason why I would use <em>any</em> server side content generation framework. Pure Angular/REST(WebApi) gives a richer and smoother result. It's much faster and allows you to build websites that come quite close to desktop applications, without any funky hacks. </p>\n\n<p>Angular does have a little learning curve, but once your team has mastered it, you'll build much better websites in less time. Mainly this has to do with the fact that you don't have all these state(less) issues anymore. </p>\n\n<p>For example imagine a <em>wizard form</em> with any traditional server side framework. Each page needs to be validated and submitted separately. Maybe the content of the page is dependent on values from a previous page. Maybe the user pressed the back button and is re-submitting an previous form. Where do we store the state of the client? All these complications do not exist when using Angular and REST.</p>\n\n<p>So ... come over to the dark side ... we've got cookies.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/20989024/actual-use-of-jade-template-and-angularjs/20990498#20990498\">Similar question</a></p>\n    "},{"t":"Error: Argument is not a function, got undefined","l":"http://stackoverflow.com/questions/17289236/error-argument-is-not-a-function-got-undefined","q":"\n\n<p>Using AngularJS with Scala Play, I'm getting this error.</p>\n\n<blockquote>\n  <p>Error: Argument 'MainCtrl' is not a function, got undefined</p>\n</blockquote>\n\n<p>I'm trying to create a table consisting of the days of the week.</p>\n\n<p>Please take a look at my code. I had checked the name of the Controller, but that seems correct. Note: Code used from this SO <a href=\"http://stackoverflow.com/questions/11367769/creating-tables-with-angular-js\">answer</a></p>\n\n<p><strong>index.scala.html</strong></p>\n\n<pre><code>@(message: String)\n\n@main(\"inTime\") {\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\" ng-app&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" media=\"screen\" href=\"@routes.Assets.at(\"stylesheets/main.css\")\"&gt;\n    &lt;/head&gt;\n&lt;div ng-controller=\"MainCtrl\"&gt;\n    &lt;table border=\"1\"&gt;\n    &lt;tbody ng-repeat='(what,items) in data'&gt;\n      &lt;tr ng-repeat='item in items'&gt;\n        &lt;td ngm-if=\"$first\" rowspan=\"{{items.length}}\"&gt;{{what}}&lt;/td&gt;\n        &lt;td&gt;{{item}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;/html&gt; \n}\n</code></pre>\n\n<p><strong>MainCtrl.js</strong> </p>\n\n<pre><code>(function() {\n    angular.module('[myApp]', []).controller('MainCtrl', function($scope) {\n        $scope.data = {\n            Colors: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n        }\n    });\n}());\n</code></pre>\n    ","a":"\n<p>Remove the <code>[]</code> from the name ([myApp]) of module</p>\n\n<pre><code>angular.module('myApp', [])\n</code></pre>\n\n<p>And add <code>ng-app=\"myApp\"</code> to the html and it should work.</p>\n    "},{"t":"What's the use of Jade or Handlebars when writing AngularJs apps","l":"http://stackoverflow.com/questions/18174856/whats-the-use-of-jade-or-handlebars-when-writing-angularjs-apps","q":"\n\n<p>I am new(ish) to the whole javascript full stack applications, and completely new to Angular, so I was hoping somebody can put the record straight for me here.</p>\n\n<p>Why would I need to use a templating framework like Jade or Handlebars when writing client side apps using AngularJS.</p>\n\n<p>I should say that I have never used any of these templating frameworks either. So I am not familiar with the advantages completely. But when I look at Handlebars for example, it does many of the same things as I would do in Angular, such as looping etc.</p>\n\n<p>As far as I can tell, it would make most sense to create the templates in Angular using proper HTML and then do all templating client side, and combine this with an API first approach using node and mongo for example.</p>\n\n<p>The reason for this confusion is that a lot of the examples I find on GitHub make use of Jade, and it seems counter intuitive for me.</p>\n\n<p>Please enlighten me, and set me straight. I would love to learn some best practices from people who know much more than I do.</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>Jay, those who <em>unquestioningly</em> favour Jade in an Angular environment are those who fail to understand that view logic belongs on the client, and business logic on the server, just as you commented.</p>\n\n<p>Recently I reviewed some code where straight Angular templating would have done a far better job than mixing in Jade, just through maintaining simplicity.</p>\n\n<p>Aside from template extension, Jade brings nothing worthwhile to the table that Angular doesn't already supply. And, let's be honest: Using the sound principle of \"favour composition over inheritance\" (i.e. partials), you shouldn't ever <em>need</em> template extensibility. I do not consider finding Jade \"easier to parse\" than HTML to be a valid concern... in fact, it's laughable for any professional to claim this.</p>\n\n<p>There is one valid, specialised case for server-side templating: Optimisation, remembering that premature optimisation is generally a Bad Thing. Where performance is truly at issue, <em>and</em> you have the server capacity to spare to handle this, server side templating can assist. This applies to products like Twitter and Basecamp, where the cost of doing a lot of server side work is offset by the gains of reduced requests to the server.</p>\n\n<p>As for Handlebars, there is no need to replace AngularJS's (amazing) client-side templating.</p>\n    "},{"t":"Can Angular.js auto-update a view if a persistent model (server database) is changed by an external app?","l":"http://stackoverflow.com/questions/11276520/can-angular-js-auto-update-a-view-if-a-persistent-model-server-database-is-cha","q":"\n\n<p>I'm just starting to familiarize with Angular.js, but I would like to build a web app that has a view that gets auto-upated in real-time (no refresh) for the user when something changes in the server-side database.</p>\n\n<p>Can Angular handle this (mostly) automatically for me?  And if so, what is the basic mechanism at work?</p>\n\n<p>For example, do you somehow setup Angular to poll the DB regularly for \"model\" changes?  Or use some sort of Comet-like mechanism to notify Angular client-side code that the model has changed?</p>\n\n<p>In my application, the challenge is that other (non-web) server-side software will be updating the database at times.  But this question applies equally to pure web-apps where you might have multiple clients changing the database through Angular web clients, and they each need to be updated when one of them makes a change to the DB (model).</p>\n    ","a":"\n<p>You have a few choices...</p>\n\n<ol>\n<li><p>You could do polling every X milliseconds using <code>$timeout</code> and <code>$http</code>, or if the data you're using is hooked up to a REST service, you could use <code>$resource</code> instead of <code>$http</code>.</p></li>\n<li><p>You could create a service that uses some Websocket implementation and uses <code>scope.$apply</code> to handle changes that are pushed by the socket. \nHere's an example using socket.io, a node.js websocket library:</p>\n\n<pre><code>myApp.factory('Socket', function($rootScope) {\n    var socket = io.connect('http://localhost:3000');\n\n    //Override socket.on to $apply the changes to angular\n    return {\n        on: function(eventName, fn) {\n            socket.on(eventName, function(data) {\n                $rootScope.$apply(function() {\n                    fn(data);\n                });\n            });\n        },\n        emit: socket.emit\n    };\n})\n\nfunction MyCtrl($scope, Socket) {\n    Socket.on('content:changed', function(data) {\n        $scope.data = data;\n    });\n    $scope.submitContent = function() {\n        socket.emit('content:changed', $scope.data);\n    };\n}\n</code></pre></li>\n<li><p>You could get really high tech and create a websocket implementation which syncs an Angular model with the server.  When the client changes something, that change gets automatically sent to the server. Or if the server changes, it gets sent to the client.<br>\nHere's an example of that in an old version of Angular, again using socket.io: <a href=\"https://github.com/mhevery/angular-node-socketio\">https://github.com/mhevery/angular-node-socketio</a></p></li>\n</ol>\n\n<p><strong>EDIT</strong>: For #3, I've been using <a href=\"http://firebase.com\">Firebase</a> to do this.</p>\n    "},{"t":"Angularjs: input[text] ngChange fires while the value is changing","l":"http://stackoverflow.com/questions/11868393/angularjs-inputtext-ngchange-fires-while-the-value-is-changing","q":"\n\n<p>ngChange is firing while the value is changing (ngChange are not similiar to the classic onChange event). How can i bind the classic onChange event with angularjs, that will only fire when the contents are commited?</p>\n\n<p>Current binding:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"name\" ng-change=\"update()\" /&gt;\n</code></pre>\n    ","a":"\n<p><a href=\"https://groups.google.com/d/msg/angular/LH0Q1A-qTVo/eyVIjJsFZGcJ\">This post</a> shows an example of a directive that delays the model changes to an input until the <a href=\"http://www.w3schools.com/jsref/event_onblur.asp\">blur</a> event fires.</p>\n\n<p><a href=\"http://jsfiddle.net/cn8VF/308/\">Here</a> is a fiddle that shows the ng-change working with the new ng-model-on-blur directive. Note this is a slight tweak to the <a href=\"http://jsfiddle.net/carpasse/JYTUB/3/\">original fiddle</a>.</p>\n\n<p>If you add the directive to your code you would change your binding to this:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"name\" ng-model-onblur ng-change=\"update()\" /&gt;\n</code></pre>\n\n<p>Here is the directive:</p>\n\n<pre><code>// override the default input to update on blur\nangular.module('app', []).directive('ngModelOnblur', function() {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        priority: 1, // needed for angular 1.2.x\n        link: function(scope, elm, attr, ngModelCtrl) {\n            if (attr.type === 'radio' || attr.type === 'checkbox') return;\n\n            elm.unbind('input').unbind('keydown').unbind('change');\n            elm.bind('blur', function() {\n                scope.$apply(function() {\n                    ngModelCtrl.$setViewValue(elm.val());\n                });         \n            });\n        }\n    };\n});\n</code></pre>\n\n<hr>\n\n<p><strong>Note: as @wjin mentions in the comments below this feature is supported directly in Angular 1.3 (currently in beta) via <code>ngModelOptions</code>. See <a href=\"https://docs.angularjs.org/api/ng/directive/ngModelOptions\">the docs</a> for more info.</strong></p>\n    "},{"t":"How to $http Synchronous call with AngularJS","l":"http://stackoverflow.com/questions/13088153/how-to-http-synchronous-call-with-angularjs","q":"\n\n<p>sorry for my newbie question, but angularjs documentation is not very explicit or extensive as  for someone figure basic stuff.</p>\n\n<p>Is there some way to make a synchromous call with angularjs?</p>\n\n<p>ON A SERVICE:</p>\n\n<pre><code>myService.getByID = function (id) {\n    var retval = null;\n\n    $http({\n        url: \"/CO/api/products/\" + id,\n        method: \"GET\"\n    }).success(function (data, status, headers, config) {\n\n        retval = data.Data;\n\n    });\n\n    return retval;\n}\n</code></pre>\n    ","a":"\n<p>Not currently. If you <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/httpBackend.js\">look at the source code</a> (line 56 atm), you'll see that the call to XHR open is actually hard-coded to be asynchronous (the third parameter is true):</p>\n\n<pre><code> xhr.open(method, url, true);\n</code></pre>\n\n<p>You'd need to write your own service that did synchronous calls. Generally that's not something you'll usually want to do because of the nature of JavaScript execution you'll end up blocking everything else.</p>\n\n<p>... but.. if blocking everything else is actually desired, maybe you should look into promises and the <a href=\"http://docs.angularjs.org/api/ng.%24q\">$q service</a>. It allows you to wait until a set of asynchronous actions are done, and then execute something once they're all complete. I don't know what your use case is, but that might be worth a look.</p>\n\n<p>Outside of that, if you're going to roll your own, more information about how to make synchronous and asynchronous ajax calls <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Synchronous_and_Asynchronous_Requests\">can be found here</a>.</p>\n\n<p>I hope that is helpful.</p>\n    "},{"t":"How to get the url parameters using angular js","l":"http://stackoverflow.com/questions/11758079/how-to-get-the-url-parameters-using-angular-js","q":"\n\n<p>HTML source code </p>\n\n<pre><code>&lt;div ng-app=\"\"&gt;\n    &lt;div ng-controller=\"test\"&gt;\n      &lt;div ng-address-bar browser=\"html5\"&gt;&lt;/div&gt;\n      &lt;br&gt;&lt;br&gt;\n      $location.url() = {{$location.url()}}&lt;br&gt;\n      $location.search() = {{$location.search('keyword')}}&lt;br&gt;\n      $location.hash() = {{$location.hash()}}&lt;br&gt;     \n      keyword valus is={{loc}} and ={{loc1}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Angular.js source code</p>\n\n<pre><code>&lt;script&gt;\nfunction test($scope, $location) {\n  $scope.$location = $location;\n  $scope.ur = $scope.$location.url('www.html.com/x.html?keyword=test#/x/u');\n  $scope.loc1 = $scope.$location.search().keyword ;    \n    if($location.url().indexOf('keyword') &gt; -1){    \n        $scope.loc= $location.url().split('=')[1];\n        $scope.loc = $scope.loc.split(\"#\")[0]        \n    }\n  }\n &lt;/script&gt;\n</code></pre>\n\n<p>Here the variables <code>loc</code> and <code>loc1</code> both return <em>test</em> as the result for the above URL. Is this the correct way?</p>\n    ","a":"\n<p>I know this is an old question, but it took me some time to sort this out given the sparse Angular documentation.  The <strong>RouteProvider</strong> and <strong>routeParams</strong> is the way to go.  The route wires up the URL to your Controller/View and the routeParams can be passed into the controller. </p>\n\n<p>Check out the <a href=\"https://github.com/angular/angular-seed\">Angular seed</a> project.  Within the app.js you'll find an example for the route provider.  To use params simply append them like this:</p>\n\n<pre><code>$routeProvider.when('/view1/:param1/:param2', {\n    templateUrl: 'partials/partial1.html',    \n    controller: 'MyCtrl1'\n});\n</code></pre>\n\n<p>Then in your controller inject $routeParams:</p>\n\n<pre><code>.controller('MyCtrl1', ['$scope','$routeParams', function($scope, $routeParams) {\n  var param1 = $routeParams.param1;\n  var param1 = $routeParams.param2;\n  ...\n}]);\n</code></pre>\n    "},{"t":"Dynamic validation and name in a form with AngularJS","l":"http://stackoverflow.com/questions/14378401/dynamic-validation-and-name-in-a-form-with-angularjs","q":"\n\n<p>I have this form : <a href=\"http://jsfiddle.net/dfJeN/\">http://jsfiddle.net/dfJeN/</a></p>\n\n<p>As you can see the name value for the input is statically set : </p>\n\n<pre><code>name=\"username\"\n</code></pre>\n\n<p>, the form validation works fine (add something and remove all text from the input, a text must appears). </p>\n\n<p>Then I try to dynamically set the name value : <a href=\"http://jsfiddle.net/jNWB8/\">http://jsfiddle.net/jNWB8/</a></p>\n\n<pre><code>name=\"{input.name}\"\n</code></pre>\n\n<p>Then I apply this to my validation </p>\n\n<pre><code>login.{{input.name}}.$error.required\n</code></pre>\n\n<p>(this pattern will be used in an ng-repeat) but my form validation is broken. It is correctly interpreted in my browser (if I inspect the element I saw login.username.$error.required).</p>\n\n<p>Any Idea ?</p>\n\n<p>EDIT: After logging the scope in the console it appears that the</p>\n\n<pre><code>{{input.name}}\n</code></pre>\n\n<p>expression is not interpolate. My form as an {{input.name}} attribute but no username.</p>\n\n<p><strong>UPDATE: Since 1.3.0-rc.3 name=\"{{input.name}}\" works as expected.</strong> Please see <a href=\"https://github.com/angular/angular.js/issues/1404\">#1404</a></p>\n    ","a":"\n<p>You can't do what you're trying to do that way.</p>\n\n<p>Assuming what you're trying to do is you need to dynamically add elements to a form, with something like an ng-repeat, you need to use nested <a href=\"http://docs.angularjs.org/api/ng.directive%3aform\">ng-form</a> to allow validation of those individual items:</p>\n\n<pre><code>&lt;form name=\"outerForm\"&gt;\n&lt;div ng-repeat=\"item in items\"&gt;\n   &lt;ng-form name=\"innerForm\"&gt;\n      &lt;input type=\"text\" name=\"foo\" ng-model=\"item.foo\" /&gt;\n      &lt;span ng-show=\"innerForm.foo.$error.required\"&gt;required&lt;/span&gt;\n   &lt;/ng-form&gt;\n&lt;/div&gt;\n&lt;input type=\"submit\" ng-disabled=\"outerForm.$invalid\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Sadly, it's just not a well-documented feature of Angular.</p>\n    "},{"t":"Select text on input focus","l":"http://stackoverflow.com/questions/14995884/select-text-on-input-focus","q":"\n\n<p>I have a text input. When the input receives focus I want to select the text inside of the input.</p>\n\n<p>With jQuery I'd do it this way:</p>\n\n<pre><code>&lt;input type=\"text\" value=\"test\" /&gt;\n</code></pre>\n\n\n\n<pre><code>$(\"input[type=text]\").click(function() {\n    $(this).select();\n    // would select \"test\" in this example\n});\n</code></pre>\n\n<p>I've searched around to try and find the Angular way but most examples I'm finding are dealing with a directive that is watching a modal property for a change. I'm assuming I need a directive that is watching for an input that receives focus. How would I do that? </p>\n    ","a":"\n<p>The way to do this in Angular is to create a custom directive which does the autoselect for you.</p>\n\n<pre><code>module.directive('selectOnClick', ['$window', function ($window) {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n            element.on('click', function () {\n                if (!$window.getSelection().toString()) {\n                    // Required for mobile Safari\n                    this.setSelectionRange(0, this.value.length)\n                }\n            });\n        }\n    };\n}]);\n</code></pre>\n\n<p>Apply the directive like this:</p>\n\n<pre><code>&lt;input type=\"text\" value=\"test\" select-on-click /&gt;\n</code></pre>\n\n<p><kbd><a href=\"http://plnkr.co/edit/bgUG0vbQ3nwuZXfiS71W?p=preview\" rel=\"nofollow\">View demo</a></kbd></p>\n\n<p><strong>Update1</strong>: Removed jQuery dependency.</p>\n\n<p><strong>Update2</strong>: Restrict as attribute.</p>\n\n<p><strong>Update3</strong>: Works in mobile Safari. Allows selecting part of the text (requires IE&gt;8).</p>\n    "},{"t":"AngularJS - how to get an ngRepeat filtered result reference","l":"http://stackoverflow.com/questions/11721863/angularjs-how-to-get-an-ngrepeat-filtered-result-reference","q":"\n\n<p>I am using an ng-repeat directive with filter like so:</p>\n\n<pre><code>ng-repeat=\"item in items | orderBy:'order_prop' | filter:query | limitTo:4\"\n</code></pre>\n\n<p>and I can see the rendered results fine; now I want to run some logic on that result in my controller. The question is how can I grab the result items reference?</p>\n\n<p><strong>Update:</strong></p>\n\n<hr>\n\n<p>Just to clarify: I'm trying to create an auto complete, I have this input:</p>\n\n<pre><code>&lt;input id=\"queryInput\" ng-model=\"query\" type=\"text\" size=\"30\" placeholder=\"Enter query\"&gt;\n</code></pre>\n\n<p>and then the filtered results:</p>\n\n<pre><code>&lt;ul&gt;\n   &lt;li  ng-repeat=\"item in items | orderBy:'order_prop' | filter:query | limitTo:4\"&gt;{{item.name}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>now I want to navigate the result and select one of the items.</p>\n    ","a":"\n<p><strong>UPDATE</strong>: Here's an easier way than what was there before.</p>\n\n<pre><code> &lt;input ng-model=\"query\"&gt;\n &lt;div ng-repeat=\"item in (filteredItems = (items | orderBy:'order_prop' | filter:query | limitTo:4))\"&gt;\n   {{item}}\n &lt;/div&gt;\n</code></pre>\n\n<p>Then <code>$scope.filteredItems</code> is accessible.</p>\n    "},{"t":"How to set the id attribute of a HTML element dynamically with angular js?","l":"http://stackoverflow.com/questions/23655009/how-to-set-the-id-attribute-of-a-html-element-dynamically-with-angular-js","q":"\n\n<p>Provided an HTML element of type <code>div</code>, how to set the value of its <code>id</code> attribute, which is the concatenation of a scope variable and a string ? </p>\n    ","a":"\n<p><code>ngAttr</code> directive can totally be of help here, as introduced in the official documentation </p>\n\n<p><a href=\"https://docs.angularjs.org/guide/directive#-ngattr-attribute-bindings\">https://docs.angularjs.org/guide/directive#-ngattr-attribute-bindings</a></p>\n\n<p>For instance, to set the <code>id</code> attribute value of a <code>div</code> element, so that it contains an index, a view fragment might contain</p>\n\n<pre><code>&lt;div ng-attr-id=\"{{ 'object-' + myScopeObject.index }}\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>which would get interpolated to</p>\n\n<pre><code>&lt;div id=\"object-1\"&gt;&lt;/div&gt;\n</code></pre>\n    "},{"t":"How to include view/partial specific styling in AngularJS","l":"http://stackoverflow.com/questions/15193492/how-to-include-view-partial-specific-styling-in-angularjs","q":"\n\n<p>So, I used Yeoman to scaffold my new project and I LOVE using bower, grunt, and AutoReload, I never even realized how efficient I could be with this kind of dev environment. I always turned it down due to its complexity.</p>\n\n<p>Anyway, that is beside the point. The one thing I'm having a small problem with is Angular. </p>\n\n<p><strong>What is the proper/accepted way to use separate stylesheets for the various views my application uses?</strong></p>\n\n<p>Currently I'm placing a link element in the view/partial's html at the top but I've been told this is bad practice even though all modern browsers support it but I can see why it's frowned upon.</p>\n\n<p>The other possibility is placing the separate stylesheets in my index.html's <code>head</code> but I would like it to only load the stylesheet if its view is being loaded in the name of performance.</p>\n\n<p>Is this bad practice since styling won't take effect until after the css is loaded form the server, leading to a quick flash of unformatted content in a slow browser? I have yet to witness this although I'm testing it locally.</p>\n\n<p>Is there a way to load the CSS through the object passed to Angular's <code>$routeProvider.when</code>?</p>\n\n<p>Thanks in advance!</p>\n    ","a":"\n<p>I know this question is old now, but after doing a ton of research on various solutions to this problem, I think I may have come up with a better solution.  </p>\n\n<blockquote>\n  <p><strong>UPDATE:</strong> Since posting this answer, I have added all of this code to a simple service that I have posted to GitHub.  The repo is located <a href=\"https://github.com/tennisgent/angular-route-styles\">here</a>.  Feel free to check it out for more info.</p>\n</blockquote>\n\n<p>In case anyone in the future is interested, here's what I came up with:</p>\n\n<p><strong>1.  Create a custom directive for the <code>&lt;head&gt;</code> element:</strong></p>\n\n<pre><code>app.directive('head', ['$rootScope','$compile',\n    function($rootScope, $compile){\n        return {\n            restrict: 'E',\n            link: function(scope, elem){\n                var html = '&lt;link rel=\"stylesheet\" ng-repeat=\"(routeCtrl, cssUrl) in routeStyles\" ng-href=\"{{cssUrl}}\" /&gt;';\n                elem.append($compile(html)(scope));\n                scope.routeStyles = {};\n                $rootScope.$on('$routeChangeStart', function (e, next, current) {\n                    if(current &amp;&amp; current.$$route &amp;&amp; current.$$route.css){\n                        if(!angular.isArray(current.$$route.css)){\n                            current.$$route.css = [current.$$route.css];\n                        }\n                        angular.forEach(current.$$route.css, function(sheet){\n                            delete scope.routeStyles[sheet];\n                        });\n                    }\n                    if(next &amp;&amp; next.$$route &amp;&amp; next.$$route.css){\n                        if(!angular.isArray(next.$$route.css)){\n                            next.$$route.css = [next.$$route.css];\n                        }\n                        angular.forEach(next.$$route.css, function(sheet){\n                            scope.routeStyles[sheet] = sheet;\n                        });\n                    }\n                });\n            }\n        };\n    }\n]);\n</code></pre>\n\n<p>This directive does the following things:</p>\n\n<ol>\n<li>It compiles (using <a href=\"http://docs.angularjs.org/api/ng.$compile\"><code>$compile</code></a>) an html string that creates a set of <code>&lt;link /&gt;</code> tags for every item in the <code>scope.routeStyles</code> object using <code>ng-repeat</code> and <code>ng-href</code>.</li>\n<li>It appends that compiled set of <code>&lt;link /&gt;</code> elements to the <code>&lt;head&gt;</code> tag.</li>\n<li>It then uses the <code>$rootScope</code> to listen for <code>'$routeChangeStart'</code> events.  For every <code>'$routeChangeStart'</code> event, it grabs the \"current\" <code>$$route</code> object (the route that the user is about to leave) and removes its partial-specific css file(s) from the <code>&lt;head&gt;</code> tag.  It also grabs the \"next\" <code>$$route</code> object (the route that the user is about to go to) and adds any of its partial-specific css file(s) to the <code>&lt;head&gt;</code> tag.</li>\n<li>And the <code>ng-repeat</code> part of the compiled <code>&lt;link /&gt;</code> tag handles all of the adding and removing of the page-specific stylesheets based on what gets added to or removed from the <code>scope.routeStyles</code> object.</li>\n</ol>\n\n<p><strong>2. Specify which stylesheets belong to which routes using the <code>$routeProvider</code>:</strong></p>\n\n<pre><code>app.config(['$routeProvider', function($routeProvider){\n    $routeProvider\n        .when('/some/route/1', {\n            templateUrl: 'partials/partial1.html', \n            controller: 'Partial1Ctrl',\n            css: 'css/partial1.css'\n        })\n        .when('/some/route/2', {\n            templateUrl: 'partials/partial2.html',\n            controller: 'Partial2Ctrl'\n        })\n        .when('/some/route/3', {\n            templateUrl: 'partials/partial3.html',\n            controller: 'Partial3Ctrl',\n            css: ['css/partial3_1.css','css/partial3_2.css']\n        })\n}]);\n</code></pre>\n\n<p>This config adds a custom <code>css</code> property to the object that is used to setup each page's route.  That object gets passed to each <code>'$routeChangeStart'</code> event as <code>.$$route</code>.  So when listening to the <code>'$routeChangeStart'</code> event, we can grab the <code>css</code> property that we specified and append/remove those <code>&lt;link /&gt;</code> tags as needed.  Note that specifying a <code>css</code> property on the route is completely optional, as it was omitted from the <code>'/some/route/2'</code> example. If the route doesn't have a <code>css</code> property, the <code>&lt;head&gt;</code> directive will simply do nothing for that route.  Note also that you can even have multiple page-specific stylesheets per route, as in the <code>'/some/route/3'</code> example above, where the <code>css</code> property is an array of relative paths to the stylesheets needed for that route.</p>\n\n<p><strong>3. You're done</strong>\nThose two things setup everything that was needed and it does it, in my opinion, with the cleanest code possible.</p>\n\n<p>Hope that helps someone else who might be struggling with this issue as much as I was.</p>\n    "},{"t":"How can I tell AngularJS to “refresh”","l":"http://stackoverflow.com/questions/12304728/how-can-i-tell-angularjs-to-refresh","q":"\n\n<p>I have a click event that happens outside the scope of my custom directive, so instead of using the \"ng-click\" attribute, I am using a jQuery.click() listener and calling a function inside my scope like so:</p>\n\n<pre><code>$('html').click(function(e) {\n  scope.close();\n);\n</code></pre>\n\n<p>close() is a simple function that looks like this:</p>\n\n<pre><code>scope.close = function() {\n  scope.isOpen = false;\n}\n</code></pre>\n\n<p>In my view, I have an element with \"ng-show\" bound to isOpen like this:</p>\n\n<pre><code>&lt;div ng-show=\"isOpen\"&gt;My Div&lt;/div&gt;\n</code></pre>\n\n<p>When debugging, I am finding that close() is being called, isOpen is being updated to false, but the AngularJS view is not updating. Is there a way I can manually tell Angular to update the view? Or is there a more \"Angular\" approach to solving this problem that I am not seeing?</p>\n    ","a":"\n<p>The solution was to call...</p>\n\n<pre><code>$scope.$apply();\n</code></pre>\n\n<p>...in my jQuery event callback.</p>\n    "},{"t":"Scope issues with Angular UI modal","l":"http://stackoverflow.com/questions/18924577/scope-issues-with-angular-ui-modal","q":"\n\n<p>I'm having trouble understanding/using the scopes for an angular UI modal. I've searched high and low, and read the docs over and over. Now, I'm turning to the community.</p>\n\n<p>I'm hoping that I'm just overlooking something simple. I'm fairly new to Angular but am very familiar with Javascript.</p>\n\n<p>While not immediately apparent here, I have the modules and everything set up correctly (as far as I can tell), but these code samples in particular are where I'm finding the bug.</p>\n\n<p>index.html (the important part of it)</p>\n\n<pre><code>&lt;div class=\"btn-group\"&gt;\n    &lt;button class=\"btn dropdown-toggle btn-mini\" data-toggle=\"dropdown\"&gt;\n        Actions\n        &lt;span class=\"caret\"&gt;&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;ul class=\"dropdown-menu pull-right text-left\"&gt;\n        &lt;li&gt;&lt;a ng-click=\"addSimpleGroup()\"&gt;Add Simple&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a ng-click=\"open()\"&gt;Add Custom&lt;/a&gt;&lt;/li&gt;\n        &lt;li class=\"divider\"&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a ng-click=\"doBulkDelete()\"&gt;Remove Selected&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Controller.js (again, the important part)</p>\n\n<pre><code>MyApp.controller('AppListCtrl', function($scope, $modal){\n    $scope.name = 'New Name';\n    $scope.groupType = 'New Type';\n\n    $scope.open = function(){\n        var modalInstance = $modal.open({\n            templateUrl: 'partials/create.html',\n            controller: 'AppCreateCtrl'\n        });\n        modalInstance.result.then(function(response){\n\n            // outputs an object {name: 'Custom Name', groupType: 'Custom Type'}\n            // despite the user entering customized values\n            console.log('response', response);\n\n            // outputs \"New Name\", which is fine, makes sense to me.                \n            console.log('name', $scope.name);\n\n        });\n    };\n});\n\nMyApp.controller('AppCreateCtrl', function($scope, $modalInstance){\n    $scope.name = 'Custom Name';\n    $scope.groupType = 'Custom Type';\n\n    $scope.ok = function(){\n\n        // outputs 'Custom Name' despite user entering \"TEST 1\"\n        console.log('create name', $scope.name);\n\n        // outputs 'Custom Type' despite user entering \"TEST 2\"\n        console.log('create type', $scope.groupType);\n\n        // outputs the $scope for AppCreateCtrl but name and groupType\n        // still show as \"Custom Name\" and \"Custom Type\"\n        // $scope.$id is \"007\"\n        console.log('scope', $scope);\n\n        // outputs what looks like the scope, but in this object the\n        // values for name and groupType are \"TEST 1\" and \"TEST 2\" as expected.\n        // this.$id is set to \"009\" so this != $scope\n        console.log('this', this);\n\n        // based on what modalInstance.result.then() is saying,\n        // the values that are in this object are the original $scope ones\n        // not the ones the user has just entered in the UI. no data binding?\n        $modalInstance.close({\n            name: $scope.name,\n            groupType: $scope.groupType\n        });\n    };\n});\n</code></pre>\n\n<p>create.html (in its entirety)</p>\n\n<pre><code>&lt;div class=\"modal-header\"&gt;\n    &lt;button type=\"button\" class=\"close\" ng-click=\"cancel()\"&gt;x&lt;/button&gt;\n    &lt;h3 id=\"myModalLabel\"&gt;Add Template Group&lt;/h3&gt;\n&lt;/div&gt;\n&lt;div class=\"modal-body\"&gt;\n    &lt;form&gt;\n        &lt;fieldset&gt;\n            &lt;label for=\"name\"&gt;Group Name:&lt;/label&gt;\n            &lt;input type=\"text\" name=\"name\" ng-model=\"name\" /&gt;           \n            &lt;label for=\"groupType\"&gt;Group Type:&lt;/label&gt;\n            &lt;input type=\"text\" name=\"groupType\" ng-model=\"groupType\" /&gt;\n        &lt;/fieldset&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n&lt;div class=\"modal-footer\"&gt;\n    &lt;button class=\"btn\" ng-click=\"cancel()\"&gt;Cancel&lt;/button&gt;\n    &lt;button class=\"btn btn-primary\" ng-click=\"ok()\"&gt;Add&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>So, my question stands: why is the scope not being double-bound to the UI? and why does 'this' have the customized values, but $scope does not?</p>\n\n<p>I have tried to add ng-controller=\"AppCreateCtrl\" to the body div in create.html, but that threw an error: \"Unknown provider: $modalInstanceProvider &lt;- $modalInstance\" so no luck there.</p>\n\n<p>At this point, my only option is to pass back an object with this.name and this.groupType instead of using $scope; but that feels wrong.</p>\n\n<p>Thanks in advance! :)</p>\n\n<p>UPDATE:\nIn addition to the reading suggested by Nikos, there is also <a href=\"http://thenittygritty.co/angularjs-pitfalls-using-scopes\">this list</a> of pitfalls that can help. This problem is an example of pitfall #5.</p>\n    ","a":"\n<p>I got mine to work like this:</p>\n\n<pre><code>var modalInstance = $modal.open({\n  templateUrl: 'partials/create.html',\n  controller: 'AppCreateCtrl',\n  scope: $scope // &lt;-- I added this\n});\n</code></pre>\n\n<p>No form name, no <code>$parent</code>. I'm using AngularUI Bootstrap version 0.12.1.</p>\n\n<p>I was tipped off to this solution by <a href=\"https://github.com/angular-ui/bootstrap/issues/2110#issuecomment-54551321\">this</a>.</p>\n    "},{"t":"Angular.js directive dynamic templateURL","l":"http://stackoverflow.com/questions/21835471/angular-js-directive-dynamic-templateurl","q":"\n\n<p>I have a custom tag in a <code>routeProvider</code> template that that calls for a <code>directive</code> template. The <code>version</code> attribute will be populated by the scope which then calls for the right template.</p>\n\n<pre><code>&lt;hymn ver=\"before-{{ week }}-{{ day }}\"&gt;&lt;/hymn&gt;\n</code></pre>\n\n<p>There are multiple versions of the hymn based on what week and day it is. I was anticipating to use the directive to populate the correct <code>.html</code> portion. The variable is not being read by the <code>templateUrl</code>.</p>\n\n<pre><code>emanuel.directive('hymn', function() {\n    var contentUrl;\n    return {\n        restrict: 'E',\n        link: function(scope, element, attrs) {\n            // concatenating the directory to the ver attr to select the correct excerpt for the day\n            contentUrl = 'content/excerpts/hymn-' + attrs.ver + '.html';\n        },\n        // passing in contentUrl variable\n        templateUrl: contentUrl\n    }\n});\n</code></pre>\n\n<p>There are multiple files in excerpts directory that are labeled <code>before-1-monday.html</code>, <code>before-2-tuesday.html</code>, …</p>\n    ","a":"\n<p>You can use <code>ng-include</code> directive.</p>\n\n<p>Try something like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>emanuel.directive('hymn', function() {\n   return {\n       restrict: 'E',\n       link: function(scope, element, attrs) {\n           scope.getContentUrl = function() {\n                return 'content/excerpts/hymn-' + attrs.ver + '.html';\n           }\n       },\n       template: '&lt;div ng-include=\"getContentUrl()\"&gt;&lt;/div&gt;'\n   }\n});\n</code></pre>\n\n<p><strong>UPD. for watching <code>ver</code> attribute</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>emanuel.directive('hymn', function() {\n   return {\n       restrict: 'E',\n       link: function(scope, element, attrs) {\n           scope.contentUrl = 'content/excerpts/hymn-' + attrs.ver + '.html';\n           attrs.$observe(\"ver\",function(v){\n               scope.contentUrl = 'content/excerpts/hymn-' + v + '.html';\n           });\n       },\n       template: '&lt;div ng-include=\"contentUrl\"&gt;&lt;/div&gt;'\n   }\n});\n</code></pre>\n    "},{"t":"Update Angular model after setting input value with jQuery","l":"http://stackoverflow.com/questions/17109850/update-angular-model-after-setting-input-value-with-jquery","q":"\n\n<p>I have this simple scenario:<br>\n- input element which value is changed by jQuery's val() method</p>\n\n<p>I am trying to update the angular model with the value that jQuery set. I tried to write a simple directive, but it's not doing what I want. </p>\n\n<p>Here's the directive:</p>\n\n<pre><code>var myApp = angular.module('myApp', []);\nmyApp.directive('testChange', function() {\n    return function(scope, element, attrs) {        \n        element.bind('change', function() {\n            console.log('value changed');\n        })\n    }\n})\n</code></pre>\n\n<p>this is the jQuery part:  </p>\n\n<pre><code>$(function(){\n    $('button').click(function(){\n        $('input').val('xxx');\n    })\n})\n</code></pre>\n\n<p>and html:</p>\n\n<pre><code>&lt;div ng-app=\"myApp\"&gt;\n    &lt;div ng-controller=\"MyCtrl\"&gt;\n        &lt;input test-change ng-model=\"foo\" /&gt;\n        &lt;span&gt;{{foo}}&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>clickme</p>\n\n<p>Here is the fiddle with my try:<br>\n<a href=\"http://jsfiddle.net/U3pVM/743/\">http://jsfiddle.net/U3pVM/743/</a></p>\n\n<p>Can someone please point me in the right direction? Thanks.</p>\n    ","a":"\n<p>ngModel listens for \"input\" event, so to \"fix\" your code you'd need to trigger that event after setting the value:</p>\n\n<pre><code>$('button').click(function(){\n    var input = $('input');\n    input.val('xxx');\n    input.trigger('input');\n});\n</code></pre>\n\n<p>For the explanation of this particular behaviour checkout this answer that I gave a while ago: \"<a href=\"http://stackoverflow.com/questions/15739960/how-does-angularjs-internally-catch-events-like-onclick-onchange/15740287#15740287\">How does AngularJS internally catch events like 'onclick', 'onchange'?</a>\"</p>\n\n<hr>\n\n<p>But unfortunately, this is not the only problem you have. As pointed out with other post comments, your jQuery-centric approach is plain wrong. For more info take a look at this post: <a href=\"http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background\">How do I “think in AngularJS” if I have a jQuery background?</a>).</p>\n    "},{"t":"Google Angular Framework - Worth the risk?","l":"http://stackoverflow.com/questions/7650674/google-angular-framework-worth-the-risk","q":"\n\n<p>I have been asked to build a small web application for one of our clients and think it might be a good opportunity to try out a different framework for building web applications. Most of the applications we build are based on asp.net web forms and we have no yet done anything in an MVC architecture but I am eager to start building web applications in a more structured manner with the right tools.</p>\n\n<p>I have been researching things like asp.net MVC and the likes which look quite good but I am wondering is there anything to be said for using something like the Google Angular Framework.</p>\n\n<p>If possible I would still like to be able to write my server side code using c# and I have not researched angular enough to know if this is even possible, although I assume I could use web services. </p>\n\n<p>Has anyone had any experience with developing an app using angular and if so, how was it and can you point me in the right direction for some tutorials?</p>\n    ","a":"\n<p>We have been developing a port of a Swing fat-client application in AngularJS for the last couple of months and I think it is worth recommending. As far as learning resources go, check out the official project site (and be sure to read the tutorial) and the mailing list (the authors are very helpful).</p>\n\n<p>The good stuff:    </p>\n\n<ul>\n<li>great testability</li>\n<li>the two-way data binding is a very powerful feature, and it can be extremely helpful once you \"get it\"</li>\n<li>IMO the AngularJS templates are much less brittle than using data- attributes or \"special\" CSS classes to mark elements that do something</li>\n<li>it greatly reduces the need for using jquery plugins, because implementing that functionality in AngularJS is very easy (stuff like trees, tabs, accordions, etc.)</li>\n</ul>\n\n<p>The bad stuff:</p>\n\n<ul>\n<li>the learning curve seems pretty steep (I didn't have much of a problem, but I've seen some people struggle with it)</li>\n<li>validations in AngularJS suck for the time being (a new implementation is on the way)</li>\n<li>not all libraries/jquery plugins play nicely with Angular and usually you have to wrap them</li>\n<li>the API is still being polished, so expect breaking changes (not a big problem with frequent releases and very good changelog, though)</li>\n<li>performance is OK up until several thousand bindings on a page - most of the time this is not a limitation, but there are cases when this could be a problem.</li>\n</ul>\n\n<p>Some pointers (if you ever decide to learn AngularJS):</p>\n\n<ul>\n<li>some people really overuse widgets. In my experience, it's much better to use HTML \"partials\" + services, and only use widgets sporadically.</li>\n<li>read source code of the library - it's the best place to learn stuff about angular</li>\n<li>no DOM manipulation in services/controllers</li>\n<li>if you use css classes to bind to events, you are doing it wrong</li>\n</ul>\n    "},{"t":"AngularJS $location not changing the path","l":"http://stackoverflow.com/questions/11784656/angularjs-location-not-changing-the-path","q":"\n\n<p>I'm having an issue with changing the URL of the page after a form has been submitted.</p>\n\n<p>Here's the flow of my app:</p>\n\n<ol>\n<li>Routes are set, URL is recognized to some form page.</li>\n<li>Page loads, controller sets variables, directives are fired.</li>\n<li>A special form directive is fired which performs a special form submission using AJAX.</li>\n<li>After the AJAX is performed (Angular doesn't take care of the AJAX) then a callback is fired and the directive calls the $scope.onAfterSubmit function which sets the location.</li>\n</ol>\n\n<p>The problem is that after setting the location the nothing happens. I've tried setting the location param to '/' as well ... Nope. I've also tried not submitting the form. Nothing works. Can someone help me out please?</p>\n\n<p>I've tested to see if the code reaches the onAfterSubmit function (which it does).</p>\n\n<p>My only thought is that somehow the scope of the function is changed (since its called from a directive), but then again how can it call onAfterSubmit if the scope changed? </p>\n\n<p>Here's my code</p>\n\n<pre><code>var Ctrl = function($scope, $location, $http) {\n  $http.get('/resources/' + $params.id + '/edit.json').success(function(data) {\n    $scope.resource = data;\n  });\n\n  $scope.onAfterSubmit = function() {\n    $location.path('/').replace();\n  };\n}\nCtrl.$inject = ['$scope','$location','$http'];\n</code></pre>\n    ","a":"\n<p>I had a similar problem some days ago. In my case the problem was that I changed things with a 3rd party library (jQuery to be precise) and in this case even though calling functions and setting variable works Angular doesn't always recognize that there are changes thus it never digests.</p>\n\n<blockquote>\n  <p>$apply() is used to execute an expression in angular from outside of the angular framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).</p>\n</blockquote>\n\n<p>Try to use $scope.$apply() right after you have changed the location and called replace() to let Angular know that things have changed.</p>\n\n<p>I hope it works</p>\n    "},{"t":"Directive isolate scope with ng-repeat scope","l":"http://stackoverflow.com/questions/15623698/directive-isolate-scope-with-ng-repeat-scope","q":"\n\n<p>I have a directive with an isolate-scope (so that I can reuse the directive in other places), and when I use this directive with an <code>ng-repeat</code>, it fails to work.</p>\n\n<p>I have read all the documentation and stackoverflow answers on this topic and understand the issues. I believe I have avoided all the usual gotchas.</p>\n\n<p>So I understand that my code fails because of the scope created by the <code>ng-repeat</code> directive. My own directive creates an isolate-scope and does a two-way data-binding to an object in the parent scope. My directive will assign a new object-value to this bound variable and this works perfectly when my directive is used without <code>ng-repeat</code> (the parent variable is updated correctly). However, with <code>ng-repeat</code>, the assignment creates a new variable in the <code>ng-repeat</code> scope and the parent variable does not see the change. All this is as expected based on what I have read.</p>\n\n<p>I have also read that when there are multiple directives on a given element, only one scope is created. And that a <code>priority</code> can be set in each directive to define the order in which the directives are applied; the directives are sorted by priority and then their compile functions are called (Search for the word priority at <a href=\"http://docs.angularjs.org/guide/directive\">http://docs.angularjs.org/guide/directive</a>).</p>\n\n<p>So I was hoping I could use priority to make sure that my directive runs first and ends up creating an isolate-scope, and when <code>ng-repeat</code> runs, it re-uses the isolate-scope instead of creating a scope that prototypically inherits from the parent scope. The <code>ng-repeat</code> documentation states that that directive runs at priority level <code>1000</code>. It is not clear whether <code>1</code> is a higher priority level or a lower priority level. When I used priority level <code>1</code> in my directive, it did not make a difference, so I tried <code>2000</code>. But that makes things worse: my two-way bindings become <code>undefined</code> and my directive does not display anything.</p>\n\n<p>I have created a <a href=\"http://jsfiddle.net/BWybB/7/\">fiddle to show my issue</a>. I have commented out the <code>priority</code> setting in my directive. I have a list of name objects and a directive called <code>name-row</code> that shows the first and last name fields in the name object. When a displayed name is clicked, I want it to set a <code>selected</code> variable in the main scope. The array of names, the <code>selected</code> variable are passed to the <code>name-row</code> directive using two-way data-binding.</p>\n\n<p>I know how to get this to work by calling functions in the main scope. I also know that if  <code>selected</code> is inside another object, and I bind to the outer object, things would work. But I am not interested in those solutions at the moment.</p>\n\n<p>Instead, the questions I have are:</p>\n\n<ul>\n<li>How do I prevent <code>ng-repeat</code> from creating a scope that prototypically inherits from the parent scope, and instead have it use my directive's isolate-scope?</li>\n<li>Why is priority level <code>2000</code> in my directive not working?</li>\n<li>Using Batarang, is it possible to know what type of scope is in use?</li>\n</ul>\n\n<p>Thank you.</p>\n\n<p>-deepak</p>\n    ","a":"\n<p>Okay, through a lot of the comments above, I have discovered the confusion. First, a couple of points of clarification:</p>\n\n<ul>\n<li>ngRepeat does not affect your chosen isolate scope</li>\n<li>the parameters passed into ngRepeat for use on your directive's attributes <em>do</em> use a prototypically-inherited scope</li>\n<li>the reason your directive doesn't work has nothing to do with the isolate scope</li>\n</ul>\n\n<p>Here's an example of the same code but with the directive removed:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;li ng-repeat=\"name in names\"\n    ng-class=\"{ active: $index == selected }\"\n    ng-click=\"selected = $index\"&gt;\n    {{$index}}: {{name.first}} {{name.last}}\n&lt;/li&gt;\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/BWybB/10/\">JSFiddle</a> demonstrating that it won't work. You get the exact same results as in your directive.</p>\n\n<p>Why doesn't it work? Because scopes in AngularJS use prototypical inheritance. The value <code>selected</code> on your parent scope is a <strong>primitive</strong>. In JavaScript, this means that it will be overwritten when a child sets the same value. There is a golden rule in AngularJS scopes: model values should <em>always</em> have a <code>.</code> in them. That is, they should never be primitives. See <a href=\"http://stackoverflow.com/a/14049482/259038\">this SO answer</a> for more information.</p>\n\n<hr>\n\n<p>Here is a picture of what the scopes initially look like.</p>\n\n<p><img src=\"http://i.stack.imgur.com/5abQ5.png\" alt=\"enter image description here\"></p>\n\n<p>After clicking the first item, the scopes now look like this:</p>\n\n<p><img src=\"http://i.stack.imgur.com/mNipO.png\" alt=\"enter image description here\"></p>\n\n<p>Notice that a new <code>selected</code> property was created on the ngRepeat scope.  The controller scope 003 was not altered.</p>\n\n<p>You can probably guess what happens when we click on the second item:</p>\n\n<p><img src=\"http://i.stack.imgur.com/1wyAf.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p>So your issue is actually not caused by ngRepeat at all - it's caused by breaking a golden rule in AngularJS. The way to fix it is to simply use an object property:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.state = { selected: undefined };\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;li ng-repeat=\"name in names\"\n    ng-class=\"{ active: $index == state.selected }\"\n    ng-click=\"state.selected = $index\"&gt;\n    {{$index}}: {{name.first}} {{name.last}}\n&lt;/li&gt;\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/BWybB/9/\">second JSFiddle</a> showing this works too. </p>\n\n<p>Here is what the scopes look like initially:</p>\n\n<p><img src=\"http://i.stack.imgur.com/xww7Z.png\" alt=\"enter image description here\"></p>\n\n<p>After clicking the first item:</p>\n\n<p><img src=\"http://i.stack.imgur.com/POpOL.png\" alt=\"enter image description here\"></p>\n\n<p>Here, the controller scope is being affected, as desired.</p>\n\n<p>Also, to prove that this will still work with your directive with an isolate scope (because, again, this has nothing to do with your problem), here is a <a href=\"http://jsfiddle.net/BWybB/38/\">JSFiddle</a> for that too, the view must reflect the object. You'll note that the only necessary change was to use an <em>object</em> instead of a <em>primitive</em>.</p>\n\n<p>Scopes initially:</p>\n\n<p><img src=\"http://i.stack.imgur.com/cjaw5.png\" alt=\"enter image description here\"></p>\n\n<p>Scopes after clicking on the first item:</p>\n\n<h2><img src=\"http://i.stack.imgur.com/bSTOk.png\" alt=\"enter image description here\"></h2>\n\n<p>To conclude: once again, your issue isn't with the isolate scope and it isn't with how ngRepeat works. Your problem is that you're breaking a rule that is known to lead to this very problem. Models in AngularJS should always have a <code>.</code>.</p>\n    "},{"t":"$http get parameters does not work","l":"http://stackoverflow.com/questions/17225088/http-get-parameters-does-not-work","q":"\n\n<p>Does anyone know why this not work?</p>\n\n<pre><code>$http\n    .get('accept.php', {\n        source:link,\n        category_id:category\n    })\n    .success(function (data,status) {\n        $scope.info_show = data\n    });\n</code></pre>\n\n<p>and this work:</p>\n\n<pre><code>$http\n    .get('accept.php?source='+link+'&amp;category_id='+category)\n    .success(function (data,status) {\n        $scope.info_show = data\n    });\n</code></pre>\n\n<p>Thank you!</p>\n    ","a":"\n<p>The 2nd parameter in the <code>get</code> call is a config object. You want something like this:</p>\n\n<pre><code>$http\n    .get('accept.php', {\n        params: {\n            source: link,\n            category_id: category\n        }\n     })\n     .success(function (data,status) {\n          $scope.info_show = data\n     });\n</code></pre>\n\n<p>See the <strong>Arguments</strong> section of <a href=\"http://docs.angularjs.org/api/ng.%24http\">http://docs.angularjs.org/api/ng.$http</a> for more detail</p>\n    "},{"t":"Call an AngularJS Controller Function from a directive without isolated scope","l":"http://stackoverflow.com/questions/17583004/call-an-angularjs-controller-function-from-a-directive-without-isolated-scope","q":"\n\n<p>I cannot seem to find a way to call a function on the parent scope from within a directive without using isolated scope.  I know that if I use isolated scope I can just use \"&amp;\" in the isolated to access the function on the parent scope, but using isolated scope when it isn't necessary has consequences.  Consider the following html:</p>\n\n<pre><code>&lt;button ng-hide=\"hideButton()\" confirm=\"Are you sure?\" confirm-action=\"doIt()\"&gt;Do It&lt;/button&gt;\n</code></pre>\n\n<p>In simple this example, I want to show a javascript confirm dialog and only call doIt() if they click \"ok\" in the confirm dialog.  This is simple using an isolated scope.  The directive would look like this:</p>\n\n<pre><code>.directive('confirm', function () {\n    return {\n        restrict: 'A',\n        scope: {\n            confirm: '@',\n            confirmAction: '&amp;'\n        },\n        link: function (scope, element, attrs) {\n            element.bind('click', function (e) {\n                if (confirm(scope.confirm)) {\n                    scope.confirmAction();\n                }\n            });\n        }\n    };\n})\n</code></pre>\n\n<p><strong>But the problem is, because I'm using isolated scope, ng-hide in the example above no longer executes against the parent scope</strong>, but rather in the isolated scope (since using an isolated scope on any directive causes all directives on that element to use the isolated scope).  <a href=\"http://jsfiddle.net/jmcooper/pXej2/\">Here is a jsFiddle</a> of the above example where ng-hide is not working.   (Note that in this fiddle, the button should hide when you type \"yes\" in the input box).</p>\n\n<p>The alternative would be to <strong>NOT use an isolated scope</strong>, which actually is what I really want here since there is no need for this directive's scope to be isolated.  The only problem I have is, <strong>how do I call a method on the parent scope if I don't pass it in on on isolated scope</strong>?  <a href=\"http://jsfiddle.net/jmcooper/x5BwG/\">Here is a jsfiddle</a> where I am NOT using isolated scope and the ng-hide is working fine, but, of course, the call to confirmAction() doesn't work and I don't know how to make it work.</p>\n\n<p><strong>Please note, the answer I am really looking for is how to call functions on the outer scope WITHOUT using an isolated scope.</strong>  And I am not interested in making this confirm dialog work in another way, because the point of this question is to figure out how to make calls to the outer scope and still be able to have other directives work against the parent scope.</p>\n\n<p><strong>Alternatively, I would be interested to hear of solutions that use an isolated scope if other directives will still work against the parent scope</strong>, but I don't think this is possible.</p>\n    ","a":"\n<p>Since the directive is only calling a function (and not trying to set a value on a property), you can use <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$eval\">$eval</a> instead of $parse (with a non-isolate scope):</p>\n\n<pre><code>scope.$apply(function() { \n    scope.$eval(attrs.confirmAction); \n});\n</code></pre>\n\n<p>or better, simply just use <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#$apply\">$apply</a>, which will $eval()uate its argument against the scope:</p>\n\n<pre><code>scope.$apply(attrs.confirmAction); \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7LC36/\">fiddle</a></p>\n    "},{"t":"$watch'ing for data changes in an Angular directive","l":"http://stackoverflow.com/questions/13980896/watching-for-data-changes-in-an-angular-directive","q":"\n\n<p>How can I trigger a <code>$watch</code> variable in an Angular directive when manipulating the data inside (e.g., inserting or removing data), but not assign a new object to that variable?</p>\n\n<p>I have a simple dataset currently being loaded from a JSON file.  My Angular controller does this, as well as define a few functions:</p>\n\n<pre><code>App.controller('AppCtrl', function AppCtrl($scope, JsonService) {\n    // load the initial data model\n    if (!$scope.data) {\n        JsonService.getData(function(data) {\n            $scope.data = data;\n            $scope.records = data.children.length;\n        });\n    } else {\n        console.log(\"I have data already... \" + $scope.data);\n    }\n\n    // adds a resource to the 'data' object\n    $scope.add = function() {\n        $scope.data.children.push({ \"name\": \"!Insert This!\" });\n    };\n\n    // removes the resource from the 'data' object\n    $scope.remove = function(resource) {\n        console.log(\"I'm going to remove this!\");\n        console.log(resource);\n    };\n\n    $scope.highlight = function() {\n\n    };\n});\n</code></pre>\n\n<p>I have a <code>&lt;button&gt;</code> that properly called the <code>$scope.add</code> function, and the new object is properly inserted into the <code>$scope.data</code> set.  A table I have set up does update each time I hit the \"add\" button.</p>\n\n<pre><code>&lt;table class=\"table table-striped table-condensed\"&gt;\n  &lt;tbody&gt;\n    &lt;tr ng-repeat=\"child in data.children | filter:search | orderBy:'name'\"&gt;\n      &lt;td&gt;&lt;input type=\"checkbox\"&gt;&lt;/td&gt;\n      &lt;td&gt;{{child.name}}&lt;/td&gt;\n      &lt;td&gt;&lt;button class=\"btn btn-small\" ng-click=\"remove(child)\" ng-mouseover=\"highlight()\"&gt;&lt;i class=\"icon-remove-sign\"&gt;&lt;/i&gt; remove&lt;/button&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>However, a directive I set set up to watch <code>$scope.data</code> is not being fired when all this happens.</p>\n\n<p>I define my tag in HTML:</p>\n\n<pre><code>&lt;d3-visualization val=\"data\"&gt;&lt;/d3-visualization&gt;\n</code></pre>\n\n<p>Which is associated with the following directive (trimmed for question sanity):</p>\n\n<pre><code>App.directive('d3Visualization', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            val: '='\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('val', function(newValue, oldValue) {\n                if (newValue)\n                    console.log(\"I see a data change!\");\n            });\n        }\n    }\n});\n</code></pre>\n\n<p>I get the <code>\"I see a data change!\"</code> message at the very beginning, but never after as I hit the \"add\" button.</p>\n\n<p>How can I trigger the <code>$watch</code> event when I'm just adding/removing objects from the <code>data</code> object, not getting a whole new dataset to assign to the <code>data</code> object?</p>\n    ","a":"\n<p>You need to enable deep object dirty checking.\nBy default angular only checks the reference of the top level variable that you watch.</p>\n\n<pre><code>App.directive('d3Visualization', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            val: '='\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('val', function(newValue, oldValue) {\n                if (newValue)\n                    console.log(\"I see a data change!\");\n            }, true);\n        }\n    }\n});\n</code></pre>\n\n<p>see <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope\">Scope</a>. The third parameter of the $watch function enables deep dirty checking if it's set to true.</p>\n\n<p>Take note that deep dirty checking is <strong>expensive</strong>. So if you just need to watch the children array instead of the whole <code>data</code> variable the watch the variable directly.</p>\n\n<pre><code>scope.$watch('val.children', function(newValue, oldValue) {}, true);\n</code></pre>\n\n<p>version 1.2.x introduced <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watchCollection\">$watchCollection</a></p>\n\n<blockquote>\n  <p>Shallow watches the properties of an object and fires whenever any of the properties change (for arrays, this implies watching the array items; for object maps, this implies watching the properties)</p>\n</blockquote>\n\n<pre><code>scope.$watchCollection('val.children', function(newValue, oldValue) {});\n</code></pre>\n    "},{"t":"AngularJS seed: putting JavaScript into separate files (app.js, controllers.js, directives.js, filters.js, services.js)","l":"http://stackoverflow.com/questions/16771812/angularjs-seed-putting-javascript-into-separate-files-app-js-controllers-js","q":"\n\n<p>I'm using the <a href=\"https://github.com/angular/angular-seed\">angular-seed</a> template to structure my application. Initially I put all my JavaScript code into a single file, <code>main.js</code>. This file contained my module declaration, controllers, directives, filters, and services. The application works fine like this, but I'm worried about scalability and maintainability as my application becomes more complex. I noticed that the angular-seed template has separate files for each of these, so I've attempted to distribute my code from the single <code>main.js</code> file into each of the other files mentioned in the title to this question and found in the <code>app/js</code> directory of the <a href=\"https://github.com/angular/angular-seed/tree/master/app/js\">angular-seed</a> template.</p>\n\n<p>My question is: how do I manage the dependencies to get the application to work? The existing documentation found <a href=\"http://docs.angularjs.org/guide\">here</a> isn't very clear in this regard since each of the examples given shows a single JavaScript source file.</p>\n\n<p>An example of what I have is:</p>\n\n<h3>app.js</h3>\n\n<pre><code>angular.module('myApp', \n    ['myApp.filters',\n     'myApp.services',\n     'myApp.controllers']);\n</code></pre>\n\n<h3>controllers.js</h3>\n\n<pre><code>angular.module('myApp.controllers', []).\n    controller('AppCtrl', [function ($scope, $http, $filter, MyService) {\n\n        $scope.myService = MyService; // found in services.js\n\n        // other functions...\n    }\n]);\n</code></pre>\n\n<h3>filters.js</h3>\n\n<pre><code>angular.module('myApp.filters', []).\n    filter('myFilter', [function (MyService) {\n        return function(value) {\n            if (MyService.data) { // test to ensure service is loaded\n                for (var i = 0; i &lt; MyService.data.length; i++) {\n                    // code to return appropriate value from MyService\n                }\n            }\n        }\n    }]\n);\n</code></pre>\n\n<h3>services.js</h3>\n\n<pre><code>angular.module('myApp.services', []).\n    factory('MyService', function($http) {\n        var MyService = {};\n        $http.get('resources/data.json').success(function(response) {\n            MyService.data = response;\n        });\n        return MyService;\n    }\n);\n</code></pre>\n\n<h3>main.js</h3>\n\n<pre><code>/* This is the single file I want to separate into the others */\nvar myApp = angular.module('myApp'), []);\n\nmyApp.factory('MyService', function($http) {\n    // same code as in services.js\n}\n\nmyApp.filter('myFilter', function(MyService) {\n    // same code as in filters.js\n}\n\nfunction AppCtrl ($scope, $http, $filter, MyService) {\n    // same code as in app.js\n}\n</code></pre>\n\n<p>How do I manage the dependencies?</p>\n\n<p>Thanks in advance.</p>\n    ","a":"\n<p>The problem is caused from you \"redeclaring\" your application module in all your separate files.</p>\n\n<p>This is what the app module declaration (not sure declaration is the right term) looks like:</p>\n\n<pre><code>angular.module('myApp', []).controller( //...\n</code></pre>\n\n<p>This is what assignment (not sure if assignment is the right term either) to your application module looks like:</p>\n\n<pre><code>angular.module('myApp').controller( //...\n</code></pre>\n\n<p>Notice the lack of square brackets.</p>\n\n<p>So, the former version, one <em>with</em> the square brackets, should only be used once, usually in your <code>app.js</code> or <code>main.js</code>. All other associated files — <em>controllers, directives, filters</em> … — should use the latter version, the one <em>without</em> the square brackets.</p>\n\n<p>I hope that makes sense. Cheers!</p>\n    "},{"t":"Where Should Model State Be Stored In Angular.js","l":"http://stackoverflow.com/questions/16607874/where-should-model-state-be-stored-in-angular-js","q":"\n\n<p>I'm finding Angular's use of models confusing. Angular seems to take the approach that a model can be anything you like - I.E. Angular does not include an explicit model class and you can use vanilla JavaScript objects as models.</p>\n\n<p>In almost every Angular example I've seen, the model is effectively an object, either created by hand, or returned from an API call via a Resource. Because almost every Angular example I've looked at is simple, usually the model data stored on $scope in a controller and any state related to the model, for example selection, is also stored on the $scope in the controller. This works fine for simple apps/examples, but this seems like an oversimplification when apps become more complex. Model state stored in a controller is at risk of becoming contextual and being lost if the context changes, for example; A Controller storing <code>selectedGallery</code> and <code>selectedPhoto</code> can only store global <code>selectedImage</code>, not a <code>selectedPhoto</code> per gallery. In such a situation, using a controller per gallery might negate this problem, but would seem wasteful and probably inappropriate and unnecessary from a UI perspective.</p>\n\n<p>Angular's definition of models seems closer to what I would consider a VO/DTO that is a dumb object passed between server and client. My instinct is to wrap such an object in what I would consider a Model - a class that maintains state relating to the DTO/VO (such as selection), offers mutators as needed to manipulate the DTO/VO, and notifies the rest of the application of changes to the underlying data. Obviously this last part is nicely taken care of by Angular's bindings, but I still see a strong use-case for the first two responsibilities.</p>\n\n<p>However I haven't really seen this pattern used in the examples I've looked at, but neither have I seen what I would consider a scalable alternative. Angular seems to implicitly discourage using Services as models by enforcing Singletons (I know there are ways to get around this, but they don't seem widely used or approved of).</p>\n\n<p>So how should I be keeping state on Model data?</p>\n\n<p>[Edit] The second answer in <a href=\"http://stackoverflow.com/questions/11112608/angularjs-where-to-put-model-data-and-behaviour?rq=1\">this question</a> is interesting and close to what I'm currently using.</p>\n    ","a":"\n<h1>State (and models) are stored in $scope</h1>\n\n<p>$scope is Angular's data storage object. It's analogous to a database. $scope itself is not the model, but you can store models in $scope.</p>\n\n<p>Each $scope has a parent $scope, all the way up to $globalScope forming a tree structure that loosely mirrors your DOM. When you call a directive which requires a new $scope, such as ng-controller, a new $scope object will be created and added to the tree.</p>\n\n<p>$scope objects are connected using prototypical inheritance. This means that if you add a model at a higher level in the tree, it will be available to all the lower levels. This is a phenomenally powerful feature which makes the $scope hierarchy almost transparent to the template author.</p>\n\n<h2>Controllers initialise $scope</h2>\n\n<p><strong>The purpose of the controller is to initialise $scope</strong>. The same controller can initialize many $scope objects in different parts of the page. The controller is instantiated, sets up the $scope object and then exits. You can use the same controller to initialize many $scopes in different parts of the page.</p>\n\n<p>In the case of your image gallery, you would have an imageGallery controller which you would then apply to every portion of the DOM which you want to be a gallery using the ng-controller directive. That portion of the page would get it's own $scope, which you would use to store the selectedPhoto attribute.</p>\n\n<h2>Prototypical scopes</h2>\n\n<p>$scope inherits from its parent using plain old prototypical inheritance all the way up to $rootScope, so you can store your objects anywhere on the hierarchy that makes sense. You get a tree of $scope objects that roughly relates to your current DOM. If your DOM changes, new $scope objects are created for you as required.</p>\n\n<p>$scope is just a plain JavaScript object. It's no more wasteful to create multiple $scope objects than it would be to create an array with multiple currentImage objects. It's a sensible way to organise your code.</p>\n\n<p>In this way Angular does away with the old \"where do I store my data\" problem that we often find in JavaScript. It's the source of one of the really big productivity gains that we get from Angular.</p>\n\n<p>Got global data (eg. a userId)? store it on $rootScope. Got local data (eg. a currentImage in a gallery where there are multiple gallery instances)? Store it on the $scope object that belongs to that gallery.</p>\n\n<p>$scope is automatically available to you in the correct portion of the template. </p>\n\n<h2>Angular models are thin</h2>\n\n<p>Coming from a Rails background where we emphasise fat models and skinny controllers, I found Angular's 'barely there' models surprising. In fact, putting a lot of business logic in your model often leads to problems down the line, as we sometimes see with the User model in Rails which, if you're not careful, will grow until it becomes unmaintainable.</p>\n\n<h2>An angular model is simply a JavaScript object or primitive.</h2>\n\n<p>Any object can be a model. Models are typically defined using JSON in the controller, or AJAXed in from a server. A model might be a JSON object, or might be just a string, array, or even a number.</p>\n\n<p>Of course, there's nothing to stop you adding additional functions to your model and storing them in the JSON object if you want to, but this would be porting in a paradigm that doesn't really fit with Angular.</p>\n\n<p>Angular objects are typically repositories of data, not functions.</p>\n\n<h2>The model on the front end is not the real model</h2>\n\n<p>Of course the model that you hold on the client is not the real model. Your actual model, your single source of truth lives on the server. We synchronise it using an API, but if there's a conflict between the two the model in your database is obviously the ultimate victor. </p>\n\n<p>This gives you privacy for things like discount codes, etc. The model you find in your front end is a synchronised version of the public properties of the real model, which is remote.</p>\n\n<h2>Business logic can live in services.</h2>\n\n<p>Say you want to write a method to do something to your model, synchronise it, or validate it for example. In other frameworks you might be tempted to extend your model with a method to do this. In Angular you would be more likely to write a service.</p>\n\n<p>Services are singleton objects. Like any other JavaScript object you can put functions or data in them. Angular comes with a bunch of built in services, such as $http. You can build your own, and use dependency injection to automatically provide them to your controllers. </p>\n\n<p>A service might contain methods to talk to a RESTful API for example, or to validate your data, or any other work you might need to do. </p>\n\n<h2>Services are not models</h2>\n\n<p>Of course you shouldn't use services as models. Use them as objects which can do stuff. Sometimes they do stuff to your model. It's a different way of thinking, but a workable one.</p>\n    "},{"t":"AngularJs “controller as” syntax - clarification?","l":"http://stackoverflow.com/questions/21287794/angularjs-controller-as-syntax-clarification","q":"\n\n<p>I <a href=\"http://docs.angularjs.org/guide/concepts#controller\">read about the new syntax</a> from angularJS regarding <code>controller as xxx</code></p>\n\n<blockquote>\n  <p>The syntax <code>InvoiceController as invoice</code> tells Angular to instantiate\n  the controller and save it in the variable invoice in the current\n  scope.</p>\n</blockquote>\n\n<p>Visualization : </p>\n\n<p><img src=\"http://i.stack.imgur.com/jOhdC.jpg\" alt=\"enter image description here\"></p>\n\n<p>Ok  , so I wont have the parameter <code>$scope</code> in my controller and the code will be much cleaner in the controller.</p>\n\n<p><strong>But</strong></p>\n\n<p>I will have to specify another alias <strong>in the view</strong></p>\n\n<p>So Until now I could do : </p>\n\n<pre><code>&lt;input type=\"number\" ng-model=\"qty\"  /&gt;\n\n....controller('InvoiceController', function($scope) {\n   // do something with $scope.qty &lt;--notice\n</code></pre>\n\n<p>And now I can do : </p>\n\n<pre><code> &lt;input type=\"number\" ng-model=\"invoic.qty\"  /&gt; &lt;-- notice \n\n  ....controller('InvoiceController', function() {\n       // do something with  this.qty  &lt;--notice\n</code></pre>\n\n<p><strong>Question</strong></p>\n\n<p>What is the goal of doing it ? removing from one place and add  to another place ? </p>\n\n<p>I will be glad to see what am I missing.</p>\n    ","a":"\n<p>There are several things about it.</p>\n\n<p>Some people don't like the <code>$scope</code> syntax (don't ask me why). They say that they could just use <code>this</code>. That was one of the goals.</p>\n\n<p>Making it clear where a property comes from is really useful too.</p>\n\n<p>You can nest controllers and when reading the html it is pretty clear where every property comes.</p>\n\n<p>You can also <em>avoid</em> some of the <strong>dot rule</strong> problems.</p>\n\n<p>For example, having two controllers, both with the same name 'name', You can do this:</p>\n\n<pre><code>&lt;body ng-controller=\"ParentCtrl\"&gt;\n    &lt;input ng-model=\"name\" /&gt; {{name}}\n\n    &lt;div ng-controller=\"ChildCtrl\"&gt;\n        &lt;input ng-model=\"name\" /&gt; {{name}} - {{$parent.name}}\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>You can modify both parent and child, no problem about that. But you need to use <code>$parent</code> to see the parent's name, because you shadowed it in your child controller. In massive html code <code>$parent</code> could be problematic, you don't know where that name comes from.</p>\n\n<p>With <code>controller as</code> you can do:</p>\n\n<pre><code>&lt;body ng-controller=\"ParentCtrl as parent\"&gt;\n    &lt;input ng-model=\"parent.name\" /&gt; {{parent.name}}\n\n    &lt;div ng-controller=\"ChildCtrl as child\"&gt;\n      &lt;input ng-model=\"child.name\" /&gt; {{child.name}} - {{parent.name}}\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Same example, but it is much much clearer to read.</p>\n\n<ul>\n<li><a href=\"http://plnkr.co/edit/OvxVZGLGxerGIh73giiR?p=preview\"><code>$scope</code> plunker</a></li>\n<li><a href=\"http://plnkr.co/edit/VmqLvjGE7DyLOi6MJgfA?p=preview\"><code>controller as</code> plunker</a></li>\n</ul>\n    "},{"t":"Extending Angular Directive","l":"http://stackoverflow.com/questions/17005122/extending-angular-directive","q":"\n\n<p>I'd like to make a minor modification to a 3rd party directive (specifically <a href=\"http://angular-ui.github.io/bootstrap/\">Angular UI Bootstrap</a>).  I simply want to add to the scope of the <code>pane</code> directive:</p>\n\n<pre><code>angular.module('ui.bootstrap.tabs', [])\n.controller('TabsController', ['$scope', '$element', function($scope, $element) {\n  // various methods\n}])\n.directive('tabs', function() {\n  return {\n    // etc...\n  };\n})\n.directive('pane', ['$parse', function($parse) {\n  return {\n    require: '^tabs',\n    restrict: 'EA',\n    transclude: true,\n    scope:{\n      heading:'@',\n      disabled:'@' // &lt;- ADDED SCOPE PROPERTY HERE\n    },\n    link: function(scope, element, attrs, tabsCtrl) {\n      // link function\n    },\n    templateUrl: 'template/tabs/pane.html',\n    replace: true\n  };\n}]);\n</code></pre>\n\n<p>But I also want to keep Angular-Bootstrap up to date with Bower.  As soon as I run <code>bower update</code>, I'll overwrite my changes.</p>\n\n<p>So how do I go about extending this directive separately from this bower component?</p>\n    ","a":"\n<p>Probably the simplest way to solve this is to create a directive on your app with the same name as the third party directive.  Both directives will run and you can specify their run order using the <code>priority</code> property (higher priority runs first).</p>\n\n<p>The two directives will share scope and you can access and modify the scope of the third party directive via your directive's <code>link</code> method.</p>\n\n<p><strong>Option 2:</strong> You can also access a third party directive's scope by simply putting your own arbitrarily named directive on the same element with it (assuming neither directive uses isolate scope). <em>All non-isolate scope directives on an element will share scope.</em></p>\n\n<p><strong>Further Reading:</strong> <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Directives#extending-directives\" rel=\"nofollow\">https://github.com/angular/angular.js/wiki/Understanding-Directives#extending-directives</a></p>\n\n<p><strong>Note:</strong> My previous answer was for modifying a third party service, not a directive.</p>\n    "}]