[{"t":"bower init - difference between amd, es6, globals and node","l":"http://stackoverflow.com/questions/22674018/bower-init-difference-between-amd-es6-globals-and-node","q":"\n\n<p>I am creating my first Bower component. After running <code>bower init</code> the script asks me 'what types of modules does this package expose?' with these options:</p>\n\n<ul>\n<li>amd </li>\n<li>es6 </li>\n<li>globals </li>\n<li>node</li>\n</ul>\n\n<p>what is the difference between these options?</p>\n    ","a":"\n<p>If you don't know, it's quite likely globals is the right answer for you.</p>\n\n<p>Either way, you need to understand:</p>\n\n<ul>\n<li><a href=\"http://requirejs.org/docs/whyamd.html\">what is and why AMD</a></li>\n<li><a href=\"http://nodejs.org/api/modules.html\">what is a nodejs module</a></li>\n<li><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3amodules\">what is ecmascript 6 and especially es6 modules</a></li>\n</ul>\n\n<p>[UPDATE]</p>\n\n<p>This feature was introduced very recently in bower and is not documented at all yet (AFAIK). It essentially describes the \"moduleType\", which states for what module technology the package is meant to be consumed (see above). Right now, it doesn't have any effect apart from setting the moduleType property in the bower.json file of the package. See <a href=\"https://github.com/bower/bower/pull/934\">https://github.com/bower/bower/pull/934</a> for the original pull-request.</p>\n\n<p>[UPDATE #2]</p>\n\n<p>A few additional points, to answer comments:</p>\n\n<ul>\n<li>right now AFAIK there is no validation done on the <code>moduleType</code> property - which means that people are technically allowed to use whatever value they want for it, including <code>angularjs</code> if they feel inclined to do so</li>\n<li>the <a href=\"https://github.com/bower/bower/pull/1129#issuecomment-37359448\">bower committee</a> seems to not be keen toward the inclusion of additional \"non-interoperable/proprietary\" moduleTypes (think composer, angular, etc) - which is easily understandable, but yet again, nothing really prevents people from using the moduleType value they want</li>\n<li>an exception to the previous is the (somewhat) recent inclusion of the <code>yui</code> moduleType, so, there are \"exceptions\" to be made, assuming they are <a href=\"https://github.com/bower/bower/pull/1129#issuecomment-37828996\">part of a concerted plan</a></li>\n</ul>\n\n<p>What I would do if I were to author a package for a not-listed package manager and publish it on bower?</p>\n\n<p>I would author an es6 module, and use / patch <a href=\"https://github.com/square/es6-module-transpiler\">es6-transpiler</a> to output the package format I need. Then I would either/and:</p>\n\n<ul>\n<li>petition the bower guys to include my package technology as a choice (based on the fact it's supported by es6-transpiler as a target)</li>\n<li>publish my package including both the es6 module version of it and the transpiled XXX version of it, and use <code>es6</code> as a <code>moduleType</code></li>\n</ul>\n\n<p>Disclaimer: I don't have real-life experience authoring angularjs modules.</p>\n    "},{"t":"ECMAScript 6 features available in Node.js 0.12","l":"http://stackoverflow.com/questions/28388885/ecmascript-6-features-available-in-node-js-0-12","q":"\n\n<p>A new stable release of Node.js (0.12) has landed recently with an upgraded Google's v8 JavaScript engine, <em>v3.28.73</em>.</p>\n\n<h2>What ECMAScript 6 features are currently present in Node.js, without using the <code>--harmony</code> flag?</h2>\n\n<p>I have checked several sites claiming to list the ES 6 features but all of them seem out of date - most prominently, <a href=\"http://kangax.github.io/compat-table/es6/#node\">this table</a> (<strong>Update:</strong> <em>now updated with current Node.js status as of 0.12</em>), because several of the features are listed as requiring the <code>--harmony</code> flag while I found some of them being enabled by default (Maps, Sets, Symbols, to name a few).</p>\n\n<p>Also, trying to google this information purely for the v8 engine gives too up-to-date information - current v8 release is <em>4.2.*</em>, which is quite ahead of what Node.js uses.</p>\n\n<p>My hopes are that this question (and its answers) will become a comprehensive summary on what ES 6 features are now available to Node.js developers.</p>\n\n<h2>ES 6 features enabled in Node.js 0.12 I currently know of:</h2>\n\n<ul>\n<li>Maps, Sets / WeakMaps, WeakSets</li>\n<li>Symbols</li>\n<li>Object.observe</li>\n<li>Promises</li>\n<li>Number\n<ul>\n<li>.isInteger</li>\n<li>.isSafeInteger</li>\n<li>.isNaN</li>\n<li>.EPSILON</li>\n<li>.MIN_SAFE_INTEGER</li>\n<li>.MAX_SAFE_INTEGER</li>\n</ul></li>\n<li>Math\n<ul>\n<li>.clz32</li>\n<li>.imul</li>\n<li>.sign</li>\n<li>.log10</li>\n<li>.log2</li>\n<li>.log1p</li>\n<li>.expm1</li>\n<li>.cosh</li>\n<li>.sinh</li>\n<li>.tanh</li>\n<li>.acosh</li>\n<li>.asinh</li>\n<li>.atanh</li>\n<li>.trunc</li>\n<li>.fround</li>\n<li>.cbrt</li>\n<li>.hypot</li>\n</ul></li>\n</ul>\n    ","a":"\n<p><strong>Features without <code>--harmony</code> flag:</strong></p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">\"for-of\" loop</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a> (already specified in question)</li>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> (already specified in question)</li>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> (already specified in question)</li>\n<li>Array methods: \n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\">.keys()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\">.values()</a> </li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\">.entries()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\">[Symbol.iterator]</a></li>\n</ul></li>\n<li>Object:\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\">.observe()</a> (actually it's ES7)\n(<a href=\"http://bocoup.com/weblog/javascript-object-observe/\">http://bocoup.com/weblog/javascript-object-observe/</a>)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">.is()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\">.setPrototypeOf()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\">.getOwnPropertySymbols()</a></li>\n<li>.getNotifier() (not es6, example <a href=\"http://bocoup.com/weblog/javascript-object-observe/\">here</a>)</li>\n<li>.apply() and .call() (not es6, same purpose as Funciton.prototype.call and Function.prototype.apply)</li>\n</ul></li>\n<li>Number properties and methods (already specified in question)\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\">.isInteger()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\">.isSafeInteger()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\">.isNaN()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\">.isFinite()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\">EPSILON</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\">MIN_SAFE_INTEGER</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">MAX_SAFE_INTEGER</a></li>\n</ul></li>\n<li>Math methods (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">a lot of them</a>) (already specified in question)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">constants</a></li>\n</ul>\n\n<p>I thinks that's all that we have without <code>--harmony</code> flag.</p>\n\n<p><strong>Features with <code>--harmony</code> flag:</strong></p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">generators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a> (without need of <code>--harmony_arrow_functions</code> flag in contrast to <code>io.js</code>)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let variables</a> - only in <code>strict mode</code></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\">Binary and octal literals</a></li>\n<li><p>String methods:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\">.contains()</a> (was replaced by <code>includes()</code> in actual ES6 specification)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\">.startsWith()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\">.endsWith()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\">.codePointAt()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\">.repeat()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\">.normalize()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\">String.fromCodePoint</a></li>\n</ul></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a> (behind the <code>--harmony-proxies</code> flag)</p></li>\n</ul>\n\n<p>I think that's all. Maybe if I forgot something - I'll add it later to the list.</p>\n    "},{"t":"What is “function*” in JavaScript?","l":"http://stackoverflow.com/questions/9620586/what-is-function-in-javascript","q":"\n\n<p>In <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...of\">this</a> page I found a new JavaScript function type:</p>\n\n<pre><code>// NOTE: \"function*\" is not supported yet in Firefox.\n// Remove the asterisk in order for this code to work in Firefox 13 \n\nfunction* fibonacci() { // !!! this is the interesting line !!!\n    let [prev, curr] = [0, 1];\n    for (;;) {\n        [prev, curr] = [curr, prev + curr];\n        yield curr;\n    }\n}\n</code></pre>\n\n<p>I already know <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7\">what <code>yield</code>, <code>let</code> and <code>[?,?]=[?,?]</code> do</a>, but have no idea what the <code>function*</code> is meant to be. What is it?</p>\n\n<p>P.S. don't bother trying Google, it's <a href=\"http://groups.google.com/a/googleproductforums.com/forum/#!searchin/websearch/Asterisk%2420/websearch/UtOLastuiQs/pgNSQTboCzAJ\">impossible</a> to search for expressions with asterisks (<a href=\"http://www.googleguide.com/wildcard_operator.html\">they're used as placeholders</a>).</p>\n    ","a":"\n<p>It's a proposed syntax for EcmaScript.next.</p>\n\n<p>Dave Herman of Mozilla gave a talk about <a href=\"http://www.youtube.com/watch?v=hs6tF-RDX4U\">EcmaScript.next</a>.  At <a href=\"http://youtu.be/hs6tF-RDX4U?t=30m15s\">30:15</a> he talks about generators.  Earlier, he explains how Mozilla is experimentally implementing proposed language changes to help steer the committee.  Dave works closely with Brendan Eich, Mozilla's CTO (I think), and the original JavaScript designer.</p>\n\n<p>You can find more detail on the EcmaScript working group wiki: <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:generators\">http://wiki.ecmascript.org/doku.php?id=harmony:generators</a></p>\n\n<p>The working group (TC-39) has general agreement that EcmaScript.next should have some kind of generator iterator proposal, but this is not final.  You shouldn't rely on this showing up without changes in the next version of the language, and even if it doesn't change, it probably won't show up widely in other browsers for a while.</p>\n\n<blockquote>\n  <h3>Overview</h3>\n  \n  <p>First-class coroutines, represented as objects encapsulating suspended execution contexts (i.e., function activations). Prior art: Python, Icon, Lua, Scheme, Smalltalk.</p>\n  \n  <h3>Examples</h3>\n  \n  <p>The “infinite” sequence of Fibonacci numbers (notwithstanding behavior around 2<sup>53</sup>):</p>\n\n<pre><code>function* fibonacci() {\n    let [prev, curr] = [0, 1];\n    for (;;) {\n        [prev, curr] = [curr, prev + curr];\n        yield curr;\n    }\n}\n</code></pre>\n  \n  <p>Generators can be iterated over in loops:</p>\n\n<pre><code>for (n of fibonacci()) {\n    // truncate the sequence at 1000\n    if (n &gt; 1000)\n        break;\n    print(n);\n}\n</code></pre>\n  \n  <p>Generators are iterators:</p>\n\n<pre><code>let seq = fibonacci();\nprint(seq.next()); // 1\nprint(seq.next()); // 2\nprint(seq.next()); // 3\nprint(seq.next()); // 5\nprint(seq.next()); // 8\n</code></pre>\n</blockquote>\n    "},{"t":"Object.is vs ===","l":"http://stackoverflow.com/questions/30543190/object-is-vs","q":"\n\n<p>I stumbled upon a code example which was using this comparison:</p>\n\n<pre><code>var someVar = 0;\nObject.is(false, someVar); //Returns false \n</code></pre>\n\n<p>I know <code>false == 0</code> will be <code>true</code> that's why we have <code>===</code>.</p>\n\n<p>How is <code>Object.is</code> different from <code>===</code>? </p>\n    ","a":"\n<p><code>===</code> is called strict comparison operator in JavaScript. <code>Object.is</code> and strict comparison operator behave exactly the same except for <code>NaN</code> and <code>+0/-0</code>.</p>\n\n<p>From MDN: </p>\n\n<blockquote>\n  <p><code>Object.is()</code> method is not the same as being equal according to the <code>===</code> operator. The <code>===</code> operator (and the <code>==</code> operator as well) treats the number values -0 and +0 as equal and treats <code>Number.NaN</code> as not equal to <code>NaN</code>.</p>\n</blockquote>\n\n<p>Code below highlights the difference between <code>===</code> and <code>Object.is()</code>.</p>\n\n<pre><code>console.log(+0 === -0); //true\nconsole.log(Object.is(+0, -0)); //false\n\nconsole.log(NaN === NaN); // false\nconsole.log(Object.is(NaN, NaN)); //true\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/zETNR.png\" alt=\"enter image description here\"></p>\n\n<p>You can find more examples <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">here</a>. </p>\n\n<p><strong>Note</strong>: <code>Object.is</code> is part of the ECMAScript 6 proposal and not widely supported yet.</p>\n    "},{"t":"What are the actual uses of ES6 WeakMap?","l":"http://stackoverflow.com/questions/29413222/what-are-the-actual-uses-of-es6-weakmap","q":"\n\n<p>What are the actual uses of the <code>WeakMap</code> data structure introduced in ECMAScript 6?</p>\n\n<p>Since a key of a weak map creates a strong reference to its corresponding value, ensuring that a value which has been inserted into a weak map will <em>never</em> disappear as long as its key is still alive, it can't be used for memo tables, caches or anything else that you would normally use weak references, maps with weak values, etc. for.</p>\n\n<p>It seems to me that this:</p>\n\n<pre><code>weakmap.set(key, value);\n</code></pre>\n\n<p>...is just a roundabout way of saying this:</p>\n\n<pre><code>key.value = value;\n</code></pre>\n\n<p>What concrete use cases am I missing?</p>\n    ","a":"\n<h2>Fundamentally</h2>\n\n<p><strong>WeakMaps provide a way to extend objects from the outside without interfering with garbage collection.</strong> Whenever you want to extend an object but can't because it is sealed - or from an external source - a WeakMap can be applied.</p>\n\n<p>A WeakMap is a map (dictionary) where the <strong>keys</strong> are weak - that is, if all references to the <em>key</em> are lost and there are no more references to the value - the <em>value</em> can be garbage collected. Let's show this first through examplesת then explain it a bit and finally finish with a real use.</p>\n\n<p>Let's say I'm using an API that gives me a certain object:</p>\n\n<pre><code>var obj = getObjectFromLibrary();\n</code></pre>\n\n<p>Now, I have a method that uses the object:</p>\n\n<pre><code>function useObj(obj){\n   doSomethingWith(obj);\n}\n</code></pre>\n\n<p>I want to keep track of how many times the method was called with a certian object and report if it happens more than N times. Naively one would think to use a Map:</p>\n\n<pre><code>var map = new Map(); // maps can have object keys\nfunction useObj(obj){\n    doSomethingWith(obj);\n    var called = map.get(obj) || 0;\n    called++; // called one more time\n    if(called &gt; 10) report(); // Report called more than 10 times\n    map.set(obj, called);\n}\n</code></pre>\n\n<p>This works, but it has a memory leak - we now keep track of every single library object passed to the function which keeps the library objects from ever being garbage collected. Instead - we can use a <code>WeakMap</code>:</p>\n\n<pre><code>var map = new WeakMap(); // create a weak map\nfunction useObj(obj){\n    doSomethingWith(obj);\n    var called = map.get(obj) || 0;\n    called++; // called one more time\n    if(called &gt; 10) report(); // Report called more than 10 times\n    map.set(obj, called);\n}\n</code></pre>\n\n<p>And the memory leak is gone. </p>\n\n<h2>Use cases</h2>\n\n<p>Some use cases that would otherwise cause a memory leak and are enabled by <code>WeakMap</code>s include:</p>\n\n<ul>\n<li>Keeping private data about a specific object and only giving access to it to people with a reference to the Map. A more ad-hoc approach is coming with the private-symbols proposal but that's a long time from now.</li>\n<li>Keeping data about library objects without changing them or incurring overhead. </li>\n<li>Keeping data about a small set of objects where many objects of the type exists to not incur problems with hidden classes JS engines use for objects of the same type.</li>\n<li>Keeping data about host objects like DOM nodes in the browser.</li>\n<li>Adding a capability to an object from the outside (like the event emitter example in the other answer).</li>\n</ul>\n\n<h2>Let's look at a real use</h2>\n\n<p>It can be used to extend an object from the outside. Let's give a practical (adapted, sort of real - to make a point) example from the real world of io.js.</p>\n\n<p>Let's say you're io.js and you have <code>Promise</code> objects - now you want to keep track of all the currently rejected promises - however you do <em>not</em> want to keep them from being garbage collected in case no references exist to them. </p>\n\n<p>Now, you <em>don't</em> want to add properties to native objects for obvious reasons - so you're stuck. If you keep references to the promises you're causing a memory leak since no garbage collection can happen - if you don't keep references you can't save additional information about individual promises. Any scheme that involves saving the ID of a promise inherently means you need a reference to it.</p>\n\n<h3>Enter WeakMaps</h3>\n\n<p>WeakMaps mean that the <strong>keys</strong> are weak. There are no ways to enumerate a weak map or to get all its values. In a weak map you can store the data based on a key and when the key gets garbage collected so do the values.</p>\n\n<p>This means that given a promise you can store state about it - and that object can still be garbage collected. Later on if you get a reference to an object you can check if you have any state relating to it and report it.</p>\n\n<p>This was used to implement <a href=\"https://github.com/iojs/io.js/issues/256\">unhandled rejection hooks</a> by Petka Antonov as <a href=\"https://iojs.org/api/process.html#process_event_unhandledrejection\">this</a>:</p>\n\n<pre><code>process.on('unhandledRejection', function(reason, p) {\n    console.log(\"Unhandled Rejection at: Promise \", p, \" reason: \", reason);\n    // application specific logging, throwing an error, or other logic here\n});\n</code></pre>\n\n<p>We keep information about promises in a map and can know when a rejected promise was handled.</p>\n    "},{"t":"When should I use Arrow functions in ECMAScript 6?","l":"http://stackoverflow.com/questions/22939130/when-should-i-use-arrow-functions-in-ecmascript-6","q":"\n\n<p>The question is directed at people who have thought about code style in the context of the upcoming ECMAScript 6 (Harmony) and who have already worked with the language.</p>\n\n<p>With <code>() =&gt; {}</code> and <code>function () {}</code> we are getting two very similar ways to write functions in ES6. In other languages lambda functions often distinguish themselves by being anonymous, but in ECMAScript any function can be anonymous. Each of the two types have unique usage domains (namely when <code>this</code> needs to either be bound explicitly or explicitly not be bound). Between those domains there is a vast number of cases where either notation will do.</p>\n\n<p>Arrow functions in ES6 have at least two limitations:</p>\n\n<ul>\n<li>Don't work with <code>new</code></li>\n<li>Fixed <code>this</code> bound to scope at initialisation</li>\n</ul>\n\n<p>These two limitations aside, arrow functions could theoretically replace regular functions almost anywhere. What is the right approach using them in practice? Should arrow functions be used e.g.:</p>\n\n<ul>\n<li>\"everywhere they work\", i.e. everywhere a function does not have to be agnostic about the <code>this</code> variable and we are not creating an object.</li>\n<li>only \"everywhere they are needed\", i.e. event listeners, timeouts, that need to be bound to a certain scope</li>\n<li>with 'short' functions but not with 'long' functions</li>\n<li>only with functions that do not contain another arrow function</li>\n</ul>\n\n<p>What I am looking for is a guideline to selecting the appropriate function notation in the future version of ECMAScript. The guideline will need to be clear, so that it can be taught to developers in a team, and to be consistent so that it does not require constant refactoring back and forth from one function notation to another.</p>\n    ","a":"\n\n\n<p>Our team recently migrated all its code (a mid-sized AngularJS app) from CoffeeScript to JavaScript compiled using <a href=\"https://github.com/google/traceur-compiler\">Traceur</a>. I'm now using the following rule of thumb for Harmony functions:</p>\n\n<ul>\n<li>Use <code>function</code> in the global scope and for <code>Object.prototype</code> properties.</li>\n<li>Use <code>class</code> for object constructors.</li>\n<li>Use <code>=&gt;</code> everywhere else.</li>\n</ul>\n\n<p>Why use arrow functions almost everywhere?</p>\n\n<ol>\n<li>Scope safety: When arrow functions are used consistently, everything is guaranteed to use the same <code>thisObject</code> as the root. If even a single standard function callback is mixed in with a bunch of arrow functions there's a chance the scope will become messed up.</li>\n<li>Compactness: Arrow functions are easier to read and write. (This may seem opinionated so I will give a few examples further on).</li>\n<li>Clarity: When almost everything is an arrow function, any regular <code>function</code> immediately sticks out for defining the scope. A developer can always look up the next-higher <code>function</code> statement to see what the <code>thisObject</code> is.</li>\n</ol>\n\n<p>Why always use regular functions on the global scope or module scope?</p>\n\n<ol>\n<li>To indicate a function that should not access the <code>thisObject</code>.</li>\n<li>The <code>window</code> object (global scope) is best addressed explicitly.</li>\n<li>Many <code>Object.prototype</code> definitions live in the global scope (think <code>String.prototype.truncate</code> etc.) and those generally have to be of type <code>function</code> anyway. Consistently using <code>function</code> on the global scope helps avoid errors.</li>\n<li>Many functions in the global scope are object constructors for old-style class definitions.</li>\n<li>Functions can be named<sup>1</sup>. This has two benefits: (1) It is less awkward to write<code>function foo(){}</code> than <code>const foo = () =&gt; {}</code> — in particular outside other function calls. (2) The function name shows in stack traces. While it would be tedious to name every internal callback, naming all the public functions is probably a good idea.</li>\n<li>Function declarations are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#Function_declaration_hoisting\"><em>hoisted</em></a>, (meaning they can be accessed before they are declared), which is a useful attribute in a static utility function.</li>\n</ol>\n\n<p><br>\n<strong>Object constructors</strong></p>\n\n<p>Attempting to instantiate an arrow function throws an exception:</p>\n\n<pre><code>var x = () =&gt; {};\nnew x(); // TypeError: x is not a constructor\n</code></pre>\n\n<p>One key advantage of functions over arrow functions is therefore that functions double as object constructors:</p>\n\n<pre><code>function Person(name) {\n    this.name = name;\n}\n</code></pre>\n\n<p>However, the functionally identical<sup>2</sup> ES Harmony <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\">draft class definition</a> is almost as compact:</p>\n\n<pre><code>class Person {\n    constructor(name) {\n        this.name = name;\n    }\n}\n</code></pre>\n\n<p>I expect that use of the former notation will eventually be discouraged. The object constructor notation may still be used by some for simple anonymous object factories where objects are programmatically generated, but not for much else.</p>\n\n<p>Where an object constructor is needed one should consider converting the function to a <code>class</code> as shown above. The syntax works with anonymous functions/classes as well.</p>\n\n<p><br>\n<strong>Readability of arrow functions</strong></p>\n\n<p>The probably best argument for sticking to regular functions - scope safety be damned - would be that arrow functions are less readable than regular functions. If your code is not functional in the first place, then arrow functions may not seem necessary, and when arrow functions are not used consistently they look ugly.</p>\n\n<p>ECMAScript has changed quite a bit since ECMAScript 5.1 gave us the functional <code>Array.forEach</code>, <code>Array.map</code> and all of these functional programming features that have us use functions where for-loops would have been used before. Asynchronous JavaScript has taken off quite a bit. ES6 will also ship a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object, which means even more anonymous functions. There is no going back for functional programming. In functional JavaScript, arrow functions are preferable over regular functions.</p>\n\n<p>Take for instance this (particularly confusing) piece of code<sup>3</sup>:</p>\n\n<pre><code>function CommentCtrl($scope, articles) {\n    $scope.comments = [];\n\n    articles.getList()\n        .then((articles) =&gt; Promise.all(articles.map((article) =&gt; article.comments.getList())))\n        .then((commentLists) =&gt; {\n            $scope.comments = commentLists.reduce((a, b) =&gt; a.concat(b));\n        });\n}\n</code></pre>\n\n<p>The same piece of code with regular functions:</p>\n\n<pre><code>function CommentCtrl($scope, articles) {\n    $scope.comments = [];\n\n    articles.getList()\n        .then(function (articles) {\n            return Promise.all(articles.map(function (article) { \n                return article.comments.getList();\n            }));\n        })\n        .then(function (commentLists) {\n            $scope.comments = commentLists.reduce(function (a, b) {\n                return a.concat(b); \n            });\n        });\n}\n</code></pre>\n\n<p>While any one of the arrow functions can be replaced by a standard function, there would be very little to gain from doing so. Which version is more readable? I would say the first one. </p>\n\n<p>I think the question whether to use arrow functions or regular functions will become less relevant over time. Most <em>functions</em> will either become class methods, which make away with the <code>function</code> keyword, or they will become classes. Functions will remain in use for patching classes through the <code>Object.prototype</code>. In the mean time I suggest reserving the <code>function</code> keyword for anything that should really be a class method or a class.</p>\n\n<hr>\n\n<p><strong>Notes</strong></p>\n\n<ol>\n<li>Named arrow functions have been <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax#deferred\">deferred in the ES6 spec</a>. They might still be added a future version.</li>\n<li>According to the draft specification <em>\"Class declarations/expressions create a constructor function/prototype pair exactly as for function declarations\"</em> as long as a class does not use the <code>extend</code> keyword. A minor difference is that class declarations are constants, whereas function declarations are not.</li>\n<li>Note on blocks in single statement arrow functions: I like to use a block wherever an arrow function is called for the side effect alone (e.g. assignment). That way it is clear that the return value can be discarded.</li>\n</ol>\n    "},{"t":"What does `return function *(){…}` mean? [duplicate]","l":"http://stackoverflow.com/questions/19833945/what-does-return-function-mean","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/9620586/what-is-function-in-javascript\" dir=\"ltr\">What is “function*” in JavaScript?</a>\n                <span class=\"question-originals-answer-count\">\n                    3 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I saw something strange in <a href=\"https://github.com/koajs/koa\">Koa</a>. It has some new function names (from <a href=\"https://github.com/koajs/koa/blob/master/examples/co.js#L10\">https://github.com/koajs/koa/blob/master/examples/co.js#L10</a>):</p>\n\n<pre><code>app.use(function(){\n  return function *(){\n    var paths = yield fs.readdir('docs');\n\n    var files = yield paths.map(function(path){\n      return fs.readFile('docs/' + path, 'utf8');\n    });\n\n    this.type = 'markdown';\n    this.body = files.join('');\n  }\n});\n</code></pre>\n\n<p>What does <code>return function *()</code> mean? Can we declare a function with the name of <code>*</code> in JavaScript?</p>\n    ","a":"\n<p>It means that the function returns an iterator (so it can be repeatedly called with .next() to yield more values.</p>\n\n<p>check out <a href=\"http://wingolog.org/archives/2013/05/08/generators-in-v8\">http://wingolog.org/archives/2013/05/08/generators-in-v8</a> for more info</p>\n\n<p>It's an ES6 construct, so at the moment you see it more in node rather than client side js</p>\n    "},{"t":"Why bring symbols to javascript?","l":"http://stackoverflow.com/questions/21724326/why-bring-symbols-to-javascript","q":"\n\n<p>As you may know they are <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\">planning to include</a> new Symbol primitive type in ECMAScript 6 (not to mention some other crazy stuff). I always thought that the <code>:symbol</code> notion in Ruby is needless; we could easily use plain strings instead, like we do in JavaScript. And now they decide to complicate things in JS with that. </p>\n\n<p>I don't understand the motivation. Could someone explain to me whether we really need symbols in JavaScript?</p>\n\n<p><strong>UPDATE</strong>: Recently a <a href=\"https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/\">brilliant article from Mozilla</a> came up. Read it if you're curious.</p>\n    ","a":"\n<p>Enabling private properties, like kangax describes in his answer, was indeed the original motivation for introducing symbols into JavaScript.</p>\n\n<p>Unfortunately, however, they ended up being severely downgraded, and not private after all, because you can find them via reflection. Specifically, via the <code>Object.getOwnPropertySymbols</code> method and through proxies.</p>\n\n<p>They are now known as <em>unique</em> symbols, and their only use is to avoid name clashes between properties. For example, EcmaScript itself can now introduce extension hooks via certain methods you can put on objects (e.g. to define their iteration protocol) without running the risk of clashing with user names.</p>\n\n<p>Whether that is strong enough a motivation to add symbols to the language is debatable.</p>\n    "},{"t":"Using ECMAScript 6","l":"http://stackoverflow.com/questions/24008366/using-ecmascript-6","q":"\n\n<p>I'm looking for a way to run ECMAScript 6 code in my browser's console but most browsers don't support functionality that I'm looking for. For example Firefox is the only browser that supports arrow functions.</p>\n\n<p>Is there a way (extension, userscript, etc.) I can run these features on Chrome?</p>\n    ","a":"\n<p>In Chrome, most of the ES6 features are hidden behind a flag called \"Experimental JavaScript features\". Visit <code>chrome://flags/#enable-javascript-harmony</code>, enable this flag, restart Chrome and you will get <a href=\"https://github.com/joyent/node/wiki/ES6-%28a.k.a.-Harmony%29-Features-Implemented-in-V8-and-Available-in-Node\">many new features</a>.</p>\n\n<p>Arrow functions are <a href=\"https://code.google.com/p/v8/issues/detail?id=2700\">not yet implemented in V8/Chrome</a>, so this flag won't \"unlock\" arrow functions.</p>\n\n<p>Since arrow functions are a syntax change, it is not possible to support this syntax without changing the way how JavaScript is parsed. If you love developing in ES6, then you could write ES6 code and use an ES6-to-ES5 compiler to generate JavaScript code that is compatible with all existing (modern) browsers.</p>\n\n<p>For example, see <a href=\"https://github.com/google/traceur-compiler\">https://github.com/google/traceur-compiler</a>. As of writing, it supports <a href=\"http://kangax.github.io/compat-table/es6/\">all of the new syntax features of ES6</a>. Together with the flag mentioned at the top of this answer, you will get very close to the desired result.</p>\n\n<p>If you want to run ES6 syntax directly from the console, then you could try to overwrite the JavaScript evaluator of the console (such that Traceur preprocesor is run before executing the code). If you fancy doing this, have a look at <a href=\"http://stackoverflow.com/questions/17042547/how-to-inject-javascript-into-chrome-devtools-itself/17044405#17044405\">this answer</a> to learn how to modify the behavior of the developer tools.</p>\n    "},{"t":"When will ECMAScript v 6 become standard [closed]","l":"http://stackoverflow.com/questions/15640233/when-will-ecmascript-v-6-become-standard","q":"\n\n<p>Sorry if this has been asked before, but I'm wondering when ECMAScript v 6 will become more than a draft, and become the new standard.  Going to the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMA website (section 262)</a> still shows edition 5.1 as being the latest, which was released in June 2011.</p>\n\n<p>Note: <em>(I plan on doing a talk on ECMA 262 edition 5.1 in the next couple of months and I'm hoping I'm not talking about out-dated material :)</em></p>\n    ","a":"\n<p>As of June 2015: <strong>here it is</strong>! </p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/<strong>6.0</strong></a></p>\n</blockquote>\n\n<hr>\n\n<p>As of <a href=\"https://twitter.com/awbjs/status/474662357516689410\" rel=\"nofollow\">June 2014</a>:</p>\n\n<blockquote>\n  <p><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts\" rel=\"nofollow\">The GA will vote on approving it as a Ecma standard at their <strong>June 2015</strong> meeting.</a></p>\n</blockquote>\n\n<hr>\n\n<p>At the time of writing (March 2013):</p>\n\n<blockquote>\n  <p>A sixth edition of the standard is currently under development with a target date of December 2013 for completion.</p>\n</blockquote>\n\n<p><a href=\"http://ecma-international.org/memento/TC39-M.htm\" rel=\"nofollow\">http://ecma-international.org/memento/TC39-M.htm</a></p>\n    "},{"t":"ES6 class variable alternatives","l":"http://stackoverflow.com/questions/22528967/es6-class-variable-alternatives","q":"\n\n<p>Currently in ES5 many of us are using the following pattern in frameworks to create classes and class variables, which is comfy:</p>\n\n<pre><code>FrameWork.Class({\n\n    variable: 'string',\n    variable2: true,\n\n    init: function(){\n\n    },\n\n    addItem: function(){\n\n    }\n\n});\n</code></pre>\n\n<p>With ES6 you have the ability to create classes native way, but there is no option to have class variables:</p>\n\n<pre><code>class MyClass {\n    const MY_CONST = 'string';\n    constructor(){\n        this.MY_CONST;\n    }\n}\n</code></pre>\n\n<p>Sadly this won't work as classes only can hold functions. I understand that i can <code>this.myVar = true;</code> from the constructor but i don't want to 'junk' my constructor, especially when i have 20-30+ params for a bigger class.</p>\n\n<p>I was thinking of many ways to handle this issue, but didn't find any good one yet. For example to create a ClassConfig handler and pass my parameter object which is separatelly declared from the class, than the handler would attach to the class. I was thinkon on WeakMaps also to integrate somehow.</p>\n\n<p>What kind of ideas would you have to handle this situation?</p>\n    ","a":"\n<p>The notes in the ES wiki for the proposal in ES6 (<a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\">maximally minimal classes</a>) note:</p>\n\n<blockquote>\n  <p>There is (intentionally) no direct declarative way to define either prototype data properties (other than methods) class properties, or instance property</p>\n  \n  <p>Class properties and prototype data properties need be created outside the declaration.</p>\n  \n  <p>Properties specified in a class definition are assigned the same attributes as if they appeared in an object literal.</p>\n</blockquote>\n\n<p>This means that <strong>what you're asking for was considered, and explicitly decided against.</strong></p>\n\n<h3>but... why?</h3>\n\n<p>Good question. The good people of TC39 want class declarations to declare and define the capabilities of a class. Not its members. An ES6 class declaration defines its contract for its user. </p>\n\n<p>Remember, a class definition defines <em>prototype</em> methods - defining variables on the prototype is generally not something you do.\nYou can, of course use:</p>\n\n<pre><code>constructor(){\n    this.foo = bar\n}\n</code></pre>\n\n<p>In the constructor like you suggested. Also see <a href=\"http://wiki.ecmascript.org/lib/exe/fetch.php?id=strawman%3Amaximally_minimal_classes&amp;cache=cache&amp;media=strawman:maxminclasssemantics.pdf\">the summary of the consensus</a>.</p>\n\n<h3>ES7 and beyond</h3>\n\n<p>A new proposal for ES7 is being worked on that allows more concise instance variables through class declarations and expressions - <a href=\"https://esdiscuss.org/topic/es7-property-initializers\">https://esdiscuss.org/topic/es7-property-initializers</a></p>\n    "},{"t":"Private properties in JavaScript ES6 classes","l":"http://stackoverflow.com/questions/22156326/private-properties-in-javascript-es6-classes","q":"\n\n<p>Is it possible to create private properties in ES6 classes?</p>\n\n<p>Here's an example.\nHow can I prevent access to <code>instance.property</code>?</p>\n\n<pre><code>class Something {\n  constructor(){\n    this.property = \"test\";\n  }\n}\n\nvar instance = new Something();\nconsole.log(instance.property); //=&gt; \"test\"\n</code></pre>\n\n<p>ES6 Fiddle: <a href=\"http://www.es6fiddle.net/hsc69ea7/\">http://www.es6fiddle.net/hsc69ea7/</a></p>\n    ","a":"\n<p>The answer is \"No\". But you can create private access to properties like this:</p>\n\n<ul>\n<li>Use modules. Everything in a module is private unless it's made public by using the <code>export</code> keyword.</li>\n<li>Inside modules, use function closure: <a href=\"http://www.kirupa.com/html5/closures_in_javascript.htm\" rel=\"nofollow\">http://www.kirupa.com/html5/closures_in_javascript.htm</a></li>\n</ul>\n\n<p>(The suggestion that Symbols could be used to ensure privacy was true in an earlier version of the ES6 spec but is no longer the case:<a href=\"https://mail.mozilla.org/pipermail/es-discuss/2014-January/035604.html\" rel=\"nofollow\">https://mail.mozilla.org/pipermail/es-discuss/2014-January/035604.html</a> and <a href=\"http://stackoverflow.com/a/22280202/1282216\">http://stackoverflow.com/a/22280202/1282216</a>. For a longer discussion about Symbols and privacy see: <a href=\"https://curiosity-driven.org/private-properties-in-javascript\" rel=\"nofollow\">https://curiosity-driven.org/private-properties-in-javascript</a>)</p>\n    "},{"t":"Iterating with while loop instead of for loop","l":"http://stackoverflow.com/questions/17512726/iterating-with-while-loop-instead-of-for-loop","q":"\n\n<p>ECMAScript 6 introduces generators, iterators and syntax sugar for iteration. Node.JS v0.11.4 with the flags</p>\n\n<blockquote>\n  <p><code>--harmony --use_strict --harmony_generators</code></p>\n</blockquote>\n\n<p>understands the following generator</p>\n\n<pre><code>function* fibonacci() {\n  let previous = 0;\n  let current = 1;\n\n  while(true) {\n    let temp = previous;\n    previous = current;\n    yield current = temp + current;\n  }\n}\n</code></pre>\n\n<p>I can then print the Fibonacci numbers less than 1000.</p>\n\n<pre><code>for(let value of fibonacci()) {\n    if(value &gt; 1000) { break; }\n    console.log(value);\n}\n</code></pre>\n\n<p>For this example a <code>while</code> loop instead of a <code>for</code> loop would be more natural, similar to</p>\n\n<pre><code>while(value of fibonacci() &lt; 1000) {\n    console.log(value);\n}\n</code></pre>\n\n<p>Can iteration of iterators be done with a <code>while</code> loop instead of a <code>for</code> loop?</p>\n    ","a":"\n<p>Would something like this satisfy you?</p>\n\n<pre><code>var sequence = fibonacci();\nvar value;\nwhile ((value = sequence.next()) &lt; 1000) {\n    console.log(value);\n}\n</code></pre>\n\n<p>plus, maybe even a nicer solution would be something like:</p>\n\n<pre><code>function* fibonacci(limit){\n  let previous = 0;\n  let current = 1;\n\n  while(previous + current &lt; limit) {\n    let temp = previous;\n    previous = current;\n    yield current = temp + current;\n  }\n}\n\nfor(let value of fibonacci(1000)) {\n    console.log(value);\n}\n</code></pre>\n    "},{"t":"Replacing angular with standard web technologies","l":"http://stackoverflow.com/questions/26382156/replacing-angular-with-standard-web-technologies","q":"\n\n<p>I'm working on a project which has the luxury of using ECMA 6 on the latest browsers for a product that will be shipped in 1.5 years. So we thought why not use Web Components now that Angular 2 isn't available (which is going to be ECMA 6). And while we are at it, can we replace Angular altogether without having to go back to stone age?</p>\n\n<h1>How to replace Angular?</h1>\n\n<p>There's this site called <a href=\"http://youmightnotneedjquery.com/\">youmightnotneedjquery.com</a> which is basically about how modern browsers actually <em>have</em> most of the stuff that jQuery was traditionally used for. I'm interested to see something like that for Angular.</p>\n\n<p>We mainly use four Angular features. What are my options for replacing them?</p>\n\n<ul>\n<li><strong>Angular Directives</strong> --&gt; <strong>Web Components</strong></li>\n<li><strong>Angular Modules</strong> --&gt; <strong>ECMA 6 Modules</strong> (not exactly the same thing)</li>\n<li><strong>Angular Routes</strong> --&gt; ???</li>\n<li><strong>Angular 2-way databinding</strong> --&gt; ???</li>\n</ul>\n\n<p>PS. We don't want to replace Angular with something similar like Backbone or Ember. We want to replace it with standard web technologies but if we have to use small tools to fill the gap, we'll consider it.</p>\n    ","a":"\n<p>I've been researching in the past 3 weeks and turns out many people are thinking about an alternative after Angular took a drastic change path. Fortunately the upcomming W3C Web Components standard actually has all we need and it works right now with <a href=\"https://www.polymer-project.org/\" rel=\"nofollow\">polyfills from the Polymer project</a>. So to answer the question:</p>\n\n<ul>\n<li><strong>Angular Directives</strong> --&gt; <strong>Web Components</strong> use the <a href=\"https://www.polymer-project.org/docs/start/platform.html\" rel=\"nofollow\">polyfill</a> until all browsers support it.</li>\n<li><strong>Angular Modules</strong> --&gt; <strong>ECMA 6 Modules</strong> part of the problem is solved with HTML imports. But you can also use <a href=\"https://github.com/google/traceur-compiler\" rel=\"nofollow\">Traceur</a> until the browsers support it.</li>\n<li><strong>Angular Routes</strong> --&gt; <em>There's a component for that™</em> use <a href=\"https://github.com/erikringsmuth/app-router\" rel=\"nofollow\"><code>&lt;app-router&gt;</code></a>.</li>\n<li><strong>Angular 2-way databinding</strong> --&gt; <a href=\"https://www.polymer-project.org/\" rel=\"nofollow\">Polymer</a> adds a \"magic\" layer on top of the plain standard web components. This includes many features including <a href=\"https://www.polymer-project.org/docs/polymer/databinding.html\" rel=\"nofollow\">data-binding</a>.</li>\n</ul>\n\n<h1>+Plus More</h1>\n\n<p>If you're wondering about the build process for concatenating files in order to reduce the number of HTTP requests, take a look at <a href=\"https://www.polymer-project.org/articles/concatenating-web-components.html\" rel=\"nofollow\">Addy Osmani's post about Vulcanize</a>. Spoiler: you may not need it with the upcoming HTTP 2 optimizations.</p>\n\n<p>Many Angular projects use Twitter Bootstrap for the layout. Polymer can do that plus it plays nicely with Google's <a href=\"https://www.polymer-project.org/components/paper-elements/demo.html\" rel=\"nofollow\">Paper elements</a> (totally optional but superbly awesome).</p>\n\n<p>If you want to make yourself familiar with web components in general, here is a bunch of nice articles: <a href=\"http://webcomponents.org/articles/\" rel=\"nofollow\">http://webcomponents.org/articles/</a></p>\n\n<p>And here is a wealth of web components: <a href=\"http://customelements.io/\" rel=\"nofollow\">http://customelements.io/</a> I don't know if it's going to be a new NPM, but the list components is pretty impressive and growing.</p>\n\n<p>It's relatively complicated to expose an API for an Angular component. People have come up with all sorts of methods from <a href=\"http://stackoverflow.com/questions/18533370/how-to-expose-a-public-api-from-a-directive-that-is-a-reusable-component\">link function</a> to <a href=\"https://groups.google.com/forum/#!topic/angular/51NiuT23Adc\" rel=\"nofollow\">emitting events</a>. In <a href=\"https://www.polymer-project.org/docs/start/creatingelements.html\" rel=\"nofollow\">Web Components, however, it's really easy</a> to make your component interact with the world outside and indeed the API and events you expose aren't much different from standard HTML tags like <code>&lt;audio&gt;</code>.</p>\n\n<p>Just like <a href=\"https://angulardart.org/\" rel=\"nofollow\">Angular</a>, you can use <a href=\"https://www.dartlang.org/polymer/\" rel=\"nofollow\">Polymer with Dart</a> as well.</p>\n\n<h1>Conclusion</h1>\n\n<p>Overall, I don't see any reason to use Angular except if:</p>\n\n<ol>\n<li>You have a huge source code investment in angular and don't want to port everything to standard web. (Angular 2.0 will deprecate your code anyway, so you're stuck with Angular 1.*)</li>\n<li>Your team is too lazy to learn a new technology (in that case web might not be the right platform for this attitude anyway).</li>\n</ol>\n\n<p>Angular was good for what it was doing and had its own <a href=\"http://en.wikipedia.org/wiki/Hype_cycle\" rel=\"nofollow\">Hype cycle</a>. Web components solve many of the issues Angular was trying to address. Probably Angular had a role as a proof of concept for the Web components. But now it's time to move on. Web is reinventing itself everyday and it's inevitable to <a href=\"https://www.youtube.com/watch?v=16hxCB1Dvd4\" rel=\"nofollow\">moves someone's cheese</a>. </p>\n\n<p>I'm not saying that <em>Polymer is the ultimate answer to everything</em>. At best it's another Angular which will render useless in a couple of years, but now it's a good time to learn and use it. The <a href=\"http://w3c.github.io/webcomponents/spec/custom/\" rel=\"nofollow\">W3C</a> <a href=\"http://w3c.github.io/webcomponents/spec/imports/\" rel=\"nofollow\">standards</a> <a href=\"https://html.spec.whatwg.org/multipage/scripting.html#the-template-element\" rel=\"nofollow\">don't</a> <a href=\"http://w3c.github.io/webcomponents/spec/shadow/\" rel=\"nofollow\">die</a> easily though, and Polymer tends to be much closer to them.</p>\n\n<p><img src=\"http://i.stack.imgur.com/Byho2.jpg\" alt=\"RIP Angular 2009-2014\"></p>\n\n<p><strong>There's an element for that™</strong> is the new <strong>There's an app for that™</strong></p>\n    "},{"t":"What is extended mode?","l":"http://stackoverflow.com/questions/17253509/what-is-extended-mode","q":"\n\n<p>I'm toying with <code>let</code> in Node v0.10.12. Using the <code>--harmony</code> flag the following code produces a syntax error:</p>\n\n<pre><code>for (let i = 0; i &lt; 2; i += 1) {\n    console.log('i', i);\n}\n</code></pre>\n\n<blockquote>\n  <p>SyntaxError: Illegal let declaration outside extended mode</p>\n</blockquote>\n\n<p>However, if I also use the <code>--use-strict</code> flag, then the code runs as expected.</p>\n\n<p>Why is a syntax error thrown when just using the <code>--harmony</code> flag? What is extended mode? What is the connection with strict mode?</p>\n    ","a":"\n<p>It looks like \"extended mode\" was removed from the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aspecification_drafts\">current development version</a> of the harmony spec on February 27, 2012, but there's a description of what it was supposed to be in a few older ones (this one is from January 16, 2012):</p>\n\n<blockquote>\n  <h3>10.1.2  Extended Code</h3>\n  \n  <p>Extended code is any code contained in an ECMAScript Program syntactic\n  unit that contains occurrences of lexical or syntactic productions\n  defined subsequent to the Fifth Edition of the ECMAScript\n  specification. Code is interpreted as extended code in the following\n  situations:</p>\n  \n  <ul>\n  <li><p>Global code is extended global code if it is contained in an  ECMAScript Program syntactic unit that has been designated as an\n  extended Program unit in an implementation defined manner or if ???.</p></li>\n  <li><p>Eval code is extended eval code if the call to eval is a direct call (see 15.1.2.1.1) to the eval function that is contained in\n  extended mode code or if it begins with ???. </p></li>\n  <li><p>Function code that is part of a <em>FunctionDeclaration</em>, <em>FunctionExpression</em>, or accessor <em>PropertyAssignment</em> is extended function code if its <em>FunctionDeclaration</em>, <em>FunctionExpression</em>, or\n  <em>PropertyAssignment</em> is contained in extended mode code or if the function code begins with ???.</p></li>\n  <li><p>Function code that is supplied as the last argument to the built-in Function constructor is strict function code if the last argument is a\n  String that when processed as a <em>FunctionBody</em> begins with ???.</p></li>\n  </ul>\n  \n  <p>The term “strict code” is used to designate both actual strict mode\n  code and extended code while the term “extended code” only designates\n  actual extended code.  The term “base code” is used to designate code\n  that is not extended code.</p>\n</blockquote>\n\n<p>As for the connection with strict mode, that seems to be specific to V8's (experimental) implementation. Here's what the <a href=\"https://code.google.com/p/v8/source/detail?r=10062\">changelog for revision 10062</a>, which introduced the <code>--harmony</code> flag, says:</p>\n\n<blockquote>\n  <p>This CL introduces a third mode next to the non-strict (henceforth\n  called 'classic mode') and 'strict mode' which is called 'extended\n  mode' as in the current ES.next specification drafts. The extended\n  mode is based on the 'strict mode' and adds new functionality to it.\n  This means that most of the semantics of these two modes coincide.</p>\n  \n  <p><em>The 'extended mode' is entered instead of the 'strict mode' during\n  parsing when using the 'strict mode' directive \"use strict\" and when\n  the the harmony-scoping flag is active.</em> <strong><em>This should be changed once it\n  is fully specified how the 'extended   mode' is entered.</em></strong></p>\n</blockquote>\n    "},{"t":"Destructuring in Node.JS","l":"http://stackoverflow.com/questions/17379277/destructuring-in-node-js","q":"\n\n<p><a href=\"http://youtu.be/tBkA6x0sbuQ?t=8m45s\">This recent video</a> claims that EMCAScript 6 destructuring is already partially implemented in Node.JS. I have tried various examples (using v0.10.12 and the <code>--harmony</code> flag), such as</p>\n\n<pre><code>var [a, b] = [1, 2];\n</code></pre>\n\n<p>and </p>\n\n<pre><code>var {a: a, b: b} = {a: 1, b: 2};\n</code></pre>\n\n<p>to no avail. <a href=\"https://code.google.com/p/v8/issues/detail?id=811\">This ticket</a> seems to suggest that destructuring is not yet supported in V8.</p>\n\n<p>Is destructuring really partially implemented in Node.JS? What are snippets of code I can play with?</p>\n    ","a":"\n<p>You can get the list of supported harmony features by typing:</p>\n\n<pre>node --v8-options | grep harmony\n</pre>\n\n<p>The current stable version (0.10.12) will give you:</p>\n\n<pre>  --harmony_typeof (enable harmony semantics for typeof)\n  --harmony_scoping (enable harmony block scoping)\n  --harmony_modules (enable harmony modules (implies block scoping))\n  --harmony_proxies (enable harmony proxies)\n  --harmony_collections (enable harmony collections (sets, maps, and weak maps))\n  --harmony (enable all harmony features (except typeof))\n</pre>\n\n<p>The latest nightly adds:</p>\n\n<pre>  --harmony_symbols (enable harmony symbols (a.k.a. private names))\n  --harmony_observation (enable harmony object observation (implies harmony collections)\n  --harmony_typed_arrays (enable harmony typed arrays)\n  --harmony_array_buffer (enable harmony array buffer)\n  --harmony_generators (enable harmony generators)\n  --harmony_iteration (enable harmony iteration (for-of))\n</pre>\n\n<p>So, no destructuring at the moment it would seem.</p>\n\n<p>A possible explanation would be that the <a href=\"https://code.google.com/p/v8/issues/detail?id=811\">V8 Issue</a> has a \"WorkingAsIntended\" tag. However, what the V8 team meant by that was that the feature was not an ECMAScript draft yet and was therefore not implemented in V8 (it's the case now, but the issue has not been updated).</p>\n    "},{"t":"What is “export default” in javascript?","l":"http://stackoverflow.com/questions/21117160/what-is-export-default-in-javascript","q":"\n\n<p>File: <a href=\"https://github.com/wycats/handlebars.js/blob/583141de7cb61eb70eaa6b33c25f475f3048071b/lib/handlebars/safe-string.js\">SafeString.js</a></p>\n\n<pre><code>// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = function() {\n  return \"\" + this.string;\n};\n\nexport default SafeString;\n</code></pre>\n\n<p>I never see <code>export default</code> before. Are there any equivalent stuff for <code>export default</code> that can be easier to understand?</p>\n    ","a":"\n<p>It's part of the ES6 module system, <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:modules\">described here</a>. There is a helpful example in that documentation, also:</p>\n\n<blockquote>\n  <p>If a module defines a default export:</p>\n\n<pre><code>module \"foo\" {\n    export default function() { console.log(\"hello!\") }\n}\n</code></pre>\n  \n  <p>then you can import that default export by omitting the curly braces:</p>\n\n<pre><code>import foo from \"foo\";\nfoo(); // hello!\n</code></pre>\n</blockquote>\n\n<hr>\n\n<p><strong>Update:</strong> As of February 2, 2015, the module system is defined in <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-modules\">§15.2</a> and the <code>export</code> syntax in particular is defined in <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-exports\">§15.2.3</a> of the ES6 draft specification. Of course, since it's still a draft, this may change in the future.</p>\n    "},{"t":"check if function is a generator","l":"http://stackoverflow.com/questions/16754956/check-if-function-is-a-generator","q":"\n\n<p>I played with generators in Nodejs v0.11.2 and I'm wondering\nhow I can check that argument to my function is generator function.</p>\n\n<p>I found this way <code>typeof f === 'function' &amp;&amp; Object.getPrototypeOf(f) !== Object.getPrototypeOf(Function)</code> but I'm not sure if this is good (and working in future) way.</p>\n\n<p>What is your opinion about this issue?</p>\n    ","a":"\n<p>In the latest version of nodejs (I verified with v0.11.12) you can check if the constructor name is equal to <code>GeneratorFunction</code>. I don't don't what version this came out in but it now works.</p>\n\n<pre><code>function isGenerator(fn) {\n    return fn.constructor.name === 'GeneratorFunction';\n}\n</code></pre>\n    "},{"t":"What does the Reflect object do in JavaScript?","l":"http://stackoverflow.com/questions/25421903/what-does-the-reflect-object-do-in-javascript","q":"\n\n<p>I saw a blank stub on MDN a while ago for the <code>Reflect</code> object in javascript but I can't for the life of me find anything on Google. Today I found this <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-reflect-object\">http://people.mozilla.org/~jorendorff/es6-draft.html#sec-reflect-object</a> and it sounds similar to the Proxy object apart from the realm and loader functionality. </p>\n\n<p>Basically, I don't know whether this page I found only explains how to implement Reflect or if I just can't understand its wording. Could someone please explain to me generally what the methods of <code>Reflect</code> do?</p>\n\n<p>For instance, on the page I found says that calling <code>Reflect.apply ( target, thisArgument, argumentsList )</code>\nwill \"Return the result of calling the [[Call]] internal method of target with arguments thisArgument and args.\" but how is that any different than just calling <code>target.apply(thisArgument, argumentsList)</code>?</p>\n\n<p>Update:</p>\n\n<p>Thanks to @Blue, I found this page on the wiki\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api&amp;s=reflect\">http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api&amp;s=reflect</a>\nwhich to the best of my knowledge says that the reflect object provides method versions of all the actions that can be trapped by proxies to make forwarding easier. But that seems a little weird to me since I don't see how it's entirely necessary. But it Seems to do a little more than that, particularly the par that says <code>double-lifting</code> but that points to the old proxy spec/</p>\n    ","a":"\n<p>The <code>Reflection proposal</code> seems to have progressed to the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-reflection\">Draft ECMAScript 6 Specification</a>. This document currently outlines the <code>Reflect</code>-object's methods and only states the following about the <code>Reflect</code>-object itself:</p>\n\n<blockquote>\nThe Reflect object is a single ordinary object.\n<br><br>\nThe value of the [[Prototype]] internal slot of the Reflect object is the standard built-in Object prototype object (19.1.3).\n<br><br>\nThe Reflect object is not a function object. It does not have a [[Construct]] internal method; it is not possible to use the Reflect object as a constructor with the <strong>new</strong> operator. The Reflect object also does not have a [[Call]] internal method; it is not possible to invoke the Reflect object as a function. \n</blockquote>\n\n<p>However, there is a short explanation about it's purpose in <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:reflect_api&amp;s=reflect\">ES Harmony</a>:</p>\n\n<blockquote>\nThe “@reflect” module serves multiple purposes:\n<ul>\n<li>Now that we have modules, a “@reflect” module is a more natural place for many of the reflection methods previously defined on Object.    \nFor backwards-compatibility purposes, it is unlikely that the static methods on Object will disappear. However, new methods should likely be added to the “@reflect” module rather than to the Object constructor.\n</li><li>A natural home for proxies, avoiding the need for a global Proxy binding.\n</li><li>Most methods in this module map one-to-one onto Proxy traps. Proxy handlers need these methods to conveniently forward operations, as shown below.\n</li></ul>\n</blockquote>\n\n<p><br><br>\nSo, the <code>Reflect</code> object provides a number of utility functions, many of which appear to overlap with ES5 methods defined on the global Object. </p>\n\n<p>However, that doesn't really explain what existing problems this intends to solve or what functionality is added. I suspected this could be shimmed and indeed, the above harmony-spec links to a <a href=\"https://github.com/tvcutsem/harmony-reflect/\">'non-normative, approximate implementation of these methods'</a>.</p>\n\n<p>Examining that code could give (further) idea's about it's use, but thankfully there is also a wiki that outlines <strong><a href=\"https://github.com/tvcutsem/harmony-reflect/wiki\">a number of reasons why the Reflect object is useful</a></strong>:<br>\n<sub>(I've copied (and formatted) the following text for future reference from that source as they are the <em>only</em> examples I could find. Besides that, they make sense, already have a good explanation and touch the question's <code>apply</code> example.)</sub></p>\n\n<p><br><strong>More useful return values</strong> </p>\n\n<p>Many operations in <code>Reflect</code> are similar to ES5 operations defined on <code>Object</code>, such as <code>Reflect.getOwnPropertyDescriptor</code> and <code>Reflect.defineProperty</code>. However, whereas <code>Object.defineProperty(obj, name, desc)</code> will either return <code>obj</code> when the property was successfully defined, or throw a <code>TypeError</code> otherwise, <code>Reflect.defineProperty(obj, name, desc)</code> is specced to simply return a boolean that indicates whether or not the property was successfully defined. This allows you to refactor this code:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>try {\n  Object.defineProperty(obj, name, desc);\n  // property defined successfully\n} catch (e) {\n  // possible failure (and might accidentally catch the wrong exception)\n}\n</code></pre>\n\n<p>To this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if (Reflect.defineProperty(obj, name, desc)) {\n  // success\n} else {\n  // failure\n}\n</code></pre>\n\n<p>Other methods that return such a boolean success status are <code>Reflect.set</code> (to update a property), <code>Reflect.deleteProperty</code> (to delete a property), <code>Reflect.preventExtensions</code> (to make an object non-extensible) and <code>Reflect.setPrototypeOf</code> (to update an object's prototype link).</p>\n\n<p><br><strong>First-class operations</strong></p>\n\n<p>In ES5, the way to detect whether an object <code>obj</code> defines or inherits a certain property name is to write <code>(name in obj)</code>. Similarly, to delete a property, one uses <code>delete obj[name]</code>. While dedicated syntax is nice and short, it also means you must explicitly wrap these operations in functions when you want to pass the operation around as a first-class value.</p>\n\n<p>With <code>Reflect</code>, these operations are readily defined as first-class functions:<br>\n<code>Reflect.has(obj, name)</code> is the functional equivalent of <code>(name in obj)</code> and <code>Reflect.deleteProperty(obj, name)</code> is a function that does the same as <code>delete obj[name].</code></p>\n\n<p><br><strong>More reliable function application</strong></p>\n\n<p>In ES5, when one wants to call a function <code>f</code> with a variable number of arguments packed as an array <code>args</code> and binding the <code>this</code> value to <code>obj</code>, one can write:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>f.apply(obj, args)\n</code></pre>\n\n<p>However, <code>f</code> could be an object that intentionally or unintentionally defines its own <code>apply</code> method. When you really want to make sure that the built-in <code>apply</code> function is called, one typically writes:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>Function.prototype.apply.call(f, obj, args)\n</code></pre>\n\n<p>Not only is this verbose, it quickly becomes hard to understand. With <code>Reflect</code>, you can now make a reliable function call in a shorter and easier to understand way:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>Reflect.apply(f, obj, args)\n</code></pre>\n\n<p><br><strong>Variable-argument constructors</strong></p>\n\n<p>Imagine you want to call a constructor function with a variable number of arguments. In ES6, thanks to the new spread syntax, it will be possible to write code like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var obj = new F(...args)\n</code></pre>\n\n<p>In ES5, this is harder to write, because one can only use <code>F.apply</code> or <code>F.call</code> to call a function with a variable number of arguments, but there is no <code>F.construct</code> function to <code>new</code> the function with a variable number of arguments. With <code>Reflect</code>, one can now write, in ES5:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var obj = Reflect.construct(F, args)\n</code></pre>\n\n<p><br><strong>Default forwarding behavior for Proxy traps</strong></p>\n\n<p>When using <code>Proxy</code> objects to wrap existing objects, it is very common to intercept an operation, do something, and then to \"do the default thing\", which is typically to apply the intercepted operation to the wrapped object. For example, say I want to simply log all property accesses to an object <code>obj</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var loggedObj = new Proxy(obj, {\n  get: function(target, name) {\n    console.log(\"get\", target, name);\n    // now do the default thing\n  }\n});\n</code></pre>\n\n<p>The <code>Reflect</code> and <code>Proxy</code> APIs <em>were designed in tandem</em>, such that for each <code>Proxy</code> trap, there exists a corresponding method on <code>Reflect</code> that \"does the default thing\". Hence, whenever you find yourself wanting to \"do the default\" thing inside a Proxy handler, the correct thing to do is to always call the corresponding method in the <code>Reflect</code> object:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var loggedObj = new Proxy(obj, {\n  get: function(target, name) {\n    console.log(\"get\", target, name);\n    return Reflect.get(target, name);\n  }\n});\n</code></pre>\n\n<p>The return type of the <code>Reflect</code> methods is guaranteed to be compatible with the return type of the <code>Proxy</code> traps.</p>\n\n<p><br><strong>Control the this-binding of accessors</strong></p>\n\n<p>In ES5 it's fairly easy to do a generic property access or property update. For instance:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var name = ... // get property name as a string\nobj[name] // generic property lookup\nobj[name] = value // generic property update\n</code></pre>\n\n<p>The <code>Reflect.get</code> and <code>Reflect.set</code> methods allow you to do the same thing, but additionally accept as a last optional argument a <code>receiver</code> parameter that allows you to explicitly set the <code>this</code>-binding when the property that you get/set is an accessor:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var name = ... // get property name as a string\nReflect.get(obj, name, wrapper) // if obj[name] is an accessor, it gets run with `this === wrapper`\nReflect.set(obj, name, value, wrapper)\n</code></pre>\n\n<p>This is occasionally useful when you're wrapping <code>obj</code> and you want any self-sends within the accessor to get re-routed to your wrapper, e.g. if <code>obj</code> is defined as:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var obj = {\n  get foo() { return this.bar(); },\n  bar: function() { ... }\n}\n</code></pre>\n\n<p>Calling <code>Reflect.get(obj, \"foo\", wrapper)</code> will cause the <code>this.bar()</code> call to get rerouted to <code>wrapper</code>.</p>\n\n<p><br><strong>Avoid legacy <code>__proto__</code></strong></p>\n\n<p>On some browsers, <code>__proto__</code> is defined as a special property that gives access to an object's prototype. ES5 standardized a new method <code>Object.getPrototypeOf(obj)</code> to query the prototype. <code>Reflect.getPrototypeOf(obj)</code> does exactly the same, except that <code>Reflect</code> also defines a corresponding <code>Reflect.setPrototypeOf(obj, newProto)</code> to set the object's prototype. This is the new ES6-compliant way of updating an object's prototype.</p>\n\n<hr> \n\n<p><strong>EDIT:</strong><br>\nSide-note (addressing comments to the Q): There is a short and simple <a href=\"http://stackoverflow.com/a/22483249/588079\">answer on 'Q: ES6 Modules vs. HTML Imports'</a> that explains <code>Realms</code> and <code>Loader</code> objects.</p>\n\n<p>Another explanation is offered by <a href=\"https://gist.github.com/dherman/7568885\">this link</a>:</p>\n\n<blockquote>\n  <p>A realm object abstracts the notion of a distinct global environment,\n  with its own global object, copy of the standard library, and\n  \"intrinsics\" (standard objects that are not bound to global variables,\n  like the initial value of Object.prototype).</p>\n  \n  <p><em>Extensible web</em>: This is the dynamic equivalent of a same-origin\n  <code>&lt;iframe&gt;</code> without DOM.</p>\n</blockquote>\n\n<p>Worth mentioning though: all this is still in draft, this is not a specification etched in stone!</p>\n\n<p>Hope this helps!</p>\n    "},{"t":"Which ES6 features are implemented in Typescript?","l":"http://stackoverflow.com/questions/22260978/which-es6-features-are-implemented-in-typescript","q":"\n\n<p>I was looking for a list of Ecmascript 6 features that are currently implemented in typescript but couldn't find anything up to date online. </p>\n\n<p>Here is the list of features I have come up with so far:</p>\n\n<ol>\n<li>Arrow functions.</li>\n<li>Rest parameter</li>\n<li>Default parameter values</li>\n<li>Classes (is the entire spec implemented?)</li>\n<li>Modules (I think there are some implementation differences though)</li>\n</ol>\n\n<p>Thanks!</p>\n    ","a":"\n<p>I found this link: </p>\n\n<p><a href=\"https://typescript.codeplex.com/wikipage?title=ECMAScript%206%20Status&amp;referringTitle=Roadmap\" rel=\"nofollow\">https://typescript.codeplex.com/wikipage?title=ECMAScript%206%20Status&amp;referringTitle=Roadmap</a></p>\n\n<p>It contains the known alignment between Typescript and ES6. It doesn't appear to be updated since the end of April however. This is probably because of the move to Github. There is no equivalent table however on github. The roadmap page over there is:</p>\n\n<p><a href=\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\" rel=\"nofollow\">https://github.com/Microsoft/TypeScript/wiki/Roadmap</a></p>\n\n<p>Hopefully they can update it with a matrix similar to the one on codeplex.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I found this link:</p>\n\n<p><a href=\"https://github.com/Microsoft/TypeScript/milestones\" rel=\"nofollow\">https://github.com/Microsoft/TypeScript/milestones</a></p>\n\n<p>While not a table of feature mappings you can get an idea of progress towards completion of their road map versions. As of me writing this, version 2.0 is about 40% complete. They say they try to release every 6 to 8 weeks.</p>\n    "},{"t":"Will Javascript ES6 promise support 'done' api?","l":"http://stackoverflow.com/questions/26667598/will-javascript-es6-promise-support-done-api","q":"\n\n<p>For example</p>\n\n<pre><code>p = new Promise(function (resolve, reject) {\n    throw 'err';\n});\n\np.done();\n</code></pre>\n\n<p>In most promise polyfill libs, the done will throw an error, and the current execution will exit.</p>\n\n<p>But if we use <code>p.then()</code>, nothing will happen. The error is swallowed by the promise. If we use <code>p.catch</code>, we have no way to exit current execution. I want to achieve something like:</p>\n\n<pre><code>try {\n    // something\n} catch (err) {\n    if (check(err)) {\n        throw err;\n    }\n}\n</code></pre>\n    ","a":"\n<p>No, AFAIK <code>done</code> is not part of the spec. To mimic its behavior, you should throw the exception on the next tick, outside the purview of the promises chain:</p>\n\n<pre><code>p.catch(function(e) { \n    setTimeout(function() { throw e; });\n});\n</code></pre>\n\n<p>This is essentially how libraries implement <code>done</code>. See excerpt from Q documents:</p>\n\n<blockquote>\n  <p>Much like <code>then</code>, but ... the resulting rejection reason is thrown as an exception <strong>in a future turn of the event loop</strong>.</p>\n</blockquote>\n\n<h3>Implementing <code>done</code> yourself</h3>\n\n<p>If you want to implement the approximate semantics of <code>done</code> as typically understood, then something like:</p>\n\n<pre><code>Promise.prototype.done = function(onFulfilled, onRejected) {\n    this\n        .then(onFulfilled, onRejected)\n        .catch(function(e) {\n            setTimeout(function() { throw e; });\n        })\n    ;\n};\n</code></pre>\n\n<h3>Setting up an error handler</h3>\n\n<p>If you want a chance to handle these errors yourself, you could set up an error handler:</p>\n\n<pre><code>Promise.onError = function(e) {\n    console.log(\"The sky is falling\", e);\n    throw e;\n};\n</code></pre>\n\n<p>Then invoke the handler on the next tick:</p>\n\n<pre><code>Promise.prototype.done = function(onFulfilled, onRejected) {\n    this\n        .then(onFulfilled, onRejected)\n        .catch(function(e) {\n            setTimeout(Promise.onError || function() { throw e; }, 1, e);\n        })\n    ;\n};\n</code></pre>\n    "},{"t":"ECMAScript 6 documentation generators","l":"http://stackoverflow.com/questions/27334309/ecmascript-6-documentation-generators","q":"\n\n<p>I am looking for a documentation generator for EcmaScript 6. I did not find a single one.</p>\n\n<ul>\n<li>JSDoc 3 has no support <a href=\"https://github.com/jsdoc3/jsdoc/issues/555\">https://github.com/jsdoc3/jsdoc/issues/555</a></li>\n<li>Docco nothing found</li>\n<li>SmartComments nothing found but unlikely, too small project</li>\n<li>YuiDoc nothing found</li>\n<li>NaturalDocs nothing found but no focus on JavaScript</li>\n<li>SphinxDoc nothing found</li>\n</ul>\n\n<p>So is there really no documentation generator for ES 6 yet?</p>\n    ","a":"\n<p>There are now a few ES6 documentation generators. I currently recommend <a href=\"https://esdoc.org/\">ESDoc</a> because it is currently the most complete documentation generator.</p>\n\n<p>I will update this as needed.</p>\n\n<h2><a href=\"https://esdoc.org/\">ESDoc</a></h2>\n\n<p>ESDoc supports JSDoc syntax, parses most (or all?) of ES6 and outputs nice <a href=\"https://esdoc.org/esdoc/\">HTML documents</a>. ESDoc is configured using an <code>esdoc.json</code> file and can document whole directories. It integrates <a href=\"http://mochajs.org/\">Mocha</a> for coverage generation. There is also a JSON output.</p>\n\n<h2><a href=\"https://github.com/daliwali/docchi\">Docchi</a></h2>\n\n<p>Docchi just operates on one file and outputs a JSON file that describes the JavaScript code. It does not create any HTML or other rendered docs and states that it does not match many AST nodes. But it uses the same kind of JSON as <a href=\"https://github.com/tj/dox\">Dox</a> so that it should be possible to use the same viewers as for Dox.</p>\n\n<h2><a href=\"http://usejsdoc.org/\">JSDoc</a></h2>\n\n<p>According to a <a href=\"https://github.com/jsdoc3/jsdoc/issues/555\">Github issue</a> JSDoc supports ES6 partially but it misses many parts and rejects to document for example exported items entirely.</p>\n\n<h2><a href=\"https://github.com/affirmix/transcription\">Transcription</a></h2>\n\n<p>Transcription was an attempt to write an ES6 documentation generator but the last commit is from 16 March 2015.</p>\n    "},{"t":"How to use ECMAScript 6 syntax with Visual Studio 2013","l":"http://stackoverflow.com/questions/24034668/how-to-use-ecmascript-6-syntax-with-visual-studio-2013","q":"\n\n<p>I am interested in using ECMAScript 6 features in my web application which I am developing using Visual Studio 2013. Currently the syntax does not seems to be working, How can I configure VS to make it work?</p>\n    ","a":"\n<p>If you have Resharper installed in your VS 2013 - from today on you can<a href=\"http://blog.jetbrains.com/dotnet/2015/04/21/typescript-and-ecmascript-6-in-resharper-9-1/\">switch to using ES6</a>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/lgOnf.png\" alt=\"enter image description here\"></p>\n    "},{"t":"Why will ES6 WeakMap's not be enumerable?","l":"http://stackoverflow.com/questions/20508628/why-will-es6-weakmaps-not-be-enumerable","q":"\n\n<p>Before my re-entry in JavaScript (and related) I've done lots of ActionScript 3 and there they had a Dictionary object that had weak keys just like the upcoming WeakMap; but the AS3 version still was enumerable like a regular generic object while the WeakMap specifically has no <code>.keys()</code> or <code>.values()</code>.</p>\n\n<p>The AS3 version allowed us to rig some really interesting and usefull constructs but I feel the JS version is somewhat limited. Why is that? </p>\n\n<p>If the Flash VM could do it then what is keeping browsers from doing same? I read how it would be 'non-deterministic' but that is sort of the point right?</p>\n    ","a":"\n<p>Finally found the real answer: <a href=\"http://tc39wiki.calculist.org/es6/weak-map/\">http://tc39wiki.calculist.org/es6/weak-map/</a></p>\n\n<blockquote>\n  <p>A key property of Weak Maps is the inability to enumerate their keys. This is necessary to prevent attackers observing the internal behavior of other systems in the environment which share weakly-mapped objects. Should the number or names of items in the collection be discoverable from the API, even if the values aren't, WeakMap instances might create a side channel where one was previously not available. </p>\n</blockquote>\n    "},{"t":"Surely ES6 must have a way to merge two javascript objects together, what is it?","l":"http://stackoverflow.com/questions/13852852/surely-es6-must-have-a-way-to-merge-two-javascript-objects-together-what-is-it","q":"\n\n<p>I'm sick of tired of always having to write code like this:</p>\n\n<pre><code>function shallowExtend(obj1,obj2){\n  var key;\n  for ( key in obj2 ) {\n    if ( obj2.hasOwnProperty(key) === false )  continue;\n    obj1[key] = obj2[key]\n  }\n}\n</code></pre>\n\n<p>Or if I don't want to write the code myself, implement a library that does it already. Surely ES6 is coming to the rescue on this will provide us with something like a <code>Object.prototype.extend(obj2...)</code> or <code>Object.extend(obj1,obj2...)</code></p>\n\n<p>So does ES6 provide such functionality? If not already there, then is such functionality planned? If not planned, then why not?</p>\n    ","a":"\n<p>The addition of <code>Object.mixin</code> is currently being discussed to take care of the behavior you are asking for. <a href=\"https://mail.mozilla.org/pipermail/es-discuss/2012-December/027037.html\">https://mail.mozilla.org/pipermail/es-discuss/2012-December/027037.html</a></p>\n\n<p>Although it is not in the ES6 draft yet, it seems like there is a lot of support for it, so I think it will show up in the drafts soon.</p>\n    "},{"t":"What are ECMAScript 6 WeakMaps?","l":"http://stackoverflow.com/questions/6774185/what-are-ecmascript-6-weakmaps","q":"\n\n<p>After reading this description: <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps\">http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps</a></p>\n\n<p>I'm trying to get a hang of it, but I do not get the overall picture. What is it all about? It seems to be supported in Firefox 6: <a href=\"http://kangax.github.com/es5-compat-table/non-standard/\">http://kangax.github.com/es5-compat-table/non-standard/</a></p>\n    ","a":"\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></p>\n\n<p>WeakMaps basically allow you to have a HashTable with a key that isn't a String.</p>\n\n<p>So you can set the key to be, i.e. <code>[1]</code> and then can say <code>Map.get([1])</code></p>\n\n<p><strong>Example from the MDN:</strong></p>\n\n<pre><code>var wm1 = new WeakMap(),\n    wm2 = new WeakMap();\nvar o1 = {},\n    o2 = function(){},\n    o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o3, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because there is no value for o2 on wm2\nwm2.get(o3); // undefined, because that is the set value\n\nwm1.has(o2); // true\nwm2.has(o2); // false\nwm2.has(o3); // true (even if the value itself is 'undefined')\n\nwm1.has(o1);   // true\nwm1.delete(o1);\nwm1.has(o1);   // false\n</code></pre>\n\n<p>The reason for its existance is:</p>\n\n<blockquote>\n  <p>in order to fix a memory leak present in many uses of weak-key tables.</p>\n</blockquote>\n\n<p>Apparently emulating weakmaps causes memory leaks. I don't know the details of those memory leaks.</p>\n    "},{"t":"What is the difference between a let statement and an equivalent with statement?","l":"http://stackoverflow.com/questions/6484655/what-is-the-difference-between-a-let-statement-and-an-equivalent-with-statement","q":"\n\n<p>Is there any difference between using an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"nofollow\">ECMAScript 6 <code>let</code> statement</a> and  using a <code>with</code> statement with an equivalent object literal?</p>\n\n<h3>using <code>let</code> statement</h3>\n\n<pre><code>var x = 10;\nlet (x = x * 10,\n     y = x + 5) {\n    console.log(\"x is \" + x + \", y is \" + y);\n}\n</code></pre>\n\n<h3>using <code>with</code> statement</h3>\n\n<pre><code>var x = 10;\nwith ({x: x * 10,\n       y: x + 5}) {\n    console.log(\"x is \" + x + \", y is \" + y);\n    // writes \"x is 100, y is 15\"\n}\n</code></pre>\n    ","a":"\n<p>The best I can come up with is that <code>with</code> will also leak any property of the <code>Object</code> prototype:</p>\n\n<pre><code>with ({x: 10}) {\n    hasOwnProperty = 3;\n    console.log(hasOwnProperty);  // 3\n}\nconsole.log(hasOwnProperty);  // [native code]; this is window.hasOwnProperty\n</code></pre>\n\n<p>Unlikely to be a problem in practice, but still a potential gotcha.</p>\n\n<p>I also suspect that <code>with</code> is slightly slower than lexicals, since it adds another namespace that has to be searched.</p>\n\n<p>Honestly, I'd just avoid both constructs; <code>with</code>-style implicit property access doesn't sit well with me, and if I really need a tight scope like that, a bare block with <code>let</code> expressions inside reads less awkwardly than a <code>let</code> block.</p>\n    "},{"t":"Writing the most basic Unit test in Angular 2?","l":"http://stackoverflow.com/questions/30811375/writing-the-most-basic-unit-test-in-angular-2","q":"\n\n<p><strong>Problem:</strong> As soon as I import <a href=\"https://angular.io/\">Angular 2</a> into a file none of my tests execute.</p>\n\n<p><strong>Question:</strong> How can I set up my <a href=\"http://karma-runner.github.io/0.12/index.html\">karma</a> config to support angular two so my test pass properly?</p>\n\n<p><strong>OR</strong>\n<strong>Question:</strong> How can I set up any testing framework with angular2 written in es6?</p>\n\n<p><a href=\"https://github.com/matthewharwood/Hit-the-gym/tree/angular-2\">Git Repo (make sure you're on branch <strong>angular-2</strong></a></p>\n\n<p><strong>Karma:</strong></p>\n\n<pre><code>// Karma configuration\n// Generated on Mon Jun 01 2015 14:16:41 GMT-0700 (PDT)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jspm', 'jasmine'],\n\n\n    // list of files / patterns to load in the browser\n     jspm: {\n        loadFiles: [\n            'client/app/**/*.js'\n        ]\n    },\n\n\n    // list of files to exclude\n\n    plugins:[\n            'karma-jasmine',\n            'karma-coverage',\n            'karma-jspm',\n            'karma-chrome-launcher'\n        ],\n\n\n    // list of files to exclude\n    exclude: [\n    ],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: true\n  });\n};\n</code></pre>\n\n<p><strong>JS:</strong></p>\n\n<pre><code>\"use strict\";\nimport {ComponentAnnotation as Component, ViewAnnotation as View} from 'angular2/angular2';\nimport List from './list/list';\n\n//@Component({selector: 'my-app'})\n//@View({template: `&lt;h1&gt;{{title}}&lt;/h1&gt;`})\nclass Todo{\n    constructor(){\n        this.title = 'Gym';\n        this.list = [new List()];\n\n    }\n\n    setTitle(newTitle){\n        this.title = newTitle;\n    }\n    addListItem(){\n        this.list.push(new List());\n    }\n    removeListItem(){\n        this.list.pop();\n    }\n\n}\nexport default Todo;\n</code></pre>\n\n<p><strong>Todo.spec.js:</strong></p>\n\n<pre><code>import Todo from './todo';\ndescribe('Todo list:', function(){\n    var todo;\n    beforeEach(function(){\n        todo = new Todo();\n    });\n\n    it('expect Todo to be present', function(){\n        expect(todo).not.toBe(null);\n    });\n\n    it('expect Todo constructor to accept a title', function(){\n         expect(todo.title).toEqual('Gym');\n    });\n\n    it('expect Todo List property to be Present', function(){\n        expect(todo.list).not.toBe(null);\n    })\n\n    it('expect Todo List property to accept a title:empty', function(){\n\n         expect(todo.list[0].title).toEqual('empty');\n    });\n\n    it('expect Todo Title property to accept a title change', function(){\n         todo.setTitle('Work');\n         expect(todo.title).toEqual('Work');\n    });\n\n    it('expect Todo List property to have an add function', function(){\n         todo.addListItem();\n         expect(todo.list.length).toEqual(2);\n    });\n\n    it('expect Todo to have a remove function', function(){\n         todo.removeListItem();\n         expect(todo.list.length).toEqual(0);\n    })\n\n});\n</code></pre>\n\n<p><strong>Expected errors:</strong></p>\n\n<pre><code>$ karma start\nINFO [karma]: Karma v0.12.36 server started at http://localhost:9876/\nINFO [launcher]: Starting browser Chrome\nWARN [web-server]: 404: /favicon.ico\nINFO [Chrome 43.0.2357 (Mac OS X 10.10.3)]: Connected on socket 31YT5XsHM29BDG8sYXSq with id 13157663\nChrome 43.0.2357 (Mac OS X 10.10.3): Executed 0 of 0 ERROR (0.002 secs / 0 secs)\n</code></pre>\n\n<p><strong>If I remove angular import for Todo.js</strong></p>\n\n<pre><code>$ karma start\nINFO [karma]: Karma v0.12.36 server started at http://localhost:9876/\nINFO [launcher]: Starting browser Chrome\nWARN [web-server]: 404: /favicon.ico\nINFO [Chrome 43.0.2357 (Mac OS X 10.10.3)]: Connected on socket 7QKCB-7aTRwNsOGfYjmG with id 71239348\nChrome 43.0.2357 (Mac OS X 10.10.3): Executed 7 of 7 SUCCESS (0.008 secs / 0.005 secs)\n</code></pre>\n\n<p><strong>UPDATE FROM GITTER:</strong> </p>\n\n<blockquote>\n  <p>@matthewharwood try loading the bundled ng2 file into your jspm Loadfiles section. with the karma-jspm plugin you can specify custom paths, so you can override the angular/angular path to point to that single bundled file. it made our tests run a lot easier. also I had to include the karma babel preprocessor and run my code thru that.</p>\n</blockquote>\n\n<p>Unfortunatly I'm unable to get loadfiles working properly :c</p>\n    ","a":"\n<p>After opening the debug page you could see that angular was telling you that it was missing the <code>reflect-metadata</code> package. So I added a manual import statement, for it in <code>app/todo/todo.js</code> which solved the issue:</p>\n\n<pre><code>import Reflect from 'reflect-metadata'\nimport {ComponentAnnotation as Component, ViewAnnotation as View} from 'angular2/angular2';\nimport List from './list/list';\n</code></pre>\n\n<p>My output is now:</p>\n\n<pre><code>node_modules/.bin/karma start --single-run\nINFO [karma]: Karma v0.12.36 server started at http://localhost:9876/\nINFO [launcher]: Starting browser Chrome\nWARN [web-server]: 404: /favicon.ico\nINFO [Chrome 43.0.2357 (Mac OS X 10.10.3)]: Connected on socket cGnqva8p5bf-j7L2EVzI with id 94803307\nChrome 43.0.2357 (Mac OS X 10.10.3): Executed 7 of 7 SUCCESS (0.005 secs / 0.004 secs)\n</code></pre>\n    "},{"t":"Javascript ES6 cross-browser detection","l":"http://stackoverflow.com/questions/29046635/javascript-es6-cross-browser-detection","q":"\n\n<p>How can I find out the browser's Javascript engine version and support to ECMAScript 6?</p>\n\n<p>I'm using <code>navigator.appVersion</code> just to know the browser's version, but not the engine's version.</p>\n    ","a":"\n<h2>Feature detection</h2>\n\n<p>I suggest you to use <strong><em>feature detection</em></strong> instead of detecting the browser's engine with heuristic methods. To do this you can simply <strong>wrap some code inside a <code>try {..} catch (e) {...}</code> statement, or use some <code>if (...)</code> statements</strong>.</p>\n\n<p>For example:</p>\n\n<pre><code>function check() {\n    if (typeof SpecialObject == \"undefined\") return false;\n    try { specialFunction(); }\n    catch (e) { return false; }\n\n    return true;\n}\n\nif (check()) {\n    // Use SpecialObject and specialFunction\n} else {\n    // You cannot use them :(\n}\n</code></pre>\n\n<h3>Why is feature detection better than browser/engine detection?</h3>\n\n<p>There are multiple reasons that make, in most of the cases, feature detection the best option:</p>\n\n<ul>\n<li><p>You don't have to rely on browser's version, engine or specifics, nor detect them using heuristic methods which are hard and pretty crafty to implement.</p></li>\n<li><p>You will not fall into errors regarding browser/engine specifications detection.</p></li>\n<li><p>You don't have to worry about browser-specific features: for example <a href=\"http://en.wikipedia.org/wiki/WebKit\" rel=\"nofollow\">WebKit</a> browsers have different specifications than other ones.</p></li>\n<li><p>You can be sure that, once a feature is detected, you'll be able to use it.</p></li>\n</ul>\n\n<p>These are the main reasons that IMHO make feature detection the best approach.</p>\n\n<h2>Feature detection + fallback</h2>\n\n<p>When using <strong><em>feature detection</em></strong>, a pretty smart way to work when you aren't sure which features you can/cannot use consists in <strong>several feature detections and consequent <em>fallbacks</em> to more basic methods</strong> (or even creation of these methods from scratch) in case the features you want to use are not supported.</p>\n\n<p>A simple example of <em>feature detection with fallback</em> may be applied to the <code>window.requestAnimationFrame</code> feature, which is not supported by all the browsers, and has several different prefixes depending on the browser you're working on. In this case, you can easily detect and <em>fallback</em> like this:</p>\n\n<pre><code>requestAnimationFrame = \n   window.requestAnimationFrame       // Standard name\n|| window.webkitRequestAnimationFrame // Fallback to -webkit (old versions of Chrome or Safari)\n|| window.mozRequestAnimationFrame    // Fallback to -moz (Mozilla Firefox)\n|| false;                             // Feature not supported :(\n\n// Same goes for cancelAnimationFrame\ncancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || false;\n\nif (!requestAnimationFrame) {\n    // Not supported? Build it by yourself!\n    requestAnimationFrame = function(callback) {\n        return setTimeout(callback, 0);\n    }\n\n    // No requestAnim. means no cancelAnim. Built that too.\n    cancelAnimationFrame = function(id) {\n        clearTimeout(id);\n    }\n}\n\n// Now you can use requestAnimationFrame \n// No matter which browser you're running\nvar animationID = requestAnimationFrame(myBeautifulFunction);\n</code></pre>\n\n<h2>ECMAScript 6 (Harmony) features detection</h2>\n\n<p>Now, coming to the <strong>real problem</strong>: if you want to detect the support to ES6, you'll not be able to behave like I said above, because <strong>a relevant range of ES6 features is based on new syntaxes and private words, and will throw a <code>SyntaxError</code> if used in ES5</strong>, which means that <strong><em>writing a script which contains both ES5 and ES6 is impossible!</em></strong> </p>\n\n<p>Here is an example to demonstrate this issue; the below snippet won't work, and it will be blocked before execution because contains illegal syntax.</p>\n\n<pre><code>function check() {\n    \"use strict\";\n\n    try { eval(\"var foo = (x)=&gt;x+1\"); }\n    catch (e) { return false; }\n    return true;\n}\n\nif (check()) {\n    var bar = (arg) =&gt; { return arg; }\n    // THIS LINE will always throw a SyntaxError in ES5\n    // Even before checking for ES6\n    // Because contains illegal syntax\n} else {\n    var bar = function(arg) { return arg; }\n}\n</code></pre>\n\n<p>Now, since that you cannot both check and execute ES6 conditionally in the same script, <strong>you'll have to write two different scripts</strong>: one which only uses ES5, and another one which includes ES6 features. With two different scripts you'll be able to <strong>import the ES6 one only if it is supported</strong>, and without causing <code>SyntaxErrors</code> to be thrown.</p>\n\n<p>Here's an example:</p>\n\n<ul>\n<li><p>Your <code>es5script.js</code> where you'll check for ES6:</p>\n\n<pre><code>if (check()) {\n    // ES6 supported, execute the ES6 script\n    var s = document.createElement('script');\n    s.src = \"es6script.js\";\n    document.head.appendChild(s);\n} else {\n    // No ES6 :( use ES5 instead\n}\n</code></pre></li>\n<li><p>Your <code>es6script.js</code> where you'll execute the ES6 code:</p>\n\n<pre><code>// Just for example\n\"use strict\";\ncool_function = (cool_stuff) =&gt; { /* make some cool stuff */ };\n</code></pre></li>\n</ul>\n\n<h3>ES6 detection and conditional execution example</h3>\n\n<p>Now let's make a more relatable example, and let's say you want to use these features in your ES6 script:</p>\n\n<ul>\n<li>The new <code>Symbol</code> objects</li>\n<li>Classes built with the <code>class</code> keyword</li>\n<li>Arrow (<code>(...)=&gt;{...}</code>) functions</li>\n</ul>\n\n<p><strong>NOTE:</strong> <strong><em>feature detection</em> of newly introduced syntaxes</strong> (like arrow functions) <strong>can only be done using the <code>eval()</code> function</strong> or other equivalents (e.g. <code>Function()</code>), because writing invalid syntax will stop the script before its execution. This is also the reason why you cannot use <code>if</code> statements to detect classes and arrow functions: these features are regarding keywords and syntax, so an <code>eval(...)</code> wrapped inside a <code>try {...} catch (e) {...}</code> block will work fine.</p>\n\n<p>So, coming to the real code:</p>\n\n<ul>\n<li><p>HTML Markup:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"es5script.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n<li><p>Code in your <code>es5script.js</code> script:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function check() {\n    \"use strict\";\n\n    if (typeof Symbol == \"undefined\") return false;\n    try {\n        eval(\"class Foo {}\");\n        eval(\"var bar = (x) =&gt; x+1\");\n    } catch (e) { return false; }\n\n    return true;\n}\n\nif (check()) {\n    // The engine supports ES6 features you want to use\n    var s = document.createElement('script');\n    s.src = \"es6script.js\";\n    document.head.appendChild(s);\n} else {\n    // The engine doesn't support those ES6 features\n    // Use the boring ES5 :(\n}\n</code></pre></li>\n<li><p>Code in your <code>es6script.js</code>:</p>\n\n<pre><code>// Just for example...\n\"use strict\";\n\nclass Car { // yay!\n   constructor(speed) {\n       this.speed = speed;\n   }\n}\n\nvar foo = Symbol('foo'); // wohoo!\nvar bar = new Car(320);  // blaze it!\nvar baz = (name) =&gt; { alert('Hello ' + name + '!'); }; // so cool!\n</code></pre></li>\n</ul>\n\n<h2>Browser/engine detection</h2>\n\n<p>Like I said above, browser and engine detection are not the best practices when programming some JavaScript script. I'm gonna give you some background on this topic, just not to leave my words as a \"random personal opinion\".</p>\n\n<p>Quoting from the MDN Documentation [<a href=\"https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\" rel=\"nofollow\">link</a>]:</p>\n\n<blockquote>\n  <p>When considering using the user agent string to detect which browser is being used, your first step is to try to avoid it if possible. Start by trying to identify why you want to do it.</p>\n  \n  <p>[...] <strong>Are you trying to check for the existence of a specific feature?</strong>\n  Your site needs to use a specific Web feature that some browsers don't yet support, and you want to send those users to an older Web site with fewer features but that you know will work. This is the worst reason to use user agent detection, because odds are eventually all the other browsers will catch up. You should do your best to avoid using user agent sniffing in this scenario, and <strong>do feature detection instead</strong>.</p>\n</blockquote>\n\n<p>Also, you're saying you use <code>navigator.appVersion</code>, but consider using another approach, because that one, together with many other navigator properties, is <em>deprecated</em>, and doesn't always behave like you think.</p>\n\n<p>So, quoting from the MDN Documentation [<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion\" rel=\"nofollow\">link</a>] again:</p>\n\n<blockquote>\n  <p><strong>Deprecated</strong>: this feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time.</p>\n  \n  <p><strong>Note:</strong> Do not rely on this property to return the correct browser version. In Gecko-based browsers (like Firefox) and WebKit-based browsers (like Chrome and Safari) the returned value starts with \"5.0\" followed by platform information. In Opera 10 and newer the returned version does not match the actual browser version, either.</p>\n</blockquote>\n    "},{"t":"How do I write an arrow function in ES6 recursively?","l":"http://stackoverflow.com/questions/25228394/how-do-i-write-an-arrow-function-in-es6-recursively","q":"\n\n<p>Arrow functions in ES6 do not have an <code>arguments</code> property and therefore <code>arguments.callee</code> will not work and would anyway not work in strict mode even if just an anonymous function was being used.</p>\n\n<p>Arrow functions cannot be named, so the named functional expression trick can not be used.</p>\n\n<p>So... How does one write a recursive arrow function? That is an arrow function that recursively calls itself based on certain conditions and so on of-course?</p>\n    ","a":"\n<p>Writing a recursive function without naming it is a problem that is as old as computer science itself (even older, actually, since λ-calculus predates computer science), since in λ-calculus <em>all</em> functions are anonymous, and yet you still need recursion.</p>\n\n<p>The solution is to use a fixpoint combinator, usually the Y combinator. This looks something like this:</p>\n\n<pre><code>(y =&gt; \n  y(\n    givenFact =&gt; \n      n =&gt; \n        n &lt; 2 ? 1 : n * givenFact(n-1)\n  )(5)\n)(le =&gt; \n  (f =&gt; \n    f(f)\n  )(f =&gt; \n    le(x =&gt; (f(f))(x))\n  )\n);\n</code></pre>\n\n<p>This will compute the factorial of <code>5</code> recursively.</p>\n\n<p>Note: the code is heavily based on this: <a href=\"http://kestas.kuliukas.com/YCombinatorExplained/\" rel=\"nofollow\">The Y Combinator explained with JavaScript</a>. All credit should go to the original author. I mostly just \"harmonized\" (is that what you call refactoring old code with new features from ES/Harmony?) it.</p>\n    "},{"t":"Map vs Object in JavaScript","l":"http://stackoverflow.com/questions/18541940/map-vs-object-in-javascript","q":"\n\n<p>So I just discovered chromestatus.com and, after losing several hours of my day, found this entry: <a href=\"http://www.chromestatus.com/features/4818609708728320\">http://www.chromestatus.com/features/4818609708728320</a> \"Map: Map objects are simple key/value maps.\"</p>\n\n<p>That confused me. Regular JavaScript objects are dictionaries, so how is a map different from a dictionary? Conceptually, they're identical (according to  <a href=\"http://stackoverflow.com/questions/2884068/what-is-the-difference-between-a-map-and-a-dictionary\">What is the difference between a Map and a Dictionary?</a>)</p>\n\n<p>The documentation chromestatus references doesn't help either:</p>\n\n<blockquote>\n  <p>Map objects are collections of key/value pairs where both the keys and values may be arbitrary ECMAScript language values. A distinct key value may only occur in one key/value pair within the Map’s collection. Distinct key values as discriminated using the a comparision algorithm that is selected when the Map is created.</p>\n  \n  <p>A Map object can iterate its elements in insertion order. Map object must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structures used in this Map objects specification is only intended to describe the required observable semantics of Map objects. It is not intended to be a viable implementation model.</p>\n</blockquote>\n\n<p>…still sounds like an object to me, so clearly I've missed something.</p>\n\n<p>Why is JavaScript gaining a (well-supported) Map object? What does it do?</p>\n    ","a":"\n<p>According to mozilla:</p>\n\n<blockquote>\n  <p>A Map object can iterate its elements in insertion order - a for..of loop will return an array of [key, value] for each iteration.</p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>Objects are similar to Maps in that both let you set keys to values,\n  retrieve those values, delete keys, and detect whether something is\n  stored at a key. Because of this, Objects have been used as Maps\n  historically; however, there are important differences between Objects\n  and Maps that make using a Map better.</p>\n  \n  <p>An Object has a prototype, so there are default keys in the map.\n  However, this can be bypassed using map = Object.create(null). The\n  keys of an Object are Strings, where they can be any value for a Map.\n  You can get the size of a Map easily while you have to manually keep\n  track of size for an Object.</p>\n  \n  <p>Use maps over objects when keys are unknown until run time, and when\n  all keys are the same type and all values are the same type.</p>\n  \n  <p>Use objects when there is logic that operates on individual elements.</p>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map</a></p>\n\n<p>The iterability-in-order is a feature that has long been wanted by developers, in part because it ensures the same performance in all browsers. So to me that's a big one.</p>\n\n<p>The <code>myMap.has(key)</code> method will be especially handy, and also the <code>myMap.size</code> property.</p>\n    "},{"t":"How will Javascript Map object improve our coding?","l":"http://stackoverflow.com/questions/30453183/how-will-javascript-map-object-improve-our-coding","q":"\n\n<p>If we can make key/value pairs with javascript Objects, then what is suppose to be the use for the ES6 new Map() object?</p>\n\n<p>When should I use one and when the other? Is Map limited to values or can it contain functions as well?</p>\n    ","a":"\n<ol>\n<li>Anything can be used as a key in a map.</li>\n<li>Maps are ordered, and that allows for iteration.</li>\n</ol>\n\n<p>Combining 1 and 2, when you iterate over a map, you'll get a useful array of key-value pairs!</p>\n\n<p>Check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>map.prototype.forEach()</code> documentation</a>.</p>\n\n<p>Source: Another good question/answer <a href=\"http://stackoverflow.com/questions/18541940/map-vs-object-in-javascript\">exchange</a>. Worth marking this one as a duplicate.</p>\n\n<p><strong><em>Update:</em></strong>\nAdding to this answer to address the question directly:<br>\nYou should use a map whenever you need to associate things together or preserve insertion order (common data structures need this). </p>\n\n<p>You can use an object when you don't need to do this, but they just do different things.</p>\n\n<p><strong><em>Update 2:</em></strong>\nOP asked if functions are okay too. Yes, because values can be functions too! Check it out:  </p>\n\n<pre><code>let x = new Map();\nlet y = () =&gt; {\n  console.log('derp');\n}\nx.set(y, \"HI\");\nconsole.log(x.get(y)); //will log \"HI\"\n</code></pre>\n\n<p>For more info, check out the source of this quote, in a great chapter of <a href=\"http://eloquentjavascript.net/01_values.html\">Eloquent JavaScript</a>:<br>\n<em>\"Every value has a type that determines its role. There are six basic types of values in JavaScript: numbers, strings, Booleans, objects, functions, and undefined values.\"</em>  </p>\n\n<p>Also, the main differences between Map and Object, from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">MDN</a>, under the header \"<strong>Objects and Maps Compared</strong>\":</p>\n\n<ol>\n<li>An Object has a prototype, so there are default keys in the map. However, this can be bypassed using map = Object.create(null).  </li>\n<li>The keys of an Object are Strings, where they can be any value for a Map.  </li>\n<li>You can get the size of a Map easily while you have to manually keep track of size for an Object.  </li>\n</ol>\n\n<p>Again, the keys can be <em>any value</em>!</p>\n    "},{"t":"What purpose of asterisk (*) in ES6 generator functions","l":"http://stackoverflow.com/questions/27778105/what-purpose-of-asterisk-in-es6-generator-functions","q":"\n\n<p>Can someone explain to me: why generator function in ES6 is marked by asterisk symbol? </p>\n\n<p>For example, instead of:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function *someGenerator() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n</code></pre>\n\n<p>we could write:   </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function someGenerator() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n</code></pre>\n\n<p>or even:\n</p>\n\n<pre><code>var someGenerator = () =&gt; {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nvar someObject = {\n\n    someGenerator() {\n        yield 1;\n        yield 2;\n        yield 3;\n    }\n}            \n</code></pre>\n\n<p>JS compiler can detect that <code>someGenerator</code> contains <code>yield</code> operator at parse time and make generator from this function.</p>\n\n<p>Why detection of <code>yield</code> existence is not enough?</p>\n    ","a":"\n<p>The three reasons were:</p>\n\n<ol>\n<li><p><em>Readability</em>. A generator is quite different from a function, and  the difference should be immediately visible (that is, without examining the whole implementation in search for a yield).</p></li>\n<li><p><em>Generality</em>. It should be naturally possible to write generators that do not yield, and only return directly. Moreover, commenting out part of the body (e.g. for debugging) should not silently change whether something is a generator.</p></li>\n<li><p><em>Compatibility</em>. Only strict mode reserved 'yield' as a keyword, but it was made a goal for ES6 that all new features are also available in sloppy mode (an unfortunate decision IMHO, but nevertheless). Moreover, even in strict mode there are many parsing subtleties around 'yield'; for example, consider default arguments:</p>\n\n<pre><code>function* g(a = yield(2)) { 'use strict' }\n</code></pre>\n\n<p>Without the <code>*</code>, the parser could only decide how to parse the yield after it has seen the body of the function. That is, you would need infinite look-ahead, or back-tracking, or other hacky techniques to deal with this.</p></li>\n</ol>\n\n<p>I should note that (1) and (2) are already reason enough.</p>\n\n<p>(Full disclosure: I am a member of the EcmaScript committee.)</p>\n    "},{"t":"Do `let` statements create properties on the global object?","l":"http://stackoverflow.com/questions/28776079/do-let-statements-create-properties-on-the-global-object","q":"\n\n<p>In JavaScript - <code>var</code> declarations create properties on the global object:</p>\n\n<pre><code>var x = 15;\nconsole.log(window.x); // logs 15 in browser\nconsole.log(global.x); // logs 15 in io.js or NodeJS\n</code></pre>\n\n<p>ES6 introduces lexical scoping with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> declarations that have block scope.</p>\n\n<pre><code>let x = 15;\n{\n   let x = 14;\n}\nconsole.log(x); // logs 15;\n</code></pre>\n\n<p>However, do these declarations create properties on the global object?</p>\n\n<pre><code>let x = 15;\n// what is this supposed to log in the browser according to ES6?\nconsole.log(window.x); // 15 in Firefox\nconsole.log(global.x); // undefined in io.js / node.js with flag\n</code></pre>\n    ","a":"\n<blockquote>\n  <p>Do <code>let</code> statements create properties on the global object?</p>\n</blockquote>\n\n<p>According to the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-global-environment-records\">spec</a>, no:</p>\n\n<blockquote>\n  <p>A global environment record is logically a single record but it is specified as a composite encapsulating an <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-environment-records\">object environment record</a> and a <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records\">declarative environment record</a>. The <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-environment-records\">object environment record</a> has as its base object the global object of the associated <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-global-object\">Realm</a>. This global object is the value returned by the global environment record’s <code>GetThisBinding</code> concrete method. The object environment record component of a global environment record contains the bindings for all built-in globals (<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-global-object\">clause 18</a>) and all bindings introduced by a <em>FunctionDeclaration</em>, <em>GeneratorDeclaration</em>, or <em>VariableStatement</em> contained in global code. <strong>The bindings for all other ECMAScript declarations in global code are contained in the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records\">declarative environment record</a> component of the global environment record.</strong></p>\n</blockquote>\n\n<p>Some more explanation:</p>\n\n<ul>\n<li><p>A <strong>declarative</strong> environment record stores the bindings in an internal data structure. It's impossible to get a hold of that data structure in any way  (think about function scope).</p></li>\n<li><p>An <strong>object</strong> environment record uses an actual JS object as data structure. Every property of the object becomes a binding and vice versa. The global environment has an object environment object whose \"binding object\" is the global object. Another example is <code>with</code>.</p></li>\n</ul>\n\n<p>Now, as the cited part states, only <em>FunctionDeclaration</em>s, <em>GeneratorDeclaration</em>s, and <em>VariableStatement</em>s create bindings in the global environment's <strong>object</strong> environment record. I.e. only this bindings become properties of the global object.</p>\n\n<p>All other declarations (e.g. <code>const</code> and <code>let</code>) are stored in the global environment's <strong>declarative</strong> environment record, which is not based on the global object.</p>\n    "},{"t":"How to Pipe Response to a File in Co-Request module & NodeJs?","l":"http://stackoverflow.com/questions/29586071/how-to-pipe-response-to-a-file-in-co-request-module-nodejs","q":"\n\n<p>I am using <a href=\"https://github.com/leukhin/co-request/\">Co-Request</a>  to read Zip file from http url, and i have below code to read from server..</p>\n\n<p>The code works already. But I dont know how to write the response Zip to a file. </p>\n\n<pre><code>var co = require( \"co\" );\nvar request = require( \"co-request\" );\n        var options = {\n                        url: \"http://www.example.com/sample.zip\",\n                        headers: {\n                            'Token': Appconfig.Affiliate_Token,\n                            'Affiliate-Id' : Appconfig.Affiliate_Id\n                        }\n                    }\n                    console.log( \"Downloading : zip file\"  );\n                    var j = yield request( options );\n</code></pre>\n\n<p>Co-Request is actually wrapper for Request and I have found below code to pipe file to stream. But not sure how to write the same using Co-Request with yield.</p>\n\n<pre><code>request.get('http://example.com/img.png').pipe(request.put('http://example.com/img.png'))\n</code></pre>\n\n<p>Please help how to write response zip to a file using yield and co-request</p>\n    ","a":"\n<p>I think request cant pipe after data has been emitted from the response</p>\n\n<p>use request instead of co-request, write a promise to achieve this </p>\n\n<pre><code>var co = require('co');\nvar request = require('request');\nvar fs = require('fs');\n\nvar url = 'http://google.com/doodle.png';\n\nvar requestPipToFile = function(url, filepath) {\n    return new Promise(function(resolve, reject) {\n        try {\n            var stream = fs.createWriteStream(filepath);\n            stream.on('finish', function() {\n                console.log(\"pipe finish\");\n                return resolve(true);\n            });\n            return request(url).pipe(stream);\n        } catch (e) {\n            return reject(e);\n        }\n    });\n};\n\nco(function*() {\n    var value = (yield requestPipToFile(url, './outfile'));\n    return value;\n}).then(function(value) {\n    return console.log(value);\n}).catch(function(err) {\n    return console.error(err);\n});\n</code></pre>\n    "},{"t":"React ref and setState not working with ES6","l":"http://stackoverflow.com/questions/29577977/react-ref-and-setstate-not-working-with-es6","q":"\n\n<p>I am writing a simple component in ES6 (with BabelJS), and functions this.setState and React.refs.something are not working. Do you know why? Here is the code:</p>\n\n<pre><code>import React from 'react'\n\nclass SomeClass extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {inputContent: 'startValue'}\n  }\n\n  sendContent(e) {\n    console.log('sending input content '+React.findDOMNode(React.refs.someref).value)\n  }\n\n  changeContent(e) {\n    this.setState({inputContent: e.target.value})\n  } \n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h4&gt;The input form is here:&lt;/h4&gt;\n        Title: \n        &lt;input type=\"text\" ref=\"someref\" value={this.inputContent} \n          onChange={this.changeContent} /&gt; \n        &lt;button onClick={this.sendContent}&gt;Submit&lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default SomeClass\n</code></pre>\n\n<p>There are 2 main problems:</p>\n\n<ol>\n<li><p>When changing the value of the input, this.setState doesn't change the state, so the field acts as read-only</p></li>\n<li><p>When sending input console says 'cant read property of someref'</p></li>\n</ol>\n    ","a":"\n\n\n<p><code>this.changeContent</code> needs to be bound to the component instance via <code>this.changeContent.bind(this)</code> before being passed as the <code>onChange</code> prop, otherwise the <code>this</code> variable in the body of the function will not refer to the component instance but to <code>window</code>. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function::bind</a>.</p>\n\n<p>When using <code>React.createClass</code> instead of ES6 classes, every non-lifecycle method defined on a component is automatically bound to the component instance. See <a href=\"https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding\">Autobinding</a>.</p>\n\n<p>Be aware that binding a function creates a new function. You can either bind it directly in render, which means a new function will be created every time the component renders, or bind it in your constructor, which will only fire once.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>constructor() {\n  this.changeContent = this.changeContent.bind(this);\n}\n</code></pre>\n\n<p>vs</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>render() {\n  return &lt;input onChange={this.changeContent.bind(this)} /&gt;;\n}\n</code></pre>\n\n<hr>\n\n<p>Refs are set on the component instance and not on <code>React.refs</code>: you need to change <code>React.refs.someref</code> to <code>this.refs.someref</code>. You'll also need to bind the <code>sendContent</code> method to the component instance so that <code>this</code> refers to it.</p>\n    "},{"t":"Delegated yield in generator functions","l":"http://stackoverflow.com/questions/17491779/delegated-yield-in-generator-functions","q":"\n\n<p>ECMAScript 6 should be bringing generator functions and iterators. A generator function (which has the <code>function*</code> syntax) returns an iterator. The iterator has a <code>next</code> method which, when repeatedly called, executes the body of the generator function, repeatedly pausing and resuming execution at every <code>yield</code> operator.</p>\n\n<p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3agenerators\">ECMAScript 6 wiki on generators</a> also introduces the \"delegated yield\" <code>yield*</code> operator as follows:</p>\n\n<blockquote>\n  <p>The <code>yield*</code> operator delegates to another generator. This provides a convenient mechanism for composing generators.</p>\n</blockquote>\n\n<p>What does \"delegate to another generator\" mean? How can I use <code>yield*</code> to \"conveniently compose generators\"?</p>\n\n<p>[You can play with generators in Node v0.11.3 with the <code>--harmony-generators</code> flag.]</p>\n    ","a":"\n<p><em>Delegating to another generator</em> means the current generator stops producing values by itself, instead yielding the values produced by another generator until it exhausts it. It then resumes producing its own values, if any.</p>\n\n<p>For instance, if <code>secondGenerator()</code> produces numbers from <code>10</code> to <code>15</code>, and <code>firstGenerator()</code> produces numbers from <code>1</code> to <code>5</code> but delegates to <code>secondGenerator()</code> after producing <code>2</code>, then the values produced by <code>firstGenerator()</code> will be:</p>\n\n<pre><code>1, 2, 10, 11, 12, 13, 14, 15, 3, 4, 5\n</code></pre>\n    "},{"t":"What does @@ (“at at”) mean in ES6 JavaScript?","l":"http://stackoverflow.com/questions/29492333/what-does-at-at-mean-in-es6-javascript","q":"\n\n<p>I've noticed <code>@@</code> used in a <a href=\"https://blog.domenic.me/es6-iterators-generators-and-iterables/\">few</a> <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">pages</a> about new ES6 features, but I don't know what exactly it means (whether it's actually syntax or just some kind of documentation convention). And it's hard to google. Can someone explain it?</p>\n    ","a":"\n<p><code>@@</code> describes what's called a well-known symbol. (Note that it isn't actually valid syntax in JS.) According to the <del>ES6</del> ES2015<sup>1</sup> <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-symbols\" rel=\"nofollow\">specification</a>:</p>\n\n<blockquote>\n  <p>Well-known symbols are built-in Symbol values that are explicitly referenced by algorithms of this specification. They are typically used as the keys of properties whose values serve as extension points of a specification algorithm. Unless otherwise specified, well-known symbols values are shared by all Code Realms (8.2).</p>\n</blockquote>\n\n<p>Code Realms refer to different instances of a JavaScript environment. For example, the Code Realm of the root document would be different to that of JavaScript running in an <code>&lt;iframe&gt;</code>. An example of where it matter what code realm an object comes from is when running <code>instanceof</code> checks on native constructors.</p>\n\n<p>Some of these are exposed directly through the <code>Symbol</code> constructor, for example, <code>@@toPrimitive</code> is exposed as <code>Symbol.toPrimitive</code>. That can be used to override the value produced when attempting to convert an object to a primitive value, for example:</p>\n\n<pre><code>var a = {};\na[Symbol.toPrimitive] = () =&gt; 1;\nconsole.log(+a); // 1\nconsole.log(a.valueOf()); // (the same object)\nconsole.log(a.toString()); // \"[object Object]\"\n</code></pre>\n\n<p>In general, symbols are used to provide unique properties on an object which cannot collide with a random property name, for example:</p>\n\n<pre><code>var a = Symbol();\nvar foo = {};\nfoo[a] = 1;\nfoo[a]; // 1\n</code></pre>\n\n<p>There is no way to access the value except by getting the symbol from somewhere (though you can get all symbols for an object by calling <code>Object.getOwnPropertySymbols</code>, so they cannot be used to implement private properties or methods).</p>\n\n<p><sup><sup>1:</sup> See <a href=\"https://esdiscuss.org/topic/javascript-2015\" rel=\"nofollow\">this es-discuss topic</a> for some discussion about the name change.</sup></p>\n    "},{"t":"Douglas Crockford on Class Free OOP in JavaScript","l":"http://stackoverflow.com/questions/27595749/douglas-crockford-on-class-free-oop-in-javascript","q":"\n\n<p>Douglas Crockford has a really good talk on \"The Better Parts\" of ES6. Among other things, he <a href=\"https://www.youtube.com/watch?v=PSGEjv3Tqo0&amp;t=6m\">encourages a move away from prototypal inheritance in favor of class free OOP</a>.</p>\n\n<p>Here he says he stopped using <code>new</code>, <code>Object.create</code>, and <code>this</code>, but didn't really explain an alternative. Could anyone fill me in on how that might look?</p>\n    ","a":"\n<p>You should watch the whole video, he explains it at <a href=\"https://www.youtube.com/watch?v=PSGEjv3Tqo0#t=1395\" rel=\"nofollow\">later in the video</a>.</p>\n\n<pre><code>function constructor(spec) {\n  let {member} = spec,\n      {other}  = other_constructor(spec),\n      method   = function () {\n        // accesses member, other, method, spec\n      };\n\n  return Object.freeze({\n      method,\n      other\n  });\n}\n</code></pre>\n\n<p>It's the <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript\" rel=\"nofollow\">revealing module pattern</a> returning a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" rel=\"nofollow\">frozen object</a>.</p>\n    "},{"t":"Can es6's module loader also load assets (html/css/…)","l":"http://stackoverflow.com/questions/24923479/can-es6s-module-loader-also-load-assets-html-css","q":"\n\n<p>ES6's modules are based on a flexible loader architecture (although the standard is not final, so ...).</p>\n\n<p>Does this mean ES6's loader, based on system.js, can load <em>all</em> assets?  I.e. CSS, HTML, Images, Text, .. files of any sort?</p>\n\n<p>I ask because I'm starting to use WebComponents &amp; Polymer which have their own HTML import, and implementing them with ES6, which has its own import/loader (system.js).</p>\n    ","a":"\n<p>If you use <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a> then you can load assets by using <a href=\"https://github.com/systemjs/systemjs#plugins\">plugins</a>:</p>\n\n<pre><code>// Will generate a &lt;link&gt; element for my/file.css\nSystem.import('my/file.css!')\n    .then(() =&gt; console.log('CSS file loaded'));\n</code></pre>\n\n<p>Alternatively, you can use an <code>import</code> statement. This will make sure that the CSS file is loaded before the your script executes:</p>\n\n<pre><code>import 'my/file.css!';\n</code></pre>\n\n<p>Finally, you can retrieve the contents of the file using the <a href=\"https://github.com/systemjs/plugin-text\">text plugin</a>:</p>\n\n<pre><code>import cssContent from 'my/file.css!text';\nconsole.log('CSS file contents: ', cssContent);\n</code></pre>\n    "},{"t":"What's the meaning of “=>” in JavaScript?","l":"http://stackoverflow.com/questions/24900875/whats-the-meaning-of-in-javascript","q":"\n\n<p>I know that \"&gt;=\" operator means more than or equal to, but I've seen \"=&gt;\" from a source code. What's the meaning of that operator?</p>\n\n<p>Here's the code:</p>\n\n<pre><code>promiseTargetFile(fpParams, aSkipPrompt, relatedURI).then(aDialogAccepted =&gt; {\n      if (!aDialogAccepted)\n        return;\n\n      saveAsType = fpParams.saveAsType;\n      file = fpParams.file;\n\n      continueSave();\n    }).then(null, Components.utils.reportError);\n  }\n</code></pre>\n    ","a":"\n<p>This is an arrow function; it is part of the ECMAscript 6 specification, but not part of \"normal\" JavaScript in use today.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions\">You can read more in <strong>the Mozilla documentation</strong></a>.</p>\n\n<p>From the docs:</p>\n\n<blockquote>\n  <p>An arrow function expression has a shorter syntax compared to function expressions and lexically binds the this value. Arrow functions are always anonymous.</p>\n</blockquote>\n\n<p>Example (also from the docs):</p>\n\n<pre><code>var a = [\n  \"We're up all night 'til the sun\",\n  \"We're up all night to get some\",\n  \"We're up all night for good fun\",\n  \"We're up all night to get lucky\"\n];\n\nvar a2 = a.map(function(s){ return s.length });\n\nvar a3 = a.map( s =&gt; s.length );\n</code></pre>\n    "},{"t":"Not recommended to write out “use strict” with ES6?","l":"http://stackoverflow.com/questions/31685262/not-recommended-to-write-out-use-strict-with-es6","q":"\n\n<p>I'm not familiar with ECMAScript 6 yet. I've just cloned the React Starter Kit repo, which uses ES6 for application code. I was surprised to see that the linter is <a href=\"https://github.com/kriasoft/react-starter-kit/blob/master/.eslintrc\">configured</a> to forbid occurences of the <code>use strict</code> directive, which I thought was recommended with pre-ES6 Javascript. So what's the point?</p>\n    ","a":"\n<p>ES6 modules are always in strict mode. To quote the relevant part of <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code\">the spec</a>:</p>\n\n<blockquote>\n  <h2>10.2.1 Strict Mode Code</h2>\n  \n  <p>An ECMAScript Script syntactic unit may be processed using either unrestricted or strict mode syntax and semantics. Code is interpreted as strict mode code in the following situations:</p>\n  \n  <ul>\n  <li>Global code is strict mode code if it begins with a Directive Prologue that contains a Use Strict Directive (see 14.1.1).</li>\n  <li><strong>Module code is always strict mode code.</strong></li>\n  <li>All parts of a ClassDeclaration or a ClassExpression are strict mode code.</li>\n  <li>Eval code is strict mode code if it begins with a Directive Prologue that contains a Use Strict Directive or if the call to eval is a direct eval (see 12.3.4.1) that is contained in strict mode code.</li>\n  <li>Function code is strict mode code if the associated FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition, or ArrowFunction is contained in strict mode code or if the code that produces the value of the function’s [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.</li>\n  <li>Function code that is supplied as the arguments to the built-in Function and Generator constructors is strict mode code if the last argument is a String that when processed is a FunctionBody that begins with a Directive Prologue that contains a Use Strict Directive.</li>\n  </ul>\n</blockquote>\n    "},{"t":"How to feature-detect es6 modules","l":"http://stackoverflow.com/questions/27922232/how-to-feature-detect-es6-modules","q":"\n\n<p>I'd like to export a module using the ES6 syntax only if it is supported in the current runtime. The goal is to develop a library that support different module management systems.</p>\n\n<p>As <code>export</code> is a keyword, something like will throw a syntax error :</p>\n\n<pre><code>typeof export\n</code></pre>\n    ","a":"\n<p><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27\" rel=\"nofollow\">Revision 27</a> of the spec had a <code>Reflect.Loader</code> API that could be used for module reflection.</p>\n\n<p>While that isn't direct feature detection for the export keyword in itself, it might have been possible to load a module that uses export keywords from a data-uri and then check whether it throws parse errors or not.</p>\n\n<p>But it has been removed with revision 28, with the following changelog entry:</p>\n\n<blockquote>\n  <p>Removed loader pipeline and Reflect.Loader API (functionality being transferred to separate specification)</p>\n</blockquote>\n\n<hr>\n\n<p>Thus, as far as i can tell, the spec does not seem to provide any way of feature detection at the time of writing.</p>\n\n<p>In the future it might be possible with <code>Reflect.Loader</code> or its replacements.</p>\n\n<p>Edit: The <a href=\"https://whatwg.github.io/loader/#loading-api\" rel=\"nofollow\">loader spec</a> seems to be developed managed by the whatwg, but it's not yet in a state from which we could derive feature detection.</p>\n    "},{"t":"Iterate over set elements","l":"http://stackoverflow.com/questions/16401216/iterate-over-set-elements","q":"\n\n<p>I have turned on the Chrome flag for experimental ECMAscript 6 features, one of which is <code>Set</code>. As I understand, the details of <code>Set</code> are broadly agreed upon by the spec writers.</p>\n\n<p>I create a set <code>a</code> and add the string <code>'Hello'</code></p>\n\n<pre><code>a = Set();\na.add('Hello');\n</code></pre>\n\n<p>but how do I iterate over the elements of <code>a</code>?</p>\n\n<pre><code>for(let i of a) { console.log(i); }\n</code></pre>\n\n<p>gives \"SyntaxError: Illegal <code>let</code> declaration outside extended mode\"</p>\n\n<pre><code>for(var i of a) { console.log(i); }\n</code></pre>\n\n<p>gives \"SyntaxError: Unexpected identifier\"</p>\n\n<pre><code>for(var i in a) { console.log(i); }\n</code></pre>\n\n<p>gives <code>Undefined</code></p>\n\n<p>Is it possible to iterate over of a set in Chrome 26?</p>\n    ","a":"\n<p>The <code>of</code> operator <a href=\"http://kangax.github.io/es5-compat-table/es6/\" rel=\"nofollow\">doesn't appear to be currently supported in Chrome</a>. It seems that only FireFox versions 13 through 18 support it. It also appears that none of the browsers actually support <code>Set</code> although the page does say that some of the tests represent existence and not full functionality or coherence. So it might be that <code>Set</code> is partially implemented in Chrome.</p>\n    "},{"t":"Can I use angular/di.js with an AngulrJS 1.3.0 project?","l":"http://stackoverflow.com/questions/25974730/can-i-use-angular-di-js-with-an-angulrjs-1-3-0-project","q":"\n\n<p>The new dependency injection that Volta spoke about at ng-conf and is contained here: <a href=\"https://github.com/angular/di.js\">https://github.com/angular/di.js</a> is just what I am looking for for my AngularJS 1.3.0 project.</p>\n\n<p>The problem is, it is not clear to me whether or not I can use it. There doesn't seem to be an example of using it for AngularJS v1 in the github project examples.</p>\n\n<p>I came across an example using it in a Backbone project: <a href=\"http://teropa.info/blog/2014/03/18/using-angular-2-0-dependency-injection-in-a-backbone-app.html\">http://teropa.info/blog/2014/03/18/using-angular-2-0-dependency-injection-in-a-backbone-app.html</a> and I found an example of using ES6 in an AngularJS v1 project: <a href=\"https://github.com/mvolkmann/todo-es6/\">https://github.com/mvolkmann/todo-es6/</a>, but I can't find an example using the new DI in an Angular v1 project.</p>\n\n<p>I'm confused. Any pointers?</p>\n    ","a":"\n<p>Maybe don't use di.js but instead transpile similarly styled code into valid angular 1.X syntax (during a build step)</p>\n\n<p>A small example and a possible start:</p>\n\n<pre><code>var falafel = require('falafel');\nvar traceur = require('traceur');\n\nvar src =  \n  '@Inject(MyService,MyOtherService)' +\n  'class Thing{' +\n  '  constructor(service,otherservice){' +\n  '  }' +\n  '}';\n\nsrc = traceur.compile(src, { annotations: true });\n//console.log(src);\n\nfunction tryGetPath(obj, path) {\n  path.split('.').forEach(function(key) {\n    obj = obj &amp;&amp; obj[key];\n  });\n  return obj;\n}\n\nvar output = falafel(src, function(node) {\n  //find `Object.defineProperty for 'annotations'`\n  if (node.type === 'CallExpression' &amp;&amp; tryGetPath(node, 'arguments.1.value') === 'annotations') {\n    var injectable = tryGetPath(node, 'arguments.0.name');\n    var $inject = (tryGetPath(node, 'arguments.2.properties.0.value.body.body.0.argument.elements') || [])\n                       .filter(function(a){return a.callee.name === 'Inject'})  \n                       .reduce(function(p,c){ p.push.apply(p,c.arguments); return p;},[])\n                       .map(function(a){return \"'\"+a.name+\"'\";});\n    node.update(injectable + '.$inject = [' + $inject.toString() + '];');\n  }\n});\n\nconsole.log(output);\n</code></pre>\n\n<p>Perhaps you can even use certain attributes (eg <code>@NgController</code> etc) to register it on your module as a controller.  </p>\n    "},{"t":"What's the difference between ES6 Map and WeakMap?","l":"http://stackoverflow.com/questions/15604168/whats-the-difference-between-es6-map-and-weakmap","q":"\n\n<p>Looking <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Map\">this</a> and <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/WeakMap\">this</a> MDN pages it seems like the only difference between Maps and WeakMaps is a missing \"size\" property for WeakMaps. But is this true? What's the difference between them?</p>\n    ","a":"\n<p>From <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/WeakMap#Why_WeakMap.3F\">the very same page, section \"<em>Why <strong>Weak</strong> Map?</em>\"</a>:</p>\n\n<blockquote>\n  <p>The experienced JavaScript programmer will notice that this API could\n  be implemented in JavaScript with two arrays (one for keys, one for\n  values) shared by the 4 API methods. Such an implementation would have\n  two main inconveniences. The first one is an O(n) search (n being the\n  number of keys in the map). The second one is a memory leak issue.\n  With manually written maps, <em>the array of keys would keep references to\n  key objects, preventing them from being garbage collected. In native\n  WeakMaps, references to key objects are held <strong>\"weakly\"</strong>, which means\n  that they do not prevent garbage collection in case there would be no\n  other reference to the object.</em></p>\n  \n  <p>Because of references being weak, WeakMap keys are not enumerable\n  (i.e. there is no method giving you a list of the keys). If they were,\n  the list would depend on the state of garbage collection, introducing\n  non-determinism.</p>\n</blockquote>\n\n<p>[And that's why they have no <code>size</code> property as well]</p>\n\n<blockquote>\n  <p>If you want to have a list of keys, you should\n  maintain it yourself. There is also an <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3asimple_maps_and_sets\">ECMAScript\n  proposal</a>\n  aiming at introducing simple sets and maps which would not use weak\n  references and would be enumerable.</p>\n</blockquote>\n\n<p>‐ which would be the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Map\">\"normal\" <code>Map</code>s</a>. Not mentioned at MDN, but in the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3asimple_maps_and_sets\">harmony proposal</a>, those also have <code>items</code>, <code>keys</code> and <code>values</code> generator methods and implement the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aiterators\"><code>Iterator</code> interface</a>.</p>\n    "},{"t":"ES6 arrow function lexical this in V8","l":"http://stackoverflow.com/questions/28029523/es6-arrow-function-lexical-this-in-v8","q":"\n\n<p>I have the following ES6 code using a fat arrow function:</p>\n\n<pre><code>var test = {\n  firstname: 'David',\n  fn: function() {\n    return ['one', 'two', 'tree'].map(() =&gt; this.firstname)\n  }\n}\nconsole.log(test.fn())\n</code></pre>\n\n<p>According to how arrow functions are supposed to work I'd expect <code>this</code> to be the <code>test</code> object. <a href=\"http://www.es6fiddle.net/\">ES6Fiddle</a>, Traceur and Firefox produce the expected output which is <code>[\"David\", \"David\", \"David\"]</code>.</p>\n\n<p>When enabling those features in Chrome using <code>chrome://flags/#enable-javascript-harmony</code>, however, I get <code>[undefined, undefined, undefined]</code>. If you <code>console.log(this)</code> it shows that it is the window object and you get an error in strict mode. Is the lexical <code>this</code> for ES6 arrow functions not implemented in V8 yet?</p>\n    ","a":"\n<p>Lexical <code>this</code> is the last part of ES6 arrow functions to land in v8 and it is the reason why it is still behind a flag and not ready to ship yet. Adrian Perez at Igalia is implementing arrow functions and the final patch is almost ready to land as soon as a few TurboFan issues are worked out: <a href=\"https://codereview.chromium.org/883823002/\">https://codereview.chromium.org/883823002/</a></p>\n    "},{"t":"Shim vs. Sham: What is the difference?","l":"http://stackoverflow.com/questions/27508833/shim-vs-sham-what-is-the-difference","q":"\n\n<p>What is the difference between a shim an a sham?</p>\n\n<p>Is it enough to include es5-shim.min.js and es6-shim.min.js or should I also include es5-sham.min.js and es6-sham.min.js?</p>\n    ","a":"\n<p>According to <a href=\"https://github.com/es-shims/es5-shim\">this Github page</a> the shims include all monkey-patches that faithfully represent the ES5 features.</p>\n\n<p>In other words: you can use the features provided by these files as if you were using ES5 proper.</p>\n\n<p>The shams, however contain those features that can not be emulated with other code. They basically provide the API, so your code doesn't crash but they don't provide the actual functionality.</p>\n\n<p>Which ones do you need? That depends on how you write your code. If you only use features provided by the shims, then include that. If you also want to (optionally) use features from the shams, then you need both of them.</p>\n    "},{"t":"Defer execution for ES6 Template Strings","l":"http://stackoverflow.com/questions/22607806/defer-execution-for-es6-template-strings","q":"\n\n<p>I am playing with the new <a href=\"http://tc39wiki.calculist.org/es6/template-strings/\">ES6 Template Strings</a> feature and the first thing that came to my head was a <code>String.format</code> for Javascript so I went about implementing a prototype:</p>\n\n<pre><code>String.prototype.format = function() {\n  var self = this;\n  arguments.forEach(function(val,idx) {\n    self[\"p\"+idx] = val;\n  });\n  return this.toString();\n};\nconsole.log(`Hello, ${p0}. This is a ${p1}`.format(\"world\", \"test\"));\n</code></pre>\n\n<p><a href=\"http://www.es6fiddle.net/ht5nrmgw/\">ES6Fiddle</a></p>\n\n<p>However, the Template String is evaluated <em>before</em> it's passed to my prototype method. Is there any way I can write the above code to defer the result until after I have dynamically created the elements?</p>\n    ","a":"\n<p>I can see three ways around this:</p>\n\n<ul>\n<li><p>Use template strings like they were designed to be used, without any <code>format</code> function:</p>\n\n<pre><code>console.log(`Hello, ${\"world\"}. This is a ${\"test\"}`);\n// might make more sense with variables:\nvar p0 = \"world\", p1 = \"test\";\nconsole.log(`Hello, ${p0}. This is a ${p1}`);\n// or even function parameters for actual deferral of the evaluation:\nconst welcome = (p0, p1) =&gt; `Hello, ${p0}. This is a ${p1}`;\nconsole.log(welcome(\"world\", \"test\"));\n</code></pre></li>\n<li><p>Don't use a template string, but a plain string literal:</p>\n\n<pre><code>String.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/\\$\\{p(\\d)\\}/g, function(match, id) {\n        return args[id];\n    });\n};\nconsole.log(\"Hello, ${p0}. This is a ${p1}\".format(\"world\", \"test\"));\n</code></pre></li>\n<li><p>Use a quasi handler. Notice that the substitutions will still be evaluated without interception by the handler, so you cannot use identifiers like <code>p0</code> without having a variable named so. This behavior may change if a <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aquasis#substitution_body_syntax\">different <em>substitution body syntax</em> proposal is accepted</a>.</p>\n\n<pre><code>function formatter(literals, ...substitutions) {\n    return {\n        format: function() {\n            var out = [];\n            for(var i=0, k=0; i &lt; literals.length; i++) {\n                out[k++] = literals[i];\n                out[k++] = arguments[substitutions[i]];\n            }\n            out[k] = literals[i];\n            return out.join(\"\");\n        }\n    };\n}\nconsole.log(formatter`Hello, ${0}. This is a ${1}`.format(\"world\", \"test\"));\n// Notice the number literals: ^               ^\n</code></pre></li>\n</ul>\n    "},{"t":"Is it safe to delete elements in a set while iterating with for..of?","l":"http://stackoverflow.com/questions/28306756/is-it-safe-to-delete-elements-in-a-set-while-iterating-with-for-of","q":"\n\n<p>Is it specified that you can delete any element in an instance of <code>Set</code> while iterating using <code>for..of</code> and that</p>\n\n<ul>\n<li>you won't iterate more than once on an element</li>\n<li>you won't miss any other element that was in the set at the start of the iteration other than the ones you remove</li>\n</ul>\n\n<p>?</p>\n    ","a":"\n<p><strong>Yes</strong>, it is perfectly fine to add elements and remove elements to a set while iterating it. This use case was considered and is supported in JavaScript 2015 (ES6). It will leave it in a consistent state. Note this also applies to itearting with <code>forEach</code>.</p>\n\n<h2>Intuitively:</h2>\n\n<p>The set iteration algorithm basically looks something like this:</p>\n\n<pre><code>Set position to 0\nWhile position &lt; calculateLength() // note it's calculated on each iteration\n    return the element at set.entryList[position]\n</code></pre>\n\n<p>Addition just looks something like this:</p>\n\n<pre><code>If element not in set\n   Add element to the _end_ of the set\n</code></pre>\n\n<p>So it does not interfere with existing iterations - they will iterate it.</p>\n\n<p>Deletion looks something like this:</p>\n\n<pre><code>Replace all elements with are equal to `element` with a special empty value\n</code></pre>\n\n<p>Replacing it with an empty value rather than deleting it ensures it will not mess up with iterators' positions.</p>\n\n<hr>\n\n<h2>Formally</h2>\n\n<h3>Addition</h3>\n\n<p>Here is the relevant part of the specification from <code>%SetIteratorPrototype%.next</code>:</p>\n\n<blockquote>\n  <p>Repeat while index is less than the total number of elements of entries. <strong>The number of elements must be redetermined each time this method is evaluated.</strong></p>\n</blockquote>\n\n<p>The set iterator proceeds to iterate the entries one by one.</p>\n\n<p>From <code>Set.prototype.add</code>:</p>\n\n<blockquote>\n  <p>Append value as the <strong>last</strong> element of entries.</p>\n</blockquote>\n\n<p>This ensures that when adding elements to the list it will be iterated before the iteration completes since it always gets a new slot in the entries list. Thus this will work as the spec mandates.</p>\n\n<p>As for deletion:</p>\n\n<blockquote>\n  <p>Replace the element of entries whose value is e <strong>with an element whose value is empty.</strong></p>\n</blockquote>\n\n<p>Replacing it with an empty element rather than removing it ensures that the iteration order of existing iterators will not get out or order and they will continue iterating the set correctly.</p>\n\n<h2>With code</h2>\n\n<p>Here is a short code snippet that demonstrates this ability</p>\n\n<pre><code>var set = new Set([1]);\nfor(let item of set){\n   if(item &lt; 10) set.add(item+1);\n   console.log(item);\n}\n</code></pre>\n\n<p>Which logs the numbers 1 to 10. Here is a version not using for... of you can run in your browser today:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var set = new Set([1]);\nfor (var _i = set[Symbol.iterator](), next; !(next = _i.next()).done;) {\n   var item = next.value;\n   if (item &lt; 10) set.add(item + 1);\n   document.body.innerHTML += \" \" + item;\n}</code></pre>\n</div>\n</div>\n<p></p>\n    "},{"t":"How does `this` work in default parameters?","l":"http://stackoverflow.com/questions/30901648/how-does-this-work-in-default-parameters","q":"\n\n<p>So... ES6¹ (which happens to be standardized a few hours ago) brings <em>default parameters</em> for functions similar to those in PHP, Python etc. I can do stuff like:</p>\n\n<pre><code>function foo (bar = 'dum') {\n    return bar;\n}\n\nfoo(1); // 1\nfoo(); // 'dum'\nfoo(undefined); // 'dum'\n</code></pre>\n\n<p>MDN says that the default value for the parameter is evaluated at call time. Which means each time I call the function, the expression <code>'dum'</code> is evaluated again (unless the implementation does some weird optimizations which we don't care about).</p>\n\n<p>My question is, how does <code>this</code> play into this?</p>\n\n<pre><code>let x = {\n  foo (bar = this.foo) {\n    return bar;\n  }\n}\n\nlet y = {\n  z: x.foo\n}\n\nx.foo() === y.z(); // what?\n</code></pre>\n\n<p>The babel transpiler currently evaluates² it as <code>false</code>, but I don't get it. If they are really evaluated at call time, what about this:</p>\n\n<pre><code>let x = 'x from global';\n\nfunction bar (thing = x) {\n  return thing;\n}\n\nfunction foo () {\n  let x = 'x from foo';\n  return bar();\n}\n\nbar() === foo(); // what?\n</code></pre>\n\n<p>The babel transpiler currently evaluates³ it as <code>true</code>, but I don't get it. Why does <code>bar</code> not take the <code>x</code> from <code>foo</code> when called inside <code>foo</code>?</p>\n\n<p><sub>\n1 - Yes I know it is ES2015.<br>\n2 - <a href=\"https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=true&amp;playground=true&amp;code=let%20x%20%3D%20%7B%0A%20%20foo%20(bar%20%3D%20this.foo)%20%7B%0A%20%20%20%20return%20bar%3B%0A%20%20%7D%0A%7D%0A%0Alet%20y%20%3D%20%7B%0A%20%20z%3A%20x.foo%0A%7D%0A%0Aconsole.log(x.foo()%20%3D%3D%3D%20y.z())\">Example A</a><br>\n3 - <a href=\"https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=true&amp;playground=true&amp;code=let%20x%20%3D%20'x%20from%20global'%3B%0A%0Afunction%20bar%20(thing%20%3D%20x)%20%7B%0A%20%20return%20thing%3B%0A%7D%0A%0Afunction%20foo%20()%20%7B%0A%20%20let%20x%20%3D%20'x%20from%20foo'%3B%0A%20%20return%20bar()%3B%0A%7D%0A%0Aconsole.log(bar()%20%3D%3D%3D%20foo())%3B\">Example B</a></sub></p>\n\n<p></p>\n    ","a":"\n<blockquote>\n  <p>My question is, how does <code>this</code> play into this? I don't get it. Are they are really evaluated at call time?</p>\n</blockquote>\n\n<p>Yes, the parameter initializers are evaluated at call time. <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ecmascript-function-objects-call-thisargument-argumentslist\" rel=\"nofollow\">It's complicated</a>, but the steps are basically as follows:</p>\n\n<ol>\n<li>A <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-prepareforordinarycall\" rel=\"nofollow\">new execution context</a> is established on the stack,<br>\nwith a <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-newfunctionenvironment\" rel=\"nofollow\">new environment</a> in the \"closure scope\" of the called function</li>\n<li>If necessary, it's <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinarycallbindthis\" rel=\"nofollow\"><code>thisBinding</code> is initialised</a></li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-functiondeclarationinstantiation\" rel=\"nofollow\">Declarations are instantiated</a>:\n\n<ol>\n<li>Mutable bindings for the parameter names are created</li>\n<li>If necessary, an <code>arguments</code> object is created an bound</li>\n<li>The <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" rel=\"nofollow\">bindings are iteratively initialised</a> from the arguments list (including all destructurings etc)<br>\nIn the course of this, <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization\" rel=\"nofollow\">initialisers are evaluated</a></li>\n<li>If any closures were involved, a new environment is inserted</li>\n<li>Mutable bindings for the variables declared in the function body are created (if not already done by parameter names) and initialised with <code>undefined</code></li>\n<li>Bindings for <code>let</code> and <code>const</code> variables in the function body are created</li>\n<li>The bindings for functions (from function declarations in the body) are initialised with instantiated functions</li>\n</ol></li>\n<li>Finally the <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function-definitions-runtime-semantics-evaluatebody\" rel=\"nofollow\">body of the function is evaluated</a>.</li>\n</ol>\n\n<p>So parameter initialisers do have access to the <code>this</code> and the <code>arguments</code> of the call, to previously initialised other parameters, and everything that is in their \"upper\" lexical scope. They are not affected by the variables declared in the function body (though they are affected by all the other parameters, even if in their temporal dead zone).</p>\n\n<blockquote>\n  <p>what about this:</p>\n\n<pre><code>function bar (thing = x) {}\n{\n  let x = 'x from foo';\n  return bar();\n}\n</code></pre>\n  \n  <p>I don't get it. Why does <code>bar</code> not take the <code>x</code> from <code>foo</code> when called\n  inside <code>foo</code>?</p>\n</blockquote>\n\n<p>Because <code>x</code> is a local variable that <code>bar</code> does not have access to. We're so lucky that they are <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping\" rel=\"nofollow\">not dynamically scoped</a>! The parameter initialisers are not evaluated at the call site, but inside the called function's scope. In this case, the <code>x</code> identifier is resolved to the global <code>x</code> variable.</p>\n    "},{"t":"Rails asset pipeline with ES6 modules and browserify","l":"http://stackoverflow.com/questions/20612651/rails-asset-pipeline-with-es6-modules-and-browserify","q":"\n\n<p>I'm trying to implement something with the rails asset pipeline that is proving harder than I'd hoped.</p>\n\n<p>In order to structure the app cleanly, I plan to use a module system for the javascript. For this I want to use CommonJS modules, but I'd like to write them using the new ES6 syntax for future compatibility.</p>\n\n<p>I've found the ES6 module transpiler extension for the asset pipeline, which works well, but this only converts it into the CommonJS format. I still need to get this into JS that the browser understands. For that I'm looking at using Browserify but my problem lies in combining these 2.</p>\n\n<p>The module transpiler works in a per file basis, but browserify works by checking all of the files needed. The problem is that browserify can't use the original files as they're no in CommonJS format, they're in ES6, so it needs the transpiled versions, but because that happens in the pipeline, I can't point browserify at a file.</p>\n\n<p>Are there any ways around this?</p>\n    ","a":"\n<p>My recommendation is to use the <a href=\"https://github.com/browserify-rails/browserify-rails\" rel=\"nofollow\">browserify-rails</a> gem. For ES6, you would use a <code>transform</code> such as this one: <a href=\"https://github.com/thlorenz/es6ify\" rel=\"nofollow\">https://github.com/thlorenz/es6ify</a></p>\n    "},{"t":"What's the purpose of allowing duplicate property names?","l":"http://stackoverflow.com/questions/30617139/whats-the-purpose-of-allowing-duplicate-property-names","q":"\n\n<p>I'm reading the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">MDN javascript reference</a>, accordingly the following code no longer returns <code>false</code>: </p>\n\n<pre><code>function haveES6DuplicatePropertySemantics(){\n  \"use strict\";\n  try {\n    ({ prop: 1, prop: 2 });\n\n    // No error thrown, duplicate property names allowed in strict mode\n    return true;\n  } catch (e) {\n    // Error thrown, duplicates prohibited in strict mode\n    return false;\n  }\n}\n</code></pre>\n\n<blockquote>\n  <p>In ECMAScript 5 strict mode code, duplicate property names were\n  considered a SyntaxError.  With the introduction of computed property\n  names making duplication possible at runtime, ECMAScript 6 has removed\n  this restriction.</p>\n</blockquote>\n\n<p>My question is, what are the practical benefits of allowing duplicate property-names in the initializers? I can see, how when object properties are assigned dynamically this might sometimes occur, but since order of precedence apparently determines which of the properties is actually set on the newly created object -- this seems more than anything like an indefinite behaviour that's best avoided. </p>\n    ","a":"\n<blockquote>\n  <p>what are the practical benefits of allowing duplicate property-names in the initializers</p>\n</blockquote>\n\n<p><strong>There are no practical benefits as such.</strong> Now that there are computed property keys in ECMA Script 6, the actual value of the keys will be determined only at the runtime. As it is, keys can be added to objects at runtime and they overwrite the existing key and value. The same behavior is extended in ES-6 and the restriction of not allowing compile time duplicate keys check is removed.</p>\n\n<p>Quoting Allen Wirfs-Brock from the <a href=\"https://mail.mozilla.org/pipermail/es-discuss/2013-October/034401.html\">discussion in ESDiscuss Mailing list</a>,</p>\n\n<blockquote>\n  <p>The plan has been that runtime validation would be performed for any object literals containing computed property keys and the current spec. draft contains pseudo code for doing the checks.  However a bug report (<a href=\"https://bugs.ecmascript.org/show_bug.cgi?id=1863\">https://bugs.ecmascript.org/show_bug.cgi?id=1863</a> ) points out an issue with the current spec.  For example, the current spec. throws an error on:</p>\n\n<pre><code>({get a() {},\n   get [\"a\"]() {}\n });\n</code></pre>\n  \n  <p>but not on:</p>\n\n<pre><code>({get [\"a\"]() {},\n   get a() {}\n });\n</code></pre>\n  \n  <p>Basically, <strong>it isn't sufficient to only check for an already defined property key when processing property definitions that contains a computed key. If any computed keys exist the checking has to be done even for the definitions that have literal property names.  And it isn't sufficient to just consider the property keys and the data/accessor property distinction, the validation also has to take into account  the syntactic form of the definition and whether or not strict mode applies</strong>..</p>\n  \n  <p>It turns out that even in pseudo code, this is a fairly complicated set of runtime validation rules to apply.  I'm having a hard time convincing myself that the runtime computational and meta data costs of this dynamic validation is justified.  It costs too much and the actual benefit is pretty small.</p>\n  \n  <p><strong><em>For that reason, I propose that we drop this runtime validation of object literals (and class definition).  We would still have the static validation and early errors for property definitions that don't have computed keys. But anything that makes it past those checks (including all property definitions with computed names) are just processed sequentially with no duplicate name checking.</em></strong></p>\n</blockquote>\n\n<p>So, the proposal was to retain the compile time check for normal keys and <a href=\"https://bugs.ecmascript.org/show_bug.cgi?id=1863#c2\">as per this comment</a> the check was dropped later. In <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#july_18_2014_draft_rev_26\">Revision 26</a>,</p>\n\n<blockquote>\n  <p>Eliminated duplicate property name restrictions on object literals and class definitions</p>\n</blockquote>\n    "},{"t":"Can I use ES6's fat arrow notation with generators? (node)","l":"http://stackoverflow.com/questions/27661306/can-i-use-es6s-fat-arrow-notation-with-generators-node","q":"\n\n<p>ie how do I express this:</p>\n\n<pre><code>function *(next) {}\n</code></pre>\n\n<p>with fat arrows. I've tried all the combinations I could think of, and I can't find any documentation on it.</p>\n\n<p>(currently using node v0.11.14)</p>\n    ","a":"\n<p>You can't. Sorry. </p>\n\n<p>According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">MDN</a></p>\n\n<blockquote>\n  <p>The <code>function*</code> statement (<code>function</code> keyword followed by an asterisk) defines a generator function.</p>\n</blockquote>\n\n<p>From a <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:generators#generator_functions\" rel=\"nofollow\">spec document</a>:</p>\n\n<blockquote>\n  <p>The <strong>function</strong> syntax is extended to add an optional <code>*</code> token:</p>\n</blockquote>\n\n<pre><code>FunctionDeclaration: \"function\" \"*\"? Identifier \"(\" FormalParameterList? \")\" \"{\" FunctionBody \"}\"\n</code></pre>\n    "},{"t":"Backticks calling a function","l":"http://stackoverflow.com/questions/29660381/backticks-calling-a-function","q":"\n\n<p>I'm not sure how to explain this, but when I run </p>\n\n<pre><code>console.log`1`\n</code></pre>\n\n<p>In google chrome, I get output like</p>\n\n<pre><code>console.log`1`\nVM12380:2 [\"1\", raw: Array[1]]\n</code></pre>\n\n<p>Why is the backtick calling the log function, and why is it making a index of <code>raw: Array[1]</code>?</p>\n\n<p>Question brought up in the JS room by Catgocat, but no answers made sense besides something about <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings\">templating strings</a> that didn't really fit why this is happening.</p>\n    ","a":"\n<p>It is called Tagged Template String in ES-6 more could be read about them <a href=\"http://tc39wiki.calculist.org/es6/template-strings/\" rel=\"nofollow\">Here</a>, <em>funny I found the link in the starred section of the very chat.</em></p>\n\n<p>But the relevent part of the code is below (you can basically create a filter sort).</p>\n\n<pre><code>function tag(strings, ...values) {\n  assert(strings[0] === 'a');\n  assert(strings[1] === 'b');\n  assert(values[0] === 0);\n  return 'whatever';\n}\ntag `a${ 42 }b`  // \"whatever\"\n</code></pre>\n\n<p>Basically its merely tagging the \"1\" with console.log function, as it would do with any other function. The tagging functions accept parsed values of template strings and the values seperately upon which further tasks can be performed.</p>\n\n<p>Babel transpiles the above code to </p>\n\n<pre><code>var _taggedTemplateLiteralLoose = function (strings, raw) { strings.raw = raw; return strings; };\n\nconsole.log(_taggedTemplateLiteralLoose([\"1\"], [\"1\"]));\n</code></pre>\n\n<p>As you can see it in the example above, after being transpiled by babel, the tagging function (console.log) is being passed the return value of the following es6-&gt;5 transpiled code.</p>\n\n<p>_taggedTemplateLiteralLoose( [\"1\"], [\"1\"] );</p>\n\n<p>The return value of this function is passed to console.log which will then print the array.</p>\n    "},{"t":"Are HTMLCollection and NodeList iterables?","l":"http://stackoverflow.com/questions/31283360/are-htmlcollection-and-nodelist-iterables","q":"\n\n<p>In ES6, an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable</a> is an object that allows <code>for... of</code>, and has a Symbol.iterator key. </p>\n\n<p>Arrays are iterables, as are Sets and Maps. The question is: are <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\">HTMLCollection</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\">NodeList</a> iterables? Are they supposed to be?</p>\n\n<p>MDN documentation seems to suggest a <code>NodeList</code> is an iterable.</p>\n\n<blockquote>\n  <p><code>for...of</code> loops will loop over NodeList objects correctly, in browsers that support <code>for...of</code> (like Firefox 13 and later)</p>\n</blockquote>\n\n<p>This appears to corroborate Firefox's behaviour.</p>\n\n<p>I tested the following code in both Chrome and Firefox, and was surprised to find that Firefox seem to think they are iterables, but Chrome does not. In addition, Firefox thinks that the iterators returned by <code>HTMLCollection</code> and <code>NodeList</code> are one and the same.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var col = document.getElementsByClassName('test'); // Should get HTMLCollection of 2 elems\nvar nod = document.querySelectorAll('.test');      // Should get NodeList of 2 elems\nvar arr = [].slice.call(col);                      // Should get Array of 2 elems\n\nconsole.log(col[Symbol.iterator]);    // Firefox: iterator function, Chrome: undefined\nconsole.log(nod[Symbol.iterator]);    // Firefox: iterator function, Chrome: undefined\nconsole.log(arr[Symbol.iterator]);    // Firefox &amp; Chrome: iterator function\nconsole.log(col[Symbol.iterator] === nod[Symbol.iterator]);  // Firefox: true\nconsole.log(col[Symbol.iterator] === arr[Symbol.iterator]);  // Firefox: false</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"test\"&gt;1&lt;/div&gt;\n&lt;div class=\"test\"&gt;2&lt;/div&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p><strong>One really weird, confusing thing</strong>: running the code snippet produces a different result from copying it and running in an actual file/console in Firefox (particularly last comparison). Any enlightenment on this weird behaviour here would be appreciated too.</p>\n    ","a":"\n<p><code>Symbol.iterator</code> support for <code>NodeList</code>, <code>HTMLCollection</code>, <code>DOMTokenList</code>, and <code>DOMSettableTokenList</code> was <a href=\"https://www.w3.org/Bugs/Public/show_bug.cgi?id=23212\" rel=\"nofollow\">discussed</a> and <a href=\"https://github.com/whatwg/dom/commit/72a2f99e968571989790d58f5b35e8465c52a462\" rel=\"nofollow\">added</a> to the <a href=\"https://dom.spec.whatwg.org/\" rel=\"nofollow\">WHATWG's DOM spec</a> last year.</p>\n    "},{"t":"Is the window.System object a required part of JavaScript ES6","l":"http://stackoverflow.com/questions/30419998/is-the-window-system-object-a-required-part-of-javascript-es6","q":"\n\n<p>A while back I read that the System object is a required part of es6 modules, basically a new Object type with all the required semantics for module loading.</p>\n\n<p>Is this a strict es6 requirement? It doesn't seem to be in the latest spec.</p>\n    ","a":"\n<p>The global <code>System</code> object is not part of ES2015.</p>\n\n<p>The module loading API, which includes <code>System</code>, was removed from the ES2015 spec in <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#october_14_2014_draft_rev_28\" rel=\"nofollow\">Draft 28, October 2014</a>.</p>\n\n<p>Module loading is now tracked by the separate <a href=\"https://github.com/whatwg/loader\" rel=\"nofollow\">WhatWG loader spec</a>.</p>\n\n<p>There is an implementation of the module loader API as specified in Draft 27 (including <code>System</code>) at <a href=\"https://github.com/ModuleLoader/es6-module-loader\" rel=\"nofollow\">https://github.com/ModuleLoader/es6-module-loader</a>. </p>\n    "},{"t":"Is there support for static typing in ECMAScript 6 or 7?","l":"http://stackoverflow.com/questions/22407765/is-there-support-for-static-typing-in-ecmascript-6-or-7","q":"\n\n<p>Is there any support for static typing in ECMAScript 6? How about ECMAScript 7?</p>\n    ","a":"\n<p>No.</p>\n\n<p>But on the ECMA-Script Wikipage there is a paragraph about changes in ECMA-Script 7:</p>\n\n<blockquote>\n  <p>The Seventh Edition is in a very early stage of development, but is intended to continue the themes of language reform, code isolation, control of effects and library/tool enabling from ES6. New features proposed include promises/concurrency, number and math enhancements, guards and <strong>trademarks (an alternative to static typing)</strong>, operator overloading, value types (first-class number-like objects), new record structures (records, tuples and typed arrays), pattern matching, and traits.</p>\n</blockquote>\n\n<p>Which may interest you.</p>\n    "},{"t":"ES 7 - Async vs. Yield","l":"http://stackoverflow.com/questions/31483342/es-7-async-vs-yield","q":"\n\n<p>I am confused about the current discussion of adding async functions and the keyword <code>await</code> to the next EcmaScript (assuming EcmaScript 2016?).</p>\n\n<p>I do not understand why it is necessary to have the <code>async</code> keyword before the <code>function</code> keyword.</p>\n\n<p>From my point of view the <code>await</code> keyword to wait for a result of a generator or promise <em>done</em>, a function's <code>return</code> should be enough.</p>\n\n<p><code>await</code> should simple be usable within normal functions and generator functions with no additional <code>async</code> marker.</p>\n\n<p>And if I need to create a function what should be usable as an result for an <code>await</code>, I simply use a promise.</p>\n\n<p>My reason for asking is <a href=\"http://kaye.us/javascript-async-control-flow/\" rel=\"nofollow\">this</a> good explanation, where the following example comes from:</p>\n\n<pre><code>async function setupNewUser(name) {  \n  var invitations,\n      newUser = await createUser(name),\n      friends = await getFacebookFriends(name);\n\n  if (friends) {\n    invitations = await inviteFacebookFriends(friends);\n  }\n\n  // some more logic\n}\n</code></pre>\n\n<p>It also could be done as normal function, if the execution of a function will wait for finishing the hole function until all awaits are fulfilled.</p>\n\n<pre><code>function setupNewUser(name) {  \n  var invitations,\n      newUser = await createUser(name),\n      friends = await getFacebookFriends(name);\n\n  if (friends) {\n    invitations = await inviteFacebookFriends(friends);\n  }\n\n  // return because createUser() and getFacebookFriends() and maybe inviteFacebookFriends() finished their awaited result.\n\n}\n</code></pre>\n\n<p>In my opinion the whole function execution is holding until the next tick (await fulfillment) is done.  The difference to Generator-Function is that the next() is triggering and changing the object's value and done field. A function instead will simple give back the result when it is done and the trigger is a function internal trigger like a while-loop.</p>\n\n<p>Hope someone can clarify whether this is my own confusion of things or because it's because of the early stages of discussion about ES 7.</p>\n    ","a":"\n<blockquote>\n  <p>I do not understand why it is necessary to have the <code>async</code> keyword before the function keyword.</p>\n</blockquote>\n\n<p>For the same reason that we have the <code>*</code> symbol before generator functions: They mark the function as extraordinary. They are quite similar in that regard - they add a visual marker that the body of this function does not run to completion by itself, but can be interleaved arbitrarily with other code.</p>\n\n<ul>\n<li>The <code>*</code> denotes a generator function, which will always return a generator that can be advanced (and stopped) from outside by consuming it similar to an iterator.</li>\n<li>The <code>async</code> denotes an asynchronous function, which will always return a promise that depends on other promises and whose execution is concurrent to other asynchronous operations (and might be cancelled from outside).</li>\n</ul>\n\n<p>It's true that the keyword is not strictly necessary and the kind of the function could be determined by whether the respective keywords (<code>yield(*)</code>/<code>await</code>) appear in its body, but that would lead to less maintainable code:</p>\n\n<ul>\n<li>less comprehensible, because you need to scan the whole body to determine the kind</li>\n<li>more errorprone, because it's easy to break a function by adding/removing those keywords without getting a syntax error</li>\n</ul>\n\n<blockquote>\n  <p>a normal function, whose execution will wait for finishing the hole body until all awaits are fulfilled</p>\n</blockquote>\n\n<p>That sounds like you want a blocking function, which is a <a href=\"http://stackoverflow.com/a/25447289/1048572\"><em>very</em> bad idea</a> in a concurrent setting.</p>\n    "},{"t":"How to mock dependencies for unit tests with ES6 Modules","l":"http://stackoverflow.com/questions/27323031/how-to-mock-dependencies-for-unit-tests-with-es6-modules","q":"\n\n<p>I'm trying to fiddle with Ecmascript 6 modules using webpack + traceur to transpile to ES5 CommonJS, but I'm having trouble successfully unit testing them.</p>\n\n<p>I tried using Jest + traceur preprocessor, but the automocking and dependency names seem to get screwy, plus I can't seem to get sourceMaps to work with Jest and node-inspector debugging.</p>\n\n<p>Is there a better framework to unit test ES6 modules?</p>\n    ","a":"\n<p>I actually got this to work by dropping Jest and going with Karma + Jasmine + Webpack and using <a href=\"https://github.com/jhnns/rewire\" rel=\"nofollow\">https://github.com/jhnns/rewire</a> to mock dependencies</p>\n    "},{"t":"What are ES6 generators and how can I use them in node.js?","l":"http://stackoverflow.com/questions/18842105/what-are-es6-generators-and-how-can-i-use-them-in-node-js","q":"\n\n<p>I was at a node.js meetup today, and someone I met there said that node.js has es6 generators. He said that this is a huge improvement over callback style programming, and would change the node landscape. Iirc, he said something about call stack and exceptions.</p>\n\n<p>I looked them up, but haven't really found any resource that explains them in a beginner-friendly way. What's a high-level overview of generators, and how are the different (or better?) than callbacks?</p>\n\n<p>PS: It'd be really helpful if you could give a snippet of code to highlight the difference in common scenarios (making an http request or a db call). </p>\n    ","a":"\n<h2>Generators, fibers and coroutines</h2>\n\n<p>\"Generators\" (besides being \"generators\") are also the basic buildings blocks of <a href=\"http://en.wikipedia.org/wiki/Fiber_%28computer_science%29\">\"fibers\" or \"coroutines\"</a>. With fibers, you can \"pause\" a function waiting for an async call to return, effectively avoiding to declare a callback function \"on the spot\" and creating a \"closure\". Say goodbye to callback hell.</p>\n\n<h2>Closures and try-catch</h2>\n\n<blockquote>\n  <p>...he said something about call stack and exceptions</p>\n</blockquote>\n\n<p>The problem with \"closures\" is that even if they \"magically\" keep the state of the local variables for the callback, a \"closure\" can not keep the call stack.</p>\n\n<p>At the moment of callback, normally, the calling function has returned a long time ago, so any \"catch\" block on the calling function <em>cannot catch exceptions in the async function itself or the callback</em>. This presents a big problem. Because of this, you can not combine callbacks+closures with exception catching.</p>\n\n<h2>Wait.for</h2>\n\n<blockquote>\n  <p>...and would change the node landscape</p>\n</blockquote>\n\n<p><em>If</em> you use generators to build a helper lib like <a href=\"https://github.com/luciotato/waitfor-ES6\">Wait.for-ES6</a> (I'm the author), you can completely avoid the callback and the closure, and now \"catch blocks\" work as expected, and the code is straightforward.</p>\n\n<blockquote>\n  <p>It'd be really helpful if you could give a snippet of code to highlight the difference in common scenarios (making an http request or a db call).</p>\n</blockquote>\n\n<p>Check <a href=\"https://github.com/luciotato/waitfor-ES6\">Wait.for-ES6</a> examples, to see the same code with callbacks and with fibers based on generators.</p>\n    "},{"t":"What is the difference between browserify/requirejs modules and ES6 modules","l":"http://stackoverflow.com/questions/28674652/what-is-the-difference-between-browserify-requirejs-modules-and-es6-modules","q":"\n\n<p>I'm still new to ES6 and module loaders and I'm currently looking at combining a browserify setup with ES6. I was wondering if I would still need browserify/requirejs if I'm using ES6 modules. Seems like both allow you to define modules and export them? What is the difference between browserify/requirejs modules and ES6 modules?</p>\n    ","a":"\n<p>So after playing around for a while I did get a better understanding of things, also thanks to @Andy for the <a href=\"http://addyosmani.com/writing-modular-js/\">blog by Addy Osmani</a>.</p>\n\n<p>So there are different <em>module systems</em>: AMD (RequireJS), CommonJS (Node) and the new ES6 module syntax (and the old ES5 Global system of course).</p>\n\n<p>However if you want to use those in your browser you still need to load and wire those modules with some <em>module loader library</em> because browsers still do not support that. For that you could use a module loader like <a href=\"http://requirejs.org/\">RequireJS</a>, <a href=\"http://browserify.org/\">Browserify</a>, <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a> or <a href=\"https://github.com/ModuleLoader/es6-module-loader\">es6-module-loader</a>. </p>\n\n<p>SystemJS is my personal favorite because it allows you to load any module system (AMD, CommonJS, ES6) and even use them interchangably in 1 app. </p>\n    "},{"t":"JSON stringify a Set","l":"http://stackoverflow.com/questions/31190885/json-stringify-a-set","q":"\n\n<p>How would one <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" rel=\"nofollow\">JSON.stringify()</a> a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow\">Set</a>?</p>\n\n<p>Things that did not work in Chromium 43:</p>\n\n<pre><code>var s = new Set(['foo', 'bar']);\n\nJSON.stringify(s); // -&gt; \"{}\"\nJSON.stringify(s.values()); // -&gt; \"{}\"\nJSON.stringify(s.keys()); // -&gt; \"{}\"\n</code></pre>\n\n<p>I would expect to get something similar to that of a serialized array.</p>\n\n<pre><code>JSON.stringify([\"foo\", \"foo\"]); // -&gt; \"[\"foo\",\"foo\"]\"\n</code></pre>\n    ","a":"\n<p><code>JSON.stringify</code> doesn't directly work with sets because the data stored in the set is not stored as properties.</p>\n\n<p>But you can convert the set to an array. Then you will be able to stringify it properly.</p>\n\n<p>Any of the following will do the trick:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>JSON.stringify([...s]);\nJSON.stringify([...s.keys()]);\nJSON.stringify([...s.values()]);\nJSON.stringify(Array.from(s));\nJSON.stringify(Array.from(s.keys()));\nJSON.stringify(Array.from(s.values()));\n</code></pre>\n    "},{"t":"Creating a regular weak-reference in Javascript using WeakMaps","l":"http://stackoverflow.com/questions/29436056/creating-a-regular-weak-reference-in-javascript-using-weakmaps","q":"\n\n<p>I am trying to do the <em>obvious</em> thing with WeakMaps: I want to create a weak reference.  In particular, I want to have a list of event-listeners without that list influencing the life of the listener.</p>\n\n<p>So I was very excited to find WeakMaps, until I saw they were only built to satisfy one (fairly rare) use-case, extending objects that were otherwise sealed.  I can't think when I ever wanted to do that, but I need lists of listeners all the time.</p>\n\n<p>Is this possible to use WeakMaps in some clever way I haven't thought of to do this?</p>\n    ","a":"\n<p>No, it is impossible to use WeakMaps to create a weak reference. WeakMaps are not iterable, to use them you always need the key. This was a deliberate decision (also <a href=\"http://stackoverflow.com/q/20508628/1048572\">here</a>), so that garbage collection does not influence the semantics of your program - which is exactly what you want.</p>\n\n<p>Real weak references might come with ES7, see <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:weak_references\">here</a> and <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:weak_refs\">there</a> for drafts.</p>\n    "},{"t":"Automatically set arguments as instance properties in ES6","l":"http://stackoverflow.com/questions/27529518/automatically-set-arguments-as-instance-properties-in-es6","q":"\n\n<p>CoffeeScript automatically sets the arguments as instance properties in the constructor if you prefix the arguments with @. </p>\n\n<p>Is there any trick to accomplish the same in ES6?</p>\n    ","a":"\n\n\n<p><a href=\"/questions/27529518/automatically-set-arguments-as-instance-properties-in-es6/27534099#comment43487610_27529518\">Felix Kling's comment</a> outlines the closest you'll get to a tidy solution for this. It uses two ES6 features—<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow\"><code>Object.assign</code></a> and the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:object_literals#object_literal_property_value_shorthand\" rel=\"nofollow\">object literal property value shorthand</a>.</p>\n\n<p>Here's an example with <code>tree</code> and <code>pot</code> as the instance properties:</p>\n\n<pre><code>class ChristmasTree {\n    constructor(tree, pot, tinsel, topper) {\n        Object.assign(this, { tree, pot });\n        this.decorate(tinsel, topper);\n    }\n\n    decorate(tinsel, topper) {\n        // Make it fabulous!\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Of course, this isn't really what you wanted; you still need to repeat the argument names, for one thing. I had a go at writing a helper method which might be a bit closer…</p>\n\n<pre><code>Object.autoAssign = function(fn, args) {\n\n    // Match language expressions.\n    const COMMENT  = /\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\//mg;\n    const ARGUMENT = /([^\\s,]+)/g;\n\n    // Extract constructor arguments.\n    const dfn     = fn.constructor.toString().replace(COMMENT, '');\n    const argList = dfn.slice(dfn.indexOf('(') + 1, dfn.indexOf(')'));\n    const names   = argList.match(ARGUMENT) || [];\n\n    const toAssign = names.reduce((assigned, name, i) =&gt; {\n        let val = args[i];\n\n        // Rest arguments.\n        if (name.indexOf('...') === 0) {\n            name = name.slice(3);\n            val  = Array.from(args).slice(i);\n        }\n\n        if (name.indexOf('_') === 0) { assigned[name.slice(1)] = val; }\n\n        return assigned;\n    }, {});\n\n    if (Object.keys(toAssign).length &gt; 0) { Object.assign(fn, toAssign); }\n};\n</code></pre>\n\n<p>This auto-assigns any parameters whose names are prefixed with an underscore to instance properties:</p>\n\n<pre><code>constructor(_tree, _pot, tinsel, topper) {\n    // Equivalent to: Object.assign({ tree: _tree, pot: _pot });\n    Object.autoAssign(this, arguments);\n    // ...\n}\n</code></pre>\n\n<p>It supports rest parameters, but I omitted support for default parameters. Their versatility, coupled with JS' anaemic regular expressions, makes it hard to support more than a small subset of them.</p>\n\n<p>Personally, I wouldn't do this. If there were a native way to reflect on the formal arguments of a function, this would be really easy. As it is, it's a mess, and doesn't strike me as a significant improvement over <code>Object.assign</code>.</p>\n\n\n    "},{"t":"Get the class name of ES6 class instance","l":"http://stackoverflow.com/questions/29310530/get-the-class-name-of-es6-class-instance","q":"\n\n<p>Are there any 'harmonious' ways to get the class name from ES6 class instance? Other than</p>\n\n<pre><code>someClassInstance.constructor.name\n</code></pre>\n\n<p>Currently I'm counting on Traceur implementation. And it seems that Babel has a polyfill for <code>Function.name</code> while Traceur doesn't.</p>\n    ","a":"\n<p><code>someClassInstance.constructor.name</code> is exactly the correct way to do this. Transpilers may not support this, but it is the standard way per the specification. (The name property of functions declared via ClassDeclaration productions is set in <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-bindingclassdeclarationevaluation\">14.5.15</a>, step 6.)</p>\n    "},{"t":"Any automated way to convert CoffeeScript to ES6?","l":"http://stackoverflow.com/questions/28554713/any-automated-way-to-convert-coffeescript-to-es6","q":"\n\n<p>I'd like to convert a Rails project with lots of CoffeeScript over to ES6 syntax. Yes, I could convert to ES5 with the transpiler. I'm looking for something that converts to ES6.</p>\n    ","a":"\n<p>Does this do it?\n    <a href=\"https://github.com/eventualbuddha/decaffeinate\">https://github.com/eventualbuddha/decaffeinate</a>\nJust got it on twitter.</p>\n    "},{"t":"How do I concatenate ES6 modules?","l":"http://stackoverflow.com/questions/27488485/how-do-i-concatenate-es6-modules","q":"\n\n<p>How can I concatenate ES6 modules?</p>\n\n<pre><code>var foo = 2; // This would normally be scoped to the module.\nexport function Bar() {}\n\n// ...concatenate...\n\nimport { Bar } from 'javascripts/bar' //This file no longer exists in the concatenated scenario.\nexport function Bam() {}\n</code></pre>\n    ","a":"\n<p>If what you want to do is create a single JavaScript file that does not internally use ES6 modules, so that you can use it with browsers/node today, then I recommend using <a href=\"http://esperantojs.org/\" rel=\"nofollow\">Esperanto</a> (full disclosure, I'm a maintainer of the project). It allows you to create a bundle that concatenates all of the files together <em>without</em> the use of a loader like you'd get using something like browserify or webpack. This typically results in smaller code (no loader), better dead code elimination (when using a minifier like Google Closure Compiler or UglifyJS), and better performance as the JS interpreter is better able to optimize the result.</p>\n\n<p>Here's an example usage, but note that there are <a href=\"https://www.npmjs.com/search?q=esperanto\" rel=\"nofollow\">plenty of tools to integrate Esperanto into your workflow</a>:</p>\n\n<pre><code>var fs = require( 'fs' );\nvar esperanto = require( 'esperanto' );\n\nesperanto.bundle({\n  base: 'src', // optional, defaults to current dir\n  entry: 'mean.js' // the '.js' is optional\n}).then( function ( bundle ) {\n  var cjs = bundle.toCjs();\n  fs.writeFile( 'dist/mean.js', cjs.code );\n});\n</code></pre>\n\n<p>This example is taken from the <a href=\"https://github.com/esperantojs/esperanto/wiki/Bundling-multiple-ES6-modules\" rel=\"nofollow\">wiki page on bundling ES6 modules</a>.</p>\n    "},{"t":"Javascript: Is This Truly Signed Integer Division","l":"http://stackoverflow.com/questions/31353521/javascript-is-this-truly-signed-integer-division","q":"\n\n<p>Given the following code, where both <code>a</code> and <code>b</code> are <code>Number</code>s representing values within the range of signed 32-bit signed integers:</p>\n\n<pre><code>var quotient = ((a|0) / (b|0))|0;\n</code></pre>\n\n<p>and assuming that the runtime is in full compliance with the ECMAScript 6 specifications, will the value of <code>quotient</code> <strong>always</strong> be the correct signed integer division of <code>a</code> and <code>b</code> as integers? In other words, is this a proper method to achieve true signed integer division in JavaScript that is equivalent to the machine instruction?</p>\n    ","a":"\n<p>I'm no expert on floating-point numbers, but <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" rel=\"nofollow\">Wikipedia</a> says that  doubles have 52 bits of precision. Logically, it seems that 52 bits should be enough to reliably approximate integer division of 32-bit integers. </p>\n\n<p>Dividing the minimum and maximum 32-bit signed ints, <code>-2147483648 / 2147483647</code>, produces <code>-1.0000000004656613</code>, which is still a reasonable amount of significant digits. The same goes for its inverse, <code>2147483647 / -2147483648</code>, which produces <code>-0.9999999995343387</code>.</p>\n\n<p>An exception is <a href=\"https://stackoverflow.com/questions/29179876/how-does-asm-js-handle-divide-by-zero\">division by zero</a>, which I mentioned in a comment. As the linked SO question states, integer division by zero normally throws some sort of error, whereas floating-point coercion results in <code>(1 / 0) | 0 == 0</code>.</p>\n\n<p><strong>Update:</strong> According to <a href=\"https://stackoverflow.com/questions/3602827/what-is-the-behavior-of-integer-division-in-c\">another SO answer</a>, integer division in C truncates towards zero, which is what <code>|0</code> does in JavaScript. In addition, division by 0 is undefined, so JavaScript is technically not incorrect in returning zero. Unless I've missed anything else, the answer to the original question should be yes.</p>\n\n<p><strong>Update 2:</strong> Relevant sections of the ECMAScript 6 spec: how to <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-applying-the-div-operator\" rel=\"nofollow\">divide numbers</a> and how to <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\" rel=\"nofollow\">convert to a 32-bit signed integer</a>, which is <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-binary-bitwise-operators-runtime-semantics-evaluation\" rel=\"nofollow\">what <code>|0</code> does</a>.</p>\n    "},{"t":"ES6: call class constructor without new keyword","l":"http://stackoverflow.com/questions/30689817/es6-call-class-constructor-without-new-keyword","q":"\n\n<p>Given a simple class</p>\n\n<pre><code>class Foo {\n  constructor(x) {\n    if (!(this instanceof Foo)) return new Foo(x);\n    this.x = x;\n  }\n  hello() {\n    return `hello ${this.x}`;\n  }\n}\n</code></pre>\n\n<p>Is it possible to call the class constructor without the <code>new</code> keyword?</p>\n\n<p>Usage should allow</p>\n\n<pre><code>(new Foo(\"world\")).hello(); // \"hello world\"\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>Foo(\"world\").hello();       // \"hello world\"\n</code></pre>\n\n<p>But the latter fails with</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Cannot call a class as a function\n</code></pre>\n    ","a":"\n<p>No, according to the specs classes can only be invoked using the <code>new</code> keyword, and not with a function call.</p>\n\n<p><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" rel=\"nofollow\">Ecma 6 - 9.2.2</a></p>\n    "},{"t":"yielding from an iterator callback used inside a generator","l":"http://stackoverflow.com/questions/24967314/yielding-from-an-iterator-callback-used-inside-a-generator","q":"\n\n<p>Has anyone tried to get Underscore JS or lodash (or any ES5 standard functions for that matter) working with generators?</p>\n\n<p>If we have an array <code>var myArray = [1,2,3,4,6];</code>\nWe want to forEach over it.</p>\n\n<p>In a non generator case you would simply</p>\n\n<pre><code>myArray.forEach(function(k) {\n  console.log(k);\n});\n</code></pre>\n\n<p>However, when you can't yield inside a non generator function, so if inside this loop we had to do some async work, you would need to do the following.</p>\n\n<pre><code>var foreach = function* (arr, fn) {\n  var i;\n  for (i = 0; i &lt; arr.length; i++) {\n    yield * fn(arr[i], i);\n  }\n};\n\nyield* foreach(myArray, function* (k) {\n  var a = yield fs.readFile();\n});\n</code></pre>\n\n<p>Which kind of sucks.</p>\n\n<p>Anyone know of a way to get anonymous functions working with generators? We kind of lose the entire lodash library because of this.</p>\n\n<p>Note: I'm using Traceur to compile my code into ES6 with generators turned on.<br>\nNote: I'm not using co(). I'm using a custom generator function seen below </p>\n\n<pre><code>var run = function(generatorFunction) {\n  var generatorItr = generatorFunction(resume);\n  function resume(callbackValue) {\n    generatorItr.next(callbackValue);\n  }\n  generatorItr.next();\n};\n</code></pre>\n    ","a":"\n<p>If I'm understanding your problem correctly, it's essentially that you're trying to do something (iterate until a good stopping point is found) in an asynchronous way, in a language (JS) which is really designed around synchronicity.  In other words, while you could normally do:</p>\n\n<pre><code>_([1,2,3]).any(function(x) {\n    var shouldWeStopLooping = x % 2 == 0;\n    return shouldWeStopLogging;\n});\n</code></pre>\n\n<p>you instead want to make the \"should we stop looping\" code break from normal execution, and then come back, which isn't possible with traditional JS (<code>yield</code> is relatively new to the language) and thus isn't possible in Underscore/Lodash:</p>\n\n<pre><code>_([1,2,3]).any(function(x) {\n    var shouldWeStopLooping = $.ajax(...); // Doesn't work; code keeps going\n    return shouldWeStopLogging;\n});\n</code></pre>\n\n<p>There are two approaches you could take, neither of which are ideal.</p>\n\n<p>As mentioned in the comments, one approach would be to do all your \"deferred\" work first, then iterate:</p>\n\n<pre><code>var workInProgress = _([1,2,3]).map(someAjaxOperation);\n$.when.apply(workInProgress).done(doSomethingBasedOnAjaxResults);\n</code></pre>\n\n<p>But (as also noted in the comments) that isn't quite the same, as you wind up doing the AJAX work on all of the elements of your array (vs. a true generator which would only iterate through as many as needed to find a \"winner\").</p>\n\n<p>Another approach would be to eliminate the asynchronicity.  jQuery allows you to pass <code>async: false</code> to an AJAX request, which \"solves\" the problem by letting you use Underscore/Lodash/whatever ... but it also locks your user's browser up for as long as it takes to do the AJAX work, which probably isn't what you want.</p>\n\n<p>Unfortunately if you want to use a library like Underscore/Lodash those are the only options I can see.  Your only other option would be to write your own Underscore/Lodash mix-in, which really isn't that hard.  I'd recommend doing this, as it would allow you still leverage all the other great functions in those libraries while still iterating in a consistent way.</p>\n    "},{"t":"Debug compiled ES6 nodejs app in WebStorm","l":"http://stackoverflow.com/questions/29440811/debug-compiled-es6-nodejs-app-in-webstorm","q":"\n\n<p>I want to debug a node app that runs from <code>babel</code> compiled ES6 files. I have my ES6 source in an <code>src</code> folder and the babel ES5 equivalent in a <code>build</code> folder.</p>\n\n<pre><code>Project root\n|\n| build\n| &gt; ES5 Compiled files\n|\n| src\n| &gt; ES6 Source files\n</code></pre>\n\n<p><strong><em>My goal:</em></strong> Place breakpoints directly in my ES6 source.</p>\n\n<p>I have generated proper source maps and I made a node debug configuration that runs the ES5 main file with project root set as working directory. I can break when I set breakpoints in ES5 compiled files, and it automatically shows my ES6 source.</p>\n\n<p>However I'd like to <strong>place breakpoints directly in the ES6 source</strong>.</p>\n\n<p>Is that even possible?</p>\n    ","a":"\n<p>There was an issue concerning this in <a href=\"https://youtrack.jetbrains.com/issue/WEB-16397\" rel=\"nofollow\">Jetbrains' ticket system</a>. I think this issue is resolved. \nAlso see the corresponding GitHub <a href=\"https://github.com/babel/babel/issues/983\" rel=\"nofollow\">issue in the Babel repo.</a></p>\n\n<p>There is an <a href=\"http://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/\" rel=\"nofollow\">example setup on Jetbrains' blog</a>, basically setting up babel flags such us <code>--source-maps</code>.</p>\n    "},{"t":"why obj={x,y} works in Chrome?","l":"http://stackoverflow.com/questions/30876142/why-obj-x-y-works-in-chrome","q":"\n\n<pre><code>var obj = { type: 'data', x, y, data: []}\n</code></pre>\n\n<p>Obviously this was my typo, <code>{x,y}</code> should have been {x:x, y:y}. But it does what I want, in Chrome, field <code>x</code> gets the value of a local variable <code>x</code>.</p>\n\n<p>But why does it work?</p>\n    ","a":"\n<p>It is part of the ECMA Script 2015 (or ECMA Script 6). You can create new properties in Objects in Object literals, just by specifying the identifiers.</p>\n\n<p>Quoting <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions\">MDN's Object Initializer's Property Definitions section</a>,</p>\n\n<blockquote>\n  <p>With ECMAScript 6, there is a shorter notation available to achieve the same:</p>\n\n<pre><code>var a = \"foo\", \n    b = 42, \n    c = {};\n\n// Shorthand property names (ES6)\nvar o = { a, b, c };\n</code></pre>\n</blockquote>\n\n<hr>\n\n<p>The corresponding section in ECMA Script 6 specification is <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-destructuringassignmentevaluation\">here</a>,</p>\n\n<blockquote>\n  <p><em>AssignmentProperty</em> : <em>IdentifierReference</em> <em>Initializer<sub>opt</sub></em></p>\n  \n  <ol>\n  <li>Let <em>P</em> be StringValue of <em>IdentifierReference</em>.</li>\n  <li>Let <em>lref</em> be ResolveBinding(<em>P</em>).</li>\n  <li>ReturnIfAbrupt(<em>P</em>).</li>\n  <li>Let <em>v</em> be GetV(<em>value</em>, <em>P</em>).</li>\n  <li>ReturnIfAbrupt(<em>v</em>).</li>\n  <li><p>If <em>Initializer<sub>opt</sub></em> is present and <em>v</em> is <strong>undefined</strong>, then</p>\n  \n  <p>a. Let <em>defaultValue</em> be the result of evaluating <em>Initializer</em>.</p>\n  \n  <p>b. Let <em>v</em> be GetValue(<em>defaultValue</em>).</p>\n  \n  <p>c. ReturnIfAbrupt(<em>v</em>).</p>\n  \n  <p>d. If IsAnonymousFunctionDefinition(<em>Initializer</em>) is <strong>true</strong>, then</p>\n  \n  <p>i. Let <em>hasNameProperty</em> be HasOwnProperty(<em>v</em>, \"name\").</p>\n  \n  <p>ii. ReturnIfAbrupt(<em>hasNameProperty</em>).</p>\n  \n  <p>iii. If <em>hasNameProperty</em> is <strong>false</strong>, perform SetFunctionName(<em>v</em>, <em>P</em>).</p></li>\n  <li>Return PutValue(<em>lref</em>,<em>v</em>).</li>\n  </ol>\n</blockquote>\n\n<p>Basically, the specification says that, if you are using just an identifier, a new property with the name of the identifier will be created, and the value will be the actual value of that identifier. It can even be a name of the function.</p>\n\n<pre><code>var a = \"foo\", b = 42, c = {}, d = function () {};    \nconsole.log({a, b, c, d});\n// { a: 'foo', b: 42, c: {}, d: [Function] }\n</code></pre>\n    "},{"t":"Is Number.IsNaN() more broken than isNaN()","l":"http://stackoverflow.com/questions/25176459/is-number-isnan-more-broken-than-isnan","q":"\n\n<p>Soooooo <code>isNaN</code> is apparently broken in JavaScript, with things like:</p>\n\n<pre><code>isNaN('')\nisNaN('   ')\nisNaN(true)\nisNaN(false)\nisNaN([0])\n</code></pre>\n\n<p>Returning false, when they appear to all be... Not a Number...</p>\n\n<p>In ECMAScript 6, the draft includes a new <code>Number.isNaN</code> but it looks like (imo) that this is also broken...</p>\n\n<p>I would expect</p>\n\n<pre><code>Number.isNaN('RAWRRR')\n</code></pre>\n\n<p>To return true, since it's a string, and cannot be converted to a number... However...</p>\n\n<p><img src=\"http://i.stack.imgur.com/VU26M.png\" alt=\"enter image description here\"></p>\n\n<p>It seems that things that I would consider... not a number, are indeed, not, not a number...</p>\n\n<p><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isfinite-number\">http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isfinite-number</a></p>\n\n<p>The examples on MDN say:</p>\n\n<blockquote>\n  <p>Number.isNaN(\"blabla\"); // e.g. this would have been true with isNaN</p>\n</blockquote>\n\n<p>I don't understand how this is \"More robust version of the original global isNaN.\" when I cannot check to see if things are not a number.</p>\n\n<p>This would mean we're still subjected to doing actual type checking as well as checking isNaN... which seems silly...</p>\n\n<p><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isnan-number\">http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isnan-number</a></p>\n\n<p>The ES3 draft here basically says, everything is always false, except with its Number.NaN</p>\n\n<p>Does anyone else find this is broken or am I just not understanding the point of isNaN?</p>\n    ","a":"\n<p><code>isNaN()</code> and <code>Number.isNaN()</code> both test if a value is (or, in the case of <code>isNaN()</code>, can be converted to a number-type value that represents) the <code>NaN</code> value. In other words, \"NaN\" does not simply mean \"this value is not a number\", it specifically means \"this value is a <em>numeric</em> Not-a-Number value according to IEEE-754\".</p>\n\n<p>The reason all your tests above return false is because all of the given values can be converted to a numeric value that is not <code>NaN</code>:</p>\n\n<pre><code>Number('')    // 0\nNumber('   ') // 0\nNumber(true)  // 1\nNumber(false) // 0\nNumber([0])   // 0\n</code></pre>\n\n<p>The reason <code>isNaN()</code> is \"broken\" is because, ostensibly, type conversions aren't supposed to happen when testing values. That is the issue <code>Number.isNaN()</code> is designed to address. In particular, <code>Number.isNaN()</code> will <em>only</em> attempt to compare a value to <code>NaN</code> if the value is a number-type value. Any other type will return false, even if they are literally \"not a number\", because the <em>type</em> of the value <code>NaN</code> is number. See the respective MDN docs for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\" rel=\"nofollow\"><code>isNaN()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\" rel=\"nofollow\"><code>Number.isNaN()</code></a>.</p>\n\n<p>If you simply want to determine whether or not a value is of the number type, use <code>typeof</code> instead:</p>\n\n<pre><code>typeof 'RAWRRR' === 'number' // false\n</code></pre>\n    "},{"t":"Understanding weak maps","l":"http://stackoverflow.com/questions/17545703/understanding-weak-maps","q":"\n\n<p>ECMAScript 6 introduces weak maps, available in Node.JS v0.11.3 with the <code>--harmony</code> flag. Consider the following.</p>\n\n<pre><code>let weakMap = WeakMap();\nlet key = [];\nlet rubbish = 'fish cans';\n\nweakMap.set(key, rubbish);\nrubbish = 'empty bottle';\n\n// Prints \"fish cans\"\nconsole.log(weakMap.get(key));\n</code></pre>\n\n<p>I was under the impression that, for weak maps, the reference from the key to the value is <em>weak</em>, so that if the only reference to the value is the key, then the value can no longer be accessed.</p>\n\n<p>Why then is the value <code>'fish cans'</code> still accessible and not garbage collected? The variable <code>rubbish</code> no longer references it, and the reference from <code>key</code> to <code>'fish cans'</code> is <em>weak</em>, i.e. non-existant from the point of view of the garbage collector. What am I missing?</p>\n    ","a":"\n<p>The weak part is about the keys, not the values. From the current draft:</p>\n\n<blockquote>\n  <p>WeakMap are intended to provide a mechanism for dynamically associating state with an object in a manner that does not “leak” memory resources if, in the absence of the WeakMap, the object otherwise became inaccessible and subject to resource reclamation by the implementation’s garbage collection mechanisms.</p>\n</blockquote>\n\n<p>Say you have a DOM element and want to associate some data with it and use a <code>WeakMap</code> for that: <code>weakMap.set(domElement, data);</code>. When the DOM element gets deleted then the entry in the weak map gets deleted too. </p>\n\n<p>On the other hand you would not want the data to be deleted as long the DOM element exists, just because there is no other reference to it outside the weak map. </p>\n\n<p>Apart from that <code>'fish cans'</code> is a primitive type and as such not subject to the garbage collection.</p>\n    "},{"t":"How to use ECMAScript6 modules within webpages","l":"http://stackoverflow.com/questions/28761120/how-to-use-ecmascript6-modules-within-webpages","q":"\n\n<p>I'm pretty excited about using ECMAScript 6 features now via Babeljs - in particular, I'd love to start making my JavaScript code more modular using the new modules feature.</p>\n\n<p>Here's what I've written so far:</p>\n\n<pre><code>// ECMAScript 6 code - lib.js\nexport const sqrt = Math.sqrt;\nexport function square (x) {\n  return x * x;\n}\n\nexport function diag (x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n// ECMAScript 6 code - main.js\nimport { square, diag } from 'lib';\nconsole.log(square(11));\nconsole.log(diag(4, 3));\n</code></pre>\n\n<p>I understand that I can transpile this code from ES6 to ES5 via babel on the command line:</p>\n\n<pre><code>babel lib.js &gt; lib6to5.js\nbabel main.js &gt; main6to5.js\n</code></pre>\n\n<p><strong>But what do I need to do to use this code within my HTML?</strong></p>\n\n<p>For example, what would this index.html file look like:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!-- index.html --&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;ECMAScript 6&lt;/title&gt;\n\n    &lt;!-- What goes here? \n     How do I include main6to5.js and lib6to5.js to make this work in the browser? --&gt;\n    &lt;script src=\"?????\"&gt;&lt;/script&gt;\n\n  &lt;/head&gt;\n  &lt;body&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Thank you</p>\n    ","a":"\n<p><strong>Without using Modules:</strong>\nIf you are not using modules (imports/exports), then you can simply transpile your code into ES5 and include those ES5 files in your html.\nExample:</p>\n\n<pre><code>// ES6 - index.js\n// arrow function\nvar result = [1, 2, 3].map(n =&gt; n * 2);\nconsole.log(result);\n\n// enhanced object literal\nvar project = \"helloWorld\";\nvar obj = {\n    // Shorthand for ‘project: project’\n    project,\n    // Methods\n    printProject() {\n     console.log(this.project);\n    },\n    [ \"prop_\" + (() =&gt; 42)() ]: 42\n};\nconsole.log(obj.printProject());\nconsole.log(obj);\n</code></pre>\n\n<p>Transpile to es5: <code>babel index.js &gt; es5.js</code></p>\n\n<p>In <code>index.html</code>, include <code>&lt;script src=\"es5.js\"&gt;&lt;/script&gt;</code>\nWill print out the following in console:</p>\n\n<pre><code>[2,4,6]\nhelloWorld\n{\"project\":\"helloWorld\",\"prop_42\":42}\n</code></pre>\n\n<p><strong>Using Modules:</strong> Now if you are using modules (which is your case with <code>lib.js</code> and <code>main.js</code>), after converting your code into ES5 you also have to bundle them (from AMD/CommonJS/Modules to code that your browser can understand). You can do this with various build systems like <a href=\"http://gulpjs.com/\">gulp</a>, <a href=\"http://webpack.github.io/\">webpack</a>, <a href=\"http://browserify.org/\">browserify</a>, etc. I'm going to use browserify as an example here.</p>\n\n<p>Say my folder structure looks like this:</p>\n\n<pre><code>es6\n|- src\n  |- lib.js\n  |- main.js\n|- compiled\n|- index.html\n</code></pre>\n\n<p>I run babel to transpile my files <code>/src</code> to <code>/compiled</code> folder: <code>babel src --out-dir compiled</code>.</p>\n\n<p>Now I have my ES5 code in the compiled folder. I install browserify in the cmd line and then bundle my main.js (entry point) in my compiled folder</p>\n\n<pre><code>~/es6 » npm install --global browserify\n~/es6 » browserify ./compiled/main.js -o ./bundle.js\n</code></pre>\n\n<p>Now I have <code>bundle.js</code> which is look like this:</p>\n\n<pre><code>(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&amp;&amp;require;if(!u&amp;&amp;a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&amp;&amp;require;for(var o=0;o&lt;r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nexports.square = square;\nexports.diag = diag;\nvar sqrt = exports.sqrt = Math.sqrt;\n\nfunction square(x) {\n    return x * x;\n}\n\nfunction diag(x, y) {\n    return sqrt(square(x) + square(y));\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _lib = require(\"./lib\");\n\nvar square = _lib.square;\nvar diag = _lib.diag;\n\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n},{\"./lib\":1}]},{},[2]);\n</code></pre>\n\n<p>Then in your index.html:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;ECMAScript 6&lt;/title&gt;\n\n    &lt;script src=\"./bundle.js\"&gt;&lt;/script&gt;\n\n  &lt;/head&gt;\n  &lt;body&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Then simply open up your <code>index.html</code>, and your console should give you the following:</p>\n\n<pre><code> 121           bundle.js:27\n 5             bundle.js:28\n</code></pre>\n    "},{"t":"Why can ES6 Symbol properties be made enumerable by Object.defineProperty?","l":"http://stackoverflow.com/questions/31029612/why-can-es6-symbol-properties-be-made-enumerable-by-object-defineproperty","q":"\n\n<p>In ES6 properties can be defined as symbol properties:</p>\n\n<pre><code>var symbol = Symbol();\nvar object = {};\nobject[symbol] = 'value';\n</code></pre>\n\n<p>MDN defines enumerable properties as 'those which can be iterated by a for..in loop' (1). Symbol properties are never iterated by a for...in loop, therefore they can be considered non-enumerable (2).</p>\n\n<p>Does it make any sense, then, that you can do this:</p>\n\n<pre><code>Object.defineProperty(object, symbol, {\n    value: 'value',\n    enumerable: true\n});\n</code></pre>\n\n<p>and that querying object for it's descriptor does indeed confirm that this property is enumerable:</p>\n\n<pre><code>Object.getOwnPropertyDescriptor(object, symbol)\n// -&gt; { enumerable: true }\n</code></pre>\n\n<p>Why? What use is this?</p>\n\n<p>(1) <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties</a></p>\n\n<p>(2) for...in uses <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\"><code>[[Enumerate]]</code></a>, which only includes string keys. Probably the definition on MDN should be changed now that we have symbol properties.</p>\n    ","a":"\n<p>Yes, there's a reason for allowing <code>Symbol</code> properties to be enumerable: <code>Object.assign</code>:</p>\n\n<pre><code>let s1 = Symbol();\nlet s2 = Symbol();\nlet s3 = Symbol();\nlet original = {};\noriginal[s1] = \"value1\";                // Enumerable\nObject.defineProperty(original, s2, {   // Enumerable\n  enumerable: true,\n  value: \"value2\"\n});\nObject.defineProperty(original, s3, {   // Non-enumerable\n  value: \"value3\"\n});\nlet copy = {};\nObject.assign(copy, original);\nconsole.log(\"copy[s1] is \" + copy[s1]); // value1, because it was enumerable\nconsole.log(\"copy[s2] is \" + copy[s2]); // value2, because it was enumerable\nconsole.log(\"copy[s3] is \" + copy[s3]); // undefined, because it wasn't enumerable\n</code></pre>\n\n<p><a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=let%20s1%20%3D%20Symbol()%3B%0Alet%20s2%20%3D%20Symbol()%3B%0Alet%20s3%20%3D%20Symbol()%3B%0Alet%20original%20%3D%20%7B%7D%3B%0Aoriginal%5Bs1%5D%20%3D%20%22value1%22%3B%0AObject.defineProperty(original%2C%20s2%2C%20%7B%0A%20%20enumerable%3A%20true%2C%0A%20%20value%3A%20%22value2%22%0A%7D)%3B%0AObject.defineProperty(original%2C%20s3%2C%20%7B%0A%20%20value%3A%20%22value3%22%0A%7D)%3B%0Alet%20copy%20%3D%20%7B%7D%3B%0AObject.assign(copy%2C%20original)%3B%0Aconsole.log(%22copy%5Bs1%5D%20is%20%22%20%2B%20copy%5Bs1%5D)%3B%20%2F%2F%20value1%2C%20because%20it%20was%20enumerable%0Aconsole.log(%22copy%5Bs2%5D%20is%20%22%20%2B%20copy%5Bs2%5D)%3B%20%2F%2F%20value2%2C%20because%20it%20was%20enumerable%0Aconsole.log(%22copy%5Bs3%5D%20is%20%22%20%2B%20copy%5Bs3%5D)%3B%20%2F%2F%20undefined%2C%20because%20it%20wasn't%20enumerable\" rel=\"nofollow\">Live Copy</a> on Babel's REPL.</p>\n\n<hr>\n\n<p>This is a CW because it was the outgrowth of the comments on the question.</p>\n    "},{"t":"How to consume npm package with es6 module via Webpack and 6to5?","l":"http://stackoverflow.com/questions/27305954/how-to-consume-npm-package-with-es6-module-via-webpack-and-6to5","q":"\n\n<p>Let's say I want to use Immutable in my project (or any given npm package). I have <code>npm install</code>ed it, so it is in <code>node_modules</code>. Of course, it has CommonJS exports there. I, however, want to use es6 modules in my project.</p>\n\n<p>I am using Webpack to compile it all together, with the 6to5-loader to deal with es6 module syntax.</p>\n\n<p>In my source file, I say <code>import Immutable from 'immutable';</code> --- but this causes a problem because the es6 <code>import</code> is looking for an es6 <code>default</code> to have been exported, which isn't the case (for Immutable or probably almost any other npm package). The compiled code ends up looking like this: <code>var Immutable = require('immutable')[\"default\"];</code> --- which of course throws an error, since there is no <code>default</code> property to find.</p>\n\n<p>Can I consume the npm packages with es6 modules?</p>\n    ","a":"\n<p><a href=\"http://6to5.github.io/\">6to5</a> contributor here. You're looking for the following:</p>\n\n<pre><code>import * as Immutable from 'immutable';\n// compiles to:\nvar Immutable = require('immutable');\n</code></pre>\n\n<p><a href=\"http://6to5.github.io/repl.html#?code=import%20*%20as%20Immutable%20from%20'immutable'&amp;experimental=true&amp;playground=true&amp;evaluate=true\">Interactive demo</a></p>\n\n<blockquote>\n  <p>Note: This is with either&nbsp;the <code>common</code> or <code>commonInterop</code> modules option. For others, see: <a href=\"http://6to5.github.io/modules.html\">http://6to5.github.io/modules.html</a></p>\n</blockquote>\n    "},{"t":"Detect for…of Loop Support in JavaScript","l":"http://stackoverflow.com/questions/18284253/detect-for-of-loop-support-in-javascript","q":"\n\n<p>Is this possible? Example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var parts = [1,2,3,4,5];\nfor (part of parts) {\n    console.debug(part);\n}\n</code></pre>\n\n<p>I want to detect if doing this is possible.</p>\n    ","a":"\n<p>You can always try-catch such stuff. But you need <code>eval</code> as well, as some javascript engines will bail with a SyntaxError early.</p>\n\n<pre><code>try {\n  eval(\"for (var i of []);\");\n  console.log(\"yep\");\n} catch(ex) {\n  console.log(\"nope\");\n}\n</code></pre>\n\n<p>Tested in Firefox (\"yep\") and Chrome (\"nope\").</p>\n    "},{"t":"Are ES6 module imports hoisted?","l":"http://stackoverflow.com/questions/29329662/are-es6-module-imports-hoisted","q":"\n\n<p>I know that in the new ES6 module syntax, the Javascript engine will not have to <strong>evaluate</strong> the code to know about all the imports/exports, it will only <strong>parse</strong> it and \"know\" what to load.\nThis sounds like hoisting, are the ES6 modules hoisted? and if so, are they all will be loaded before running the code?</p>\n\n<p>Is this code possible?</p>\n\n<pre><code>import myFunc1 from 'externalModule1';\n\nmyFunc2();\n\nif (Math.random()&gt;0.5) {\n  import myFunc2 from 'externalModule2';\n}\n</code></pre>\n\n<p>Thanks</p>\n    ","a":"\n<p>After doing some more research, I've found:</p>\n\n<ul>\n<li>Imports ARE hoisted! according to the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-module-records\" rel=\"nofollow\">spec</a> of <strong><em>ModuleDeclarationInstantiation</em></strong></li>\n<li>ALL the dependent Modules will be loaded before running any code.</li>\n</ul>\n\n<p>This code will have no errors, and will work:</p>\n\n<pre><code>localFunc();\n\nimport {myFunc1} from 'mymodule';\n\nfunction localFunc() { // localFunc is hoisted\n    myFunc1();\n}\n</code></pre>\n    "},{"t":"Symbol.toPrimitive vs Object.prototype.valueOf","l":"http://stackoverflow.com/questions/27730211/symbol-toprimitive-vs-object-prototype-valueof","q":"\n\n<p>In ECMAScript 6, a new <code>Symbol.toPrimitive</code> symbol is introduced, which, when used as an object key, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" rel=\"nofollow\">should define</a> a function to return the <em>primitive value</em> of an object:</p>\n\n<pre><code>let object = {\n    aNumber: 0,\n    [Symbol.toPrimitive]() {\n        return this.aNumber;\n    }\n};\n\nobject.aNumber = 5;\nconsole.log(object + 2) // 7\n</code></pre>\n\n<p>(note that neither Chrome Canary nor Firefox Dev Edition support this syntax at the moment, so it’s impossible to test this piece of code.)</p>\n\n<p>However, there is also the <code>Object.prototype.valueOf</code> function, which, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\" rel=\"nofollow\">according to the documentation</a>, could be redefined to convert an object to the primitive value:</p>\n\n<pre><code>let object = {\n    aNumber: 0,\n    valueOf() {\n        return this.aNumber;\n    }\n};\n\nobject.aNumber = 5;\nconsole.log(object + 2) // Works in Firefox Dev Edition and prints “7”\n</code></pre>\n\n<p>So, which of these ways to convert an object to its primitive value should be used in ES6 when defining a new object?</p>\n    ","a":"\n<p>Right now, since support for <code>Symbol</code> is practically non-existent, I personally wouldn't use it, but you probably should once it gains more support.</p>\n\n<p>However, <strong>you should override both <code>obj.valueOf</code> and <code>obj.toString</code></strong> to replicate the behaviour of <code>Symbol.toPrimitive</code>, unless the specific behaviour is intended.</p>\n\n<p>This is because when an internal operation tries to convert an argument to a string (using the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring\"><code>ToString</code></a> internal method), it will try to use <code>obj.toString</code> before <code>obj.valueOf</code></p>\n\n<p><code>Symbol.toPrimitive</code> will override the <code>toString</code> method of the object, while just setting <code>valueOf</code> will not.</p>\n    "},{"t":"How can I write and test ECMAScript 6 (ES6) code now? [closed]","l":"http://stackoverflow.com/questions/26177776/how-can-i-write-and-test-ecmascript-6-es6-code-now","q":"\n\n<p>I would like to start writing code using the up and coming ECMAScript 6 (ES6) so as to start getting to grips with the new syntax.</p>\n\n<p>Is there some kind of web resource or browser plugin that I can use to play (write and test code) on what we  currently have in regards to ES6?</p>\n\n<p>I was lead to believe that using Google Chrome Canary might be able to help. So I downloaded Canary, I enabled a couple of features in Canary:</p>\n\n<p><strong>Enable Experimental JavaScript Mac, Windows, Linux, Chrome OS, Android</strong></p>\n\n<p><strong>Enable web pages to use experimental JavaScript features. #enable-javascript-harmony\nEnable**</strong></p>\n\n<p>And after testing the <code>let</code> block scope in a for loop</p>\n\n<pre><code>for (let i = 0; i &lt; 10; i++) {\n   console.log(i);\n}\n</code></pre>\n\n<p>I got a syntax error: <strong>SyntaxError: Unexpected identifier</strong></p>\n\n<p>All answers appreciated, thanks</p>\n    ","a":"\n<p>The following works in Chrome 37 (current Chrome) with the Experimental JavaScript flag enabled:</p>\n\n<pre><code>(function () {\n   \"use strict\"; \n   for (let i = 0; i &lt; 10; i++) {\n      console.log(i);\n   }\n})()\n</code></pre>\n\n<p>Outside strict mode, you should see <code>SyntaxError: Illegal let declaration outside extended mode</code> or <code>SyntaxError: Unexpected identifier</code> if you're not in strict mode, or possibly <code>SyntaxError: Unexpected strict mode reserved word</code> if the Experimental JavaScript flag is not enabled.</p>\n\n<p>You can also compile your code with with <a href=\"https://babeljs.io/\" rel=\"nofollow\">Babel</a> or with <a href=\"https://google.github.io/traceur-compiler/demo/repl.html#%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20console.log(i)%3B%0A%20%20%20%20%20%20%20%7D\" rel=\"nofollow\">Traceur and the <code>--block-binding</code> flag enabled</a>.</p>\n\n<p>See <a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"nofollow\">kangax's ES6 compatibility table</a> for more.</p>\n    "},{"t":"In javascript should I use const instead of var whenever possible?","l":"http://stackoverflow.com/questions/26015747/in-javascript-should-i-use-const-instead-of-var-whenever-possible","q":"\n\n<p>If creating a reference to an object, and the reference is not going to change (even though the object will), is it better to use const instead of var?</p>\n\n<p>For example:</p>\n\n<pre><code>const moment = require('moment')\n\nexports.getQuotation = function(value) {\n\n    const quotation = {};\n    quotation.value = value;\n    quotation.expiryDate = moment().add(7, 'days');\n\n    // Do some other stuff with quotation perhaps\n\n    return quotation;\n\n};\n</code></pre>\n    ","a":"\n<p>If you check MDN, for its reference you can find that its an experimental technology which is part of ES6 proposal. Its browser support is limited. </p>\n\n<p>Reference for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\" rel=\"nofollow\"><strong>const</strong></a> from MDN</p>\n\n<blockquote>\n  <p>This is an experimental technology, part of the Harmony (ECMAScript 6)\n  proposal. Because this technology's specification has not stabilized,\n  check the compatibility table for usage in various browsers. Also note\n  that the syntax and behavior of an experimental technology is subject\n  to change in future version of browsers as the spec changes.</p>\n</blockquote>\n\n<p>So this answers whether you should use everywhere. :)</p>\n\n<p>Also if you want to create properties in objects which should not be allowed to change, then you should check <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\" rel=\"nofollow\"><code>Object.defineProperties()</code></a> and the  use of <code>writable</code> attribute.</p>\n    "},{"t":"Do for loops implicitly create a block?","l":"http://stackoverflow.com/questions/17352917/do-for-loops-implicitly-create-a-block","q":"\n\n<p>I am playing with <code>let</code> in Node.JS (requires the flags <code>--harmony</code> and <code>--use-strict</code>). As I understand, the <code>let</code> statement allows for block scoped declarations. Consider the following:</p>\n\n<pre><code>let a;\nfor(let i = 0; i &lt; 3; i += 1) {\n  console.log(i);\n}\n</code></pre>\n\n<p>How many block scopes are involved? In which block scope does <code>i</code> live in? Am I correct in thinking that for this example to work, there are <em>three</em> block scopes involved, with one scope implicitly created by the <code>for</code> loop, as follows?</p>\n\n<pre><code>{ // block #1\n  let a;\n  { // block #2 (contains `i`)\n    let i;\n    for(i = 0; i &lt; 3; i += 1) { // block #3\n      console.log(i);\n    }\n  }\n}\n</code></pre>\n    ","a":"\n<p>Based on the most recent (May 14, 2013) <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aspecification_drafts\" rel=\"nofollow\">draft of ES6</a>: yes.</p>\n\n<p>You can find the following under section 12.6.3, which states that an additional <em>Environment</em> (scope) is created when a <code>for</code> statement includes a <em>LexicalDeclaration</em> (<code>let</code> or <code>const</code>):</p>\n\n<blockquote>\n  <p><em>IterationStatement</em> : <strong>for</strong> ( <em>LexicalDeclarationNoIn</em> ; <em>Expression<sub>opt</sub></em> ; <em>Expression<sub>opt</sub></em> ) <em>Statement</em></p>\n  \n  <ol>\n  <li>Let <em>oldEnv</em> be the running execution context’s LexicalEnvironment.</li>\n  <li><strong>Let <em>loopEnv</em> be the result of calling NewDeclarativeEnvironment passing <em>oldEnv</em> as the argument.</strong></li>\n  <li>...</li>\n  </ol>\n</blockquote>\n\n<p>Keep in mind, though, that it's still subject to change.</p>\n    "},{"t":"Why are Objects not Iterable in JavaScript?","l":"http://stackoverflow.com/questions/29886552/why-are-objects-not-iterable-in-javascript","q":"\n\n<p>Why are objects not iterable by default?</p>\n\n<p><strong>I see questions all the time related to iterating objects, the common solution being to iterate over an object's properties and accessing the values within an object that way. This seems so common that it makes me wonder why objects themselves aren't iterable.</strong></p>\n\n<p>Statements like the ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow\"><code>for...of</code></a> would be nice to use for objects by default. Because these features are only available for special \"iterable objects\" which don't include <code>{}</code> objects, we have to go through hoops to make this work for objects we want to use it for. </p>\n\n<blockquote>\n  <p>The for...of statement creates a loop Iterating over <strong>iterable objects</strong>\n  (including Array, Map, Set, arguments object and so on)...</p>\n</blockquote>\n\n<p>For example using an ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">generator function</a>:</p>\n\n<pre><code>var example = {a: {e: 'one', f: 'two'}, b: {g: 'three'}, c: {h: 'four', i: 'five'}};\n\nfunction* entries(obj) {\n   for (let key of Object.keys(obj)) {\n     yield [key, obj[key]];\n   }\n}\n\nfor (let [key, value] of entries(example)) {\n  console.log(key);\n  console.log(value);\n  for (let [key, value] of entries(value)) {\n    console.log(key);\n    console.log(value);\n  }\n}\n</code></pre>\n\n<p>The above properly logs data in the order I expect it to when I run the code in Firefox (which supports <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" rel=\"nofollow\">ES6</a>):</p>\n\n<p><img src=\"http://i.stack.imgur.com/SSJbr.png\" alt=\"output of hacky for...of\"></p>\n\n<p><strong>By default, <code>{}</code> objects are not iterable, but why? Would the disadvantages outweigh the potential benefits of objects being iterable? What are the issues associated with this?</strong></p>\n\n<p>In addition, because <code>{}</code> objects are different from \"Array-like\" collections and \"iterable objects\" such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\" rel=\"nofollow\"><code>NodeList</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\" rel=\"nofollow\"><code>HtmlCollection</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\" rel=\"nofollow\"><code>arguments</code></a>, they can't be converted into Arrays.</p>\n\n<p>For example:</p>\n\n<p><code>var argumentsArray = Array.prototype.slice.call(arguments);</code> </p>\n\n<p>or be used with Array methods:</p>\n\n<p><code>Array.prototype.forEach.call(nodeList, function (element) {})</code>.</p>\n\n<p><strong>Besides the questions I have above, I would love to see a working example on how to make <code>{}</code> objects into iterables, especially from those who have mentioned the <code>[Symbol.iterator]</code>.</strong> This should allow these new <code>{}</code> \"iterable objects\" to use statements like <code>for...of</code>. Also, I wonder if making objects iterable allow them to be converted into Arrays.</p>\n\n<p>I tried the below code, but I get a <code>TypeError: can't convert undefined to object</code>.</p>\n\n<pre><code>var example = {a: {e: 'one', f: 'two'}, b: {g: 'three'}, c: {h: 'four', i: 'five'}};\n\n// I want to be able to use \"for...of\" for the \"example\" object.\n// I also want to be able to convert the \"example\" object into an Array.\nexample[Symbol.iterator] = function* (obj) {\n   for (let key of Object.keys(obj)) {\n     yield [key, obj[key]];\n   }\n};\n\nfor (let [key, value] of example) { console.log(value); } // error\nconsole.log([...example]); // error\n</code></pre>\n    ","a":"\n<p>I'll give this a try.  Note that I'm not affiliated with ECMA and have no visibility into their decision-making process, so I cannot definitively say <em>why</em> they have or have not done anything.  However, I'll state my assumptions and take my best shot.</p>\n\n<p><strong>1.  Why add a <code>for...of</code> construct in the first place?</strong></p>\n\n<p>JavaScript already includes a <code>for...in</code> construct that can be used to iterate the properties of an object.  However, it's <a href=\"http://stackoverflow.com/a/243778/609251\">not really a forEach loop</a>, as it enumerates all of the properties on an object and tends to only work predictably in simple cases.  </p>\n\n<p>It breaks down in more complex cases (including with arrays, where its use tends to be either <a href=\"http://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript\">discouraged or thoroughly obfuscated</a> by the safeguards needed to for use <code>for...in</code> with an array <em>correctly</em>).  You can work around that by using <code>hasOwnProperty</code> (among other things), but that's a bit clunky and inelegant.  </p>\n\n<p>So therefore my assumption is that the <code>for...of</code> construct is being added to address the deficiencies associated with the <code>for...in</code> construct, and provide greater utility and flexibility when iterating things.  People tend to treat <code>for...in</code> as a <code>forEach</code> loop that can be generally applied to any collection and produce sane results in any possible context, but that's not what happens.  The <code>for...of</code> loop fixes that.</p>\n\n<p>I also assume that it's important for existing ES5 code to run under ES6 and produce the same result as it did under ES5, so breaking changes cannot be made, for instance, to the behavior of the <code>for...in</code> construct.  </p>\n\n<p><strong>2.  How does <code>for...of</code> work?</strong></p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"nofollow\">reference documentation</a> is useful for this part.  Specifically, an object is considered <code>iterable</code> if it defines the <code>Symbol.iterator</code> property.  </p>\n\n<p>The property-definition should be a function that returns the items in the collection, one, by, one, and sets a flag indicating whether or not there are more items to fetch.  Predefined implementations are provided for <a href=\"http://jsfiddle.net/rncr3ppz/1/\" rel=\"nofollow\">some object-types</a>, and it's relatively clear that using <code>for...of</code> simply delegates to the iterator function.</p>\n\n<p>This approach is useful, as it makes it very straightforward to provide your own iterators.  I might say the approach could have presented practical issues due to its reliance upon defining a property where previously there was none, except from what I can tell that's not the case as the new property is essentially ignored unless you deliberately go looking for it (i.e. it will not present in <code>for...in</code> loops as a key, etc.).  So that's not the case.</p>\n\n<p>Practical non-issues aside, it may have been considered conceptually controversial to start all objects off with a new pre-defined property, or to implicitly say that \"every object is a collection\".</p>\n\n<p><strong>3.  Why are objects not <code>iterable</code> using <code>for...of</code> by default?</strong></p>\n\n<p>My <em>guess</em> is that this is a combination of:</p>\n\n<ol>\n<li>Making all objects <code>iterable</code> by default may have been considered unacceptable because it adds a property where previously there was none, or because an object isn't (necessarily) a collection.  As Felix notes, \"what does it mean to iterate over a function or a regular expression object\"?</li>\n<li>Simple objects can already be iterated using <code>for...in</code>, and it's not clear what a built-in iterator implementation could have done differently/better than the existing <code>for...in</code> behavior.  So even if #1 is wrong and adding the property was acceptable, it may not have been seen as <em>useful</em>.</li>\n<li>Users who want to make their objects <code>iterable</code> can easily do so, by defining the <code>Symbol.iterator</code> property.</li>\n<li>The ES6 spec also provides a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"nofollow\">Map</a> type, which <em>is</em> <code>iterable</code> by default and has some other small advantages over using a plain object as a <code>Map</code>.</li>\n</ol>\n\n<p>There's even an example provided for #3 in the reference documentation:</p>\n\n<pre><code>var myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n};\n\nfor (var value of myIterable) {\n    console.log(value);\n}\n</code></pre>\n\n<p>Given that objects can easily be made <code>iterable</code>, that they can already be iterated using <code>for...in</code>, and that there's likely not clear agreement on what a default object iterator should do (if what it does is meant to be somehow different from what <code>for...in</code> does), it seems reasonable enough that objects were not made <code>iterable</code> by default.</p>\n\n<p>Note that your example code can be rewritten using <code>for...in</code>:</p>\n\n<pre><code>for (let levelOneKey in object) {\n    console.log(levelOneKey);         //  \"example\"\n    console.log(object[levelOneKey]); // {\"random\":\"nest\",\"another\":\"thing\"}\n\n    var levelTwoObj = object[levelOneKey];\n    for (let levelTwoKey in levelTwoObj ) {\n        console.log(levelTwoKey);   // \"random\"\n        console.log(levelTwoObj[levelTwoKey]); // \"nest\"\n    }\n}\n</code></pre>\n\n<p>...or you can also make your object <code>iterable</code> in the way you want by doing something like the following (or you can make <em>all</em> objects <code>iterable</code> by assigning to <code>Object.prototype[Symbol.iterator]</code> instead):</p>\n\n<pre><code>obj = { \n    a: '1', \n    b: { something: 'else' }, \n    c: 4, \n    d: { nested: { nestedAgain: true }}\n};\n\nobj[Symbol.iterator] = function() {\n    var keys = [];\n    var ref = this;\n    for (var key in this) {\n        //note:  can do hasOwnProperty() here, etc.\n        keys.push(key);\n    }\n\n    return {\n        next: function() {\n            if (this._keys &amp;&amp; this._obj &amp;&amp; this._index &lt; this._keys.length) {\n                var key = this._keys[this._index];\n                this._index++;\n                return { key: key, value: this._obj[key], done: false };\n            } else {\n                return { done: true };\n            }\n        },\n        _index: 0,\n        _keys: keys,\n        _obj: ref\n    };\n};\n</code></pre>\n\n<p>You can play with that here (in Chrome, at lease):  <a href=\"http://jsfiddle.net/rncr3ppz/5/\" rel=\"nofollow\">http://jsfiddle.net/rncr3ppz/5/</a></p>\n\n<p><strong>Edit</strong></p>\n\n<p>And in response to your updated question, yes, it is possible to convert an <code>iterable</code> to an array, using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"nofollow\">spread operator</a> in ES6.</p>\n\n<p>However, this doesn't seem to be working in Chrome yet, or at least I cannot get it to work in my jsFiddle.  In theory it should be as simple as:</p>\n\n<pre><code>var array = [...myIterable];\n</code></pre>\n    "},{"t":"What does Function.prototype.toMethod() do?","l":"http://stackoverflow.com/questions/27511704/what-does-function-prototype-tomethod-do","q":"\n\n<p>I noticed that the <code>Function.prototype</code> has a <code>toMethod()</code> method in experimental JavaScript, but what does that actually do? And how do I use it?</p>\n    ","a":"\n<p>It's very similar to the <code>bind</code> method of function objects. However, instead of creating a new function with a bound <code>this</code> value, it creates a new function with a bound <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#table-28\"><code>[[HomeObject]]</code></a>, which is the reference that is used for <code>super</code> calls:</p>\n\n<blockquote>\n  <p><code>[[HomeObject]]</code> (Object): If the function uses <code>super</code>, this is the object whose <code>[[GetPrototypeOf]]</code> provides the object where super property lookups begin.</p>\n</blockquote>\n\n<p>Consider this example (not using any class syntax):</p>\n\n<pre><code>var base = {\n    foo: function() {\n         console.log(\"base foo called on\", this);\n    }\n};\nbase.foo(); // base foo called on base\nvar obj = Object.create(base);\nobj.foo(); // base foo called on obj\n\nobj.foo = function() {\n    super.foo();\n};\nobj.foo(); // ReferenceError: this method has no home\nobj.bar = obj.foo.toMethod(obj);\nobj.bar(); // base foo called on obj\n\nobj.baz = function() {\n    super();\n};\nobj.baz(); // ReferenceError: this constructor has no parent class\nReflect.setPrototypeOf(obj.baz, base.foo);\nobj.baz(); // base foo called on obj\n</code></pre>\n    "},{"t":"testing code transpiled for es6","l":"http://stackoverflow.com/questions/28755575/testing-code-transpiled-for-es6","q":"\n\n<p>I'm preparing to write some tests with Qunit for a Backbone app that is written for ES6 with babel.js applied to it so that it can run in contemporary browsers. To ensure that I have qunit set up properly and all the paths properly specified, I first tested an Backbone model written in ES5 and everything worked as expected. However, I then included <code>bundle.js</code> (which contains the results of my ES6 code with babel.js applied to it) into my <code>tests/index.html</code>, and wrote </p>\n\n<pre><code> test ( \"Code transformed by babel.js contained in bundle.js can be tested\", function(){\n    expect(1);\n    var es6model = new ES6Model();\n    equal( es6model.get(\"defaultproperty\"), \"defaultstring\", \"defaultproperty should be defaultstring\");\n })\n</code></pre>\n\n<p>and it's telling me <code>ES6Model</code> is not defined.</p>\n\n<p>Question: is there something about code transformed by babeljs that would make it more challenging to be tested using Qunit?</p>\n\n<p>In addition to all the complex js that babel writes at the top of the file, the code in <code>bundle.js</code> looks like this</p>\n\n<pre><code>var Model = Backbone.Model;\nvar View = Backbone.View;\nvar Collection = Backbone.Collection;\nvar Router = Backbone.Router;\nvar LocalStorage = Backbone.LocalStorage;\n\nvar ES6Model = (function (Model) {\n    function ES6Model() {\n        _classCallCheck(this, ES6Model);\n\n        if (Model != null) {\n            Model.apply(this, arguments);\n        }\n    }\n\n    _inherits(ES6Model, Model);\n\n    _prototypeProperties(Gopher, null, {\n        defaults: {\n            value: function defaults() {\n\n                return {\n                    defaultproperty: \"defaultstring\"\n\n                };\n            },\n            writable: true,\n            configurable: true\n        }\n    });\n\n    return ES6Model;\n})(Model);\n</code></pre>\n\n<p>Update</p>\n\n<p>I include all the code created by babel.js in a file called <code>bundle.js</code> and include that in my index.html like I would any other js file, and it runs without issue, which is why I assumed I could test it like any other js code. However, it should be noted (as the commenter pointed out) that the code created by babel.js is contained in a module..this is how bundle.js begins with the model I'm trying to test coming after</p>\n\n<pre><code>(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&amp;&amp;require;if(!u&amp;&amp;a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&amp;&amp;require;for(var o=0;o&lt;r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n</code></pre>\n\n<p>Update</p>\n\n<p>I am using browserify to apply babel to the various files of my ES6 code which creates a bundle. To run the tests, I do <code>npm run test</code> and to compile the bundle, I try both of these (one of them uses <code>modules --ignore</code>) but neither of them work</p>\n\n<p>\"scripts\": {</p>\n\n<pre><code>    \"test\": \"./node_modules/karma/bin/karma start --log-level debug\",\n    \"build-js\": \"browserify app/app.js app/views.js app/models.js  app/d3charts.js -t babelify &gt; app/bundle.js\",\n    \"t-build\": \"browserify app/app.js app/views.js app/models.js app/d3charts.js -t [babelify --modules ignore] &gt; app/test/test-bundle.js\"\n  },\n</code></pre>\n\n<p>(The application is a Backbone.js app).</p>\n\n<p>This is my karma config file. I don't have any further configuration (so I'm guessing my inclusion of karma-require is a waste but maybe necessary...)</p>\n\n<pre><code>module.exports = function(config) {\n  config.set({\n    basePath: '',\n    frameworks: ['qunit'],\n    plugins: ['karma-qunit', 'karma-phantomjs-launcher', 'karma-requirejs'],\n\n    files : [\n      'app/test/jquery.js',     \n      'app/test/d3.js',\n      'app/test/json2.js',\n      'app/test/underscore.js',\n      'app/test/backbone.js',\n      'app/backbone.localStorage.js',\n\n      'app/test/test-bundle.js',\n      'app/test/tests.js'\n\n    ],\n\n\n    reporters: ['progress'],\n\n    // web server port\n    port: 8080,\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: false,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['PhantomJS'],\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: true,\n\n    // See http://stackoverflow.com/a/27873086/1517919\n    customLaunchers: {\n        Chrome_sandbox: {\n            base: 'Chrome',\n            flags: ['--no-sandbox']\n        }\n    }\n  });\n};\n</code></pre>\n    ","a":"\n<p>For reference they way to do this with traceur is to compile the traceur-runtime.js file into the code (see <a href=\"https://github.com/google/traceur-compiler/issues/777\" rel=\"nofollow\">https://github.com/google/traceur-compiler/issues/777</a> - a similar variable not defined error).</p>\n\n<p>E.g.</p>\n\n<p><code>traceur --out out/src/yourcode.js --script lib/traceur-runtime.js --script test/yourcode.js</code> </p>\n\n<p>(see Compiling Offline <a href=\"https://github.com/google/traceur-compiler/wiki/Compiling-Offline\" rel=\"nofollow\">https://github.com/google/traceur-compiler/wiki/Compiling-Offline</a>).</p>\n    "},{"t":"What does “this” refer to in fat arrow functions in ES6?","l":"http://stackoverflow.com/questions/28371982/what-does-this-refer-to-in-fat-arrow-functions-in-es6","q":"\n\n<p>I've read in several places that the key difference is that \"<code>this</code> is lexically bound in fat arrow functions.\" That's all well and good, but I don't actually know what that means.</p>\n\n<p>I know it means it's unique within the confines of the braces defining the function's body, but I couldn't actually tell you the output of the following code, because I have no idea what <code>this</code> is referring to, unless it's referring to the fat arrow function itself....which doesn't seem useful.</p>\n\n<pre><code>var testFunction = () =&gt; { console.log(this) };\ntestFunction();\n</code></pre>\n    ","a":"\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this\" rel=\"nofollow\">Arrow functions capture the <code>this</code> value of the enclosing context</a></p>\n\n<pre><code>function Person(){\n  this.age = 0;\n\n  setInterval(() =&gt; {\n    this.age++; // |this| properly refers to the person object\n  }, 1000);\n}\n\nvar p = new Person();\n</code></pre>\n\n<p>So, to directly answer your question, <code>this</code> inside your arrow function would have the same value as it did right before the arrow function was assigned.</p>\n    "},{"t":"JavaScript ES6 modules + traceur","l":"http://stackoverflow.com/questions/26208427/javascript-es6-modules-traceur","q":"\n\n<p>I'm using <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\">ES6 modules</a> transpiled to ES5 with <a href=\"https://github.com/google/traceur-compiler\">traceur</a>.<br>\nTranspilation is done via grunt + <a href=\"https://www.npmjs.org/package/grunt-traceur\">grunt-traceur</a></p>\n\n<p>Traceur allows you to pick which module handler to use: its own, AMD, commonJS or inline.<br>\nI have tried most of them, but none seems to to work. Why?</p>\n\n<p><strong>TestClass.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>export default class TestClass {\n    constructor() {\n        alert('test');\n    }\n}\n</code></pre>\n\n<p><strong>Main.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>import TestClass from './TestClass';\n\nvar test = new TestClass();\n</code></pre>\n\n<p><strong>Gruntfile.js</strong> (extract)</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>traceur: {\n    options: {\n        experimental: true,\n        blockBinding: true,\n        modules: 'amd'\n    }\n}\n</code></pre>\n\n<p><strong>index.html</strong> (extract)</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script src=\"js/vendor/traceur-runtime.js\"&gt;&lt;/script&gt;\n&lt;script src=\"js/vendor/require.js\"&gt;&lt;/script&gt;\n\n&lt;script defer async src=\"js/compiled/Main.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><strong>Error given</strong></p>\n\n<blockquote>\n  <p>Uncaught Error: Mismatched anonymous define() module: function ($__0)\n  {</p>\n</blockquote>\n\n<p>It seems that <a href=\"https://github.com/aaronfrost/grunt-traceur/issues/36\">there are issues</a> with the grunt plugin, but even using an older version doesn't seem to help.  </p>\n\n<p>Code was adapted from <a href=\"http://guybedford.com/practical-workflows-for-es6-modules\">an article</a>.</p>\n    ","a":"\n<p>It seems that I had <a href=\"http://stackoverflow.com/questions/26454517/run-function-loaded-from-ecmascript-6-module\">very similar problem</a> (and googled your question trying to find solution).</p>\n\n<p>I had not seen error provided by you, anyway post here my implemetation, maybe it helps you.</p>\n\n<p>First of all you need to load both js script with treceur runtime. Like this:</p>\n\n<pre><code>&lt;script src=\"js/vendor/traceur-runtime.js\"&gt;&lt;/script&gt;\n&lt;script defer async src=\"js/compiled/TestClass.js\" type=\"module\"&gt;&lt;/script&gt;\n&lt;script defer async src=\"js/compiled/Main.js\" type=\"module\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Note that you must specify that your scripts is <code>module</code>-s in <code>type</code> attribute.</p>\n\n<p>Than you have to load init module:</p>\n\n<pre><code>&lt;script&gt;\n    System.get('public_js/init'); \n    // pass your init module name as a parameter\n    // you can see it in private __moduleName variable in compiled init.js\n&lt;/script&gt;\n</code></pre>\n\n<p>That implemetation works well for mine. I use 0.2.9 version of grunt-traceur and 0.0.72 version of treceur runtime. Hope this helps you.</p>\n    "},{"t":"How can I access a bower package as an ES6 module?","l":"http://stackoverflow.com/questions/21439989/how-can-i-access-a-bower-package-as-an-es6-module","q":"\n\n<p>I'm trying to migrate an ember app to use the <a href=\"https://github.com/stefanpenner/ember-app-kit\">ember app-kit</a>. The code requires the accounting.js library. In the pre-app-kit version the file was loaded via a script tag in <code>index.html</code></p>\n\n<pre><code>&lt;script src=\"http://cdnjs.cloudflare.com/ajax/libs/accounting.js/0.3.2/accounting.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>and accessed in the views through the global namespace</p>\n\n<pre><code>App.MoneyField= Em.TextField.extend({\n  init: function() {\n    this._super();\n    var value = accounting.formatMoney(this.get(\"money\") / 100, '');\n    this.set('value', value);\n  };\n  // other functions omitted\n});\n</code></pre>\n\n<p>In the app-kit version, I've included <code>accounting.js</code> as a bower dependency. In <code>bower.json</code>:</p>\n\n<pre><code>{\n  \"name\": \"ember-app-kit\",\n  \"dependencies\": {\n    \"handlebars\": \"~1.1.2\",\n    \"jquery\": \"~1.9.1\",\n    \"qunit\": \"~1.12.0\",\n    \"ember\": \"~1.4.0-beta.2\",\n    \"ember-data\": \"~1.0.0-beta.6\",\n    \"ember-resolver\": \"git://github.com/stefanpenner/ember-jj-abrams-resolver.git#master\",\n    \"ic-ajax\": \"~0.3.0\",\n    \"ember-testing-httpRespond\": \"~0.1.1\",\n    \"accounting\":\"~0.3.2\"\n  },\n  \"resolutions\": {\n    \"ember\": \"~1.4.0-beta.2\"\n  }\n }\n</code></pre>\n\n<p>When I try to build the app, it gives the error</p>\n\n<pre><code>W117: 'accounting' is not defined.\n</code></pre>\n\n<p>I understand why this is and know I need some sort of <code>import accounting from ...</code> statement.</p>\n\n<p>How do I import a package installed via bower as an ES6 module?</p>\n    ","a":"\n<p>I know that this was asked a few months ago, but since then, Ember App Kit has been succeeded by <a href=\"https://github.com/stefanpenner/ember-cli\" rel=\"nofollow\">ember-cli</a>, and this provides a very straight forward means to access either bower or npm dependencies.</p>\n\n<ul>\n<li><a href=\"http://www.ember-cli.com/#standard-non-amd-asset\" rel=\"nofollow\">Non-AMD asset</a></li>\n<li><a href=\"http://www.ember-cli.com/#standard-amd-asset\" rel=\"nofollow\">AMD asset</a></li>\n</ul>\n\n<p>With regards to being accessed as ES6 modules:</p>\n\n<ul>\n<li>Non-AMD assets cannot be accessed as an ES6 module, you simply access them through the global variable that they export.\n<ul>\n<li>e.g. <code>moment</code></li>\n</ul></li>\n<li>AMD assets, on the other hand, can be accessed through the ES6 <code>import</code> syntax\n<ul>\n<li>e.g. <code>import { raw as icAjaxRaw } from 'ic-ajax';</code></li>\n</ul></li>\n</ul>\n\n<hr>\n\n<p>Worth also mentioning, that ember-cli supports an add-on system now, which can make importing these things as simple as adding them to the <code>package.json</code> of your project. Some of the more popular libraries already have ember-cli addons for them. <a href=\"http://hashrocket.com/blog/posts/building-ember-addons\" rel=\"nofollow\">This post</a> describes how you can write your own.</p>\n    "},{"t":"JavaScript asynchronous programming: promises vs generators","l":"http://stackoverflow.com/questions/28031289/javascript-asynchronous-programming-promises-vs-generators","q":"\n\n<p>Promises and generators allow you to write asynchronous code. I do not understand why both of these mechanisms are introduced in ECMA script 6. When is it best to use the promises, and when the generators?</p>\n    ","a":"\n<p>There is no opposition between these two techniques. They coexist together complementing each other nicely. Promises give you capability to get result of an asynchronous operation which does not available yet. It solves <a href=\"http://survivejs.com/common_problems/pyramid.html\" rel=\"nofollow\">Pyramid of Doom</a> problem. So instead of:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function ourImportantFunction(callback) {\n  //... some code 1\n  task1(function(val1) {\n    //... some code 2\n    task2(val1, function(val2) {\n      //... some code 3\n      task3(val2, callback);\n    });\n  });\n}\n</code></pre>\n\n<p>you can write:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function ourImportantFunction() {\n  return Promise.resolve()\n    .then(function() {\n        //... some code 1\n        return task1(val3)\n    })\n    .then(function(val2) {\n        //... some code 2\n        return task2(val2)\n    })\n    .then(function(val2) {\n        //... some code 3\n        return task3(val2);\n    });\n}\n\nourImportantFunction().then(callback);\n</code></pre>\n\n<p>But even with promises you must write code in asynchronous fashion - you must always pass callbacks to the functions. Writing asynchronous code is much harder then synchronous. Even with promises when the code is huge it become difficult to see the algorithm (well this is very subjective, someone can argue with it. But for majority of programmers I think it's true). So we want to write asynchronous code in synchronous fashion. That's where generators are coming to help us. So instead of code above you can write:</p>\n\n<pre><code>var ourImportantFunction = spawn(function*() {\n    //... some code 1\n    var val1 = yield task1();\n    //... some code 2\n    var val2 = yield task2(val1);\n    //... some code 3\n    var val3 = yield task3(val2);\n\n    return val3;\n});\n\nourImportantFunction().then(callback);\n</code></pre>\n\n<p>where simplest possible <code>spawn</code> realization can be something like:</p>\n\n<pre><code>function spawn(generator) {\n  return function() {    \n    var iter = generator.apply(this, arguments);\n\n    return Promise.resolve().then(function onValue(lastValue){\n      var result = iter.next(lastValue); \n\n      var done  = result.done;\n      var value = result.value;\n\n      if (done) return value; // generator done, resolve promise\n      return Promise.resolve(value).then(onValue, iter.throw.bind(iter)); // repeat\n    });\n  };\n}\n</code></pre>\n\n<p>As you can see <code>value</code> (result of some asynchronous function <code>task{N}</code>) must be a promise. You can't do this with callbacks. </p>\n\n<p>What remains to do is to implement <code>spawn</code> technique into language itself. So we are replacing <code>spawn</code> with <code>async</code> and <code>yield</code> with <code>await</code> and are coming to <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:async_functions\" rel=\"nofollow\">ES7 async/await</a>:</p>\n\n<pre><code>var ourImportantFunction = async function() {\n    //... some code 1\n    var val1 = await task1();\n    //... some code 2\n    var val2 = await task2(val1);\n    //... some code 3\n    var val3 = await task3(val2);\n\n    return val3;\n}\n</code></pre>\n\n<p>I recommend to watch <a href=\"http://www.youtube.com/watch?v=DqMFX91ToLw\" rel=\"nofollow\">this video</a> to more understand these and some other coming techniques. If the guy speaks too fast for you, slow down the speed of playing (\"settings\" in right bottom corner, or just push [<code>shift</code> + <code>&lt;</code>])</p>\n\n<p>What is the best: just callbacks, or promises, or promises with generators - this is very subjective question. Callbacks is the fastest solution possible at this time (performance of native promises are very bad now). Promises with generators give you opportunity to write asynchronous code in synchronous fashion. But for now they much slower then simple callbacks.</p>\n    "},{"t":"First app with Angularjs 2 [closed]","l":"http://stackoverflow.com/questions/28811009/first-app-with-angularjs-2","q":"\n\n<p>I want to start using Angularjs 2 now. I know, there is almost no documentation yet and Angular 2 is still under heavy development. But I don't need super rich API and simple example how to create TODO app or hello world will quite enough to me.</p>\n\n<p>I tried to find some sort of introduction tutorial, but it was not successful(. I've visited <a href=\"https://github.com/angular/angular\">https://github.com/angular/angular</a>. However there are very \"abstract\" actions to get angular work and nothing about how to use it. What can I do?</p>\n    ","a":"\n<p>From the <a href=\"http://ng-learn.org/2015/02/AngularJS2-A_First_Look/\">Angular2 website</a>, this is the TODO MVC app:</p>\n\n<p><a href=\"https://github.com/davideast/ng2do\">https://github.com/davideast/ng2do</a></p>\n    "},{"t":"Immediate function using JavaScript ES6 arrow functions","l":"http://stackoverflow.com/questions/22138550/immediate-function-using-javascript-es6-arrow-functions","q":"\n\n<p>Does anyone know how to write an immediate function using ES6 arrow syntax?</p>\n\n<p>Here's the ES3/5 way of doing it:</p>\n\n<pre><code>(function () {\n   //...\n}());\n</code></pre>\n\n<p>I've tried the following but get an <code>unexpected token</code> error on the last line.</p>\n\n<pre><code>(() =&gt; {\n  //...\n}());\n</code></pre>\n\n<p>You can test this here: <a href=\"http://www.es6fiddle.net/hsb8bgu4/\">http://www.es6fiddle.net/hsb8bgu4/</a></p>\n    ","a":"\n<p>From the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/arrow_functions#Examples\">Arrow functions examples</a>,</p>\n\n<pre><code>(() =&gt; \"foobar\")() // returns \"foobar\" \n</code></pre>\n\n<p>So, the function invocation operator should be outside.</p>\n\n<pre><code>(() =&gt; {\n  //...\n})();\n</code></pre>\n\n<p>Sample: <a href=\"http://www.es6fiddle.net/hsb8s1sj/\">http://www.es6fiddle.net/hsb8s1sj/</a></p>\n    "},{"t":"es6 call static methods","l":"http://stackoverflow.com/questions/28627908/es6-call-static-methods","q":"\n\n<p>What's the standard way to call static methods? I can think of using <code>constructor</code> or using the name of the class itself, I don't like the latter since it doesn't feel necessary. Is the former the recommended way, or is there something else?</p>\n\n<p>Here's a (contrived) example:</p>\n\n<pre><code>class SomeObject {\n  constructor(n){\n    this.n = n;\n  }\n\n  static print(n){\n    console.log(n);\n  }\n\n  printN(){\n    this.constructor.print(this.n);\n  }\n}\n</code></pre>\n    ","a":"\n<p>Both ways are viable, but they do different things when it comes to inheritance with an overridden static method. Choose the one whose behavior you expect:</p>\n\n<pre><code>class Super {\n  static whoami() {\n    return \"Super\";\n  }\n  lognameA() {\n    console.log(Super.whoami);\n  }\n  lognameB() {\n    console.log(this.constructor.whoami);\n  }\n}\nclass Sub extends Super {\n  static whoami() {\n    return \"Sub\";\n  }\n}\nnew Sub().lognameA(); // Super\nnew Sub().lognameB(); // Sub\n</code></pre>\n\n<p>Referring to the static property via the class will be actually static and constantly give the same value. Using <code>this.constructor</code> instead will use dynamic dispatch and refer to the class of the current instance, where the static property <em>might</em> have the inherited value but could also be overridden.</p>\n\n<p>This matches the behavior of Python, where you can choose to refer to static properties either via the class name or the instance <code>self</code>.</p>\n\n<p>If you expect static properties not to be overridden (and always refer to the one of the current class), <a href=\"http://stackoverflow.com/q/2223386/1048572\">like in Java</a>, use the explicit reference.</p>\n    "},{"t":"const vs let when calling require","l":"http://stackoverflow.com/questions/28135485/const-vs-let-when-calling-require","q":"\n\n<p>As io.js now <a href=\"https://iojs.org/es6.html\">supports ES6</a> you are finally able to use the <code>const</code> and <code>let</code> keywords. Obviously, <code>let</code> is the successor of <code>var</code>, just with some super-powers.</p>\n\n<p>But what about <code>const</code>? I know, of course, what \"constant\" means, but I was wondering when to use it (regarding best practices).</p>\n\n<p>E.g., if I create a module that requires another module, I could write:</p>\n\n<pre><code>'use strict';\n\nconst util = require('util');\n\nconst foo = function () {\n  // Do something with util\n};\n\nmodule.exports = foo;\n</code></pre>\n\n<p>Basically I've replaced every occurence of <code>var</code> with <code>const</code>. Generally speaking, I think that this is okay, but if I follow this pattern, it leaves me with way more uses of <code>const</code> than <code>let</code>, as most variables aren't \"variables\" in a literal sense.</p>\n\n<p>Is this good style? Should I rather go for <code>let</code>? When should I choose <code>const</code> over <code>let</code>?</p>\n    ","a":"\n<p><strong>Note:</strong> <code>let</code> doesn't do variable hoisting. (Technically speaking, if you are in strict mode, both <code>const</code> and <code>let</code> don't hoist, but in normal mode <code>const</code> does hoist) So, if you want your variables to be used only after the declaration statement is executed, then you can use <code>let</code>. For example,</p>\n\n<pre><code>\"use strict\";\nconsole.log(A_VAR);\nlet A_VAR = 10;\n</code></pre>\n\n<p>will give <code>ReferenceError: A_VAR is not defined</code>, but the following will not throw any error</p>\n\n<pre><code>console.log(A_CONST);\nconst A_CONST = 10;\nA_CONST = 11;\nconsole.log(A_CONST);\n</code></pre>\n\n<p>but it will print </p>\n\n<pre><code>undefined\n10\n</code></pre>\n\n<hr>\n\n<p><code>const</code> can be normally used when you don't want your program</p>\n\n<ol>\n<li><p>to assign anything to the variable</p>\n\n<pre><code>\"use strict\";\nconst a = 1;\na = 2;\n</code></pre>\n\n<p>will produce <code>TypeError: Assignment to constant variable.</code>.</p></li>\n<li><p>to use the variable without explicitly initializing.</p>\n\n<pre><code>\"use strict\";\nconst a;\n</code></pre>\n\n<p>will produce <code>SyntaxError: Unexpected token ;</code></p></li>\n</ol>\n\n<p>Simply put, I would say,</p>\n\n<ul>\n<li><p>use <code>const</code> whenever you want some variables not to be modified</p></li>\n<li><p>use <code>let</code> if you want the exact opposite of <code>const</code></p></li>\n<li><p>use <code>var</code>, if you want to be compatible with ES5 implementations or if you want module/function level scope.</p></li>\n</ul>\n\n<p>Use <code>let</code> only when you need block level scoping, otherwise using <code>let</code> or <code>var</code> would not make any difference.</p>\n    "},{"t":"What ES6 features are supported in JSX?","l":"http://stackoverflow.com/questions/27414384/what-es6-features-are-supported-in-jsx","q":"\n\n<p>I'm using <strong>React with JSX</strong> with <a href=\"https://www.npmjs.com/package/react-tools\">react-tools</a> to compile the JSX code to JavaScript.</p>\n\n<p>What ES6 features are supported in JSX with the <code>harmony</code> option enabled?</p>\n    ","a":"\n<p>Thanks to kangax for <a href=\"http://kangax.github.io/compat-table/es6/#jsx\" rel=\"nofollow\">the compatibility table</a></p>\n\n<p><strong>Update</strong>: Just <a href=\"https://6to5.org/docs/usage/jsx/\" rel=\"nofollow\">use 6to5 (now named babel) to compile your JSX</a>. It's faster and has better es6 support anyway.</p>\n    "},{"t":"ES6 Structuring Assignment?","l":"http://stackoverflow.com/questions/30897961/es6-structuring-assignment","q":"\n\n<p>The new destructuring assignment features of <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ES6</a> are fairly well known now (<a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Alet%20a%2C%20b%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Existing%20variables%0Alet%20o%20%3D%20%7Ba%3A%20%22a%22%2C%20b%3A%20%22b%22%7D%3B%20%2F%2F%20An%20object%20to%20get%20values%20from%0A%2F%2F%20...%0A(%7Ba%2C%20b%7D%20%3D%20o)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Set%20them%20to%20the%20props%20from%20%60o%60%0Aconsole.log(a)%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%22a%22%0Aconsole.log(b)%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%22b%22\">live copy</a> on Babel's REPL); in the case of variables that <em>already</em> exist:</p>\n\n<pre><code>let a, b;                 // Existing variables\nlet o = {a: \"a\", b: \"b\"}; // An object to get values from\n// ...\n({a, b} = o);             // Set them to the props from `o`\nconsole.log(a);           // \"a\"\nconsole.log(b);           // \"b\"\n</code></pre>\n\n<p>Is there a <em>simple</em> converse in ES6? Setting properties on an <strong>existing</strong> object based on variables with the same name? (Other than the obvious <code>o.a = a; o.b = b;</code>)</p>\n\n<p>Note I'm not talking about when <em>creating</em> an object, we could do that with the wonderful new object initializer syntax that lets us not repeat the names unnecessarily:</p>\n\n<pre><code>let a = \"a\";\nlet b = \"b\";\nlet o = {a, b};\n</code></pre>\n\n<p>But if I <em>already</em> have an object, can I do some kind of <em>structuring</em> assignment in ES6?</p>\n    ","a":"\n<p>The closest I've come up with is to use <code>Object.assign</code> and a temporary object (<a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Alet%20a%20%3D%20%22a%22%2C%20b%20%3D%20%22b%22%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20variables%0Alet%20obj%20%3D%20%7Bc%3A%20%22c%22%7D%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20existing%20object%0AObject.assign(obj%2C%20%7Ba%2C%20b%7D)%3B%20%20%20%20%20%20%20%2F%2F%20%22Structuring%22%20assignment%2C%20sort%20of%0Aconsole.log(JSON.stringify(obj))%3B%20%2F%2F%20%22%7B%22c%22%3A%22c%22%2C%22a%22%3A%22a%22%2C%22b%22%3A%22b%22%7D%0A\" rel=\"nofollow\">live copy</a>):</p>\n\n<pre><code>let a = \"a\", b = \"b\";             // The variables\nlet obj = {c: \"c\"};               // The existing object\nObject.assign(obj, {a, b});       // \"Structuring\" assignment, sort of\nconsole.log(JSON.stringify(obj)); // \"{\"c\":\"c\",\"a\":\"a\",\"b\":\"b\"}\n</code></pre>\n\n<p>It's fairly simple, but it's a function call and a temporary object.</p>\n\n<hr>\n\n<p><strong>Update:</strong> <a href=\"http://stackoverflow.com/users/1048572/bergi\">Bergi</a> points out <a href=\"http://stackoverflow.com/questions/30897961/es6-structuring-assignment#comment49838403_30898609\">in a comment</a> that <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:define_properties_operator\" rel=\"nofollow\">there's a strawman proposal</a> for a <code>:=</code> operator that will do this, and one of their first use cases is indeed the use case that primarily lead me to this question: Constructors:</p>\n\n<pre><code>// From strawman proposal linked above, doesn't actually exist yet!\nclass Point {\n   constructor(x,y) {\n      this := {x,y}  //define and initialize x and y properties of new object\n      //   ^^\n   }\n}\n</code></pre>\n\n<p>So given that strawman exists, I suspect for now the <code>assign</code> is going to be the best I can do in ES6.</p>\n    "},{"t":"How is block scope managed in the lexical environment?","l":"http://stackoverflow.com/questions/29410249/how-is-block-scope-managed-in-the-lexical-environment","q":"\n\n<p>If I declare a variable in a function using <code>var</code> then a slot for that variable is added to the <code>LexicalEnvironment</code> defined by that function.</p>\n\n<pre><code>function() {\n  var foo; \n}\n</code></pre>\n\n<p>In the above code the <code>LexicalEnvironment</code> associated with the function contains a slot with a key <code>foo</code> and a value of <code>undefined</code>.</p>\n\n<p>If I use a block-scoped declaration, how is the surrounding <code>LexicalEnvironment</code> affected?</p>\n\n<pre><code>function() {\n  {\n    let foo; // How does this affect the LexicalEnvironment?\n  }\n}\n</code></pre>\n    ","a":"\n<pre><code>function() {\n  var foo; \n}\n</code></pre>\n\n<p>As you mentioned, <code>foo</code> is available in the <code>LexicalEnvironment</code> is global to all inner functions within that function.</p>\n\n<p>But </p>\n\n<pre><code>function() {\n  {\n    let foo; // How does this affect the LexicalEnviroinment?\n  }\n}\n</code></pre>\n\n<p>Here <code>foo</code> is local to that block alone. It won't be visible outside that block. </p>\n\n<p>How does it affect the <code>LexicalEnvironment</code> ?</p>\n\n<p>If you are referencing, <code>foo</code> anywhere inside that block, the local <code>let foo</code> will override the global <code>var foo</code> which you've defined in that function.</p>\n\n<blockquote>\n  <p>With respect to ES6,</p>\n</blockquote>\n\n<pre><code>function example(x) {\n    console.log(y); // ReferenceError: y is not defined\n    if (x) {\n        let y = 5;\n    }\n}\n</code></pre>\n\n<p>Variables declared with a <code>let</code> statement are created as bindings on the lexical environment, rather than the variable environment, of the current execution context. A change to the specification of block statements in ES6 means that each block has its own lexical environment. In the above example, a new lexical environment is created when the block (the body of the if statement) is evaluated. When the let statement is evaluated a binding is added to this lexical environment and is innaccessible from the outer lexical environment (that of the function declaration itself).</p>\n\n<p><strong><a href=\"http://globaldev.co.uk/2013/09/es6-part-2/\" rel=\"nofollow\">Refer</a></strong></p>\n    "},{"t":"Extending Promises in ES6","l":"http://stackoverflow.com/questions/29333540/extending-promises-in-es6","q":"\n\n<p>I am trying to extend Promise:</p>\n\n<pre><code>class PersistedPromise extends Promise { }\n</code></pre>\n\n<p>Then call the static <code>resolve</code> on the derived class to directly create a resolved promise:</p>\n\n<pre><code>PersistedPromise.resolve(1)\n</code></pre>\n\n<p>In traceur, this yields:</p>\n\n<pre><code>ModuleEvaluationError: #&lt;PersistedPromise&gt; is not a promise\n    at new PersistedPromise (~rtm/gen/promise.js:6:57)\n    at Function.resolve (native)\n</code></pre>\n\n<p>In Babel (run as <code>babel-node --experimental promise.js</code>) it results in:</p>\n\n<pre><code>    Promise.apply(this, arguments);\n            ^\nTypeError: [object Object] is not a promise\n    at new PersistedPromise (~rtm/gen/promise.js:1:23)\n    at Function.resolve (native)\n    ...\n</code></pre>\n\n<p>I was depending on this:</p>\n\n<blockquote>\n  <p>All static methods of Promise support subclassing: they create new instances via their receiver (think: new this(...)) and also access other static methods via it (this.resolve(...) versus Promise.resolve(...)).</p>\n</blockquote>\n\n<p>from <a href=\"http://www.2ality.com/2014/10/es6-promises-api.html\">http://www.2ality.com/2014/10/es6-promises-api.html</a>.</p>\n\n<p>It appears that node checks the <code>this</code> on calls such as <code>Promise.resolve.call(this, val)</code> for being a <code>Promise</code>, rather than (correctly?) <code>Promise</code> <em>or a derived class thereof</em> (v0.12.0).</p>\n\n<p>Is the above no longer operative, or did not make into the spec, or just not implemented by traceur and/or node?</p>\n    ","a":"\n<blockquote>\n  <p>Is the above no longer operative, or did not make into the spec, or just not implemented by traceur and/or node?</p>\n</blockquote>\n\n<p>ES6 promises in the spec support subclasing. That is, you will eventually be able to subclass promises the way you just did. This is by design. </p>\n\n<p>That said, none of the browsers currently follow that spec correctly in this regard - as far as I know only the ES6-promise shim, Babel (core-js) and RSVP follow ES6 semantics with regards to subclassing correctly. Support in browsers is eventually coming but it's not there yet. Hold tight.</p>\n\n<p>Here is a <a href=\"https://kangax.github.io/compat-table/es6/#Promise_is_subclassable\" rel=\"nofollow\">list of currently supporting implementations</a>.</p>\n    "},{"t":"Testing Maps/Sets with QUnit (or other Unit Testing Tool)","l":"http://stackoverflow.com/questions/31215854/testing-maps-sets-with-qunit-or-other-unit-testing-tool","q":"\n\n<p>How do we assert for equality of ES6 Maps and Sets?</p>\n\n<p>For example:</p>\n\n<pre><code>// ES6 Map\nvar m1 = new Map();\nm1.set('one', 1);\nvar m2 = new Map();\nm2.set('two', 2);\nassert.deepEqual(m1,m2);     // outputs: passed.\n\n// ES6 Set\nvar s1 = new Set();\ns1.add(1);\nvar s2 = new Set();\ns2.add(2);\nassert.deepEqual(s1,s2);     // outputs: passed.\n</code></pre>\n\n<p>The intention is to assert that the elements of the Sets/Maps are equal. Both the both assertions should fail.</p>\n\n<p>Is there an equivalent of <code>deepEqual</code> for Sets/Maps? In other words, short of manually iterating the elements, how do we test for Set/Map equality deeply?</p>\n\n<p>If there is no way in QUnit, is there a unit testing tool that works for ES6 Sets and Maps?</p>\n\n<p><strong>Edit</strong></p>\n\n<p>In Firefox, which supports <code>Array.from()</code>, I have been comparing sets and maps by:</p>\n\n<pre><code>assert.deepEqual(Array.from(m1), Array.from(m2));\n</code></pre>\n\n<p>But this does not work with other browsers, which do not support <code>Array.from()</code>. Even with an <code>Array.from</code> polyfill, Chrome / IE does not work - <code>Array.from(set)</code> always produces an empty array regardless of the set contents. This is possibly due to these browsers' lack of support for generic iterables.</p>\n\n<p>Secondly, reducing it into a comparison of Arrays may not be always appropriate. We would end up with what I consider to be false positives:</p>\n\n<pre><code>var s = new Set();\ns.add([1,2]);\nvar m = new Map();\nm.set(1,2);\nassert.deepEqual(Array.from(s), Array.from(m));  // outputs: passed.\n</code></pre>\n\n<hr>\n\n<p><strong>Update</strong>:</p>\n\n<p>A patch is currently in the works at QUnit to extend <code>deepEqual()</code> to handle ES6 Sets and Maps. When that pull request gets merged in, we should be able to use <code>deepEqual()</code> to compare Sets and Maps. (-:</p>\n    ","a":"\n<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"nofollow\">Array.from</a></p>\n\n<pre><code>// assert Map equality\nassert.deepEqual(Array.from(m1), Array.from(m2));\n\n// assert Set equality\nassert.deepEqual(Array.from(s1), Array.from(s2));\n</code></pre>\n\n<blockquote>\n  <p>But this does not work with other browsers, which do not support Array.from(). Even with an Array.from polyfill, Chrome / IE does not work - Array.from(set) always produces an empty array regardless of the set contents. ...</p>\n</blockquote>\n\n<p>This seems like a pointless argument to make. <code>Set</code>, <code>Map</code>, and <code>Array.from</code> are all part of ES6 which have only basic support in IE (11) right now.</p>\n\n<p>If you're saying you can't use <code>Array.from</code> because of this, then you also cannot use <code>Set</code> or <code>Map</code>.</p>\n    "},{"t":"Meteor: Why am I losing my data context by switching function() { } to () => { }?","l":"http://stackoverflow.com/questions/31198293/meteor-why-am-i-losing-my-data-context-by-switching-function-to","q":"\n\n<p>So I'm experimenting with ES6, installed the grigio:babel package, and am starting to go through my es5 code and update it to some of the new ES6 syntax when I ran into a problem.</p>\n\n<p>Originally my template helpers looked something like this:</p>\n\n<pre><code>Template.exampleTemplateName.helpers({\n   exampleHelper: function() {\n      //returns an array from Mongo Collection\n   }\n});\n</code></pre>\n\n<p>which is used in a Blaze each loop as such</p>\n\n<pre><code>{{#each exampleHelper}}\n{{/each}}\n</code></pre>\n\n<p>As you'd expect, all of my event handlers for the elements in this event loop had access to the fields in the Mongo Collection that is being returned by <code>exampleHelper</code> via the <code>this</code> keyword. <code>this.exampleField</code> would return exactly what I'd expect it to return.</p>\n\n<p>So now's the point at which I started to update to ES6. For some reason the following syntax breaks the data context, so instead of <code>this</code> returning what you'd expect, it returns <code>Window</code> instead:</p>\n\n<pre><code>Template.exampleTemplateName.helpers({\n    exampleHelper() {\n        //returns an array from Mongo Collection\n    }\n});\n</code></pre>\n\n<p>The above was my first attempt, then I tried:</p>\n\n<pre><code>Template.exampleTemplateName.helpers({\n    exampleHelper: () =&gt; {\n        //returns an array from Mongo Collection\n    }\n});\n</code></pre>\n\n<p>So I ran the above ES6 code through Babeljs's online translator and received the following, which is obviously incorrect as I don't want a named function:</p>\n\n<pre><code>Template.exampleTemplateName.helpers({\n     exampleHelper: function exampleHelper() {}\n});\n</code></pre>\n\n<p>Can someone tell me what the correct syntax should look like?</p>\n    ","a":"\n<blockquote>\n  <p>Can someone tell me what the correct syntax should look like?</p>\n</blockquote>\n\n<p>Your original code was totally fine. You don't have to abuse the features and use them just in order to use them, save few keystokes, etc. In this case normal anonymous function is what you should use. </p>\n\n<p>The reason why you have this confusion with <code>this</code> pointing to global object, is because this is how arrow functions work: they have <em>lexical</em> <code>this</code>, not <em>dynamic</em>. This means that <code>this</code> reference is bound statically to function context at the time of the function creation (in your case it was <code>window</code>), and not resolved dynamically at runtime.</p>\n    "},{"t":"const variable not hoisted for immediately invoked function","l":"http://stackoverflow.com/questions/30478518/const-variable-not-hoisted-for-immediately-invoked-function","q":"\n\n<p>I was playing around new ECMASCRIPT-6 <strong>const</strong> key word. I did not understand one particular behaviour of the keyword.</p>\n\n<p>Lets say I have two functions</p>\n\n<p><strong>First case</strong></p>\n\n<pre><code>(function(){\n  console.log(_t); \n  const _t=10;\n})();\n</code></pre>\n\n<p>and \n<strong>Second case</strong></p>\n\n<pre><code>function t(){\n  console.log(_y); \n  const _y=11;\n}\nt();\n</code></pre>\n\n<p>For the <strong>first case</strong> the output is (didn't understand why)</p>\n\n<blockquote>\n  <p>ReferenceError: can't access lexical declaration `_t' before initialization</p>\n</blockquote>\n\n<p>For the <strong>second case</strong> the output is (fine)</p>\n\n<blockquote>\n  <p>undefined</p>\n</blockquote>\n\n<p>The second case output is as expected but I'm not getting any idea why the first case result throws error. It can be inferred from the error that the variable is not hoisted. But why? I found <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">here</a> that <code>const</code> uses <strong>block scope</strong>. Has it anything to do with this scoping? </p>\n\n<p>I'm using Firefox Developer Version console to run tests.</p>\n    ","a":"\n<p>This is Firefox related issue as mentioned in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#Browser_compatibility\" rel=\"nofollow\">here</a></p>\n\n<p><strong>Firefox-specific notes</strong></p>\n\n<blockquote>\n  <p>The const declaration has been implemented in Firefox long before const appeared in the ECMAScript 6 specification. For const ES6 compliance see bug 950547 and bug 611388.</p>\n  \n  <p>Starting with Gecko 36 (Firefox 36 / Thunderbird 36 / SeaMonkey 2.33):</p>\n  \n  <blockquote>\n    <p>{const a=1};a now throws a ReferenceError and does not return 1 anymore due to block-scoping.\n    const a; now throws a SyntaxError (\"missing = in const declaration\"): An initializer is required.\n    const a = 1; a = 2; now also throws a SyntaxError (\"invalid assignment to const a\").</p>\n  </blockquote>\n</blockquote>\n\n<p>Also I found something <a href=\"https://github.com/jhermsmeier/node-vcf/issues/1/\" rel=\"nofollow\">here</a> as well</p>\n\n<p>I think Firefox engines is very strict on const hoisting.</p>\n\n<p>I this makes sense. </p>\n    "},{"t":"Iterate over ES6 Set/Map in Coffeescript (with `of` operator)","l":"http://stackoverflow.com/questions/26719794/iterate-over-es6-set-map-in-coffeescript-with-of-operator","q":"\n\n<p>How can one iterate over an ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"nofollow\">Map</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow\">Set</a> in Coffeescript?</p>\n\n<p>In Javascript one would use e.g.</p>\n\n<pre><code>s = new Set()\ns.add({a: 1})\nfor (x of s) {\n  console.log(x);\n}\n</code></pre>\n\n<p>However Coffeescript has its own <code>of</code> operator that gets converted to <code>in</code>, i.e.:</p>\n\n<pre><code>console.log(x) for x of s\n</code></pre>\n\n<p>becomes <code>... for (x in s) { ... }</code>.</p>\n\n<p>How can one access Javascript's <code>of</code> operator in Coffeescript?</p>\n\n<p>One could write their own custom iterator by cycling over <code>s.values().next()</code>, but that'd be an abomination. :)</p>\n    ","a":"\n<p>There's currently no way to use the new Javascript ES6 <code>of</code> operator from coffeescript (as of 1.9.2). The best option for now is to use <code>s.forEach (x) -&gt; ...</code> or <code>m.forEach (value, key) -&gt;</code> as mentioned above.</p>\n\n<p>For a set:</p>\n\n<pre><code>s = new Set\ns.add {a: 1}\n\ns.forEach (v) =&gt;\n  console.log v\n</code></pre>\n\n<p>For a map:</p>\n\n<pre><code>m = new Map\nm.set {a: 1}, {b: 2}\n\nm.forEach (v, k) =&gt;\n  console.log k, v\n</code></pre>\n\n<p>If you want to avoid creating new functions for whatever reason, you can use iterators directly from coffeescript. But its a little bit nasty. For sets:</p>\n\n<pre><code>i = s.values()\nwhile(v = i.next(); !v.done)\n  console.log v.value\n</code></pre>\n\n<p>For a map:</p>\n\n<pre><code>i = m.entries()\nwhile(v = i.next(); !v.done)\n  [key, value] = v.value\n  console.log key, value\n</code></pre>\n\n<p>The parentheses on the while loop are necessary to make the while loop dependant on v.done.</p>\n\n<p>They can be done on one line too - but it looks pretty bad:</p>\n\n<pre><code>i = s.values(); console.log v.value while(v = i.next(); !v.done)\n</code></pre>\n    "},{"t":"Can I use an ES6/2015 module import to set a reference in 'global' scope?","l":"http://stackoverflow.com/questions/31197220/can-i-use-an-es6-2015-module-import-to-set-a-reference-in-global-scope","q":"\n\n<p>I have this situation where I am trying to import an existing library, which I'll call <code>troublesome</code> (using Webpack/Babel FWIW) and it has a global reference to <code>jQuery</code> in it which i am trying to resolve using module syntax.</p>\n\n<p>I have successfully imported jquery into the 'local' scope of a module, via:</p>\n\n<pre><code>import jQuery from 'jquery'\n</code></pre>\n\n<p>so I tried:</p>\n\n<pre><code>import jQuery from 'jquery'    \nimport 'troublesome'\n</code></pre>\n\n<p>but perhaps not surprisingly, I get something like <code>jQuery is not a function</code> kicked back from <code>troublesome.js</code></p>\n\n<p>I have tried this as well:</p>\n\n<pre><code>System.import('jquery')\n.then(jQuery =&gt; {\n    window.jQuery = jQuery\n})\nimport 'troublesome'\n</code></pre>\n\n<p>but, it turns out that <code>System.import</code> is part of the, so-called, 'module-loader' spec, which was pulled from the es6/2015 spec, so it isn't provided by Babel. There is a <a href=\"https://github.com/ModuleLoader/es6-module-loader\" rel=\"nofollow\">poly-fill</a>, but Webpack wouldn't be able to manage dynamic imports accomplished via calls to <code>System.import</code> anyway.</p>\n\n<p>but... if I call out the script files in index.html like so:</p>\n\n<pre><code>&lt;script src=\"https://code.jquery.com/jquery-2.1.4.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/troublesome/troublesome.js\"&gt;&lt;/script&gt;\n&lt;script src=\"the-rest-of-my-js.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>the reference to <code>jQuery</code> is resolved in <code>troublesome.js</code> and things are good,\nbut I would prefer to avoid the script tag route as webpack doesn't manage those.</p>\n\n<p>Can anyone recommend a decent strategy for dealing with scenarios like this?</p>\n\n<p><strong>update</strong></p>\n\n<p>with some guidance from @TN1ck, I was eventually able to identify one Webpack-centric solution, using the <a href=\"http://webpack.github.io/docs/shimming-modules.html#imports-loader\" rel=\"nofollow\">imports-loader</a></p>\n\n<p>The configuration for this solution looks something like this:</p>\n\n<pre><code>  //...\n  module: {\n    loaders: [\n      //...\n      {\n        test: require.resolve('troublesome'),\n        loader: \"imports?jQuery=jquery,$=jquery\"\n      }\n    ]\n  }\n</code></pre>\n    ","a":"\n<p>Shimming modules is the way to go: <a href=\"http://webpack.github.io/docs/shimming-modules.html\" rel=\"nofollow\">http://webpack.github.io/docs/shimming-modules.html</a></p>\n\n<p>I quote from the page:</p>\n\n<h2>plugin ProvidePlugin</h2>\n\n<p>This plugin makes a module available as variable in every module. The module is required only if you use the variable.</p>\n\n<p>Example: Make $ and jQuery available in every module without writing <code>require(\"jquery\")</code>.</p>\n\n<pre><code>new webpack.ProvidePlugin({\n  $: \"jquery\",\n  jQuery: \"jquery\",\n  \"window.jQuery\": \"jquery\"\n})\n</code></pre>\n    "},{"t":"[].__proto__ === Array.prototype // === [Symbol(Symbol.unscopables): Object]?","l":"http://stackoverflow.com/questions/29195856/proto-array-prototype-symbolsymbol-unscopables-object","q":"\n\n<p>Defining a utility function to inspect objects' prototype chains (in Chrome), I get this for arrays.</p>\n\n<p><img src=\"http://i.stack.imgur.com/8Bqob.png\" alt=\"array prototype chain\"></p>\n\n<p>So it would appear that</p>\n\n<pre><code>[].__proto__ === Array.prototype  // === [Symbol(Symbol.unscopables): Object] \n</code></pre>\n\n<p>I understand the first equality. I have no idea what the third term is, though I have heard that ES6 will have Symbols.</p>\n\n<p>Is this thing the same as Array.prototype? Why does it print that way?</p>\n\n<p>Edit: chrome://version information:</p>\n\n<pre><code>Google Chrome   40.0.2214.111 (Official Build) \nRevision    6f7d3278c39ba2de437c55ae7e380c6b3641e94e-refs/branch-heads/2214@{#480}\nOS  Linux \nBlink   537.36 (@189455)\nJavaScript  V8 3.30.33.16\n</code></pre>\n    ","a":"\n<p>Comment on 2014-04-14</p>\n\n<p>It seems Chrome's <code>console.log</code> print all Symbol-type-keys, here is an example:</p>\n\n<pre><code>var o = {};\no[Symbol.iterator] = function () {};\no[Symbol.unscopables] = {};\nvar s = Symbol('s');\no[s] = 3;\nconsole.log(o);\n</code></pre>\n\n<p>which prints:</p>\n\n<blockquote>\n  <p>Object {Symbol(Symbol.unscopables): Object, Symbol(Symbol.iterator): function, Symbol(s): 3}</p>\n</blockquote>\n\n<p>I don't why chrome behaves this way, is it for debugging or something else?</p>\n\n<p>Fotunately it does not affect the <code>toString()</code> result so all code is safe.</p>\n\n<hr>\n\n<p>It seems <code>console.log</code> would especially print the <code>Symbol.unscopable</code> key in console, we can have a plain object to perform like this:</p>\n\n<pre><code>var o = {};\no[Symbol.unscopables] = {};\nconsole.log(o);\n</code></pre>\n\n<p>which outputs:</p>\n\n<blockquote>\n  <p>Object {Symbol(Symbol.unscopables): Object}</p>\n</blockquote>\n\n<p>The <code>Symbol.unscopables</code> symbol is a special symbol defined in ES6 as <code>@@unscopables</code> which is used for excluding some properties when this object works in a <code>with</code> environment, the official explanation is:</p>\n\n<blockquote>\n  <p>An object valued property whose own property names are property names that are excluded from the with environment bindings of the associated object.</p>\n</blockquote>\n\n<p>A simple example:</p>\n\n<pre><code>var o = {x: 1, y: 2};\no[Symbol.unscopables] = {\n    y: true\n};\n\nconsole.log(o.x); // 1\nconsole.log(o.y); // 2\n\nwith(o) {\n    console.log(x); // 1\n    console.log(y); // ReferenceError: y is not defined\n}\n</code></pre>\n\n<p>You can use <code>Array.prototype[Symbol.unscopables]</code> to find all keys which cannot be used in <code>with</code> environment</p>\n\n<p>However still, the output of a <code>Array.prototype</code> is not exactly the same as a plain object with <code>Symbol.unscopables</code> key, it outputs <code>[Symbol(Symbol.unscopables): Object]</code>, which is a format more like an array</p>\n\n<p>I can't exactly explain why, this may be related to the <code>Symbol.toStringTag</code> which controls how an object should be formatted to string, but Chrome currently does not export this symbol so it's hard to test</p>\n    "},{"t":"How to perform an async task against es6 generators in loop","l":"http://stackoverflow.com/questions/28260140/how-to-perform-an-async-task-against-es6-generators-in-loop","q":"\n\n<p>I understand how to use generators to make async code look nice. I have a simple generator <code>*all</code>, that takes a <code>page</code>, will return a single value.</p>\n\n<p>Then I have another generator <code>*allDo</code>, that will use <code>*all</code> for pages 1 to 30 and for each result, do some async <code>task</code>.</p>\n\n<p>Then I have another generator <code>*allBatchDo</code>, that will batch 3 pages, and do some async <code>task</code>.</p>\n\n<pre><code>function mockPromise(value) {\n  return Promise(function(resolve, reject) {\n    resolve(value);\n  });\n}\n\nfunction *all(page) {\n  var ls = yield mockPromise(\"page \" + page);\n  // do all kinds of promises\n  return yield ls;\n};\n\nfunction *allDo(task) {\n  var page = 1;\n  while (true) {\n    var res = yield * all(page);\n\n    res = yield task(res);\n\n    if (page == 30) {\n      break;\n    }\n    page++;\n  }\n}\n\nfunction *allBatchDo(task) {\n  var page = 1;\n  var arr = [];\n  while (true) {\n    var res = yield * all(author, page);\n\n    arr.push(res);\n    if (arr.length &gt;= 3) {\n      yield task(arr);\n      arr = [];\n    }\n\n    if (page == 30) {\n      break;\n    }\n\n    page++;\n  }\n}\n\nfunction logTask(res) {\n  return mockPromise(res).then(function(v) {\n    console.log(v);\n  });\n}\n</code></pre>\n\n<p>Example use of these generators would be:</p>\n\n<pre><code>// return a single page promise\nasync(all(1)).then(function(value) { console.log(value); });\n\n// do `logTask` for all pages 1 thru 30\nasync(allDo(logTask));\n\n// do `logTask` for all pages with batches of 10\nasync(allBatchDo(logTask));\n</code></pre>\n\n<p>The question is, is this a legitimate use of es6 async features, or is there an abstract built-in solution for my use case?</p>\n    ","a":"\n<p>If you want use generators to make async then you code is valid. ES6 contains only promises to async operations. ES7 will have async/await.  You can also use a good library: <a href=\"https://github.com/kriskowal/q\" rel=\"nofollow\">https://github.com/kriskowal/q</a> or use only native promises Promise.All without generators.</p>\n    "},{"t":"How to use 'let' (and supported ECMAScript 6 features) in both Firefox and Chrome","l":"http://stackoverflow.com/questions/30295255/how-to-use-let-and-supported-ecmascript-6-features-in-both-firefox-and-chrom","q":"\n\n<p>ES6 script using <code>let</code> runs as expected in latest Chrome stable if it's inside a <code>\"use strict\"</code> definition. And it runs fine in Firefox if it is loaded using a script tag with the special type:</p>\n\n<pre><code>&lt;script type=\"application/javascript;version=1.7\" src=\"\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><em>But</em> files with that special type now won't run in Chrome! In Chrome no script runs: silent failure, no console messages. What is the cross-browser solution? (I want to know if this can be done without transpiling.)</p>\n    ","a":"\n<p>The naïve solution, assuming you have control over the script itself, is to set some global within the script and check if it exists later. Iff it doesn't, replace this script element with one without the special MIME type so it can run on other browsers. The global can safely be ignored after that.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script type=\"application/javascript;version=1.7\"&gt;\n  'use strict';\n  window.fx = true;\n\n  let foo = 'bar';\n  console.log(foo);\n&lt;/script&gt;\n&lt;script&gt;\n  if (typeof window.fx === 'undefined') {\n    var oldScript = document.querySelector('script[type=\"application/javascript;version=1.7\"]');\n    var text = oldScript.text;\n    document.body.removeChild(oldScript);\n\n    var newScript = document.createElement('script');\n    newScript.text = text;\n    document.body.appendChild(newScript);\n  }\n&lt;/script&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>The main disadvantage here is the extra HTTP request that may be incurred when referencing an external script, especially if the script is not cached. Since Firefox is the <em>only</em> browser on which you can guarantee that the script will never be requested more than once per page load, this has the potential of being incredibly wasteful on other browsers.</p>\n\n<p>As an alternative, you can use feature detection as mentioned in the comments to insert the <code>script</code> element either with or without the <code>type</code> attribute rather than including it in the HTML source to start with. According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Browser_compatibility\" rel=\"nofollow\">MDN's compatibility table</a>, basic support is available starting from Firefox 2.0 (in JavaScript 1.7), so you can pick pretty much any Firefox-specific feature from whichever version you wish to extend your support to.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var script = document.createElement('script');\nscript.text = '\"use strict\"; let foo = \"bar\"; console.log(foo);';\n\ntry {\n  document.querySelector('::-moz-selection');\n  script.type = 'application/javascript;version=1.7';\n} catch (e) {\n  // Not Firefox, leave MIME type unchanged\n}\n\ndocument.body.appendChild(script);</code></pre>\n</div>\n</div>\n<p></p>\n    "},{"t":"Usage of rest parameter and spread operator in javascript","l":"http://stackoverflow.com/questions/20541339/usage-of-rest-parameter-and-spread-operator-in-javascript","q":"\n\n<p>What's the usage of rest parameter that will be added in ECMAScript 6?</p>\n\n<p>For example, in ECMAScript 5 you can do the following to get an array of parameters starting from the second element:</p>\n\n<pre><code>// ES 5\nstore('Joe', 'money');\nstore('Jane', 'letters', 'certificates');\nfunction store(name) {\n  var items = [].slice.call(arguments, 1); //['money'] in first case\n  items.forEach(function (item) {\n    vault.customer[name].push(item);\n  });\n}\n</code></pre>\n\n<p>and that will be equivalent to the following code in ECMAScript 6:</p>\n\n<pre><code>// ES 6\nstore('Joe', 'money');\nstore('Jane', 'letters', 'certificates');\nfunction store(name, ...items) {\n  items.forEach(function (item) {\n    vault.customer[name].push(items)\n  });\n}\n</code></pre>\n\n<p><strong>Is the difference between them is just syntax or there's a performance issue?</strong></p>\n\n<p><strong>Also for spread operator  (...)</strong></p>\n\n<pre><code>//in ecmascript5\nvar max = Math.max.apply(null, [14, 3, 77]);\n//but in ecmascript6\nvar max = Math.max(...[14, 3, 77]);\n</code></pre>\n\n<p>Is this just syntax change or performance issue?</p>\n    ","a":"\n<blockquote>\n  <p>Is the difference between them is just syntax or there's a performance issue?</p>\n</blockquote>\n\n<p>Both, and more...</p>\n\n<p>Rest parameters:</p>\n\n<ol>\n<li>Are a <strong>known idiom</strong> in other languages (Ruby, Python).</li>\n<li>Are <strong>esier to read</strong> and maintain (vs. <code>slice</code>).</li>\n<li>Are <strong>easier to understand</strong> for beginners.</li>\n<li>Can (and likely will) result in <strong>better performance</strong>, since engines can optimize.</li>\n<li>Are <strong>tool friendlier</strong>, as they can be analyzed statically.</li>\n</ol>\n    "},{"t":"What does arrow function '() => {}' mean in Javascript? [duplicate]","l":"http://stackoverflow.com/questions/29030747/what-does-arrow-function-mean-in-javascript","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/24900875/whats-the-meaning-of-in-javascript\" dir=\"ltr\">What's the meaning of “=&gt;” in JavaScript?</a>\n                <span class=\"question-originals-answer-count\">\n                    5 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I was reading the source for <a href=\"https://github.com/ryanseddon/ScrollListView/blob/master/src/main.js\" rel=\"nofollow\">ScrollListView</a> and in several places I see the use of <code>() =&gt; {}</code>. </p>\n\n<p>Such as on line 25,</p>\n\n<pre><code>this.cellReorderThreshold = () =&gt; {\n    var ratio = (this.CELLHEIGHT*this.cellsWithinViewportCount)/4;\n    return ratio &lt; this.CELLHEIGHT ? 0 : ratio;\n};\n</code></pre>\n\n<p>line 31,</p>\n\n<pre><code>this.container.addEventListener('scroll', () =&gt; this.onScroll(), false);\n</code></pre>\n\n<p>line 88.</p>\n\n<pre><code>resizeTimer = setTimeout(() =&gt; {\n    this.containerHeight = this.container.offsetHeight;\n}, 250);\n</code></pre>\n\n<p>Is this a shorthand for <code>function</code> and if it differs in any way, how so?</p>\n    ","a":"\n<p>This is the new arrow syntax of ES6. It differs by the treatment of <code>this</code>: <code>function</code> gets a <code>this</code> according to the <em>calling</em> context (traditional semantics), but the arrow functions keep the <code>this</code> of the context of <em>definition</em>.</p>\n\n<p>see <a href=\"http://tc39wiki.calculist.org/es6/arrow-functions/\">http://tc39wiki.calculist.org/es6/arrow-functions/</a></p>\n    "},{"t":"Are variables declared with let or const not hoisted in ES6?","l":"http://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6","q":"\n\n<p>I have been playing with ES6 for a while and I noticed that while variables declared with <code>var</code> are hoisted as expected...</p>\n\n<pre><code>console.log(typeof name); // undefined\nvar name = \"John\";\n</code></pre>\n\n<p>...variables declared with <code>let</code> or <code>const</code> seem to have some problems with hoisting:</p>\n\n<pre><code>console.log(typeof name); // ReferenceError\nlet name = \"John\";\n</code></pre>\n\n<p>and</p>\n\n<pre><code>console.log(typeof name); // ReferenceError\nconst name = \"John\";\n</code></pre>\n\n<p>Does this mean that variables declared with <code>let</code> or <code>const</code> are not hoisted? What is really going on here? Is there any difference between <code>let</code> and <code>const</code> in this matter?</p>\n    ","a":"\n<p>@thefourtheye is correct in saying that these variables <strong>cannot be accessed</strong> before they are declared. However, it's a bit more complicated than that.</p>\n\n<blockquote>\n  <p>Are variables declared with <code>let</code> or <code>const</code> not hoisted? What is really going on here?</p>\n</blockquote>\n\n<p><strong>All declarations</strong> (<code>var</code>, <code>let</code>, <code>const</code>, <code>function</code>, <code>function*</code>, <code>class</code>) <strong>are hoisted</strong> in JavaScript. This means that if a name is declared in a scope, in that scope the identifier will always reference that particular variable:</p>\n\n<pre><code>x = \"global\";\n(function() {\n    x; // not \"global\"\n\n    var/let/… x;\n}());\n{\n    x; // not \"global\"\n\n    let/const/… x;\n}\n</code></pre>\n\n<p>This is true both for function and block scopes<sup>1</sup>.</p>\n\n<p>The difference between <code>var</code>/<code>function</code>/<code>function*</code> declarations and <code>let</code>/<code>const</code>/<code>class</code> declara­tions is the <strong>initialisation</strong>.<br>\nThe former are initialised with <code>undefined</code> or the (generator) function right when the binding is created at the top of the scope. The lexically declared variables however stay <strong>uninitialised</strong>. This means that a <code>ReferenceError</code> exception is thrown when you try to access it. It will only get initialised when the <code>let</code>/<code>const</code>/<code>class</code> statement is evaluated, everything above that is called the <em>temporal dead zone</em>.</p>\n\n<pre><code>x = y = \"global\";\n(function() {\n    x; // undefined\n    y; // Reference error: y is not defined\n\n    var x = \"local\";\n    let y = \"local\";\n}());\n</code></pre>\n\n<p>Notice that a <code>let y;</code> statement initialises the variable with <code>undefined</code> like <code>let y = undefined;</code> would have.</p>\n\n<blockquote>\n  <p>Is there any difference between <code>let</code> and <code>const</code> in this matter?</p>\n</blockquote>\n\n<p>No, they work the same as far as hoisting is regarded. The only difference between them is that a <code>const</code>ant must be and can only be assigned in the initialiser part of the declaration (<code>const one = 1;</code>, both <code>const one;</code> and later reassignments like <code>one = 2</code> are invalid).</p>\n\n<p><sub>1: <code>var</code> declarations are still working only on the function level, of course</sub></p>\n    "},{"t":"ECMAScript 6 modules in Node.JS","l":"http://stackoverflow.com/questions/17330078/ecmascript-6-modules-in-node-js","q":"\n\n<p>Node.JS v0.11.3 claims to have support for ECMAScript 6 modules with the flag <code>--harmony_modules</code>. </p>\n\n<p>I have tried various examples, such as the following.</p>\n\n<pre><code>module math {\n    export var pi = 3.141593;\n}\n</code></pre>\n\n<p>What is the syntax to get modules working in Node.JS?</p>\n    ","a":"\n<p>The modules implementation in V8 is incomplete. There's parsing support when enabled with --harmony-modules, but support of the actual functionality was put on hold. The reason for this is because the specification for how ES6 modules will actually work has been in the works and is still not fully nailed down.</p>\n\n<p>The implementation in Continuum (the linked screenshot from Crazy Train's answer) dates back to an interim spec from November 2012 and is now woefully out of date because of the ongoing changes to the ES6 module's spec. This is why the V8 devs put development of support for modules on hold.</p>\n\n<p>It seems like the modules spec is approaching stability (though I expect we'll see small refinements for a while) and I think (hope at least) that we'll see SpiderMonkey and V8 moving forward with implementations over the next 6 months.</p>\n\nUseful links:\n\n<ul>\n<li>V8 modules bug: <a href=\"https://code.google.com/p/v8/issues/detail?id=1569\">https://code.google.com/p/v8/issues/detail?id=1569</a></li>\n<li>SpiderMonkey modules bug: <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=harmony%3Amodules\">https://bugzilla.mozilla.org/show_bug.cgi?id=harmony%3Amodules</a></li>\n</ul>\n    "},{"t":"Is it possible to reset an ECMASCRIPT-6 generator to its initial state?","l":"http://stackoverflow.com/questions/23848113/is-it-possible-to-reset-an-ecmascript-6-generator-to-its-initial-state","q":"\n\n<p>My question is this: Given the provided (very simple) generator, is it possible to return the generator back to its original state to use again?</p>\n\n<pre><code>var generator = function*() {\n    yield 1;\n    yield 2;\n    yield 3;\n};\n\nvar iterable = generator();\n\nfor (let x of iterable) {\n    console.log(x);\n}\n\n// At this point, iterable is consumed.\n// Is there a method for moving iterable back\n// to the start point by only without re-calling generator(),\n// (or possibly by re-calling generator(), only by using prototype \n//  or constructor methods available within the iterable object)\n// so the following code would work again?\n\nfor (let x of iterable) {\n    console.log(x);\n}\n</code></pre>\n\n<p>I would like to be able to pass the iterable off to some other scope, iterate over it, do some other stuff, then be able to iterate over it again later on in that same scope.</p>\n    ","a":"\n<p>If your intention is</p>\n\n<blockquote>\n  <p>to some other scope, iterate over it, do some other stuff, then be able to iterate over it again later on in that same scope.</p>\n</blockquote>\n\n<p>Then the only thing you shouldn't try doing is passing the iterator, instead pass the generator:</p>\n\n<pre><code>var generator = function*() {\n    yield 1;\n    yield 2;\n    yield 3;\n};\n\nvar user = function(generator){\n\n    for (let x in generator()) {\n        console.log(x);\n    }\n\n    for (let x in generator()) {\n        console.log(x);\n    }\n}\n</code></pre>\n\n<p>Or just make a \"round robin\" iterator and check while iterating</p>\n\n<pre><code>var generator = function*() {\n    while(true){\n        yield 1;\n        yield 2;\n        yield 3;\n    }\n};\n\nfor( x in i ){\n    console.log(x);\n    if(x === 3){\n        break;\n    }\n}\n</code></pre>\n    "},{"t":"Property subscription in Aurelia","l":"http://stackoverflow.com/questions/28419242/property-subscription-in-aurelia","q":"\n\n<p>I have a property on my viewmodel which I want to listen to and trigger events based on its value, like this:</p>\n\n<pre><code>class viewModel {\n  constructor() {\n    this.value = '0';\n    let val = 2;\n    subscribe(this.value, callbackForValue);\n    subscribe(val, callbackForVal);\n  }\n}\n</code></pre>\n\n<p>Is this a feature of Aurelia? If so, how would I go about setting up such a subscription?</p>\n    ","a":"\n<p>In some plugins I've been using DI to get the <code>ObserverLocator</code> instance from the container:</p>\n\n<pre><code>import {ObserverLocator} from 'aurelia-binding';  // or 'aurelia-framework'\n\nclass Foo {\n    static inject function() { return [ObserverLocator]; }\n    constructor(observerLocator) {\n        this.observerLocator = observerLocator;\n    }\n    ...\n}\n</code></pre>\n\n<p>You can then do something like this:</p>\n\n<pre><code>var subscription = this.observerLocator\n    .getObserver(myObj, 'myPropertyName')\n    .subscribe(myCallback);\n</code></pre>\n\n<p>When you're ready to dispose of the subscription, invoke it:</p>\n\n<pre><code>subscription();\n</code></pre>\n\n<p>I think this is all subject to change but it's something you could use right now if you needed to.</p>\n\n<p>More info <strong><a href=\"http://www.danyow.net/aurelia-property-observation/\" rel=\"nofollow\">here</a></strong></p>\n    "},{"t":"Why does ECMA script offer no integer type out of the box?","l":"http://stackoverflow.com/questions/31780183/why-does-ecma-script-offer-no-integer-type-out-of-the-box","q":"\n\n<p>I am wondering why ECMA script does not support integers out of the box. Of course I know that there are some kind of integers (there is a good summary in the answer to this question: <a href=\"http://stackoverflow.com/questions/5179836/difference-between-floats-and-ints-in-javascript\">Difference between floats and ints in Javascript?</a>). But still these are not \"real\" integers. And the problems with floats as ints are pretty abundant. So why does it not support integers and why was this not fixed with ECMA script 6?</p>\n    ","a":"\n<p>The language was designed and implemented in 10 days, so it was originally a matter of time constraints. From the <a href=\"http://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/#comment-1021\" rel=\"nofollow\">horses mouth</a>: </p>\n\n<blockquote>\n  <p>Yes, it was there from the start. But bignums were not in the cards. JS had to \"look like Java\" only less so, be Java's dumb kid brother or boy-hostage sidekick. Plus, I had to be done in ten days or something worse than JS would have happened.</p>\n  \n  <p>So double by default, int under the hood, and bitwise ops are 32-bit int (uint if you use &gt;&gt;&gt;). I blame Java.</p>\n</blockquote>\n\n<p>I wouldn't know why it wasn't on the table for ES2015. To me it seems like a lot of the work as to remove boilerplate, but I'd be guessing. Brendan Eich is pretty active on Twitter, you could probably just ask him. :)</p>\n    "},{"t":"ES6 variable import name in node.js?","l":"http://stackoverflow.com/questions/29168433/es6-variable-import-name-in-node-js","q":"\n\n<p>is it possible to import something into module providing variable name while using ES6 import?</p>\n\n<p>I.e. I want to import some module at a runtime depending on values provided in a config:</p>\n\n<pre><code>import something from './utils/' + variableName;\n</code></pre>\n    ","a":"\n<p>Not with the <code>import</code> statement. <code>import</code> and <code>export</code> are defined in such a way that they are statically analyzable, so they cannot depend on runtime information.</p>\n\n<p>You are looking for the <a href=\"https://github.com/ModuleLoader/es6-module-loader\">loader API (polyfill)</a>, but I'm a bit unclear about the status of the specification:</p>\n\n<pre><code>System.import('./utils/' + variableName).then(function(m) {\n  console.log(m);\n});\n</code></pre>\n    "},{"t":"What are getters and setters for in ECMAScript 6 classes?","l":"http://stackoverflow.com/questions/28222276/what-are-getters-and-setters-for-in-ecmascript-6-classes","q":"\n\n<p>I am confused as to what the point of getters and setters are in ECMAScript 6 classes. What is the purpose? Below is an example I am referring to:</p>\n\n<pre><code>class Employee {\n\n    constructor(name) {\n        this._name = name;\n    }\n\n    doWork() {\n        return `${this._name} is working`;\n    }\n\n    get name() {\n        return this._name.toUpperCase();\n    }\n\n    set name(newName){\n        if(newName){ \n            this._name = newName;\n        }\n    }\n}\n</code></pre>\n    ","a":"\n<p>These setter and getter allow you to use the class attribute directly</p>\n\n<pre><code>var emp = new Employee(\"TruMan1\");\nif(emp.name){ // uses the get method in the background\n}\n\nemp.name = \"New name\"; // uses the setter in the background\n</code></pre>\n\n<p>This is only to set and get the value of the attribute.</p>\n    "},{"t":"ecmascript 6 features found in Chrome 38","l":"http://stackoverflow.com/questions/26288549/ecmascript-6-features-found-in-chrome-38","q":"\n\n<p>We have an Array with a number of properties on each page. Sometimes it has a \"values\" property. We examine this with <code>myArrayObject['values']</code> and expect either a string or undefined.\nAfter updating to Chrome 38 <code>myArrayObject['values']</code> returns <code>function values() { [native code] }</code></p>\n\n<p>After some digging this seems to be related to a <a href=\"https://code.google.com/p/v8/issues/detail?id=3401\">V8 ticket</a> to implement <a href=\"https://bugs.ecmascript.org/show_bug.cgi?id=1908#c2\">@@unscopables for the 6th Edition of ecmascript</a>.\nThese changes were <a href=\"https://codereview.chromium.org/455743002/diff/1/src/unscopables.js\">committed</a> two months ago. Soon after one dev tried to <a href=\"https://codereview.chromium.org/455763002/\">roll them back with the note that they were \"web-breaking\"</a>.</p>\n\n<p>So the question is, is Array.values() an undocumented feature, early adoption an ecmascript-6 draft, a bug, or something else? Will this get rolled back? What other upcoming changes should I be aware of?</p>\n\n<p>Small example in Chrome 38.0.2125.101 (on Win7 64):</p>\n\n<pre><code>var test=new Array();\n// items pushed and popped\n...\n// test['values'] may have been set at some point\ntest['values']; //returns a function pointer: function values() { [native code] }.\n                // yesterday this returned undefined\n</code></pre>\n\n<hr>\n\n<p>edit: From Bergi's answer this looks like a ES6 feature. </p>\n\n<p>Will there be more ES6 <em>features</em> coming out in background patches months before the spec is released? Is there anything I can do to protect our platform? Is there some way to request ES5 compatibility mode?</p>\n    ","a":"\n<p>Yes, <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.values\"><code>Array.prototype.values</code></a> comes from the ES6 Draft. It is a method that returns you an iterator for the values of the array.</p>\n\n<p>If you want to store values in your array that are not numerically indexed, you should not use an <code>Array</code> but a plain object (or, in ES6, a <code>Map</code>).</p>\n    "},{"t":"Wrapping my head around Ember App Kit -differences compared to working with plain Ember","l":"http://stackoverflow.com/questions/21727501/wrapping-my-head-around-ember-app-kit-differences-compared-to-working-with-plai","q":"\n\n<p>I have begun using ember app kit and heave read through <a href=\"http://iamstef.net/ember-app-kit/\" rel=\"nofollow\">its guides</a>. However I having trouble wrapping my head around the differences between a regular app  and this way that Ember App Kit structures the various bits using ES6 modules instead of stuffing everything into a global variable used as a namespace (e.g. App).</p>\n\n<p>I found that this aspect is not very clearly explained:</p>\n\n<ul>\n<li>How does Ember apply its magic in auto generating models, views, routes, and controllers?</li>\n<li>Where does it expect to find them?</li>\n<li>What naming conventions should I follow?</li>\n<li>If I have created a template, route,or controller, and Ember does <em>not</em> find/ detect it, and just generates a default one in its place, how do I find out where it is looking; or otherwise debug in this situation?</li>\n<li>How is any of this different in the standard Ember app development, as compared to development using Ember App Kit?</li>\n</ul>\n\n<p>Much appreciated in advance!</p>\n\n<hr>\n\n<p>EDIT (20140506):</p>\n\n<p>These resources explain ES6 modules and EAK really well:</p>\n\n<ul>\n<li>A brief overview: <a href=\"http://eviltrout.com/2014/05/03/getting-started-with-es6.html\" rel=\"nofollow\">eviltrout: getting started with ES6</a></li>\n<li>An entire series of posts: [toranb: <a href=\"http://toranbillups.com/blog/archive/2014/04/06/Building-your-own-ember-app-kit-lite/\" rel=\"nofollow\">http://toranbillups.com/blog/archive/2014/04/06/Building-your-own-ember-app-kit-lite/</a>), with an <a href=\"http://toranbillups.com/blog/archive/2014/04/10/Building-your-own-ember-app-kit-lite-part-4/\" rel=\"nofollow\">ES6 modules specific one</a></li>\n</ul>\n    ","a":"\n<p>I actually did a blog series on this very topic just a few weeks ago. I start with a basic (globals) ember app and transform it over 8 different posts.</p>\n\n<ul>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/07/Building-your-own-ember-app-kit-lite-part-1/\">Part 1 - Introduction</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/08/Building-your-own-ember-app-kit-lite-part-2/\">Part 2 - Concatenation (introducing Grunt)</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/09/Building-your-own-ember-app-kit-lite-part-3/\">Part 3 - Handlebars template precompilation</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/10/Building-your-own-ember-app-kit-lite-part-4/\">Part 4 - ES6 modules</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/11/Building-your-own-ember-app-kit-lite-part-5/\">Part 5 - JSHint</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/11/Building-your-own-ember-app-kit-lite-part-6/\">Part 6 - Watch + Live Reload</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/11/Building-your-own-ember-app-kit-lite-part-7/\">Part 7 - Testem</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2014/04/11/Building-your-own-ember-app-kit-lite-part-8/\">Part 8 - Deployment</a></li>\n</ul>\n\n<p>In the end, you have a Gruntfile w/ tasks just like EAK (but you've built it all by hand -one step at a time)</p>\n    "},{"t":"How do you check the difference between an ECMAScript 6 class and function?","l":"http://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function","q":"\n\n<p>In ECMAScript 6 the <code>typeof</code> of classes is, according to the specification, <code>'function'</code>.</p>\n\n<p>However also according to the specification you are not allowed to call the object created via the class syntax as a normal function call. In other words, you must use the <code>new</code> keyword otherwise a TypeError is thrown.</p>\n\n<p><code>TypeError: Classes can’t be function-called</code></p>\n\n<p>So without using try catch, which would be very ugly and destroy performance, how can you check to see if a function came from the <code>class</code> syntax or from the <code>function</code> syntax?</p>\n    ","a":"\n<p>I think the simplest way to check if the function is ES6 class is to check the result of  <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype.tostring\" rel=\"nofollow\"><code>.toString()</code></a> method. So the check function looks pretty simple:</p>\n\n<pre><code>function isClass(func) {\n  return typeof func === 'function' \n    &amp;&amp; /^class\\s/.test(Function.prototype.toString.call(func));\n}\n</code></pre>\n    "},{"t":"How do I persist a ES6 Map in localstorage (or elsewhere)?","l":"http://stackoverflow.com/questions/28918232/how-do-i-persist-a-es6-map-in-localstorage-or-elsewhere","q":"\n\n<pre><code>var a = new Map([[ 'a', 1 ]]);\na.get('a') // 1\n\nvar forStorageSomewhere = JSON.stringify(a);\n// Store, in my case, in localStorage.\n\n// Later:\nvar a = JSON.parse(forStorageSomewhere);\na.get('a') // TypeError: undefined is not a function\n</code></pre>\n\n<p>Unfortunatly <code>JSON.stringify(a);</code> simply returns '{}', which means a becomes an empty object when restored.</p>\n\n<p>I found <a href=\"https://www.npmjs.com/package/es6-mapify\">es6-mapify</a> that allows up/down-casting between a Map and a plain object, so that might be one solution, but I was hoping I would need to resort to an external dependency simply to persist my map.</p>\n    ","a":"\n<p>Assuming that both your keys and your values are serialisable,</p>\n\n<pre><code>localStorage.myMap = JSON.stringify(Array.from(map.entries()));\n</code></pre>\n\n<p>should work. For the reverse, use</p>\n\n<pre><code>map = new Map(JSON.parse(localStorage.myMap));\n</code></pre>\n    "},{"t":"Javascript ES6 generator async","l":"http://stackoverflow.com/questions/30471189/javascript-es6-generator-async","q":"\n\n<p>I need to run generator async (I need to have result in console 1,2,3,4,5 cause now I have 4,1,2,3,5) any one can help me? I need run task and wait when previous task is finished before it run next task. I need to use (if possible: only) generators (or generator + promise?) </p>\n\n<p>Here my code</p>\n\n<pre><code>/*jshint esnext: true */\nfunction show(msg) {\n  var _msg = msg;\n  setTimeout(function() { console.log(_msg);}, 2000);\n}\n\nfunction show2(msg) {\n  console.log(msg);\n}\n\nvar stack = [];\n\n// add some function to stack\nstack.push(function() { show(1); });\nstack.push(function() { show(2); });\nstack.push(function() { show(3); });\nstack.push(function() { show2(4); });\nstack.push(function() { show(5); });\n\nfunction* generator1() {\n  for(var key of stack) {\n    yield key();\n  }\n}\nvar gen = generator1();\ngen.next();\ngen.next();\ngen.next();\ngen.next();\ngen.next();\n</code></pre>\n    ","a":"\n<p>This can be done purely with a generator. Here's an example of one approach, in which we move the <code>.next()</code> into the timeout itself in order to ensure it doesn't occur early. Additionally, the generator now returns the function off the stack instead of executing it, because you can't call <code>.next()</code> on a generator from within the execution of the generator itself.</p>\n\n<p>It's worth noting here that this probably isn't the way I'd do this 'in the wild'; I'd include promises. But you asked if it could be done with just a generator - the answer is 'yes'.</p>\n\n<pre><code>function show(msg) {\n  var _msg = msg;\n  setTimeout(function() { \n      console.log(_msg);\n      execute();\n  }, 2000);\n}\n\nfunction show2(msg) {\n  console.log(msg);\n  execute();\n}\n\nvar stack = [];\n\nfunction execute() {\n  var fn = gen.next().value;\n  if (fn) fn();\n}\n\n// add some function to stack\nstack.push(function() { show(1); });\nstack.push(function() { show(2); });\nstack.push(function() { show(3); });\nstack.push(function() { show2(4); });\nstack.push(function() { show(5); });\n\nfunction* generator1() {\n  for(var key of stack) {\n    yield key;\n  }\n}\nvar gen = generator1();\nexecute();\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/smmccrohan/k271gz7o/\" rel=\"nofollow\">http://jsfiddle.net/smmccrohan/k271gz7o/</a></p>\n    "},{"t":"Status of cancellable promises","l":"http://stackoverflow.com/questions/21781434/status-of-cancellable-promises","q":"\n\n<p>The oldest issue on <a href=\"https://github.com/promises-aplus/cancellation-spec\">https://github.com/promises-aplus/cancellation-spec</a> is (at the time of writing) 9 months old. I really can’t found a reliable source of information about cancellation features on ‘standard’ promises.</p>\n\n<p>By now looks like the feature is implemented in <a href=\"https://github.com/petkaantonov/bluebird\">bluebird</a>, but as a library developer I don’t want to clutter my package with a full promise implementation.</p>\n\n<p>What I’d like to do is simply pass a promise-like and support the cancellation-spec.</p>\n\n<p>Where could I find this information?</p>\n    ","a":"\n<p>Cancellable promises are not going to be in ES6, as ES6 promises are very minimal.</p>\n\n<p>Work on cancellation in the Promises/A+ space has stalled, as we wait for library evolution to prove one approach clearly superior. The latest thinking is at <a href=\"https://github.com/promises-aplus/cancellation-spec/issues/6\">this issue</a>, which is what most libraries looking to implement cancellation seem to follow (more or less). The key points are:</p>\n\n<ul>\n<li>Cancellation as a special case of rejections</li>\n<li>Reactions to cancellation propagate upward in the chain, as well as the rejection itself propagating downward.</li>\n</ul>\n\n<p>It's not clear what you mean by \"simply pass a promise-like and support the cancellation-spec.\" Are you trying to produce thenables, under the assumption that consumers of your library will cast it, but somehow inherit some cancellation behavior afterward? That'd be a bit tricky, especially since cancellation generally depends on a specified <code>Cancellation</code> constructor used for rejecting the promise. If the cancellation ecosystem was more developed, the way to do this would likely be more straightforward.</p>\n\n<p>As for the future, well, it's in flux! One route forward would be for someone to champion an evolution of that cancellation proposal in Promises/A+ space, getting implementer buy-in from major libraries like Q, RSVP, when, and Bluebird. Then a lot of the smaller libraries would likely buy in, and you'd have something you could probably depend on. If it proves that popular, it'd probably be considered for ECMAScript promises as well!</p>\n\n<p>But that depends on a lot of people doing a lot of work, so we'll see if it happens :). It was kind of a miracle for it to happen with the base Promises/A+ spec, but who knows... it could happen again!</p>\n    "},{"t":"ES6 Class Multiple inheritance","l":"http://stackoverflow.com/questions/29879267/es6-class-multiple-inheritance","q":"\n\n<p>I've done most of my research on this on <a href=\"https://babeljs.io/\" rel=\"nofollow\">BabelJS</a> and on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Sub_classing_with_extends\" rel=\"nofollow\">MDN</a> (which has no information at all), but please feel free to tell me if I have not been careful enough in looking around for more information about the ES6 Spec.</p>\n\n<p>I'm wondering whether or not ES6 supports multiple inheritance in the same fashion as other duck-typed languages do. For instance, can I do something like:</p>\n\n<pre><code>class Example extends ClassOne, ClassTwo {\n    constructor() {\n    }\n}\n</code></pre>\n\n<p>to extend multiple classes on to the new class? If so, will the interpreter prefer methods/properties from ClassTwo over ClassOne?</p>\n    ","a":"\n<p>An object can only have one prototype. Inheriting from two classes can be done by creating a parent object as a combination of two parent prototypes.</p>\n\n<p>The syntax for subclassing makes it possible to do that in the declaration, since the right-hand side of the <code>extends</code> clause can be any expression. Thus, you can write a function that combines prototypes according to whatever criteria you like, and call that function in the class declaration.</p>\n    "},{"t":"JavaScript ES6: Test for (fat) arrow function, built-in function, regular function?","l":"http://stackoverflow.com/questions/28222228/javascript-es6-test-for-fat-arrow-function-built-in-function-regular-functi","q":"\n\n<p>Is there an elegant way to tell Harmony's slim arrow functions apart from regular functions <strong>and</strong> built-in functions?</p>\n\n<p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax\" rel=\"nofollow\">Harmony wiki</a> states that:</p>\n\n<blockquote>\n  <p>Arrow functions are like built-in functions in that both <strong>lack .prototype</strong> and any [[Construct]] internal method. So new (() =&gt; {}) throws a TypeError but otherwise arrows are like functions</p>\n</blockquote>\n\n<p>Which means, you can test for arrow functions like:</p>\n\n<pre><code>!(()=&gt;{}).hasOwnProperty(\"prototype\") // true\n!(function(){}).hasOwnProperty(\"prototype\") // false\n</code></pre>\n\n<p>But the test will also return <code>true</code> for any built-in function, e.g. <code>setTimeout</code> or <code>Math.min</code>.</p>\n\n<p>It sort of works in Firefox if you get the source code and check if it's <code>\"native code\"</code>, but it doesn't seem much reliable nor portable (other browser implementations, NodeJS / iojs):</p>\n\n<pre><code>setTimeout.toSource().indexOf(\"[native code]\") &gt; -1\n</code></pre>\n\n<p>The small GitHub project <a href=\"https://github.com/ljharb/node-is-arrow-function/blob/master/index.js\" rel=\"nofollow\">node-is-arrow-function</a> relies on RegExp-checks against the function source code, which isn't that neat.</p>\n\n<p><strong>edit:</strong> I gave the JavaScript parser <a href=\"https://github.com/marijnh/acorn\" rel=\"nofollow\">acorn</a> a try and it seems to work quite okay - even though it's pretty overkill.</p>\n\n<pre><code>acorn = require(\"./acorn\");\n\nfunction fn_sample(a,b){\n    c = (d,e) =&gt; d-e;\n    f = c(--a, b) * (b, a);\n    return f;\n}\n\nfunction test(fn){\n    fn = fn || fn_sample;\n    try {\n        acorn.parse(\"(\" + fn.toString() + \")\", {\n            ecmaVersion: 6,\n            onToken: function(token){\n                if(typeof token.type == \"object\" &amp;&amp; token.type.type == \"=&gt;\"){\n                    console.log(\"ArrowFunction found\", token);\n                }\n            }\n        });\n    } catch(e) {\n        console.log(\"Error, possibly caused by [native code]\");\n        console.log(e.message);\n    }\n}\n\nexports.test = test;\n</code></pre>\n    ","a":"\n<p>Believe it or not...</p>\n\n<p>Testing for presence of \"=&gt;\" in string representation of a function is likely the most reliable way (but not 100%).</p>\n\n<p>Obviously we can't test against either of 2 conditions you mentioned — lack of prototype property and lack of <code>[[Construct]]</code> as that might give false positives with either host objects or built-in ones that lack <code>[[Construct]]</code> (<code>Math.floor</code>, <code>JSON.parse</code>, etc.)</p>\n\n<p>We could, however, use good old <code>Function.prototype.toString</code> to check if function representation contains \"=&gt;\".</p>\n\n<p>Now, I've always recommended <strong>against</strong> using <code>Function.prototype.toString</code> (so-called <em>function decompilation</em>) due to its implementation-dependent and historically unreliable nature (more details in <a href=\"http://perfectionkills.com/state-of-function-decompilation-in-javascript/\" rel=\"nofollow\">State of function decompilation in Javascript</a>).</p>\n\n<p>But ES6 actually <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype.tostring\" rel=\"nofollow\">tries to enforce rules</a> on the way (at least) built-in and \"user-created\" (for the lack of better term) functions are represented.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li><p>If Type(func) is Object and is either a Built-in function object or\n  <strong>has an [[ECMAScriptCode]] internal slot</strong>, then </p>\n  \n  <p>a. Return an implementation-dependent String source code representation of func. The representation <strong>must conform to the rules below</strong>.</p></li>\n  </ol>\n  \n  <p>...</p>\n  \n  <p>toString Representation Requirements:</p>\n  \n  <ul>\n  <li><p>The string representation must have the syntax of a FunctionDeclaration FunctionExpression, GeneratorDeclaration,\n  GeneratorExpession, ClassDeclaration, ClassExpression, <strong>ArrowFunction</strong>,\n  MethodDefinition, or GeneratorMethod depending upon the actual\n  characteristics of the object.</p></li>\n  <li><p>The use and placement of white space, line terminators, and semicolons within the representation String is\n  implementation-dependent.</p></li>\n  <li><p>If the object was defined using ECMAScript code and the returned string representation is not in the form of a MethodDefinition or\n  GeneratorMethod then the representation must be such that if the\n  string is evaluated, using eval in a lexical context that is\n  equivalent to the lexical context used to create the original object,\n  it will result in a new functionally equivalent object. In that case\n  the returned source code must not mention freely any variables that\n  were not mentioned freely by the original function’s source code, even\n  if these “extra” names were originally in scope.</p></li>\n  <li><p>If the implementation cannot produce a source code string that meets these criteria then it must return a string for which eval will throw\n  a SyntaxError exception.</p></li>\n  </ul>\n</blockquote>\n\n<p>I highlighted relevant chunks.</p>\n\n<p>Arrow functions have internal <code>[[ECMAScriptCode]]</code> (which you can track from 14.2.17 — evaluation of arrow function - to <em>FunctionCreate</em> to <em>FunctionInitialize</em>).</p>\n\n<p>This means they must conform to <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arrow-function-definitions\" rel=\"nofollow\">ArrowFunction syntax</a>:</p>\n\n<pre><code>ArrowFunction[In, Yield] :\n  ArrowParameters[?Yield] [no LineTerminator here] =&gt; ConciseBody[?In]\n</code></pre>\n\n<p>..which means they must have =&gt; in <code>Function.prototype.toString</code>'s output.</p>\n\n<p>You'll obviously need to ensure \"=&gt;\" follows ArrowParameters and is not just something present in FunctionBody:</p>\n\n<pre><code>function f() { return \"=&gt;\" }\n</code></pre>\n\n<p>As for reliability — remember that this behavior is/might not be supported by any/all engines at the moment and that host objects' representation might lie (despite specs efforts) for whatever reasons.</p>\n    "},{"t":"Recover property key/value","l":"http://stackoverflow.com/questions/17537002/recover-property-key-value","q":"\n\n<p>I am playing with ECMAScript 6 symbols and maps in Node.JS v0.11.4 with the <code>--harmony</code> flag. Consider the following.</p>\n\n<pre><code>var a = Map();\na.set(Symbol(), 'Noise');\n\n// Prints \"1\"\nconsole.log(a.size);\n</code></pre>\n\n<p>Can the value <code>'Noise'</code> be retrieved given the property is identified by an \"anonymous\" symbol key, which is guaranteed to be unique?</p>\n    ","a":"\n<p>It is not possible to do it in node.js because the current version of v8 hasn't implemented iteration as indicated in this <a href=\"https://code.google.com/p/v8/issues/detail?id=1793\" rel=\"nofollow\">bug report</a>.</p>\n\n<p>We can confirm that by looking at the source code of v8's <a href=\"https://github.com/v8/v8/blob/9abb3fe0d216c563f75e4d4ac0cde3e24582d01d/src/collection.js#L217\" rel=\"nofollow\">collection.js</a>:</p>\n\n<pre><code>InstallFunctions($Map.prototype, DONT_ENUM, $Array(\n    \"get\", MapGet,\n    \"set\", MapSet,\n    \"has\", MapHas,\n    \"delete\", MapDelete,\n    \"clear\", MapClear\n));\n</code></pre>\n\n<p>But, as can be seen in <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3asimple_maps_and_sets\" rel=\"nofollow\">ECMAScript 6 wiki</a>, there should also be <code>items()</code>, <code>keys()</code>, and <code>values()</code>. v8 probably didn't implement these methods before, because it didn't support generators. But now <a href=\"http://wingolog.org/archives/2013/05/08/generators-in-v8\" rel=\"nofollow\">it does</a> since May of this year. It should be a just a matter of time until this is implemented.</p>\n\n<p>If you need to have this functionality now, you can use <a href=\"https://github.com/arv/map-set-for-each\" rel=\"nofollow\">map-set-for-each</a> which polyfills <code>forEach</code>. You will need to modify it to add <code>case 'symbol':</code> after <code>case 'object':</code>.</p>\n\n<pre><code>a.forEach(function(value, key) {\n  if (value === 'Noise') {\n    console.log('Give mak the bounty');\n  }\n});\n</code></pre>\n\n<p>When v8 implements iteration of <code>Map</code> you will be able to find <code>Noise</code> like this:</p>\n\n<pre><code>for (let [key, value] of a) {\n  if (value === 'Noise') {\n    console.log('Upvotes for future');\n  }\n}\n</code></pre>\n    "},{"t":"Extended Errors do not have message or stack trace","l":"http://stackoverflow.com/questions/30402287/extended-errors-do-not-have-message-or-stack-trace","q":"\n\n<p>When running this snippet through BabelJS:</p>\n\n<pre><code>class FooError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n\nlet error = new FooError('foo');\nconsole.log(error, error.message, error.stack);\n</code></pre>\n\n<p>it outputs</p>\n\n<pre><code>{}\n</code></pre>\n\n<p>which is not what I expect. Running</p>\n\n<pre><code>error = new Error('foo');\nconsole.log(error, error.message, error.stack);\n</code></pre>\n\n<p>produces</p>\n\n<pre><code>{} foo Error: foo\n    at eval (eval at &lt;anonymous&gt; (https://babeljs.io/scripts/repl.js?t=2015-05-21T16:46:33+00:00:263:11), &lt;anonymous&gt;:24:9)\n    at REPL.evaluate (https://babeljs.io/scripts/repl.js?t=2015-05-21T16:46:33+00:00:263:36)\n    at REPL.compile (https://babeljs.io/scripts/repl.js?t=2015-05-21T16:46:33+00:00:210:12)\n    at Array.onSourceChange (https://babeljs.io/scripts/repl.js?t=2015-05-21T16:46:33+00:00:288:12)\n    at u (https://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min.js:28:185)\n</code></pre>\n\n<p>which is exactly what I would like from the extended error.</p>\n\n<p>My goal is to extend <code>Error</code> into a variety of subclasses and use them in bluebird's <code>catch</code> matching. So far, that is failing miserably.</p>\n\n<p>Why is the subclass not showing a message or stack trace?</p>\n\n<p><strong>Edit:</strong> <a href=\"https://jsfiddle.net/5e3kakqj/\" rel=\"nofollow\">using Chrome's built-in subclassing</a> (thanks to @coder) works perfectly. This isn't specific to Babel, necessarily, as the following example (from <a href=\"https://gitter.im/babel/babel?at=555f678f727234850fc7656d\" rel=\"nofollow\">@loganfsmyth on Babel's gitter feed</a>) shows:</p>\n\n<pre><code>// Works\nnew (function(){\n  \"use strict\";\n  return class E extends Error { }\n}());\n// Doesn't\nnew (function(){\n  \"use strict\";\n  function E(message){\n    Error.call(this, message);\n  };\n  E.prototype = Object.create(Error);\n  E.prototype.constructor = E;\n  return E;\n}());\n</code></pre>\n    ","a":"\n<p>In short, extending using babel's transpiled code only works for classes built in a specific way, and a lot of native stuff doesn't appear to be built like that. Babel's docs warns that extending many native classes doesn't work properly.</p>\n\n<p>You could create a buffer class that creates the properties \"manually\", something like this:</p>\n\n<pre><code>class ErrorClass extends Error {\n  constructor (message) {\n    super();\n\n    if (Error.hasOwnProperty('captureStackTrace'))\n        Error.captureStackTrace(this, this.constructor);\n    else\n       Object.defineProperty(this, 'stack', {\n          value: (new Error()).stack\n      });\n\n    Object.defineProperty(this, 'message', {\n      value: message\n    });\n  }\n\n}\n</code></pre>\n\n<p>Then extend that class instead:</p>\n\n<pre><code>class FooError extends ErrorClass {\n  constructor(message) {\n    super(message);\n  }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Why doesn't it work as you'd expect?</strong></p>\n\n<p>If you look at what is transpiled, you'll see that babel first assigns a copy of the super class' prototype to the sub class, then when you call <code>new SubClass()</code> this function is called: </p>\n\n<pre><code>_get(Object.getPrototypeOf(FooError.prototype), \"constructor\", this).call(this, message)\n</code></pre>\n\n<p>Where _get is a helper function injected into the script:</p>\n\n<pre><code>(function get(object, property, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n});\n</code></pre>\n\n<p>it does something like finds the <code>constructor</code> property descriptor of the sub class' prototype's prototype and tried to call its getter with the new subclass instance as context if it exists or return its value (<code>if (\"value\" in desc)</code>), in this case the Error constructor itself. It doesn't assign anything to <code>this</code> from the super call so while the new object has the right prototype, it didn't get constructed the way you expect. Basically the super call does nothing to the newly constructed object, just creates a new <code>Error</code> which isn't assigned to anything.</p>\n\n<p>If we use the <code>ErrorClass</code> defined above, it does adhere to the class structure as expected by Babel.</p>\n    "},{"t":"Is it possible to have multiple dynamic method names in a class?","l":"http://stackoverflow.com/questions/28935110/is-it-possible-to-have-multiple-dynamic-method-names-in-a-class","q":"\n\n<p>I'm reading through the ES6 class information on <a href=\"https://babeljs.io/docs/learn-es6/#classes\" rel=\"nofollow\">Babel.js's documentation</a> and noticed that it says that objects can now have dynamic property names:</p>\n\n<pre><code>var obj = {\n    ...\n\n    // Computed (dynamic) property names\n    [ \"prop_\" + (() =&gt; 42)() ]: 42\n};\n</code></pre>\n\n<p>This seems like it would be useful in classes as well. Is it possible to do something similar in an ES6 class without doing it in a constructor, i.e.:</p>\n\n<pre><code>class Foo {\n  [ \"read\" + (...)(['format1', 'format2']) ] {\n    // my format reading function\n  }\n}\n</code></pre>\n\n<p>rather than doing something like this in the constructor:</p>\n\n<pre><code>class Foo {\n  constructor(opts) {\n    let formats = ['format1', 'format2'];\n    let self = this;\n\n    formats.forEach(function(format) {\n      self[\"read\" + format] = function() {\n        // my format reading function\n      }\n    })\n  }\n}\n</code></pre>\n\n<p>In other words, I want to be able to take some array, such as <code>['format1', 'format2']</code> and create two methods, <code>readformat1</code> and <code>readformat2</code>, in the class dynamically, without using the constructor. Is this possible?</p>\n    ","a":"\n<p>Yes, it's possible, you only missed the required <code>()</code> for the method signature:</p>\n\n<pre><code>class Foo {\n  [ \"read\" + ((format) =&gt; format)(myFormat) ]() {\n    // my format reading function          // ^--- this what missed\n  }\n} \n</code></pre>\n\n<p>Babel repl: <a href=\"https://babeljs.io/repl/#?experimental=false&amp;playground=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20myFormat%20%3D%20'foo'%0D%0A%0D%0Aclass%20Foo%20%7B%0D%0A%20%20%5B%20%22read%22%20%2B%20((format)%20%3D%3E%20format)(myFormat)%20%5D()%20%7B%0D%0A%20%20%20%20return%20123%3B%0D%0A%20%20%7D%0D%0A%7D%20\" rel=\"nofollow\">long and ugly url here</a></p>\n\n<p>As of your updated question: it's not possible (at least I'm not aware of it). So you can create methods with names resolved in runtime, but you cannot create N methods from the array using that syntax.</p>\n    "},{"t":"MDN “Object.is” alternative proposal","l":"http://stackoverflow.com/questions/21482500/mdn-object-is-alternative-proposal","q":"\n\n<p>I have read <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">the MDN page on the \"Object.is\" method</a>.\nIt gives an alternative code for the browsers that do not provide this method:</p>\n\n<pre><code>if (!Object.is) {\n    Object.is = function(v1, v2) {\n        if (v1 === 0 &amp;&amp; v2 === 0) {\n            return 1 / v1 === 1 / v2;\n        }\n        if (v1 !== v1) {\n            return v2 !== v2;\n        }\n        return v1 === v2;\n    };\n}\n</code></pre>\n\n<p>The question is simple: when can the second \"if\" be true ?</p>\n\n<p>Thank you for your attention.</p>\n    ","a":"\n<p>It kinda is written in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\" rel=\"nofollow\">the same article</a>:</p>\n\n<blockquote>\n  <p>This is also not the same as being equal according to the ===\n  operator.  The === operator (and the == operator as well) treats the\n  number values -0 and +0 as equal, and <strong><em>it treats Number.NaN as not\n  equal to NaN</em></strong>.</p>\n</blockquote>\n\n<p>The logic is that <code>NaN !== NaN</code> is the only case in which the <code>!==</code> operator returns <code>true</code> on the same variable, so it must be about <code>NaN</code> comparison. It then does the same check on <code>v2</code> and returns true of false based on the outcome: <em>if <code>v2</code> comparison is <code>true</code>, it's about NaN compared to NaN so return <code>true</code>, if not then return <code>false</code> because NaN is never the same as something that isn't NaN</em>.</p>\n    "},{"t":"How can I control program flow using events and promises?","l":"http://stackoverflow.com/questions/31342363/how-can-i-control-program-flow-using-events-and-promises","q":"\n\n<p>I have a class like so:</p>\n\n<pre><code>import net from 'net';\nimport {EventEmitter} from 'events';\nimport Promise from 'bluebird';\n\nclass MyClass extends EventEmitter {\n    constructor(host = 'localhost', port = 10011) {\n        super(EventEmitter);\n        this.host = host;\n        this.port = port;\n        this.socket = null;\n        this.connect();\n    }\n    connect() {\n        this.socket = net.connect(this.port, this.host);\n        this.socket.on('connect', this.handle.bind(this));\n    }\n    handle(data) {\n        this.socket.on('data', data =&gt; {\n\n        });\n    }\n    send(data) {\n        this.socket.write(data);\n    }\n}\n</code></pre>\n\n<p>How would I turn the <code>send</code> method into a promise, which returns a value from the socket's <code>data</code> event? The server only sends data back when data is sent to it, other than a connection message which can easily be suppressed.</p>\n\n<p>I've tried something like:</p>\n\n<pre><code>handle(data) {\n    this.socket.on('data', data =&gt; {\n        return this.socket.resolve(data);\n    });\n    this.socket.on('error', this.socket.reject.bind(this));\n}\nsend(data) {\n    return new Promise((resolve, reject) =&gt; {\n        this.socket.resolve = resolve;\n        this.socket.reject = reject;\n        this.socket.write(data);\n    });\n}\n</code></pre>\n\n<p>Obviously this won't work because <code>resolve</code>/<code>reject</code> will overwrite each other when chaining and/or calling <code>send</code> multiple times in parallel.</p>\n\n<p>There's also the problem of calling <code>send</code> twice in parallel and it resolving whichever response comes back first.</p>\n\n<p>I currently have an implementation using a queue and defers , but it feels messy since the queue is constantly being checked.</p>\n\n<p>I'd like to be able to do the following:</p>\n\n<pre><code>let c = new MyClass('localhost', 10011);\nc.send('foo').then(response =&gt; {\n    return c.send('bar', response.param);\n    //`response` should be the data returned from `this.socket.on('data')`.\n}).then(response =&gt; {\n    console.log(response);\n}).catch(error =&gt; console.log(error));\n</code></pre>\n\n<p>Just to add, I don't have any control over the data that is received, meaning it can't be modified outside of the stream.</p>\n\n<p><strong>Edit</strong>: So it seems this is pretty impossible, due to TCP not having a request-response flow. How can this be implemented still using promises, but either using a single-execution (one request at a time) promise chain or a queue.</p>\n    ","a":"\n<p>I distilled the problem to the bare minimum and made it browser runnable:</p>\n\n<ol>\n<li>Socket class is mocked.</li>\n<li>Removed info about port, host and inheritance from <code>EventEmitter</code>.</li>\n</ol>\n\n<p>The solution works by appending new requests to the promise chain, but allowing maximum one open / not-answered request at any given timepoint. <code>.send</code> returns a new promise each time it is called and the class takes care of all internal synchronisation. So, <code>.send</code> may be called multiple times and the correct ordered (FIFO) of requests processing is guaranteed. One additional feature that I added is trimming the promise chain, if there are no pending requests.</p>\n\n<hr>\n\n<p><strong>Caveat</strong> I omitted error handling altogether, butit should be tailored to your particular use case anyway. </p>\n\n<hr>\n\n<p><a href=\"http://www.es6fiddle.net/ichu6qur/\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n\n<pre><code>class SocketMock {\n\n  constructor(){\n    this.connected = new Promise( (resolve, reject) =&gt; setTimeout(resolve,200) ); \n    this.listeners = {\n  //  'error' : [],\n    'data' : []\n    }\n  }\n\n  send(data){\n\n    console.log(`SENDING DATA: ${data}`);\n    var response = `SERVER RESPONSE TO: ${data}`;\n    setTimeout( () =&gt; this.listeners['data'].forEach(cb =&gt; cb(response)),               \n               Math.random()*2000 + 250); \n  }\n\n  on(event, callback){\n    this.listeners[event].push(callback); \n  }\n\n}\n\nclass SingleRequestCoordinator {\n\n    constructor() {\n        this._openRequests = 0; \n        this.socket = new SocketMock();\n        this._promiseChain = this.socket\n            .connected.then( () =&gt; console.log('SOCKET CONNECTED'));\n      this.socket.on('data', (data) =&gt; {\n        this._openRequests -= 1;\n        console.log(this._openRequests);\n        if(this._openRequests === 0){\n          console.log('NO PENDING REQUEST --- trimming the chain');\n          this._promiseChain = this.socket.connected\n        }\n        this._deferred.resolve(data);\n      });\n\n    }\n\n    send(data) {\n      this._openRequests += 1;\n      this._promiseChain = this._promiseChain\n        .then(() =&gt; {\n            this._deferred = Promise.defer();\n            this.socket.send(data);\n            return this._deferred.promise;\n        });\n      return this._promiseChain;\n    }\n}\n\nvar sender = new SingleRequestCoordinator();\n\nsender.send('data-1').then(data =&gt; console.log(`GOT DATA FROM SERVER --- ${data}`));\nsender.send('data-2').then(data =&gt; console.log(`GOT DATA FROM SERVER --- ${data}`));\nsender.send('data-3').then(data =&gt; console.log(`GOT DATA FROM SERVER --- ${data}`));\n\nsetTimeout(() =&gt; sender.send('data-4')\n    .then(data =&gt; console.log(`GOT DATA FROM SERVER --- ${data}`)), 10000);\n</code></pre>\n    "},{"t":"Why is my iterator being advanced again?","l":"http://stackoverflow.com/questions/30011435/why-is-my-iterator-being-advanced-again","q":"\n\n<p>I have the following program - I use genny.js to handle the asynchronous flow control - I have tried the same with suspend.js - similar error.</p>\n\n<p>I am using the Stripe nodejs API.</p>\n\n<p>My iterator function seems to be called twice - which is causing an error - and I don't understand why it gets called twice. It must be a simple mind trick that I am not seeing.</p>\n\n<pre><code>var genny = require('genny')\ngenny.longStackSupport = true\n\nvar stripe = require(\"stripe\")(\"sk_live_....\")\n\nfetchCharges = genny.fn(function* (d) {\n  console.log(\"Before fetchCharges\")\n  var charges = yield fetchList(d())\n  console.log(\"After fetchCharges - found \", charges.length)\n  return true\n})\n\nfetchList = genny.fn(function* (done) {\n  console.log(\"before fetchList\")\n  var results = yield stripe.charges.list({}, done())\n  console.log(\"after fetchList\")\n  return results.data\n})\n\ngenny.run(function* (resume) {\n  console.log('before run')\n  yield fetchCharges(resume())\n  console.log('after run')\n})\n</code></pre>\n\n<p>The console output is:</p>\n\n<pre><code>&gt; node --harmony genny.js\n\nbefore run\nBefore fetchCharges\nbefore fetchList\nafter fetchList\nAfter fetchCharges - found  10\nafter run\n/Volumes/dev/ingest/node_modules/genny/index.js:50\n        else throw e; \n                   ^\nError: callback already called\n    at resume (/Volumes/dev/ingest/node_modules/genny/index.js:154:39)\n    at throwAt (/Volumes/dev/ingest/node_modules/genny/index.js:49:30)\n    at resume (/Volumes/dev/ingest/node_modules/genny/index.js:153:28)\n    at tryProcessPending (/Volumes/dev/ingest/node_modules/genny/index.js:41:28)\n    at resume (/Volumes/dev/ingest/node_modules/genny/index.js:164:17)\n    at null._onTimeout (/Volumes/dev/ingest/node_modules/stripe/lib/StripeResource.js:87:34)\n    at Timer.listOnTimeout (timers.js:110:15)\nFrom generator:\n    at /Volumes/dev/ingest/genny.js:22:26\n</code></pre>\n\n<p>Now, if I replace fetchList with the following function it works fine:</p>\n\n<pre><code>fetchList = genny.fn(function* (done) {\n  console.log('before doTimeout')\n  console.log('1sec break ...')\n  yield setTimeout(done(), 1000);\n  console.log('after doTimeout')\n  return []\n})\n</code></pre>\n\n<p>The console output is:</p>\n\n<pre><code>&gt; node --harmony genny.js\n\nbefore run\nBefore fetchCharges\nbefore doTimeout\n1sec break ...\nafter doTimeout\nAfter fetchCharges - found  0\nafter run\n</code></pre>\n\n<p>To further illustrate the fact that the itertor's next() method gets called twice - I have another (non-working) version of the program.</p>\n\n<pre><code>var genny = require('genny')\ngenny.longStackSupport = true\n\nvar stripe = require(\"stripe\")(\"sk_live_...\")\n\nfetchCharges = genny.fn(function* (d) {\n  console.log(\"Before fetchCharges\")\n  var charges = yield fetchList(function(err, cb) {\n    console.log(\"callback\")\n  })\n  console.log(\"After fetchCharges - found \", charges.length)\n  return true\n})\n\nfetchList = genny.fn(function* (done) {\n  console.log(\"before fetchList\")\n  var results = yield stripe.charges.list({}, done())\n  console.log(\"after fetchList\")\n  return results.data\n})\n\ngenny.run(function* (resume) {\n  console.log('before run')\n  yield fetchCharges(resume())\n  console.log('after run')\n})\n</code></pre>\n\n<p>And it's console output is here:</p>\n\n<pre><code>&gt; node --harmony genny.js\n\nbefore run\nBefore fetchCharges\nbefore fetchList\nafter fetchList\ncallback\ncallback\n</code></pre>\n\n<p>It's weird - and I don't get it. Can somebody cleverer than me please explain.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>I have changed the code to call the stripe methods without a callback or \nthe iterator resume function. And now it works. BUT - curiously - look at the console at the \"results\". I don't get why. So now it doesn't call the fetchList iterator's next() function \"a second time\" - but I don't see where it even gets called once!?</p>\n\n<pre><code>var results = yield stripe.charges.list()\n</code></pre>\n\n<p>Here's the updated complete program.</p>\n\n<pre><code>var genny = require('genny')\ngenny.longStackSupport = true\n\nvar stripe = require(\"stripe\")(\"sk_live_i6TrEk5lSRM1CmbSZZPsQzKc\")\n\nfetchCharges = genny.fn(function* (d) {\n  console.log(\"  fetchCharges {\")\n  var charges = yield fetchList(d())\n  console.log(\"  } fetchCharges - found \", charges.length)\n  return true\n})\n\nfetchList = genny.fn(function* (done) {\n  console.log(\"    fetchList {\")\n  var results = yield stripe.charges.list({}, function(err, results) {\n    console.log(\"results \")\n  })\n  console.log(\"    } fetchList\")\n  return results.data\n})\n\ngenny.run(function* (resume) {\n  console.log('Before run {')\n  yield fetchCharges(resume())\n  console.log('} after run')\n})\n</code></pre>\n\n<p>This returns</p>\n\n<pre><code>&gt; node --harmony genny.js\n\nBefore run {\n  fetchCharges {\n    fetchList {\n    } fetchList\n  } fetchCharges - found  10\n} after run\nresults \n</code></pre>\n    ","a":"\n<p>The problem you are experiencing stems from a mix of two approaches for asynchrony.</p>\n\n<p>The <a href=\"https://www.npmjs.com/package/stripe#api-overview\" rel=\"nofollow\">stripe API docs</a> mentions</p>\n\n<blockquote>\n  <p>Every resource method accepts an optional callback as the last argument.<br>\n  Additionally, every resource method returns a promise.</p>\n</blockquote>\n\n<p>However, both <a href=\"https://github.com/spion/genny#genny\" rel=\"nofollow\">genny</a> and <a href=\"https://github.com/jmar777/suspend#suspend\" rel=\"nofollow\">suspend</a> do</p>\n\n<blockquote>\n  <p>work seamlessly with Node callback conventions <em>and</em> promises</p>\n</blockquote>\n\n<p>And here lies your mistake: in the line</p>\n\n<pre><code>var results = yield stripe.charges.list({}, done())\n</code></pre>\n\n<p>you do implicitly use <strong>both</strong> at the same time. The <code>done()</code> does create a callback which is passed to stripe, but that call also produces a promise which is yielded, and genny/suspend register another callback on it. This leads to the <code>Error: callback already called</code> you are observing.</p>\n\n<p>You may choose how you want to fix the problem:</p>\n\n<ul>\n<li><p>don't yield the promise</p>\n\n<pre><code>var results = yield void stripe.charges.list({}, done())\n//                  ^^^^\n</code></pre></li>\n<li><p>don't pass a callback</p>\n\n<pre><code>var results = yield stripe.charges.list({})\n</code></pre></li>\n</ul>\n\n<p>(I'd recommend the latter)</p>\n    "},{"t":"Can you make properties enumerable but not iterable in javascript?","l":"http://stackoverflow.com/questions/24877452/can-you-make-properties-enumerable-but-not-iterable-in-javascript","q":"\n\n<p>I was just wondering if there is a way to make an object property enumerable like in a <code>for in</code> loop but not show up in a <code>for of loop</code> sort of like</p>\n\n<pre><code>Object.defineProperty({},'prop',{\n    enumerable:true,\n    iterable:false\n}\n</code></pre>\n\n<p>if not, are there any plans to implement a feature like this? Or does the <code>for of</code> loop use the enumerable property</p>\n    ","a":"\n<p>I did some digging around at the Mozilla Development Network (MDN).</p>\n\n<p>Turns out that objects have a <code>obj.propertyIsEnumerable(prop)</code> method to check if the property is enumerable. From the examples given in the MDN, properties inherited through the prototype chain are not enumerable, thus the method returns false for those properties.</p>\n\n<p>An example of non enumerable properties are constructors and the property <code>length</code> of arrays.</p>\n\n<p>For the iterable part of the question, I will quote MDN: \"Iterable in ECMAScript 6 is an interface (or in other words, a protocol), not a type of object like Array or Map\".</p>\n\n<p>That is to say, the object needs to implement this interface to make its properties iterable. This is the case for built in iterables such as String, Array, Map, Set, WeakSet and Generator objects.</p>\n\n<p>The following code illustrated this:</p>\n\n<pre><code>var aString = \"hello\"\ntypeof aString[Symbol.iterator] // \"function\"\naString[Symbol.iterator]() + \"\" // \"[object String Iterator]\"\n[...aString]                    // [\"h\", \"e\", \"l\", \"l\", \"o\"]\n</code></pre>\n\n<p>Of course, you can define your own iterator implementation.</p>\n\n<p>Coming back to the question, properties attached to the object or its prototype (directly, meaning not via inheritance) will be displayed as enumerable in the <code>for...in</code> loop. For the iterables you need an implementation, either the ones mentioned before, or your own. Here is a great example from MDN.</p>\n\n<pre><code>let arr = [ 3, 5, 7 ];\narr.foo = \"hello\";\n\nfor (let i in arr) {\n   console.log(i); // logs \"0\", \"1\", \"2\", \"foo\" these are property names or indexes\n}\n\nfor (let i of arr) {\n   console.log(i); // logs \"3\", \"5\", \"7\" these are actual values of an\n                   // iterable implementation provided by the array prototype\n}\n</code></pre>\n\n<p>The <code>let</code> keyword is equivalent in this context to a <code>var</code> definition (though it has more implications but they are outside the scope of this post).</p>\n\n<p>As you can see the array has an implementation already of the <code>iterable</code> interface (from the array prototype), thus it yields its values when using the <code>for...of</code> loop, whereas the <code>foo</code> property is not displayed (neither value nor property name).</p>\n\n<p>So if your object does not implement an <code>iterable</code> interface, it should not be iterable (in principle) and thus it will display its properties' in a <code>for...of</code> loop.</p>\n    "},{"t":"ES6 module import and dependency management","l":"http://stackoverflow.com/questions/28798747/es6-module-import-and-dependency-management","q":"\n\n<p>With the use of transpilers it is already possible to use ES6 modules. One of the easiest ways is using Browserify and Babelify.\nThe problem I'm having is how to handle dependency management.</p>\n\n<p>In the old days you'd just have some Bower dependencies. The build would bundle non-CDN to <em>vendor.js</em> and project specific files to <em>foobar.js</em> (or whatever).\nSo then you'd be able to use the resulting code in a different project by simply <code>bower install foobar --save</code>.\nIf both <em>foobar</em> and your new project had a common dependency it would be easily resolved with Bowers flat dependency.</p>\n\n<p>Now in come ES6 modules:\nSay I have a project <em>foo</em> using <em>lodash</em>. The directory structure is as follows:</p>\n\n<p><code>src/js/foo.js\nsrc/vendor/lodash/dist/lodash.min.js</code></p>\n\n<p>And <em>foo.js</em> starts by declaring:</p>\n\n<p><code>import * as _ from '../../vendor/lodash/dist/lodash.min.js';</code></p>\n\n<p>or (as Browserify wants since Babelify transpiles to CommonJS):</p>\n\n<p><code>import * as _ from './../../vendor/lodash/dist/lodash.min.js';</code></p>\n\n<p>If I now round up and publish my <em>foo</em> project and start a new project <em>bar</em> that uses <em>foo</em> this will be my directory structure.</p>\n\n<p><code>src/js/bar.js\nsrc/vendor/foo/dist/foo.js\nsrc/vendor/lodash/dist/lodash.min.js</code></p>\n\n<p>But that would not work since the path from <em>foo</em> to <em>lodash</em> is now broken (if I understand Browserify correctly the dot-slash in './blaat/file.js' is relative to the file it's being called from).</p>\n\n<p>Is some way to import without making any file path assumptions?</p>\n\n<p>Isn't there some way to indicate multiple source roots? (ie in the above case src/js and src/vendor ... well, ideally you'd just want to state <code>import * as _ from 'lodash';</code>)</p>\n\n<p>I've only used Browserify with Babelify on cli. Should I be using some other transpiler?</p>\n    ","a":"\n<p>I think that <a href=\"http://jspm.io\" rel=\"nofollow\">jspm</a> is the solution your looking for. It will help you out without making file path assumptions when importing modules. It uses the <a href=\"https://github.com/systemjs/systemjs\" rel=\"nofollow\">SystemJS dynamic ES6 loader</a>. Watch the video that is posted on their site for a very good explanation on how it all works, <a href=\"https://youtu.be/szJjsduHBQQ\" rel=\"nofollow\">Guy Bedford: Package Management for ES6 Modules [JSConf2014]</a>.</p>\n    "},{"t":"Converting Singleton JS objects to use ES6 classes","l":"http://stackoverflow.com/questions/26205565/converting-singleton-js-objects-to-use-es6-classes","q":"\n\n<p>I'm using ES6 with the Webpack es6-transpiler per my article here: <a href=\"http://www.railsonmaui.com/blog/2014/10/02/integrating-webpack-and-the-es6-transpiler-into-an-existing-rails-project/\" rel=\"nofollow\">http://www.railsonmaui.com/blog/2014/10/02/integrating-webpack-and-the-es6-transpiler-into-an-existing-rails-project/</a></p>\n\n<p>Does it make any sense to convert two Singleton objects to use ES6 Classes?</p>\n\n<pre><code>import { CHANGE_EVENT } from \"../constants/Constants\";\n\nvar EventEmitter = require('events').EventEmitter;\nvar merge = require('react/lib/merge');\n\nvar _flash = null;\n\nvar BaseStore = merge(EventEmitter.prototype, {\n\n  emitChange: function() {\n    this.emit(CHANGE_EVENT);\n  },\n\n  /**\n   * @param {function} callback\n   */\n  addChangeListener: function(callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  /**\n   * @param {function} callback\n   */\n  removeChangeListener: function(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  },\n\n  getFlash: function() {\n    return _flash;\n  },\n\n  setFlash: function(flash) {\n    _flash = flash;\n  }\n});\n\nexport { BaseStore };\n</code></pre>\n\n<p>This is file ManagerProducts.jsx that has a singleton that should extend from BaseStore.</p>\n\n<pre><code>/**\n * Client side store of the manager_product resource\n */\nimport { BaseStore } from \"./BaseStore\";\nimport { AppDispatcher } from '../dispatcher/AppDispatcher';\nimport { ActionTypes } from '../constants/Constants';\nimport { WebAPIUtils } from '../utils/WebAPIUtils';\nimport { Util } from \"../utils/Util\";\nvar merge = require('react/lib/merge');\n\nvar _managerProducts = [];\n\nvar receiveAllDataError = function(action) {\n  console.log(\"receiveAllDataError %j\", action);\n  WebAPIUtils.logAjaxError(action.xhr, action.status, action.err);\n};\n\nvar ManagerProductStore = merge(BaseStore, {\n  getAll: function() {\n    return _managerProducts;\n  }\n});\n\nvar receiveAllDataSuccess = function(action) {\n  _managerProducts = action.data.managerProducts;\n  //ManagerProductStore.setFlash({ message: \"Manager Product data loaded\"});\n};\n\n\nManagerProductStore.dispatchToken = AppDispatcher.register(function(payload) {\n  var action = payload.action;\n  if (Util.blank(action.type)) { throw `Invalid action, payload ${JSON.stringify(payload)}`; }\n\n  switch(action.type) {\n    case ActionTypes.RECEIVE_ALL_DATA_SUCCESS:\n      receiveAllDataSuccess(action);\n      break;\n    case ActionTypes.RECEIVE_ALL_DATA_ERROR:\n      receiveAllDataError(action);\n      break;\n    default:\n      return true;\n  }\n  ManagerProductStore.emitChange();\n  return true;\n});\n\nexport { ManagerProductStore };\n</code></pre>\n    ","a":"\n<p>I'd argue that singletons (classes that manage their own singleton lifetime) are unnecessary in any language.  That is not to say that singleton lifetime is not useful, just that I prefer that something other than the class manage the lifetime of an object, like a DI container.</p>\n\n<p>That being said, the singleton pattern CAN be applied to JavaScript classes, borrowing the \"SingletonEnforcer\" pattern that was used in ActionScript.  I can see wanting to do something like this when porting an existing code base that uses singletons into ES6.</p>\n\n<p>In this case, the idea is that you make a private (via an un exposed Symbol) static <code>singleton</code> instance, with a public static <code>instance</code> getter.  You then restrict the constructor to something that has access to a special <code>singletonEnforcer</code> symbol that is not exposed outside of the module.  That way, the constructor fails if anyone other than the singleton tries to \"new\" it up.  It would look something like this:</p>\n\n<pre><code>let singleton = Symbol();\nlet singletonEnforcer = Symbol()\n\nclass SingletonTest {\n\n  constructor(enforcer) {\n    if(enforcer != singletonEnforcer) throw \"Cannot construct singleton\";\n  }\n\n  static get instance() {\n    if(!this[singleton]) {\n      this[singleton] = new SingletonTest(singletonEnforcer);\n    }\n    return this[singleton];\n  }\n}\n\nexport default SingletonTest\n</code></pre>\n\n<p>Then you can use it like any other singleton:</p>\n\n<pre><code>import SingletonTest from 'singleton-test';\nlet instance = SingletonTest.instance;\n</code></pre>\n    "},{"t":"Understanding Node JS Generators with fs Module","l":"http://stackoverflow.com/questions/22493826/understanding-node-js-generators-with-fs-module","q":"\n\n<p>I've been very excited about Node JS for awhile. I finally decided to knuckle down and write a test project to learn about generators in the latest Harmony build of Node.</p>\n\n<p>Here is my very simple test project:</p>\n\n<p><a href=\"https://github.com/kirkouimet/project-node\" rel=\"nofollow\">https://github.com/kirkouimet/project-node</a></p>\n\n<p>To run my test project, you can easily pull the files from Github and then run it with:</p>\n\n<pre><code>node --harmony App.js\n</code></pre>\n\n<p>Here's my problem - I can't seem to get Node's asynchronous fs.readdir method to run inline with generators. Other projects out there, such as <a href=\"https://github.com/bjouhier/galaxy\" rel=\"nofollow\">Galaxy</a> and <a href=\"https://github.com/jmar777/suspend\" rel=\"nofollow\">suspend</a> seem to be able to do it.</p>\n\n<p>Here is the block of code I need to fix. I want to be able to instantiate an object of type FileSystem and call the .list() method on it:</p>\n\n<p><a href=\"https://github.com/kirkouimet/project-node/blob/4c77294f42da9e078775bb84c763d4c60f21e1cc/FileSystem.js#L7-L11\" rel=\"nofollow\">https://github.com/kirkouimet/project-node/blob/4c77294f42da9e078775bb84c763d4c60f21e1cc/FileSystem.js#L7-L11</a></p>\n\n<pre><code>FileSystem = Class.extend({\n\n    construct: function() {\n        this.currentDirectory = null;\n    },\n\n    list: function*(path) {\n        var list = yield NodeFileSystem.readdir(path);\n\n        return list;\n    }\n\n});\n</code></pre>\n\n<p>Do I need to do something ahead of time to convert Node's fs.readdir into a generator?</p>\n\n<p>One important note, I am parsing all class functions as they are created. This lets me handle generator functions differently than normal functions:</p>\n\n<p><a href=\"https://github.com/kirkouimet/project-node/blob/4c77294f42da9e078775bb84c763d4c60f21e1cc/Class.js#L31-L51\" rel=\"nofollow\">https://github.com/kirkouimet/project-node/blob/4c77294f42da9e078775bb84c763d4c60f21e1cc/Class.js#L31-L51</a></p>\n\n<p>I've been really stumped with this project. Would love any assistance!</p>\n\n<p>Here is what I am trying to accomplish:</p>\n\n<ol>\n<li>Heavy use of classes with a modified version of John Resig's JavaScript Class support with inheritance</li>\n<li>Using generators to get inline support for Node's stock async calls</li>\n</ol>\n\n<h3>Edit</h3>\n\n<p>I've tried to implement your example function and I am running into some trouble.</p>\n\n<pre><code>list: function*(path) {\n    var list = null;\n\n    var whatDoesCoReturn = co(function*() {\n        list = yield readdir(path);\n        console.log(list); // This shows an array of files (good!)\n        return list; // Just my guess that co should get this back, it doesn't\n    })();\n    console.log(whatDoesCoReturn); // This returns undefined (sad times)\n\n    // I need to use `list` right here\n\n    return list; // This returns as null\n}\n</code></pre>\n    ","a":"\n<p>First and foremost, it is important to have a good model in your head of exactly what a generator is. A generator function is a function that returns a generator object, and that generator object will step through <code>yield</code> statements within the generator function as you call <code>.next()</code> on it.</p>\n\n<p>Given that description, you should notice that asynchronous behavior is not mentioned. Any action on a generator on its own is synchronous. You can run to the first <code>yield</code> immediately and then do a <code>setTimeout</code> and then call <code>.next()</code> to go to the next <code>yield</code>, but it is the <code>setTimeout</code> that causes asynchronous behavior, not the generator itself.</p>\n\n<p>So let's cast this in the light of <code>fs.readdir</code>. <code>fs.readdir</code> is an async function, and using it in a generator on its own will have no effect. Let's look at your example:</p>\n\n<pre><code>function * read(path){\n    return yield fs.readdir(path);\n}\n\nvar gen = read(path);\n// gen is now a generator object.\n\nvar first = gen.next();\n// This is equivalent to first = fs.readdir(path);\n// Which means first === undefined since fs.readdir returns nothing.\n\nvar final = gen.next();\n// This is equivalent to final = undefined;\n// Because you are returning the result of 'yield', and that is the value passed\n// into .next(), and you are not passing anything to it.\n</code></pre>\n\n<p>Hopefully it makes it clearer that what you are still calling <code>readdir</code> synchronously, and you are not passing any callback, so it will probably throw an error or something.</p>\n\n<h3>So how do you get nice behavior from generators?</h3>\n\n<p>Generally this is accomplished by having the generator yield a special object that represents the result of <code>readdir</code> before the value has actually been calculated.</p>\n\n<p>For (unrealistic) example, <code>yield</code>ing a function is a simple way to yield something that represents the value.</p>\n\n<pre><code>function * read(path){\n    return yield function(callback){\n        fs.readdir(path, callback);\n    };\n}\n\nvar gen = read(path);\n// gen is now a generator object.\n\nvar first = gen.next();\n// This is equivalent to first = function(callback){ ... };\n\n// Trigger the callback to calculate the value here.\nfirst(function(err, dir){\n  var dirData = gen.next(dir);\n  // This will just return 'dir' since we are directly returning the yielded value.\n\n  // Do whatever.\n});\n</code></pre>\n\n<p>Really, you would want this type of logic to continue calling the generator until all of the <code>yield</code> calls are done, rather than hard-coding each call. The main thing to notice with this though, is now the generator itself looks synchronous, and everything outside the <code>read</code> function is super generic.</p>\n\n<p>You need some kind of generator wrapper function that handles this yield value process, and your example of the <a href=\"https://github.com/jmar777/suspend\"><code>suspend</code></a> does exactly this. Another example is <a href=\"https://github.com/visionmedia/co\"><code>co</code></a>.</p>\n\n<p>The standard method for the method of \"return something representing the value\" is to return a <a href=\"https://github.com/petkaantonov/bluebird\"><code>promise</code></a> or a <a href=\"https://github.com/visionmedia/node-thunkify\"><code>thunk</code></a> since returning a function like I did is kind of ugly.</p>\n\n<p>With the <code>thunk</code> and <code>co</code> libraries, you with do the above without the example function:</p>\n\n<pre><code>var thunkify = require('thunkify');\nvar co = require('co');\nvar fs = require('fs');\nvar readdir = thunkify(fs.readdir);\n\nco(function * (){\n    // `readdir` will call the node function, and return a thunk representing the\n    // directory, which is then `yield`ed to `co`, which will wait for the data\n    // to be ready, and then it will start the generator again, passing the value\n    // as the result of the `yield`.\n    var dirData = yield readdir(path, callback);\n\n    // Do whatever.\n})(function(err, result){\n    // This callback is called once the synchronous-looking generator has returned.\n    // or thrown an exception.\n});\n</code></pre>\n\n<h3>Update</h3>\n\n<p>Your update still has some confusion. If you want your <code>list</code> function to be a generator, then you will need to use <code>co</code> <em>outside</em> of <code>list</code> wherever you are calling it. Everything inside of <code>co</code> should be generator-based and everything outside <code>co</code> should be callback-based. <code>co</code> does not make <code>list</code> automatically asynchronous. <code>co</code> is used to translate a generator-based async flow control into callback-based flow control. </p>\n\n<p>e.g.</p>\n\n<pre><code>list: function(path, callback){\n    co(function * (){\n      var list = yield readdir(path);\n\n      // Use `list` right here.\n\n      return list;\n    })(function(err, result){\n      // err here would be set if your 'readdir' call had an error\n      // result is the return value from 'co', so it would be 'list'.\n\n      callback(err, result);\n    })\n}\n</code></pre>\n    "},{"t":"ECMAScript 6: what is WeakSet for?","l":"http://stackoverflow.com/questions/30556078/ecmascript-6-what-is-weakset-for","q":"\n\n<p>The WeakSet is supposed to store elements by weak reference. That is, if an object is not referenced by anything else, it should be cleaned from the WeakSet.</p>\n\n<p>I have written the following test:</p>\n\n<pre><code>var weakset = new WeakSet(),\n    numbers = [1, 2, 3];\n\nweakset.add(numbers);\nweakset.add({name: \"Charlie\"});\n\nconsole.log(weakset);\n\nnumbers = undefined;\n\nconsole.log(weakset);\n</code></pre>\n\n<p>Even though my <code>[1, 2, 3]</code> array is not referenced by anything, it's not being removed from the WeakSet. The console prints:</p>\n\n<pre><code>WeakSet {[1, 2, 3], Object {name: \"Charlie\"}}\nWeakSet {[1, 2, 3], Object {name: \"Charlie\"}}\n</code></pre>\n\n<p>Why is that?</p>\n\n<p>Plus, I have one more question. What is the point of adding objects to WeakSets directly, like this:</p>\n\n<pre><code>weakset.add({name: \"Charlie\"});\n</code></pre>\n\n<p>Are those Traceur's glitches or am I missing something?</p>\n\n<p>And finally, what is the practical use of WeakSet if we cannot even iterate through it nor get the current size?</p>\n    ","a":"\n<blockquote>\n  <p>it's not being removed from the WeakSet. Why is that?</p>\n</blockquote>\n\n<p>Most likely because the garbage collector has not yet run. However, you say you are using Traceur, so it just might be that they're not properly supported. I wonder how the <code>console</code> can show the contents of a <code>WeakSet</code> anyway.</p>\n\n<blockquote>\n  <p>What is the point of adding objects to WeakSets directly?</p>\n</blockquote>\n\n<p>There is absolutely no point of adding object literals to <code>WeakSet</code>s.</p>\n\n<blockquote>\n  <p>What is the practical use of WeakSet if we cannot even iterate through it nor get the current size?</p>\n</blockquote>\n\n<p>All you can get is one bit of information: Is the object (or generically, value) contained in the set?</p>\n\n<p>This can be useful in situations where you want to \"tag\" objects without actually mutating them (setting a property on them). Lots of algorithms contain some sort of \"if <code>x</code> was already seen\" condition (a <code>JSON.stringify</code> cycle detection might be a good example), and when you work with user-provided values the use of a <code>Set</code>/<code>WeakSet</code> would be advisable. The advantage of a <code>WeakSet</code> here is that its contents can be garbage-collected while your algorithm is still running, so it helps to reduce memory consumption (or even prevents leaks) when you are dealing with lots of data that is lazily (possibly even asynchronously) produced.</p>\n    "},{"t":"WeakMap implementation in EcmaScript5?","l":"http://stackoverflow.com/questions/16366000/weakmap-implementation-in-ecmascript5","q":"\n\n<p>I've run across a <a href=\"https://github.com/Benvie/WeakMap\">JavaScript library</a> that implement a cross-browser <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a> in <strong>ES5</strong>.  (WeakMap is slated for <strong>ES6</strong>.)</p>\n\n<p>How can this possibly work without support in the JavaScript language itself?</p>\n\n<p><strong>Edit:</strong> Just to be clear, I'm referring to a <strong>Weak</strong> Map, not a regular Map.  I tested this project out using Chrome's profiler and the keys are not held by strong references.  They get GC'ed without having to remove them from the WeakMap.</p>\n    ","a":"\n<p>It took me a while to grok the code, but then it hit me: <em>the key itself is used to store a reference to the value.</em></p>\n\n<p>For example, several layers into <code>set</code> it does</p>\n\n<pre><code>defProp(obj, globalID, { value: store });\n</code></pre>\n\n<p>where <code>defProp</code> has been defined to be <code>Object.defineProperty</code>, <code>obj</code> is the key, <code>globalID</code> is a guid and <code>store</code> is a storage object that contains the value.</p>\n\n<p>Then down in <code>get</code> it looks up the value with</p>\n\n<p><code>obj[globalID];</code></p>\n\n<p>This is very clever.  The WeakMap doesn't actually contain a reference to anything (weak or otherwise)-- it just sets up a policy of where to secretly store the value.  The use of <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty</code></a> means that you won't accidentally discover the value storage-- you have to know the magic guid to look it up.</p>\n\n<p>Since the key directly refers to the value (and the WeakMap doesn't refer to it), when all references to the key are gone, it gets GCed like normal.</p>\n    "},{"t":"Why is result different in ES6 and ES5?","l":"http://stackoverflow.com/questions/30365977/why-is-result-different-in-es6-and-es5","q":"\n\n<blockquote>\n  <p>This uses ECMA5</p>\n</blockquote>\n\n<pre><code>var a = [];\nfor (var i = 0; i &lt; 10; i++) {\n    a[i] = function() {\n        console.log(i);\n    };\n}\na[6](); // 10\n</code></pre>\n\n<blockquote>\n  <p>This uses ECMA6</p>\n</blockquote>\n\n<pre><code>var a = [];\nfor (let i = 0; i &lt; 10; i++) {\n    a[i] = function() {\n        console.log(i);\n    };\n}\na[6](); // 6\n</code></pre>\n\n<p>I don't understand why the result is different. Can somebody guide me?</p>\n    ","a":"\n<p>The resulting array consists of functions, each function body looks like this:</p>\n\n<pre><code>console.log(i);\n</code></pre>\n\n<p>The value of <code>i</code> depends on whether we used <code>var</code> or <code>let</code> to declare the variable.</p>\n\n<h2><code>var</code> (ECMAScript 5 and 6)</h2>\n\n<p>Here <code>i</code> is a global variable whose value is <code>10</code> after exiting the loop. This is the value that is logged.</p>\n\n<h2><code>let</code> (ECMAScript 6)</h2>\n\n<p>Here <code>i</code> is a local variable whose scope is restricted to the <code>for</code> statement. Moreover, this variable gets a fresh binding on each iteration. This is best explained by your code <a href=\"http://babeljs.io/repl/\" rel=\"nofollow\">transpiled to ECMAScript 5</a>:</p>\n\n<pre><code>\"use strict\";\nvar a = [];\nvar _loop = function(i) {\n    a[i] = function() {\n        console.log(i);\n    };\n};\nfor (var i = 0; i &lt; 10; i++) {\n    _loop(i);\n}\na[6](); // 6\n</code></pre>\n\n<p>So, on seventh iteration for example, the value of <code>i</code> will be <code>6</code> (counting from zero). The function created inside the iteration will refer to this value.</p>\n    "},{"t":"Using ES6 Classes as Angular 1.x directives","l":"http://stackoverflow.com/questions/28620479/using-es6-classes-as-angular-1-x-directives","q":"\n\n<p>I'm doing a small project to play around the goody bag the ES6 is bringing, I'm trying to set register a class as an angular directive, but I'm running into this error \"TypeError: Cannot call a class as a function\", but from the examples I'm finding they just write the class and register it with angular as a directive. Here's my directive.</p>\n\n<pre><code>class dateBlock {\n  constructor () {\n    this.template = '/app/dateblock/dateblock.html';\n    this.restrict = 'AE';\n    this.scope = {};\n  }\n};\n\nexport default dateBlock\n</code></pre>\n\n<p>and my index where I import it and then declare it.</p>\n\n<pre><code>import calendarController from './calendar/calendar.js'\nimport dateBlock from './dateblock/dateblock.js'\n\nfunction setup($stateProvider) {\n    $stateProvider\n      .state('base', {\n        url: '',\n        controller: calendarController,\n        templateUrl: '/app/calendar/calendar.html'\n      });\n    };\n\nsetup.$inject = ['$stateProvider']\n\nvar app = angular.module('calApp',['ngAnimate','ui.router','hmTouchEvents', 'templates'])\n  .config(setup)\n  .controller('calendarController', calendarController)\n  .directive('dateBlock', dateBlock)\n</code></pre>\n\n<p>If I missed some crucial step I'd love to hear it. Also side question is it cleaner to import all the apps components to the index and register them all there or export the app and import and register within the components?</p>\n    ","a":"\n<p>As mentioned in a comment, the <code>module.directive()</code> method expects a factory function rather than a constructor.</p>\n\n<p>The most simple way would be to wrap your class in a function that returns an instance:</p>\n\n<pre><code>angular.module('app')\n    .directive('dateBlock', () =&gt; new DateBlock());\n</code></pre>\n\n<p>However, this will only work in the most limited sense - it does not allow for dependency injection and the <code>compile</code> and <code>link</code> functions of your directive (if defined) will not work as expected.</p>\n\n<p>In fact, this is a problem I have looked into quite extensively and it turned out to be fairly tricky to solve (for me at least). </p>\n\n<p>I wrote an extensive article covering my solution, but as far as you are concerned I can point you to the discussion of the two main issues that need to be resolved:</p>\n\n<ol>\n<li><p><a href=\"http://www.michaelbromley.co.uk/blog/350/exploring-es6-classes-in-angularjs-1-x#_section-factories\">Dynamically converting a class definition into an angular-compatible factory function</a></p></li>\n<li><p><a href=\"http://www.michaelbromley.co.uk/blog/350/exploring-es6-classes-in-angularjs-1-x#_section-directives\">Allowing a directive's <code>link</code> and <code>compile</code> functions to be defined as class methods</a></p></li>\n</ol>\n\n<p>The full solution involves too much code to paste here, I think, but I have put together a working demo project which allows you to define a directive as an ES6 class like this:</p>\n\n<pre><code>class MyDirective {\n    /*@ngInject*/\n    constructor($interval) {\n        this.template = '&lt;div&gt;I\\'m a directive!&lt;/div&gt;';\n        this.restrict = 'E';\n        this.scope = {}\n        // etc. for the usual config options\n\n        // allows us to use the injected dependencies\n        // elsewhere in the directive (e.g. compile or link function)\n        this.$interval = $interval;\n    }\n\n    // optional compile function\n    compile(tElement) {\n        tElement.css('position', 'absolute');\n    }\n\n    // optional link function\n    link(scope, element) {\n        this.$interval(() =&gt; this.move(element), 1000);\n    }\n\n    move(element) {\n        element.css('left', (Math.random() * 500) + 'px');\n        element.css('top', (Math.random() * 500) + 'px');\n    }\n}\n\n// `register` is a helper method that hides all the complex magic that is needed to make this work.\nregister('app').directive('myDirective', MyDirective);\n</code></pre>\n\n<p>Check out the <a href=\"https://github.com/michaelbromley/angular-es6\">demo repo here</a> and <a href=\"https://github.com/michaelbromley/angular-es6/blob/master/src/app/utils/register.js#L16\">here is the code behind <code>register.directive()</code></a></p>\n    "},{"t":"Converting Object to Array using ES6 features","l":"http://stackoverflow.com/questions/25217706/converting-object-to-array-using-es6-features","q":"\n\n<p>Given a javascript object, how can I convert it to an array in ECMAScript-6 ?</p>\n\n<p>For example, given:</p>\n\n<pre><code> var inputObj = {a:'foo', b:[1,2,3], c:null, z:55};\n</code></pre>\n\n<p>The expected output would be:</p>\n\n<pre><code> ['foo', [1,2,3], null, 55]\n</code></pre>\n\n<p>The order of the elements in the result is not important to me.</p>\n    ","a":"\n<p>Use (ES5) <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow\"><code>Array::map</code></a> over the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\"><code>keys</code></a> with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions\" rel=\"nofollow\">arrow function</a> (for short syntax only, not functionality):</p>\n\n<pre><code>let arr = Object.keys(obj).map((k) =&gt; obj[k])\n</code></pre>\n\n<hr>\n\n<p>True ES6 style would be to write a generator, and convert that iterable into an array:</p>\n\n<pre><code>function* values(obj) {\n    for (let prop of Object.keys(obj)) // own properties, you might use\n                                       // for (let prop in obj)\n        yield obj[prop];\n}\nlet arr = Array.from(values(obj));\n</code></pre>\n\n<p>Regrettably, no <a href=\"http://esdiscuss.org/topic/es6-iteration-over-object-values\" rel=\"nofollow\">object iterator</a> has made it into the ES6 natives.</p>\n    "},{"t":"Javascript “for…of” loop iteration order on an array","l":"http://stackoverflow.com/questions/29477973/javascript-for-of-loop-iteration-order-on-an-array","q":"\n\n<p>Iterating over an array using <code>for...in</code> doesn't guarantee order, however ES6 introduces a new construct <code>for...of</code>. </p>\n\n<p>My limited testing of implementations of <code>for...of</code> indicates that it does iterate in order on array, but is this property guaranteed?</p>\n    ","a":"\n<blockquote>\n  <p>Iterating over an array using <code>for...in</code> doesn't guarantee order, however ES6 introduces a new construct <code>for...of</code>.</p>\n  \n  <p>My limited testing of implementations of <code>for...of</code> indicates that it does iterate in order on array, but is this property guaranteed?</p>\n</blockquote>\n\n<p>Yes, the order of <code>for-of</code> on arrays is guaranteed by the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array-iterator-objects\" rel=\"nofollow\">array iterator definition</a>: It will visit the values in the array that exist (skipping holes in sparse arrays), in numeric index order. <a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Avar%20a%20%3D%20%5B%5D%3B%0Aa%5B3%5D%20%3D%20'd'%3B%0Aa%5B0%5D%20%3D%20'a'%3B%0Aa.foo%20%3D%20%22f%22%3B%0Afor%20(let%20v%20of%20a)%20%7B%0A%20%20console.log(v)%3B%0A%7D%0A\" rel=\"nofollow\"><strong>Live Example</strong></a> on <a href=\"http://babel.io\" rel=\"nofollow\">Babel</a>'s REPL:</p>\n\n<pre><code>\"use strict\";\nvar a = [];\na[3] = 'd';\na[0] = 'a';\na.foo = \"f\";\nfor (let v of a) {\n  console.log(v);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre>a\nd\n</pre>\n\n<p>Note that even though the array has an enumerable property <code>foo</code>, it isn't visited.</p>\n\n<p>The order is also guaranteed, as of ES6, for <code>for-in</code>. This is covered by <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\" rel=\"nofollow\"><code>[[OwnPropertyKeys]]</code></a>, which defines the order, and <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\" rel=\"nofollow\"><code>[[Enumerate]]</code></a>, which is defined in terms of <code>[[OwnPropertyKeys]]</code>. <code>for-in</code> and <a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Avar%20a%20%3D%20%5B%5D%3B%0Aa%5B3%5D%20%3D%20'd'%3B%0Aa%5B0%5D%20%3D%20'a'%3B%0Aa.foo%20%3D%20%22f%22%3B%0Afor%20(let%20v%20of%20a)%20%7B%0A%20%20console.log(v)%3B%0A%7D%0A\" rel=\"nofollow\">uses the object's <code>[[Enumerate]]</code> internal method</a>. For plain objects that don't define a different iterator, <code>for-of</code> does as well.</p>\n\n<p>Note that using <code>for-in</code> on arrays will not only visit the \"indexes\" of the arrays, but <strong>all</strong> of the array's enumerable property names, including non-index property names. The above guarantees that the indexes will be visited first, in numeric order, and then enumerable non-index property names, if any, will be visited in property creation order. E.g.: <a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Avar%20a%20%3D%20%5B%5D%3B%0Aa.foo%20%3D%20%22f%22%3B%0Aa%5B3%5D%20%3D%20'd'%3B%0Aa%5B0%5D%20%3D%20'a'%3B%0Aa.bar%20%3D%20%22b%22%3B%0Avar%20key%3B%0Afor%20(key%20in%20a)%20%7B%0A%20%20%20%20console.log(key)%3B%0A%7D%0A\" rel=\"nofollow\"><strong>Live Example</strong></a></p>\n\n<pre><code>\"use strict\";\nvar a = [];\na.foo = \"f\";\na[3] = 'd';\na[0] = 'a';\na.bar = \"b\";\nvar key;\nfor (key in a) {\n    console.log(key);\n}\n</code></pre>\n\n<p>...<strong>as of ES6</strong> reliably outputs:</p>\n\n<pre>0\n3\nfoo\nbar\n</pre>\n\n<p>...because we get the index properties first, in numeric order, then <code>foo</code> followed by <code>bar</code> because <code>foo</code> was created before <code>bar</code>.</p>\n\n<p>That assumes there are no enumerable properties on <code>Array.prototype</code> or <code>Object.prototype</code> (by default there aren't). If there were, we'd first see the array's \"own\" properties, in the order above, and then the names of enumerable properties on its prototype that haven't already been visited (in the order above), then the same for <em>its</em> prototype, etc.</p>\n\n<p>If you want to loop through an array's entries, <code>forEach</code> or its relatives are probably a better choice. <a href=\"http://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript/9329476#9329476\">Exhaustive list of options in this other answer.</a></p>\n    "},{"t":"node.js / ES6 / class creation : SyntaxError: Unexpected reserved word","l":"http://stackoverflow.com/questions/27177485/node-js-es6-class-creation-syntaxerror-unexpected-reserved-word","q":"\n\n<p>I try to create a class on my node.js / express app.</p>\n\n<p>It works in basic js / prototype mode such as : </p>\n\n<pre><code>function MyClass() { \n    /* constructor code */\n};\n\nMyClass.prototype.myMethod = function() {\n    /* method code */\n};\n\nmodule.exports = MyClass;\n</code></pre>\n\n<p>But I want to do use the class, constructor, extends, ... keywords.</p>\n\n<p>I've try that : </p>\n\n<pre><code>class MyClass {\n    constructor() {\n        /* constructor code */\n    }\n\n    myMethod() {\n        /* method code */\n    }\n\n}\n</code></pre>\n\n<p>But it doesn't work, the error is : </p>\n\n<pre><code>class MyClass {\n^^^^^\nSyntaxError: Unexpected reserved word\n</code></pre>\n\n<p>My command line to launch the app with all harmony options : </p>\n\n<pre><code>node `node --v8-options | grep harmony | cut -d ' ' -f | xargs` my-app.js \n</code></pre>\n\n<p>An idea to launch my app correctly please ? </p>\n    ","a":"\n<p>You can do this with <a href=\"https://iojs.org/es6.html\">io.js</a></p>\n\n<pre><code>iojs --use_strict --harmony_classes my-app.js\n</code></pre>\n\n<p>Or on node.js with <a href=\"https://github.com/google/traceur-compiler\">traceur</a></p>\n\n<pre><code>var traceur = require('traceur');\ntraceur.require.makeDefault(function(file) {\n  return file.indexOf('node_modules') == -1;\n});\n\nrequire('./my-app').run();\n</code></pre>\n\n<p>Make sure to test the new features before using them, some are not supported.\nEdit: You can check the compatibility list from <a href=\"https://kangax.github.io/compat-table/es6/\">here</a></p>\n    "},{"t":"Pass options to ES6 module imports","l":"http://stackoverflow.com/questions/29923879/pass-options-to-es6-module-imports","q":"\n\n<p>Is it possible to pass options to ES6 imports?</p>\n\n<p>How do you translate this:</p>\n\n<p><code>var x = require('module')(someoptions);</code></p>\n\n<p>to  ES6?</p>\n    ","a":"\n<p>There is no way to do this with a single <code>import</code> statement, it does not allow for invocations.</p>\n\n<p>So you wouldn't call it directly, but you can basically do just the same what commonjs does with default exports:</p>\n\n<pre><code>// module.js\ndefault export function(options) {\n    return {\n        // actual module\n    }\n}\n\n// main.js\nimport m from 'module';\nvar x = m(someoptions);\n</code></pre>\n\n<p>Alternatively, if you use a module loader that supports <a href=\"https://github.com/fantasyland/fantasy-land#apply\" rel=\"nofollow\">monadic</a> promises, you might be able to do something like</p>\n\n<pre><code>System.import('module').ap(someoptions).then(function(x) {\n    …\n});\n</code></pre>\n    "},{"t":"object destructuring without var","l":"http://stackoverflow.com/questions/27386234/object-destructuring-without-var","q":"\n\n<p>Why does object destructuring throw an error if there is no <code>var</code> keyword in front of it?</p>\n\n<pre><code>{a, b} = {a: 1, b: 2};\n</code></pre>\n\n<p>throws <code>SyntaxError: expected expression, got '='</code></p>\n\n<p>The following three examples work without problems</p>\n\n<pre><code>var {a, b} = {a: 1, b: 2};\nvar [c, d] = [1, 2];\n    [e, f] = [1, 2];\n</code></pre>\n\n<p>Bonus question: Why do we not need a <code>var</code> for array destructuring?</p>\n\n<p>I ran into the problem doing something like</p>\n\n<pre><code>function () {\n  var {a, b} = objectReturningFunction();\n\n  // Now a and b are local variables in the function, right?\n  // So why can't I assign values to them?\n\n  {a, b} = objectReturningFunction();\n}\n</code></pre>\n    ","a":"\n<p>The issue stems from the <code>{...}</code> operators having multiple meanings in JavaScript.</p>\n\n<p>When <code>{</code> appears at the start of a <em>Statement</em>, it'll always represent a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\" rel=\"nofollow\">block</a>, which can't be assigned to. If it appears later in the <em>Statement</em> as an <em>Expression</em>, then it'll represent an Object.</p>\n\n<p>The <code>var</code> helps make this distinction, since it can't be followed by a <em>Statement</em>, as will <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\" rel=\"nofollow\">grouping parenthesis</a>:</p>\n\n<pre><code>( {a, b} = objectReturningFunction() );\n</code></pre>\n    "},{"t":"Ember.js Utility Class","l":"http://stackoverflow.com/questions/25047887/ember-js-utility-class","q":"\n\n<p>I am new to Ember.js and Javascript in general. I am using <a href=\"http://www.ember-cli.com/\" rel=\"nofollow\">ember-cli</a> to create an app that could use a DateUtil class to perform some date manipulation. I noticed that ember-cli has a utilities generator to produce the following boilerplate code in app/utils/date-util.js:</p>\n\n<pre><code>export default function dateUtil() {};\n</code></pre>\n\n<p>I am wondering how to write a utility so that I can use it across my application. Specifically, as an example, in a controller:</p>\n\n<pre><code>export default Ember.ObjectController.extend({\n  startDate: dateUtil.thisMonday()\n});\n</code></pre>\n\n<p>where thisMonday() would return the date of this Monday using moment.js like:</p>\n\n<pre><code>moment({hour:0}).day(1);\n</code></pre>\n\n<p>There would be many others similar to thisMonday() as part of dateUtil.</p>\n    ","a":"\n<p>You simply need to import the ES6 module that exports your utility function, in each of the controllers that want to use it, like so:</p>\n\n<pre><code>import dateUtil from 'app/utils/date-util';\n\nexport default Ember.ObjectController.extend({\n  startDate: dateUtil().thisMonday()\n});\n</code></pre>\n\n<p>Note that the path is not necessarily <code>app/utils/...</code> though, you must replace <code>app</code> with the name of the app that you used when initially generating the app. You can verify what this is by looking in <code>app/app.js</code>, and looking for the value of <code>modulePrefix</code> within <code>Ember.Application.extend()</code>.</p>\n    "},{"t":"ES6 destructuring, dynamic assignment [duplicate]","l":"http://stackoverflow.com/questions/30832528/es6-destructuring-dynamic-assignment","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/27386234/object-destructuring-without-var\" dir=\"ltr\">object destructuring without var</a>\n                <span class=\"question-originals-answer-count\">\n                    1 answer\n                </span>\n        </li>\n    </ul>\n</div>\n<pre><code>let text, value;\nif (typeof f == 'string') {\n    text = value = f;\n} else {\n    let {\n        text, value\n    } = f;\n}\n</code></pre>\n\n<p>Doing this creates two new vars (from the <code>else</code>), however if I write it like so:</p>\n\n<pre><code>let text, value;\nif (typeof f == 'string') {\n    text = value = f;\n} else {\n    {\n        text, value\n    } = f;\n}\n</code></pre>\n\n<p>I receive a syntax error. What is the best approach here?</p>\n    ","a":"\n<p>You need parens around the assignment:</p>\n\n<pre><code>let text, value;\nif (typeof f == 'string') {\n    text = value = f;\n} else {\n    ({                // ( at start\n        text, value\n    } = f);           // ) at end\n}\n</code></pre>\n\n<p>(<a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Alet%20text%2C%20value%3B%0Aif%20(typeof%20f%20%3D%3D%20'string')%20%7B%0A%20%20%20%20text%20%3D%20value%20%3D%20f%3B%0A%7D%20else%20%7B%0A%20%20%20%20(%7B%0A%20%20%20%20%20%20%20%20text%2C%20value%0A%20%20%20%20%7D%20%3D%20f)%3B%0A%7D%0A\" rel=\"nofollow\">Live copy on Babel</a>.)</p>\n\n<p>You need those parens for the same reason <a href=\"http://stackoverflow.com/a/13341710/157247\">you need parens or similar to immediately invoke a function</a>: To tell the parser that it should expect an expression, not a statement. Without the parens, when it encounters the <code>{</code>, it thinks that's the beginning of a block. But unlike with the function, it has to be parens, not a leading unary <code>+</code>, <code>!</code>, etc. <a href=\"https://babeljs.io/repl/#?experimental=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;playground=false&amp;code=%22use%20strict%22%3B%0Alet%20text%2C%20value%3B%0Aif%20(typeof%20f%20%3D%3D%20'string')%20%7B%0A%20%20%20%20text%20%3D%20value%20%3D%20f%3B%0A%7D%20else%20%7B%0A%20%20%20%20%2B%7B%0A%20%20%20%20%20%20%20%20text%2C%20value%0A%20%20%20%20%7D%20%3D%20f%3B%0A%7D%0A\" rel=\"nofollow\">like this</a>:</p>\n\n<pre><code>let text, value;\nif (typeof f == 'string') {\n    text = value = f;\n} else {\n    +{                 // &lt;== Doesn't work like it does with IIFEs\n        text, value\n    } = f;\n}\n</code></pre>\n    "},{"t":"require('babel/register') doesn't work","l":"http://stackoverflow.com/questions/29207878/requirebabel-register-doesnt-work","q":"\n\n<p>I have isomorphic app written in ES6 on client with <a href=\"http://babeljs.io/\">Babel transpiler</a>. I want my express server to have the same ES6 syntax as client code. </p>\n\n<p>Unfortunately <code>require('babel/register')</code> doesn't work..</p>\n\n<h3>server.js</h3>\n\n<pre><code>require('babel/register'); // doesn't work\n// require('babel-core/register); doesn't work..\n\nconst env = process.env.NODE_ENV || 'development';\nconst port = process.env.NODE_PORT || 1995;\n\nconst http = require('http');\nconst express = require('express');\nconst address = require('network-address');\n\nlet app = express();\n\napp.set('port', port);\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('*', (req, res) =&gt; {\n   res.send('Hello!');\n});\n\nhttp.createServer(app).listen(app.get('port'), function () {\n   console.info('Demo app is listening on \"%s:%s\" env=\"%s\"', address(), app.get('port'), env);\n});\n</code></pre>\n    ","a":"\n<p><code>require('babel/register')</code> doesn't transpile the file it is called from. If you want server.js to be included in on-the-fly transpilation, you should execute it with <code>babel-node</code> (Babel's <a href=\"https://babeljs.io/docs/usage/cli/\">CLI replacement</a> for <code>node</code>).</p>\n\n<p>See my answer <a href=\"http://stackoverflow.com/a/29415291\">here</a> for an example.</p>\n    "},{"t":"Is there a way to tell if an ES6 promise is fulfilled/rejected/resolved?","l":"http://stackoverflow.com/questions/21485545/is-there-a-way-to-tell-if-an-es6-promise-is-fulfilled-rejected-resolved","q":"\n\n<p>I'm used to Dojo promises, where I can just do the following:</p>\n\n<pre><code>promise.isFulfilled();\npromise.isResolved();\npromise.isRejected();\n</code></pre>\n\n<p>Is there a way to determine if an ES6 promise is fulfilled, resolved, or rejected? If not, is there a way to fill in that functionality using <code>Object.defineProperty(Promise.prototype, ...)</code>?</p>\n    ","a":"\n<p>They are not part of the specification nor is there a standard way of accessing them that you could use to get the internal state of the promise to construct a polyfill. However, you can convert any standard promise into one that has these values by creating a wrapper,</p>\n\n<pre><code>function MakeQuerablePromise(promise) {\n    // Don't create a wrapper for promises that can already be queried.\n    if (promise.isResolved) return promise;\n\n    var isResolved = false;\n    var isRejected = false;\n\n    // Observe the promise, saving the fulfillment in a closure scope.\n    var result = promise.then(\n       function(v) { isResolved = true; return v; }, \n       function(e) { isRejected = true; throw e; });\n    result.isFulfilled = function() { return isResolved || isRejected; };\n    result.isResolved = function() { return isResolved; }\n    result.isRejected = function() { return isRejected; }\n    return result;\n}\n</code></pre>\n\n<p>This doesn't affect all promises, as modifying the prototype would, but it does allow you to convert a promise into a promise that exposes it state.</p>\n    "},{"t":"ES6 tagged templates practical usability","l":"http://stackoverflow.com/questions/31590975/es6-tagged-templates-practical-usability","q":"\n\n<p>I understand the syntax of ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings#Tagged_template_strings\">tagged templates</a>. What I don't see is the practical usability. When is it better than passing an object parameter, like the settings in <a href=\"http://api.jquery.com/jquery.ajax/\">jQuery's AJAX</a>? <code>$.ajax('url', { /*this guy here*/ })</code> </p>\n\n<p>Right now I only see the tricky syntax but I don't see why I would need/use it. I also found that the TypeScript team chose to implement it (in 1.5) before other important features. What is the concept behind tagged string templates? </p>\n    ","a":"\n<p>You can use tagged templates to build APIs that are more expressive than regular function calls. </p>\n\n<p>For example, I'm working on a <a href=\"https://github.com/jwhitfieldseed/prequel\" rel=\"nofollow\">proof-of-concept library</a> for SQL queries on JS arrays:</p>\n\n<pre><code>let admins = sql`SELECT name, id FROM ${users} \n                 WHERE ${user =&gt; user.roles.indexOf('admin') &gt;= 0}`\n</code></pre>\n\n<p>Notice it has nothing to do with String interpolation; it uses tagged templates for readability. It would be hard to construct something that reads as intuitively with plain function calls - I guess you'd have something like this:</p>\n\n<pre><code>let admins = sql.query(\"SELECT name, id FROM $users WHERE $filter\",\n  { $users: users, $filter: (user) =&gt; user.roles.contains('admin') })\n</code></pre>\n\n<p>This example is just a fun side project, but I think it shows some of the benefits of tagged templates.</p>\n\n<p>Another example, maybe more obvious, is i18n - a tagged template could insert locale-sensitive versions of your input.</p>\n    "},{"t":"Js es6 class constructor function run before the constructor instantiate [duplicate]","l":"http://stackoverflow.com/questions/31379272/js-es6-class-constructor-function-run-before-the-constructor-instantiate","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/4616202/self-references-in-object-literal-declarations\" dir=\"ltr\">Self-references in object literal declarations</a>\n                <span class=\"question-originals-answer-count\">\n                    11 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I have an es6 class the instantiate a variable from a function call, but the problem is it seems that the function is running before the constructor instantiated and throw an error:</p>\n\n<pre><code>  constructor() {\n    this.userSelections = {\n      types    : this.getTypes(),\n      providers: this.getProvider()\n    } \n  }\n\n getProvider() {\n    // here its throw error that this.userSelections is undefined\n    var activeType = this.userSelections.types.some(( type ) =&gt; {\n      return type.active;\n    });\n\n  }\n</code></pre>\n\n<p>Whats is the problem and how i can handle this situation? </p>\n    ","a":"\n<p>The problem has nothing to do with classes, ES6 or Babel. Here is a simplified version of your problem:</p>\n\n<pre><code>var foo = {\n  bar: 42,\n  baz: foo.bar * 2\n};\n</code></pre>\n\n<p>This will throw an error because <code>foo</code> is not initialized yet at the moment <code>foo.bar</code> is accessed.</p>\n\n<p>In your case, you are calling <code>getProvider</code> <em>during</em> the creation of the object you want to assign to <code>this.userSelections</code>. <code>this.userSelections</code> or its value does not exist yet, it is still being constructed.</p>\n\n<p>You could initialize the value in two steps:</p>\n\n<pre><code>this.userSelections = {\n  types: this.getTypes()\n};\n// now that `this.userSelections` exists, we can call `this.getProvider` without problems\nthis.userSelections.providers = this.getProvider();\n</code></pre>\n\n<p>or refactor your code so that <code>getProviders</code> accepts <code>types</code> as parameter, maybe something like:</p>\n\n<pre><code>class Foo {\n  constructor() {\n    let types = this.getTypes();\n    this.userSelection = {\n      types,\n      providers: this._getProvider(types)\n    };\n  }\n\n  _getProvider(types) {\n    var activeType = types.some(( type ) =&gt; {\n      return type.active;\n    });\n    // ...\n  }\n\n  getProvider() {\n    return this._getProvider(this.userSelection.types);\n  }\n}\n</code></pre>\n    "},{"t":"This values for arrow functions","l":"http://stackoverflow.com/questions/31647507/this-values-for-arrow-functions","q":"\n\n<p>I am trying to understand <code>arrow functions</code> in <code>ECMAScript 6</code>.</p>\n\n<p>This is the definition I came across while reading:</p>\n\n<blockquote>\n  <p>Arrow functions have implicit <code>this</code> binding, which means that the\n  value of the <code>this</code> value inside of an arrow function is aways the\n  same as the value of <code>this</code> in the scope in which the arrow function\n  is defined!</p>\n</blockquote>\n\n<p>According to the definition, I believe <code>this</code> for an <code>arrow function</code> should contain the same block level values that the <code>arrow function</code> was defined in.</p>\n\n<p>Code:</p>\n\n<pre><code>var test = {\n  id: \"123123\",\n  k: {\n    laptop: \"ramen\",\n    testfunc: () =&gt; console.log(this)\n  }\n}\n\nconsole.log(test.k.testfunc);\n</code></pre>\n\n<p>However, I am getting this result from the code</p>\n\n<pre><code>function testfunc() {\n    return console.log(undefined);\n}\n</code></pre>\n\n<p>What I thought I would get would be an output of:</p>\n\n<pre><code>{\"laptop\": \"ramen\"}\n</code></pre>\n\n<p>if I ran this</p>\n\n<p><code>console.log(test.k.testfunc());</code></p>\n    ","a":"\n<p>Let's transform into the equivalent ES5 code:</p>\n\n<pre><code>var test = {\n  id: \"123123\",\n  k: {\n    laptop: \"ramen\",\n    testfunc: function(){return console.log(this)}.bind(this)\n  }\n}\n</code></pre>\n\n<p>Remember that <code>this</code> depends on <strong>how</strong> you call the function. The outer <code>this</code> isn't inside a function, so it will default to <code>undefined</code> in strict mode.</p>\n\n<p>Simplified scenario below:</p>\n\n<pre><code>console.log(this) // undefined\n\nvar test = {\n  a: this // same `this` as above\n}\n</code></pre>\n    "},{"t":"Prototype chains in ECMAScript 6","l":"http://stackoverflow.com/questions/30599857/prototype-chains-in-ecmascript-6","q":"\n\n<p>I recently came across this great post by <em>Dr. Axel Rauschmayer</em>:</p>\n\n<p><a href=\"http://www.2ality.com/2015/02/es6-classes-final.html\" rel=\"nofollow\">http://www.2ality.com/2015/02/es6-classes-final.html</a></p>\n\n<p>The following snippet roughly describes how <strong>ECMAScript 6</strong> prototype chains work from an <strong>ECMAScript 5</strong> point of view (<strong>section 4.2</strong> of the original post):</p>\n\n<pre><code>// ECMAScript 6\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    ···\n}\n\nclass ColorPoint extends Point {\n    constructor(x, y, color) {\n        super(x, y);\n        this.color = color;\n    }\n    ···\n}\n\nlet cp = new ColorPoint(25, 8, 'green');\n</code></pre>\n\n<p>\"Under the hood\" view in ECMAScript 5:</p>\n\n<pre><code> // ECMAScript 5\n // Instance is allocated here\nfunction Point(x, y) {\n    // Performed before entering this constructor:\n    this = Object.create(new.target.prototype);\n\n    this.x = x;\n    this.y = y;\n}\n···\n\nfunction ColorPoint(x, y, color) {\n    // Performed before entering this constructor:\n    this = uninitialized;\n\n    this = Reflect.construct(Point, [x, y], new.target); // (A)\n        // super(x, y);\n\n    this.color = color;\n}\nObject.setPrototypeOf(ColorPoint, Point);\n···\n\nlet cp = Reflect.construct( // (B)\n             ColorPoint, [25, 8, 'green'],\n             ColorPoint);\n    // let cp = new ColorPoint(25, 8, 'green');\n</code></pre>\n\n<p>While in the code above I understand that this is valid:</p>\n\n<pre><code>Object.getPrototypeOf(ColorPoint) === Point  //true\n</code></pre>\n\n<p>because of this:</p>\n\n<pre><code>Object.setPrototypeOf(ColorPoint, Point);\n</code></pre>\n\n<p>I'm struggling to understand why this is also true since I can't find any \"ES5\" explanation:</p>\n\n<pre><code>Object.getPrototypeOf(ColorPoint.prototype) === Point.prototype   // true\n</code></pre>\n\n<p>Maybe a line like this is missing..?</p>\n\n<pre><code>Object.setPrototypeOf(ColorPoint.prototype, Point.prototype);\n</code></pre>\n\n<p>Thank you all in advance.</p>\n    ","a":"\n<p>That \"under-the-hood view\" from the ES5 perspective doesn't include those lines - it's hidden in the <code>...</code> sections. The point of this code is to explain the differences from ES5 inheritance, which are all about <code>this</code> initialisation, <code>new.target</code>, <code>super</code> behaviour, and constructor functions inheriting from other constructor functions.</p>\n\n<p>The basic ES5 inheritance for the prototypes is still in place, and works like it always did:</p>\n\n<pre><code>ColorPoint.prototype = Object.create(Point.prototype, {\n    constructor: {value:ColorPoint, writable:true, enumerable:false, configurable:true}\n});\n// ... further method definitions\n</code></pre>\n    "},{"t":"Observing ES6 Module properties","l":"http://stackoverflow.com/questions/29207313/observing-es6-module-properties","q":"\n\n<p>I have a module:</p>\n\n<pre><code>var progress = {\n    val: 0\n};\n\nvar service = (function(){\n\n    function someMethod(){\n        progress.val++;\n    }\n\n    return{\n        someMethod: someMethod\n    };\n\n})();\n\nexport {service,progress}\n</code></pre>\n\n<p><code>someMethod</code> will perform an operation where an array is iterated. I would like to increment <code>progress.val</code> by one at each iteration. This progress should then be observable:</p>\n\n<pre><code>  System.import('components/Service.js')\n   .then(function(M){\n            self.progress = M.progress;\n\n           Object.observe(M.progress,function(c){\n               console.dir(c);\n           });\n       });\n</code></pre>\n\n<p>Unfortunately, the observers callback is invoked only once, holding an array of changes with one item per iteration.</p>\n\n<p>How can I invoke the callback on each iteration? </p>\n    ","a":"\n<p>That's how object observing works.</p>\n\n<p>The observer will only fire <strong>at the next tick of the clock</strong> with a collection of records. It does not fire synchronously on individual changes as they are made. See also <a href=\"http://stackoverflow.com/questions/25055589/object-observe-synchronous-callback\">Object.Observe Synchronous Callback</a>.</p>\n\n<p>To accomplish what you want, one approach is to rewrite your iterator so that it \"sleeps\" each time through the loop to give <code>Object.observe</code> a chance to fire. I'm not necessarily recommending this precise approach, but just as an example:</p>\n\n<pre><code>function iterate(a, fn) {\n    (function loop() {\n        if (!a.length) return;\n        fn(a.shift());\n        setTimeout(loop); \n    })();\n}\n</code></pre>\n\n<p>Now, any changes to properties made on the observe object by <code>fn</code> will be reported during that iteration of the loop.</p>\n\n<p>You could accomplish the same thing using promises:</p>\n\n<pre><code>function iterate(a, fn) {\n    a.reduce((p, e) =&gt; p.then(() =&gt; fn(e)), Promise.resolve());\n}\n</code></pre>\n\n<p>If you happen to be in an async/await environment (this is an ES7 feature, but available in transpilers such as Babel), then you could also do the following, which under the covers is about equivalent to the promises approach above:</p>\n\n<pre><code>async function iterate(a, fn) {\n    for (i of a) await fn(i);\n}\n</code></pre>\n\n<p>As an aside, You don't need an IIFE here. Also, <code>self</code> is not declared--I expect a run-time error on the <code>self.progress = M.progress</code> line. </p>\n    "},{"t":"Get the description of a ES6 Symbol","l":"http://stackoverflow.com/questions/30301728/get-the-description-of-a-es6-symbol","q":"\n\n<p>I wonder if there is a nice way to get the descriptions of a Symbol.</p>\n\n<p>For example,</p>\n\n<pre><code>var s = Symbol(5);\n</code></pre>\n\n<p>The default implementation of the toString will simply print \n    Symbol(5)</p>\n\n<p>I would like to find a way to extract the actual description i.e. 5</p>\n    ","a":"\n<p>There is no neat way to do this. However, if you have registered a symbol in the global registry, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\" rel=\"nofollow\"><code>Symbol.keyFor()</code></a>:</p>\n\n<pre><code>var s = Symbol.for(5);\nconsole.log(Symbol.keyFor(s));\n</code></pre>\n    "},{"t":"dependency injection without singleton in ember-cli","l":"http://stackoverflow.com/questions/26877103/dependency-injection-without-singleton-in-ember-cli","q":"\n\n<p>Just converted my app to ember-cli, but I don't know how to use <code>Ember.Application.register</code> any more because <code>register</code> doesn't seem to be available when Application is started with <code>extend</code> rather than <code>create</code>. </p>\n\n<pre><code>import Ember from 'ember';\nimport App from 'myapp/app';\n\nvar AdminMyController = Ember.ObjectController.extend({\n});\n\n// THROWS ERROR HERE BECAUSE register isn't, uh...registered?\nApp.register('controller:adminMyController', AdminMyController, { singleton: false });\n\nexport default AdminMyController;\n</code></pre>\n\n<p>Previously, because App was a global, I could register this right in the same class. </p>\n\n<p>Am I going to have to move all the register calls to an initializer so I can get access to the app instance?</p>\n    ","a":"\n<p>I belive an initializer would do this for you.  You'll need to create an <code>initializers</code> folder in your app directory (same level as controllers, templates, etc).  This file should go there.</p>\n\n<pre><code>import Ember from 'ember';\n\nvar AdminMyController = Ember.ObjectController.extend({\n    ...\n});\n\nexport default {\n    name: 'adminMyController',\n    initialize: function (container, application) {\n        container.register('controller:adminMyController', AdminMyController, {singleton: false});\n    }\n};\n</code></pre>\n    "},{"t":"Dynamically create a function with default parameters in JavaScript","l":"http://stackoverflow.com/questions/31429405/dynamically-create-a-function-with-default-parameters-in-javascript","q":"\n\n<p>One of the features introduced by ECMAScript 6 is the ability to indicate default values for unspecified parameters in JavaScript, e.g.</p>\n\n<pre><code>function foo(a = 2, b = 3) {\n    return a * b;\n}\n\nconsole.log(foo());   // 6\nconsole.log(foo(5));  // 15\n</code></pre>\n\n<p>Now I'm wondering if it's possible to use default parameters also for functions created dynamically with the <code>Function</code> constructor, like this:</p>\n\n<pre><code>new Function('a = 2', 'b = 3', 'return a * b;');\n</code></pre>\n\n<p>Firefox 39 seems to already support default parameters (<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters#Browser_compatibility\">see here</a>), but the line above is rejected as a syntax error.</p>\n    ","a":"\n<blockquote>\n  <p>Now I'm wondering if it's possible to use default parameters also for functions created dynamically with the Function constructor</p>\n</blockquote>\n\n<p>Yes, according to <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-createdynamicfunction\" rel=\"nofollow\">the spec</a> this is possible. The parameter arguments are concatenated as always and then parsed according to the <code>FormalParameters</code> production, which includes default values.</p>\n\n<blockquote>\n  <p>Firefox 39 seems to already support default parameters, but the line above is rejected as a syntax error.</p>\n</blockquote>\n\n<p>Well, that's a bug :-) (probably <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=755821\" rel=\"nofollow\">this one</a>)<br>\nYou should be able to work around it by using</p>\n\n<pre><code>var fn = Function('return function(a = 2, b = 3) { return a * b; }')();\n</code></pre>\n    "},{"t":"Javascript - “let” keyword vs “var” keyword","l":"http://stackoverflow.com/questions/22713600/any-speed-advantage-in-javascript-es6-const-instead-of-var-let","q":"\n\n<p>In javascript 1.7, the <code>let</code> keyword was added.   I've heard it described as a \"local\" variable, but I'm still not quite sure how it behaves differently than the <code>var</code> keyword.</p>\n\n<p>What are the differences between the two?   When should <code>let</code> be used over <code>var</code>? </p>\n    ","a":"\n<p>The difference is scoping. <code>var</code> is scoped to the nearest function block (or global if outside a function block), and <code>let</code> is scoped to the nearest <em>enclosing</em> block (or global if outside any block), which can be smaller than a function block. </p>\n\n<p>Also, just like <code>var</code>, variables declared with <code>let</code> are visible <em>before they are declared</em> in their enclosing block, as shown in the demo.</p>\n\n<p><strong>Demo:</strong> <sub><sub><sub><a href=\"http://jsfiddle.net/ThinkingStiff/tcCp5/\"><img src=\"http://i.stack.imgur.com/NI3c4.png\" alt=\"jsFiddle\"></a></sub></sub></sub> (Firefox Only)</p>\n\n<h3>Global:</h3>\n\n<p>They are identical when used like this outside a function block.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>let me = 'go'; //globally scoped\nvar i = 'able'; //globally scoped\n</code></pre>\n\n<h3>Function:</h3>\n\n<p>They are identical when used like this in a function block.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function ingWithinEstablishedParameters() {\n    let terOfRecommendation = 'awesome worker!'; //function block scoped\n    var sityCheerleading = 'go!'; //function block scoped\n};\n</code></pre>\n\n<h3>Block:</h3>\n\n<p>Here is the difference. <code>let</code> is only visible in the <code>for()</code> loop and <code>var</code> is visible to the whole function.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function allyIlliterate() {\n    //tuce is *not* visible out here\n\n    for( let tuce = 0; tuce &lt; 5; tuce++ ) {\n        //tuce is only visible in here (and in the for() parentheses)\n    };\n\n    //tuce is *not* visible out here\n};\n\nfunction byE40() {\n    //nish *is* visible out here\n\n    for( var nish = 0; nish &lt; 5; nish++ ) {\n        //nish is visible to the whole function\n    };\n\n    //nish *is* visible out here\n};\n</code></pre>\n\n<h3>Additionally (Deprecated):</h3>\n\n<p><code>let</code> can also be used to create its own enclosing block.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function conjunctionJunctionWhatsYour() {\n    //sNotGetCrazy is *not* visible out here\n\n    let( sNotGetCrazy = 'now' ) {\n        //sNotGetCrazy is only visible in here\n    };\n\n    //sNotGetCrazy is *not* visible out here\n};\n</code></pre>\n    "},{"t":"What is the reasoning behind isNaN's implementation? [closed]","l":"http://stackoverflow.com/questions/20618467/what-is-the-reasoning-behind-isnans-implementation","q":"\n\n<p>Although the name of the function <code>isNaN</code> refers semantically to the value <code>isNaN</code>, the native implementation returns <code>true</code> for some non-<code>NaN</code> objects like <code>undefined</code> or <code>{}</code>.</p>\n\n<pre><code>isNaN(undefined);\n=&gt; true\n</code></pre>\n\n<p>I think, e.g., underscore's implementation is much more intuitive/logical:</p>\n\n<pre><code>_.isNaN(undefined);\n=&gt; false\n</code></pre>\n\n<p>Why did the ECMA standard specify such a counterintuitive behavior?</p>\n\n<p>Why didn't they design <code>isNaN</code> to return <code>true</code> <strong>only</strong> if the value to test is \n<em>really</em> <code>isNaN</code> and leave the burden to test for convertability-to-number on a separate <code>isNumber</code> function?</p>\n\n<p>Doing it this way would have led to even more advantages like no <em>double negative</em> when testing for numbers:</p>\n\n<pre><code>if (isNumber(x)) { } // if x is a number\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>if (!isNaN(x)) { }   // if x is not not a number\n</code></pre>\n\n<p>Since they are going to introduce <code>Number.isNaN()</code> in ECMAScript 6 (which does exactly what you would expect from it), it looks like there are more people thinking like this.</p>\n\n<p>So, why did they design <code>isNaN</code> the way it is in the first place? Was it just a wrong decision or was there a good reasoning to do so?</p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"How to run Node.js app with ES6 features enabled?","l":"http://stackoverflow.com/questions/28782656/how-to-run-node-js-app-with-es6-features-enabled","q":"\n\n<p>I use the <a href=\"https://babeljs.io/docs/usage/require/\" rel=\"nofollow\">require hook</a> of <a href=\"http://babeljs.io/\" rel=\"nofollow\">BabelJS</a> (formerly named 6to5) to run node apps with <a href=\"http://git.io/es6features\" rel=\"nofollow\">es6features</a>:</p>\n\n<pre><code>// run.js\nrequire(\"babel/register\");\nrequire(\"./app.js6\");\n</code></pre>\n\n<p>I call <code>node run.js</code> to run my <strong>app.js6</strong>. I need to install BabelJS and provide a <strong>run.js</strong> for each project I'd like to use es6features. I would prefer a call like <code>nodejs6 app.js6</code>. How can I achieve this system independently (Unix and Windows)?</p>\n    ","a":"\n<p>Add Babel as a dependency to your app's package.json file and define a <code>start</code> script:</p>\n\n<pre><code>{\n  \"dependencies\": {\n    \"babel\": \"4.7.16\"\n  },\n  \"scripts\": {\n    \"start\": \"./node_modules/.bin/babel-node ./app.js\"\n  }\n}\n</code></pre>\n\n<p>Then you can simply execute the following command to run your app:</p>\n\n<pre><code>npm start\n</code></pre>\n\n<p>If you ever decide to stop using Babel (e.g. once Node.js supports all of the ES6/7 features), you can just update your package.json to the following:</p>\n\n<pre><code>{\n  \"dependencies\": {},\n  \"scripts\": {\n    \"start\": \"node ./app.js\"\n  }\n}\n</code></pre>\n\n<p>One benefit of this is that the command to run your app remains the same, which helps if you are working with other developers.</p>\n    "},{"t":"Symbol.for(string) in ECMAScript 6","l":"http://stackoverflow.com/questions/30984858/symbol-forstring-in-ecmascript-6","q":"\n\n<p>It took me a while but I finally figured out what the purpose of symbols in ECMAScript 6 is: avoiding name collision when attaching properties to shared objects - HTML elements e.g. (In case you're stuck on the same question, I recommend <a href=\"https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/\" rel=\"nofollow\">this article</a>.)</p>\n\n<p>But then I stumbled upon <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\" rel=\"nofollow\">Symbol.for()</a>. Apparently ECMAScript 6 will maintain a global symbol registry which you can query with this function by providing the symbol description. Come again? If I use symbols to avoid name collisions, why would I want code other than my own to use them? (*) And how would I avoid name collisions in that global registry? Sharing of symbols seems to completely subvert the concept and a global registry doubly so.</p>\n\n<p>(*) Yes, I know symbols aren't <em>truly</em> private, but that's besides the point.</p>\n    ","a":"\n<p>If you don't want your symbols to be available in GlobalSymbolRegistry, just don't use <code>Symbol.for</code>.</p>\n\n<p>Only use it if you want to allow other codes to use your symbol.</p>\n\n<p>In the following example, I create a symbol to store data in DOM elements. And I may want every other code (e.g. <a href=\"http://www.w3.org/TR/html5/webappapis.html#internal-raw-uncompiled-handler\" rel=\"nofollow\">internal raw uncompiled handlers</a>) to read that data. So I make the symbol globally available.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var sym = Symbol.for('storeDataInDOM');\ndocument.querySelector('button')[sym] = 'Hello, world!';</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button onclick=\"alert(this[Symbol.for('storeDataInDOM')])\"&gt;Click me&lt;/button&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>It's like creating global variables: should be avoided in general, but has its advantages. But with symbols instead of strings.</p>\n    "},{"t":"When should I use `return` in es6 Arrow Functions?","l":"http://stackoverflow.com/questions/28889450/when-should-i-use-return-in-es6-arrow-functions","q":"\n\n<p>The new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"nofollow\">es6 arrow functions</a> say <code>return</code> is implicit under some circumstances:</p>\n\n<blockquote>\n  <p>The expression is also the implicit return value of that function.</p>\n</blockquote>\n\n<p>In what cases do I need to use <code>return</code> with es6 arrow functions?</p>\n    ","a":"\n<p>Jackson has partially <a href=\"http://stackoverflow.com/a/28135120/473961\">answered this</a> in a similar question:</p>\n\n<blockquote>\n  <p>Implicit return, but only if there is no block.</p>\n  \n  <ul>\n  <li>This will result in errors when a one-liner expands to multiple lines and the programmer forgets to add a <code>return</code>.</li>\n  <li>Implicit return is syntactically ambiguous. <code>(name) =&gt; {id: name}</code>returns the object <code>{id: name}</code>... right? Wrong. It returns <code>undefined</code>. Those braces are an explicit block. <code>id:</code> is a label.</li>\n  </ul>\n</blockquote>\n\n<p>I would add to this the definition of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\" rel=\"nofollow\">block</a>:</p>\n\n<blockquote>\n  <p>A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets.</p>\n</blockquote>\n\n<p><strong>Examples</strong>:\n</p>\n\n<pre><code>// returns: undefined\n// explanation: an empty block with an implicit return\n((name) =&gt; {})() \n\n// returns: 'Hi Jess'\n// explanation: no block means implicit return\n((name) =&gt; 'Hi ' + name)('Jess')\n\n// returns: undefined\n// explanation: explicit return required inside block, but is missing.\n((name) =&gt; {'Hi ' + name})('Jess')\n\n// returns: 'Hi Jess'\n// explanation: explicit return in block exists\n((name) =&gt; {return 'Hi ' + name})('Jess') \n\n// returns: undefined\n// explanation: a block containing a single label. No explicit return.\n// more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\n((name) =&gt; {id: name})('Jess') \n\n// returns: {id: 'Jess'}\n// explanation: implicit return inside expression ( ) returns object\n((name) =&gt; ({id: name}))('Jess') \n\n// returns: {id: 'Jess'}\n// explanation: explicit return inside block returns object\n((name) =&gt; {return {id: name}})('Jess') \n</code></pre>\n    "},{"t":"How do I write a named arrow function in ES2015?","l":"http://stackoverflow.com/questions/27977525/how-do-i-write-a-named-arrow-function-in-es2015","q":"\n\n<p>I have a function that I am trying to convert to the new arrow syntax in <strong>ES6</strong>.  It is a named function:</p>\n\n<pre><code>function sayHello(name) {\n    console.log(name + ' says hello');\n}\n</code></pre>\n\n<p>Is there a way to give it a name without:</p>\n\n<pre><code>var sayHello = (name) =&gt; {\n    console.log(name + ' says hello');\n}\n</code></pre>\n\n<p>Obviously, I can only use this function after I have defined it.  Something like following:</p>\n\n<pre><code>sayHello = (name) =&gt; {\n        console.log(name + ' says hello');\n    }\n</code></pre>\n\n<p>Is there a new way to do this in <strong>ES6</strong>?</p>\n    ","a":"\n<p>No. The arrow syntax is a shortform for anonymous functions. Anonymous functions are, well, anonymous.</p>\n\n<p>Named functions are defined with the <code>function</code> keyword.</p>\n    "},{"t":"One-liner to take some properties from object in ES6","l":"http://stackoverflow.com/questions/25553910/one-liner-to-take-some-properties-from-object-in-es6","q":"\n\n<p>How one can write a function, which takes only few attributes in most-compact way in ES6?\nI've came up with solution using destructuring + simplified object literal, but I don't like that list of fields is repeated in the code.</p>\n\n<p>Is there an even <em>slimmer</em> solution?</p>\n\n<pre><code>(v) =&gt; {\n    let { id, title } = v;\n    return { id, title };\n}\n</code></pre>\n    ","a":"\n<p>Here's something slimmer, although it doesn't avoid repeating the list of fields. It uses \"parameter destructuring\" to avoid the need for the <code>v</code> parameter.</p>\n\n<pre><code>({id, title}) =&gt; ({id, title})\n</code></pre>\n\n<p>@EthanBrown's solution is more general. Here is a more idiomatic version of it which uses <code>Object.assign</code>, array comprehension, the spread call operator, and computed properties (the <code>[p]</code> part):</p>\n\n<pre><code>function pick(o, ...fields) {\n    return Object.assign({}, ...(for (p of fields) {[p]: o[p]}));\n}\n</code></pre>\n\n<p>To omit absent properties:</p>\n\n<pre><code>function pick(o, ...fields) {\n    var has = p =&gt; o.hasOwnProperty(p);\n    return Object.assign({}, ...(for (p of fields) if (has(p)) {[p]: o[p]}));\n}\n</code></pre>\n\n<p>Traceur is happy enough with the above. However, <code>node --harmony</code> does not support the spread call operator or computed properties.</p>\n\n<p>If we want to preserve the properties' attributes, such as <code>configurable</code> and getters and setters, while also omitting non-enumerable properties, then:</p>\n\n<pre><code>function pick(o, ...fields) {\n    var has = p =&gt; o.propertyIsEnumerable(p),\n        get = p =&gt; Object.getOwnPropertyDescriptor(o, p);\n\n    return Object.defineProperties({},\n        Object.assign({},\n            ...(for (p of fields) if (has(p)) {[p]: get(p)})\n        )\n    );\n}\n</code></pre>\n    "},{"t":"New es6 syntax for importing commonjs / amd modules i.e. `import foo = require('foo')`","l":"http://stackoverflow.com/questions/29596714/new-es6-syntax-for-importing-commonjs-amd-modules-i-e-import-foo-require","q":"\n\n<p>Previously I could do: </p>\n\n<pre><code>import foo = require('foo');\n</code></pre>\n\n<p>But now that TypeScript (1.5) supports es6 module syntax, what is the correct way to achieve the same in ES6 module syntax.</p>\n    ","a":"\n<p>The correct way is to continue using the old import syntax. The new import syntax is for ES modules only, the old import syntax is for pre-ES6 modules. The two are distinct, intentionally so. <strong><code>import * as foo from 'foo'</code> imports all the <em>properties</em> of the module 'foo', it <em>does not import the default value as <code>foo</code></em></strong>. </p>\n\n<p><a href=\"https://github.com/Microsoft/TypeScript/issues/2242#issuecomment-83694181\">From the designer of the feature</a>:</p>\n\n<ul>\n<li>An export default declaration always declares an exported member named default and is always emitted as an assignment to exports.default. In other words, <code>export default</code> consistently has ES module semantics. For compatibility with Babel we could optionally emit an <code>__esModule</code> marker when a module has a default export, but we wouldn't actually use that marker for anything.</li>\n<li>An <code>export =</code> declaration, which substitutes a different entity to be exported in place of the module itself, is always emitted as an assignment to <code>module.exports</code>. It is an error to have other exports in a module that uses <code>export =</code>. This is the existing TypeScript behavior.</li>\n<li>A module that uses <code>export =</code> to export another module (be that an internal or external module) can be imported using the new ES6 constructs. In particular, the convenient destructuring imports can be used with such modules. The pattern of using <code>export =</code> to export another module is common in .d.ts files that provide a CommonJS/AMD view of an internal module (e.g. angular.d.ts).</li>\n<li><strong>A module that uses <code>export =</code> to export a non-module entity in place of the module itself must be imported using the existing <code>import x = require(\"foo\")</code> syntax as is the case today.</strong></li>\n</ul>\n    "},{"t":"Has anyone gotten the Dart dev_compiler to work?","l":"http://stackoverflow.com/questions/28953608/has-anyone-gotten-the-dart-dev-compiler-to-work","q":"\n\n<p>I wanted to experiment using the Dart dev compiler that generates ES6. I installed it</p>\n\n<pre><code>pub global activate -sgit git@github.com:dart-lang/dev_compiler.git\n</code></pre>\n\n<p>Then I created a simple Dart class:</p>\n\n<pre><code>library wat;\n\nclass Person {\n    String first_name;\n    String last_name;\n    int amountOfAwesomeness;\n\n    Person(this.first_name, this.last_name, [this.amountOfAwesomeness = 0]);\n    String get name =&gt; \"$first_name $last_name is awesome:$amountOfAwesomeness\";\n}\n</code></pre>\n\n<p>Then I tried to compile it:</p>\n\n<pre><code>dartdev -o ./ person.dart\n</code></pre>\n\n<p>but I get an exception:</p>\n\n<pre><code>Unhandled exception:\n'package:dev_compiler/src/dependency_graph.dart': Failed assertion: line 60 pos 16: 'false' is not true.\n#0      _AssertionError._throwNew (dart:core-patch/errors_patch.dart:27)\n#1      SourceGraph.nodeFromUri.&lt;anonymous closure&gt; (package:dev_compiler/src/dependency_graph.dart:60:16)\n#2      _CompactLinkedHashMap.putIfAbsent (dart:collection-patch/compact_hash.dart:193) \n#3      SourceGraph.nodeFromUri (package:dev_compiler/src/dependency_graph.dart:50:29)\n#4      Compiler.Compiler (package:dev_compiler/devc.dart:76:38)\n#5      main (http://localhost:60878/devc.dart:42:22)\n#6      _startIsolate.&lt;anonymous closure&gt; (dart:isolate-patch/isolate_patch.dart:253)\n#7      _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:142)\n</code></pre>\n\n<p>Seems like a simple example like this should work. What am I doing wrong? Is the dev_compiler just not ready to try out yet?</p>\n    ","a":"\n<p>Answering my own question since I got it working. The main problem above is the output directory. If you do not specify an output directory, it appears to do nothing. So you must specify a name for the output directory. The current directory apparently does not work. An absolute path does seem to work. </p>\n\n<p>Examples that work:\n<code>dartdevc -o mydir input.dart</code>\n<code>dartdevc -o /path/to/dir input.dart</code></p>\n\n<p>Example that does not work:\n<code>dartdevc -o ./ input.dart</code></p>\n\n<p>The output for the above example is:</p>\n\n<pre><code>var person;\n(function(exports) {\n  'use strict';\n  class Person extends dart.Object {\n    Person(first_name, last_name, amountOfAwesomeness) {\n      if (amountOfAwesomeness === void 0)\n        amountOfAwesomeness = 0;\n      this.first_name = first_name;\n      this.last_name = last_name;\n      this.amountOfAwesomeness = amountOfAwesomeness;\n    }\n    get name() {\n      return `${this.first_name} ${this.last_name} is awesome: ${this.amountOfAwesomeness}`;\n    }\n  }\n  // Exports:\n  exports.Person = Person;\n})(person || (person = {}));\n//# sourceMappingURL=person.js.map\n</code></pre>\n    "},{"t":"Import commonJS, AMD, and ES6 modules at runtime with synchronous syntax","l":"http://stackoverflow.com/questions/25878390/import-commonjs-amd-and-es6-modules-at-runtime-with-synchronous-syntax","q":"\n\n<p>I've been writing a lot of ES6 lately, using <code>import {variable} from 'ES6module'</code> syntax, and compiling the code in-browser with <a href=\"https://github.com/google/traceur-compiler\" rel=\"nofollow\">traceur-compiler</a>. I started looking at <a href=\"https://github.com/systemjs/systemjs\" rel=\"nofollow\">systemjs</a> since it seemed like it might allow me to use the same syntax to import AMD, commonJS, <em>and</em> ES6 modules.</p>\n\n<p>Reading the documentation has started to confuse me though. I see a lot of asynchronous calls like <code>System.import('path/to/module').then(function(variable) { ... })</code> which I'm not used to for dependency importing.</p>\n\n<p>I've read <a href=\"http://guybedford.com/practical-workflows-for-es6-modules\" rel=\"nofollow\">Practical workflows for ES6 modules</a>, which covers many different workflows, none of which involves importing an ES6 module <em>and</em> an AMD/commonjs module at runtime. I'm thinking something like this:</p>\n\n<pre><code>import {myObject} from 'my/es6/module';\nimport {_} from 'lib/underscore';\n</code></pre>\n\n<p>or if not that, than at least:</p>\n\n<pre><code>import {myObject} from 'my/es6/module';\nvar _ = require('lib/underscore');\n</code></pre>\n\n<p>Are either of these possible with systemjs?</p>\n    ","a":"\n<p>This use case is exactly what SystemJS is designed for.</p>\n\n<p>You can write:</p>\n\n<pre><code>import {myObject} from 'my/es6/module';\nimport _ from 'lib/underscore';\n</code></pre>\n\n<p>The reason is because CommonJS, AMD and Global modules in SystemJS are treated as if they only export a <code>default</code> property, which corresponds to the default import syntax above.</p>\n    "},{"t":"Convert ES6 Iterable to Array","l":"http://stackoverflow.com/questions/27612713/convert-es6-iterable-to-array","q":"\n\n<p>Say you have an array-like Javascript ES6 Iterable that you know in advance will be finite in length, what's the best way to convert that to a Javascript Array?</p>\n\n<p>The reason for doing so is that many js libraries such as underscore and lodash only support Arrays, so if you wish to use any of their functions on an Iterable, it must first be converted to an Array.</p>\n\n<p>In python you can just use the list() function. Is there an equivalent in ES6?</p>\n    ","a":"\n<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"nofollow\">Array.from</a> method, which is being added in ES6, but only supports arrays and iterable objects like Maps and Sets (also coming in ES6). For regular objects, you can use Underscore's <a href=\"http://underscorejs.org/#toArray\" rel=\"nofollow\">toArray</a> method or lodash's toArray method, since both libraries actually have great support for objects, not just arrays. If you are already using underscore or lodash, then luckily they can handle the problem for you, alongside adding various functional concepts like map and reduce for your objects.</p>\n    "},{"t":"When should I use let and var? [closed]","l":"http://stackoverflow.com/questions/21906133/when-should-i-use-let-and-var","q":"\n\n<p><strong>EDIT: Please read the question! I already know the difference. This is not a duplicate.</strong></p>\n\n<p>Obviously, right now I should always be using the <code>var</code> key word as <code>let</code> isn't supported in everything.</p>\n\n<p>When the let keyword has better support (say, I'm writing a Node application in a couple years time which uses Harmony), when should I use the <code>let</code> keyword vs the <code>var</code> keyword?</p>\n\n<p>I understand the difference —<code>var</code> is for function scoping while <code>let</code> is for block scoping—but I'm looking for something like \"always use the <code>let</code> keyword\" or \"use the <code>var</code> keyword at the top of functions, but the let keyword in blocks like for loops\".</p>\n    ","a":"\n<p>I would say that you should, as a principle, use <code>let</code> whenever it is not inconvenient to do so. Such as:</p>\n\n<pre><code>for (let i = 0; i &lt; 100; i++) {\n    // Do something\n}\n\nif (condition) {\n    let msg = a + b + c;\n    console.log(msg);\n    alert(msg);\n}\n</code></pre>\n\n<p>The advantages to this approach is:</p>\n\n<ol>\n<li>Less risk of overriding some global variable use for something else</li>\n<li>Less risk of memory leaks due to variables staying in memory long after they have become irrelevant</li>\n</ol>\n    "},{"t":"Does Ecmascript 6 support a mutable __proto__ property?","l":"http://stackoverflow.com/questions/13839115/does-ecmascript-6-support-a-mutable-proto-property","q":"\n\n<p>In the current Ecmascript 6 draft (November 2012), there is official support for the <code>__proto__</code> property (Section B.3.1). This came as a bit of a surprise as, in current browser implementations, the <code>__proto__</code> property is deprecated.</p>\n\n<p>If the current draft stands, will ES6 have full support for mutable prototypes? Will I be able to provide a new prototype for an existing object the way I currently can in Firefox?</p>\n    ","a":"\n<p>Currently, it is planned for mutable <code>__proto__</code> to be in the spec (and not just in annex b). The current plan is for it to be a magical data property existing solely on Object.prototype and acting as an accessor (the magical part). This property will be deletable as well, removing the ability to mutate <code>__proto__</code> for that realm when deleted. I've implemented <code>__proto__</code> following this description in my ES6 virtual machine <a href=\"http://benvie.github.com/continuum\" rel=\"nofollow\">http://benvie.github.com/continuum</a>.</p>\n\n<p>Originally it was to be deprecated and replaced, but no consensus formed on that replacement was. The ability to inherit from builtins is the end goal and the decision was that <code>__proto__</code> is already widespread (everything but ie has it) and fulfills this goal, so the path of least resistance was to embrace and codify it.</p>\n    "},{"t":"Shallow-clone an ES6 Map or Set","l":"http://stackoverflow.com/questions/30626070/shallow-clone-an-es6-map-or-set","q":"\n\n<p>How do you shallow-clone an ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"nofollow\">Map</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow\">Set</a> object?</p>\n\n<p>I want to get a new Map or Set that has the same keys and values.</p>\n    ","a":"\n<p>Use the constructor to clone Maps and Sets:</p>\n\n<pre><code>var clonedMap = new Map(originalMap)\n\nvar clonedSet = new Set(originalSet)\n</code></pre>\n    "},{"t":"Prefer throw or reject when failing promise asynchronously","l":"http://stackoverflow.com/questions/30532085/prefer-throw-or-reject-when-failing-promise-asynchronously","q":"\n\n<p>I have a Bluebird promise that wraps an AJAX request and need to reject the promise when the request fails. I would like to provide the reason why the request failed, largely drawn from the status code, to any catch blocks that may be attached. To achieve that, I have <code>UnauthorizedError</code> and <code>NotFoundError</code> and similar classes, all extending <code>Error</code> to work with Bluebird's pattern-matching <code>catch</code>.</p>\n\n<p>The part I'm not sure on is whether I should <code>throw</code> or call the reject handler. My code looks something like:</p>\n\n<pre><code>class Request {\n  // other methods\n\n  send(method, url, args, body) {\n    return new Promise((res, rej) =&gt; {\n      let xhr = new XMLHttpRequest();\n      xhr.open(method, url);\n\n      xhr.onload = () =&gt; {\n        res(JSON.parse(xhr.responseText));\n      };\n\n      xhr.onerror = () =&gt; {\n        let status = xhr.status;\n        switch (status) {\n          case 401:\n            // Should I use throw:\n            throw new UnauthorizedError(url);\n            // or\n            rej(new UnauthorizedError(url));\n        }\n      };\n\n      xhr.send();\n    });\n  }\n}\n</code></pre>\n    ","a":"\n<h3>Inside the <code>Promise</code> constructor</h3>\n\n<p>The promise constructor is throw safe, but by nature you're typically not dealing with throw safe things inside - so for example the following is not safe:</p>\n\n<pre><code>new Promise(function(resolve, reject){\n     setTimeout(function(){\n         // NEVER throw here, it'll throw globally and not reject the promise\n     }, 100);\n});\n</code></pre>\n\n<p>The promise constructor is typically only used to convert callback APIs to promises and since callbacks are not throw-safe like promises you have to reject when they error asynchronously (rather than throw). </p>\n\n<h3>Inside a <code>then</code> handler</h3>\n\n<p>The two are identical functionally. When you <code>throw</code> from a <code>then</code> handler you're returning a rejected promise.  I prefer to throw because it is more explicit that an error happened than a <code>return</code> but it does not matter.</p>\n\n<p>This is true for any promise implementation except Angular 1.x's <code>$q</code> which distinguishes the two - but it's the odd ball out (when you <code>throw</code> there it logs even if you handle the error).</p>\n\n<h3>In your code</h3>\n\n<p>In your code there are several bugs in the way you reject and handle the promises. Promises are very robust in that they handle errors gracefully for you - you have to be extremely careful when you convert callback APIs to promises in that regard:</p>\n\n<pre><code>class Request {\n    // other methods\n\n    send(method, url, args, body) {\n        return new Promise((res, rej) =&gt; {  // it's good that new Promise is the first\n            let xhr = new XMLHttpRequest(); // line since it's throw-safe. This is why it\n            xhr.open(method, url);          // was chosen for the API and not deferreds\n\n            xhr.onload = () =&gt; {\n                // This _needs_ a try/catch, it will fail if responseText\n                // is invalid JSON and will throw to the global scope instead of rejecting\n                res(JSON.parse(xhr.responseText));\n            };\n\n            xhr.onerror = () =&gt; {\n                let status = xhr.status;\n                switch (status) {\n                case 401:\n                    // this _must_ be a reject, it should also generally be surrounded\n                    // with a try/catch\n                    rej(new UnauthorizedError(url));\n                }\n            };\n\n            xhr.send(); // it's important that this is in the promise constructor\n        });\n    }\n}\n</code></pre>\n    "},{"t":"EcmaScript-6 backward compatibility","l":"http://stackoverflow.com/questions/30149034/ecmascript-6-backward-compatibility","q":"\n\n<p>I remember the introduction of <code>'use strict';</code> in ES-5, it was in the spirit of the backward compatibility. That means the previous JS-engines/browsers will keep working fine even if they encounter <code>'use strict';</code> while parsing JS scripts.</p>\n\n<p>I seriously doubt and curious to know how would the ES-5 compliant browsers behave when subjected to parse the ES-6 script. The reason is ES-6 new features involve syntax change/updates. And the <em>new-syntax-unaware-engines</em> will start throwing errors when they encounter any of the new syntax like <code>yield[*], Map, Set, WeakMap, function* foo(){}, =&gt;, for...of etc.</code></p>\n\n<p>My question is has the decision/inclusion of new features in ES-6 taken care of  <strong>backwards-compatibility</strong> and <strong>if yes</strong> then how?</p>\n\n<p><strong>If not</strong> then what should I be doing to keep my <em>old-browser-users</em> happy? One answer to this may be using some <a href=\"http://en.wikipedia.org/wiki/Source-to-source_compiler\" rel=\"nofollow\">transpiler</a> like <a href=\"https://github.com/google/traceur-compiler\" rel=\"nofollow\">traceur-compiler</a>. But any other way out for this scenario?</p>\n    ","a":"\n<p>Many ES6 features are not backward compatible and will only work in an ES6 JS engine.  Some features like the Set object can be partially polyfilled for older browsers, but many cannot.</p>\n\n<p>If your code runs in a browser, it will either only work in the newest browsers or you will have to wait until your entire browser support base is up to ES6 (years from now). </p>\n\n<p>If your code runs in something like node.js or if it's a plug-in for a specific version of a specific browser, then you have better control over the JS engine and can likely use ES6 features sooner. </p>\n\n<p>The different purpose of <code>\"use strict\";</code> (removing support for bad practices) is more consistent with allowing for backward compatibility than new language features like generators.</p>\n\n<p>You may find this article useful which discusses some of the issues in trying to use ES6 today:</p>\n\n<p><a href=\"http://addyosmani.com/blog/ecmascript-6-resources-for-the-curious-javascripter/\" rel=\"nofollow\">ECMAScript 6 Resources For The Curious JavaScripter</a></p>\n    "},{"t":"Convert array to set","l":"http://stackoverflow.com/questions/17515498/convert-array-to-set","q":"\n\n<p>I am playing with <code>Set</code> in Node.JS v0.11.3 and the <code>--harmony</code> flag. The API works fine, I can <code>add</code>, <code>remove</code>, <code>clear</code>, etc. I have however not been able to initialise a set with an array. I have tried (as prompted by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow\">the MDN page</a>)</p>\n\n<pre><code>var mySet = new Set([1, 1, 2]);\n</code></pre>\n\n<p>but <code>mySet.size</code> is <code>0</code>. </p>\n\n<p>How can I convert an array to a set? Is MDN outdated? Has Node.JS simply not implemented the feature?</p>\n    ","a":"\n<p>The <a href=\"https://code.google.com/p/v8/source/browse/trunk/src/collection.js#45\" rel=\"nofollow\">v8 implementation</a> of the <code>Set</code> constructor does not yet support the <code>iterator</code> and <code>comparator</code> arguments mentioned in §15.16.1.1 of the <a href=\"http://wiki.ecmascript.org/lib/exe/fetch.php?id=harmony%3Aspecification_drafts&amp;cache=cache&amp;media=harmony%3aworking_draft_ecma-262_edition_6_05-14-13-nomarkup.pdf\" rel=\"nofollow\">current draft of the Harmony specification</a>, and node uses v8 as its JavaScript interpreter.</p>\n\n<p>As a band-aid, you can use the <a href=\"https://npmjs.org/package/simplesets\" rel=\"nofollow\">simplesets package</a>.</p>\n    "},{"t":"Does ES6 introduce a well-defined order of enumeration for object properties?","l":"http://stackoverflow.com/questions/30076219/does-es6-introduce-a-well-defined-order-of-enumeration-for-object-properties","q":"\n\n<p>Does ES6 introduce a well-defined order of enumeration for object properties?</p>\n\n<pre><code>var o = {\n  '1': 1,\n  'a': 2,\n  'b': 3\n}\n\nObject.keys(o); // [\"1\", \"a\", \"b\"] - is this ordering guaranteed by ES6?\n\nfor(let k in o) {\n  console.log(k);\n} // 1 2 3 - is this ordering guaranteed by ES6?\n</code></pre>\n    ","a":"\n<p><strong>Yes.</strong></p>\n\n<p>The order is:</p>\n\n<ul>\n<li>integer indexes<sup>(*)</sup> in ascending order</li>\n<li>strings in creation order</li>\n<li>Symbols in creation order</li>\n</ul>\n\n<p><sub>*: A positive 32-bit integer is considered to be an integer index</sub></p>\n\n<hr>\n\n<p>In the spec, it's said about an <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\" rel=\"nofollow\">object's internal <code>[[Enumerate]]</code> method</a>:</p>\n\n<blockquote>\n  <p>[[Enumerate]] must obtain the own property keys of the target object as if by calling its [[OwnPropertyKeys]] internal method.</p>\n</blockquote>\n\n<p><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\" rel=\"nofollow\">And <code>[[OwnPropertyKeys]]</code> is defined as</a></p>\n\n<blockquote>\n  <p>When the [[OwnPropertyKeys]] internal method of O is called the following steps are taken:</p>\n  \n  <ol>\n  <li>Let keys be a new empty List.</li>\n  <li>For each own property key P of O that is an integer index, in ascending numeric index order\n  <ol>\n  <li>Add P as the last element of keys.</li>\n  </ol></li>\n  <li>For each own property key P of O that is a String but is not an integer index, in property creation order\n  <ol>\n  <li>Add P as the last element of keys.</li>\n  </ol></li>\n  <li>For each own property key P of O that is a Symbol, in property creation order\n  <ol>\n  <li>Add P as the last element of keys.</li>\n  </ol></li>\n  <li>Return keys. </li>\n  </ol>\n</blockquote>\n    "},{"t":"ECMAScript6 arrow function that returns an object","l":"http://stackoverflow.com/questions/28770415/ecmascript6-arrow-function-that-returns-an-object","q":"\n\n<p>When returning an object from an arrow function, it seems that it is necessary to use an extra set of {} and a return statement because of an ambiguity in the grammar:</p>\n\n<p><code>p =&gt; { return { foo: 'bar' } }</code></p>\n\n<p>If the arrow function returns anything else, the {} and return are unnecessary, e.g.:</p>\n\n<p><code>p =&gt; 'foo'</code></p>\n\n<p>Is there something obvious I am missing?</p>\n    ","a":"\n<p>You must wrap the returning object literal into parentheses. Otherwise curly braces will be considered to denote the function’s body. Next works:</p>\n\n<pre><code>p =&gt; ({ foo: 'bar' });\n</code></pre>\n\n<p>Any other type you don't need to wrap into parentheses:</p>\n\n<pre><code>p =&gt; 10;\np =&gt; 'foo';\np =&gt; true;\np =&gt; [1,2,3];\np =&gt; null;\np =&gt; /^foo$/;\n</code></pre>\n\n<p>and so on.</p>\n    "},{"t":"JavaScript Symbol type: (non-string object keys)","l":"http://stackoverflow.com/questions/17759780/javascript-symbol-type-non-string-object-keys","q":"\n\n<p>What is the \"Symbol\" javascript type <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-8.1.6\" rel=\"nofollow\">as mentioned in this ECMAScript 6 draft specification</a>?</p>\n\n<p>To quote the spec:</p>\n\n<blockquote>\n  <p>The Symbol type is the set of all non-String values that may be used as the key of an Object property.</p>\n  \n  <p>Each possible Symbol values is unique and immutable.</p>\n  \n  <p>Symbol values have a single observable attribute called [[Private]] whose immutable value is either true or false. A private symbol is a Symbol value whose [[Private]] attribute has the value true.</p>\n</blockquote>\n\n<p>I thought object keys were strings only, and I'm not alone. To quote <a href=\"http://stackoverflow.com/a/6067160/552067\">this accepted SO answer</a>:</p>\n\n<blockquote>\n  <p>…object keys are always strings…</p>\n</blockquote>\n\n<p>Could you explain what the symbol type is, and demonstrate its usage. I'm trying to make sense of the spec.</p>\n\n<p>Thanks!</p>\n    ","a":"\n<blockquote>\n  <p>I thought object keys were strings only</p>\n</blockquote>\n\n<p>You're right, but that was true for EcmaScript 5 only. ES 6 / harmony is a draft for something new!</p>\n\n<blockquote>\n  <p>I'm trying to make sense of the spec</p>\n</blockquote>\n\n<p>It's a draft only, <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aspecification_drafts\">rapidly changing</a>. How symbols are used and whether or how they can be created by arbitrary scripts does not seem to have settled yet (scan through the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aspecification_drafts&amp;s=symbol#older_drafts\">versions</a> for changes).</p>\n\n<p>If you scroll down to the very end of <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html\">that document</a> (even below Annex F), you for example will see a <em>Section 8.4.4: Symbol Exotic Objects</em> that has been moved out there. It states</p>\n\n<blockquote>\n  <p>Exotic Symbol objects provide alternative definitions for all of the essential internal methods.</p>\n</blockquote>\n\n<p>You can see them used at <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-8.1.7.4\">section 8.1.7.4 <em>Well-Known Symbols and Intrinsics</em></a> for example. For proposed uses (and still existing problems / open questions) of <code>Symbol</code> constructors have a look at <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman%3aproxy_symbol_decoupled\">these</a> <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman%3aprivate_names\">strawman</a> pages or <a href=\"https://github.com/dherman/tc39-codex-wiki/blob/master/data/es6/symbols/index.md\">this wiki site</a>.</p>\n    "},{"t":"ES6 shorthand object key checking","l":"http://stackoverflow.com/questions/30395108/es6-shorthand-object-key-checking","q":"\n\n<p>Curious to know if there's any part of ES6 that makes these kind of checks a little more concise:</p>\n\n<pre><code>componentWillReceiveProps(nextProps) {\n    if(nextProps &amp;&amp; nextProps.filterObj &amp;&amp; nextProps.filterObj.area){\n        // go ahead\n    }\n}\n</code></pre>\n    ","a":"\n<p>No, no existential operator has made it into ES6; it is <a href=\"https://esdiscuss.org/topic/existential-operator-null-propagation-operator\" rel=\"nofollow\">still discussed</a> however.</p>\n\n<p>You can use any of the <a href=\"http://stackoverflow.com/q/2631001/1048572\">existing methods</a>, of course, like</p>\n\n<pre><code>if ( ((nextProps||{}).filterObj||{}).area ) {\n    // go ahead\n}\n</code></pre>\n\n<p>Also you can try destructuring and default values:</p>\n\n<pre><code>function componentWillReceiveProps({filterObj: {area} = {}} = {}) {\n    if (area) {\n        // go ahead\n    }\n}\n</code></pre>\n    "},{"t":"How to circumvent the ES6 Class scoping issue with 'this' key word [duplicate]","l":"http://stackoverflow.com/questions/30272456/how-to-circumvent-the-es6-class-scoping-issue-with-this-key-word","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/20279484/how-to-access-the-correct-this-context-inside-a-callback\" dir=\"ltr\">How to access the correct `this` / context inside a callback?</a>\n                <span class=\"question-originals-answer-count\">\n                    4 answers\n                </span>\n        </li>\n        <li>\n            <a href=\"/questions/27977525/how-do-i-write-a-named-arrow-function-in-es2015\" dir=\"ltr\">How do I write a named arrow function in ES2015?</a>\n                <span class=\"question-originals-answer-count\">\n                    3 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>For example in the Class constructor:</p>\n\n<pre><code>Socket.on('user:join', onUserJoin);\n</code></pre>\n\n<p>'onUserJoin' is declared as a method of the class but is being called by socket.io so the <code>'this'</code> is not my Class. A way to resolve this is to use the <code>'=&gt;'</code> function.</p>\n\n<p>example:</p>\n\n<pre><code>Socket.on('user:join', (data)=&gt;{\n        this.isOnline = true;\n    }); \n</code></pre>\n\n<p>Now <code>'this'</code> is my class, but how do I reference this anonymous function to unsubscribe ? </p>\n\n<pre><code>socket.removeListener('user:join', ????);\n</code></pre>\n\n<p>I did try this:</p>\n\n<pre><code>let self;\nclass RoomController {\n    constructor() {\n    self = this;\n    }\n    ...\n}\n</code></pre>\n\n<p>and reference the self in the methods but the self was being shared across sockets... </p>\n\n<p>naming the anonymous function could solve it but I preferred for my case the bind option.</p>\n    ","a":"\n<p>You can use <code>Function.prototype.bind</code>.</p>\n\n<pre><code>Socket.on('user:join', onUserJoin.bind(this));\n</code></pre>\n\n<p>This ensures that <code>onUserJoin</code> has the correct context, which will be the instance of your class.</p>\n    "},{"t":"Leading Underscore transpiled wrong with es6 classes","l":"http://stackoverflow.com/questions/30110437/leading-underscore-transpiled-wrong-with-es6-classes","q":"\n\n<p>I am experiencing a really weird behavior and can't even say which package to blame for it.\nMy setup: RequireJS project with the JSXTransformer and the <code>jsx!</code> plugin\nI have an es6 class like this:</p>\n\n<pre><code>define([\n    'react'\n], function(\n    React\n) {\n\n    class MyComponent extends React.Component {\n\n        myMethod() {\n            otherObject.someMethod()._privateProp; // Yes, we need this accessing and have no influence on it\n        }\n\n    }\n\n    return MyComponent;\n\n});\n</code></pre>\n\n<p>The transpiled output in the resulting bundle after running r.js is:</p>\n\n<pre><code>define('jsx!project/components/InputOutput',[\n    'react'\n], function(\n    React\n) {\n\n    var ____Class8=React.Component;for(var ____Class8____Key in ____Class8){if(____Class8.hasOwnProperty(____Class8____Key)){MyComponent[____Class8____Key]=____Class8[____Class8____Key];}}var ____SuperProtoOf____Class8=____Class8===null?null:____Class8.prototype;MyComponent.prototype=Object.create(____SuperProtoOf____Class8);MyComponent.prototype.constructor=MyComponent;MyComponent.__superConstructor__=____Class8;function MyComponent(){\"use strict\";if(____Class8!==null){____Class8.apply(this,arguments);}}\n\n        MyComponent.prototype.myMethod=function() {\"use strict\";\n            otherObject.someMethod().$MyComponent_privateProp;\n        };\n\n\n\n    return MyComponent;\n\n});\n</code></pre>\n\n<p>Note how <code>otherObject.someMethod().$MyComponent_privateProp;</code> is written there. This obviously breaks because it is not a property on instances of MyComponent.</p>\n    ","a":"\n<p>Add <code>/** @preventMunge */</code> to the top of the file. See <a href=\"https://github.com/facebook/jstransform/issues/50\" rel=\"nofollow\">this GitHub issue</a>:</p>\n\n<blockquote>\n  <p>Yes, sorry this is a non-standard fb-ism. For now you can work around this and toggle this feature off by putting <code>/** @preventMunge */</code> at the top of your file -- but that's also a pretty big fb-ism. We should (a) turn this into a transform option (rather than a direct docblock directive) and (b) make it opt-in rather than opt-out (since it's non-standard).</p>\n  \n  <p>For context: We munge all under-prefixed object properties on a per-module basis partly because our under-prefix convention applies to both objects and classes. Additionally, even if we wanted to lax the objects vs classes distinction, it's impossible to tell (in the general case) if a property is a reference to <code>this</code> since alias variables can occur (i.e. <code>var self = this; self._stuff;</code>).</p>\n</blockquote>\n    "},{"t":"In ES6 will the module lead to multiple network calls as 2 modules cannot be defined in single file","l":"http://stackoverflow.com/questions/29505354/in-es6-will-the-module-lead-to-multiple-network-calls-as-2-modules-cannot-be-def","q":"\n\n<p>In ES6 each module is defined in its own file. </p>\n\n<p>Does that mean that we will have to do multiple network calls for each javascript module if we go the es6 way? </p>\n\n<p>Is there anyway to concatenate the module files essentially create one minified javascript file for the app in es6? </p>\n\n<p>We can transpile the es6 code to es5 and concatenate the same. </p>\n\n<p>But, without transpiling to es5, does it mean that to use modules, we won't be able to concatenate and minify all javascript files into one?</p>\n    ","a":"\n<p>Bundling is the way to go.</p>\n\n<blockquote>\n  <p>Modern web applications consist of many, often small, modules. Loading\n  those modules over HTTP impacts performance negatively, because a\n  separate request is needed for each. Therefore, bundling multiple\n  modules as a single file has a long tradition in the web development\n  world. Current approaches are complex and error-prone and only work\n  for JavaScript. Therefore, the W3C Technical Architecture Group is\n  working on a new approach: Arbitrarily nested directories are archived\n  as a single package file. Browsers access files in the package via a\n  new kind of URL:</p>\n\n<pre><code>url-for-package SEPARATOR path-inside-package\n</code></pre>\n</blockquote>\n\n<p>Source: <a href=\"http://www.2ality.com/2013/11/es6-modules-browsers.html\" rel=\"nofollow\">http://www.2ality.com/2013/11/es6-modules-browsers.html</a></p>\n    "},{"t":"Non-local destructuring assignment in ES6 [duplicate]","l":"http://stackoverflow.com/questions/28842565/non-local-destructuring-assignment-in-es6","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/27864423/javascript-object-destructuring\" dir=\"ltr\">Javascript object destructuring</a>\n                <span class=\"question-originals-answer-count\">\n                    1 answer\n                </span>\n        </li>\n    </ul>\n</div>\n<p><code>var { foo: bar } = { foo: 123 };</code> works.</p>\n\n<p><code>{ foo: bar } = { foo: 123 };</code> does not.</p>\n\n<p>How to make latter work, when <code>bar</code> is global variable, but destructuring happens inside function?</p>\n    ","a":"\n<p>As stated in the \"Syntax Gotcha\" section in the <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-destructuring-assignment\" rel=\"nofollow\">understandinges6 book</a>, you will need to wrap it using parentheses because otherwise it will generate a syntax error. The opening curly brace is normally the beginning of a block, and blocks cannot be part of an assignment expression.</p>\n\n<p>This <a href=\"http://www.es6fiddle.net/i6tujihq/\" rel=\"nofollow\">worked</a> for me: </p>\n\n<pre><code>var bar;\n({ foo: bar } = { foo: 123 });\nconsole.log(bar); // 123\n</code></pre>\n\n<p>I've also tried: </p>\n\n<pre><code>var bar;\n({ foo: bar }) = { foo: 123 };\nconsole.log(bar); // ReferenceError: Invalid left-hand side in assignment at eval\n</code></pre>\n\n<p>But the latter isn't working for me in es6lint, though the book says it is supposed to work.</p>\n    "},{"t":"Member variables in ES6 classes","l":"http://stackoverflow.com/questions/28308578/member-variables-in-es6-classes","q":"\n\n<p>Is there any way to use the ECMAScript6 <code>class</code> notation to declare either a static class variable or a default value for an instance variable? Without <code>class</code> what I have in mind would be written as</p>\n\n<pre><code>function MyClass(arg) { if(arg) this.arg = arg; }\nMyClass.classVariable = 42;\nMyClass.prototype.arg = \"no arg specified\";\n</code></pre>\n\n<p>The most obvious ES6-like notation in my opinion would have been</p>\n\n<pre><code>class MyClass {\n    constructor(arg) { if(arg) this.arg = arg; }\n    static let classVariable = 42;\n    let arg = \"no arg specified\";\n}\n</code></pre>\n\n<p>But this doesn't work, since according to <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-class-definitions\" rel=\"nofollow\">the current spec draft</a> the only productions of <em>ClassElement</em> are static and instance methods and semicolons all by themselves. OK, one can use a pair of getter and setter methods to achieve similar semantics to what I outlined, but I guess at a severe performance penalty and with really bizarre syntax.</p>\n\n<p>Is there some draft which suggests including variables in the <code>class</code> notation, one way or another? If so, what was the suggested syntax, where was it published, where was it discussed, how did the discussion go, and what's the current state of affairs on that front? As it stands, this question can't be answered if no such thing has been discussed before, at any level, but I consider that unlikely.</p>\n\n<hr>\n\n<p>A bit of background: I'm currently toying with the Google closure compiler performing advanced compilation, using ES6 as input. For that to work, I need a place to put my type annotations for member variables, and I used to place them using syntax like <code>/** @type {string} */ MyClass.prototype.arg;</code> which is a semantic no-op in ECMAScript but provides the type information to the closure compiler nice and easy. I haven't yet found a similarly nice way to do this with a <code>class</code> construct. But if you care to address this aspect, that would be a comment. The question above is about member declarations which are more than no-ops, so that's what an answer here should discuss.</p>\n    ","a":"\n<p>ES6 will almost certainly not cover syntax for defining class variables. Only methods and getters/setters can be defined using the class syntax. This means you'll still have to go the <code>MyClass.classVariable = 42;</code> route for class variables. </p>\n\n<p>If you just want to initialize a class with some defaults, there is a rich new syntax set for function argument and destructuring defaults you can use. To give a simple example:</p>\n\n<pre><code>class Foo {\n    constructor(foo = 123) {\n        this.foo = foo;\n    }\n}\n\nnew Foo().foo == 123\nnew Foo(42).foo == 42\n</code></pre>\n    "},{"t":"user defined object equality for a set in harmony (es6)","l":"http://stackoverflow.com/questions/27094680/user-defined-object-equality-for-a-set-in-harmony-es6","q":"\n\n<p>I have a problem where I'm generating many values and need to make sure I only work with unique ones.\nSince I'm using node js, with the --harmony flag, and have access to harmony collections, I decided that a Set may be an option.</p>\n\n<p>What I'm looking for is something similar to the following example:</p>\n\n<pre><code>'use strict';\n\nfunction Piece(x,y){\n  this.x = x  \n  this.y = y\n}\n\nfunction Board(width,height,pieces){\n this.width = width \n this.height = height\n this.pieces = pieces\n}\n\nfunction generatePieces(){\n return [\n  new Piece(0,0),\n  new Piece(1,1) \n ] \n}\n\n//boardA and boardB are two different but equivalent boards\nvar boardA = new Board(10,10,generatePieces()) \nvar boardB = new Board(10,10,generatePieces())\n\nvar boards = new Set()\nboards.add(boardA)\nboards.has(boardB) //return true\n</code></pre>\n\n<p>Now normally to achieve this in another language, say c#, I would expect to have to implement an equals function, as well as a hash code generating function for both Board and Piece. Since I'd expect the default object equality to be based on references.\nOr perhaps use a special immutable value type (say, a case class in scala)</p>\n\n<p>Is there a means to define equality for my objects to solve my problem?</p>\n    ","a":"\n<blockquote>\n  <p>Is there a means to define equality for my objects to solve my problem?</p>\n</blockquote>\n\n<p>No not really. There has been <a href=\"https://esdiscuss.org/topic/maps-with-object-keys\">some discussion about this on the mailing list</a>. The result is:</p>\n\n<ul>\n<li>Build your own Set/Map abstraction on top of Set/Map, which would convert the objects to a primitive value according to your hashing function.</li>\n<li>Wait for <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:value_objects\">value objects coming in ES7</a>.</li>\n</ul>\n    "},{"t":"How does es6 module loading work","l":"http://stackoverflow.com/questions/24543074/how-does-es6-module-loading-work","q":"\n\n<p>I've been <a href=\"https://github.com/systemjs/systemjs\" rel=\"nofollow\">reading</a> <a href=\"https://github.com/systemjs/systemjs\" rel=\"nofollow\">about</a> <a href=\"https://github.com/ModuleLoader/es6-module-loader\" rel=\"nofollow\">es6 module loaders</a> and I just don't quite understand how it works and am hoping someone can enlighten me. </p>\n\n<p>In the practical workflows link above they have an example like this</p>\n\n<pre><code>System.import('app/app').then(function(app) {\n  // app is now the Module object with exports as getters\n});\n</code></pre>\n\n<p>No problem with that - I get it. But then I see stuff like this</p>\n\n<pre><code>var $ = require('jquery');\n</code></pre>\n\n<p>and get really confused. What happens if at the time of this call jquery has not yet been transferred to the browser? Does the thread just spin? Does the browser parse your script behind-the-scenes and reform it into a callback like RequireJs does? Is what it does configurable? Are there specific limitations?</p>\n\n<p>Can someone give me a rundown?</p>\n    ","a":"\n<p>The ES6 Module Loader will fetch the source, determine dependencies, and wait until those dependencies have loaded before executing the module. So by the time the require executes, the dependency is already sitting there waiting to be executed.</p>\n\n<p>When loading CommonJS through an ES6 module loader, we rely on statically parsing out the require statements from the source, and only executing the source once those requires have loaded.</p>\n\n<p>In this way we can support CommonJS in the browser loaded dynamically. Circular references are treated identically to the way they are handled in Node.</p>\n\n<p>The regular expressions parsing out the require are actually pretty reliable and quick, while taking into account comments and surrounding tokens. See <a href=\"https://github.com/systemjs/systemjs/blob/master/lib/extension-cjs.js#L10\" rel=\"nofollow\">https://github.com/systemjs/systemjs/blob/master/lib/extension-cjs.js#L10</a> for the one used by SystemJS.</p>\n\n<p>There is one remaining limitation with this approach and that is dynamic and conditional CommonJS requires like <code>if (condition) require('some' + 'name')</code> aren't detected properly. This is a necessary cost though to make CommonJS behave as a fully asynchronous module format in the browser.</p>\n    "},{"t":"How to enumerate es6 class methods [duplicate]","l":"http://stackoverflow.com/questions/31423573/how-to-enumerate-es6-class-methods","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/31054910/get-functions-of-a-class\" dir=\"ltr\">Get functions of a class</a>\n                <span class=\"question-originals-answer-count\">\n                    2 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>How can I enumerate methods of an ES6 class? similar to <code>Object.keys</code></p>\n\n<p>Here's an example:</p>\n\n<pre><code>class Callbacks {\n  method1() {\n  }\n\n  method2() {\n  }\n}\n\nconst callbacks = new Callbacks();\n\ncallbacks.enumerateMethods(function(method) {\n  // method1, method2 etc.\n});\n</code></pre>\n    ","a":"\n<p><code>Object.keys()</code> iterates only enumerable properties of the object. And ES6 methods are not. You could use something like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" rel=\"nofollow\"><code>getOwnPropertyNames()</code></a>.  Also methods are defined on prototype of your object so you'd need <code>Object.getPrototypeOf()</code> to get them. Working <a href=\"http://www.es6fiddle.net/ic4ga97x/\" rel=\"nofollow\">example</a>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(callbacks))) {\n    let method = callbacks[name];\n    // Supposedly you'd like to skip constructor\n    if (!(method instanceof Function) || method === Callbacks) continue;\n    console.log(method, name);\n}\n</code></pre>\n\n<p>Please notice that if you use Symbols as method keys you'd need to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\" rel=\"nofollow\"><code>getOwnPropertySymbols()</code></a> to iterate over them.</p>\n    "},{"t":"Javascript ES6 class extend without super","l":"http://stackoverflow.com/questions/31067368/javascript-es6-class-extend-without-super","q":"\n\n<p>is it possible to extend a class in ES6 without calling supermethod to invoke the parent class?</p>\n\n<p><strong><em>EDIT</em></strong> :::\n<strong>The question might be misleading. Is it the standard that we have to call super() or am I missing something?</strong></p>\n\n<hr>\n\n<p>Example</p>\n\n<pre><code>class Character {\n   constructor(){\n      console.log('invoke character');\n   }\n}\n\nclass Hero extends Character{\n  constructor(){\n      super(); // exception thrown here when not called\n      console.log('invoke hero');\n  }\n}\n\nvar hero = new Hero();\n</code></pre>\n\n<p>When I'm not calling <code>super()</code> on the derived class I'm getting a scope problem -&gt; <code>this is not defined</code></p>\n\n<p>I'm running this with iojs --harmony in v2.3.0</p>\n\n<p>I cannot find an explanation so far, so any hint are welcomed.</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>The rules for ES2015 (ES6) classes basically come down to:</p>\n\n<ol>\n<li>In a child class constructor, <code>this</code> cannot be used until <code>super</code> is called.</li>\n<li>ES6 class constructors MUST call <code>super</code> if they are subclasses.</li>\n</ol>\n\n<p>This comes down to two important sections of the ES2015 spec.</p>\n\n<p>Section <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-function-environment-records-getthisbinding\" rel=\"nofollow\">8.1.1.3.4</a> defines the logic to decide what <code>this</code> is in the function. The important part for classes is that it is possible for <code>this</code> be be in an <code>\"uninitialized\"</code> state, and when in this state, attempting to use <code>this</code> will throw an exception.</p>\n\n<p>Section <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" rel=\"nofollow\">9.2.2</a>, <code>[[Construct]]</code>, which defines the behavior of functions called via <code>new</code> or <code>super</code>. When calling a base class constructor, <code>this</code> is initialized at step #8 of <code>[[Construct]]</code>, but for all other cases, <code>this</code> is uninitialized. At the end of construction, <code>GetThisBinding</code> is called, so if <code>super</code> has not been called yet (thus initializing <code>this</code>), the final line of the constructor call will throw an exception.</p>\n    "},{"t":"What is the best general practice to timeout a function in promise","l":"http://stackoverflow.com/questions/30936824/what-is-the-best-general-practice-to-timeout-a-function-in-promise","q":"\n\n<p><strong>Promisify a function call with timeouts</strong></p>\n\n<p>I have seen many resources provide similar example of using <code>Promise.race</code> to timeout a function call with a given period of time. This looks a very good example of how <code>Promise.race</code> can be used in practice. The sample code is shown here below (I guess many people have already seen this approach for some time too):</p>\n\n<pre><code>function doWithinInterval(func, timeout){\n    var promiseTimeout = new Promise(function(fulfill, reject){\n       // Rejects as soon as the timeout kicks in\n       setTimeout(reject, timeout);\n    });\n    var promiseFunc = new Promise(function(fulfill, reject){\n        var result = func(); // Function which may take long to finish\n        // Fulfills when the given function finishes\n        fulfill(result);\n    });\n\n    return Promise.race([promiseTimeout, promiseFunc]);\n}\n</code></pre>\n\n<p>The simple approach above using <code>Promise.race</code> rejects the promise as soon as the timeout kicks in before <code>func</code> has completed. Otherwise, the project is fulfilled once the <code>func</code> function finishes before the timeout interval.</p>\n\n<p>This sounds good and not difficult to use.</p>\n\n<p><strong>However, is this the best practice to use timeout in Promise?</strong></p>\n\n<p>Surely, the approach above can be employed for the task where we want to set timeout against a function call using Promise. The operations still appear to be a good promise. However, is this considered a good practice of using timeout in a Promise? If not, what is the disadvantage of using this? </p>\n\n<p><strong><em>I've explored for alternative approaches, but couldn't find a native promise way to do</em></strong></p>\n\n<p>Instead, some external Promise libraries offer <code>timeout</code> functionality as follows:</p>\n\n<ul>\n<li><p><strong>Bluebird</strong> supplies <code>.timeout()</code> to handle promise timeout <a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#timeoutint-ms--string-message---promise\" rel=\"nofollow\">https://github.com/petkaantonov/bluebird/blob/master/API.md#timeoutint-ms--string-message---promise</a></p></li>\n<li><p><strong>WinJS</strong> supplies <code>.timeout()</code> also. <a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/br229729.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/windows/apps/br229729.aspx</a></p></li>\n<li><p><strong>Q</strong> also comes with <code>.timeout()</code>. <a href=\"https://github.com/kriskowal/q\" rel=\"nofollow\">https://github.com/kriskowal/q</a></p></li>\n</ul>\n\n<p>However, <code>Promise.timeout()</code> doesn't appear to be one of the standard ECMAScript 6 Promise. (Please correct me if I misunderstand) </p>\n\n<p><strong>What if consider only standard ECMAScript 6 Promise way?</strong></p>\n\n<p>We don't natively have <code>Promise.timeout</code> to use. Thus, is there any recommended way to handle timeout in Promise? What approach or technique is considered the best (or good) practice in general for this purpose?</p>\n    ","a":"\n<p>It depends on what you mean by <em>timeout</em>.</p>\n\n<p>If you expect the function to stop, then no.</p>\n\n<p>If you just want to stop waiting for it, then yes (quick to whip up in ES6):</p>\n\n<pre><code>var wait = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\nvar timeout = (p, ms) =&gt; Promise.race([p, wait(ms).then(() =&gt; {\n    throw new Error(\"Timeout after \" + ms + \" ms\");\n})]);\n</code></pre>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\n<div class=\"snippet-code snippet-currently-hidden\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var wait = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\nvar timeout = (p, ms) =&gt; Promise.race([p, wait(ms).then(() =&gt; {\n  throw new Error(\"Timeout after \" + ms + \" ms\");\n})]);\n\n// Example:\n\nvar log = msg =&gt; div.innerHTML += \"&lt;p&gt;\" + msg + \"&lt;/p&gt;\";\nvar failed = e =&gt; log(e.toString() + \", line \" + e.lineNumber);\n\nlog(\"Waiting 5 seconds...\");\ntimeout(wait(5000), 2000)\n.then(() =&gt; log(\"...Done.\"))\n.catch(failed);</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"div\"&gt;&lt;/div&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>If you want to <em>cancel</em> the operation (make it stop), then hopefully that operation comes with an API to cancel it, and you should use that, since an ES6 promise is not a control surface.</p>\n\n<p><a href=\"https://esdiscuss.org/topic/cancelable-promises\" rel=\"nofollow\">Cancelable promises</a> is a controversial topic in ES6, but some of the libraries mentioned do offer the concept.</p>\n    "},{"t":"Babelify ParseError on import module from node_modules","l":"http://stackoverflow.com/questions/30386317/babelify-parseerror-on-import-module-from-node-modules","q":"\n\n<p>I'm using ES6 with Babelify and CommonJS module formatter.\nAnd I using ES6 style module features with node's module system.</p>\n\n<p>So, I'm going to put in all my own modules in node_modules/libs folder.</p>\n\n<p>test.js in [ node_modules/libs ]</p>\n\n<pre><code>export default function() {\nconsole.log('Hello');\n};\n</code></pre>\n\n<p>main.js (will compile to bundle.js)</p>\n\n<pre><code>import test from 'libs/test';\n\ntest();\n</code></pre>\n\n<p>And I compiled the code to bundle.js with this command:</p>\n\n<pre><code>browserify -t babelify main.js -o bundle.js\n</code></pre>\n\n<p>But unfortunately, I have got some Error:</p>\n\n<pre><code>export default function() {\n^\n\nParseError: 'import' and 'export' may appear only with 'sourceType: module'\n</code></pre>\n\n<p>directory structure:</p>\n\n<pre><code>[test]\n  ├ node_modules\n  │  └ libs\n  │    └ test.js\n  └ main.js\n</code></pre>\n\n<p>But when modules not in node_modules:</p>\n\n<pre><code>[test]\n  ├ libs\n  │  └ test.js\n  └ main.js\n</code></pre>\n\n<p>It works fine.\nHow can I using ES6 style modules with babelify in node_modules?</p>\n    ","a":"\n<p>That is how Browserify transforms work, transforms only have an effect directly in the module that is being referenced.</p>\n\n<p>If you want a module in node_modules to have a transforms, you'd need to add a package.json to that module and add <code>babelify</code> as a transform for that module too.</p>\n\n<p>Having <code>libs</code> be a folder in node_modules is however probably a bad idea. Generally that folder would have true standalone modules in it. I'd generally say that if the folder can't be taken and reused elsewhere, then it shouldn't be in node_modules.</p>\n    "},{"t":"Binding to a component property in angular2","l":"http://stackoverflow.com/questions/29991078/binding-to-a-component-property-in-angular2","q":"\n\n<p>I'd like to reference a property on a component within A. that' component's constructor B. that component's template. The apis on this seem to be shifting a little bit, but i'd expect the following to work:</p>\n\n<pre><code>&lt;my-component [greeting]=\"hello\"&gt;&lt;/my-component&gt;\n</code></pre>\n\n<p><br></p>\n\n<pre><code>// my component.es6.js\n@Component({\n  selector: 'my-component',\n  properties: {\n   'greeting': 'greeting'\n  }\n})\n@View({\n  template: '{{greeting}} world!'\n})\nclass App {\n  constructor() {\n    console.log(this.properties) // just a guess\n  }\n}\n</code></pre>\n\n<p><strong><a href=\"http://plnkr.co/edit/247Hd2OhtzFRXN8sSIZQ?p=preview\" rel=\"nofollow\">Plunkr</a></strong></p>\n\n<p>What am I doing wrong?</p>\n    ","a":"\n<p>I was experimenting with Angular2 and came up against the same problem. \nHowever, I found the following to work with the current alpha version (2.0.0-alpha.21)</p>\n\n<pre><code>@Component({\n  selector: 'hello',\n  properties: {'name':'name'}\n})\n@View({\n  template:`&lt;h1&gt;Hello {{_name}}&lt;/h1&gt;`\n})\nclass Hello {\n  _name: string;\n\n  constructor() { \n    console.log(this);\n  };\n\n  set name(name){\n    this._name = name;\n  }\n}\n\n@Component({\n  selector: 'app',\n})\n@View({\n  template:\n  `\n    &lt;div&gt;\n      &lt;hello name=\"Matt\"&gt;&lt;/hello&gt;\n    &lt;/div&gt;\n  `,\n  directives: [Hello]\n})\nclass Application {\n  constructor() { };\n}\n\nbootstrap(Application);\n</code></pre>\n\n<p>It seems that properties on the Class that is passed to <code>bootstrap</code> are ignored. Unsure if this is intended or a bug. </p>\n\n<p>Edit: I've just built Angular2 from source and tried the <code>@Attribute</code> annotation, it works as per the docs (but only on the nested component).</p>\n\n<pre><code>constructor(@Attribute('name') name:string) { \n    console.log(name);\n};\n</code></pre>\n\n<p>Prints 'Matt' to the console.</p>\n    "},{"t":"How to test harmony / ES6 / ECMAScript 6 JavaScript?","l":"http://stackoverflow.com/questions/26304517/how-to-test-harmony-es6-ecmascript-6-javascript","q":"\n\n<p>As per the title, I'm trying to test some AMD modules written in ES6 JS, running from <em>nodejs</em>. </p>\n\n<p>I tried first with <a href=\"http://theintern.io/\" rel=\"nofollow\"><em>Intern</em></a>: even after enabling <code>--harmony</code> in nodejs, I ended up facing Intern's dependency chain, where I was not able to enable Harmony in e.g. <em>Istanbul</em>, <em>esprima</em> and others (I opened an <a href=\"https://github.com/theintern/intern/issues/282\" rel=\"nofollow\">issue</a> for that).</p>\n\n<p>I then moved onto <a href=\"http://visionmedia.github.io/mocha/\" rel=\"nofollow\"><em>mocha</em></a>, and here I'm stuck ... <em>strangely</em>. I enabled Harmony both for nodejs and mocha itself, here's the <code>package.json</code> test script:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>\"test\": \"node --harmony node_modules\\\\mocha\\\\bin\\\\mocha tests --harmony --recursive\"\n</code></pre>\n\n<p>that I run from command prompt as <code>npm test my_test_folder</code>. Still, some ES6 constructs (like <code>const</code>) pass ok, but then it chokes on destructuring assignment. Here are the first output lines:</p>\n\n<pre><code>const { log, dir } = require('../consoleLogger.js');\n      ^\nSyntaxError: Unexpected token {\n    at Module._compile (module.js:439:25)\n    at Object.Module._extensions..js (module.js:474:10)\n    [...continues...]\n</code></pre>\n\n<p>I've also checked this <a href=\"http://stackoverflow.com/questions/26177776/how-can-i-write-and-test-ecmascript-6-es6-code-now\">SO thread</a> and heard about transpilers, <strike>but I don't really know if they could work</strike> and I'm now trying to make transpilers work in this case.</p>\n\n<p>Any idea on how to solve this, without resorting to change all ES6 bits spread in code? TA.</p>\n    ","a":"\n<p>V8 does not implement destructuring yet, so it won't be available in node for a while. Block scoping (including const) is mostly implemented, but be aware that a pre-ES6 version of const was always available, so you might want to double check what you are actually observing -- you could try 'let' declarations for less ambiguity.</p>\n    "},{"t":"Garbage-collected cache via Javascript WeakMaps","l":"http://stackoverflow.com/questions/25567578/garbage-collected-cache-via-javascript-weakmaps","q":"\n\n<p>I want to cache large objects in JS. These objects are retrieved by key, and it makes sense to cache them. But they won't fit in memory all at once, so I want them to be garbage collected if needed - the GC obviously knows better.</p>\n\n<p>It is pretty trivial to make such a cache using WeakReference or WeakValueDictionary found in other languages, but in ES6 we have WeakMap instead, where <em>keys</em> are weak.</p>\n\n<p>So, is it possible to make something like a <code>WeakReference</code> or make garbage-collected caches from <code>WeakMap</code>?</p>\n    ","a":"\n<blockquote>\n  <p>is it possible to make WeakReference from WeakMap or make garbage-collected cache from WeakMap ?</p>\n</blockquote>\n\n<p>AFAIK the answer is \"no\" to both questions.</p>\n    "},{"t":"ES6 export all values from object","l":"http://stackoverflow.com/questions/29844074/es6-export-all-values-from-object","q":"\n\n<p>Say I have a module (<code>./my-module.js</code>) that has an object which should be its return value:</p>\n\n<pre><code>let values = { a: 1, b: 2, c: 3 }\n\n// \"export values\" results in SyntaxError: Unexpected token\n</code></pre>\n\n<p>So I can import them like:</p>\n\n<pre><code>import {a} from './my-module'           // a === 1\nimport * as myModule from './my-module' // myModule.a === 1\n</code></pre>\n\n<p>The only way I found is by hard coding the exports:</p>\n\n<pre><code>export let a = values.a\nexport let b = values.b\nexport let c = values.c\n// or:\nexport let {a, b, c} = values\n</code></pre>\n\n<p>Which is not dynamic.</p>\n\n<p>Is it possible to export all values from an object?</p>\n    ","a":"\n<p>Does not seem so. Quote from <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\" rel=\"nofollow\">ECMAScript 6 modules: the final syntax</a>:</p>\n\n<blockquote>\n  <p>You may be wondering – why do we need named exports if we could simply default-export objects (like CommonJS)? The answer is that you can’t enforce a static structure via objects and lose all of the associated advantages (described in the next section).</p>\n</blockquote>\n    "},{"t":"Using jspm with TypeScript","l":"http://stackoverflow.com/questions/28339100/using-jspm-with-typescript","q":"\n\n<p>Is it possible to combine <a href=\"http://jspm.io/\" rel=\"nofollow\">jspm</a> with TypeScript and the TypeScript module system?</p>\n\n<p>I couldn't find documentation or samples of this.</p>\n    ","a":"\n<h1>Update - v1.5</h1>\n\n<p>SystemJS has been added as a module kind for TypeScript, so you should be able to use SystemJS out of the box and compile with the module flag:</p>\n\n<pre><code>tsc --module SystemJS app.ts\n</code></pre>\n\n<p>This was added alongside the ES6 module importing syntax, so you should be able to use that style and have it compiled to what you need.</p>\n\n<pre><code>import * as $ from \"jquery\";\n</code></pre>\n\n<h1>Original Answer</h1>\n\n<p>If you are using the SystemJS syntax, you can declare the parts you need like this:</p>\n\n<p>systemjs.d.ts</p>\n\n<pre><code>interface System {\n    then: (cb: Function) =&gt; void;\n}\n\ninterface SystemStatic {\n    import: (name: string) =&gt; System;\n}\n\ndeclare var System: SystemStatic;\n\nexport = System;\n</code></pre>\n\n<p>You should then be able to use it like this:</p>\n\n<pre><code>/// &lt;reference path=\"jquery.d.ts\" /&gt;\n\nimport System = require('systemjs');\n\nSystem.import('jquery').then(($: JQueryStatic) =&gt; {\n    $('#id').html('Hello world');\n});\n</code></pre>\n    "},{"t":"How do symbols work?","l":"http://stackoverflow.com/questions/17536134/how-do-symbols-work","q":"\n\n<p>Node.JS v0.11.3 claims to have support for ECMAScript 6 symbols with the <code>--harmony_symbols</code> flag (see <a href=\"https://groups.google.com/forum/#!topic/v8-dev/DE1syUbbDw8\" rel=\"nofollow\">here</a>). The latest draft <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-8.1.6\" rel=\"nofollow\">says</a></p>\n\n<blockquote>\n  <p>Properties are identified using key values. A key value is either an ECMAScript String value or a Symbol value.</p>\n</blockquote>\n\n<p>I have tried the following example</p>\n\n<pre><code>var mySymbol = new Symbol('Test symbol');\nconsole.log(mySymbol.name); // prints 'Test symbol', as expected\n\nvar a = {};\na[mySymbol] = 'Hello!';\n</code></pre>\n\n<p>but I get an error on the last line</p>\n\n<blockquote>\n  <p>TypeError: Conversion from symbol to string</p>\n</blockquote>\n\n<p>How do symbols work? Is my example wrong, or does Node.JS actually <em>not</em> support symbols?</p>\n    ","a":"\n<p>You should try without <code>new</code>:</p>\n\n<pre><code>var mySymbol = Symbol('Test symbol');\nconsole.log(mySymbol.name); // prints 'Test symbol', as expected\n\nvar a = {};\na[mySymbol] = 'Hello!';\n</code></pre>\n    "},{"t":"Observing changes to ES6 Maps and Sets","l":"http://stackoverflow.com/questions/29909823/observing-changes-to-es6-maps-and-sets","q":"\n\n<p>Is there any way to observe additions to and removals from ES6 Maps and Sets? Object.observe doesn't work because it is only applies to direct properties of the observed object. Hypothetically the <code>size</code> property could be observed, but no indication would be provided of exactly what has changed. Another idea would be to replace the object's <code>set</code> and <code>get</code> functions with proxified versions. Is there a better way? If not, I'm surprised that nobody thought of this when the proposals were being written for ES6.</p>\n    ","a":"\n<p>No, there is no way to do this with a vanilla Map/Set. In general observation of object properties alone is controversial (that is why <code>Object.observe</code> is only a proposal, and not an accepted part of the spec). Observing private state, like the internals of a Map or Set (or Date or Promise, for that matter), is definitely not on the table.</p>\n\n<p>Note also that since <code>size</code> is a getter, not a data property, <code>Object.observe</code> will not notify you of changes to it.</p>\n\n<p>As you mention, you can achieve such \"observation\" via collaboration between the mutator and the observer. You could either do this with a normal Map/Set plus a side-channel (e.g. a function returning a <code>{ Map, EventEmitter }</code> object), or via a subclass tailored for the purpose, or a specific instance created for that purpose.</p>\n    "},{"t":"Why isn't my property being updated inside the “Scope”?","l":"http://stackoverflow.com/questions/29882101/why-isnt-my-property-being-updated-inside-the-scope","q":"\n\n<p>I am starting to venture into AngularJS2 for a hobby project and have run into something I don't know how to debug or search for yet.</p>\n\n<p>I started out using the <a href=\"https://github.com/pkozlowski-opensource/ng2-play\" rel=\"nofollow\">ng2-play</a> repository.</p>\n\n<p>I have two simple classes (this code is drastically simplified for this post):</p>\n\n<p>words-ui.js</p>\n\n<pre><code>export class WordsUI {\n  constructor() {\n    new Words(data =&gt; this.words = data);\n  }\n}\n</code></pre>\n\n<p>words-ui.html</p>\n\n<pre><code>&lt;ol *if=\"words\" reversed&gt;\n  &lt;li *for=\"#entry of words\" title=\"Word for week starting {{entry.date}}\"&gt;{{entry.word}}&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>words-data.js</p>\n\n<pre><code>export class Words {\n  constructor(cb) {\n    firebase\n      .child('words')\n      .on('value', data =&gt; cb(data.val()));\n  }\n}\n</code></pre>\n\n<p>The only thing that isn't working correctly yet is the \"scope\" recognizing that the value of the property <code>words</code> has been updated. This means that when the UI loads nothing is shown in the list of words. If I then add a word to the list through the UI all words, plus the added word, show up. Or, if I put in a setTimeout to \"reload\" the <code>words</code> property with it's own value they show up.</p>\n\n<p>I imagine that I am not using the right pattern for this but where would I find out what pattern would be better for this situation. I am a little lost in the new ES6 module system as well as: TypeScript and AngularJS 2.</p>\n\n<p>I think I have provided the relevant portions of code to illustrate the problem but if not please let me know and I can work on putting together something better.</p>\n\n<p>UPDATE 1: Added view file. The change to <code>words</code> on the \"context\" of <code>WordsUI</code> instance aren't reflected.</p>\n    ","a":"\n<p>So I found an answer - or work around, depending on your point of view - to this situation a few hours after running into it originally. The final repository for this hobby project is on <a href=\"https://github.com/kalisjoshua/weekly-word\" rel=\"nofollow\">GitHub Weekly Word</a>.</p>\n\n<h2>The Problem</h2>\n\n<p>I was essentially attempting to set a property on the WordsUI instance from within the callback passed to the Word constructor. I think somehow that was not being picked up but the \"scope watcher\" <code>zones.js</code> (I think).</p>\n\n<h2>The Resolution</h2>\n\n<p>I moved the reading of data, from the Word instance, into a subsequent call from the instance; rather than trying to be tricky and keeping that in the callback passed to the constructor.</p>\n\n<p>I don't think that this approach - the one I ended up using - is inferior necessarily, nor was the former superior really in any way.</p>\n\n<p>words-ui.js</p>\n\n<pre><code>export class WordsUI {\n  constructor() {\n    this words = new Words();\n    this.update();\n  }\n\n  update() {\n    this.words\n        .read(words =&gt; {\n            this.wordList = words;\n        })\n  }\n}\n</code></pre>\n\n<p>words-data.js</p>\n\n<pre><code>export class Words {\n  constructor() {\n    firebase = new Firebase('http://weekly-word.firebase.com').child('words');\n  }\n\n  read(cb) {\n    firebase\n        .on('value', data =&gt; {\n            cb(data);\n        })\n  }\n}\n</code></pre>\n    "},{"t":"TypeScript class: statics and inheritance","l":"http://stackoverflow.com/questions/27765302/typescript-class-statics-and-inheritance","q":"\n\n<p>Questions:</p>\n\n<ol>\n<li>Is the behavior I'm observing the expected behavior for TypeScript?</li>\n<li>Is the behavior I'm observing the expected behavior for ECMAScript 6?</li>\n<li>Is there an easy way to walk back through the inheritance hierarchy to process the 'myStatic' array for each level? How do I know when to stop?</li>\n</ol>\n\n<p>Description: When using TypeScript, there appears to be some interesting behavior with derived classes and static properties.</p>\n\n<p><a href=\"http://www.typescriptlang.org/Playground#src=class%20MyBase%20%7B%0A%09static%20myStatic%20%3D%20%5B%5D%3B%0A%7D%0A%0Aclass%20MyDerived%20extends%20MyBase%20%7B%7D%0A%0AMyBase.myStatic%20%3D%20%5B'one'%2C%20'two'%2C%20'three'%5D%0A%0Aclass%20MyDerived2%20extends%20MyBase%20%7B%7D%0A%0Adocument.body.innerHTML%20%2B%3D%20%22%3Cb%3EMyDerived.myStatic%3A%3C%2Fb%3E%26nbsp%3B%22%20%2B%20JSON.stringify(MyDerived.myStatic)%20%2B%20%22%3Cbr%2F%3E%22%3B%0Adocument.body.innerHTML%20%2B%3D%20%22%3Cb%3EMyDerived2.myStatic%3A%3C%2Fb%3E%26nbsp%3B%22%20%2B%20JSON.stringify(MyDerived2.myStatic)%20%2B%20%22%3Cbr%2F%3E%22%3B\" rel=\"nofollow\">TypeScript Example</a></p>\n\n<pre><code>class MyBase {\n    static myStatic = [];\n}\n\nclass MyDerived extends MyBase {}\n\nMyBase.myStatic = ['one', 'two', 'three']\n\nclass MyDerived2 extends MyBase {}\n\ndocument.body.innerHTML += \"&lt;b&gt;MyDerived.myStatic:&lt;/b&gt;&amp;nbsp;\" + JSON.stringify(MyDerived.myStatic) + \"&lt;br/&gt;\";\ndocument.body.innerHTML += \"&lt;b&gt;MyDerived2.myStatic:&lt;/b&gt;&amp;nbsp;\" + JSON.stringify(MyDerived2.myStatic) + \"&lt;br/&gt;\";\n</code></pre>\n\n<p>This is the result:</p>\n\n<pre><code>MyDerived.myStatic: []\nMyDerived2.myStatic: [\"one\",\"two\",\"three\"]\n</code></pre>\n\n<p>Edit: Adding example that illustrates different behavior between TypeScript and ECMA Script 6.  Note: ECMA Script doesn't support static properties, so these examples use static methods.</p>\n\n<p>TypeScript Code:</p>\n\n<pre><code>class MyBase {\n  static myStatic() { return []; }\n}\n\nclass MyDerived extends MyBase {}\n\nMyBase.myStatic = () =&gt; { return ['one', 'two', 'three']; }\n\nclass MyDerived2 extends MyBase {}\n\ndocument.body.innerHTML += \"&lt;b&gt;MyDerived.myStatic:&lt;/b&gt;&amp;nbsp;\" + JSON.stringify(MyDerived.myStatic()) + \"&lt;br/&gt;\";\ndocument.body.innerHTML += \"&lt;b&gt;MyDerived2.myStatic:&lt;/b&gt;&amp;nbsp;\" + JSON.stringify(MyDerived2.myStatic()) + \"&lt;br/&gt;\";\n</code></pre>\n\n<p>TypeScript Results:</p>\n\n<pre><code>MyDerived.myStatic: []\nMyDerived2.myStatic: [\"one\",\"two\",\"three\"]\n</code></pre>\n\n<p>ECMA Script 6 Code: <a href=\"http://www.es6fiddle.net/i4jn7xzj/\" rel=\"nofollow\">ES6 Fiddle</a></p>\n\n<pre><code>class MyBase {\n  static myStatic() { return []; }\n}\n\nclass MyDerived extends MyBase {}\n\nMyBase.myStatic = () =&gt; { return ['one', 'two', 'three']; };\n\nclass MyDerived2 extends MyBase {}\n\nconsole.log(\"MyDerived.myStatic: \" + JSON.stringify(MyDerived.myStatic()));\nconsole.log(\"MyDerived2.myStatic: \" + JSON.stringify(MyDerived2.myStatic()));\n</code></pre>\n\n<p>ECMA Script 6 Results</p>\n\n<pre><code>MyDerived.myStatic: [\"one\",\"two\",\"three\"]\nMyDerived2.myStatic: [\"one\",\"two\",\"three\"]\n</code></pre>\n    ","a":"\n<blockquote>\n  <p>Is the behavior I'm observing the expected behavior for TypeScript?\n  Is the behavior I'm observing the expected behavior for ECMA Script 6?</p>\n</blockquote>\n\n<p>Yes and yes. Classes allow <em>runtime modification</em> and processed in order of definition. <code>inherit</code> only kicks in at the point of definition so depends upon the properties of the base <em>at that point</em>. </p>\n    "},{"t":"Future proofing Angular apps with ES6 features","l":"http://stackoverflow.com/questions/26395757/future-proofing-angular-apps-with-es6-features","q":"\n\n<p>What is the recommended (if there is one) future-proof way to write controllers, services and directives in ES6 (using Traceur) so that the most of same code can be used with AngularJS 2.0. I realize that AngularJS 2.0 is still on the drawing board but if I were to start a new app today what style or conventions do I follow so migrating to 2.0 will hopefully be less painful. </p>\n\n<p>Declaring a class and then passing a reference to that class into the <code>controller</code> or <code>service</code> is one point i see:</p>\n\n<pre><code>var app = angular.module('myApp', []);\n\nclass MainCtrl {\n   ....\n}\n\nclass MyService {\n   ....\n}\n\napp.controller('MainCtrl', MainCtrl);\napp.service('MyService', MyService);\n</code></pre>\n\n<p>Should the <code>MyService</code> class be moved to a separate file so that potentially in the future I could just <code>export</code> it and have it available to be injected?</p>\n\n<p>What are some other things to keep in mind as I work on a new project using AngularJS (&lt;= 1.3.x) and ES6?</p>\n\n<p><strong>Update</strong>\nAfter some digging around I wrote a series of blog posts talking about my findings on my blog</p>\n    ","a":"\n<p>The angular team at ngEurope confirmed today that the $controllers, $scopes, $services and jqLite of 1.x will cease to exist in Angular 2.0. There will also be a brand new router, which they intend to backport to 1.3 in the coming months. </p>\n\n<p>To prepare for migration they suggested just following the <a href=\"https://github.com/johnpapa/angularjs-styleguide\" rel=\"nofollow\">best practices/styles/conventions</a> that have evolved in the community so far, and when 2.0 is ready (sometime next year), they'll work out the best way to migrate from there.</p>\n\n<p>Also, they said that 1.3 will be fully supported for at least a year and a half after the release of 2.0.</p>\n    "},{"t":"Javascript console.log does not show derived class name - inheritance - classes","l":"http://stackoverflow.com/questions/31784528/javascript-console-log-does-not-show-derived-class-name-inheritance-classes","q":"\n\n<p>I'm playing with ECMAScript6 classes.</p>\n\n<p>I still don't understand why the following code :</p>\n\n<pre><code>\"use strict\";\n\nclass A {}\nclass B extends A {}\n\nlet b = new B();\nconsole.log(b);\n</code></pre>\n\n<p>Displays :</p>\n\n<p><em>A { }</em></p>\n\n<p>Instead of :</p>\n\n<p><em>B { }</em></p>\n\n<p>Live Example:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\n<div class=\"snippet-code snippet-currently-hidden\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function () {\n    \"use strict\";\n\n    class A {}\n    class B extends A {\n        foo() {\n        }\n    }\n\n    let b = new B();\n    console.log(b);\n})();</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>Open the console. Works only on very up-to-date browsers (such as Chrome 43+).</code></pre>\n</div>\n</div>\n<p></p>\n\n<hr>\n\n<p>How can I have the expected logical output <em>B { }</em> on console.log ?</p>\n\n<p>May I need to specify my class name to be \"<em>B</em>\" ? Is there such an option to pass, or an attribute or a function to define ?</p>\n    ","a":"\n<p>You haven't said what browser you're using, but I figure it has to be Chrome, given the style of the output you showed and that it runs at all. (If I run that in IE11, I get <code>[object Object] {}</code> instead. If I run it in Firefox, I get an error&nbsp;— because Firefox <a href=\"https://kangax.github.io/compat-table/es6/#class\" rel=\"nofollow\">doesn't support <code>class</code> yet</a>.)</p>\n\n<p>I can't think of any reason other than a bug in Chrome. Support for <code>class</code> is <strong>very</strong> new to Chrome, it could easily be that the devtools just aren't quite handling it correctly yet. I didn't find a bug report on <a href=\"http://crbug.com\" rel=\"nofollow\">http://crbug.com</a> in a quick search, you might want to file one.</p>\n\n<p>It really should be showing <code>B</code> with your code, not <code>A</code>. It <em>does</em> with the equivalent old-fashioned way to do it:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function() {\n  \"use strict\";\n\n  function A() {}\n\n  function B() {\n    A.call(this);\n  }\n  B.prototype = Object.create(A.prototype);\n  B.prototype.constructor = B;\n\n  var b = new B();\n  console.log(b);\n})();</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>Open the console.</code></pre>\n</div>\n</div>\n<p></p>\n    "},{"t":"Does ember-cli support object literal shorthands?","l":"http://stackoverflow.com/questions/30057532/does-ember-cli-support-object-literal-shorthands","q":"\n\n<p><strong>UPDATE 2</strong></p>\n\n<p>I've filed an issue at the ember-cli repo describing simple steps to reproduce the issue: <a href=\"https://github.com/ember-cli/ember-cli/issues/4015\" rel=\"nofollow\">https://github.com/ember-cli/ember-cli/issues/4015</a>.</p>\n\n<hr>\n\n<p><strong>UPDATE</strong> </p>\n\n<p>This is related to using in-repo-addons. The ember compiler does not choke when using this syntax in your regular app. I will be filing a bug report at <a href=\"http://github.com/ember-cli/ember-cli\" rel=\"nofollow\">http://github.com/ember-cli/ember-cli</a> shortly with steps to reproduce and will link back to the issue here when it is ready.</p>\n\n<hr>\n\n<p>I caught the bug for es6 and started using the object literal method shorthand:</p>\n\n<pre><code>import Ember from 'ember';\n\nexport default Ember.Component.extend({\n    didInsertElement() {\n        // stuff I want to do once we're in the DOM\n    }\n})\n</code></pre>\n\n<p>but it chokes when running <code>ember build --environment production</code>. Thoughts?</p>\n\n<pre><code>Build failed.\nUnexpected token punc «(», expected punc «:»\n</code></pre>\n    ","a":"\n<p>Ember-cli uses babel which does support object literal shorthands.</p>\n\n<p>See: </p>\n\n<p><a href=\"https://babeljs.io/docs/learn-es6/\" rel=\"nofollow\">https://babeljs.io/docs/learn-es6/</a></p>\n    "},{"t":"How do I require() from the console using webpack?","l":"http://stackoverflow.com/questions/29223071/how-do-i-require-from-the-console-using-webpack","q":"\n\n<p>How do I require() / import modules from the console? For example, say I've installed the ImmutableJS npm, I'd like to be able to use functions from the module while I'm working in the console.</p>\n    ","a":"\n<p>Including this in a module will allow <code>require([modules], function)</code> to be used from a browser</p>\n\n<pre><code>window['require'] = function(modules, callback) {\n  var modulesToRequire = modules.forEach(function(module) {\n    switch(module) {\n      case 'immutable': return require('immutable');\n      case 'jquery': return require('jquery');\n    }\n  }\n  callback.apply(this, modulesToRequire);\n}\n</code></pre>\n\n<p>Example Usage:</p>\n\n<pre><code>require(['jquery', 'immutable'], function($, immutable) {\n  // immutable and $ are defined here\n});\n</code></pre>\n\n<p><strong>Note:</strong> Each switch-statement option should either be something this module already requires, or provided by ProvidePlugin</p>\n\n<hr>\n\n<h3>Sources:</h3>\n\n<p>Based on <strong><a href=\"http://stackoverflow.com/a/24543070\">this answer</a></strong>, which can be used to add an entire folder.</p>\n\n<p>Alternative method from <strong><a href=\"https://github.com/webpack/docs/wiki/webpack-for-browserify-users#external-requires\" rel=\"nofollow\">Webpack Docs</a></strong> - which allows something like <code>require.yourModule.function()</code></p>\n    "},{"t":"Importing anuglar2/forms causing “Cannot read property 'annotations' of undefined”","l":"http://stackoverflow.com/questions/29215464/importing-anuglar2-forms-causing-cannot-read-property-annotations-of-undefine","q":"\n\n<p>I'm trying to create simple form as described in <a href=\"http://angularjs.blogspot.no/2015/03/forms-in-angular-2.html\" rel=\"nofollow\">http://angularjs.blogspot.no/2015/03/forms-in-angular-2.html</a>, but when I add </p>\n\n<p><code>import {forms, required} from 'angular2/forms';</code></p>\n\n<p>in crashes with </p>\n\n<pre><code>TypeError: Cannot read property 'annotations' of undefined\n\nTypeError: Cannot read property 'annotations' of undefined\n    at ReflectionCapabilities.System.register.execute.$__export.annotations (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/reflection/reflection_capabilities.es6!eval:81:40)\n    at Reflector.System.register.execute.$__export.annotations (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/reflection/reflector.es6!eval:81:50)\n    at DirectiveMetadataReader.System.register.execute.$__export.read (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/directive_metadata_reader.es6!eval:31:41)\n    at eval (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/compiler.es6!eval:127:35)\n    at Array.map (native)\n    at Function.System.register.execute.$__export.map (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/facade/collection.es6!eval:172:26)\n    at Compiler.System.register.execute.$__export.createSteps (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/compiler.es6!eval:126:43)\n    at Compiler.System.register.execute.$__export._compileTemplate (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/compiler.es6!eval:164:53)\n    at eval (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/compiler.es6!eval:154:29)\n    at Zone.run (http://localhost:9090/node_modules/zone.js/zone.js:87:19)\n\n-----async gap-----\nError\n    at Function.System.register.execute.$__export.then (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/facade/async.es6!eval:35:28)\n    at Compiler.System.register.execute.$__export._compile (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/compiler.es6!eval:153:42)\n    at Compiler.System.register.execute.$__export.compile (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/compiler/compiler.es6!eval:134:34)\n    at eval (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/application.es6!eval:73:23)\n    at Function.System.register.execute.$__export.apply (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/facade/lang.es6!eval:317:23)\n\n-----async gap-----\nError\n    at _AsyncInjectorStrategy.System.register.execute._AsyncInjectorStrategy.instantiate (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/di/injector.es6!eval:297:17)\n    at Injector.System.register.execute.$__export._getByKey (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/di/injector.es6!eval:138:33)\n    at Injector.System.register.execute.$__export.asyncGet (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/di/injector.es6!eval:112:25)\n    at eval (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/application.es6!eval:113:39)\n\n-----async gap-----\nError\n    at VmTurnZone.System.register.execute.$__export._createInnerZone (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/zone/vm_turn_zone.es6!eval:61:45)\n    at new VmTurnZone (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/zone/vm_turn_zone.es6!eval:29:34)\n    at _createVmZone (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/application.es6!eval:101:16)\n    at bootstrap (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/application.es6!eval:110:16)\n    at y.main (http://localhost:9090/app.js!eval:10:12)\n    at http://localhost:9090/?:42:21\n\n-----async gap-----\nError\n    at VmTurnZone.System.register.execute.$__export._createInnerZone (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/zone/vm_turn_zone.es6!eval:61:25)\n    at new VmTurnZone (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/zone/vm_turn_zone.es6!eval:29:34)\n    at _createVmZone (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/application.es6!eval:101:16)\n    at bootstrap (http://localhost:9090/node_modules/angular/dist/js/prod/es6/angular2/src/core/application.es6!eval:110:16)\n    at y.main (http://localhost:9090/app.js!eval:10:12)\n    at http://localhost:9090/?:42:21\n</code></pre>\n\n<p>Can't understand what that error message means, and I also can't find where is that forms directive defined. </p>\n\n<p>UPDATE: the 'undefined' is actually a 'forms' directive which seems to be really missing in angular2/modules/angular2/src/forms. Then DirectiveMetadataReader passes the 'undefined' further to reflector which finally results in exception. Would be nice to have a check in Template.</p>\n    ","a":"\n<p>Forms where added somewhere in beginning of May.\nCheckout this <a href=\"https://github.com/angular/angular/blob/master/modules/examples/src/model_driven_forms/index.ts\" rel=\"nofollow\">example</a> or a bit older <a href=\"https://www.youtube.com/watch?v=fRJIJU-K6o8\" rel=\"nofollow\">example</a></p>\n    "},{"t":"Angular.js DI with (ES6) classes and inheritance","l":"http://stackoverflow.com/questions/29012830/angular-js-di-with-es6-classes-and-inheritance","q":"\n\n<p>Background, current implementation of classes/modules in our app is common.js and CoffeeScript classes. I'm desperately looking for a solution to work with ES6 or TypeScript, but the problem remains.</p>\n\n<p>How to do DI with class inheritance using Angular-1.x?</p>\n\n<p>Given the code:</p>\n\n<pre><code>// SuperService.js\nclass SuperService {\n  constructor($http, $q, $etc) {\n    // Implementation is not important ...  \n  }   \n}\nexport { SubService }\n\n// SubService.js\nimport { SuperService } from './SuperService';\nclass SubService extends SuperService {\n  constructor($more, $di, $things, $here) {\n    // Implementation is not important ... \n    // // // // // // // // // // \n    // Problem exists here ... //\n    // // // // // // // // // //\n    super($we, $need, $all, $the, $super, \\\n          $class, $di, $things, $every, $time, $we, \\\n          $inherit, $from, $it)\n  }\n}\nexport { SubService }\n</code></pre>\n\n<p>Must one, in the <code>SubService</code> here redefine all the parent DI requirements in order to successfully call <code>super()</code>?</p>\n\n<p>We're presently doing something akin to the following:</p>\n\n<pre><code>// CoffeeScript                              // Javascript\napp.factory \"subService\", (Service) -&gt;       app.factory(\"subService\", function(Service) {\n  SubService = () -&gt;                           var SubService;\n    Service.call(@)                            SubService = function() {\n    @                                            Service.call(this);\n                                                 return this;\n  # Overwrite some stuff on the \"Service\"      };\n  Service::basepath = \"/environments\"          Service.prototype.basepath = \"/environments\";\n  Service::model = Environment                 Service.prototype.model = Environment;\n                                               return new SubService();\n  new SubService()                           });\n</code></pre>\n\n<p>Which is also less than ideal, aside from being ugly.</p>\n    ","a":"\n<p><em>it's not ES6 (it's ES7), but it just might float your boat</em></p>\n\n<p>I would look into <a href=\"https://github.com/MikeRyan52/angular-decorators\" rel=\"nofollow\">angular-decorators</a> by <a href=\"https://github.com/MikeRyan52\" rel=\"nofollow\">MikeRyan52</a>. </p>\n\n<p>He's put together an <code>@inject</code> decorator that works as follows: </p>\n\n<pre><code>@inject('$http', '$rootScope')\nclass SomeClass {\n  constructor($http, $rootScope) {\n\n  }\n}\n\n@inject('$q')\nclass SubClass extends SomeClass {\n  constructor($q, ...parentDependencies) { /** parent dependencies caught with a rest parameter **/\n    super(...parentDependencies);\n  }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/MikeRyan52/angular-decorators/blob/master/src/decorators/inject.js\" rel=\"nofollow\">the implementation of @inject</a></p>\n    "},{"t":"Creating a module in Browserify/6to5ify which can be consumed by SystemJS","l":"http://stackoverflow.com/questions/28334020/creating-a-module-in-browserify-6to5ify-which-can-be-consumed-by-systemjs","q":"\n\n<p>I have four ES6 modules and one module that exposes data from the other four modules like this:</p>\n\n<pre><code>export { Board } from './board';\nexport { Card } from './card';\nexport { Game } from './game';\nexport { Player } from './player';\n</code></pre>\n\n<p>My goal is to have a single JavaScript module file that I can consume via the systemjs api:</p>\n\n<pre><code>import { Card } from 'game';\n</code></pre>\n\n<p>It seems the best way to recursively compute and concatenate dependencies is through browserify, and the best way to compile to ES5 from ES6 is 6to5. So, I looked to the 6to5ify node module. I copied and pasted the code from the <a href=\"https://github.com/6to5/6to5ify\" rel=\"nofollow\">example</a>: </p>\n\n<pre><code>var fs = require(\"fs\"),\n    browserify = require(\"browserify\"),\n    to5ify = require(\"6to5ify\");\n\nbrowserify({ debug: false })\n  .transform(to5ify)\n  .require(\"./src/main.js\", { entry: true })\n  .bundle()\n  .pipe(fs.createWriteStream(\"./dist/game.js\"));\n</code></pre>\n\n<p>Finally, I load game.js into another ES6 web project. However, At this point I get errors, and the systemjs module loader starts looking for the dependencies of the game.js module as if they were local dependencies:</p>\n\n<blockquote>\n  <p>GET <a href=\"http://localhost:9000/client/board.js\" rel=\"nofollow\">http://localhost:9000/client/board.js</a> 404 (Not Found)\n  es6-module-loader.src.js:2510</p>\n  \n  <p>GET <a href=\"http://localhost:9000/client/card.js\" rel=\"nofollow\">http://localhost:9000/client/card.js</a> 404 (Not Found)\n  es6-module-loader.src.js:2510</p>\n  \n  <p>GET <a href=\"http://localhost:9000/client/game.js\" rel=\"nofollow\">http://localhost:9000/client/game.js</a> 404 (Not Found)\n  es6-module-loader.src.js:2510</p>\n  \n  <p>GET <a href=\"http://localhost:9000/client/player.js\" rel=\"nofollow\">http://localhost:9000/client/player.js</a> 404 (Not Found)\n  es6-module-loader.src.js:2510</p>\n</blockquote>\n\n<p>However, the output of my build file includes the modules above, and it can be found <a href=\"https://github.com/davismj/kyu-core/blob/master/dist/kyu-core.js\" rel=\"nofollow\">here</a>.</p>\n\n<p>Since the problem could be with browserify, with 6to5, with the way systemjs loads modules, or the way it parses and reads the contents of the built file, I'm not sure where to look or who to ask.</p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"How can I compile ES6 code to ES5 for the browser?","l":"http://stackoverflow.com/questions/23718505/how-can-i-compile-es6-code-to-es5-for-the-browser","q":"\n\n<p>I have installed traceur using npm and have managed to compile a simple ES6 script. My problem is that the code that is generated is specific to node.js</p>\n\n<p>I know that traceur can be run from the browser but I wanted to optimise further. Is There a way to run traceur from the command line (node) in similar way to how lesscss works? </p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"Node can't enable harmony features","l":"http://stackoverflow.com/questions/22673450/node-cant-enable-harmony-features","q":"\n\n<p>Trying to run these new features as shown <a href=\"http://h3manth.com/new/blog/2013/es6-on-nodejs/\" rel=\"nofollow\">http://h3manth.com/new/blog/2013/es6-on-nodejs/</a>, specifically <strong>Generators</strong> in my local node environment. Any reason when I run <code>node --harmony --use-strict es6.js</code> on any Node versions before 0.11.4 I get the errors</p>\n\n<pre><code>function *Counter() {\n     ^\nSyntaxError: Unexpected token *\netc...\n</code></pre>\n\n<p>It works on any versions 0.11.4 and after, but when add a <code>--debug-brk</code> statement in there I get</p>\n\n<pre><code>global.v8debug.Debug.setBreakPoint(compiledWrapper, 0, 0);\n                       ^\nReferenceError: break_point is not defined\n</code></pre>\n\n<p>Not sure why it gives me the option to enable harmony, but not utilize it in previous versions, and why can't I debug the later versions?</p>\n    ","a":"\n<p><code>--harmony-generators</code> has been added in Node v0.11, that's certainly why your code couldn't be parsed.</p>\n\n<p>Break debugging with <code>--use-strict</code> is an issue since now that has just been fixed is <a href=\"https://github.com/joyent/node/tree/v0.12\" rel=\"nofollow\">node v0.12 development branch</a>.</p>\n\n<p>If you feel like building your own version of node from latest sources, you should be able to debug your generator!</p>\n\n<p>Source: <a href=\"https://github.com/joyent/node/issues/8685\" rel=\"nofollow\">https://github.com/joyent/node/issues/8685</a></p>\n    "},{"t":"source maps util for es6 + minify [closed]","l":"http://stackoverflow.com/questions/21807552/source-maps-util-for-es6-minify","q":"\n\n<p>Is there any way to have source maps directly for ES6 code, which is transpiled?\nI.e. I write ES6 code, which is transpiled with e.g. <a href=\"https://github.com/termi/es6-transpiler\" rel=\"nofollow\">es6-transpiler</a>, then minify &amp; combine ES5s into one file.\nBut I'd like to have sources in original ES6. Is it possible?</p>\n\n<p>Any transpilers/minifiers and build tool (grunt, gulp) would suffice.</p>\n\n<hr>\n\n<p>I don't agree with \"off-topic\" decision at all, cause the question was about certain practical problem. Nonetheless, I'd provide an aswer I came across today:</p>\n\n<p><a href=\"https://github.com/azu/multi-stage-sourcemap\" rel=\"nofollow\">https://github.com/azu/multi-stage-sourcemap</a></p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"ES6: Access class-variables from within method with _this_ [duplicate]","l":"http://stackoverflow.com/questions/31034749/es6-access-class-variables-from-within-method-with-this","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/20279484/how-to-access-the-correct-this-context-inside-a-callback\" dir=\"ltr\">How to access the correct `this` / context inside a callback?</a>\n                <span class=\"question-originals-answer-count\">\n                    4 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>Let's say I have a class in ES6 like this:</p>\n\n<pre><code>export default class myClass{\n    constructor () {\n        this.logCount = 0\n    }\n\n    log (msg) {\n        this.logCount++\n        console.log(this.logCount + \" - \" + msg)\n    }\n}\n</code></pre>\n\n<p>Why is <code>this.logCount</code> in <code>log()</code> undefined if I access it? What am I missing here?</p>\n    ","a":"\n<p>It turned out the Problem was in the context the <code>log()</code> method was used:</p>\n\n<pre><code>export default class myClass{\n    constructor () {\n        this.logCount = 0\n    }\n\n    openSocket() {\n        let mySocket = new WebSocket('wss:/.../...')\n        // wrong: because you loose the this-context\n        // mySocket.onopen= this.log\n        // correct:\n        mySocket.onopen= ((evt) =&gt; {this.log(evt)})\n    }\n\n    log (msg) {\n        this.logCount++\n        console.log(this.logCount + \" - \" + msg)\n    }\n}\n</code></pre>\n\n<p>Thank you everybody for your help and suggestions!!</p>\n    "},{"t":"Why should I use ES6 classes? [closed]","l":"http://stackoverflow.com/questions/30783217/why-should-i-use-es6-classes","q":"\n\n<p>I have many question about ES6 classes.</p>\n\n<p>Since i understand how to use function and WebComponent, React &amp; so. I didn't see many benefit using it.</p>\n\n<p>I wonder what's the benefit of using classes. I read that public/private/static will be part of ES7. So i see no point using it currently. </p>\n\n<p>Moreover, will class be a concept of OOP or it still be a 'javascript object concept'? Does it mean i can't modify it using <code>.prototype</code> ? Or is it just the same object but 2 different way to declare it.</p>\n\n<p>Is there a benefits about the speed? Maybe it's easier to maintain/understand if you have a big application like Big Java app ?</p>\n\n<p><strong><code>tl;dr : The question is in the title.</code></strong></p>\n    ","a":"\n<p>The new <code>class</code> stuff is mostly just syntactic sugar. (But, you know, the good kind of sugar.)</p>\n\n<blockquote>\n  <p>Moreover, will class be a concept of OOP or it still be a 'javascript object concept'?</p>\n</blockquote>\n\n<p>It's the same prototypical inheritance we have now, just cleaner and more convenient syntax for it.</p>\n\n<blockquote>\n  <p>Does it mean i can't modify it using .prototype ?</p>\n</blockquote>\n\n<p>No, you can still modify the <code>prototype</code> object on the class's constructor once you've created the class. E.g., this is perfectly legal:</p>\n\n<pre><code>class Foo {\n    constructor(name) {\n        this.name = name;\n    }\n\n    test1() {\n        console.log(\"test1: name = \" + this.name);\n    }\n}\nFoo.prototype.test2 = function() {\n    console.log(\"test2: name = \" + this.name);\n};\n</code></pre>\n\n<blockquote>\n  <p>Is there a benefits about the speed?</p>\n</blockquote>\n\n<p>By providing a specific idiom for this, I suppose it's <em>possible</em> that the engine may be able to do a better job optimizing. But they're awfully good at optimizing already, I wouldn't expect a significant difference.</p>\n\n<blockquote>\n  <p>Why should I use ES6 classes?</p>\n</blockquote>\n\n<p>Because:</p>\n\n<ul>\n<li><p>The syntax is simpler</p></li>\n<li><p>It's <strong>much</strong> easier and less error-prone to set up inheritance hierarchies using the new syntax than with the old</p></li>\n<li><p><code>class</code> defends you from the common error of failing to use <code>new</code> with the constructor function (by having the constructor throw an exception if <code>this</code> isn't a valid object for the constructor)</p></li>\n</ul>\n\n<p>Here's a syntax comparison for a hierarchy:</p>\n\n<pre><code>// ES6\nclass Person {\n    constructor(first, last) {\n        this.first = first;\n        this.last = last;\n    }\n\n    personMethod() {\n        // ...\n    }\n}\n\nclass Employee extends Person {\n    constructor(first, last, position) {\n        super(first, last);\n        this.position = position;\n    }\n\n    employeeMethod() {\n        // ...\n    }\n}\n\nclass Manager extends Employee {\n    constructor(first, last, position, department) {\n        super(first, last, position);\n        this.department = department;\n    }\n\n    managerMethod() {\n        // ...\n    }\n}\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>// ES5\nvar Person = function(first, last) {\n    if (!(this instanceof Person)) {\n        throw new Error(\"Person is a constructor function, use new with it\");\n    }\n    this.first = first;\n    this.last = last;\n};\n\nPerson.prototype.personMethod = function() {\n    // ...\n};\n\nvar Employee = function(first, last, position) {\n    if (!(this instanceof Employee)) {\n        throw new Error(\"Employee is a constructor function, use new with it\");\n    }\n    Person.call(this, first, last);\n    this.position = position;\n};\nEmployee.prototype = Object.create(Person.prototype);\nEmployee.prototype.constructor = Employee;\nEmployee.prototype.employeeMethod = function() {\n    // ...\n};\n\nvar Manager = function(first, last, position, department) {\n    if (!(this instanceof Manager)) {\n        throw new Error(\"Manager is a constructor function, use new with it\");\n    }\n    Employee.call(this, first, last, position);\n    this.department = department;\n};\nManager.prototype = Object.create(Employee.prototype);\nManager.prototype.constructor = Manager;\nManager.prototype.managerMethod = function() {\n    // ...\n};\n</code></pre>\n\n<p>As you can see, lots of repeated stuff there (which is why I wrote <a href=\"https://code.google.com/p/lineagejs\" rel=\"nofollow\">a script to do it</a>, back in the day) which it's easy to get wrong.</p>\n    "},{"t":"ES6 Promise blocks page","l":"http://stackoverflow.com/questions/30391441/es6-promise-blocks-page","q":"\n\n<p>Given the following test code:</p>\n\n<pre><code>var p = new Promise(function(resolve, reject) {\n    for(var i=0;i&lt;10000000;++i)\n        for(var y=i;y&lt;10000000;++y)\n            z = i + y;\n    resolve();\n});\np.then(function(){alert(\"resolved\");});\n</code></pre>\n\n<p>This code should run asynchronously, but it blocks all interaction with the page. Why?</p>\n\n<p>This was tested in Chrome 44, according to <a href=\"https://kangax.github.io/compat-table/es6/\" rel=\"nofollow\">this table</a> Promises should be fully implemented. </p>\n\n<p><a href=\"https://jsfiddle.net/cgs1xmht/\" rel=\"nofollow\">Fiddle here</a> (warning: blocks the tab)</p>\n    ","a":"\n<blockquote>\n  <p>This code should run asynchronously</p>\n</blockquote>\n\n<p>Yes and no, it depends on what part of that code you're talking about. The code in your promise executor (the function you pass into <code>new Promise</code>) is <strong>not</strong> run asynchronously. From <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-executor\" rel=\"nofollow\">§25.4.3.1</a>, step 10:</p>\n\n<blockquote>\n  <p>Let completion be Call(executor, undefined, «resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]]»).</p>\n</blockquote>\n\n<p>Note that there's nothing there about <code>new Promise</code> calling the executor asynchronously. (It's a \"<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call\" rel=\"nofollow\">Call</a>\" rather than \"<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-enqueuejob\" rel=\"nofollow\">EnqueueJob</a>\".)</p>\n\n<p>The asynchronous guarantee applies to <code>then</code>, not <code>new Promise</code>. (<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.prototype.then\" rel=\"nofollow\">§25.4.5.3</a> and <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-performpromisethen\" rel=\"nofollow\">§25.4.5.3.1</a>.) The guarantee is that even if the promise is already resolved, your callback will <em>not</em> be called synchronously with the <code>then</code> call, it will be after because it will be scheduled via \"<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-enqueuejob\" rel=\"nofollow\">EnqueueJob</a>\".</p>\n\n<p>So what happens in your code is:</p>\n\n<ol>\n<li><p>You call <code>new Promise</code>, which calls your executor <em>synchronously</em>.</p></li>\n<li><p>Eventually the executor returns and <code>new Promise</code> completes, giving us <code>p</code>.</p></li>\n<li><p>You call <code>p.then(...)</code>; the call queues a job to call your callback and returns immediately.</p></li>\n<li><p>The current job in the JavaScript job queue runs to completion.</p></li>\n<li><p>The job that calls to your callback is executed, calling the callback.</p></li>\n</ol>\n    "},{"t":"Why does javascript ES6 Promises continue execution after a resolve?","l":"http://stackoverflow.com/questions/28896280/why-does-javascript-es6-promises-continue-execution-after-a-resolve","q":"\n\n<p>As I understand a promise is something that can resolve() or reject() but I was suprised to find out that code in the promise continues to execute after a resolve or reject is called.</p>\n\n<p>I considered resolve or reject being an async-friendly version of exit  or return , that would halt all immediate function execution.</p>\n\n<p>Can someone explain the thought behind why the following example sometimes shows the console.log after a resolve call:</p>\n\n<pre><code>var call = function() {\n    return new Promise(function(resolve, reject) {\n        resolve();\n        console.log(\"Doing more stuff, should not be visible after a resolve!\");\n    });\n};\n\ncall().then(function() {\n    console.log(\"resolved\");\n});\n</code></pre>\n\n<p><a href=\"http://jsbin.com/sukacinayu/1/edit?js,console,output\" rel=\"nofollow\">jsbin</a></p>\n    ","a":"\n<p>JavaScript has the concept of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#.22Run-to-completion.22\" rel=\"nofollow\">\"run to completion\"</a>. Unless an error is thrown, a function is executed until a <code>return</code> statement or its end is reached. Other code outside of the function can't interfere with that (unless, again, an error is thrown).</p>\n\n<p>If you want <code>resolve()</code> to exit your initialiser function, you have to prepend it by <code>return</code>:</p>\n\n<pre><code>return new Promise(function(resolve, reject) {\n    return resolve();\n    console.log(\"Not doing more stuff after a return statement\");\n});\n</code></pre>\n    "},{"t":"What is the state of ES6 JavaScript, is it approved, what other steps are required?","l":"http://stackoverflow.com/questions/30224222/what-is-the-state-of-es6-javascript-is-it-approved-what-other-steps-are-requir","q":"\n\n<p>Regarding the approval process of the next version of Ecmascript - where are we at in the implementation process - and how does anyone know?</p>\n\n<p>Is there somewhere that EcmaScript progress is tracked?\nIs there a W3C link that will give an announcement or is this something that will happen?</p>\n\n<p>Does anyone know the current state of ES2015, ES2016, ES2017 approval process, and what steps or milestones exist to measure feature progress and browser adoption?</p>\n    ","a":"\n<p>The Committee process should be articulated for anyone that is looking for this information regarding ES6 release, or ES7 and ES8 releases of JavaScript.</p>\n\n<p>This is the link: <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#final_draft\" rel=\"nofollow\">http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#final_draft</a></p>\n\n<p>Here is part of the Specification Process.</p>\n\n<ol>\n<li>It states that ES6 is in Final Draft.</li>\n<li>It was submitted to General Assembly Members.</li>\n<li>It came from a series of Release Candidate Drafts</li>\n<li>And Prior Drafts before that.</li>\n<li>There will be a Meeting of the GA to vote on approval (ES6 June 2015)</li>\n<li>And it was approved. </li>\n</ol>\n\n<p>The Specification Milestones for future releases are:</p>\n\n<p>A. Release Candidate Drafts\nB. Final Drafts\nC. Submissions for Approval\nD. Approval</p>\n\n<p>But there is also a process for adding and vetting new language features:</p>\n\n<p>ES Feature Maturity Stages:\n0. Strawman\n1. Proposal\n2. Draft\n3. Candidate\n4. Finished</p>\n\n<p>Subsequently, there would be more steps in final adoption and release of the standard among browsers. Those milestones would also be relevant to this question. Because we need to know what the adoption rate is. That is where the compatibility table comes in: <a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"nofollow\">http://kangax.github.io/compat-table/es6/</a></p>\n\n<p>Also the process has been updated:\nThe naming changed as a result of a Release Train concept for JS:\nES2015 is ES6\nES2016 is ES7\nES2017 is ES8</p>\n    "},{"t":"How to publish a module written in ES6 to NPM?","l":"http://stackoverflow.com/questions/29738381/how-to-publish-a-module-written-in-es6-to-npm","q":"\n\n<p>I was about to publish a module to NPM, when I thought about rewriting it in ES6, to both future-proof it, and learn ES6. I've used Babel to transpile to ES5, and run tests. But I';m not sure how to proceed:</p>\n\n<ol>\n<li>Do I transpile, and publish the resulting /out folder to NPM?</li>\n<li>Do I include the result folder in my Github repo?</li>\n<li>...or do I maintain 2 repos, one with the ES6 code + gulp script for Github, and one with the transpiled results + tests for NPM?</li>\n</ol>\n\n<p>In short: what steps do I need to take to publish a module written in ES6 to NPM, while still allowing people to browse/fork the original code?</p>\n    ","a":"\n<p>The pattern I have seen so far is to keep the es6 files in a <code>src</code> directory and build your stuff in npm's prepublish to the <code>lib</code> directory.</p>\n\n<p>You will need an .npmignore file, similar to .gitignore but ignoring <code>src</code> instead of <code>lib</code>. </p>\n    "},{"t":"unexpected strict mode reserved word — yield? Node v0.11, harmony, es6","l":"http://stackoverflow.com/questions/28414973/unexpected-strict-mode-reserved-word-yield-node-v0-11-harmony-es6","q":"\n\n<p>Trying to use a new ES6 based node.js ODM for Mongo (Robe <a href=\"http://hiddentao.github.io/robe/\" rel=\"nofollow\">http://hiddentao.github.io/robe/</a>)</p>\n\n<p>Getting \"unexpected strict mode reserved word\" error. Am I dong something wrong here? </p>\n\n<p>test0.js</p>\n\n<pre><code>\"use strict\";\n// Random ES6 (works)\n{ let a = 'I am declared inside an anonymous block'; }\n\nvar Robe = require('robe');\n\n// :(\nvar db1 = yield Robe.connect('127.0.0.1');\n</code></pre>\n\n<p>Run it:</p>\n\n<pre><code>C:\\TestWS&gt;node --version\nv0.11.10\n\nC:\\TestWS&gt;node --harmony test0.js\n\nC:\\TestWS\\test0.js:12\nvar db1 = yield Robe.connect('127.0.0.1');\n          ^^^^^\nSyntaxError: Unexpected strict mode reserved word\n    at exports.runInThisContext (vm.js:69:16)\n    at Module._compile (module.js:432:25)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:349:32)\n    at Function.Module._load (module.js:305:12)\n    at Function.Module.runMain (module.js:490:10)\n    at startup (node.js:123:16)\n    at node.js:1031:3\n</code></pre>\n    ","a":"\n<p>If you want to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">generators</a> to do asynchronous operation in synchronous fashion you must do it like:</p>\n\n<pre><code>co(function*() {\n    \"use strict\";\n\n    { let a = 'I am declared inside an anonymous block'; }\n\n    var Robe = require('robe');\n\n    var db1 = yield Robe.connect('127.0.0.1');\n})();\n</code></pre>\n\n<p>where <code>co</code> realization you can find in:</p>\n\n<ul>\n<li><a href=\"https://github.com/tj/co\" rel=\"nofollow\">co</a></li>\n<li><a href=\"http://taskjs.org/\" rel=\"nofollow\">Task.js</a></li>\n<li><a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#promisecoroutinegeneratorfunction-generatorfunction---function\" rel=\"nofollow\">bluebird's Promise.coroutine</a></li>\n<li><a href=\"https://github.com/kriskowal/q/wiki/API-Reference#qspawngeneratorfunction\" rel=\"nofollow\">q's spawn</a></li>\n</ul>\n\n<p>and so on.</p>\n\n<p>In <code>strict mode</code> you cannot use <code>yield</code> outside of the generators. In <code>non-strict mode</code> outside of the generators  <code>yield</code> will be considered as variable identifier - so in your case it'll throw an error anyway.</p>\n    "},{"t":"How to resolve `this` in converting React module to ES6 class","l":"http://stackoverflow.com/questions/28344988/how-to-resolve-this-in-converting-react-module-to-es6-class","q":"\n\n<p>I have a <code>React</code> module that works fine in <code>ES5</code>.  I am converting it to <code>ES6</code> and using <code>6to5</code> for the conversion.  Everything transpiles fine, but I get a runtime error when I am trying to set my <code>props</code>.  When I drop a <code>debugger</code> and look at <code>this</code>, I see that <code>this</code> is the <code>EventEmitter</code> and not the class.  Here is my code:</p>\n\n<pre><code>var React = require('react');\n\nimport CalendarStore from './../stores/calendar.store.js';\n\nfunction getAppointments() {\n  return {appts: CalendarStore.getAppts()}\n}\n\nexport default class extends React.Component{\n  constructor(props) {\n    super(props);\n    this.props = {\n      view: 'weeks'\n    }\n  }\n\n  changeView(child, view) {\n    this.setProps({view: view});\n  }\n\n  componentWillMount() {\n     CalendarStore.addChangeListener(this._onChange);\n  }\n\n  _onChange() {\n    this.setProps(getAppointments());\n  }\n\n  ....\n};\n</code></pre>\n\n<p>The place I am having the issue is in my <code>changeView</code> function.  When it is <code>transpiled</code> down it looks like this:</p>\n\n<pre><code>  _onChange: {\n      value: function _onChange() {\n        this.setProps(getAppointments());\n      },\n      writable: true,\n      configurable: true\n    }\n</code></pre>\n\n<p>Again, inside that function, <code>this</code> is my <code>EventEmitter</code>.  What is the way to fix this?</p>\n    ","a":"\n<p><code>this.setProps</code> is deprecated, use state for this.  It'll give you this warning in 0.13:</p>\n\n<blockquote>\n  <p>Warning: setProps(...) is deprecated in plain JavaScript React classes.</p>\n</blockquote>\n\n<p>Also es6 class methods aren't autobound, so you need to bind it manually.  You can either use <code>.bind(this)</code>, or use arrow functions.  For external emitters you do need to keep a reference, though.</p>\n\n<p>You can just get rid of _onChange:</p>\n\n<pre><code>this._calendarListener = e =&gt; this.setState({things: e});\nCalendarStore.addChangeListener(this._calendarListener);\n</code></pre>\n\n<p>Or bind in the constructor:</p>\n\n<pre><code>constructor(props){\n   ...\n   this._onClick = this._onClick.bind(this);\n}\n</code></pre>\n\n<p>Don't forget to unbind the event in componentWillUnmount:</p>\n\n<pre><code>componentWillUnmount(){\n    CalendarStore.removeChangeListener(this._onClick);\n    // or \n    CalendarStore.removeChangeListener(this._calendarListener);\n}\n</code></pre>\n\n<p>Adding event listeners should be done in componentDidMount, not componentWillMount.  The constructor replaces componentWillMount in es6 classes.</p>\n\n<p>This code is very bad... you're overriding the props react sets:</p>\n\n<pre><code>this.props = {\n  view: 'weeks'\n}\n</code></pre>\n\n<p>Just replace all occurrences of 'props' with 'state' in your code, and all will be good.  Also you probably want the store's initial state.</p>\n\n<pre><code>this.state = {\n  view: 'weeks',\n  things: CalendarStore.getAppts()\n}\n</code></pre>\n\n<hr>\n\n<p>Also, createClass isn't going away any time soon, so feel free to continue using it.  It's often simpler.  Stores should generally be handled by mixins, which is trivial with createClass, but more difficult to do right in es6 classes.  I have a small library for <a href=\"https://github.com/brigand/react-mixin\">mixins with react and es6 classes</a>.</p>\n    "},{"t":"Converting jsx with ES6 import syntax using reactify","l":"http://stackoverflow.com/questions/29707389/converting-jsx-with-es6-import-syntax-using-reactify","q":"\n\n<p>I am using reactify (a browserify transform <a href=\"https://github.com/andreypopp/reactify\" rel=\"nofollow\">https://github.com/andreypopp/reactify</a>) to convert JSX to regular JS.\nI have setup a gulp task:</p>\n\n<pre><code>gulp.task('reactifyes6', function () {\n    var bundler = watchify(browserify(watchify.args));\n    return bundler.add('./Scripts/Widget/ReactComponents/Dashboard.jsx')\n    .transform('reactify',{harmony:true, es6module:true})\n    .bundle()\n    .pipe(source('Dashboard.js'))\n    .pipe(gulp.dest('./Scripts/Widget/Build/'));\n});\n</code></pre>\n\n<p>For the sake of getting this working I have two files: <code>Dashboard.jsx</code> and <code>someJS.js</code>.<br>\n<strong>Dashboad.jsx</strong></p>\n\n<pre><code>import myFunc from './someJS.js';\nmyFunc();\n</code></pre>\n\n<p><strong>someJS.js</strong></p>\n\n<pre><code>export default function () { console.log('test'); };\n</code></pre>\n\n<p>When I run the gulp task <code>'reactifyes6'</code>, I get a <code>ReactifyError \"Illegal import declaration while parsing file: [path to my file]\"</code></p>\n\n<p>What am I doing wrong and how could I compile ES6 import / export syntax?</p>\n    ","a":"\n<p>Try babelify in place of reactify</p>\n    "},{"t":"Getting Karma, 6to5ify and Istanbul to play ball","l":"http://stackoverflow.com/questions/28236587/getting-karma-6to5ify-and-istanbul-to-play-ball","q":"\n\n<p>I have Browserify, 6to5ify and Karma to play nice, successfully running my specs. When I add code coverage however, things go south. I've tried several approaches:</p>\n\n<ul>\n<li>Add <code>browserify-istanbul</code> transform to my karma.conf.js. However, this results in it trying to run instrumentation on my spec-files as well it would appear. </li>\n<li>Run <code>coverage</code> preprocessor on my source files. But because istanbul (even <code>douglasduteil/karma-coverage#next</code>) doesn't read my <code>6to5ify</code> browserify transform, this crashes immediately on the first file it tries to parse (because of the <code>import</code> statement), or when I use karma-coverage#next, it doesn't respect the <code>browser</code> mapping in my package.json (mobile project, mapped Backbone to Exoskeleton). </li>\n</ul>\n\n<p>Right now my <code>karma.conf.js</code> looks like this:</p>\n\n<pre><code>module.exports = function(karma){\n  karma.set({\n    frameworks: [\"browserify\", \"mocha\", \"chai-sinon\"],\n    browserify: {\n      debug: true,\n      extensions: [\".js\", \".hbs\"],\n      transform: [\"6to5ify\", \"hbsfy\"]\n    },\n    reporters: [\"dots\", \"osx\", \"junit\", \"coverage\"],\n    coverageReporter: {\n      type: \"text\"\n    },\n    junitReporter: {\n      outputFile: \"spec/reports/test-results.xml\"\n    },\n    preprocessors: {\n      \"src/javascript/**/*\": [\"coverage\"],\n      \"spec/**/*\": [\"browserify\"]\n    },\n    browsers: [\"PhantomJS\"],\n    files: [\"spec/unit/**/*Spec.js\"],\n    logLevel: \"LOG_DEBUG\",\n    autoWatch: true\n  });\n};\n</code></pre>\n\n<p>I'm kind of lost how to get this all working together. I tried following <a href=\"https://github.com/douglasduteil/isparta\" rel=\"nofollow\">these instructions</a>, but that didn't work because it didn't follow my <code>browser</code> node in <code>package.json</code>. Any help would be greatly appreciated. </p>\n    ","a":"\n<p>So, apparently I need <code>browserify-istanbul</code>, and I need the browserify <code>configure</code> hook, like so:</p>\n\n<pre><code>var to5ify = require('6to5ify');\nvar hbsfy = require('hbsfy');\nvar cover = require('browserify-istanbul');\n\nvar coverOptions = {\n  ignore: ['**/*Spec.js', '**/lib/*.js', '**/fixtures/*.hbs'],\n  defaultIgnore: true\n}\n\nmodule.exports = function(karma){\n  karma.set({\n    frameworks: [\"browserify\", \"mocha\", \"chai-sinon\"],\n    browserify: {\n      debug: false,\n      extensions: [\".js\", \".hbs\"],\n      configure: function(bundle){\n        bundle.on('prebundle', function(){\n          bundle\n            .transform(to5ify)\n            .transform(hbsfy)\n            .transform(cover(coverOptions));\n        });\n      }\n    },\n    reporters: [\"dots\", \"osx\", \"junit\", \"coverage\"],\n    coverageReporter: {\n      type: \"text\"\n    },\n    junitReporter: {\n      outputFile: \"spec/reports/test-results.xml\"\n    },\n    preprocessors: {\n      \"spec/**/*\": [\"browserify\"]\n    },\n    browsers: [\"PhantomJS\"],\n    files: [\"spec/unit/**/*Spec.js\"],\n    logLevel: \"LOG_DEBUG\",\n    autoWatch: true\n  });\n};\n</code></pre>\n    "},{"t":"ES6 Template Literals Vs concatenated strings","l":"http://stackoverflow.com/questions/27565056/es6-template-literals-vs-concatenated-strings","q":"\n\n<p>I have the following code for Ecma-Script-6 <code>template literals</code></p>\n\n<pre><code>let person = {name: 'John Smith'};   \nlet tpl = `My name is ${person.name}.`;    \nlet MyVar=\"My name is \"+ person.name+\".\";\n\nconsole.log(\"template literal= \"+tpl);  \nconsole.log(\"my variable = \"+MyVar);\n</code></pre>\n\n<p>The output is as follows:</p>\n\n<pre><code>template literal= My name is John Smith.\nmy variable = My name is John Smith.\n</code></pre>\n\n<p><a href=\"http://www.es6fiddle.net/i3vgplv9/\" rel=\"nofollow\">this</a> is the fiddle.\nI tried searching for the exact difference but couldn't find it,\nMy question is what is the difference between these two statements,</p>\n\n<pre><code>  let tpl = `My name is ${person.name}.`;    \n</code></pre>\n\n<p>And</p>\n\n<pre><code>  let MyVar = \"My name is \"+ person.name+\".\";\n</code></pre>\n\n<p>I am already able to get the string <code>MyVar</code> concatenated with <code>person.name</code> here, so what would be the scenario to use the template literal ?</p>\n    ","a":"\n<p>The result of using pure template literals isn't that different from concatenating strings. Better readability is a great feature, but the most interesting thing about templates are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings#Tagged_template_strings\" rel=\"nofollow\">Tagged template strings</a>.</p>\n\n<p>Basically, <code>tag `My name is ${person.name}.`</code> calls a function named <code>tag</code> with the literal sections (in this example <code>My name is</code> and <code>.</code>) and the substitutions (<code>John Smith</code>) that you can access in the arguments. The template literal will be evaluated to whatever the <code>tag</code> function returns.</p>\n\n<p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:quasis\" rel=\"nofollow\">ECMAScript wiki</a> lists some use cases, like auto escaping or localization. You could create a tag function named <code>msg</code> that looks up the literal parts like <code>My name is</code> and substitutes them with translations into the current locale's language, for example into German:</p>\n\n<pre><code>console.log(msg`My name is ${person.name}.`) // Output: Mein Name ist John Smith.\n</code></pre>\n\n<p>The value returned by the tag function doesn't even have to be a string. This <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:quasis#query_languages\" rel=\"nofollow\">query selector example</a> is supposed to return a collection of nodes:</p>\n\n<pre><code>$`a.${className}[href=~'//${domain}/']`\n</code></pre>\n    "},{"t":"ES6 Generators- Example where there is no yield expression for the first next()","l":"http://stackoverflow.com/questions/26695346/es6-generators-example-where-there-is-no-yield-expression-for-the-first-next","q":"\n\n<p>For ES6 generators, why does the author of <a href=\"http://davidwalsh.name/es6-generators\" rel=\"nofollow\">this blog post</a> say:</p>\n\n<p>from: <a href=\"http://davidwalsh.name/es6-generators\" rel=\"nofollow\">http://davidwalsh.name/es6-generators</a></p>\n\n<blockquote>\n  <p>\"The first next(..) call, we don't send in anything. Why? Because there's no yield expression to receive what we pass in.\"</p>\n</blockquote>\n\n<p>Doesn't the first <code>it.next()</code> call <code>(yield (x + 1))</code>?</p>\n\n<pre><code>function *foo(x) {\n    var y = 2 * (yield (x + 1));\n    var z = yield (y / 3);\n    return (x + y + z);\n}\n\nvar it = foo( 5 );\n\n// note: not sending anything into `next()` here\nconsole.log( it.next() );       // { value:6, done:false }\nconsole.log( it.next( 12 ) );   // { value:8, done:false }\nconsole.log( it.next( 13 ) );   // { value:42, done:true }\n</code></pre>\n\n<blockquote>\n  <p>You can see that we can still pass in parameters (x in our example) with the initial foo( 5 ) iterator-instantiation call, just like with normal functions.</p>\n  \n  <p>The first next(..) call, we don't send in anything. Why? Because there's no yield expression to receive what we pass in.</p>\n</blockquote>\n    ","a":"\n<p>The first <code>it.next()</code> corresponds to the <code>yield(x + 1)</code>, which results in 6 as expected. The 12 in the next call to <code>it.next(12)</code> sets the value of that first yield to 12, so <code>y</code> is set to double that, or 24 and the iterator results in the value <code>(y / 3)</code>, which is 8. The final call to <code>it.next(13)</code> sets the value of the second yield to 13, which is set to <code>z</code>, and receives the value of the <code>return</code>, which is 5 + 24 + 13.</p>\n\n<p>Granted, it is a little bit confusing, due to the syntax</p>\n\n<pre><code>z = yield(y / 3)\n</code></pre>\n\n<p>which somehow looks like one is assigning the value of something to do with <code>y / 3</code> to <code>z</code>. That's not the case. <code>y / 3</code> is the value being yielded to serve as the value of the iterator, whereas <code>z</code> is being assigned to the value passed in by the <strong>following</strong> <code>it.next()</code> call, something entirely different! It may be slightly helpful to omit the parentheses and write this as</p>\n\n<pre><code>var y = 2 * yield x + 1;\nvar z = yield y / 3;\n</code></pre>\n\n<p>keeping in mind that <code>yield</code> is a statement, not a function call.</p>\n\n<p>As for the error you mention, in traceur for example it is \"Sent value to newborn generator\". It makes sense when you think about it. The value send as a parameter to <code>it.next()</code> becomes the value of the <strong>most recent</strong> yield in the generator. On the first call to <code>it.next()</code>, there <strong>is</strong> no most recent yield in the generator, so there's nothing to take on the value being passed, hence the error.</p>\n\n<p>Don't confuse passing parameters to the generator (<code>x</code> in your case), which merely provides a way to configure or initialize the generator, with passing parameters to <code>it.next()</code>, which serve as the value of the most recent <code>yield</code> in the generator.</p>\n\n<p>It may be helpful to consider how you would write the equivalent hand-rolled generator (simplified to just return the next value instead of <code>{value, done}</code>, and throwing when the generator is out of gas):</p>\n\n<pre><code>function foo(x) {\n    var y, z, step = 0;\n    return function next(val) {\n        switch (step++) {\n            case 0:               return x + 1;      break;\n            case 1: y = 2 * val;  return y / 3;      break;\n            case 2: z = val;      return x + y + z;  break;\n            default: throw \"generator finished\";\n        }\n    };\n}\n</code></pre>\n\n<p>Then: </p>\n\n<pre><code>iterator = foo(5);\niterator();             // 6\niterator(12);           // 8\niterator(13);           // 42\n</code></pre>\n    "},{"t":"Difference between import X and import * as X in node.js (ES6 / Babel)?","l":"http://stackoverflow.com/questions/31386631/difference-between-import-x-and-import-as-x-in-node-js-es6-babel","q":"\n\n<p>I have a node.js library <code>lib</code> written in ES6 (compiled with <a href=\"https://babeljs.io/\" rel=\"nofollow\">Babel</a>) in which I export the following submodules:</p>\n\n<pre><code>\"use strict\";\n\nimport * as _config from './config';\nimport * as _db from './db';\nimport * as _storage from './storage';\n\nexport var config = _config;\nexport var db = _db;\nexport var storage = _storage;\n</code></pre>\n\n<p>If from my main project I include the library like this</p>\n\n<pre><code>import * as lib from 'lib';\nconsole.log(lib);\n</code></pre>\n\n<p>I can see the proper output and it work as expected <code>{ config: ... }</code>. However, if I try to include the library like this:</p>\n\n<pre><code>import lib from 'lib';\nconsole.log(lib);\n</code></pre>\n\n<p>it will be <code>undefined</code>.</p>\n\n<p>Can someone explain what is happening here? Aren't the two import methods supposed to be equivalent? If not, what difference am I missing?</p>\n    ","a":"\n<pre><code>import * as lib from 'lib';\n</code></pre>\n\n<p>is asking for an object with all of the named exports of 'lib'.</p>\n\n<pre><code>export var config = _config;\nexport var db = _db;\nexport var storage = _storage;\n</code></pre>\n\n<p>are named exports, which is why you end up with an object like you did.</p>\n\n<pre><code>import lib from 'lib';\n</code></pre>\n\n<p>is asking for the <code>default</code> export of <code>lib</code>. e.g.</p>\n\n<pre><code>export default 4;\n</code></pre>\n\n<p>would make <code>lib === 4</code>. It does not fetch the named exports. To get an object from the default export, you'd have to explicitly do</p>\n\n<pre><code>export default {\n  config: _config,\n  db: _db,\n  storage: _storage\n};\n</code></pre>\n    "},{"t":"Is there a way I can restructure part of a destructuring assignment?","l":"http://stackoverflow.com/questions/31102493/is-there-a-way-i-can-restructure-part-of-a-destructuring-assignment","q":"\n\n<p>Let's say I have an array of arrays, like so:</p>\n\n<pre><code>var arrs = [\n    [1, \"foo\", \"bar\", \"baz\"],\n    [2, \"bar\", \"baz\", \"qux\"],\n    [3, \"baz\", \"qux\", \"thud\"]\n];\n</code></pre>\n\n<p>I want to use ES6's destructuring assignment to get the first element of each array as an individual variable, and repack the rest of the elements as another array. In pseudocode:</p>\n\n<pre><code>for (let [first, *rest] of arrs) { // What is the proper way to do *rest?\n    console.log(first); // Should be a number\n    console.log(rest); // Should be an array of strings\n}\n</code></pre>\n\n<p>Is something like this possible?</p>\n    ","a":"\n<p>That's what <code>...</code> does:</p>\n\n<pre><code>for (let [first, ... rest] of arrs) {\n</code></pre>\n    "},{"t":"Explanation of `let` and block scoping with for loops","l":"http://stackoverflow.com/questions/30899612/explanation-of-let-and-block-scoping-with-for-loops","q":"\n\n<p>I understand that <code>let</code> prevents duplicate declarations which is nice.</p>\n\n<pre><code>let x;\nlet x; // error!\n</code></pre>\n\n<p>Variables declared with <code>let</code> can also be used in closures which can be expected</p>\n\n<pre><code>let i = 100;\nsetTimeout(function () { console.log(i) }, i); // '100' after 100 ms\n</code></pre>\n\n<p>What I have a bit of difficulty grasping is how <code>let</code> applies to loops.  This seems to be specific to <code>for</code> loops.  Consider the classic problem:</p>\n\n<pre><code>// prints '10' 10 times\nfor (var i = 0; i &lt; 10; i++) { process.nextTick(_ =&gt; console.log(i)) }\n// prints '0' through '9'\nfor (let i = 0; i &lt; 10; i++) { process.nextTick(_ =&gt; console.log(i)) }\n</code></pre>\n\n<p>Why does using <code>let</code> in this context work? In my imagination even though only one block is visible, <code>for</code> actually creates a separate block for each iteration and the <code>let</code> declaration is done inside of that block ... but there is only one <code>let</code> declaration to initialize the value.  Is this just syntactic sugar for ES6? How is this working?</p>\n\n<p>I understand the differences between <code>var</code> and <code>let</code> and have illustrated them above.  I'm particularly interested in understanding why the different declarations result in different output using a <code>for</code> loop.</p>\n    ","a":"\n<p><code>let</code> introduces block scoping and equivalent binding, much like functions create a scope with closure. I believe the relevant section of the spec is <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations\" rel=\"nofollow\">13.2.1</a>, where the note mentions that <code>let</code> declarations are part of a LexicalBinding and both live within a Lexical Environment. Section <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-variable-statement\" rel=\"nofollow\">13.2.2</a> states that <code>var</code> declarations are attached to a VariableEnvironment, rather than a LexicalBinding.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#let_in_loops\" rel=\"nofollow\">MDN explanation</a> supports this as well, stating that:</p>\n\n<blockquote>\n  <p>It works by binding zero or more variables in the lexical scope of a single block of code</p>\n</blockquote>\n\n<p>suggesting that the variables are bound to the block, which varies each iteration requiring a new LexicalBinding (I believe, not 100% on that point), rather than the surrounding Lexical Environment or VariableEnvironment which would be constant for the duration of the call.</p>\n\n<p>In short, when using <code>let</code>, the closure is at the loop body and the variable is different each time, so it must be captured again. When using <code>var</code>, the variable is at the surrounding function, so there is no requirement to reclose and the same reference is passed to each iteration.</p>\n\n<p>Adapting your example to run in the browser:</p>\n\n<pre><code>// prints '10' 10 times\nfor (var i = 0; i &lt; 10; i++) {\n  setTimeout(_ =&gt; console.log('var', i), 0);\n}\n\n// prints '0' through '9'\nfor (let i = 0; i &lt; 10; i++) {\n  setTimeout(_ =&gt; console.log('let', i), 0);\n}\n</code></pre>\n\n<p>certainly shows the latter printing each value. If you look at how Babel transpiles this, it produces:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for (var i = 0; i &lt; 10; i++) {\n  setTimeout(function(_) {\n    return console.log(i);\n  }, 0);\n}\n\nvar _loop = function(_i) {\n  setTimeout(function(_) {\n    return console.log(_i);\n  }, 0);\n};\n\n// prints '0' through '9'\nfor (var _i = 0; _i &lt; 10; _i++) {\n  _loop(_i);\n}</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>Assuming that Babel is fairly conformant, that matches up with my interpretation of the spec.</p>\n    "},{"t":"How to get the nth value of a JavaScript generator?","l":"http://stackoverflow.com/questions/30410359/how-to-get-the-nth-value-of-a-javascript-generator","q":"\n\n<p>How can I get the nth value of a generator?</p>\n\n<pre><code>function *index() {\n  let x = 0;\n  while(true)\n    yield x++;\n}\n\n// the 1st value\nlet a = index();\nconsole.log(a.next().value); // 0\n\n// the 3rd value\nlet b = index();\nb.next();\nb.next();\nconsole.log(b.next().value); // 2\n\n// the nth value?\nlet c = index();\nlet n = 10;\nconsole.log(...); // 9\n</code></pre>\n    ","a":"\n<p><a href=\"http://stackoverflow.com/questions/30410359/how-to-get-the-nth-value-of-a-javascript-generator#comment48907733_30410395\">As T.J. Crowder pointed out</a>, there is no way to get to the <code>n</code>th element directly, as the values are generated on demand and only the immediate value can be retrieved with the <code>next</code> function. So, we need to explicitly keep track of the number of items consumed.</p>\n\n<p>The only solution is using a loop and I prefer iterating it with <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow\"><code>for..of</code></a>.</p>\n\n<p>We can create a function like this</p>\n\n<pre><code>function elementAt(generator, n) {\n    \"use strict\";\n\n    let i = 0;\n\n    if (n &lt; 0) {\n        throw new Error(\"Invalid index\");\n    }\n\n    for (let value of generator) {\n        if (i++ == n) {\n            return value;\n        }\n    }\n\n    throw new Error(\"Generator has fewer than \" + n + \" elements\");\n}\n</code></pre>\n\n<p>and then invoke it like this</p>\n\n<pre><code>console.log(elementAt(index(), 10));\n// 10\n</code></pre>\n\n<hr>\n\n<p>Another useful function might be, <code>take</code>, which would allow you to take first <code>n</code> elements from a generator, like this</p>\n\n<pre><code>function take(generator, n) {\n    \"use strict\";\n\n    let i = 1,\n        result = [];\n\n    if (n &lt;= 0) {\n        throw new Error(\"Invalid index\");\n    }\n\n    for (let value of generator) {\n        result.push(value);\n        if (i++ == n) {\n            return result;\n        }\n    }\n\n    throw new Error(\"Generator has fewer than \" + n + \" elements\");\n}\n\nconsole.log(take(index(), 10))\n// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n</code></pre>\n    "},{"t":"Using Node's `response.end` method with promise","l":"http://stackoverflow.com/questions/30171975/using-nodes-response-end-method-with-promise","q":"\n\n<p>Suppose I have a basic HTTP server that responds to everything with \"foo\":</p>\n\n<pre><code>import http from 'http'\n\nhttp.createServer((request, response) =&gt;\n  Promise.resolve('foo\\n').then(s =&gt; response.end(s))\n).listen(8888)\n</code></pre>\n\n<p>This works, but when I change the <code>.then</code> line to a shorter version:</p>\n\n<pre><code>Promise.resolve('foo\\n').then(response.end)\n</code></pre>\n\n<p>It doesn't end the response. I must be missing something very dumb but can't think of what it is.</p>\n    ","a":"\n<p>The <code>end</code> function has to be bound to the <code>response</code> object. You can explicitly do that, with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\"><code>Function.prototype.bind</code></a> like this</p>\n\n<pre><code>Promise.resolve('foo\\n').then(response.end.bind(response))\n</code></pre>\n\n<hr>\n\n<p>When you pass <code>response.end</code> to <code>then</code> function, you are actually passing the function object to the <code>then</code> function. The actual binding between the function and the <code>response</code> object is broken. For example, inside the <code>end</code> function, if they refer the <code>response</code> object with <code>this</code>, it will not be there as we have broken it. That is why we have to explicitly bind the function object with the actual object.</p>\n\n<p>For example,</p>\n\n<pre><code>function Test(name) {\n    this.name = name;\n}\n\nTest.prototype.printName = function () {\n    console.log(this.name);\n}\n\nvar test = new Test(\"thefourtheye\");\ntest.printName();\n</code></pre>\n\n<p>will print <code>thefourtheye</code>. But if we do something like this</p>\n\n<pre><code>(function (func) {\n    func();\n}(test.printName));\n</code></pre>\n\n<p>it will print <code>undefined</code>. Because <code>test.printName</code> is actually the function object and it will not have any reference to <code>test</code>. So when it is invoked with <code>func()</code>, the <code>this</code> inside <code>printName</code> will refer the global object, which will not have <code>name</code> property defined in it. If we bind it like this</p>\n\n<pre><code>(function (func) {\n    func();\n}(test.printName.bind(test)));\n</code></pre>\n\n<p><code>test.printName.bind</code> will return a new function which will actually invoke <code>test.printName</code> with the context set as <code>test</code>. That is why it works.</p>\n    "},{"t":"Is there a defined name for the execution context that encapsulates all others in JavaScript?","l":"http://stackoverflow.com/questions/29878125/is-there-a-defined-name-for-the-execution-context-that-encapsulates-all-others-i","q":"\n\n<p>Is there a defined name for the execution context that encapsulates all others in JavaScript?</p>\n\n<p>For example is it called the \"global execution context\". That phrase is not mentioned in the ES6 spec as far as I can find.</p>\n    ","a":"\n<p>It's called \"the <a href=\"https://es5.github.io/#x10.2.3\" rel=\"nofollow\">global environment</a>\" as per the ES5 spec (or see the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-global-environment-records\" rel=\"nofollow\">equivalent section</a> of the ES6 spec):</p>\n\n<blockquote>\n  <p>The global environment is a unique Lexical Environment which is created before any ECMAScript code is executed. The global environment’s Environment Record is an object environment record whose binding object is the global object (15.1). The global environment’s outer environment reference is null.</p>\n</blockquote>\n\n<p>Or perhaps you are looking for the \"<a href=\"https://es5.github.io/#x10.4.1.1\" rel=\"nofollow\">initial global execution context</a>\", whose lexical and variable environment are references to the global environment.</p>\n    "},{"t":"Aurelia / ES6 class and property definition, plumber syntax error","l":"http://stackoverflow.com/questions/29614752/aurelia-es6-class-and-property-definition-plumber-syntax-error","q":"\n\n<p>I am trying to get the getting started app of Aurelia to work, but I am getting an error right at the first page.\n<a href=\"http://aurelia.io/get-started.html\" rel=\"nofollow\">http://aurelia.io/get-started.html</a></p>\n\n<p>The code in question : </p>\n\n<pre><code>export class Welcome {\n  heading = 'Welcome to the Aurelia Navigation App!';\n  firstName = 'John';\n  lastName = 'Doe';\n\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  welcome(){\n    alert(`Welcome, ${this.fullName}!`);\n  }\n}\n</code></pre>\n\n<p>The error : </p>\n\n<pre><code>    [21:46:19] Plumber found unhandled error:\n SyntaxError in plugin 'gulp-babel'\nMessage:\n    D:/workspace/aurelia/navigation-app/src/app.js: Unexpected token (2:10)\n  1 | export class Welcome {\n&gt; 2 |   heading = 'Welcome to the Aurelia Navigation App!';\n    |           ^\n  3 |   firstName = 'John';\n  4 |   lastName = 'Doe';\n  5 |\n[21:46:19] Finished 'build-system' after 20 ms\n</code></pre>\n\n<p>I have to say that I am on windows, it might create some troubles. </p>\n\n<hr>\n\n<p>I \"solved\" this problem by putting the variables in a constructor. But is the syntax above not valid ES6 ? is that ES7 or something not usable yet ? </p>\n\n<hr>\n\n<p>I know that this code looks weird but I am not the author, it is the original code from Aurelia tutorial</p>\n    ","a":"\n<p>The following syntax is not valid ES6 syntax for classes. BUT, it is valid ES7 property initializer syntax for classes. To use it, if you are using Babel, you need to be sure to enable this feature specifically. This is documented in the Aurelia blog and it is configured as part of the latest skeleton.</p>\n\n<pre><code>export class Welcome {\n  heading = 'Welcome to the Aurelia Navigation App!';\n  firstName = 'John';\n  lastName = 'Doe';\n\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  welcome(){\n    alert(`Welcome, ${this.fullName}!`);\n  }\n}\n</code></pre>\n    "},{"t":"Which ECMAScript 6 features imply strict mode?","l":"http://stackoverflow.com/questions/29283935/which-ecmascript-6-features-imply-strict-mode","q":"\n\n<p>In ECMAScript 5 (aka JavaScript,) I can trigger strict mode by adding <code>\"use strict\"</code> at the top of my function (or file, but this is discouraged.)</p>\n\n<p>I understand that in ECMAScript 6, certain syntax features will turn on strict mode, especially <code>class</code>, and modules (however you do those.)</p>\n\n<p><strong>In the ECMAScript 6 world, what is the complete list of ways to trigger strict mode?</strong></p>\n    ","a":"\n<p><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-strict-mode-code\">The spec</a> says:</p>\n\n<blockquote>\n  <ul>\n  <li>Module code is always strict mode code.</li>\n  <li>All parts of a <em>ClassDeclaration</em> or a <em>ClassExpression</em> are strict mode code.</li>\n  <li>…</li>\n  </ul>\n</blockquote>\n\n<p>The rest are just the known things from ES5, basically every global/eval/function code that begins with the <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-directive-prologues-and-the-use-strict-directive\"><code>\"use strict\";</code> directive</a>. It does work within the new ES6 function kinds (arrow, generator, method syntax) as well.</p>\n    "},{"t":"Returning a value without an explicit return statement","l":"http://stackoverflow.com/questions/16895683/returning-a-value-without-an-explicit-return-statement","q":"\n\n<p>In JavaScript, falling off the end of a function returns <code>undefined</code>; if you want to return a value, you need to use an explicit <code>return</code> statement.</p>\n\n<p>At least this was hitherto the case, but it looks like ECMAScript 6 will at least sometimes allow the <code>return</code> to be omitted.</p>\n\n<p>In what circumstances will this be the case? Will it be related to the distinction between <code>function</code> and <code>=&gt;</code> or is there some other criterion?</p>\n    ","a":"\n<p>The definitive material on this subject is the latest ES Harmony <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aspecification_drafts\" rel=\"nofollow\">specification draft</a>, and specifically the part derived from the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aarrow_function_syntax\" rel=\"nofollow\">arrow function syntax proposal</a>. For convenience, an unofficial HTML version can be found <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-13.2\" rel=\"nofollow\">here</a>.</p>\n\n<p>In short, this new syntax will allow the definition of functions much more concisely. The ES spec draft has all the detail, I 'll explain very roughly here.</p>\n\n<p>The syntax is</p>\n\n<pre><code>ArrowParameters =&gt; ConciseBody\n</code></pre>\n\n<p>The <code>ArrowParameters</code> part defines the arguments that the function takes, for example:</p>\n\n<pre><code>()                   // no arguments\narg                  // single argument (special convenience syntax)\n(arg)                // single argument\n(arg1, arg2, argN)   // multiple arguments\n</code></pre>\n\n<p>The <code>ConciseBody</code> part defines the body of the function. This can be defined either as it has always been defined, e.g.</p>\n\n<pre><code>{ alert('Hello!'); return 42; }\n</code></pre>\n\n<p>or, <em>in the special case where the function returns the result of evaluating a single expression</em>, like this:</p>\n\n<pre><code>theExpression\n</code></pre>\n\n<p>If this sounds rather abstract, here's a concrete example. All of these function definitions would be identical under the current draft spec:</p>\n\n<pre><code>var inc = function(i) { return i + 1; }\nvar inc = i =&gt; i + 1;\nvar inc = (i) =&gt; i + 1;\nvar inc = i =&gt; { return i + 1; };\n</code></pre>\n\n<p>As an aside, this new syntax is exactly the same <em>great</em> syntax that C# uses to allow the definition of lambda functions.</p>\n    "},{"t":"Dynamic Method Call from a Class in ES6","l":"http://stackoverflow.com/questions/31248186/dynamic-method-call-from-a-class-in-es6","q":"\n\n<p>How can a method be called dynamically from a class in ES6?</p>\n\n<p>In ES5 and lower I can do this with the following. <a href=\"http://jsfiddle.net/dqk8n3xk/\" rel=\"nofollow\">JSFiddle example</a></p>\n\n<pre><code>var App = function() {\n\n    var that = this;\n\n    this.init = function() {\n        var elements = document.getElementsByClassName('call-method');\n\n        for(var i = 0; i &lt; elements.length; i++) {\n            elements[i].addEventListener('click', function() {\n                that['method' + this.dataset.method](this);\n            });\n        }\n    };\n\n    this.methodOne = function(element) {\n        console.log(element.innerText);\n    };\n\n    this.methodTwo = function(element) {\n        console.log(element.innerText);\n    };\n\n};\n\n(function() {\n    var app = new App();\n\n    app.init();\n}());\n</code></pre>\n\n<p>When I try to do the same in ES6 I get an error <code>Uncaught TypeError: not a function</code>. Is this possible in ES6 or am I doing something wrong here? <a href=\"http://jsfiddle.net/dqk8n3xk/1/\" rel=\"nofollow\">JSFiddle example</a></p>\n\n<pre><code>'use strict';\n\nclass App {\n\n    constructor() {\n        var elements = document.getElementsByClassName('call-method');\n\n        for(var i = 0; i &lt; elements.length; i++) {\n            elements[i].addEventListener('click', function() {\n                this.constructor['method' + this.dataset.method](this); // Uncaught TypeError: not a function\n                App['method' + this.dataset.method](this); // Uncaught TypeError: not a function\n            });\n        }\n    }\n\n    methodOne(element) {\n        console.log(element.innerText);\n    }\n\n    methodTwo(element) {\n        console.log(element.innerText);\n    }\n\n}\n\n(function() {\n    new App();\n}());\n</code></pre>\n    ","a":"\n<p>I think you're misunderstanding how ES6 classes work. Your first strategy is not going to work, because this.constructor is a method, not a reference to any constructor class. The second won't work, because that would only reference a static method. </p>\n\n<p>Instead:</p>\n\n<pre><code>constructor() {\n    var elements = document.getElementsByClassName('call-method');\n\n    for(var i = 0; i &lt; elements.length; i++) {\n        elements[i].addEventListener('click', (e) =&gt; {\n            this['method' + e.target.dataset.method](e);\n        });\n    }\n}\n</code></pre>\n\n<p>Also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"nofollow\">arrow functions</a> are going to be a better way to bind the event.</p>\n\n<p>Edit: Updated your fiddle to show it in action - <a href=\"http://jsfiddle.net/dqk8n3xk/3/\" rel=\"nofollow\">http://jsfiddle.net/dqk8n3xk/3/</a></p>\n    "},{"t":"How does this loop work on Es5/Es6?","l":"http://stackoverflow.com/questions/31158222/how-does-this-loop-work-on-es5-es6","q":"\n\n<p>So, trying to learn a bit about ES6, I came over this link, <a href=\"http://es6-features.org/#BlockScopedVariables\" rel=\"nofollow\">http://es6-features.org/#BlockScopedVariables</a></p>\n\n<pre><code>// ES6\n\nlet callbacks = []\nfor (let i = 0; i &lt;= 2; i++) {\n    callbacks[i] = function () { return i * 2 }\n}\ncallbacks[0]() === 0\ncallbacks[1]() === 2\ncallbacks[2]() === 4\n\n// ES5\n\nvar callbacks = [];\nfor (var i = 0; i &lt;= 2; i++) {\n    (function (i) {\n        callbacks[i] = function() { return i * 2; };\n    })(i);\n}\ncallbacks[0]() === 0;\ncallbacks[1]() === 2;\ncallbacks[2]() === 4;\n</code></pre>\n\n<p>May I know why in ES5 Method we are using an immediate function to return the i*2 value?</p>\n\n<p>But in ES6, just assigning the value in loop works?</p>\n\n<p>Basically,</p>\n\n<ol>\n<li>Want to Know why this difference occurs?</li>\n<li>How does that loop is getting executed?</li>\n<li>I find the difference is due to \"block scope (let) &amp; global scope (var)\", but want to know more about the execution/runtime point?</li>\n<li>So we don't want to use immediate function for saving the current state of variable in ES6?</li>\n</ol>\n    ","a":"\n<p>As you say, the difference is between using <code>let</code> which creates a block-scoped variable vs using <code>var</code> which creates an <em>execution context</em> scoped variable - not just global, but the executing function's scope.</p>\n\n<pre><code>// ES6\nvar callbacks = [];\nfor (let i = 0; i &lt;= 2; i++) {\n    // A new LexicalEnvironment is established here, where i only survives\n    // the duration of this 'for' statement\n    // So we can safely say that when function() is called, `i` will have\n    // the value we assign to it here\n    callbacks[i] = function () { return i * 2 }\n}\n</code></pre>\n\n<p>However, in ES5...</p>\n\n<pre><code>// LexicalEnvironment is established here and `i` is declared\nvar callbacks = [];\nfor (var i = 0; i &lt;= 2; i++) {\n    callbacks[i] = function() { return i * 2; };\n}\n// `i` is still available now and its value is currently 2\n// So when you execute `callbacks[2]()` the LexicalEnvironment where `i` was set\n// is the one where i === 3\ncallbacks[0]() // 6\ncallbacks[1]() // 6\ncallbacks[2]() // 6\n</code></pre>\n\n<p>Now, using an IIFE in ES5...</p>\n\n<pre><code>var callbacks = [];\nfor (var i = 0; i &lt;= 2; i++) {\n    // Much like using let, by declaring an IIFE here, we are telling the engine\n    // to create a new LexicalEnvironment to store the current value of i\n    (function (i) {\n        callbacks[i] = function() { return i * 2; };\n    })(i);\n}\n</code></pre>\n    "},{"t":"ECMAScript 6 spread operator in object deconstruction. Support in TypeScript and Babel","l":"http://stackoverflow.com/questions/31115276/ecmascript-6-spread-operator-in-object-deconstruction-support-in-typescript-and","q":"\n\n<p>Is the following valid ECMAScript 6?\nIt seems to be supported by the latest version of Babel but it isn't by TypeScript.\nI couldn't find any ES6 references dealing with this case.</p>\n\n<pre><code>var a = { foo : 'foo' };\nvar b = { ...a };\n</code></pre>\n    ","a":"\n<p>No, this is not valid ECMAScript 6. ES6 does only support rest syntax in function parameters and array destructuring, and spread syntax in function calls and array construction.</p>\n\n<blockquote>\n  <p>It seems to be supported by the latest version of Babel</p>\n</blockquote>\n\n<p>Babel does implement the <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread\" rel=\"nofollow\">objectRestSpread ES7 proposal</a> in its <a href=\"http://babeljs.io/docs/usage/experimental/\" rel=\"nofollow\">experimental mode</a>. You shouldn't use this feature, it may break at any time.</p>\n    "},{"t":"“Variable 'X' can be made constant”, what does 'constant' mean?","l":"http://stackoverflow.com/questions/30691642/variable-x-can-be-made-constant-what-does-constant-mean","q":"\n\n<p>VStudio or ReSharper is giving me the suggestion below:</p>\n\n<p><img src=\"http://i.stack.imgur.com/MghnW.png\" alt=\"enter image description here\"></p>\n\n<p>What does constant mean in this scenario? If it's a constant in the current method scope, what's the purpose? Methods tend to be small and therefore it shouldn't give any advantage compared to be a regular var?</p>\n\n<p>Please enligten me</p>\n    ","a":"\n<p>It's nothing complicated. </p>\n\n<p>It's always better to use <code>const</code> over <code>let</code> (and definitely <code>var</code>), since const makes it a bit easier for other coders, or you when you come back to the same code in the future, to understand what is going on, since you only have to look at the initial assignment to know what the contents of the variable are. Therefore you are encouraged to use it when possible.</p>\n\n<p>It should be noted that though constants can not be reassigned their contents can. So <code>const x = [1]; x[0] = 2;</code> is perfectly valid code, but it screams anti-pattern. There is still the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" rel=\"nofollow\">Object.freeze</a> method if you want immutability all the way, although I'd generally only use this for API's, not within methods.</p>\n\n<p>Some compiler optimizations like inlining are possible through the use of <code>const</code>, therefore its use might give you a slight gain in performance <em>in the future when you don't transpile typescript down to ecmascript 5 or lower anymore</em>. I doubt that these optimizations will help within function scopes though.  </p>\n\n<p>You can run a performance test of <code>var</code> vs <code>let</code> vs <code>const</code> here: <a href=\"https://jsperf.com/let-vs-var-performance/34\" rel=\"nofollow\">https://jsperf.com/let-vs-var-performance/35</a>. On my laptop OSX 10.10.2 with Firefox 38 <code>const</code> is 3% slower than var (which is fastest) and with Chrome 43 <code>const</code> is 1.28% slower than <code>var</code>. Indicating that there is still some optimization work to be done. Note that <code>const</code> in this performance test is being used within a function scope.</p>\n    "},{"t":"When should I use yield and when yield* with Koa.js","l":"http://stackoverflow.com/questions/30457200/when-should-i-use-yield-and-when-yield-with-koa-js","q":"\n\n<p>Browsing through koa samples, docs and middleware, I noticed both forms of <code>yield</code> are being used without any particular difference i noticed. The most extreme case is in koa-mount, where the <a href=\"https://github.com/koajs/mount#mounting-middleware\" rel=\"nofollow\">sample code</a> uses the <code>yield next;</code> form, and the package <a href=\"https://github.com/koajs/mount/blob/master/index.js\" rel=\"nofollow\">itself</a> uses <code>yield*</code> several times. Other packages (<a href=\"https://github.com/queckezz/koa-views/blob/master/index.js\" rel=\"nofollow\">koa-views</a> for example) also use the <code>yield next</code> form.</p>\n\n<p>I understand the difference between the 2 forms as defined by the language, but don't understand how is it that in the context of koa they're used interchangeably and when is it correct to use one over the other.</p>\n\n<h3>EDIT 29/5</h3>\n\n<p>After some more research, I understand that since koa is built on top of co, and co is able to process multiple types of asynchronous  results (thunks, Promises...), it is possible that both are <em>legal</em>, but I'm still not sure what guideline helps decide which form to use in each scenario.</p>\n    ","a":"\n<p>This article - <a href=\"http://www.jongleberry.com/delegating-yield.html\" rel=\"nofollow\">yield next vs. yield* next </a>, from one of koa's team members, explains exactly what this is and why they use it.</p>\n\n<p>There are a few cases where one could use this <code>yield *</code>, as the articles shows, for avoiding extra <code>co</code> calls, or keeping the context (<code>this</code>) when yielding. But then again, it's not really needed - as the author states, \"<em>we don't advocate it to avoid confusion</em>\".</p>\n    "},{"t":"Put router configuration in a separate file in Aurelia","l":"http://stackoverflow.com/questions/29267619/put-router-configuration-in-a-separate-file-in-aurelia","q":"\n\n<p>I am trying to take out router configuration from <code>app.js</code> file and put it in a separate file (<code>app.router.js</code>). This is probably an easy thing to do but I don't know how to do it.</p>\n\n<p>Current <code>app.js</code> file looks like this:</p>\n\n<pre><code>import {Router} from 'aurelia-router';\n\nexport class App {\n\n  static inject() { return [Router]; };\n\n  constructor(router) {\n\n    this.router = router;\n\n    // router - put this part in a separate file\n    this.router.configure(config =&gt; {\n\n      config.title = 'demo';\n      config.options.pushState = true;\n      config.map([\n\n        // home routes\n        { route: ['','home'], moduleId: './home/home', nav: true, title:'Home' },\n\n        // User routes\n        { route: ['user/register'], moduleId: './user/register', nav: true, title:'User Registration'}\n\n      ]);\n\n    });\n\n  }\n}\n</code></pre>\n\n<p>Once the configuration part is in a separate file, I believe I have call it like this in <code>app.js</code>:</p>\n\n<pre><code>this.router.configure(myRouterConfig);\n</code></pre>\n\n<p>Please let me know how to do it with code example.</p>\n    ","a":"\n<p>The solution is easier to understand when you realize that the argument you pass to <code>this.router.configure</code> is just a function. To put your router configuration in a separate file, just have that file export a function that takes one argument (<code>config</code>).</p>\n\n<pre><code>// app.router.js\nexport default function (config) {\n  config.title = 'demo';\n  config.options.pushState = true;\n\n  config.map([\n    // home routes\n    { route: ['','home'], moduleId: './home/home', nav: true, title:'Home' },\n    // User routes\n    { route: ['user/register'], moduleId: './user/register', nav: true, title:'User Registration'}\n  ]);      \n}\n</code></pre>\n\n<p>Then, in <code>app.js</code>:</p>\n\n<pre><code>import appRouter from 'app.router';\n\n// ...then...\nthis.router.configure(appRouter);\n</code></pre>\n\n<p>You can, of course, name <code>appRouter</code> anything you want.</p>\n    "},{"t":"Can't use “let” keyword in Safari Javascript?","l":"http://stackoverflow.com/questions/29194024/cant-use-let-keyword-in-safari-javascript","q":"\n\n<p>I don't understand the best way to use \"let\" keyword...</p>\n\n<ul>\n<li>In IE11 and Chrome45 I can use it fine</li>\n<li>In Safari8.0.4, like in older versions of Chrome, it gives the error \"unexpected use of reserved word 'let'\"</li>\n<li>In Firefox the let keyword only works inside <code>&lt;script type=\"application/javascript;version=1.7\"/&gt;</code>, but this script type isn't even recognized as Javascript in IE11, Chrome45, Safari8.</li>\n</ul>\n\n<p>Here's a JSFiddle that shows it in action: <a href=\"https://jsfiddle.net/p6cgtyg6/1/\" rel=\"nofollow\">https://jsfiddle.net/p6cgtyg6/1/</a></p>\n\n<p>So -- I don't mind requiring users to use modern versions of their browsers.</p>\n\n<p>And I don't mind excluding Safari if there honestly is no version of Safari that supports this keyword. (Is that really true? Why does everyone spend all their time griping about IE when Safari seems so much worse in ES6 terms? Have I missed something?).</p>\n\n<p>But how should I allow \"let\" to work in Firefox while not preventing Chrome/IE? (I haven't yet found links from people griping about how Firefox script tag behaves differently from Chrome, and I'd have expected more complaints, so I figure I must have missed something obvious...)</p>\n    ","a":"\n<p>Concerning Safari 8, it's just <a href=\"https://kangax.github.io/compat-table/es6/#let_basic_support_(strict_mode)\" rel=\"nofollow\">not supported</a> ; for that browser, I'd recommend using <a href=\"https://github.com/babel/babel\" rel=\"nofollow\">Babel</a>.</p>\n\n<p>If you have the gut feeling that <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=932517\" rel=\"nofollow\">this bug</a> won't be fixed anytime soon then you could have a script that detect Firefox which would then inject your script(s) with the appropriate value for the type attribute.</p>\n\n<p>As a side note, I would advise not to use let blocks—unless you wanna use <a href=\"https://github.com/getify/let-er\" rel=\"nofollow\">this transpiler</a>—nor let expressions which <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1023609\" rel=\"nofollow\">will be dropped</a>.</p>\n    "},{"t":"ES6 Promises in Mocha","l":"http://stackoverflow.com/questions/28802603/es6-promises-in-mocha","q":"\n\n<p>I'm using <a href=\"https://github.com/jakearchibald/es6-promise\" rel=\"nofollow\">this polyfill for ES6 promises</a> and Mocha / Chai.  </p>\n\n<p>My assertions for the promises are not working.  The following is a sample test:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>it('should fail', function(done) {\n    new Promise(function(resolve, reject) {\n        resolve(false);\n    }).then(function(result) {\n        assert.equal(result, true);\n        done();\n    }).catch(function(err) {\n        console.log(err);\n    });\n});\n</code></pre>\n\n<p>\nWhen I run this test it fails due to timeout.  The assertion failure that was thrown in the then block is caught in the catch block.  How can I avoid this and just throw it straight to Mocha?  </p>\n\n<p>I could just throw it from the catch function, but then how would I make assertions for the catch block?</p>\n    ","a":"\n<p>I ended up solving my problem by using <a href=\"https://github.com/domenic/chai-as-promised/\" rel=\"nofollow\">Chai as Promised</a>.</p>\n\n<p>It allows you to make assertions about the resolution and rejections of promises:</p>\n\n<ul>\n<li><code>return promise.should.become(value)</code></li>\n<li><code>return promise.should.be.rejected</code></li>\n</ul>\n    "},{"t":"Using ES5 array methods with ES6 generators","l":"http://stackoverflow.com/questions/28541039/using-es5-array-methods-with-es6-generators","q":"\n\n<p>What's the correct way of using the new ES5 array functions with ES6 generators? Do I have to explicitly convert the iterable into an array first, or is there a better way? For example:</p>\n\n<pre><code>function* range(low, high) {\n    var i = low;\n    while(i &lt; high)\n        yield i++;\n}\n\n// Sum of numbers in range, doesn't work\nconsole.log(range(0, 10).reduce((x,y) =&gt; x + y));\n</code></pre>\n    ","a":"\n<p>Generator functions return <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">Iterator</a> objects. The Iterator API does not include higher order Array methods such as <code>map</code>, <code>reduce</code> etc, so you need to build an intermediate Array (or use a library like <a href=\"https://fitzgen.github.io/wu.js/\" rel=\"nofollow\">wu.js</a>).</p>\n\n<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"nofollow\">spread operator</a> to concisely build an Array from a (finite) iterator:</p>\n\n<pre><code>var sum = [...range(0, 10)].reduce((e, i) =&gt; { return e + i })\n</code></pre>\n    "},{"t":"Proper usage with ES6 generators and pagination","l":"http://stackoverflow.com/questions/27866153/proper-usage-with-es6-generators-and-pagination","q":"\n\n<p>I've been thinking about this a bit, and I can't seem to come up with a reasonable solution about how to accomplish this. The problem statement is simple - write a generator that will lazily paginate a remote data set. To simplify things, this is ideally what I'd like for the user of my library to see:</p>\n\n<pre><code>for (var user of users()) { \n  console.log(user); \n}\n</code></pre>\n\n<p>I can't quite seem to get a generator working. I was thinking logic like this would work, but I can't figure out how to implement it.</p>\n\n<pre><code>function* users() {\n  while (canPaginate) {\n    yield* getNextPageOfUsers() // This will need to return an array of users from an http request\n  }\n}\n</code></pre>\n\n<p>I'm sure that I'm thinking about something wrong here, but I can't seem to find any examples of someone using a generator like this (mostly people using them with static data or people doing something like <code>async(function*(){...})</code> which isn't exactly what I'm looking to do). The important part here is that I want the end user to be able to consume the data as described above.</p>\n\n<p>-Vince</p>\n    ","a":"\n<p>Generators are functions that, in effect, pause and yield back to their callers. But when called, they must <em>synchronously</em> either yield back a value or complete. So they can't return the result of an asynchronous operation for the same reason that normal functions can't return the result of an asynchronous operation.</p>\n\n<p>As Benjamin pointed out, there's an ES7 proposal for <a href=\"https://github.com/jhusain/asyncgenerator\" rel=\"nofollow\">asynchronous generators</a> that would let them do that, but that's ES7, and so that's markedly in the future at this point. The consumption syntax is also affected (understandably; it's important for the people writing the call to know when something is going async, we can't have normal functions look synchronous when they aren't).</p>\n\n<p>According to the current proposal, your code using async generators would look something like:</p>\n\n<pre><code>for (var user on users()) { \n  console.log(user); \n}\n</code></pre>\n\n<p>(Note the <code>on</code> instead of <code>in</code> or <code>of</code>.) But that may well change.</p>\n    "},{"t":"ECMAScript 6's function.name property","l":"http://stackoverflow.com/questions/27470212/ecmascript-6s-function-name-property","q":"\n\n<p>Quick question: what's the correct result for this code:</p>\n\n<pre><code>let f = function(){};\nlet n = f.name; //\"\" or \"f\"?\n</code></pre>\n\n<p>According to the <a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"nofollow\"><strong>compat table</strong></a>, <code>n</code> should have the value <code>\"f\"</code>. However, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\" rel=\"nofollow\"><strong>the mozilla docs</strong></a> say that it should return an empty string. Which one is correct?</p>\n    ","a":"\n<p>Since ECMAScript 6 is currently in draft state, the answer below may become outdated sometime in the future.<br>\nThat being said, referencing <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-name\" rel=\"nofollow\"><strong>the spec draft</strong></a>:</p>\n\n<blockquote>\n  <p>Anonymous functions objects that do not have a contextual name\n  associated with them by this specification do not have a <strong>name</strong> own\n  property but inherit the <strong>name</strong> property of %FunctionPrototype%.</p>\n</blockquote>\n\n<p>The <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:function_name_property\" rel=\"nofollow\"><strong>ECMAScript 6 Wiki</strong></a> reads that</p>\n\n<blockquote>\n  <p>If no name can be statically determined, such as in the case of an\n  unassigned anonymous function, then the empty string is used.</p>\n</blockquote>\n\n<p>however,</p>\n\n<blockquote>\n  <p>Some functions are anonymous and have no name given as part of their\n  static semantics. If the function is directly\n  assigned to a LHS where a name is statically determinable then the LHS\n  name is used.</p>\n</blockquote>\n\n<p>Note that the claims made by the wiki aren't referenced (and can't directly be found) in the spec draft, but they're reasonable assumptions.</p>\n\n<p>If we take those assumptions to be true, the result of your sample function call would be <code>\"f\"</code>, since the anonymous function is assigned to a LHS.<br>\nReading the name property of an unassigned anonymous function should return an empty string.</p>\n    "},{"t":"ES6 Template String testbed","l":"http://stackoverflow.com/questions/22563294/es6-template-string-testbed","q":"\n\n<p>I'm really interested in finding out about <a href=\"http://tc39wiki.calculist.org/es6/template-strings/\" rel=\"nofollow\">ES6 Template Strings</a> and have been doing a little bit of reading on the feature.</p>\n\n<p>However now that Chrome Canary does not support it (although maybe I'm wrong about that!) is there anywhere/anything I can use to try out this new functionality? Any browser beta around that does?</p>\n\n<p>I've already enabled Experimental Javascript Features inside <code>chrome://flags</code></p>\n    ","a":"\n<p>It's only <a href=\"http://kangax.github.io/es5-compat-table/es6/#Template_Strings\" rel=\"nofollow\">supported in Traceur at the moment</a>.</p>\n\n<p>You can play with it in <a href=\"http://google.github.io/traceur-compiler/demo/repl.html\" rel=\"nofollow\">their REPL</a>.</p>\n\n<p><a href=\"http://es6fiddle.net\" rel=\"nofollow\">es6fiddle.net</a> doesn't seem to support it yet, but probably will soon.</p>\n\n<p>Mozilla is <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688857\" rel=\"nofollow\">working on it</a> so expect to see it in nightly builds soon as well.</p>\n    "},{"t":"How to prepare for language changes?","l":"http://stackoverflow.com/questions/17707511/how-to-prepare-for-language-changes","q":"\n\n<p>I'm struggling with learning the ins and outs of JavaScript and recently found out that ECMAScript 6 is on its way in-- it seems more and more trivial to learn things that will soon change and be on their way out. I don't know if it's worth it to dive into the intricate details of a ECMAScript5 when a new version is coming out. How should I prepare myself as a programmer for ECMAScript 6 and more generally how do I prepare for evolving languages?</p>\n    ","a":"\n<p>Javascript in context of the web (if that's what you're talking about) is a very different beast.</p>\n\n<p>You need to understand engine deviations and limitations.</p>\n\n<p>Embrace graceful degradation.</p>\n\n<p>Some engines implement ES3. Others fully replaced ES3 conformance with ES5. Some even start to slowly add ES6 features. And to top it all of, some browsers also have non-standard additions that aren't part of either ES3, ES5, or ES6.</p>\n\n<p>You need to deal with all that :)</p>\n\n<p>The good thing is that a big chunk of the language stays unchanged. Even when new features are introduced in some browsers, there's still a trail of older generation engines that usually need to be supported.</p>\n\n<p>You can't go wrong learning ES5 right now; just keep in mind that older browsers don't have some of the new features.</p>\n\n<p>Here's <a href=\"http://kangax.github.io/es5-compat-table/\" rel=\"nofollow\">ES5 compatibility table</a> across most popular browsers.</p>\n\n<p>And here's the <a href=\"http://kangax.github.io/es5-compat-table/es6/\" rel=\"nofollow\">one for ES6</a>.</p>\n\n<p>You can clearly see current state of affairs.</p>\n\n<p>If you're interested in non-standard ES features, <a href=\"http://kangax.github.io/es5-compat-table/non-standard/\" rel=\"nofollow\">take a look at this</a>.</p>\n    "},{"t":"Should I use Object.freeze on a const in ECMAScript 2015?","l":"http://stackoverflow.com/questions/31205975/should-i-use-object-freeze-on-a-const-in-ecmascript-2015","q":"\n\n<p>Despite the fact that a <code>const</code> cannot be assigned to in ECMAScript 2015, the object can be modified if it isn't frozen with <code>Object.freeze</code>.</p>\n\n<p>Since a <code>const</code> is supposed to be immutable, would it make sense to add <code>Object.freeze</code> to freeze the object?<br>\nMost use cases would not require the contents being modifiable after being declared. One exception I thought of would be assigning a <code>class</code> to a <code>const</code> (e.g. <code>const MyClass = class MyClass {}</code>), in which case the properties <em>would</em> need to be changeable (at least for most uses).</p>\n\n<p>I'm not talking about whether ECMAScript 2015 should be changed; I was wondering about whether I should use <code>Object.freeze</code> for <code>const</code>s in everyday code.</p>\n\n<h1>Example</h1>\n\n<pre><code>const firstNames = ['John', 'Daisy'];\n\nfirstNames = []                 // Fails silently\nfirstNames                      // =&gt; ['John', 'Daisy']\n\nfirstNames[0] = 'Replaced!';    // No error and it works!\nfirstNames                      // =&gt; ['Replaced!', 'Daisy']\n</code></pre>\n\n<h1>Example with <code>Object.freeze</code></h1>\n\n<pre><code>const firstNames = Object.freeze(['John', 'Daisy']);\n\nfirstNames = []                 // Throws an error\nfirstNames                      // =&gt; ['John', 'Daisy']\n\nfirstNames[0] = 'Replaced!';    // No error and it works!\nfirstNames                      // =&gt; ['Replaced!', 'Daisy']\n</code></pre>\n    ","a":"\n<blockquote>\n  <p>Should I use Object.freeze for consts in everyday code?</p>\n</blockquote>\n\n<p><strong>Yes</strong>, I think that would be a good practise. It does give you the same advantages as <code>const</code> - failing on mistakes instead of carrying on (in strict mode, of course). It's also a more declarative style of code, clearly stating the intention that the object is not supposed to be mutated.</p>\n\n<p>Yet, iirc frozen objects are still a bit slower than normal ones. If you have really performance-critical code, you'll have to know this. It shouldn't stop you from using <code>Object.freeze</code> in general, though<sup>1</sup>.</p>\n\n<p>You shouldn't however rely on the exceptions thrown when accessing frozen objects. It's likely that you have to transpile your code to ES3 where freezing is not supported.</p>\n\n<p><sub>1) And the more people use it every day, the sooner engines will optimise this - it's overdue imo :-)</sub></p>\n    "},{"t":"ReactJS with ES6: this.props is not a function when I communicate two components","l":"http://stackoverflow.com/questions/31141444/reactjs-with-es6-this-props-is-not-a-function-when-i-communicate-two-components","q":"\n\n<p>I'm working with ReactJS with ES6, but I have some problems to communicate child &gt; parent through props. Example of my approach:</p>\n\n<pre><code>class SearchBar extends React.Component {\n  handler(e){\n    this.props.filterUser(e.target.value);\n  }\n\n  render () {\n  return &lt;div&gt;\n    &lt;input type='text' className='from-control search-bar' placeholder='Search' onChange={this.handler} /&gt;\n  &lt;/div&gt;\n  }\n}\n\n\nexport default class User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: '', age: '', filter: ''};\n  } \n\n  filterUser(filterValue){\n    this.setState({\n      filter: filterValue\n    });\n  }\n\n  render() {\n    return &lt;div&gt;\n      &lt;SearchBar filterUser={this.filterUser} /&gt;\n      &lt;span&gt;Value: {this.state.filter}&lt;/span&gt;\n    &lt;/div&gt;\n  }\n}\n</code></pre>\n\n<p>This returns <code>Uncaught TypeError: this.props.filterUser is not a function</code>.</p>\n\n<p>Any idea? Binding maybe?</p>\n\n<p><strong>[EDIT] Solution (Thanks @knowbody &amp; @Felipe Skinner):</strong></p>\n\n<p>I was missing binding in my constructor. Binding in the SearchBar constructor works perfectly.</p>\n\n<p>Using <code>React.createClass()</code> (ES5), it automatically does bindings to <code>this</code> for your functions. In ES6 you need bind <code>this</code> manually. More info <a href=\"https://facebook.github.io/react/docs/reusable-components.html#es6-classes\" rel=\"nofollow\">https://facebook.github.io/react/docs/reusable-components.html#es6-classes</a></p>\n    ","a":"\n<p>You are missing binding in your constructor, also you don't need to pass <code>props</code> if you are not using them in the constructor. Also you need to <code>import { PropTypes } from 'react'</code> </p>\n\n<pre><code>class SearchBar extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handler = this.handler.bind(this);\n  }\n\n  handler(e){\n    this.props.filterUser(e.target.value);\n  }\n\n  render () {\n    return (\n      &lt;div&gt;\n        &lt;input type='text' className='from-control search-bar' placeholder='Search' onChange={this.handler} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n\nexport default class User extends React.Component {\n  constructor() {\n    super();\n    this.filterUser = this.filterUser.bind(this);\n    this.state = {name: '', age: '', filter: ''};\n  } \n\n  filterUser(filterValue){\n    this.setState({\n      filter: filterValue\n    });\n  }\n\n  render() {\n    return ( \n      &lt;div&gt;\n        &lt;SearchBar filterUser={this.filterUser} /&gt;\n        &lt;span&gt;Value: {this.state.filter}&lt;/span&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n    "},{"t":"Why doesn't my Deferred run the error method?","l":"http://stackoverflow.com/questions/30459793/why-doesnt-my-deferred-run-the-error-method","q":"\n\n<p>I have created this simple code to simulate <code>resolve</code> , <code>reject</code> , <code>error</code> : </p>\n\n<pre><code>function $http(){\n  var core = {\n    factory : function (action) {\n      var promise = new Promise( function (resolve, reject) {\n\n        if (action==='resolve')  resolve({r:'Resolved'});\n        if (action==='error')    throw Error(\"error\");\n        if (action==='reject')   reject({r:'Reject'});\n      });\n      return promise;\n\n  } \n  };\n  return {\n    'simulate' : function(a) {\n      return core.factory(a);\n    }\n  };\n}\n\nvar callback = {\n  success : function(data){\n     console.log(1, 'success', data.r);\n  },\n  error : function(data){\n     console.log(2, 'error',data.r);\n  },\n   reject : function(data){\n     console.log(3, 'reject', data.r);\n  }\n};\n</code></pre>\n\n<p>Now let's invoke them : </p>\n\n<pre><code>$http().simulate('resolve')\n       .then(callback.success,callback.reject)\n       .catch(callback.error); //\"success\" \"Reolved\"\n\n$http().simulate('reject')\n       .then(callback.success,callback.reject)\n       .catch(callback.error); //\"reject\" \"Reject\"\n\n$http().simulate('error')\n       .then(callback.success,callback.reject)\n       .catch(callback.error);//\"reject\" undefined\n</code></pre>\n\n<p>As you can see both reject/resolve are working.</p>\n\n<p><strong>Question:</strong></p>\n\n<p>Why doesn't the : </p>\n\n<pre><code> error : function(data){\n     console.log(2, 'error',data.r);\n  }\n</code></pre>\n\n<p>Function runs , when I simulate <code>error</code>  ? </p>\n\n<p><a href=\"http://jsbin.com/humobe/3/edit\" rel=\"nofollow\"><strong>Full Jsbin</strong></a></p>\n    ","a":"\n<blockquote>\n  <p>Why doesn't the</p>\n\n<pre><code>error : function(data){\n    console.log(2, 'error',data.r);\n}\n</code></pre>\n  \n  <p>function run, when I simulate <code>error</code>?</p>\n</blockquote>\n\n<p>As per the ECMA Script 6 Promise specifications, when you create a Promise with <code>Promise</code> constructor, the promise object created will have two internal slots, <code>[[PromiseFulfillReactions]]</code> and <code>[[PromiseRejectReactions]]</code>, which are actually lists and they will hold all the corresponding fulfill and reject handlers respectively.</p>\n\n<p>When you attach a <code>then</code> handler to a promise object, the fulfillment handler will be added to <code>[[PromiseFulfillReactions]]</code> list and the rejection handler will be added to <code>[[PromiseRejectReactions]]</code> list. When the promise is fulfilled, all the handlers in <code>[[PromiseFulfillReactions]]</code> will be invoked, similarly when the state changes from <code>pending</code> to <code>rejected</code> all the rejection handlers will be invoked.</p>\n\n<p>In both these cases,</p>\n\n<pre><code>$http().simulate('reject')\n       .then(callback.success, callback.reject)\n       .catch(callback.error);   //\"reject\" \"Reject\"\n\n$http().simulate('error')\n       .then(callback.success, callback.reject)\n       .catch(callback.error);  //\"reject\" undefined\n</code></pre>\n\n<p><code>$http().simulate('reject')</code> and <code>$http().simulate('error')</code> create new promises and when you attach then <code>then</code> handler, the <code>callback.success</code> and <code>callback.reject</code> get added in to the respective reactions list. In both the cases, <strong>throwing an <code>Error</code> and rejecting will be treated as rejecting the promise only.</strong> Since there is only one handler in the <code>[[PromiseRejectReactions]]</code> for both the cases that is executed. That is why only <code>callback.reject</code> is called on both the occasions.</p>\n\n<hr>\n\n<p>What if you have defined the last case, like this</p>\n\n<pre><code>$http().simulate('error')\n       .then(callback.success)\n       .catch(callback.error);\n</code></pre>\n\n<p>Now, the <code>then</code> handler doesn't have a onRejected handler. But the important point to be noted here is, all <strong>the <code>then</code> handlers will be creating new promises and return them</strong>. So, since the rejection handler is not available with the current <code>then</code>, it will create a rejected promise and return it. And <strong>the <code>.catch(callback.error)</code> is just syntactic sugar for <code>.then(undefined, callback.error)</code></strong>. The rejected promise's reject reactions list will get the <code>callback.error</code> function and that will be invoked, as the promise is rejected.</p>\n    "},{"t":"Is it possible to wrap promise inside generator?","l":"http://stackoverflow.com/questions/29913122/is-it-possible-to-wrap-promise-inside-generator","q":"\n\n<p>I'm trying to create a promise-wrapper using generator so that I can do:</p>\n\n<pre><code>var asyncResult = PromiseWrapper( $.ajax( ... ) );\n</code></pre>\n\n<p>So far, I've been trying with:</p>\n\n<pre><code>function PromiseWrapper(promise){\n    return function *wrapper(promise){\n        promise.then(function(result){\n            yield result;\n        }, function(err){\n            throw err;\n        });\n    }(promise).next().value\n}\n</code></pre>\n\n<p>but this fails because yielding inside a normal is not allowed.\nIs there any work-around for this? Thank you :D</p>\n\n<p>ps: I'm using babel to translate the code from es6 to es5</p>\n    ","a":"\n<p>WTH are you trying to do? No, it is utterly impossible to wrap a promise in a generator that synchronously yields the promise's result, because promises are always asynchronous. There is no workaround for that, unless you throw mightier weapons like fibers at the asynchrony.</p>\n    "},{"t":"Is it possible to destructure onto an existing object? (Javascript ES6)","l":"http://stackoverflow.com/questions/29620686/is-it-possible-to-destructure-onto-an-existing-object-javascript-es6","q":"\n\n<p>For example if I have two objects: </p>\n\n<pre><code>var foo = {\n  x: \"bar\",\n  y: \"baz\"\n}\n</code></pre>\n\n<p>and </p>\n\n<pre><code>var oof = {}\n</code></pre>\n\n<p>and I wanted to transfer the x and y values from foo to oof. Is there a way to do that using the es6 destructuring syntax?</p>\n\n<p>perhaps something like: </p>\n\n<pre><code>oof{x,y} = foo\n</code></pre>\n    ","a":"\n<p>No, destructuring does not support member expressions but only plain propertynames at the current time. There <a href=\"https://mail.mozilla.org/pipermail/es-discuss/2015-March/042195.html\" rel=\"nofollow\">have been talks</a> about such on esdiscuss, but no proposals will make it into ES6.</p>\n\n<p>You might be able to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow\"><code>Object.assign</code></a> however - if you don't need all own properties, you still can do</p>\n\n<pre><code>var foo = …,\n    oof = {};\n{\n    let {x, y} = foo;\n    Object.assign(oof, {x, y})\n}\n</code></pre>\n    "},{"t":"Exporting a class with ES6 (Babel)","l":"http://stackoverflow.com/questions/29353728/exporting-a-class-with-es6-babel","q":"\n\n<p>I'm writing some frontend code with ECMAScript 6 (transpiled with BabelJS, and then browserified with Browserify) so that I can have a class in one file, export it and import it in another file.</p>\n\n<p>The way I'm doing this is:</p>\n\n<pre><code>export class Game {\n    constructor(settings) {\n\n    ...\n\n    }\n}\n</code></pre>\n\n<p>And then on the file that imports the class I do:</p>\n\n<pre><code>import {Game} from \"../../lib/pentagine_browserified.js\";\nvar myGame = new Game(settings);\n</code></pre>\n\n<p>I then compile it with <code>grunt</code>, this is my <code>Gruntfile</code>:</p>\n\n<pre><code>module.exports = function(grunt) {\n  \"use strict\";\n\n  grunt.loadNpmTasks('grunt-babel');\n  grunt.loadNpmTasks('grunt-browserify');\n\n  grunt.initConfig({\n    \"babel\": {\n      options: {\n\n        sourceMap: false\n      },\n      dist: {\n        files: {\n          \"lib/pentagine_babel.js\": \"lib/pentagine.js\",\n          \"demos/helicopter_game/PlayState_babel.js\": \"demos/helicopter_game/PlayState.js\"\n        }\n      }\n    },\n\n    \"browserify\": {\n      dist: {\n        files: {\n          \"lib/pentagine_browserified.js\": \"lib/pentagine_babel.js\",\n          \"demos/helicopter_game/PlayState_browserified.js\": \"demos/helicopter_game/PlayState_babel.js\"\n        }\n      }\n    }\n  });\n\n  grunt.registerTask(\"default\", [\"babel\", \"browserify\"]);\n};\n</code></pre>\n\n<p>However, on the <code>new Game(</code> call, I get the following error:</p>\n\n<pre><code>Uncaught TypeError: undefined is not a function\n</code></pre>\n\n<p>As so, what I did was analyse the generated code by Babel and Browserify and I found this line on <code>PlayState_browserified.js</code>:</p>\n\n<pre><code>var Game = require(\"../../lib/pentagine_browserified.js\").Game;\n</code></pre>\n\n<p>I decided to print the <code>require</code> output:</p>\n\n<pre><code>console.log(require(\"../../lib/pentagine_browserified.js\"));\n</code></pre>\n\n<p>And it is nothing but an empty object. I decided to check out the <code>pentagine_browserified.js</code> file:</p>\n\n<pre><code>var Game = exports.Game = (function () {\n</code></pre>\n\n<p>It seems like it is correctly exporting the class, but for some other reason it is not being required on the other file.</p>\n\n<p>Also, I'm sure the file is being required properly because changing the string <code>\"../../lib/pentagine_browserified.js\"</code> spits out a <code>Not Found</code> error, so it is going for the right file, that I'm sure about.</p>\n    ","a":"\n<p>Browserify is meant to be fed a single \"entry point\" file, through which it recursively traverses all of your <code>require</code> statements, importing the code from other modules. So you should be <code>require</code>'ing the <code>_babel.js</code> versions of modules, not <code>_browserified.js</code> ones.</p>\n\n<p>From the looks of it, you intend for your app's \"entry point\" to be <code>demos/helicopter_game/PlayState_browserified.js</code>, yeah? If that's the case:</p>\n\n<ul>\n<li>In PlayState.js, change it to <code>import {Game} from \"../../lib/pentagine_babel.js\";</code>.</li>\n<li>In Gruntfile.js, remove <code>\"lib/pentagine_browserified.js\": \"lib/pentagine_babel.js\"</code>.</li>\n</ul>\n\n<p>Works for me. Let me know if that suffices or I am misunderstanding your requirements here.</p>\n\n<p>P.S. You can use <a href=\"https://github.com/babel/babelify\" rel=\"nofollow\">babelify</a> to avoid having separate Grunt tasks for Babel and Browserify. See my answer <a href=\"http://stackoverflow.com/a/29426373\">here</a> for an example.</p>\n    "},{"t":"Generator functions with next() call","l":"http://stackoverflow.com/questions/28743794/generator-functions-with-next-call","q":"\n\n<p>I had a look on the new future from <code>ecmascript 6</code> - generator functions and I'm a bit confused about what <code>.next()</code> function does. </p>\n\n<p>In the official documentation they say, and I quote : <code>A zero arguments function that returns an object with two properties:</code>, information updated on <code>Feb 17, 2015 4:57:46 PM</code> according to their <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"nofollow\">website</a> ( <code>&lt;-</code> link to documentation provided here )</p>\n\n<p>So, let's say we have this generator function :</p>\n\n<pre><code> function* first(){\n    yield 1;\n    yield 2;\n }\n var f= first();\n</code></pre>\n\n<p>When calling <code>f.next()</code> will return <code>{value:1, done:false}</code>. When you call it again will return <code>{value:2, done:true}</code></p>\n\n<p>BUT, if we have something like this:</p>\n\n<pre><code>function* second() {\n  var a = yield \"HELLO\";\n  console.log(\"a = \", a);\n\n  var b = yield a+ 1;\n  console.log(\"b = \", b);\n\n  return b\n}\nvar f= second();\n</code></pre>\n\n<p>When you call it like this: <code>f.next()</code> you'll receive <code>{value: \"HELLO\", done: false}</code></p>\n\n<p>Next call  will be <code>f.next(1)</code>, which will assign 1 to a, and it will output <code>{value: 2, done: false}</code></p>\n\n<p>Next call will be <code>f.next(1)</code>, which will output <code>{value: 1, done: true}</code></p>\n\n<p><strong>Questions</strong></p>\n\n<ol>\n<li>How it's possible you can call <code>.next()</code> with parameter if in the official documentations it's stated it's a zero parameter function ?</li>\n<li>Why at 3rd result has <code>value</code> property equal to 1  and at the second call it's equal to 2?</li>\n<li>Why b is 1 and not 2 ?</li>\n</ol>\n\n<p>Thank you !</p>\n\n<pre><code>PS: Of course, there's another usage of generator functions ( to avoid callbacks ), but I'm asking about this particular case. \n</code></pre>\n    ","a":"\n<blockquote>\n  <ol>\n  <li>How it's possible you can call .next() with parameter if in the official documentations it's stated it's a zero parameter function ?</li>\n  </ol>\n</blockquote>\n\n<p>Quoting the <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface\" rel=\"nofollow\">draft version of ES-6</a>,</p>\n\n<blockquote>\n  <p><strong>Arguments may be passed to the <code>next</code> function but their interpretation and validity is dependent upon the target Iterator.</strong> The <code>for-of</code> statement and other common users of Iterators do not pass any arguments, so Iterator objects that expect to be used in such a manner must be prepared to deal with being called with no arguments.</p>\n</blockquote>\n\n<p>So, passing arguments to <code>next</code> doesn't violate the ES6 specifications. In this case, the value passed to <code>next</code> will be assigned to the variable you are assigning the <code>yield</code> expression to.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Why at 3rd result has value property equal to 1 and at the second call it's equal to 2?</li>\n  <li>Why b is 1 and not 2 ?</li>\n  </ol>\n</blockquote>\n\n<p>The list of operations in the order as they happen</p>\n\n<ol>\n<li><p><strong><code>f.next()</code></strong></p>\n\n<pre><code>yield \"HELLO\"\n</code></pre>\n\n<p>So you are getting <code>{ value: 'HELLO', done: false }</code></p></li>\n<li><p><strong><code>f.next(1)</code></strong></p>\n\n<pre><code>var a = 1;\nconsole.log(\"a = \", a);\nyield a + 1\n</code></pre>\n\n<p>That is why you are getting <code>{ value: 2, done: false }</code> in this call.</p></li>\n<li><p><strong><code>f.next(1)</code></strong></p>\n\n<pre><code>var b = 1;\nconsole.log(\"b = \", b);\nreturn b\n</code></pre>\n\n<p>That is why you are getting <code>{ value: 1, done: true }</code> here.</p></li>\n</ol>\n    "},{"t":"Transforming a Javascript iterator into an array","l":"http://stackoverflow.com/questions/28718641/transforming-a-javascript-iterator-into-an-array","q":"\n\n<p>I'm trying to use the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"nofollow\">Map</a> object from Javascript EC6, since it's already supported in the latest Firefox and Chrome versions.</p>\n\n<p>But I'm finding it very limited in \"functional\" programming, because it lacks classic map, filter etc. methods that would work nicely with a <code>[key, value]</code> pair. It has a forEach but that does NOT returns the callback result.</p>\n\n<p>If I could transform its <code>map.entries()</code> from a MapIterator into a simple Array I could then use the standard <code>.map</code>, <code>.filter</code> with no additional hacks.</p>\n\n<p>Is there a \"good\" way to transform a Javascript Iterator into an Array?\nIn python it's as easy as doing <code>list(iterator)</code>... but <code>Array(m.entries())</code> return an array with the Iterator as its first element!!!</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I forgot to specify I'm looking for an answer which works wherever Map works, which means at least Chrome and Firefox (Array.from does not work in Chrome).</p>\n\n<p><strong>PS.</strong></p>\n\n<p>I know there's the fantastic <a href=\"https://fitzgen.github.io/wu.js/\" rel=\"nofollow\">wu.js</a> but its dependency on traceur puts me off...</p>\n    ","a":"\n<p>You are looking for the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"nofollow\"><code>Array.from</code> function</a> which converts arbitrary iterables to array instances:</p>\n\n<pre><code>var arr = Array.from(map.entries());\n</code></pre>\n\n<p>It's not yet supported on Chrome, but can be <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill\" rel=\"nofollow\">shimmed</a> (or you can write your own simple one for Maps).</p>\n\n<p>Of course, it might be worth to define <code>map</code>, <code>filter</code> and similar methods directly on the iterator interface, so that you can avoid allocating the array. You also might want to use a generator function instead of higher-order functions:</p>\n\n<pre><code>function* map(iterable) {\n    var i = 0;\n    for (var item of iterable)\n        yield yourTransformation(item, i++);\n}\nfunction* filter(iterable) {\n    var i = 0;\n    for (var item of iterable)\n        if (yourPredicate(item, i++))\n             yield item;\n}\n</code></pre>\n    "},{"t":"ES6 why can I reassign a constant when defined in a loop","l":"http://stackoverflow.com/questions/28344365/es6-why-can-i-reassign-a-constant-when-defined-in-a-loop","q":"\n\n<p>I am playing around with some pointless logic to better understand ES6 and have noticed a strange occurrence when defining a constant.</p>\n\n<p>It seems possible to change a constant assignment when defined in a loop:</p>\n\n<pre><code>        \"use strict\";\n\n        for(const i=0;i&lt;10;i++){ //seting constant in loop\n            console.log(i); //is reassigned and incremented 0,1,2,3...\n        }\n\n\n        const e = 0; //setting constant outside loop\n        for(;e&lt;10;e++){ //cannot reassign constant\n            console.log(e);\n        }\n</code></pre>\n\n<p>Is this expected behavior and can anyone shed some light on why this occurs, is declaration in the loop different?</p>\n\n<p><img src=\"http://i.stack.imgur.com/fDhe8.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p>Update from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\" rel=\"nofollow\">Statements/const</a></p>\n\n<blockquote>\n  <p>This declaration creates a constant that can be global or local to the\n  function in which it is declared. Constants are block-scoped.</p>\n</blockquote>\n    ","a":"\n<p><s>When you modify an \"immutable binding\", the <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records-setmutablebinding-n-v-s\" rel=\"nofollow\">current draft</a> only throws in the strict mode:</s></p>\n\n<p>As @kangax pointed out, reassignment of a constant should always throw, since <code>const</code> creates an \"immutable binding\" with the <code>strict</code> flag on (<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-blockdeclarationinstantiation\" rel=\"nofollow\">here</a>):</p>\n\n<blockquote>\n  <p>If IsConstantDeclaration of d is true, then</p>\n  \n  <p>Call env’s CreateImmutableBinding concrete method passing dn and true as the arguments.</p>\n</blockquote>\n\n<p>and <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-declarative-environment-records-setmutablebinding-n-v-s\" rel=\"nofollow\">then</a>:</p>\n\n<blockquote>\n  <p>SetMutableBinding (N,V,S)\n  ...</p>\n  \n  <ol start=\"5\">\n  <li>Else if the binding for N in envRec is a mutable binding, change its bound value to V.</li>\n  <li>Else this must be an attempt to change the value of an immutable binding so <strong>if S is true throw a TypeError exception.</strong></li>\n  </ol>\n</blockquote>\n\n<p>However, node only throws in strict mode:</p>\n\n<pre><code>\"use strict\";\n\nconst e = 0;\ne = 42;  // SyntaxError: Assignment to constant variable.\n</code></pre>\n\n<p>(it's not clear why this is a \"SyntaxError\")...</p>\n\n<p>In the non-strict mode, the assignment to the constant is silently ignored:</p>\n\n<pre><code>const e = 0;\ne = 42;\nconsole.log(e); // 0\n</code></pre>\n\n<p>Tested with node v0.10.35 with <code>--harmony</code> flag.</p>\n    "},{"t":"Javascript Es6 Tagged Templates - When is raw used? When is cooked used?","l":"http://stackoverflow.com/questions/27782577/javascript-es6-tagged-templates-when-is-raw-used-when-is-cooked-used","q":"\n\n<p>After studying this Es6 tag template example:</p>\n\n<pre><code>var yo = func`${x} + ${y}\\n= ${x + y}`;\n</code></pre>\n\n<hr>\n\n<pre><code>one@public-node ~/es6 $ 6to5 tag.js \n\"use strict\";\n\nvar _taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nvar yo = func(_taggedTemplateLiteral([\"\", \" + \", \"\\n= \", \"\"], [\"\", \" + \", \"\\\\n= \", \"\"]), x, y, x + y);\n</code></pre>\n\n<hr>\n\n<p>I see what is returned is <code>var yo = func(strings, raw, x, y, x + y);</code></p>\n\n<p>I understand the basics about the string literals and the <code>x</code> <code>y</code> values being inserted. What I don't understand is...when is strings used versus when is raw used? Since the function has both arrays and the user doesn't have control to tell the function when to use raw and when to use cooked(strings).   </p>\n    ","a":"\n<p>The tag function <code>func</code> is passed just one array. That array comes from the <code>_taggedTemplateLiteral</code> function, which takes the incoming \"strings\" parameter and adds a single property to it.</p>\n\n<p>The function <code>func</code> would be declared like this (ES5-style):</p>\n\n<pre><code>function func(strings) {\n  var params = [].slice.call(arguments, 1);\n  // do stuff\n}\n</code></pre>\n\n<p>If, inside <code>func</code>, the code needed to use the \"raw\" strings, it would just access the <code>.raw</code> property of the \"strings\" variable:</p>\n\n<pre><code>function func(strings) {\n  var params = [].slice.call(arguments, 1);\n\n  var raw2 = strings.raw[2];\n\n  // do stuff\n}\n</code></pre>\n\n<p>So the \"user\" — the author of the tag function — <strong>does</strong> have control. Code in the tag function is free to examine the original content of the template parts whenever it wants. It's probably the case that tag functions that essentially implement a DSL might want to <em>only</em> use the raw strings, while simpler template mechanisms won't care and will be happy to use the \"parsed\" strings.</p>\n    "},{"t":"Equivalent of Function.prototype.apply for an ES6 generator","l":"http://stackoverflow.com/questions/27411262/equivalent-of-function-prototype-apply-for-an-es6-generator","q":"\n\n<p>I'm trying to build a chainable JavaScript API. (I’m running this in a recent version of V8 with iterators and generators enabled.) In the example below, <code>setState</code> is chainable. It also allows you to call it without having to explicitly create a new <code>Builder</code> instance. The <code>chain()</code> helper function handles that and automatically returns that instance so <code>setState</code> doesn't have to worry about it. (First-class functions for the win!) </p>\n\n<p>In addition to the chainable methods I want some \"terminating\" methods. The kicker is that these \"terminators\" are generators. The generators yield internal state of a <code>Builder</code> instance. The problem is that I can’t figure out an equivalent to <code>f.apply(that, arguments)</code> for a generator. I want to be able to call a generator and set its <code>this</code> context at runtime, just like you're able to do with <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>.</p>\n\n<p>The work-around, commented with <code>Yuck!</code>, is to expose both the delegated <em>and</em> the original generator on the <code>Builder.prototype</code>, calling the original from the delegated. Is there any way to implement the equivalent wrapping like the <code>chain</code> method without having to expose the <code>_generate</code> method on the <code>Builder.prototype</code>?</p>\n\n<pre><code>function Builder() { this.initialState = 'initialState'; };\nBuilder.prototype.setState = chain(function(k, v) { this[k] = v; });\nBuilder.prototype.generate = delegate(generate, '_generate'); // Yuck!\nBuilder.prototype._generate = generate;\n\n\nfunction chain(f) {\n  return function() {\n    var that = (this instanceof Builder) ? this : new Builder();\n    f.apply(that, arguments); // Pass through arguments\n    return that;\n  }\n}\n\nfunction delegate(gen, _gen) {\n  return function*() {\n    var that = (this instanceof Builder) ? this : new Builder();\n    that.setState('delegated', true);               \n    yield *that[_gen](); // Yuck!\n  }\n}\n\nfunction *generate(opts) {\n  var i = 0;\n  for(var i = 0; i &lt; 10; i++) {\n    yield [Object.keys(this), opts, i].join(',');\n  }\n}\n\n// Set up a namespace\nvar ns = {};\nns.setState = Builder.prototype.setState;\nns.generate = Builder.prototype.generate;\n\n\nvar itr = ns\n//  .setState('a', 'A')\n//  .setState('b', 'B')\n//  .setState('c', 'C')\n  .generate('options');\n\n\nvar out = [];\nfor(var value of itr) { out.push(value); }\nout;\n</code></pre>\n\n<p>Which returns</p>\n\n<pre><code>[\n  \"initialState,delegated,,0\",\n  \"initialState,delegated,,1\",\n  \"initialState,delegated,,2\",\n  \"initialState,delegated,,3\",\n  \"initialState,delegated,,4\",\n  \"initialState,delegated,,5\",\n  \"initialState,delegated,,6\",\n  \"initialState,delegated,,7\",\n  \"initialState,delegated,,8\",\n  \"initialState,delegated,,9\"\n]\n</code></pre>\n    ","a":"\n<p>The key was <code>yield *gen.apply(that, arguments)</code> in the anonymous generator wrapper.</p>\n\n<pre><code>function Builder() { this.initialState = 'initialState'; };\nBuilder.prototype.setState = chain(function(k, v) { this[k] = v; });\nBuilder.prototype.generate = delegate(generate); \n\n// Reuses or creates a Builder instance and makes it `this` for calling `f`.\n// Returns the Builder instance.\nfunction chain(f) {\n  return function() {\n    var that = (this instanceof Builder) ? this : new Builder();\n    f.apply(that, arguments); // Pass through arguments\n    return that;\n  }\n}\n\n// Similar to `chain()` to create a Builder instance if it doesn't exist.\n// Generators are terminal, though, so this returns the FunctionGenerator.\nfunction delegate(gen) {\n  return function*() {\n    var that = (this instanceof Builder) ? this : new Builder();\n    that.setState('delegated', true);               \n    yield *gen.apply(that, arguments);\n  }\n}\n\nfunction *generate(opts) {\n  var i = 0;\n  for(var i = 0; i &lt; 10; i++) {\n    yield [Object.keys(this), opts, i].join(',');\n  }\n}\n\n// Set up a namespace\nvar ns = {};\nns.setState = Builder.prototype.setState;\nns.generate = Builder.prototype.generate;\n\n\nvar itr = ns\n//  .setState('a', 'A')\n//  .setState('b', 'B')\n//  .setState('c', 'C')\n  .generate('options');\n\n\nvar out = [];\nfor(var value of itr) { out.push(value); }\nout;\n</code></pre>\n    "},{"t":"React and ES6 inheritance","l":"http://stackoverflow.com/questions/27233491/react-and-es6-inheritance","q":"\n\n<p>I have an ES6 class :</p>\n\n<pre><code>class BaseClass {\n  getInitialState(){\n      return {message: 'Hello!'};\n  }\n\n  render() {\n      return (\n            &lt;div&gt;\n                &lt;div&gt;{this.state.message}&lt;/div&gt;\n            &lt;/div&gt;\n        )\n  }\n}\n</code></pre>\n\n<p>That I can export in ES6 using this expression (source : <a href=\"https://github.com/tcoopman/react-es6-browserify\" rel=\"nofollow\">react ES6 browserify</a>)</p>\n\n<pre><code>export default React.createClass(BaseClass.prototype)\n</code></pre>\n\n<p>This works fine. Now I would like to use ES6 inheritance to extend my <code>BaseClass</code> class :</p>\n\n<pre><code>class ExtendedClass extends BaseClass{\n    getInitialState(){\n        return {message: \"Hello! I'm an extension\"};\n    }\n}\n</code></pre>\n\n<p>But when I call <code>React.createClass</code> on the <code>ExtendedClass</code> class, I got the following exception :</p>\n\n<pre><code>Invariant Violation: ReactCompositeComponentInterface: You are attempting to define `constructor` on your component more than once. This conflict may be due to a mixin.\n</code></pre>\n\n<p>I know React 0.13 is supposed to be more ES6 friendly but is there any ways to handle that ?</p>\n\n<p><strong>EDIT:</strong> </p>\n\n<p>I'm using Traceur to compile my ES6 classes. The output for <code>ExtendedClass</code> looks like :</p>\n\n<pre><code>function ExtendedClass() {\n  \"use strict\";\n  if (BaseClass !== null) {\n    BaseClass.apply(this, arguments);\n  }\n}\nfor (BaseClass____Key in BaseClass) {\n    if (BaseClass.hasOwnProperty(BaseClass____Key)) {\n      ExtendedClass[BaseClass____Key] = BaseClass[BaseClass____Key];\n    }\n  }\n  ____SuperProtoOfBaseClass = BaseClass === null ? null : BaseClass.prototype;\n  ExtendedClass.prototype = Object.create(____SuperProtoOfBaseClass);\n  ExtendedClass.prototype.constructor = ExtendedClass;\n  ExtendedClass.__superConstructor__ = BaseClass;\n  ExtendedClass.prototype.getInitialState = function() {\n    \"use strict\";\n    return {message: \"Hello! I'm an extension\"};\n  };\n  React.createClass(ExtendedClass.prototype);\n</code></pre>\n    ","a":"\n<p>Here is the workaround I've found :</p>\n\n<p>Inside <code>React.js</code> library, I've updated the <code>ReactCompositeComponentInterface</code> to add a custom policy for <code>constructor</code> (As far as I know there's no way to customize this 'interface' properly) :</p>\n\n<pre><code>var ReactCompositeComponentInterface = {\n\n/**\n * An array of Mixin objects to include when defining your component.\n *\n * @type {array}\n * @optional\n */\nmixins: SpecPolicy.DEFINE_MANY,\n\n/**\n * Custom policy for 'constructor'\n */\nconstructor: SpecPolicy.DEFINE_MANY,\n\n  ...\n\n}\n</code></pre>\n\n<p>Then in the <code>ExtendedClass</code>, you have to redefine every method even if you don't customize them :</p>\n\n<pre><code>class ExtendedClass extends BaseClass{\n    getInitialState(){\n        return {message: \"Hello! I'm an extension\"};\n    }\n    /** required */\n    render(){\n        return super.render();\n    }\n}\n</code></pre>\n\n<p>I'm not happy with this dirty solution but it will do the job waiting for a 0.13 version that hopefully will solve those issues.</p>\n    "},{"t":"ES6 module concatenation","l":"http://stackoverflow.com/questions/26791640/es6-module-concatenation","q":"\n\n<p>Developing a web project in <strong>JavaScript ES6</strong>, I currently use <a href=\"https://github.com/google/traceur-compiler\" rel=\"nofollow\">Traceur</a> to compile my modules from ES6 to ES5, thinking that in the future, when browser will support ES6, I would be able to skip that transpilation step.</p>\n\n<p>In the end, because I don't want to download several js pieces at start up, I have a single file that contains all my modules converted into ES5, thanks to Traceur.</p>\n\n<p>But to validate this choice, I was wondering if this could still be possible the day I would keep the source in ES6. If I simply concatenate them, there will be invalid imports and name conflicts.</p>\n\n<p>It looks like it has not been designed for it and it would require a extra processing step to merge them correctly.</p>\n\n<p>How are we suppose to handle ES6 single file project defined with several modules ?</p>\n    ","a":"\n<p>This will be solved by bundling, as described here: <a href=\"http://www.2ality.com/2013/11/es6-modules-browsers.html\" rel=\"nofollow\">http://www.2ality.com/2013/11/es6-modules-browsers.html</a> in chapter 3.\nSo this is possible and validate your approach, although I couldn't find an implementation of the corresponding compilation step on the web, but it should arise when people start using ES6 modules.</p>\n    "},{"t":"How to call one method in an ES6 class from another one?","l":"http://stackoverflow.com/questions/25820876/how-to-call-one-method-in-an-es6-class-from-another-one","q":"\n\n<p>if I have a javascript ES6 class like this:</p>\n\n<pre><code>import $ from \"jquery\"; \n\nexport class test {\n\n  constructor() {\n    this.es6 = 'yay';\n  }\n\n  writeLine(text){\n    console.log(text);\n  }\n\n  getTestData(){\n    writeLine('writeLine call'); // &lt;-- can not call writeLine ??\n    $.get('/test', function(data){\n        console.log(data);\n        console.log(data.data);\n        this.es6 = data.data;\n        debugger\n        writeLine(data.data);\n    });\n }\n} \n</code></pre>\n\n<p>From another file I import the class and call getTestData</p>\n\n<pre><code>System.import('app/classDefinition')\n.then(function(classDefinitionModul) {\n   var test = new classDefinitionModul.test();\n   console.log(test.es6);\n   test.getTestData();\n})\n</code></pre>\n\n<p>How can I call the method <code>writeLine</code>??</p>\n    ","a":"\n<p>This doesn't have anything to do with es6.\nIn the ajax callback, <code>this</code> doesn't refer to the object anymore.</p>\n\n<pre><code>getTestData () {\n\n    // this isn't java (see what I did there)\n    this.writeLine('writeLine call');\n\n    var _this = this;\n    $.get('/test', function (data) {\n        _this.writeLine(data.data);\n    });\n\n    // or\n    $.get('/test', function (data) {\n        this.writeLine(data.data);\n    }.bind(this));\n\n    // or\n    $.get('/test', data =&gt; this.writeLine(data.data))\n}\n</code></pre>\n    "},{"t":"What is the difference between ECMAScript 6 and ECMAScript Harmony?","l":"http://stackoverflow.com/questions/21580428/what-is-the-difference-between-ecmascript-6-and-ecmascript-harmony","q":"\n\n<p>I thought that they were the same thing for a while, but I often see phrasing in blogs or in answers here that seems to imply that there is a difference between the two. Even SO has two distinct tags, but their description doesn't show any clear difference.</p>\n\n<p>I searched around for a bit and it only added to the confusion as it seems that I am not the only one who's unsure about what means what. Is there an official definition for both of these terms, perhaps defined by Ecma International themselves? If not, is there at least a commonly accepted definition?</p>\n    ","a":"\n<p>As @JamesAllardice already said in the comments, the term <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aharmony\" rel=\"nofollow\"><em>harmony</em></a> refers to all <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aproposals\" rel=\"nofollow\">proposals</a> for extending the current (ES5) language that meet the <a href=\"https://mail.mozilla.org/pipermail/es-discuss/2008-August/006837.html\" rel=\"nofollow\">common</a> goals of the TC39 committee.</p>\n\n<p>Some of these harmony proposals are then selected and incorporated into the various <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aspecification_drafts\" rel=\"nofollow\">specification drafts</a> for the next version of the language (<em>ES-next</em>), which is currently ES6.</p>\n\n<p>Those proposals that were not (yet) approved by the TC39 committee because of ongoing disputes (\"disharmony\") are called <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman%3astrawman\" rel=\"nofollow\"><em>straw-man</em> proposals</a>.</p>\n    "},{"t":"How to get a reference to a class function in ES6?","l":"http://stackoverflow.com/questions/31765712/how-to-get-a-reference-to-a-class-function-in-es6","q":"\n\n<p>Sorry if question is too simple, but I'm missing something here.\nJust switched an ES5 module that looked like:</p>\n\n<pre><code>module.exports = {\n  func1: function(a, b) {...},\n  func2: function(a, b) {...}\n};\n</code></pre>\n\n<p>To an ES6 class that looks like this:</p>\n\n<pre><code>export default class {\n  func1(a, b) {...}\n  func2(a, b) {...}\n}\n</code></pre>\n\n<p>And all was well: in both cases I could <code>export mod from 'module';</code> and call <code>mod.func1(a, b)</code> and <code>mod.func2(a, b)</code>.</p>\n\n<p>However, I have a function that recieves a module function to call:</p>\n\n<pre><code>var caller = function(func, val1, val2) {\n  let a = something(val1);\n  let b = something(val2);\n  return func(a, b);\n};\n</code></pre>\n\n<p>When I call <code>caller(mod.func1, x, y)</code> I get the desired result with the first implementation, but an <code>undefined is not a function</code> with the second.</p>\n\n<p>Printing out the value of <code>mod.func1</code> returns <code>[Function]</code> in both cases, but clearly something else is returned from an ES6 class. </p>\n\n<p>What am I doing wrong, and how can I get a class function I can call in another function?</p>\n\n<p><strong>Update:</strong> with the second implementation, I forgot to add the instantiation code:</p>\n\n<pre><code>import Mod from 'module';\nvar mod = new Mod();\n</code></pre>\n    ","a":"\n<p>Why did you switch to a <code>class</code> construct (which is a bit more than syntactic sugar for a constructor and a prototype with the methods)? There is no reason not to use an object literal like you did before - you can use method syntax in there as well:</p>\n\n<pre><code>export default {\n  func1(a, b) {...},\n  func2(a, b) {...}\n};\n</code></pre>\n\n<p>Instead of exporting an object with \"static\" methods, it would be more reasonable to use named exports here though:</p>\n\n<pre><code>export function func1(a, b) {...}\nexport function func2(a, b) {...}\n</code></pre>\n\n<p>which you could import by <code>import * as mod from 'module'</code> if you like to use <code>mod</code> as a namespace.</p>\n    "},{"t":"Is it possible to import class methods in ES2015","l":"http://stackoverflow.com/questions/31455008/is-it-possible-to-import-class-methods-in-es2015","q":"\n\n<p>I'm creating a method in one module:</p>\n\n<pre><code>export function myMethod() {}\n</code></pre>\n\n<p>And instantiating a class in another module:</p>\n\n<pre><code>import {myMethod} from './methodFile';\nclass MyClass {\n    constructor() {}\n    myMethod // doesn't work\n}\n</code></pre>\n\n<p>Is it possible to use <code>myMethod</code> as part of the <code>MyClass</code> class?</p>\n\n<p>I'm trying to create the equivalent of the following code:</p>\n\n<pre><code>class MyClass {\n    constructor() {}\n    myMethod() {}\n}\n</code></pre>\n    ","a":"\n<p>No, it is impossible to reference given values in <code>class</code> declarations.</p>\n\n<p>However, <code>class</code> syntax is mostly syntactic sugar, and prototype inheritance works as always. You can simply put the method on the prototype object after the class definition:</p>\n\n<pre><code>import {myMethod} from './methodFile';\nclass MyClass {\n    …\n}\nMyClass.prototype.myMethod = myMethod;\n</code></pre>\n\n<p>If your method needs to use <code>super</code>, you'll want to <a href=\"http://stackoverflow.com/q/27511704/1048572\">use the <code>.toMethod</code> method</a>.</p>\n    "},{"t":"What are the precise semantics of block-level functions in ES6?","l":"http://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6","q":"\n\n<p>I'm trying to wrap my head around the new standardized block-level functions in ES6 by reading the raw spec. My superficial understanding was:</p>\n\n<ul>\n<li>Block-level functions declarations are allowed in ES6.</li>\n<li>They hoist to the top of the block.</li>\n<li>In strict mode, they aren't visible outside the containing block.</li>\n</ul>\n\n<p>However, this is further complicated by the fact that part of these semantics are specified to be \"optional\" and only mandatory for web browsers (<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-additional-ecmascript-features-for-web-browsers\" rel=\"nofollow\">Annex B</a>). So I would like have the following table filled:</p>\n\n<pre>                                             |  Visible outside of block?  |  Hoisted? Up to which point?  |   \"TDZ\"? |\n------------------------------------------------------------------------------------------------------------------------\n|   Non-strict mode,   no \"web extensions\"   |                             |                               |          |\n|   Strict mode,       no \"web extensions\"   |                             |                               |          |\n|   Non strict mode,   with \"web extensions  |                             |                               |          |\n|   Strict mode,       with \"web extensions\" |                             |                               |          |\n</pre>\n\n<p>Also it is unclear to me what \"strict mode\" means in this context. This distinction seems to be introduced in <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" rel=\"nofollow\">Annex B3.3</a>, as part of some additional steps for the runtime execution of a function declaration:</p>\n\n<pre><code>1. If strict is false, then\n...\n</code></pre>\n\n<p>However, as far as I can see, <code>strict</code> refers to the <code>[[Strict]]</code> internal slot of the function object. Does this mean that:</p>\n\n<pre><code>// Non-strict surrounding code\n\n{\n    function foo() {\"use strict\";}\n}\n</code></pre>\n\n<p>should be considered \"strict mode\" in the table above? However, that's contradicts my initial intuition.</p>\n\n<p>Please, bear in mind that I'm mostly interested in the ES6 spec itself, regardless of actual implementation inconsistencies.</p>\n    ","a":"\n<blockquote>\n  <p>As far as I can see, <code>strict</code> refers to the <code>[[Strict]]</code> internal slot of the function object.</p>\n</blockquote>\n\n<p>No. And yes. It does refer to the strictness of the function (<a href=\"https://bugs.ecmascript.org/show_bug.cgi?id=4428\" rel=\"nofollow\">or script</a>) <em>in which</em> the block that contains the function declaration occurs. Not to the strictness of the function that is (or is not) to be declared.</p>\n\n<p>The \"web extensions\" do only apply to sloppy (non-strict) code, and only if the appearance of the function statement is \"sane\" - that is, for example, if its name doesn't collide with a formal parameter or lexically declared variable.</p>\n\n<p>Notice that there is no difference between strict and sloppy code without the web-compatibility semantics. In pure ES6, there is only one behaviour for function declarations in blocks.</p>\n\n<p>So we basically have</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>                 |      web-compat               pure\n-----------------+---------------------------------------------\nstrict mode ES6  |  block hoisting            block hoisting\nsloppy mode ES6  |  it's complicated ¹        block hoisting\nstrict mode ES5  |  undefined behavior ²      SyntaxError\nsloppy mode ES5  |  undefined behavior ³      SyntaxError\n</code></pre>\n\n<p><sub>1: See below. Warnings are asked for.<br>\n2: Typically, a <code>SyntaxError</code> is thrown<br>\n3: The note in <a href=\"http://es5.github.io/#x12\" rel=\"nofollow\">ES5.1 §12</a> talks of \"<em>significant and irreconcilable variations among the implementations</em>\" (such as <a href=\"http://kangax.github.io/nfe/#function-statements\" rel=\"nofollow\">these</a>). Warnings are recommended.</sub></p>\n\n<p>So now how does an ES6 implementation with web compatibility behave for a function declaration in a block in a sloppy-mode function with legacy semantics?<br>\nFirst of all, the <strong>pure semantics still apply</strong>. That is, the function declaration is hoisted to the top of the lexical block.<br>\nHowever, there is also a <strong><code>var</code> declaration</strong> that is hoisted to the top of the enclosing function.<br>\nAnd when the function declaration is evaluated (in the block, as if it was met like a statement), the function object is <strong>assigned</strong> to that function-scoped variable.</p>\n\n<p>This is better explained by code:</p>\n\n<pre><code>function enclosing(…) {\n    …\n    {\n         …\n         function compat(…) { … }\n         …\n    }\n    …\n}\n</code></pre>\n\n<p>works the same as</p>\n\n<pre><code>function enclosing(…) {\n    var compat₀ = undefined; // function-scoped\n    …\n    {\n         let compat₁ = function compat(…) { … }; // block-scoped\n         …\n         compat₀ = compat₁;\n         …\n    }\n    …\n}\n</code></pre>\n\n<p>Yes, that's a bit confusing, having two different bindings (denoted with the subscripts 0 and 1) with the same name. So now I can succinctly answer your questions:</p>\n\n<blockquote>\n  <p>Visible outside of block?</p>\n</blockquote>\n\n<p>Yes, like a <code>var</code>. However, there's a second binding that is visible only inside the block.</p>\n\n<blockquote>\n  <p>Hoisted?</p>\n</blockquote>\n\n<p>Yes - twice.</p>\n\n<blockquote>\n  <p>Up to which point?</p>\n</blockquote>\n\n<p>Both to the function (however initialised with <code>undefined</code>) and the block (initialised with the function object).</p>\n\n<blockquote>\n  <p>\"TDZ\"?</p>\n</blockquote>\n\n<p>Not in the sense of the temporal dead zone of a lexically declared variable (<code>let</code>/<code>const</code>/<code>class</code>) that throws on referencing, no. But before the function declaration is encountered in the execution of the body, the function-scoped variable is <code>undefined</code> (especially before the block), and you'll get an exception as well if you try to call it.</p>\n    "},{"t":"ES6 async modules using multiple baseurls","l":"http://stackoverflow.com/questions/30555661/es6-async-modules-using-multiple-baseurls","q":"\n\n<p>The ES6 module system seems to be a proper fit for unifying the CommonJs / AMD syntaxes. As a requireJs/AMD-user I'd like to convert to ES6 modules (using babel.js for now).</p>\n\n<p>There seems to be one problem though; reading through the docs and tutorials, there doesn't seem to be possible to load module packages that are dependendent on  more than one baseurl. Using requireJs this is solvable using the <code>context</code> field:</p>\n\n<pre><code>// async dependencies are loaded from http://path/to/domain\nvar contextedRequire1 = require.config({\n  baseUrl: 'http://path/to/domain/js',\n  context: 'mainContext'\n});    \n\n// async dependencies are located on http://path/to/otherdomain\nvar contextRequire2 = require.config({\n  baseUrl: 'http://path/to/otherdomain/js',\n  context: 'pluginContext'\n});\n\ncontextedRequire1(['main.js'], function(main){\n  // loaded using http://path/to/domain/js/main.js\n  contextedRequire2(['plugin-lazyloading-deps.js'], function(plugin){\n    plugin.init();\n  });\n});\n</code></pre>\n\n<p><strong>In main.js</strong></p>\n\n<pre><code>define(['main-deps'], function(mainDeps){\n  // loaded using http://path/to/domain/js/main-deps.js\n})\n</code></pre>\n\n<p><strong>In plugin-lazyloading-deps.js</strong></p>\n\n<pre><code>define(['require'], function(require){\n  // loaded using http://path/to/otherdomain/js/plugin-lazyloading-deps.js\n  if(Modernizr.touch) {\n    require(['hammer'], function(){\n      // loaded using http://path/to/otherdomain/js/hammer.js\n      hammer.init();\n    })\n  }\n})\n</code></pre>\n\n<p>In ES6 async module imports this isn't possible, since <code>System</code> is a singleton</p>\n\n<pre><code>System.baseURL = \"http://path/to/domain/js\";\nSystem.import(\"main\").then(function(main){\n  // loaded using http://path/to/domain/js/main.js\n\n  // This will potentially break when main.js tries to load hammer.js from http://path/to/domain/js\n  System.baseURL = \"http://path/to/otherdomain/js\";\n  System.import(\"plugin-lazyloading-deps\").then(function(){ /** code **/ });\n});\n</code></pre>\n\n<p>My question is: Is there something in the docs that I've missed (possible to subclass System to be able to config several baseUrls), or is this something in the works for future module extensions?</p>\n    ","a":"\n<p>At least with the current version of SystemJS, you can provide wildcard paths. <a href=\"https://github.com/systemjs/systemjs/wiki/Configuration-Options#paths-unstable\" rel=\"nofollow\">https://github.com/systemjs/systemjs/wiki/Configuration-Options#paths-unstable</a></p>\n\n<p>I haven't used it myself, but for your case, seems you'd do</p>\n\n<pre><code>System.baseURL = 'http://path/to/domain/js';\nSystem.paths['plugin-*'] = 'http://path/to/otherdomain/js/plugin-*';\n</code></pre>\n    "},{"t":"Does ES6 Tail Call Optimization Cover Generators/Iterators?","l":"http://stackoverflow.com/questions/30135916/does-es6-tail-call-optimization-cover-generators-iterators","q":"\n\n<p>Does ES6's support for tail call optimization cover tail calls in generators/iterators?</p>\n\n<p>Suppose I have this generator for integers &gt;= 0:</p>\n\n<pre><code>var nums = function* (n) {\n    n = n || 0;\n    yield n;\n    yield* nums(n + 1);\n};\n</code></pre>\n\n<p>Currently, in Chrome and Firefox, it adds a stack level with each recursive call and eventually runs into a \"maximum call stack size exceeded\" error. Will this still occur once ES6 is fully implemented? </p>\n\n<p>(I know I can write the above generator iteratively and not run into the error. I'm just curious about whether TCO will take care of recursively defined generators/iterators.)</p>\n    ","a":"\n<p>When a function call is made, according to the section <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-calls\" rel=\"nofollow\">Function call evaluation</a>,</p>\n\n<blockquote>\n  <ol start=\"8\">\n  <li>Let <em>tailCall</em> be <em>IsInTailPosition(thisCall)</em>. (See 14.6.1)</li>\n  <li>Return <em>EvaluateDirectCall(func, thisValue, Arguments, tailCall)</em>.</li>\n  </ol>\n</blockquote>\n\n<p>The call will be evaluated based on the <code>IsInTailPosition</code>'s result. And if if we check <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isintailposition\" rel=\"nofollow\"><code>IsInTailPosition</code></a>,</p>\n\n<blockquote>\n  <ol start=\"5\">\n  <li>If body is the <em>FunctionBody</em> of a <em>GeneratorBody</em>, return <strong>false</strong>.</li>\n  </ol>\n</blockquote>\n\n<p>So, if the function body is a generator, then Tail Call Optimization will not be done.</p>\n    "},{"t":"What has the [[Scope]] internal property been replaced with in ES6?","l":"http://stackoverflow.com/questions/29919446/what-has-the-scope-internal-property-been-replaced-with-in-es6","q":"\n\n<p>What has the [[Scope]] internal property been replaced with in ES6?</p>\n\n<p>I can find it in ES5, but no mention of it in ES6.</p>\n    ","a":"\n<p>It appears that <code>[[Scope]]</code> has been replaced by <code>[[Environment]]</code> in ES2015. <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#table-27\" rel=\"nofollow\">Section 9.2.4 (FunctionInitialize)</a> states:</p>\n\n<blockquote>\n  <ol start=\"6\">\n  <li>Set the [[Environment]] internal slot of F to the value of Scope.</li>\n  </ol>\n</blockquote>\n\n<p>whereas ES5 says this in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-13.2\" rel=\"nofollow\">section 13.2 (Creating Function Objects)</a>:</p>\n\n<blockquote>\n  <ol start=\"9\">\n  <li>Set the [[Scope]] internal property of F to the value of Scope.</li>\n  </ol>\n</blockquote>\n    "},{"t":"Shorthand for exporting an import","l":"http://stackoverflow.com/questions/29384971/shorthand-for-exporting-an-import","q":"\n\n<p>I've been meaning to do this with BabelJS, however I'm not sure whether Babel or the specifications support it at the moment.</p>\n\n<p>Given <code>Outer.js</code>:</p>\n\n<pre><code>export default function() { }\n</code></pre>\n\n<p>The example below does not work.</p>\n\n<pre><code>export Outer from './Outer'\n</code></pre>\n\n<p>With CommonJS modules, this could be easily written as</p>\n\n<pre><code>exports.x = require('./x');\n</code></pre>\n    ","a":"\n<p>As of <strong>April 3, 2015</strong>, the <strong>BabelJS</strong> team has released <code>v5.0</code> 3 days ago which includes support for the said shorthand as stated in their <a href=\"http://babeljs.io/blog/2015/03/31/5.0.0/\" rel=\"nofollow\">blog post</a>.</p>\n\n<blockquote>\n  <p>Lee Byron's stage 1 additional export-from statements proposal completes the symmetry between import and export statement, allowing you to easily export namespaces and defaults from external modules without modifying the local scope.</p>\n  \n  <p><strong>Exporting a default</strong></p>\n\n<pre><code>export foo from \"bar\";\n</code></pre>\n  \n  <p>equivalent to:</p>\n\n<pre><code>import _foo from \"bar\";\nexport { _foo as foo };\n</code></pre>\n</blockquote>\n\n<p><strong>Old Answer</strong>:</p>\n\n<p>This export notation</p>\n\n<pre><code>export v from \"mod\";\n</code></pre>\n\n<p>does not supported in ES6 (look at supported examples <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#table-42\" rel=\"nofollow\">in the specification</a>), but it can be supported in ES7 (look at <a href=\"https://github.com/leebyron/ecmascript-more-export-from\" rel=\"nofollow\">this proposal</a>).</p>\n\n<p>To achieve <em>exactly</em> the same result you must use <code>import</code> for now:</p>\n\n<pre><code>import Outer from './Outer';\nexport {Outer};\n</code></pre>\n    "},{"t":"Debug NodeJS + ES6 app (Webstorm)","l":"http://stackoverflow.com/questions/29170589/debug-nodejs-es6-app-webstorm","q":"\n\n<p>I want to use ES6 at both: client and server side. Of course, I can launch my NodeJS server from terminal like <code>babel-node src/app.js</code>, but it makes it impossible to debug.</p>\n\n<p>On the other hand Webstorm 9 claims it support ES6, but when I try to launch a default Node configuration it complains about the <code>a =&gt; a + 1</code> function.</p>\n\n<p><strong>Question:</strong> How do I launch NodeJS + ES6 app from within Webstorm 9?</p>\n\n<p>P.S. I use Node 0.12.* version\nP.S. I also tried <a href=\"http://blog.jetbrains.com/webstorm/2014/08/tracing-debugging-and-profiling-node-js-with-spy-js/\" rel=\"nofollow\">this</a> but it also doesn't work for me</p>\n    ","a":"\n<p>Finally I found the answer <a href=\"https://babeljs.io/docs/usage/require/\" rel=\"nofollow\">here</a>. I did <code>npm install babel</code> and add <code>require('babel/register')</code> at the beginning of my main node file (<code>app.js</code>).</p>\n\n<p>Now I really can launch/debug Node app written with ES6 from Webstorm. But that debugging is something very strange - looks like code that worked before doesn't work know. The Intellij debuger says all my variables are undefined. Also there is <a href=\"https://github.com/babel/babel/issues/481\" rel=\"nofollow\">an article</a> about another possible problems.</p>\n\n<p>Example:<img src=\"http://i.stack.imgur.com/ZrcVe.png\" alt=\"enter image description here\"></p>\n\n<p>What is supper fancy about it that inside loop <code>for (var i = 1; i &lt; trs.length; i++) {</code> variable <code>i</code> considered <code>undefined</code>!</p>\n    "},{"t":"How to convert an angular $resource factory (not service) to ES6","l":"http://stackoverflow.com/questions/28992224/how-to-convert-an-angular-resource-factory-not-service-to-es6","q":"\n\n<p>I'd like to start preparing for Angular 2 by converting existing code over to ES6 (as recommended in <a href=\"https://youtu.be/pai1ZdFI2dg?t=4m9s\" rel=\"nofollow\">this video</a>).</p>\n\n<p>However, I'm immediately stumped, or perhaps unsure about how to proceed. In the video they show a conversion of a service. In my code I'm trying to convert a factory, which is similar but actually quite different when trying to convert to ES6. The service easily follows the class instantiation method, but factories need to return the injected object.</p>\n\n<p>My code started like this:</p>\n\n<pre><code>melange.factory('SomeService', ['$resource', function ($resource) {\n  var someResource = $resource('/api/endpoint');\n\n  someResource.customQuery = function() {\n    // ... do some custom stuff\n  };\n\n  return someResource;\n}]);\n</code></pre>\n\n<hr>\n\n<p>My First Failed Attempt - So I immediately started to convert over to ES6 and came up with this:</p>\n\n<pre><code>// notice I changed this to service instead of factory\nmelange.service('SomeService', ['$resource', SomeService]);\n\nclass SomeService {\n  constructor ($resource) {\n    var someResource = $resource('/api/endpoint');\n\n    someResource.customQuery = function() {\n      // ... do some custom stuff\n    };\n\n    return someResource;\n  }\n}\n</code></pre>\n\n<p>But that's not right... the constructor is returning a resource. </p>\n\n<hr>\n\n<p>Maybe Success Attempt - So it's really the Resource (or really a <a href=\"https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js#L413\" rel=\"nofollow\">Route</a> object) that is the thing I want to 'class-ify'. But since a Resource object has a specific interface already of methods, I'll need my class to extend the base Resource object. But that is generated dynamically by calling the $resource factory function. So I came up with this maybe correct code:</p>\n\n<pre><code>melange.service('SomeService', ['$resource', SomeResource]);\nvar $resource = angular.injector().get('$resource');\n\nclass SomeResource extend $resource('/api/endpoint') {\n  customQuery() {\n    // ... do some custom stuff\n  }\n}\n</code></pre>\n\n<p>So I have to get $resource from the injector before declaring my class. I'm just not sure if extending $resource('/api/endpoint') is even valid ES6. <a href=\"http://babeljs.io/repl/#?experimental=true&amp;playground=false&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=class%20BaseFoo%20%7B%0A%20%20foo()%7B%0A%20%20%20%20return%20%22foo%20-%20base%22%3B%0A%20%20%7D%0A%7D%0Aclass%20BaseBar%20%7B%0A%20%20bar()%7B%0A%20%20%20%20return%20%22bar%20-%20base%22%3B%0A%20%20%7D%0A%7D%0Avar%20baseClasses%20%3D%20%7B%20BaseFoo%2C%20BaseBar%20%7D%3B%0Afunction%20getBaseClass(thing)%7B%0A%20%20return%20baseClasses%5B%22Base%22%20%2B%20thing%5D%3B%0A%7D%0A%0A%2F%2F%20notice%20how%20I'm%20using%20an%20expression%20for%20extending%0Aclass%20MyFoo%20extends%20getBaseClass(%22Foo%22)%20%7B%20%7D%0Avar%20myFoo%20%3D%20new%20MyFoo()%3B%0Aconsole.log(myFoo.foo())%3B\" rel=\"nofollow\">It seems to work generally during babel transpile though</a>.</p>\n\n<hr>\n\n<p>Am I doing this right?</p>\n    ","a":"\n<p>You can't use ES6 classes as easily with factories, so I would advise making everything a service.</p>\n\n<pre><code>angular.module('test', [])\n.service('SomeService', ['$resource', class SomeService {\n  constructor($resource) {\n    this.resource = $resource('/api/something');\n  }\n  customQuery() {\n    return doSomething(this.resource);\n  }\n}]);\n</code></pre>\n\n<p>Here's how it looks when it's transpiled: <a href=\"http://goo.gl/8Q4c8b\" rel=\"nofollow\">http://goo.gl/8Q4c8b</a></p>\n\n<p>Here's a working plunkr with the transpiled code inside: <a href=\"http://plnkr.co/edit/RS48OerLYQCERPYzbuuM?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/RS48OerLYQCERPYzbuuM?p=preview</a></p>\n    "},{"t":"Is anyone using Babel/6-to-5 in a production Rails app?","l":"http://stackoverflow.com/questions/28971227/is-anyone-using-babel-6-to-5-in-a-production-rails-app","q":"\n\n<p>The benefits of using ES6 for Rails frontend are very attractive. </p>\n\n<p>I've made a topic branch in our Rails app that uses <a href=\"https://babeljs.io/\" rel=\"nofollow\">babel</a> to transpile ES6 to ES5 via the asset pipeline. It works well, but as always I am weary of technical debt. Is there anyone that has good/bad reports of using such a system in production?</p>\n    ","a":"\n<p>There is a growing list of users, some are detailed in this <a href=\"https://github.com/babel/babel/issues/364\" rel=\"nofollow\">issue</a></p>\n\n<p>Where possible babel tries to provide the most performant polyfill for ES6 features and this is backed up by their test suite. However, for some of the problems there are often more performant es5 solutions available, at the expense of code clarity, speed of code production etc etc.</p>\n\n<p>In general though, I guess it would be up to your own apps performance testing to dictate whether any lack of performance (if any) is outweighed by speed and ease of development and maintenance.</p>\n\n<p>I've only ever used in it simple to intermediate complexity programs (in Node and in the Browser) and never witnessed any performance problems or had any issues updating babel (I may have been lucky with this though). I've used it for stuff like dashboards, filterable lists, data management stuff, other little bits and pieces such as React components. None of it outrageously complex though.</p>\n\n<p>I guess the other thing that might be of use to you is to note that the project lead is incredibly active, the project is moving at breakneck speed and issue responses on both github and gitter are quick and informative.</p>\n    "},{"t":"babel/6to5 - duplicated code when exporting modules","l":"http://stackoverflow.com/questions/28837649/babel-6to5-duplicated-code-when-exporting-modules","q":"\n\n<p>I'm using Babel to transpile ES6 to ES5 and it works great.\nThe only problem is that once transpiled each module duplicates these lines:</p>\n\n<pre><code>var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc &amp;&amp; desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\nvar _inherits = function (subClass, superClass) { if (typeof superClass !== \"function\" &amp;&amp; superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n</code></pre>\n\n<p>As my application is going to have more and more modules defining classes, I cannot imagine waisting so much space just because of these repeated code.</p>\n\n<p>Is there a way to tell Babel to not include them in each module so we can add them only once later ?</p>\n\n<p>I'm using gulp and my config is:</p>\n\n<pre><code>var gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar babel = require('gulp-babel');\n\ngulp.task('default', function () {  \n\n    return gulp.src('src/**/*.es6')\n        .pipe(babel({ playground: true, experimental: true, modules: 'amd', moduleIds: true }))\n        .pipe(concat('tmp/src.js'))\n        .pipe(gulp.dest('dist'));\n});\n</code></pre>\n\n<p>Thanks a lot for your help!</p>\n    ","a":"\n<p>Yes, as it is described in the <a href=\"https://babeljs.io/docs/usage/runtime/\" rel=\"nofollow\"><strong>documentation</strong></a>:</p>\n\n<blockquote>\n  <p>Babel uses very small helpers for common functions such as <code>_extend</code>. By default this will be added to every file that requires it. This duplication is sometimes unnecessary, especially when your application is spread out over multiple files.</p>\n  \n  <p>This is where the runtime optional transformer comes in. All of the helpers will reference the module <code>babel-runtime</code> to avoid duplication across your compiled output.</p>\n  \n  <p><strong>Usage</strong></p>\n\n<pre><code>require(\"babel\").transform(\"code\", { optional: [\"runtime\"] });\n</code></pre>\n  \n  <hr>\n\n<pre><code>$ babel --optional runtime script.js\n</code></pre>\n</blockquote>\n    "},{"t":"Does Python support object literal property value shorthand, a la ECMAScript 6?","l":"http://stackoverflow.com/questions/28722869/does-python-support-object-literal-property-value-shorthand-a-la-ecmascript-6","q":"\n\n<p>In ECMAScript 6, I can do something like this ...</p>\n\n<pre><code>var id = 1;\nvar name = 'John Doe';\nvar email = 'email@example.com';\nvar record = { id, name, email };\n</code></pre>\n\n<p>... as a shorthand for this:</p>\n\n<pre><code>var id = 1;\nvar name = 'John Doe';\nvar email = 'email@example.com';\nvar record = { 'id': id, 'name': name, 'email': email };\n</code></pre>\n\n<p>Is there any similar feature in Python?</p>\n    ","a":"\n<p>No, but you can achieve identical thing doing this</p>\n\n<pre><code>record = {i: locals()[i] for i in ('id', 'name', 'email')}\n</code></pre>\n\n<p>(credits to <a href=\"http://stackoverflow.com/questions/3972872/python-variables-as-keys-to-dict\">Python variables as keys to dict</a>)</p>\n\n<p>but I wouldn't do it because it compromises readability and makes static checkers incapable of finding undefined-name error. </p>\n\n<p>Your example, typed in directly in python is same as set and is not a dictionary</p>\n\n<pre><code>{id, name, email} == set((id, name, email))\n</code></pre>\n    "},{"t":"Angular 2.0: Migration path from Angular 1.x","l":"http://stackoverflow.com/questions/27441268/angular-2-0-migration-path-from-angular-1-x","q":"\n\n<p>I'm not looking for an opinion - just a solid migration strategy.</p>\n\n<p>We started to design a new project that designated to be built with Angular as each of our previous, the importance of this project is very high and it's going to live and maintained for at least 3-4 years.</p>\n\n<p>Angular 2.0 is coming in the end of 2015 and it seems like everything is about to change, $scope is out, directives are out and the whole DI concept is about to change.</p>\n\n<ol>\n<li>Is there a migration path/strategy to be considered in the next few\nmonths? </li>\n<li>If we built the project using 1.x, what action do we need to\ntake during development to ensure a clean migration? </li>\n<li>Are those 2 versions can be considered as 2 different framework? (Yes means Angular 1.x will continued to be supported and evolved by google)</li>\n</ol>\n    ","a":"\n<p>At the 2015 ng-Conf, the Angular team discussed initial concepts for this. Important things to note:</p>\n\n<ol>\n<li>You will be able to mix and match Angular 1 and Angular 2 modules so that you can incrementally move your app to Angular 2.</li>\n<li>Angular 2 will be written using TypeScript/ES7 so it may help you to use those languages and transpile them to ES5 for your current app. While you can use ES5 in Angular 2, there are things like class structures and annotations/decorators that may make working with Angular 2 easier.</li>\n<li>Migration instructions will be publish after Google has gone through the work of migrating one of it's internal applications. Others are likely to add their input as Angular 2 becomes more stable.</li>\n</ol>\n\n<p>For more information from ng-Conf see the following videos:</p>\n\n<ul>\n<li><a href=\"https://youtu.be/QHulaj5ZxbI?t=12m40s\" rel=\"nofollow\">Day 1 Keynote</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=pai1ZdFI2dg\" rel=\"nofollow\">Angular 1.3 meets Angular 2.0</a></li>\n</ul>\n    "},{"t":"ECMA-262 ReturnIfAbrupt","l":"http://stackoverflow.com/questions/20533838/ecma-262-returnifabrupt","q":"\n\n<p>Recently, I read the ECMAScript Language Specification. I didn't plan to read the whole specification, I just picked up some parts. I came cross many questions, one of them is like this:</p>\n\n<p><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\" rel=\"nofollow\">ToLength</a></p>\n\n<pre><code>1.Let len be ToInteger(argument).\n2.ReturnIfAbrupt(len).\n3.If len ≤ +0, then return +0.\n4.Return min(len, 2^53-1).\n</code></pre>\n\n<p>As I understand, it should be like this:</p>\n\n<pre><code>var len = ToInteger(argument); // step 1\nlen = ReturnIfAbrupt(len);// step 2\n// step 3\nif(len&lt;=0){\n    return +0; //-0 is OK too?\n}\nreturn Math.min(len, Math.pow(2,53)-1); // step 4\n</code></pre>\n\n<p>I didn't understand what the meaning of ReturnIfAbrupt(len) is, and I found this:</p>\n\n<p><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-returnifabrupt\" rel=\"nofollow\">ReturnIfAbrupt</a></p>\n\n<p>1.If argument is an <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-completion-record-specification-type\" rel=\"nofollow\">abrupt completion</a>, then return argument.</p>\n\n<p>2.Else if argument is a <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-completion-record-specification-type\" rel=\"nofollow\">Completion Record</a>, then let argument be argument.[[value]].</p>\n\n<p>What is abrupt completion, and the differents between it and Completion Record?Can they combine one step:If argument is an <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-completion-record-specification-type\" rel=\"nofollow\">Completion Record</a>, then return argument.Any suggestion will be gratefull!</p>\n    ","a":"\n<p>My understanding is that in ES 6, when an expression is evaluated, it returns a <em>completion record</em> (which is a specification device for explaining behaviour) that holds information about the result of evaluating the expression.</p>\n\n<p>In the case above, if the argument is an abrupt completion record (i.e. its type is anything other than <em>normal</em>), then it is returned.</p>\n\n<p>If the argument is not an abrupt completion record, its value is returned.</p>\n\n<p>Which essentially means that if the conversion of the argument to an integer went OK, return the value. Otherwise, propigate an error value.</p>\n    "},{"t":"let keyword in the for loop","l":"http://stackoverflow.com/questions/16473350/let-keyword-in-the-for-loop","q":"\n\n<p>ECMAScript 6's <code>let</code> is supposed to provide block scope without hoisting headaches. Can some explain why in the code below <code>i</code> in the function resolves to the last value from the loop (just like with <code>var</code>) instead of the value from the current iteration?</p>\n\n<pre><code>\"use strict\";\nvar things = {};\nfor (let i = 0; i &lt; 3; i++) {\n    things[\"fun\" + i] = function() {\n        console.log(i);\n    };\n}\n\nthings[\"fun0\"](); // prints 3\nthings[\"fun1\"](); // prints 3\nthings[\"fun2\"](); // prints 3\n</code></pre>\n\n<p>According to <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/let\" rel=\"nofollow\">MDN</a> using <code>let</code> in the <code>for</code> loop like that should bind the variable in the scope of the loop's body. Things work as I'd expect them when I use a temporary variable inside the block. Why is that necessary?</p>\n\n<pre><code>\"use strict\";\nvar things = {};\nfor (let i = 0; i &lt; 3; i++) {\n    let index = i;\n    things[\"fun\" + i] = function() {\n        console.log(index);\n    };\n}\n\nthings[\"fun0\"](); // prints 0\nthings[\"fun1\"](); // prints 1\nthings[\"fun2\"](); // prints 2\n</code></pre>\n\n<p>I tested the script with Traceur and <code>node --harmony</code>.</p>\n    ","a":"\n<p>There's an intermediate scope that encompasses the entire loop:</p>\n\n<p>it's like this:</p>\n\n<pre><code>// The enclosing variable scope\n\n{\n    // your loop head variable scope\n    let i = 0;\n    for (; i &lt; 3; i++) {\n        // your per-iteration variable scope\n    }\n}\n\nalert(typeof i); // \"undefined\"\n</code></pre>\n    "},{"t":"What are the differences between plain es6 class and extend React.Component","l":"http://stackoverflow.com/questions/31666921/what-are-the-differences-between-plain-es6-class-and-extend-react-component","q":"\n\n<p>I'm using <a href=\"https://github.com/kriasoft/react-starter-kit\" rel=\"nofollow\">react-fullstack</a> as scaffold to start my project.</p>\n\n<p>I find its sample code is very different vs the official react document.</p>\n\n<p>The sample code is like this:</p>\n\n<pre><code>@withStyles(styles)\nclass Header {\n\n  render() {\n    return (\n     /* simple JSX code */\n    );\n  }\n}\n\n\nfunction withStyles(styles) {\n  return (ComposedComponent) =&gt; class WithStyles {\n\n    static contextTypes = {\n      onInsertCss: PropTypes.func\n    };\n\n    constructor() {\n      this.refCount = 0;\n      ComposedComponent.prototype.renderCss = function (css) {\n        let style;\n        if (ExecutionEnvironment.canUseDOM) {\n          if (this.styleId &amp;&amp; (style = document.getElementById(this.styleId))) {\n            if ('textContent' in style) {\n              style.textContent = css;\n            } else {\n              style.styleSheet.cssText = css;\n            }\n          } else {\n            this.styleId = `dynamic-css-${count++}`;\n            style = document.createElement('style');\n            style.setAttribute('id', this.styleId);\n            style.setAttribute('type', 'text/css');\n\n            if ('textContent' in style) {\n              style.textContent = css;\n            } else {\n              style.styleSheet.cssText = css;\n            }\n\n            document.getElementsByTagName('head')[0].appendChild(style);\n            this.refCount++;\n          }\n        } else {\n          this.context.onInsertCss(css);\n        }\n      }.bind(this);\n    }\n\n    componentWillMount() {\n       /* some implement */\n    }\n\n    componentWillUnmount() {\n      /* some implement */\n    }\n\n    render() {\n      return &lt;ComposedComponent {...this.props} /&gt;;\n    }\n\n  };\n}\n</code></pre>\n\n<p>It doesn't even extend <code>React.Component</code> at all, I can't see it use prototype inheritance either.</p>\n\n<p>But it works, and every component can be used as official document said.</p>\n\n<p>Does that mean if I implement a class with the <code>render</code> method, I implement a React component?</p>\n    ","a":"\n<blockquote>\n  <p>Does that mean if I implement a class with the <code>render</code> method, I implement a React component?</p>\n</blockquote>\n\n<p>Pretty much. <a href=\"https://github.com/facebook/react/blob/master/src/isomorphic/modern/class/ReactComponent.js\" rel=\"nofollow\"><code>React.Component</code></a> only provides the methods <code>setState</code> and <code>forceUpdate</code>. You only have to inherit from <code>React.Component</code> if you need them.</p>\n    "},{"t":"How to preserve sourcemaps from Babel transpiling to r.js uglifying?","l":"http://stackoverflow.com/questions/31038705/how-to-preserve-sourcemaps-from-babel-transpiling-to-r-js-uglifying","q":"\n\n<p>I'm writing ES6 JavaScript modules and using Babel to transpile them to ES5. Babel generates sourcemaps that point back to the original ES6 code. I then use r.js to take those ES5 AMD modules and combine and uglify them. r.js creates a sourcemap that shows the ES5 files. I want the ES6 ones from the first step. My grunt file looks like this:</p>\n\n<pre><code>module.exports = function(grunt) {\n\n  require('load-grunt-tasks')(grunt); // npm install --save-dev load-grunt-tasks\n\n  // Project configuration.\n  grunt.initConfig({\n    babel: {\n      options: {\n        modules: \"amd\",\n        sourceMap: true\n      },\n      dist: {\n        files: {\n          \"es5/editor.js\": \"src/editor.js\",\n          \"es5/editor-events.js\": \"src/editor-events.js\"\n        }\n      }\n    },\n    requirejs: {\n      production: {\n        options: {\n          baseUrl: \"es5\",\n          mainConfigFile: \"es5/require.config.js\",\n          name: \"../node_modules/almond/almond\",\n          include: [\"editor\"],\n          out: \"dist/ed.js\",\n          optimize: \"uglify2\",\n          generateSourceMaps: true,\n          preserveLicenseComments: false\n        }\n      }\n    }\n  });\n\n  // Default task(s).\n  grunt.registerTask('default', ['babel', 'requirejs']);\n\n};\n</code></pre>\n\n<p>It compiles everything perfectly. But it loses the nice ES6 sourcemaps. Any way to keep them? Is there a better build process that'll get me to a single, browser-friendly JavaScript file?</p>\n    ","a":"\n<p>you shouldn't use two different steps for building your app. one for transpiling and an other one for bundling. you should have one step instead.</p>\n\n<p>you could use <code>browserify</code> to bundle them and <code>babelify</code> as transpiler. the command would look like this:</p>\n\n<pre><code>browserify app.js -t babelify -d -o bundle.js\n</code></pre>\n\n<blockquote>\n  <p>Note: <code>-d</code> (debug) will enable the sourcemaps. they will point to the es6 files.</p>\n</blockquote>\n    "},{"t":"Do arrow functions not bind `this` inside ES6 classes? [duplicate]","l":"http://stackoverflow.com/questions/30868265/do-arrow-functions-not-bind-this-inside-es6-classes","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/28029523/es6-arrow-function-lexical-this-in-v8\" dir=\"ltr\">ES6 arrow function lexical this in V8</a>\n                <span class=\"question-originals-answer-count\">\n                    2 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I'm surprised this doesn't work. (I'm running <code>iojs</code> 2.3.0 with the <code>--harmony_arrow_functions</code> flag.)</p>\n\n<pre><code>class Foo {\n  constructor() { this.foo = \"foo\"; }\n  sayHi() { return (() =&gt; this.foo)(); }\n}\nf = new Foo();\nf.sayHi // Cannot read property 'foo' of undefined.\n</code></pre>\n\n<p>I would have expected the arrow function to pick up the right value for <code>this</code>. Am I missing something?</p>\n    ","a":"\n<p>I don't know the problem, but my version works fine for me:</p>\n\n<pre><code>class Foo {\n    constructor() {\n        this.foo = \"foo\";\n    }\n\n    sayHi() {\n        return (() =&gt; console.log(this.foo))();\n    }\n}\n\nconst f = new Foo();\nf.sayHi();\n</code></pre>\n\n<p>BTW: I am using <code>babel</code></p>\n    "},{"t":"Does ECMA6 do away with using prototype syntax as a best practice in JavaScript?","l":"http://stackoverflow.com/questions/30518180/does-ecma6-do-away-with-using-prototype-syntax-as-a-best-practice-in-javascript","q":"\n\n<p>Example,</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</a></p>\n\n<blockquote>\n  <p>JavaScript classes are introduced in ECMAScript 6 and are syntactical\n  sugar over JavaScript's existing prototype-based inheritance. The\n  class syntax is not introducing a new object-oriented inheritance\n  model to JavaScript. JS classes provide a much simpler and clearer\n  syntax to create objects and dealing with inheritance.</p>\n</blockquote>\n\n<p>Does this mean I should stop using the language term <code>prototype</code> in my development, when ECMA6 is final and craft like this using the new syntactic sugar.  I believe they are the same other than that (from same page):</p>\n\n<pre><code>// unnamed\nvar Polygon = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n// named\nvar Polygon = class Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n</code></pre>\n\n<p>On the other hand, I see this,</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions</a></p>\n\n<pre><code>var obj = {\n  foo() {},\n  bar() {}\n};\n</code></pre>\n\n<p>How does this all fit together?  What would I do with <code>var myObj</code>?  Can it have a constructor and the methods <code>foo()</code> and <code>bar()</code> like other languages?  Is this allowable?</p>\n\n<pre><code>var myObj = class myObj {\n contructor(height, width){\n     this.height=height;\n     this.width=width;\n },\n  foo(this.height) {alert('the height is ' + this.height)},\n  bar(this.height, this.width) {\n      alert('the width is ' + this.width);\n      var something = this.height + 5;\n      alert('the height is : ' + something);\n\n  }\n};\n\nvar determine_something = new myObj(50,60);\ndetermine_something.bar;\ndetermine_something.foo;\n</code></pre>\n\n<p>(This did not work in an ECMA6 sandbox I tried)</p>\n\n<p>This gives no errors, but <code>this.height</code> is undefined:</p>\n\n<pre><code>var myObj = class {\n contructor(height, width){\n     this.height=height;\n     this.width=width;\n }\n  foo() {\n    alert('the height is ' + this.height);\n  }\n\n};\n\nvar determine_something = new myObj(50,60);\ndetermine_something.foo();\n</code></pre>\n\n<p>EDIT:  If I do not use <code>prototype</code>, and I want to add a new method, how do I do it with the new syntax?</p>\n    ","a":"\n<p>Here is the fixed/optimized version:</p>\n\n<pre><code>class MyObj {\n    contructor(height, width){\n        this.height = height;\n        this.width = width;\n    }\n\n    foo() {\n        alert(`the height is ${this.height}`)\n    }\n\n    bar() {\n        alert(`the width is ${this.width}`);\n        const something = this.height + 5;\n        alert(`the height is : ${something}`);\n    }\n};\n\nconst determine_something = new MyObj(50,60);\ndetermine_something.bar();\ndetermine_something.foo();\n</code></pre>\n    "},{"t":"Reload ListView not Working React Native","l":"http://stackoverflow.com/questions/30069985/reload-listview-not-working-react-native","q":"\n\n<p><strong>Re-phrasing my Question... (Tested with separate class)</strong></p>\n\n<p>I am trying to reload <code>listview</code> with random array on a button press. But it's not working! Trying to do refresh <code>datasource</code> this with following LOC:</p>\n\n<pre><code>_buttonPressed() {\n        this.setState({\n            dataSource: this.state.dataSource.cloneWithRows(this._randomArray()),\n        });\n    }\n\n_randomArray() {\n\n    var jsonRes;\n\n    switch(this.getRandomInt()) // number returned is valid. I checked\n    {\n        case 1:\n        {\n            jsonRes = '[' +\n            '{ \"firstName\":\"Michel\" , \"lastName\":\"John\" ,\"age\":18},' +\n            '{ \"firstName\":\"Richard\" , \"lastName\":\"Joe\",\"age\":20 },' +\n            '{ \"firstName\":\"James\" , \"lastName\":\"Henry\",\"age\":15 },' +\n            '{ \"firstName\":\"e\" , \"lastName\":\"u\",\"age\":15 }]';\n            break;\n        }\n        case 2:\n        {\n            jsonRes = '[' +\n            '{ \"firstName\":\"bacde\" , \"lastName\":\"John\" ,\"age\":18},' +\n            '{ \"firstName\":\"bacde\" , \"lastName\":\"Joe\",\"age\":20 },' +\n            '{ \"firstName\":\"bacde\" , \"lastName\":\"Henry\",\"age\":15 },' +\n            '{ \"firstName\":\"ebacde\" , \"lastName\":\"u\",\"age\":15 }]';\n            break;\n        }\n        case 3:\n        {\n            jsonRes = '[' +\n            '{ \"firstName\":\"mmmmm\" , \"lastName\":\"John\" ,\"age\":18},' +\n            '{ \"firstName\":\"mmmmm\" , \"lastName\":\"Joe\",\"age\":20 },' +\n            '{ \"firstName\":\"mmmmm\" , \"lastName\":\"Henry\",\"age\":15 },' +\n            '{ \"firstName\":\"etttttt\" , \"lastName\":\"u\",\"age\":15 }]';\n            break;\n        }\n        default:\n        {\n            jsonRes = '[' +\n            '{ \"firstName\":\"dddd\" , \"lastName\":\"John\" ,\"age\":18},' +\n            '{ \"firstName\":\"dddd\" , \"lastName\":\"Joe\",\"age\":20 },' +\n            '{ \"firstName\":\"dddd\" , \"lastName\":\"Henry\",\"age\":15 },' +\n            '{ \"firstName\":\"ehhgh\" , \"lastName\":\"u\",\"age\":15 }]';\n            break;\n        }\n    }\n\n    var myObject = eval('(' + jsonRes + ')');\n    return myObject;\n</code></pre>\n\n<p>}</p>\n\n<p>I have already seen example listview projects of <code>React Native</code>. They are using <code>dataSource.cloneWithRows</code> for this purpose. Don't know what small thing I am missing. Please help me to sort out this issue... Thanks!</p>\n    ","a":"\n<p>I have been able to successfully debug the issue. I just opened the source code for <code>ListViewDataSource.js</code> and traced the <code>datablob</code> variable value passed along the different functions.</p>\n\n<p>A method <code>_calculateDirtyArrays</code> identifies which rows have been changed and need to be updated. For this, one of the three conditions must match for a row.</p>\n\n<pre><code> ........\n    // dirty if the section is new, row is new or _rowHasChanged is true\n    dirty =\n      !prevSectionsHash[sectionID] ||\n      !prevRowsHash[sectionID][rowID] ||\n      this._rowHasChanged(\n        this._getRowData(prevDataBlob, sectionID, rowID),\n        this._getRowData(this._dataBlob, sectionID, rowID)\n      );\n    this._dirtyRows[sIndex].push(!!dirty);\n ........\n</code></pre>\n\n<p><code>_rowHasChanged</code>is the one passed to <code>List Datasource</code> constructor.</p>\n\n<pre><code>var dataSource = new ListView.DataSource(\n{rowHasChanged: (r1, r2) =&gt; r1.guid !== r2.guid});\n</code></pre>\n\n<p>This was wrong in my case, since row should be changed when corresponding data changes. I changed above condition per my requirement.</p>\n\n<pre><code>var dataSource = new ListView.DataSource(\n        {\n            rowHasChanged: function(r1, r2) : bool {\n                return (\n                (r1[\"firstName\"] !== r2[\"firstName\"]) ||\n                (r1[\"lastName\"] !== r2[\"lastName\"]) ||\n                (r1[\"age\"] !== r2[\"age\"])\n                );\n            }\n        });\n</code></pre>\n\n<p>and voila! It works perfect now. Hopefully it helps someone in future!</p>\n    "},{"t":"How can I require a directory in ES6?","l":"http://stackoverflow.com/questions/30001832/how-can-i-require-a-directory-in-es6","q":"\n\n<p>I know I can require a file in ES6 like this:</p>\n\n<p><code>require('./config/auth');</code></p>\n\n<p>When I try to do this</p>\n\n<p><code>require('./config/');</code></p>\n\n<p>I get: <code>Module not found: Error: Cannot resolve directory './config'</code>. Why does this happen? How can I require a directory?</p>\n    ","a":"\n<p>First of all, your requires are in NodeJS/io.js syntax, module in ES6 syntax looks like this:</p>\n\n<pre><code>import \"./config/auth\";\n</code></pre>\n\n<p>Or if you want to load something from it:</p>\n\n<pre><code>import authenticate from \"./config/auth\";\n</code></pre>\n\n<p>You can't load whole directories at once, but in Node/io.js you can create a module and then load that.</p>\n\n<p>Note that as a workaround you can load a single file that in turn loads multiple files and returns their results. There is also work in progress on an asynchronous loader but that changes so often it's hard to keep track so I wouldn't rely on it just yet.</p>\n    "},{"t":"Using ES6 modules with traceur in single build file","l":"http://stackoverflow.com/questions/29882004/using-es6-modules-with-traceur-in-single-build-file","q":"\n\n<p>I just have a simple question cant get in any place, heve been googling for it all morning. There is no much info about traceur and when there is is not so clear, at least to me.</p>\n\n<p>How should be implemented the ES6 modules when im transpiling with traceur a single output file and using it in the browser with traceur-runtime?\nimport and export keeps getting Unexpected token.</p>\n\n<p>I am using gulp-traceur and tried already all the modules options \n//'commonjs' //'amd', 'commonjs', 'instantiate', 'inline', 'register'.</p>\n\n<p>One doubt I have is that I keep finding answers about commonjs, but my idea of using ES6 modules is to have differents sources and then from the main import them and have all this result compiled in one single file (what i mean is that I dont need async loading of the modules in the browser)</p>\n\n<p>Here is the gulp task</p>\n\n<pre><code>gulp.task('scripts', function() {\n      del.sync(['bin/js/main.min.js']);\n      del.sync(['bin/js/main.min.js.map']);\n      gulp.src([\"./src/app/init.js\", \"./src/app/elements/circle.js\", \"./src/app/app.js\"])\n        .pipe(sourcemaps.init())\n        .pipe(traceur({modules : 'inline', sourceMaps: 'inline', experimental: \"true\"})) //'commonjs' //'amd', 'commonjs', 'instantiate', 'inline', 'register'\n          .on('error', errorParser)\n        .pipe(jshint())\n          .pipe(jshint.reporter('jshint-stylish'))\n        .pipe(uglify({mangle: true})).on('error', errorParser)\n        .pipe(concat('main.min.js'))\n        .pipe(sourcemaps.write('.'))\n        .pipe(gulp.dest('bin/js'))\n        .pipe(livereload({ auto: true }));\n    });\n</code></pre>\n\n<p>The unexpected token comes from app when importing</p>\n\n<pre><code>import Circle from './elements/circle';\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import * as Circle from './elements/circle.js';\n</code></pre>\n\n<p>(Tried several ways)</p>\n\n<p>Also from circle.js when exporting</p>\n\n<p><code>export default Circle;</code> or <code>export Circle;</code> (also tried several ways)</p>\n    ","a":"\n<p>At the end I finished switching Traceur for Babel as adviced by @Jeff in his comment.</p>\n\n<p>So my solution was to use Babel + Browserify + Gulp</p>\n\n<p>I think the error I was getting is regarding the code is transpilled correctly but no client is able to manage modules yet so is needed something like require or commonjs to handle the modules, Themain doubt is here, because I would expect traceur to already transform the code to ES5 understandable code. But again, the lack of info doesnt point this clear (I was googling more than 6 hours)</p>\n\n<p>I use a Browserify tool, babelify, that automatically translates the ES6 module syntax to browser understandable commonjs.</p>\n\n<p>This made my day. Due to lack of info I took time to realize/guess that using Browserify with Traceur would work also, but after taking a look at Babel, I think has advantages over Traceur, specially no need of runtime.js on the client, and the output is more consistent and less bloated.</p>\n\n<p>I paste below the gulp task I am using if it helps someone in the future:</p>\n\n<pre><code>gulp.task('scripts', function() {\n\n  del.sync(['bin/js/main.min.js']);\n  del.sync(['bin/js/main.min.js.map']);\n\n  gulp.src([\"./src/**/*.js\", \"!./src/lib/*.js\"])\n    .pipe(gp.jshint())\n    .pipe(gp.jshint.reporter('jshint-stylish'));\n\n  browserify({\n    entries: './src/app/app.js',\n    debug: true\n  })\n  .transform(babelify)\n  .bundle().on('error', errorParser)\n\n  .pipe(source('main.js'))\n  .pipe(gulp.dest('./bin/js'))\n    .pipe(gp.livereload({ auto: true }));\n\n});\n</code></pre>\n\n<p>Let me know if you have a better approach. </p>\n    "},{"t":"ES6 generators: transforming callbacks to iterators","l":"http://stackoverflow.com/questions/29699109/es6-generators-transforming-callbacks-to-iterators","q":"\n\n<p>I'm experimenting with ES6 generators with the help of <a href=\"https://babeljs.io/\" rel=\"nofollow\">babel</a>, and I have trouble understand how (or if!) I can effectively use callback based async function to output an iterator.</p>\n\n<p>Let's say I want be able to write a function that takes a number of urls, asynchronously download them and returns them as soon as they are downloaded.\nI would like to be able to write something like the following:</p>\n\n<pre><code>let urls = ['http://www.google.com', 'http://www.stackoverflow.com' ];\nfor ( {url, data} of downloadUrls(urls) ) {\n    console.log(\"Content of url\", url, \"is\");\n    console.log(data);\n}\n</code></pre>\n\n<p>How can I implement <code>downloadUrls</code> ?\nIdeally I would like to be able to write the following:</p>\n\n<pre><code>var downloadUrls = function*(urls) {\n    for( let url of urls ) {\n        $.ajax(url).done( function(data) {\n            yield data;\n        });\n    }\n};\n</code></pre>\n\n<p>This of course doesn't work, since ``yield'' is being invoked inside a callback and not directly inside the generator.\nI can find many examples online of people trying the same, they are either <a href=\"http://davidwalsh.name/async-generators\" rel=\"nofollow\">not much transparent</a>), require <a href=\"https://github.com/luciotato/waitfor-es6\" rel=\"nofollow\">enabling browser/node flags</a>, or use node-specific features/libraries. \nThe library closest to what I need seems to be <a href=\"http://taskjs.org/\" rel=\"nofollow\">task.js</a>, but I'm unable to have even the simplest example run on current Chrome.</p>\n\n<p>Is there a way to get the intended behaviour using standard and current features , (With current I mean usable with transpilers like babel, but without the need to enable extra flags on the browser) or do I have to wait for <code>async/await</code> ?</p>\n    ","a":"\n<blockquote>\n  <p>Is there a way to get the intended behaviour using standard and current features</p>\n</blockquote>\n\n<p>Yes, use promises and generators. Many promise libraries, and some standalone ones, feature the use of generator \"coroutines\".</p>\n\n<p>But notice that <a href=\"http://stackoverflow.com/a/29281361/1048572\">you cannot mix iteration with asynchrony</a>, you can use generators for either only. Your example seems to confuse them a bit - it looks like you expect that <code>for ( {url, data} of downloadUrls(urls) ) {</code> loop to work synchronously, which cannot work.</p>\n\n<blockquote>\n  <p>do I have to wait for <code>async/await</code>?</p>\n</blockquote>\n\n<p>No, you don't have to wait, <a href=\"http://babeljs.io/docs/usage/transformers/other/regenerator/\" rel=\"nofollow\">Babel already supports them</a>!</p>\n    "},{"t":"Create a class extending from ES6 Map","l":"http://stackoverflow.com/questions/29434406/create-a-class-extending-from-es6-map","q":"\n\n<p>Trying to get away with custom get/set functionality on ES6 Maps. Currently using <a href=\"http://babeljs.io/\" rel=\"nofollow\">Babel</a> to transpile my code to ES5.</p>\n\n<p><code>Chrome Version 41.0.2272.101 m</code></p>\n\n<pre><code>class MyMap extends Map {\n    get(key) {\n        if (!this.has(key)) { throw new Error(...); }\n        return super.get(key);\n    }\n\n    set(key) {\n        if (this.has(key)) { throw new Error(...); }\n        return super.set(key);\n    }\n}\n</code></pre>\n\n<p>Not sure if I just got the syntax wrong or I'm missing an implementation of some sort. But I get the following error:</p>\n\n<blockquote>\n  <p>Method Map.prototype.forEach called on incompatible reciever</p>\n</blockquote>\n    ","a":"\n<p>Babel explictly states they do not support extending built-in classes. See <a href=\"http://babeljs.io/docs/usage/caveats/#classes\" rel=\"nofollow\">http://babeljs.io/docs/usage/caveats/#classes</a>. The reasons are not quite as simple as \"limitations in ES5\", however, since <code>Map</code> is not an ES5 feature to begin with. It appears that implementations of Map do not support basic patterns such as</p>\n\n<pre><code>Map.prototype.set.call(mymap, 'key', 1);\n</code></pre>\n\n<p>which is essentially what Babel generates in this case. The problem is that implementations of Map including V8 are overly restrictive and check that the <code>this</code> in the <code>Map.set.call</code> call is precisely a Map, rather than having Map in its prototype chain.</p>\n\n<p>Same applies to Promise.</p>\n    "},{"t":"Is it possible to turn on React.js autobinding for React's class model","l":"http://stackoverflow.com/questions/29387121/is-it-possible-to-turn-on-react-js-autobinding-for-reacts-class-model","q":"\n\n<p>According to <a href=\"https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding\" rel=\"nofollow\">this blog post</a> feature that bounds all methods in <code>React.createClass</code> to <code>this</code> is <strong>not built-in</strong> in React's class model.</p>\n\n<p>Is it possible to turn it on <strong>by default</strong>?</p>\n\n<p>I know that it's possible to use <code>this.someMethod = this.ticksomeMethod.bind(this);</code> trick do manually do this, but is it possible to <strong>do it for all methods</strong>? Or am I forced to write <code>bind</code> for all methods?</p>\n\n<p>Example of code I have now:\n</p>\n\n<pre><code>import MessageStore from '../stores/MessageStore.js';\n\nexport default class Feed extends React.Component {\n   constructor() {\n      this.state = {messages: MessageStore.getAll()}\n      //can I avoid writing this for every single method?\n      this._onChange = this._onChange.bind(this); \n   }\n\n   _onChange() {\n       this.setState({messages: MessageStore.getAll()});\n   };\n\n   // componentDidMount, componentWillUnmount and render methods ommited\n}\n</code></pre>\n    ","a":"\n<p>There is no feature to activate that does this in React currently. It's simply not an option. </p>\n\n<p>You could post-process a class and automatically <code>bind</code> every function, but that's likely unnecessary in many classes, and adds overhead to every call (as your code will probably have a mixture of functions needing binding and some that don't). </p>\n\n<p>You'll need to decide whether automatic adjustment is worth it or just using the <code>bind</code> syntax in the context of event callbacks, the typical place it's required in JavaScript, is acceptable. </p>\n    "},{"t":"Relative Dynamic Loading with systemJS, using ES6/Babel syntax","l":"http://stackoverflow.com/questions/29358499/relative-dynamic-loading-with-systemjs-using-es6-babel-syntax","q":"\n\n<p>I have a module written in pure ES6 that I would like to leverage in a separate web application. The module's entry point is main.js and contains the following:</p>\n\n<p><strong>main.js</strong></p>\n\n<pre><code>export { A } from './a';\nexport { B } from './b';\nexport { C } from './c';\n</code></pre>\n\n<p>When I use systemJS to import this <code>main.js</code>, it then attempts to resolve these dependencies local to the web application, not the module. </p>\n\n<blockquote>\n  <p>GET <a href=\"http://localhost:9000/dist/a.js\" rel=\"nofollow\">http://localhost:9000/dist/a.js</a> 404 (Not Found)</p>\n</blockquote>\n\n<p>I see there's support for <a href=\"https://github.com/systemjs/systemjs/wiki/Relative-Dynamic-Loading\" rel=\"nofollow\">relative dynamic loading</a> already, but it involves passing an extra function to the <code>System.import</code> function, which I'm not using--I'm using ES6 syntax.</p>\n\n<p>Are there any examples or best practices of how to do this? Please and thank you.</p>\n    ","a":"\n<p>The best method for this is to hack* your <code>config.js</code> file. We need to register a new 'repository' with systemjs that points to the location of the library of the file system. To do this, we add the following line to our <code>config.js</code>.</p>\n\n<pre><code>System.config({\n  \"map\": {\n    ...\n    \"lib\": \"path/to/lib/main\"\n    ...\n  }\n});\n</code></pre>\n\n<p>When systemjs tries to load <code>lib</code>, it finds the map entry and loads all dependencies of <code>lib</code> relative to that location. If the library is in an unreasonably distant location, it may be useful to create a directory symlink in your application to the library.</p>\n    "},{"t":"Are ES6 template literals faster than string concatenation?","l":"http://stackoverflow.com/questions/29055518/are-es6-template-literals-faster-than-string-concatenation","q":"\n\n<p>Has anyone done benchmarks?  I'm curious if HTML generation code is faster  with string concatenation or with template literals in Node and modern browsers.</p>\n\n<p>For example:</p>\n\n<p><strong>String concatenation</strong></p>\n\n<pre><code>\"&lt;body&gt;\"+\n  \"&lt;article&gt;\"+\n    \"&lt;time datetime='\" + date.toISOString() +\"'&gt;\"+ date +\"&lt;/time&gt;\"+\n  \"&lt;/article&gt;\"+\n\"&lt;/body&gt;\"\n</code></pre>\n\n<p><strong>Template literal</strong></p>\n\n<pre><code>`&lt;body&gt;\n  &lt;article&gt;\n    &lt;time datetime='${ date.toISOString() }'&gt;${ date }&lt;/time&gt;\n  &lt;/article&gt;\n&lt;/body&gt;`\n</code></pre>\n    ","a":"\n<p>It seems for the moment <strong>string concatenation is faster</strong>: <a href=\"http://jsperf.com/es6-string-literals-vs-string-concatenation\" rel=\"nofollow\">http://jsperf.com/es6-string-literals-vs-string-concatenation</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ES6 with variable                     19,992,512    ±5.21%    78% slower\nString concatenation with variable    89,791,408    ±2.15%    fastest\nES6 with function                     461,358       ±3.12%    99% slower\nString concatenation with function    503,255       ±1.77%    99% slower\n</code></pre>\n\n<p>I tested was run on Chrome 43.0.2334.0 canary (64-bit), which is using V8 4.3.31, with the <code>#enable-javascript-harmony</code> flag enabled.</p>\n\n<p>For reference, the latest version on Node.js (0.12.0 at the time of writing) is using V8 3.28.73: <a href=\"https://raw.githubusercontent.com/joyent/node/master/ChangeLog\" rel=\"nofollow\">https://raw.githubusercontent.com/joyent/node/master/ChangeLog</a></p>\n\n<p>I'm sure all the possible performance optimizations that could be applied have not been applied yet, so it would be reasonable to expect performance to get better as ES6 gets closer to finalization and these features get migrated to the stable branch.</p>\n    "},{"t":"How to make an iterator out of an ES6 class","l":"http://stackoverflow.com/questions/28739745/how-to-make-an-iterator-out-of-an-es6-class","q":"\n\n<p>How would I make an iterator out of an ES6 class in the same manner as JS1.7 <code>SomeClass.prototype.__iterator__ = function() {...}</code> syntax?</p>\n\n<p>[EDIT 16:00]</p>\n\n<p>The following works:</p>\n\n<pre><code>class SomeClass {\n    constructor() {\n    }\n\n    *[Symbol.iterator]() {\n        yield '1';\n        yield '2';\n    }\n\n    //*generator() {\n    //}\n\n}\n\nan_instance = new SomeClass();\nfor (let v of an_instance) {\n    console.log(v);\n}\n</code></pre>\n\n<p>WebStorm flags <code>*[Symbol.iterator]()</code> with a 'function name expected' warning directly following the asterix, but otherwise this compiles and runs fine with Traceur.  (Note WebStorm does not generate any errors for <code>*generator()</code>.)</p>\n    ","a":"\n<p>Define a suitable iterator method. For example:</p>\n\n<pre><code>class C {\n  constructor() { this.a = [] }\n  add(x) { this.a.push(x) }\n  [Symbol.iterator]() { return this.a.values() }\n}\n</code></pre>\n    "},{"t":"why Number.parseInt and global's parseInt are differents?","l":"http://stackoverflow.com/questions/27394507/why-number-parseint-and-globals-parseint-are-differents","q":"\n\n<p>In MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\" rel=\"nofollow\">Number.parseInt</a> section, it says that:</p>\n\n<blockquote>\n  <p>The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base. <em><strong>This method behaves identically to the global function parseInt()</strong></em> and is part of ECMAScript 6 (its purpose is modularization of globals).</p>\n</blockquote>\n\n<p>.. but the following code yields <code>false</code> on latest firefox</p>\n\n<pre><code>console.log(Number.parseInt == parseInt)\n</code></pre>\n\n<p>So are they just the <em>same</em>?</p>\n    ","a":"\n<p>AFAIK your comparison (when applied to Functions) tests whether it's the exact same instance of Function, which is not - they just happen to have similar <strong>content</strong> (code) inside. You can easily test it by defining your own 2 functions that just happen to contain similar code, e.g. \"{alert('hi')}\" in both. You'll see they are not \"==\"</p>\n    "},{"t":"Javascript snippet runner supporting ES 6 (like jsFiddle)","l":"http://stackoverflow.com/questions/26823514/javascript-snippet-runner-supporting-es-6-like-jsfiddle","q":"\n\n<p>Apparently, neither jsFiddle, nor codepen.io support ES6 syntax (e.g. running <code>let x = 10</code> will throw an error - <a href=\"http://jsfiddle.net/vbwu2mjy/\" rel=\"nofollow\">see for yourself</a>). </p>\n\n<p>Obvious choice would be <a href=\"http://www.es6fiddle.net/\" rel=\"nofollow\">es6fiddle</a>, but it produces <a href=\"http://www.es6fiddle.net/i29msptf/\" rel=\"nofollow\">clearly false results</a> (block-scoped variable i stays defined out of scope).</p>\n\n<p>Is there any snippet runner at all, supporting ES6?</p>\n    ","a":"\n<p>The particular problem you are seeing is due to <a href=\"https://github.com/google/traceur-compiler/issues/1358\" rel=\"nofollow\">a bug in Traceur</a>, the ES6 to ES5 transpiler that many snippet runners use to add \"ES6 support.\" You'll find that such runners are generally limited by the software running them, and in the case of Traceur, that means usually-excellent, but sometimes-buggy, ES6 support.</p>\n    "},{"t":"Is there a way in Eclipse to change the ECMAScript compliance level?","l":"http://stackoverflow.com/questions/31624174/is-there-a-way-in-eclipse-to-change-the-ecmascript-compliance-level","q":"\n\n<p>In Eclipse 4.5 (Mars) with installed <a href=\"http://www.eclipse.org/webtools/\" rel=\"nofollow\">JavaScript Development Tools (JSDT)</a> the default compliance level for ECMAScript is set to ECMAScript 3, which is already very outdated. And the related drop down list to change the compliance level is deactivated, so it's not possible to change the option.</p>\n\n<p><a href=\"http://i.stack.imgur.com/hUUdf.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/hUUdf.png\" alt=\"JavaScript validator preferences not allowing to change ECMAScript compliance level\"></a></p>\n\n<p>Is there a way to change those settings to a newer standard like ECMAScript 5 or ECMAScript 2015?</p>\n    ","a":"\n<p>In fact, there is no way to use a newer compliance level directly in JSDT. But you can use an other plugin tern-java. </p>\n\n<p>In this plugin you can use ES5 or ES2015 (named before ES6) <a href=\"https://github.com/angelozerr/tern.java/wiki/Tern-&amp;-ECMAScript-support\" rel=\"nofollow\">https://github.com/angelozerr/tern.java/wiki/Tern-&amp;-ECMAScript-support</a></p>\n\n<p>Personnally I added this plugin via the installation of angular-eclipse. You can find this plugin on Eclipse Marketplace.</p>\n    "},{"t":"AngularJS 2.0 - How to test the application?","l":"http://stackoverflow.com/questions/31002471/angularjs-2-0-how-to-test-the-application","q":"\n\n<p>I'm building an AngularJS app (using ES6) that is as much AngularJS 2.0 as possible, so I won't have lots of work with migration.</p>\n\n<p>As you know there won't be controllers as we know them in &lt;=v1.4</p>\n\n<p>Example code of one of my directives</p>\n\n<pre><code>class LoginSidebar {\n\n    constructor() {\n\n    }\n\n    someMethod(){\n    }   \n}\n\nLoginSidebar.$inject = [];\n\nexport default function() {\n    return {\n        scope: {},\n        templateUrl: 'tpl/path/to/loginSidebar.tpl.html',\n        replace: true,\n        controller: LoginSidebar,\n        controllerAs: 'loginSidebarCtrl'\n    };\n};\n</code></pre>\n\n<p>This is what my app.js looks like</p>\n\n<pre><code>import loginSidebar from \"./js/component/loginSidebar/LoginSidebar.js\";\n\nangular.module('myModule', [\n    'ngNewRouter',\n    'ngAnimate'\n])\n\n    .directive(\"loginSidebar\", loginSidebar);\n</code></pre>\n\n<p>As you can see I have no <code>.controller()</code> in there, so how am I supposed to test the methods inside the class ? </p>\n\n<p>PS. \nI have tried using Karma-Jasmine, but I have to test the whole directive and if I do so, I get the error I wrote here: <a href=\"http://stackoverflow.com/questions/30995436/angularjs-karma-jasmine-how-to-ignore-templateurl-to-avoid-unexpected-reque\">AngularJS &amp; Karma-Jasmine - How to ignore templateUrl to avoid \"Unexpected request: GET .../.html\"</a></p>\n    ","a":"\n<p>You can define controller with global name, and then reference it in directive:</p>\n\n<pre><code>//LoginSidebarController.js\nclass LoginSidebarController {\n  // controller code here\n}\n\nexport default LoginSidebarController\n\n//LoginSidebarDirective.js\nexport default function() {\n    return {\n        scope: {},\n        templateUrl: 'tpl/path/to/loginSidebar.tpl.html',\n        replace: true,\n        controller: 'LoginSidebarController',\n        controllerAs: 'loginSidebarCtrl'\n    };\n};\n\n//app.js\nimport loginSidebarDirective from \"./js/component/loginSidebar/LoginSidebarDirective.js\";\nimport LoginSidebarController from \"./js/component/loginSidebar/LoginSidebarController.js\";\n\nangular.module('myModule', [])\n     .directive('loginSidebar', loginSidebarDirective)\n     .controller('LoginSidebarController', LoginSidebarController)\n</code></pre>\n\n<p>Then you can require controller as other usual controller to test it independently from directive.</p>\n\n<p>As the second way you can get access to controller via <code>angular.element().controller('loginSidebar')</code> method. Something like this:</p>\n\n<pre><code>var testElm = angular.element('&lt;login-sidebar /&gt;');\n$compile(testElm);\ntestElm.controller('loginSidebar')\n</code></pre>\n    "},{"t":"ES6 - Using babel/traceur with jQuery plugins","l":"http://stackoverflow.com/questions/30512650/es6-using-babel-traceur-with-jquery-plugins","q":"\n\n<p>I want to be able to write ES6 with jQuery plugins and compile the code down to ES5 using Gulp Babel, without having to use Browserify to make them work.</p>\n\n<p>For example, I may have a class like this:</p>\n\n<pre><code>import $ from 'jquery';\nimport somePlugin from 'somePlugin';\n\nclass myClass {\n    constructor(options) {\n        this.defaults = {\n            $body: $('body')\n        };\n\n        this.options = $.extend(this.defaults, options);\n\n        $body.somePlugin();\n    }\n}\n</code></pre>\n\n<p>I can get this to work if I use Babelify but I'd prefer to find a way where I do not have to depend on another process. When I just use Babel, I get this error in the console: <code>Uncaught ReferenceError: require is not defined</code>.\nI checked the code and it looks like it's turning the imports into requires. </p>\n\n<p>Is there a way around this or will I have to stick with using Browserify (Babelify) to compile the JavaScript?</p>\n\n<p>EDIT: I am currently using <a href=\"https://github.com/thlorenz/browserify-shim\" rel=\"nofollow\">browserify-shim</a> to make the jQuery plugins work too</p>\n\n<p>EDIT2: No this is not about RequireJS - I'm trying to remove the use of Browserify with Babel</p>\n    ","a":"\n<p>Answering my own question here. I did some digging and it looks like the best way of dealing with this issue at the moment is using jspm with the es6-module-loader. </p>\n\n<p>Gulpfile:</p>\n\n<pre><code>var gulp    = require('gulp');\nvar del     = require('del');\nvar shell   = require('gulp-shell');\n\ngulp.task('clean', function(cb) {\n  del('dist', cb);\n});\n\ngulp.task('default', ['clean'], shell.task([\n  'jspm bundle-sfx app/main -o dist/app.js',\n  './node_modules/.bin/uglifyjs dist/app.js -o dist/app.min.js',\n  './node_modules/.bin/html-dist index.html --remove-all --minify --insert app.min.js -o dist/index.html'\n]));\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;head&gt;\n    &lt;title&gt;ES6&lt;/title&gt;\n    &lt;script src=\"jspm_packages/system.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"config.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        System.import('app/main');\n    &lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>The repo I created <a href=\"https://github.com/linnett/es6-modules\" rel=\"nofollow\">here</a> will also show you how to do it</p>\n    "},{"t":"How do I perform an export that is compatible with ES5 and ES6?","l":"http://stackoverflow.com/questions/30241729/how-do-i-perform-an-export-that-is-compatible-with-es5-and-es6","q":"\n\n<p>I'm writing a \"class\" in node </p>\n\n<pre><code>// mymodule/index.js\n\nfunction MyClass() {}\nMyClass.prototype.method1 = function() {..}\n</code></pre>\n\n<p>usually I do</p>\n\n<pre><code>module.exports = MyClass\n</code></pre>\n\n<p>but I want my class available for both syntax</p>\n\n<pre><code>var MyClass = require('mymodule')\n</code></pre>\n\n<p>and</p>\n\n<pre><code>import {MyClass} from 'mymodule'\n</code></pre>\n\n<p>Which is the correct way to do it?</p>\n    ","a":"\n<p>From the comments, I understand you are trying to run your ES6 frontend code in some mocha unit tests in node. Yes, you can't do that until node support ES6 modules. If I were you, I would use <a href=\"https://github.com/systemjs/systemjs#nodejs-use\" rel=\"nofollow\">systemjs</a> to load code for those mocha tests.\nMocha supports promises, so it should be fairly painless to load any files before tests.</p>\n\n<p>Writing syntax for both will just create more problems for you.</p>\n    "},{"t":"How to get SharePoint list field value of type person or group using ecmascript or SPServices?","l":"http://stackoverflow.com/questions/30075621/how-to-get-sharepoint-list-field-value-of-type-person-or-group-using-ecmascript","q":"\n\n<p>Following is my code...</p>\n\n<pre><code>function retrieveListItems() {\n    var clientContext = new SP.ClientContext(siteUrl);\n    var oList = clientContext.get_web().get_lists().getByTitle('list name');\n    var camlQuery = new SP.CamlQuery();\n    camlQuery.set_viewXml('&lt;View&gt;&lt;Query&gt;&lt;Where&gt;&lt;Eq&gt;&lt;FieldRef Name=\\'ID\\'/&gt;' + &lt; Value Type = \\'Integer\\'&gt;413&lt;/Value&gt;&lt;/Eq&gt;&lt;/Where&gt;&lt;/Query&gt;&lt;/View&gt;');\n    this.collListItem = oList.getItems(camlQuery);\n    clientContext.load(collListItem);\n    clientContext.executeQueryAsync(Function.createDelegate(this, this.onQuerySucceeded), Function.createDelegate(this, this.onQueryFailed));\n}\n\nfunction onQuerySucceeded(sender, args) {\n    var listItemInfo = '';\n    var listItemEnumerator = collListItem.getEnumerator();\n    while (listItemEnumerator.moveNext()) {\n        var oListItem = listItemEnumerator.get_current();\n        listItemInfo += 'Title: ' + oListItem.get_item('Writer').get_lookupValue();\n    }\n    alert(listItemInfo.toString());\n}\n\nfunction onQueryFailed(sender, args) {\n    alert('Request failed. ' + args.get_message() + '\\n' + args.get_stackTrace());\n}\n</code></pre>\n\n<p>I even tried with <code>oListItem.get_item('Writer').get_title()</code> but it is not working..\nSometime it returns undefined...\nPlease help..</p>\n    ","a":"\n<p>If you are looking for list item 'Created By' value then use 'Author' instead of 'Writer' or if you want 'Modified By' value then use 'Editor' instead of 'Writer'.</p>\n    "},{"t":"Access to Map values in Safari 7.1+","l":"http://stackoverflow.com/questions/29669816/access-to-map-values-in-safari-7-1","q":"\n\n<p>Safari has support for ES6 Maps and Sets in version 7.1 and higher (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Browser_compatibility\" rel=\"nofollow\">MDN</a>).\nI'm using a Map in my application and at some point want access to the values. Calling the <code>values()</code> function on the map seems like the way to go and returns an Iterator. By calling <code>next()</code> on the returned Iterator, one should be able to iterate over the values. This works fine in Chrome, but Safari does something strange. It returns a <code>Map Iterator</code> when calling <code>values()</code>, but the returned iterator has no <code>next()</code> function.</p>\n\n<pre><code>m = new Map();\nm.set(1, \"test\");\nm.set(\"2\", false);\nit = m.values(); // returns Map Iterator\nit.next(); // TypeError: undefined is not a function\n</code></pre>\n\n<p>Am I missing something obvious, or is the Safari implementation only partial?\nIs there another way to get access to the values? Using the <code>for..of</code> construct is not an option because this is new syntax and is not supported in older browsers (for which I use the es6-collections shim).</p>\n    ","a":"\n<p>This indeed seems to be a bug with Safari 7.1 and 8. I managed to work around this issue by first checking if the next function was available and if not, I used the <code>for...of</code> construct. Because this is invalid syntax pre-ES6, I had to wrap it in an <code>eval</code> statement:</p>\n\n<pre><code>m = new Map();\nm.set(1, \"test\");\nm.set(\"2\", false);\nit = m.values(); // returns an Iterator\nif (typeof it.next === 'function') {\n    v = it.next();\n    // do something with v here\n} else {\n    eval(\"for (v of iterator) /* do something with v here */\");\n}\n</code></pre>\n    "},{"t":"Accessing exported functions by string in ES6 modules","l":"http://stackoverflow.com/questions/29539006/accessing-exported-functions-by-string-in-es6-modules","q":"\n\n<p>Consider the following:</p>\n\n<pre><code>exports['handleEvent']('event');\n\nexport function handleEvent(event) {\n  // do something with `event`\n}\n</code></pre>\n\n<p>This works when using babel to transpile node modules because it sticks everything on the exports object. Is there any concept of the exports object in vanilla ES6? I want to be able to call a method using a string of its name.</p>\n\n<p>One thing I've thought of is just sticking all the functions on an object and exporting them individually. Another option would be to use some evil eval stuff. Are there any standard methods for accessing ES6 exports within the current module by string?</p>\n    ","a":"\n<p>Not quite sure I follow...</p>\n\n<p>Here are a few examples of ES6 module importing + exporting. Do any of them match what you're looking for?</p>\n\n<p><strong>Example 1</strong></p>\n\n<p>Producer:</p>\n\n<pre><code>export function one() { return 1 };\nexport function two() { return 2 };\n</code></pre>\n\n<p>Consumer:</p>\n\n<pre><code>import {one, two} from 'producer';\n\none();\ntwo();\n</code></pre>\n\n<p><strong>Example 2</strong></p>\n\n<p>Producer:</p>\n\n<pre><code>export function one() { return 1 };\nexport function two() { return 2 };\n</code></pre>\n\n<p>Consumer:</p>\n\n<pre><code>import * as producer from 'producer';\n\nproducer.one(); // or producer['one']()\nproducer.two();\n</code></pre>\n\n<p><strong>Example 3</strong></p>\n\n<p>Producer:</p>\n\n<pre><code>export default {\n  one() { return 1 },\n  two() { return 2 }\n};\n</code></pre>\n\n<p>Consumer:</p>\n\n<pre><code>import producer from 'producer';\n\nproducer.one(); // or producer['one']()\nproducer.two();\n</code></pre>\n\n<p><strong>Example 4</strong></p>\n\n<p>Producer:</p>\n\n<pre><code>export default {\n  one() { return 1 },\n  two() { return 2 }\n};\n</code></pre>\n\n<p>Consumer:</p>\n\n<pre><code>import {one, two} from 'producer';\n\none();\ntwo();\n</code></pre>\n\n<p><strong>Example 5</strong></p>\n\n<p>Producer:</p>\n\n<pre><code>export default function() { return 1 };\nexport function two() { return 2 };\n</code></pre>\n\n<p>Consumer:</p>\n\n<pre><code>import one, {two} from 'producer';\n\none();\ntwo();\n</code></pre>\n    "},{"t":"ES6 methods get a null “this” and class variables are inaccessible","l":"http://stackoverflow.com/questions/29358481/es6-methods-get-a-null-this-and-class-variables-are-inaccessible","q":"\n\n<p>I'm using an ES6 class to bundle some functionality together in Node. Here's (basically) what it looks like:</p>\n\n<pre><code>class processDocs {\n  constructor(id) {\n    this.id = id;\n    // console.log(this) returns { id: id }\n  }\n\n  getDocs(cb) {\n    // console.log(this) returns null\n    docs\n      .query(qb =&gt; {\n         qb.where('id', this.id);\n      })\n      .fetch()\n      .then(function(documents) {\n        cb(null, documents);\n      })\n    ;\n  }\n\n  alterDocs(documents, cb) {\n    //some logic\n  }\n\n  reindexSearch(cb) {\n    //some logic\n  }\n\n  process() {\n    // console.log(this) returns { id: id }\n    async.waterfall([\n      this.getDocs,\n      this.alterDocs,\n      this.reindexSearch\n    ]);\n  }\n}\n\n\nexport default processDocs;\n</code></pre>\n\n<p>I thought that with ES6 classes, the way to assign public variables was to simply reference <code>this</code> and the way to initialize those variables via a constructor is exactly how it shows up in my class definition.</p>\n\n<p>Here's how I'm calling the class (in a separate file):</p>\n\n<pre><code>var Processor = require('./processDocs');\n\nvar pr = new Processor(id);\nvar docs;\npr.process();\n</code></pre>\n\n<p>Here's the issue, when I <code>console.log</code> out <code>this</code> from the constructor, I get my <code>{ id: id }</code> value as predicted; however, whenever I log out <code>this</code> in <code>getDocs</code> when <code>process</code> is running, it's null. BUT, when I log out <code>this</code> in <code>process()</code> right before the waterfall, I get my original object.</p>\n\n<p>Is there any reason for this? </p>\n\n<p>Btw, I'm using node: <code>v0.10.33</code> and babel-node <code>4.6.6</code> and I run babel-node with the <code>--harmony</code> flag. Before anyone asks, I can't update to a newer Node version due to a major dependency which is stuck at <code>v0.10.x</code>.</p>\n\n<p><strong>EDIT</strong> I was able to create a workaround but it's not very es6-like. The issue seems to be with <code>async.waterfall</code>. I had to use a <code>.bind</code> to fix it:</p>\n\n<pre><code>    async.waterfall([\n      this.getDocs.bind(this),\n      this.alterDocs.bind(this),\n      this.reindexSearch.bind(this)\n    ]);\n</code></pre>\n    ","a":"\n<p>I created myself the following functions.</p>\n\n<pre><code>let bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }; //from coffeescript's =&gt; operator\n\n//use in a class's constructor to make the this pointer always refer to the object in which a function resides\nfunction fixThisPointer(_this, func){\n  _this[func.name] = bind(_this[func.name], _this);\n}\n\nfunction fixThisPointer2(_this, funcNameArray){\n  for (name of funcNameArray){\n    _this[name] = bind(_this[name], _this);\n  }\n}\n</code></pre>\n\n<p>And then, when I need it, I use this command in my constructors</p>\n\n<pre><code>fixThisPointer(this, foo)\n</code></pre>\n\n<p>Or this command</p>\n\n<pre><code>fixThisPointer2(this, ['foo', 'foo2', 'foo3'])\n</code></pre>\n    "},{"t":"Ember CLI ES6 Modules: import path to app root","l":"http://stackoverflow.com/questions/29100217/ember-cli-es6-modules-import-path-to-app-root","q":"\n\n<p>I find the import path in ES6 modules very confusing when using it in Ember CLI.  For example, if I want to import a model deep in my application, I end up doing something like this:</p>\n\n<pre><code>import User from '../../../../../models/user';\n</code></pre>\n\n<p>This is an exercise of trial and error, as it's hard to easily visualize how deep in the folder tree I'm using this from.  Even worse, if I refactor my files, everything breaks.</p>\n\n<p>So alternatively, I can use an absolute path like this:</p>\n\n<pre><code>import User from 'app-name/models/user';\n</code></pre>\n\n<p>I prefer not to hard-code the app name into the path, because it can change.</p>\n\n<p>Is there a shorthand to specify the app root?</p>\n\n<p><code>./</code> doesn't work because <code>./</code> implies current path.</p>\n\n<pre><code>import User from './models/user';\n</code></pre>\n    ","a":"\n<p>Unfortunately there is no way to programmatically name ES6 imports at least in Ember so you can't use <code>ENV.modulePrefix</code>.</p>\n\n<p>However there is a workaround. Whenever you want to change module prefix run this GNU sed command from ZSH inside Ember root.</p>\n\n<pre><code>sed -i 's/previousName/newName/g' **/*\n</code></pre>\n    "},{"t":"why does second subscribtion not receive any values when subscribing twice to observable in rx 2.3?","l":"http://stackoverflow.com/questions/29094629/why-does-second-subscribtion-not-receive-any-values-when-subscribing-twice-to-ob","q":"\n\n<p>I have this barebones example not behaving as I expect based on the <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/creating.md#cold-vs-hot-observables\" rel=\"nofollow\">documentation of rxjs</a>. I would expect the subscriptions to both receive all values.</p>\n\n<p>The docs mention:</p>\n\n<blockquote>\n  <p>Two observers then subscribe to this sequence and print out its values. You will notice that <strong>the sequence is reset</strong> for each subscriber, in which the second subscription will restart the sequence from the first value.</p>\n</blockquote>\n\n<pre><code>let s1 = rx.Observable.from([1, 2, 3, 4, 9, 11])\n\ns1.subscribe(\n    x =&gt; console.log(x), \n    x =&gt; console.log(x), \n    x =&gt; console.log('complete'))\n\ns1.subscribe(\n    x =&gt; console.log(x), \n    x =&gt; console.log(x), \n    x =&gt; console.log('complete'))\n</code></pre>\n\n<p>However the second subscription just logs 'complete'</p>\n\n<p>As it turns out the example works as expected in rxjs 2.4, but not in 2.3. Does anyone know what changed? I cannot spot it in <a href=\"https://github.com/Reactive-Extensions/RxJS/releases\" rel=\"nofollow\">the release notes</a></p>\n\n<p>Here is a jsfiddle with 2.3.20: <a href=\"http://jsfiddle.net/o93sxsc0/\" rel=\"nofollow\">fiddle</a></p>\n\n<p>and here is one with 2.4.1: <a href=\"http://jsfiddle.net/he53s1xp/\" rel=\"nofollow\">fiddle</a></p>\n    ","a":"\n<p>This not right behavior for a cold observable. An observable which created from an array is cold observable and cannot share subscription more than on one observer. For correct work you can transform your observable to a hot observable. You can look on this documentation <a href=\"http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/publish.html\" rel=\"nofollow\">http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/publish.html</a>. In your case you could use something like this <a href=\"http://jsbin.com/mowaco/edit?js,console\" rel=\"nofollow\">http://jsbin.com/mowaco/edit?js,console</a>. Now both subscriptions working parallel.</p>\n    "},{"t":"Migrating from CoffeeScript to es6","l":"http://stackoverflow.com/questions/27641501/migrating-from-coffeescript-to-es6","q":"\n\n<p>I'd like to migrate a largish program from CoffeeScript to es6.  By largish I mean  3K lines of Coffee (1.9K w/o comments) -&gt; 4.5K es5 w/o comments. Coffee is quite terse!</p>\n\n<p>I realize I can just compile to es5 and upgrade by hand to es6 features.  But CS is more like es6 than es5 so would prefer migrating from CS, not es5. I'll use Traceur or 6to5 for es6 features not available yet.</p>\n\n<p>Any pointers? I've seen one <a href=\"https://www.airpair.com/coffeescript/posts/migrating-coffeescript-to-es6-javascript\" rel=\"nofollow\">discussion on AirPair</a> but it was quite incomplete.</p>\n    ","a":"\n<p>There is a work in progress library to automate the process: <a href=\"https://github.com/eventualbuddha/decaffeinate\" rel=\"nofollow\">https://github.com/eventualbuddha/decaffeinate</a></p>\n\n<p>This is still incomplete but maybe it could be a good starting point.</p>\n    "},{"t":"Unit testing modules in app/utils for an ember-cli app","l":"http://stackoverflow.com/questions/24152995/unit-testing-modules-in-app-utils-for-an-ember-cli-app","q":"\n\n<p>Calling <code>moduleFor</code> on <code>\"util:transforms\"</code> appears to work,\nhowever <code>.subject</code> is <code>undefined</code>.</p>\n\n<p>The test file that I have got so far is:</p>\n\n<pre><code>import { test, moduleFor } from 'ember-qunit';\nimport TransformUtil from 'myapp/utils/transforms';\n\nmoduleFor('util:transforms', \"Unit - TransformUtil\");\n\ntest(\"Exists\", function(){\n  expect(1);\n  ok(this.subject() instanceof TransformUtil);\n});\n</code></pre>\n\n<p>Doing the same thing for other type of modules,\ne.g. <code>\"routes:index\"</code>, appears to work without issue;\nthe <code>app/utils</code> folder appears to be treated differently.</p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"ECMAScript:Harmony / ES6 to JavaScript compiler","l":"http://stackoverflow.com/questions/23155391/ecmascript-6-to-ecmascript-3-transpiler","q":"\n\n<p>After reading <a href=\"http://peter.michaux.ca/articles/javascript-is-dead-long-live-javascript\">Peter's article on JavaScript</a> I noticed</p>\n\n<blockquote>\n  <p>Brendan Eich stated that one the goals for Harmony is to be a better target for to-JavaScript compilers.</p>\n</blockquote>\n\n<p>There are currently two popular compilers with some vague <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3aproposals\">ES:Harmony</a> compliance:</p>\n\n<ul>\n<li><a href=\"https://github.com/google/traceur-compiler\">Traceur</a></li>\n<li><a href=\"http://jashkenas.github.com/coffee-script/\">CoffeeScript</a></li>\n</ul>\n\n<p>Although CoffeeScript has some compliance it's not designed to be an ES:Harmony compiler so it's not useful to this end.</p>\n\n<p>Tracuer seems to be sticking more rigorously to the ES:Harmony specification but I don't know whether it intends to become a full ES:Harmony compiler.</p>\n\n<p>Since the aim is to to compile ES6 down to ES3 it would also need to support ES5 features (and probably a switch whether to compile ES5 to ES3 or ES6 to ES3). </p>\n\n<ol>\n<li>Are there currently any other projects aiming to create a full ES:Harmony to ES3 compiler? </li>\n<li>Is it wise to start writing such a compiler knowing that the standard is young / unstable / in flux.</li>\n<li>Are there currently any ES5 -&gt; ES3 compilers?</li>\n</ol>\n\n<p>I've left a question on the <a href=\"http://groups.google.com/group/traceur-compiler-discuss/browse_thread/thread/2974b8ed9705110c\">Traceur mailing list</a>.</p>\n\n<p>The aim of such a compiler would be backwards compatibility with ES3. Not full emulation of ES5 and ES6 in ES3. </p>\n    ","a":"\n<p><a href=\"http://benvie.github.com/continuum/\">Continuum</a> has implemented most of the relevant features and should run in es3 browsers (like older IEs).</p>\n    "},{"t":"Operators and valueOf with ES6 proxies (Firefox)","l":"http://stackoverflow.com/questions/20399936/operators-and-valueof-with-es6-proxies-firefox","q":"\n\n<p>I run the following code:</p>\n\n<pre><code>var x = new Proxy({}, {\n    get: function(target, name) {\n        console.log(name);\n        return target[name];\n    }\n});\n\nvar y = x + 5;\n</code></pre>\n\n<p>Why isn't <code>'valueOf'</code> printed in console (in Firefox 24)?</p>\n\n<p>See <a href=\"http://jsfiddle.net/WFjvv/1/\" rel=\"nofollow\">http://jsfiddle.net/WFjvv/1/</a>.</p>\n    ","a":"\n<p>Seems to be fixed in Firefox 26.</p>\n    "},{"t":"CSP-safe ES6 template literals","l":"http://stackoverflow.com/questions/20232652/csp-safe-es6-template-literals","q":"\n\n<p>Is there a template engine that will parse templates in the style of <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components\" rel=\"nofollow\">ES6 template literals</a> (e.g. <code>\"string ${var}\"</code>) without violating a Content-Security-Policy (CSP) restriction on script evaluation?</p>\n\n<p>The <a href=\"http://www.w3.org/TR/CSP/#script-src\" rel=\"nofollow\">CSP restrictions on script evaluation</a> prevent <code>eval</code>, <code>new Function</code>, <code>setTimeout(string)</code> and <code>setInterval(string)</code>.</p>\n\n<p>There are a number of template engines that can provide or be modified to provide something like ES6-style template literals, such as John Resig's <a href=\"http://ejohn.org/blog/javascript-micro-templating/\" rel=\"nofollow\">MicroTemplates</a>, lodash _.template and <a href=\"http://olado.github.io/doT/\" rel=\"nofollow\">DoT.js</a>. However all seem to violate the CSP by using <code>new Function</code>.</p>\n\n<p>It would in some ways be convenient if <code>var</code> could be unrestricted Javascript, but for apparent reasons this may not be possible. However I would need to be able to modify the engine to format the output as desired.</p>\n\n<p>In the circumstances performance is not a concern, and pre-compiling the templates is not an option. Others have <a href=\"http://stackoverflow.com/questions/11489495/javascript-template-engines-that-work-with-chromes-content-security-policy\">discussed pre-compilation</a>.</p>\n\n<p>As an additional restriction, the content is text - not HTML. I do not think DOM-oriented templating engines such as Knockout or PURE would not work effectively, as a result.</p>\n\n<p>My first thought is to start with <a href=\"https://github.com/janl/mustache.js\" rel=\"nofollow\">mustache.js</a> and modify it from there (i.e. change <code>mustache.tags = ['${', '}']</code> or a <a href=\"http://www.angrycoding.com/2013/11/creating-your-own-template-engine-in.html\" rel=\"nofollow\">DIY solution</a>, but I would be grateful for any thoughts on the topic in general as there seems to be quite a dearth of discussion on CSP and templates.</p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"}]