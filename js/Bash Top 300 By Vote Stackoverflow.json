[{"t":"Can a Bash script tell what directory it's stored in?","l":"http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in","q":"\n\n<p>How do I get the path of the directory in which a <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> script is located FROM that Bash script?</p>\n\n<p>For instance, let's say I want to use a Bash script as a launcher for another application. I want to change the working directory to the one where the Bash script is located, so I can operate on the files in that directory, like so: </p>\n\n<pre>$ ./application</pre>\n    ","a":"\n<pre><code>DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &amp;&amp; pwd )\n</code></pre>\n\n<p>Is a useful one-liner which will give you the full directory name of the script no matter where it is being called from</p>\n\n<p>These will work as long as the last component of the path used to find the script is not a symlink (directory links are OK). If you want to also resolve any links to the script itself, you need a multi-line solution:</p>\n\n<pre><code>SOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &amp;&amp; pwd )\"\n  SOURCE=\"$(readlink \"$SOURCE\")\"\n  [[ $SOURCE != /* ]] &amp;&amp; SOURCE=\"$DIR/$SOURCE\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\ndone\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &amp;&amp; pwd )\"\n</code></pre>\n\n<p>This last one will work with any combination of aliases, <code>source</code>, <code>bash -c</code>, symlinks, etc.</p>\n\n<p>Beware: if you <code>cd</code> to a different directory before running this snippet, the result may be incorrect! Also, watch out for <a href=\"http://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/\"><code>$CDPATH</code> gotchas</a>.</p>\n\n<p>To understand how it works, try running this more verbose form:</p>\n\n<pre><code>#!/bin/bash\n\nSOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  TARGET=\"$(readlink \"$SOURCE\")\"\n  if [[ $SOURCE == /* ]]; then\n    echo \"SOURCE '$SOURCE' is an absolute symlink to '$TARGET'\"\n    SOURCE=\"$TARGET\"\n  else\n    DIR=\"$( dirname \"$SOURCE\" )\"\n    echo \"SOURCE '$SOURCE' is a relative symlink to '$TARGET' (relative to '$DIR')\"\n    SOURCE=\"$DIR/$TARGET\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\n  fi\ndone\necho \"SOURCE is '$SOURCE'\"\nRDIR=\"$( dirname \"$SOURCE\" )\"\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &amp;&amp; pwd )\"\nif [ \"$DIR\" != \"$RDIR\" ]; then\n  echo \"DIR '$RDIR' resolves to '$DIR'\"\nfi\necho \"DIR is '$DIR'\"\n</code></pre>\n\n<p>And it will print something like:</p>\n\n<pre><code>SOURCE './scriptdir.sh' is a relative symlink to 'sym2/scriptdir.sh' (relative to '.')\nSOURCE is './sym2/scriptdir.sh'\nDIR './sym2' resolves to '/home/ubuntu/dotfiles/fo fo/real/real1/real2'\nDIR is '/home/ubuntu/dotfiles/fo fo/real/real1/real2'\n</code></pre>\n    "},{"t":"How do I tell if a regular file does not exist in bash?","l":"http://stackoverflow.com/questions/638975/how-do-i-tell-if-a-regular-file-does-not-exist-in-bash","q":"\n\n<p>I've used the following script to see if a file exists:</p>\n\n<pre><code>#!/bin/bash\nFILE=$1\n\nif [ -f $FILE ];\nthen\n   echo \"File $FILE exists.\"\nelse\n   echo \"File $FILE does not exist.\"\nfi\n</code></pre>\n\n<p>What's the correct syntax to use if I only want to check if the file does <strong>not</strong> exist?</p>\n\n<pre><code>#!/bin/bash\nFILE=$1\n\nif [ $FILE does not exist ];\nthen\n   echo \"File $FILE does not exist.\"\nfi\n</code></pre>\n    ","a":"\n<p>The <a href=\"http://man7.org/linux/man-pages/man1/test.1.html\">test</a> command (<code>[</code> here) has a \"not\" logical operator which is the exclamation point (similar to many other languages). Try this:</p>\n\n<pre><code>if [ ! -f /tmp/foo.txt ]; then\n    echo \"File not found!\"\nfi\n</code></pre>\n    "},{"t":"In the shell, what does “ 2>&1 ” mean?","l":"http://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean","q":"\n\n<p>In a unix shell, if I want to combine stderr and stdout into the stdout stream for further manipulation, I can append the following on the end of my command:</p>\n\n<pre><code>2&gt;&amp;1\n</code></pre>\n\n<p>So, if I want to use \"head\" on the output from g++, I can do something like this:</p>\n\n<pre><code>g++ lots_of_errors 2&gt;&amp;1 | head\n</code></pre>\n\n<p>so I can see only the first few errors. </p>\n\n<p>I always have trouble remembering this, and I constantly have to go look it up, and it is mainly because I don't fully understand the syntax of this particular trick.  Can someone break this up and explain character by character what \"2&gt;&amp;1\"  means?</p>\n    ","a":"\n<p>File descriptor 1 is the standard output (stdout).<br>\nFile descriptor 2 is the standard error (stderr).</p>\n\n<p>Here is one way to remember this construct (although it is not entirely accurate): at first, <code>2&gt;1</code> may look like a good way to redirect stderr to stdout. However, it will actually be interpreted as \"redirect stderr to a file named <code>1</code>\". <code>&amp;</code> indicates that what follows is a file descriptor and not a filename. So the construct becomes: <code>2&gt;&amp;1</code>.</p>\n    "},{"t":"How can I concatenate string variables in Bash?","l":"http://stackoverflow.com/questions/4181703/how-can-i-concatenate-string-variables-in-bash","q":"\n\n<p>In PHP I would add strings together like this:</p>\n\n<pre><code>$foo = \"Hello\";\n$foo .= \" World\";\n</code></pre>\n\n<p>So <code>$foo</code> would be \"Hello World\"</p>\n\n<p>How would I do that in Bash?</p>\n    ","a":"\n<pre><code>foo=\"Hello\"\nfoo=\"$foo World\"\necho $foo\n&gt; Hello World\n</code></pre>\n\n<p>In general to concatenate two variables you can just write them one after another:</p>\n\n<pre><code>a='hello'\nb='world'\nc=$a$b\necho $c\n&gt; helloworld\n</code></pre>\n    "},{"t":"Extract filename and extension in Bash","l":"http://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash","q":"\n\n<p>I want to get the filename (without extension) and the extension separately.</p>\n\n<p>The best solution I found so far is:</p>\n\n<pre><code>NAME=`echo \"$FILE\" | cut -d'.' -f1`\nEXTENSION=`echo \"$FILE\" | cut -d'.' -f2`\n</code></pre>\n\n<p>This is wrong because it doesn't work if the file name contains multiple \".\" characters. If, let's say, I have <strong>a.b.js</strong> it will consider <strong>a</strong> and <strong>b.js</strong>, instead of <strong>a.b</strong> and <strong>js</strong>.</p>\n\n<p>It can be easily done in Python with</p>\n\n<pre><code>file, ext = os.path.splitext(path)\n</code></pre>\n\n<p>but I'd prefer not to fire a Python interpreter just for this, if possible.</p>\n\n<p>Any better ideas?</p>\n    ","a":"\n<p>First, get file without path:  </p>\n\n<pre><code>filename=$(basename \"$fullfile\")\nextension=\"${filename##*.}\"\nfilename=\"${filename%.*}\"\n</code></pre>\n\n<p>Alternatively, you can focus on the last '/' of the path instead of the '.' which should work even if you have unpredictable file extensions:</p>\n\n<pre><code>filename=\"${fullfile##*/}\"\n</code></pre>\n    "},{"t":"How do I split a string on a delimiter in Bash?","l":"http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash","q":"\n\n<p>How do I split a string based on a delimiter in Bash?</p>\n\n<p>I have this string stored in a variable:</p>\n\n<pre><code>IN=\"bla@some.com;john@home.com\"\n</code></pre>\n\n<p>Now I would like to split the strings by <code>;</code> delimiter so that I have:</p>\n\n<pre><code>ADDR1=\"bla@some.com\"\nADDR2=\"john@home.com\"\n</code></pre>\n\n<p>I don't necessarily need the <code>ADDR1</code> and <code>ADDR2</code> variables. If they are elements of an array that's even better.</p>\n\n<hr>\n\n<p>After suggestions from the answers below, I ended up with the following which is what I was after:</p>\n\n<pre><code>#!/usr/bin/env bash\n\nIN=\"bla@some.com;john@home.com\"\n\narr=$(echo $IN | tr \";\" \"\\n\")\n\nfor x in $arr\ndo\n    echo \"&gt; [$x]\"\ndone\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&gt; [bla@some.com]\n&gt; [john@home.com]\n</code></pre>\n\n<p>There was a solution involving setting <a href=\"http://en.wikipedia.org/wiki/Internal_field_separator\">Internal_field_separator</a> (IFS) to <code>;</code>. I am not sure what happened with that answer, how do you reset <code>IFS</code> back to default?</p>\n\n<p>RE: <code>IFS</code> solution, I tried this and it works, I keep the old <code>IFS</code> and then restore it:</p>\n\n<pre><code>IN=\"bla@some.com;john@home.com\"\n\nOIFS=$IFS\nIFS=';'\narr2=$IN\nfor x in $arr2\ndo\n    echo \"&gt; [$x]\"\ndone\n\nIFS=$OIFS\n</code></pre>\n\n<p>BTW, when I tried </p>\n\n<pre><code>arr2=($IN) \n</code></pre>\n\n<p>I only got the first string when printing it in loop, without brackets around <code>$IN</code> it works.</p>\n    ","a":"\n<p>You can set the <a href=\"http://en.wikipedia.org/wiki/Internal_field_separator\">internal field separator</a> (IFS) variable, and then let it parse into an array. When this happens in a command, then the assignment to <code>IFS</code> only takes place to that single command's environment (to <code>read</code> ). It then parses the input according to the <code>IFS</code> variable value into an array, which we can then iterate over.</p>\n\n<pre><code>IFS=';' read -ra ADDR &lt;&lt;&lt; \"$IN\"\nfor i in \"${ADDR[@]}\"; do\n    # process \"$i\"\ndone\n</code></pre>\n\n<p>It will parse one line of items separated by <code>;</code>, pushing it into an array. Stuff for processing whole of <code>$IN</code>, each time one line of input separated by <code>;</code>:</p>\n\n<pre><code> while IFS=';' read -ra ADDR; do\n      for i in \"${ADDR[@]}\"; do\n          # process \"$i\"\n      done\n done &lt;&lt;&lt; \"$IN\"\n</code></pre>\n    "},{"t":"String contains in bash","l":"http://stackoverflow.com/questions/229551/string-contains-in-bash","q":"\n\n<p>Using bash, I have a string:</p>\n\n<pre><code>string=`echo My string`\n</code></pre>\n\n<p>How can I test if it contains another string?</p>\n\n<pre><code>if [ $string ?? 'foo' ] then;\n  echo \"It's there!\";\nfi;\n</code></pre>\n\n<p>Where ?? is my unknown operator. Do I use echo and grep?</p>\n\n<pre><code>if [ `echo $string | grep 'foo' ` ] then;\n  echo \"It's there!\";\nfi;\n</code></pre>\n\n<p>That looks a bit clumsy.</p>\n    ","a":"\n<p>You can use <a href=\"http://stackoverflow.com/a/229585/3755692\">Marcus's answer</a> (* wildcards) outside a case statement, too, if you use double brackets:</p>\n\n<pre><code>string='My long string';\n\nif [[ $string == *\"My long\"* ]]\nthen\n  echo \"It's there!\";\nfi\n</code></pre>\n\n<p>Note that spaces in the needle string need to be places between double quotes, and the <code>*</code>wildcards should be outside the double quotes.</p>\n    "},{"t":"Check if a program exists from a bash script","l":"http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script","q":"\n\n<p>How would I validate that a program exists? Which would then either return an error and exit or continue with the script.</p>\n\n<p>It seems like it should be easy, but it's been stumping me.</p>\n    ","a":"\n<p>Yes; avoid <code>which</code>.  Not only is it an external process you're launching for doing very little (meaning builtins like <code>hash</code>, <code>type</code> or <code>command</code> are way cheaper), you can also rely on the builtins to actually do what you want, while the effects of external commands can easily vary from system to system.</p>\n\n<p>Why care?</p>\n\n<ul>\n<li>Many operating systems have a <code>which</code> that <strong>doesn't even set an exit status</strong>, meaning the <code>if which foo</code> won't even work there and will <strong>always</strong> report that <code>foo</code> exists, even if it doesn't (note that some POSIX shells appear to do this for <code>hash</code> too).</li>\n<li>Many operating systems make <code>which</code> do custom and evil stuff like change the output or even hook into the package manager.</li>\n</ul>\n\n<p>So, don't use <code>which</code>.  Instead use one of these:</p>\n\n<pre><code>$ command -v foo &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 \"I require foo but it's not installed.  Aborting.\"; exit 1; }\n$ type foo &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 \"I require foo but it's not installed.  Aborting.\"; exit 1; }\n$ hash foo 2&gt;/dev/null || { echo &gt;&amp;2 \"I require foo but it's not installed. &nbsp;Aborting.\"; exit 1; }\n</code></pre>\n\n<p>(minor side-note: some will suggest <code>2&gt;&amp;-</code> is the same <code>2&gt;/dev/null</code> but shorter - this is untrue.  <code>2&gt;&amp;-</code> closes FD 2 which causes an <strong>error</strong> in the program when it tries to write to stderr, which is very different from successfully writing to it and discarding the output (and dangerous!))</p>\n\n<p>If your hash bang is <code>/bin/sh</code> then you should care about what POSIX says.  <code>type</code> and <code>hash</code>'s exit codes aren't terribly well defined by POSIX, and <code>hash</code> is seen to exit successfully when the command doesn't exist (haven't seen this with <code>type</code> yet).  <code>command</code>'s exit status is well defined by POSIX, so that one is probably the safest to use.</p>\n\n<p>If your script uses <code>bash</code> though, POSIX rules don't really matter anymore and both <code>type</code> and <code>hash</code> become perfectly safe to use.  <code>type</code> now has a <code>-P</code> to search just the <code>PATH</code> and <code>hash</code> has the side-effect that the command's location will be hashed (for faster lookup next time you use it), which is usually a good thing since you probably check for its existence in order to actually use it.</p>\n\n<p>As a simple example, here's a function that runs <code>gdate</code> if it exists, otherwise <code>date</code>:</p>\n\n<pre><code>gnudate() {\n    if hash gdate 2&gt;/dev/null; then\n        gdate \"$@\"\n    else\n        date \"$@\"\n    fi\n}\n</code></pre>\n\n<h2>In summary:</h2>\n\n<p>Where <code>bash</code> is your shell/hashbang, consistently use <code>hash</code> (for commands) or <code>type</code> (to consider built-ins &amp; keywords).</p>\n\n<p>When writing a POSIX script, use <code>command -v</code>.</p>\n    "},{"t":"How to count all the lines of code in a directory recursively?","l":"http://stackoverflow.com/questions/1358540/how-to-count-all-the-lines-of-code-in-a-directory-recursively","q":"\n\n<p>We've got a PHP application and want to count all the lines of code under a specific directory and its subdirectories.  We don't need to ignore comments, as we're just trying to get a rough idea. </p>\n\n<pre><code>wc -l *.php\n</code></pre>\n\n<p>That command works great within a given directory, but ignores subdirectories.  I was thinking this might work, but it is returning 74, which is definitely not the case...</p>\n\n<pre><code>find . -name '*.php' | wc -l\n</code></pre>\n\n<p>What's the correct syntax to feed in all the files?  </p>\n    ","a":"\n<p><strong>Try:</strong></p>\n\n<pre><code>find . -name '*.php' | xargs wc -l\n</code></pre>\n\n<p><strong><a href=\"http://www.dwheeler.com/sloccount/\">This</a></strong> may help as well.</p>\n\n<p>It'll give an accurate source lines of code count for whatever\nhierarchy you point it at, as well as some additional stats.</p>\n    "},{"t":"Setting environment variables in OS X?","l":"http://stackoverflow.com/questions/135688/setting-environment-variables-in-os-x","q":"\n\n<p>What is the proper way to modify environment variables like PATH in OS X? I've looked on google a little bit and found 3 different files to edit: </p>\n\n<ul>\n<li>/etc/paths</li>\n<li>~/.profile</li>\n<li>~/.tcshrc</li>\n</ul>\n\n<p>I don't even have some of these, and I'm pretty sure that .tcshrc is wrong, since osx uses bash now. Anybody have any idea where these variables, especially PATH, are defined?</p>\n\n<p>Edit: I'm running OS X 10.5</p>\n    ","a":"\n<p>Bruno is right on track.  I've done extensive research and if you want to set variables that are available in all GUI apps, your only option is <code>/etc/launchd.conf</code></p>\n\n<p>Please note that <a href=\"http://www.digitaledgesw.com/node/31\">environment.plist does not work for applications launched via Spotlight.  This is documented by Steve Sexton here</a>.</p>\n\n<p>1) Open a terminal prompt</p>\n\n<p>2) Type <code>sudo vi /etc/launchd.conf</code> (note: this file might not yet exist)</p>\n\n<p>3) Put contents like the following into the file</p>\n\n<pre class=\"lang-none prettyprint-override\"><code># Set environment variables here so they are available globally to all apps\n# (and Terminal), including those launched via Spotlight.\n#\n# After editing this file run the following command from the terminal to update \n# environment variables globally without needing to reboot.\n# NOTE: You will still need to restart the relevant application (including \n# Terminal) to pick up the changes!\n# grep -E \"^setenv\" /etc/launchd.conf | xargs -t -L 1 launchctl\n#\n# See http://www.digitaledgesw.com/node/31\n# and http://stackoverflow.com/questions/135688/setting-environment-variables-in-os-x/\n#\n# Note that you must hardcode the paths below, don't use enviroment variables.\n# You also need to surround multiple values in quotes, see MAVEN_OPTS example below.\n#\nsetenv JAVA_VERSION 1.6\nsetenv JAVA_HOME /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home\nsetenv GROOVY_HOME /Applications/Dev/groovy\nsetenv GRAILS_HOME /Applications/Dev/grails\nsetenv NEXUS_HOME /Applications/Dev/nexus/nexus-webapp\nsetenv JRUBY_HOME /Applications/Dev/jruby\n\nsetenv ANT_HOME /Applications/Dev/apache-ant\nsetenv ANT_OPTS -Xmx512M\n\nsetenv MAVEN_OPTS \"-Xmx1024M -XX:MaxPermSize=512m\"\nsetenv M2_HOME /Applications/Dev/apache-maven\n\nsetenv JMETER_HOME /Applications/Dev/jakarta-jmeter\n</code></pre>\n\n<p>4) Save your changes in VI and reboot your Mac. Or use the grep/xargs command show in the code comment above.</p>\n\n<p>5) Prove that your variables are working by opening a Terminal window and typing <code>export</code> and you should see your new variables.  These will also be available in IntelliJ and other GUI apps you launch via Spotlight.</p>\n    "},{"t":"Why is whitespace sometimes needed around metacharacters?","l":"http://stackoverflow.com/questions/21186724/why-is-whitespace-sometimes-needed-around-metacharacters","q":"\n\n<p>A few months ago I tattooed a <a href=\"http://en.wikipedia.org/wiki/Fork_bomb\">fork bomb</a> on my arm, and I skipped the whitespaces, because I think it looks nicer without them. But to my dismay, <strong>sometimes</strong> (not always) when I run it in a shell it doesn't start a fork bomb, but it just gives a syntax error. </p>\n\n<pre><code>bash: syntax error near unexpected token `{:'\n</code></pre>\n\n<p>Yesterday it happened when I tried to run it in a friend's <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> shell, and then I added the whitespace and it suddenly worked, <code>:(){ :|:&amp; };:</code> instead of <code>:(){:|:&amp;};:</code></p>\n\n<p>Does the whitespace matter; have I tattooed a syntax error on my arm?!</p>\n\n<p>It seems to always work in <a href=\"http://en.wikipedia.org/wiki/Z_shell\">zsh</a>, but not in Bash.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/991142/how-does-this-bash-fork-bomb-work\">A related question</a> does not explain anything about the whitespaces, which really is my question; <strong>Why is the whitespace needed for Bash to be able to parse it correctly?</strong></p>\n\n<p><strong>Off-topic update:</strong> I patched the tattoo by saying that there is a whitespace inbetween every character, which makes the code parsable again.</p>\n\n<pre><code>: ( ) { : | : &amp; } ; :\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/2ujMh.jpg\" alt=\"Tattoo\"></p>\n    ","a":"\n<p>There is a list of characters that separate tokens in BASH. These characters are called <em>metacharacters</em> and they are <code>|</code>, <code>&amp;</code>, <code>;</code>, <code>(</code>, <code>)</code>, <code>&lt;</code>, <code>&gt;</code>, <strong>space</strong> and <strong>tab</strong>. On the other hand, curly braces (<code>{</code> and <code>}</code>) are just ordinary characters that make up words.</p>\n\n<p>Omitting the second space before <code>}</code> will do, since <code>&amp;</code> is a metacharacter. Therefore, your tattoo should have at least one space character.</p>\n\n<pre><code>:(){ :|:&amp;};:\n</code></pre>\n    "},{"t":"How do I prompt for input in a Linux shell script?","l":"http://stackoverflow.com/questions/226703/how-do-i-prompt-for-input-in-a-linux-shell-script","q":"\n\n<p>I want to pause input in a shell script, and prompt the user for choices. The standard 'Yes, No, or Cancel' type question. How do I accomplish this at a typical bash prompt?</p>\n    ","a":"\n<p>The simplest and most widely available method to get user input at a shell prompt is the '<a href=\"http://www.gnu.org/software/bash/manual/bashref.html#index-read-142\">read</a>' command. The best way to illustrate its use is a simple demonstration:</p>\n\n<pre><code>while true; do\n    read -p \"Do you wish to install this program?\" yn\n    case $yn in\n        [Yy]* ) make install; break;;\n        [Nn]* ) exit;;\n        * ) echo \"Please answer yes or no.\";;\n    esac\ndone\n</code></pre>\n\n<p>Another method, pointed out by Steven Huwig, is bash's '<a href=\"http://www.gnu.org/software/bash/manual/bashref.html#index-select-56\">select</a>' command. Here is the same example using select:</p>\n\n<pre><code>echo \"Do you wish to install this program?\"\nselect yn in \"Yes\" \"No\"; do\n    case $yn in\n        Yes ) make install; break;;\n        No ) exit;;\n    esac\ndone\n</code></pre>\n\n<p>With select you don't need to sanitize the input... it prompts you with your choices, and you type a number corresponding to the choice you want. Select also loops automatically... there's no need for a 'while true' loop to retry if they give invalid input.</p>\n\n<p>Also, please check out the <a href=\"http://stackoverflow.com/a/27875395/9084\">excellent answer</a> by F. Hauri below.</p>\n    "},{"t":"How do I reload .bashrc without logging out and back in?","l":"http://stackoverflow.com/questions/2518127/how-do-i-reload-bashrc-without-logging-out-and-back-in","q":"\n\n<p>If I make changes to <code>.bashrc</code>, how do I reload it without logging out and back in?</p>\n    ","a":"\n<p>You just have to enter the command:</p>\n\n<pre><code>source ~/.bashrc\n</code></pre>\n\n<p>or you can use the shorter version of the command:</p>\n\n<pre><code>. ~/.bashrc\n</code></pre>\n    "},{"t":"How to output MySQL query results in csv format?","l":"http://stackoverflow.com/questions/356578/how-to-output-mysql-query-results-in-csv-format","q":"\n\n<p>Is there an easy way to run a MySQL query from the linux command line and output the results in csv format?  </p>\n\n<p>Here's what I'm doing now:</p>\n\n<pre><code>mysql -u uid -ppwd -D dbname &lt;&lt; EOQ | sed -e 's/        /,/g' | tee list.csv\nselect id, concat(\"\\\"\",name,\"\\\"\") as name\nfrom students\nEOQ\n</code></pre>\n\n<p>It gets messy when there are a lot of columns that need to be surrounded by quotes, or if there are quotes in the results that need to be escaped.</p>\n    ","a":"\n<p>From <a href=\"http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/\">http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/</a></p>\n\n<pre><code>SELECT order_id,product_name,qty\nFROM orders\nINTO OUTFILE '/tmp/orders.csv'\nFIELDS TERMINATED BY ','\nENCLOSED BY '\"'\nLINES TERMINATED BY '\\n';\n</code></pre>\n\n<p>Using this command columns names will not be exported.</p>\n    "},{"t":"bash: redirect and append both stdout and stderr","l":"http://stackoverflow.com/questions/876239/bash-redirect-and-append-both-stdout-and-stderr","q":"\n\n<p>To redirect stdout in bash, overwriting file</p>\n\n<pre><code>cmd &gt; file.txt\n</code></pre>\n\n<p>To redirect stdout in bash, appending to file</p>\n\n<pre><code>cmd &gt;&gt; file.txt\n</code></pre>\n\n<p>To redirect both stdout and stderr, overwriting</p>\n\n<pre><code>cmd &amp;&gt; file.txt\n</code></pre>\n\n<p>How do I redirect both stdout and stderr appending to file? <code>cmd &amp;&gt;&gt; file.txt</code> does not work for me</p>\n    ","a":"\n<pre><code>cmd &gt;&gt;file.txt 2&gt;&amp;1\n</code></pre>\n    "},{"t":"How do I iterate over a range of numbers defined by variables in bash?","l":"http://stackoverflow.com/questions/169511/how-do-i-iterate-over-a-range-of-numbers-defined-by-variables-in-bash","q":"\n\n<p>How do I iterate over a range of numbers in bash when the range is given by a variable?</p>\n\n<p>I know I can do this (called \"sequence expression\" in the bash <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion\">documentation</a>):</p>\n\n<pre><code> for i in {1..5}; do echo $i; done\n</code></pre>\n\n<p>Which gives:</p>\n\n<blockquote>\n  <p>1<br>\n  2<br>\n  3<br>\n  4<br>\n  5</p>\n</blockquote>\n\n<p>Yet how can I replace either of the range endpoints with a variable?  This doesn't work:</p>\n\n<pre><code>END=5\nfor i in {1..$END}; do echo $i; done\n</code></pre>\n\n<p>Which prints:</p>\n\n<blockquote>\n  <p>{1..5}</p>\n</blockquote>\n    ","a":"\n<pre><code>for i in $(seq 1 $END); do echo $i; done</code></pre>\n    "},{"t":"Converting string to lower case in Bash shell scripting","l":"http://stackoverflow.com/questions/2264428/converting-string-to-lower-case-in-bash-shell-scripting","q":"\n\n<p>Is there a way in <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> shell scripting so that I can convert a string into lower case string?</p>\n\n<p>For example,</p>\n\n<pre><code>if $a = \"Hi all\"\n</code></pre>\n\n<p>I want to convert it to</p>\n\n<pre><code>$a = \"hi all\"\n</code></pre>\n    ","a":"\n<p>The are various ways:</p>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Tr_%28Unix%29\">tr</a></h3>\n\n<pre><code>$ echo $a | tr '[:upper:]' '[:lower:]'\nhi all\n</code></pre>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/AWK\">AWK</a></h3>\n\n<pre><code>$ echo $a | awk '{print tolower($0)}'\nhi all\n</code></pre>\n\n<h3><a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash 4.0</a></h3>\n\n<pre><code>$ echo ${a,,}\nhi all\n</code></pre>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Perl\">Perl</a></h3>\n\n<pre><code>$ echo $a | perl -ne 'print lc'\nhi all\n</code></pre>\n\n<h3><a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a></h3>\n\n<pre><code>lc(){\n    case \"$1\" in\n        [A-Z])\n        n=$(printf \"%d\" \"'$1\")\n        n=$((n+32))\n        printf \\\\$(printf \"%o\" $n)\n    esac\n}\nword=\"ABX\"\nfor((i=0;i&lt;${#word};i++))\ndo\n    ch=${word:$i:1}\n    lc $ch\ndone\n</code></pre>\n    "},{"t":"Echo new line in bash prints literal \\n","l":"http://stackoverflow.com/questions/8467424/echo-new-line-in-bash-prints-literal-n","q":"\n\n<p>In Bash, tried this:</p>\n\n<pre><code>echo -e \"hello\\nworld\"\n</code></pre>\n\n<p>But it doesn't print a newline, only <code>\\n</code>.  How can I make it print the newline?</p>\n\n<p>I'm using Ubuntu 11.04.</p>\n    ","a":"\n<p>You could use <code>printf</code> instead:</p>\n\n<pre><code>printf \"hello\\nworld\\n\"\n</code></pre>\n\n<p><code>printf</code> has more consistent behavior than <code>echo</code>. The behavior of <code>echo</code> varies greatly between different versions.</p>\n    "},{"t":"How to pipe stderr, and not stdout?","l":"http://stackoverflow.com/questions/2342826/how-to-pipe-stderr-and-not-stdout","q":"\n\n<p>I have a program that writes information to stdout and stderr, and I need to grep through what's coming to stderr, while disregarding stdout.</p>\n\n<p>I can of course do it in 2 steps:</p>\n\n<pre><code>command &gt; /dev/null 2&gt; temp.file\ngrep 'something' temp.file\n</code></pre>\n\n<p>but I would prefer to be able to do is without temp files. Any smart piping trick?</p>\n    ","a":"\n<p>Redirect stderr to stdout and then stdout to /dev/null:</p>\n\n<pre><code>command 2&gt;&amp;1 &gt;/dev/null | grep 'something'\n</code></pre>\n\n<p>For the details of I/O redirection in all its variety, see the chapter on <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Redirections\">Redirections</a> in the Bash reference manual.</p>\n    "},{"t":"How to iterate over arguments in bash script","l":"http://stackoverflow.com/questions/255898/how-to-iterate-over-arguments-in-bash-script","q":"\n\n<p>I have a complex command that I'd like to make a shell/bash script of.  I can write it in terms of <code>$1</code> easily:</p>\n\n<pre><code>foo $1 args -o $1.ext\n</code></pre>\n\n<p>I want to be able to pass multiple input names into the script - what's the right way to do this?  Of course I want to handle filenames with spaces in them.</p>\n    ","a":"\n<p>Use <code>\"$@\"</code> to represent all the arguments:</p>\n\n<pre><code>for var in \"$@\"\ndo\n    echo \"$var\"\ndone\n</code></pre>\n\n<p>This will iterate over each argument and print it out on a separate line.  $@ behaves like $* except that when quoted the arguments are broken up properly if there are spaces in them:</p>\n\n<pre><code>sh test.sh 1 2 '3 4'\n1\n2\n3 4\n</code></pre>\n    "},{"t":"How to use double or single bracket, parentheses, curly braces","l":"http://stackoverflow.com/questions/2188199/how-to-use-double-or-single-bracket-parentheses-curly-braces","q":"\n\n<p>I am confused by the usage of bracket, parentheses, curly braces in Bash, as well as the difference between their double or single forms. Is there a clear explanation?</p>\n    ","a":"\n<p>In Bash, <code>test</code> and <code>[</code> are builtins.</p>\n\n<p>The <a href=\"http://mywiki.wooledge.org/BashFAQ/031\">double bracket</a> enables additional functionality. For example, you can use <code>&amp;&amp;</code> and <code>||</code> instead of <code>-a</code> and <code>-o</code> and there's a regular expression matching operator <code>=~</code>.</p>\n\n<p>The braces, in addition to delimiting a variable name are used for <a href=\"http://tiswww.case.edu/php/chet/bash/bashref.html#SEC31\">parameter expansion</a> so you can do things like:</p>\n\n<ul>\n<li><p>Truncate the contents of a variable</p>\n\n<p><code>$ var=\"abcde\"; echo ${var%d*}</code><br>\n<code>abc</code></p></li>\n<li><p>Make substitutions similar to <code>sed</code></p>\n\n<p><code>$ var=\"abcde\"; echo ${var/de/12}</code><br>\n<code>abc12</code></p></li>\n<li><p>Use a default value</p>\n\n<p><code>$ default=\"hello\"; unset var; echo ${var:-$default}</code><br>\n<code>hello</code></p></li>\n<li><p>and several more</p></li>\n</ul>\n\n<p>Also, brace expansions create lists of strings which are typically iterated over in loops:</p>\n\n<pre><code>$ echo f{oo,ee,a}d\nfood feed fad\n\n$ mv error.log{,.OLD}\n(error.log is renamed to error.log.OLD because the brace expression\nexpands to \"mv error.log error.log.OLD\")\n\n$ for num in {000..2}; do echo \"$num\"; done\n000\n001\n002\n\n$ echo {00..8..2}\n00 02 04 06 08\n\n$ echo {D..T..4}\nD H L P T\n</code></pre>\n\n<p>Note that the leading zero and increment features weren't available before Bash 4.</p>\n\n<p>Thanks to gboffi for reminding me about brace expansions.</p>\n\n<p>Double parentheses are used for <a href=\"http://tiswww.case.edu/php/chet/bash/bashref.html#SEC33\">arithmetic operations</a>:</p>\n\n<pre><code>((a++))\n\n((meaning = 42))\n\nfor ((i=0; i&lt;10; i++))\n\necho $((a + b + (14 * c)))\n</code></pre>\n\n<p>and they enable you to omit the dollar signs on integer and array variables and include spaces around operators for readability.</p>\n\n<p>Single brackets are also used for <a href=\"http://tiswww.case.edu/php/chet/bash/bashref.html#SEC85\">array</a> indices:</p>\n\n<pre><code>array[4]=\"hello\"\n\nelement=${array[index]}\n</code></pre>\n\n<p>Curly brace are required for (most/all?) array references on the right hand side.</p>\n\n<p><strong>ephemient's</strong> comment reminded me that parentheses are also used for subshells. And that they are used to create arrays.</p>\n\n<pre><code>array=(1 2 3)\necho ${array[1]}\n2\n</code></pre>\n    "},{"t":"Looping through the content of a file in Bash?","l":"http://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash","q":"\n\n<p>How do I iterate through each line of a text file with <a href=\"http://en.wikipedia.org/wiki/Bash\">Bash</a>?</p>\n\n<p>With this script</p>\n\n<pre><code>echo \"Start!\"\nfor p in (peptides.txt)\ndo\n    echo \"${p}\"\ndone\n</code></pre>\n\n<p>I get this output on the screen:</p>\n\n<pre><code>Start!\n./runPep.sh: line 3: syntax error near unexpected token `('\n./runPep.sh: line 3: `for p in (peptides.txt)'\n</code></pre>\n\n<p>(Later I want to do something more complicated with $p than\njust output to the screen.)</p>\n\n<hr>\n\n<p>The environment variable SHELL is (from env):</p>\n\n<pre><code>SHELL=/bin/bash\n</code></pre>\n\n<p>\"/bin/bash --version\" output:</p>\n\n<pre><code>GNU bash, version 3.1.17(1)-release (x86_64-suse-linux-gnu)\nCopyright (C) 2005 Free Software Foundation, Inc.\n</code></pre>\n\n<p>\"cat /proc/version\" output:</p>\n\n<pre><code>Linux version 2.6.18.2-34-default (geeko@buildhost) (gcc version 4.1.2 20061115 (prerelease) (SUSE Linux)) #1 SMP Mon Nov 27 11:46:27 UTC 2006\n</code></pre>\n\n<p>The file peptides.txt contains:</p>\n\n<pre><code>RKEKNVQ\nIPKKLLQK\nQYFHQLEKMNVK\nIPKKLLQK\nGDLSTALEVAIDCYEK\nQYFHQLEKMNVKIPENIYR\nRKEKNVQ\nVLAKHGKLQDAIN\nILGFMK\nLEDVALQILL\n</code></pre>\n    ","a":"\n<p>The correct syntax is:</p>\n\n<pre><code>while read p; do\n  echo $p\ndone &lt;peptides.txt\n</code></pre>\n\n<hr>\n\n<p>Exceptionally, if the <a href=\"http://unix.stackexchange.com/questions/107800/using-while-loop-to-ssh-to-multiple-servers\">loop body may read from standard input</a>, you can open the file using a different file descriptor:</p>\n\n<pre><code>while read -u 10 p; do\n  ...\ndone 10&lt;peptides.txt\n</code></pre>\n\n<p>Here, 10 is just an arbitrary number (different from 0, 1, 2).</p>\n    "},{"t":"How to check if a variable is set in bash?","l":"http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash","q":"\n\n<p>How do I know if a variable is set in bash?</p>\n\n<p>For example, how to check if the user gave the 1st parameter to a function?</p>\n\n<pre><code>function a {\n    ?? if $1 is set\n}\n</code></pre>\n    ","a":"\n<p>The following solution is incorrect</p>\n\n<pre><code>if [ -z \"$var\" ]; then echo \"var is unset\"; else echo \"var is set to '$var'\"; fi\n</code></pre>\n\n<p>This is because it doesn't distinguish between a variable that is unset and a variable that is set to the empty string. That is to say, if var='', then the above solution will incorrectly output that var is unset.</p>\n\n<p>But this distinction is essential in situations where the user has to specify an extension, or additional list of properties, and that not specifying them defaults to a non-empty value, whereas specifying the empty string should make the script use an empty extension or list of additional properties.</p>\n\n<p>A correct solution is to use</p>\n\n<pre><code>if [ -z ${var+x} ]; then echo \"var is unset\"; else echo \"var is set to '$var'\"; fi\n</code></pre>\n\n<p>where <code>${var+x}</code> is a <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02\">parameter expansion</a> which evaluates to the null if <code>var</code> is unset and substitutes the string <code>\"x\"</code> otherwise,</p>\n\n<p>and then where the quotes can be omitted (so here say we can say <code>${var+x}</code> instead of <code>\"${var+x}\"</code>) because this syntax &amp; usage guarantees this will only expand to something not needing quotes (as since it either expands to <code>x</code> (which contains no word breaks so it needs no quotes) or to nothing nothing (which results in <code>[ z ]</code> which handily also evaluates to the same value (true) as <code>[ -z \"\" ]</code> does)), however as the fact the quotes can be safely omitted here is not immediately obvious to all (indeed it wasn't to <a href=\"http://stackoverflow.com/users/2255628/destiny-architect\">the first author of this quotes explanation</a> who is also a major Bash coder), it would sometimes be better to write the solution with quotes, as <code>[ -z \"${var+x}\" ]</code> at the possible cost of very small O(1) speed penalty, or/and (what the first author did:) next to the code using this solution put a comment giving the URL to this answer which now also includes the explanation for why the quotes can be safely omitted.</p>\n    "},{"t":"How do I parse command line arguments in bash?","l":"http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash","q":"\n\n<p>Say I have a script that gets called with this line:</p>\n\n<pre><code>./myscript -vfd ./foo/bar/someFile -o /fizz/someOtherFile\n</code></pre>\n\n<p>or this one:</p>\n\n<pre><code>./myscript -v -f -d -o /fizz/someOtherFile ./foo/bar/someFile \n</code></pre>\n\n<p>What's the accepted way of parsing this such that in each case (or some combination of the two) <code>$v</code>, <code>$f</code>, and  <code>$d</code> will all be set to true and <code>$outFile</code> will be equal to <code>/fizz/someOtherFile</code>?</p>\n    ","a":"\n<h1>Preferred Method: Using straight bash without getopt[s]</h1>\n\n<p>I originally answered the question as the OP asked. This Q/A is getting a lot of attention, so I should also offer the non-magic way to do this. I'm going to expand upon <a href=\"http://stackoverflow.com/a/13359121/321973\">guneysus's answer</a> to fix the nasty sed and include <a href=\"http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash/13359121?noredirect=1#comment29656357_13359121\">Tobias Kienzler's suggestion</a>.</p>\n\n<p>Two of the most common ways to pass key value pair arguments are:</p>\n\n<h2>Straight Bash Space Separated</h2>\n\n<p>Usage     <code> ./myscript.sh -e conf -s /etc -l /usr/lib /etc/hosts </code></p>\n\n<pre><code>#!/bin/bash\n# Use &gt; 1 to consume two arguments per pass in the loop (e.g. each\n# argument has a corresponding value to go with it).\n# Use &gt; 0 to consume one or more arguments per pass in the loop (e.g.\n# some arguments don't have a corresponding value to go with it such\n# as in the --default example).\n# note: if this is set to &gt; 0 the /etc/hosts part is not recognized ( may be a bug )\nwhile [[ $# &gt; 1 ]]\ndo\nkey=\"$1\"\n\ncase $key in\n    -e|--extension)\n    EXTENSION=\"$2\"\n    shift # past argument\n    ;;\n    -s|--searchpath)\n    SEARCHPATH=\"$2\"\n    shift # past argument\n    ;;\n    -l|--lib)\n    LIBPATH=\"$2\"\n    shift # past argument\n    ;;\n    --default)\n    DEFAULT=YES\n    ;;\n    *)\n            # unknown option\n    ;;\nesac\nshift # past argument or value\ndone\necho FILE EXTENSION  = \"${EXTENSION}\"\necho SEARCH PATH     = \"${SEARCHPATH}\"\necho LIBRARY PATH    = \"${LIBPATH}\"\necho \"Number files in SEARCH PATH with EXTENSION:\" $(ls -1 \"${SEARCHPATH}\"/*.\"${EXTENSION}\" | wc -l)\nif [[ -n $1 ]]; then\n    echo \"Last line of file specified as non-opt/last argument:\"\n    tail -1 $1\nfi\n</code></pre>\n\n<h2>Straight Bash Equals Separated</h2>\n\n<pre><code>#!/bin/bash\n\nfor i in \"$@\"\ndo\ncase $i in\n    -e=*|--extension=*)\n    EXTENSION=\"${i#*=}\"\n    shift # past argument=value\n    ;;\n    -s=*|--searchpath=*)\n    SEARCHPATH=\"${i#*=}\"\n    shift # past argument=value\n    ;;\n    -l=*|--lib=*)\n    LIBPATH=\"${i#*=}\"\n    shift # past argument=value\n    ;;\n    --default)\n    DEFAULT=YES\n    shift # past argument with no value\n    ;;\n    *)\n            # unknown option\n    ;;\nesac\ndone\necho \"FILE EXTENSION  = ${EXTENSION}\"\necho \"SEARCH PATH     = ${SEARCHPATH}\"\necho \"LIBRARY PATH    = ${LIBPATH}\"\necho \"Number files in SEARCH PATH with EXTENSION:\" $(ls -1 \"${SEARCHPATH}\"/*.\"${EXTENSION}\" | wc -l)\nif [[ -n $1 ]]; then\n    echo \"Last line of file specified as non-opt/last argument:\"\n    tail -1 $1\nfi\n</code></pre>\n\n<p>To better understand <code>${i#*=}</code> search for \"Substring Removal\" in <a href=\"http://tldp.org/LDP/abs/html/string-manipulation.html\">this guide</a>. It is functionally equivalent to <code>`sed 's/[^=]*=//' &lt;&lt;&lt; \"$i\"`</code> which calls a needless subprocess or <code>`echo \"$i\" | sed 's/[^=]*=//'`</code> which calls <em>two</em> needless subprocesses. </p>\n\n<h1>Using getopt[s]</h1>\n\n<p>from: <a href=\"http://mywiki.wooledge.org/BashFAQ/035#getopts\">http://mywiki.wooledge.org/BashFAQ/035#getopts</a></p>\n\n<p><strong>Never use getopt(1).</strong> <code>getopt</code> cannot handle empty arguments strings, or arguments with embedded whitespace. Please forget that it ever existed.</p>\n\n<p>The POSIX shell (and others) offer <code>getopts</code> which is safe to use instead. Here is a simplistic <code>getopts</code> example:</p>\n\n<pre><code>#!/bin/sh\n\n# A POSIX variable\nOPTIND=1         # Reset in case getopts has been used previously in the shell.\n\n# Initialize our own variables:\noutput_file=\"\"\nverbose=0\n\nwhile getopts \"h?vf:\" opt; do\n    case \"$opt\" in\n    h|\\?)\n        show_help\n        exit 0\n        ;;\n    v)  verbose=1\n        ;;\n    f)  output_file=$OPTARG\n        ;;\n    esac\ndone\n\nshift $((OPTIND-1))\n\n[ \"$1\" = \"--\" ] &amp;&amp; shift\n\necho \"verbose=$verbose, output_file='$output_file', Leftovers: $@\"\n\n# End of file\n</code></pre>\n\n<p>The advantages of <code>getopts</code> are:</p>\n\n<ol>\n<li>It's portable, and will work in e.g. dash.  </li>\n<li>It can handle things like <code>-vf filename</code> in the expected Unix way, automatically.</li>\n</ol>\n\n<p>The disadvantage of <code>getopts</code> is that it can only handle short options (<code>-h</code>, not <code>--help</code>) without trickery.</p>\n\n<p>There is a <a href=\"http://wiki.bash-hackers.org/howto/getopts_tutorial\">getopts tutorial</a> which explains what all of the syntax and variables mean.  In bash, there is also <code>help getopts</code>, which might be informative.</p>\n    "},{"t":"How to set a BASH variable equal to the output from a command?","l":"http://stackoverflow.com/questions/4651437/how-to-set-a-bash-variable-equal-to-the-output-from-a-command","q":"\n\n<p>I am working on a simple scripting project for work that involves the use of BASH.  I have a pretty simple script that is something like the following:</p>\n\n<pre><code>#!/bin/bash\n\nVAR1=\"$1\"\nVAR2=\"$2\"\n\nMOREF='sudo run command against $VAR1 | grep name | cut -c7-'\n\necho $MOREF\n</code></pre>\n\n<p>When I run this script from the command line and pass it the arguments I am not able to get any output.  However, when I run the commands contained within the MOREF variable, I am able to get output.  I would like to know how one can take the results of a command that needs to be run within a script, save it to a variable, and then output that variable on the screen?</p>\n    ","a":"\n<p>In addition to the backticks, you can use <code>$()</code>, which I find easier to read, and allows for nesting.</p>\n\n<pre><code>OUTPUT=\"$(ls -1)\"\necho \"${OUTPUT}\"\n</code></pre>\n\n<p>Quoting (<code>\"</code>) does matter to preserve multi-line values.</p>\n    "},{"t":"How to trim whitespace from bash variable?","l":"http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable","q":"\n\n<p>I have a shell script with this code:</p>\n\n<pre><code>var=`hg st -R \"$path\"`\nif [ -n \"$var\" ]; then\n    echo $var\nfi\n</code></pre>\n\n<p>But the conditional code always executes because <code>hg st</code> always prints at least one newline character.</p>\n\n<ul>\n<li>Is there a simple way to strip whitespace from <code>$var</code> (like <code>trim()</code> in php)?</li>\n</ul>\n\n<p>or</p>\n\n<ul>\n<li>Is there a standard way of dealing with this issue?</li>\n</ul>\n\n<p>I could use <code>sed</code> or <code>awk</code>, but I'd like to think there is a more elegant solution to this problem.</p>\n    ","a":"\n<p>Sorry everyone, there was a problem elsewhere in my script and I <em>thought</em> that <code>var</code> had a trailing newline in it, but that actually was not the case. Command substitution strips trailing newlines automatically, as mentioned here: <a href=\"http://tldp.org/LDP/abs/html/commandsub.html\">http://tldp.org/LDP/abs/html/commandsub.html</a>.</p>\n    "},{"t":"How can I exclude all “permission denied” messages from “find”?","l":"http://stackoverflow.com/questions/762348/how-can-i-exclude-all-permission-denied-messages-from-find","q":"\n\n<p>I need to hide all \"permission denied\" messages from:</p>\n\n<pre><code>find . &gt; files_and_folders\n</code></pre>\n\n<p>I am experimenting when such message arises. I need to gather all folders and files, to which it does not arise. Is it possible to direct the permission levels to the <code>files_and_folders</code> file? How can I hide the errors at the same time?</p>\n    ","a":"\n<p>Use:</p>\n\n<pre><code>find . ! -readable -prune\n</code></pre>\n\n<ul>\n<li>to avoid \"Permission denied\" </li>\n<li>AND do NOT suppress (other) error messages</li>\n<li>AND get exit status 0 (\"all files are processed successfully\")</li>\n</ul>\n\n<p>Works with: find (GNU findutils) 4.4.2.\nBackground:</p>\n\n<ul>\n<li>The <code>-readable</code> test matches readable files. The <code>!</code> operator returns true, when test is false. And <code>! -readable</code> matches not readable directories (&amp;files).</li>\n<li>The <code>-prune</code> action does not descend into directory.</li>\n<li><code>! -readable -prune</code> can be translated to: if directory is not readable, do not descend into it.</li>\n<li>The <code>-readable</code> test takes into account access control lists and other permissions artefacts  which  the <code>-perm</code> test ignores.</li>\n</ul>\n\n<p>See also find(1) manpage for many more details.</p>\n\n<p>For find versions without -readable test, you can check permissions:</p>\n\n<pre><code>find . ! -perm -g+r,u+r,o+r -prune\n</code></pre>\n\n<p>see <a href=\"http://stackoverflow.com/a/22592639/3701456\">sadaus answer</a></p>\n    "},{"t":"How to escape single-quotes within single-quoted strings?","l":"http://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings","q":"\n\n<p>Let's say you have a bash alias like:</p>\n\n<pre><code>alias rxvt='urxvt'\n</code></pre>\n\n<p>which works fine.</p>\n\n<p>However:</p>\n\n<pre><code>alias rxvt='urxvt -fg '#111111' -bg '#111111''\n</code></pre>\n\n<p>won't work, and neither will:</p>\n\n<pre><code>alias rxvt='urxvt -fg \\'#111111\\' -bg \\'#111111\\''\n</code></pre>\n\n<p>So how do you end up matching up opening and closing quotes inside a string once you have escaped quotes?</p>\n\n<pre><code>alias rxvt='urxvt -fg'\\''#111111'\\'' -bg '\\''#111111'\\''\n</code></pre>\n\n<p>seems ungainly although it would represent the same string if you're allowed to concatenate them like that.</p>\n    ","a":"\n<p>If you really want to use single quotes in the outermost layer, remember that you can glue both kinds of quotation. Example:</p>\n\n<pre><code> alias rxvt='urxvt -fg '\"'\"'#111111'\"'\"' -bg '\"'\"'#111111'\"'\"\n                       12345\n</code></pre>\n\n<p>Explanation:</p>\n\n<p>(1) End first quotation which uses single quotes.</p>\n\n<p>(2) Start second quotation, using double-quotes.</p>\n\n<p>(3) Quoted character.</p>\n\n<p>(4) End second quotation, using double-quotes.</p>\n\n<p>(5) Start third quotation, using single quotes.</p>\n\n<p>If you do not place any whitespaces between (1) and (2), or between (4) and (5), the shell will interpret that string as a one long word.</p>\n    "},{"t":"Difference between sh and bash","l":"http://stackoverflow.com/questions/5725296/difference-between-sh-and-bash","q":"\n\n<p>When writing shell programs, we often use <code>/bin/sh</code> and <code>/bin/bash</code>. I usually use <code>bash</code>, but I don't know what's the difference between them. </p>\n\n<p>What's main difference between <code>bash</code> and <code>sh</code>?</p>\n\n<p>What do we need to be aware of when programming in <code>bash</code> and <code>sh</code>?</p>\n    ","a":"\n<h1>What is sh</h1>\n\n<p><code>sh</code> (or the Shell Command Language) is a programming language described by the <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html\">POSIX\nstandard</a>.\nIt has many implementations (<code>ksh88</code>, <code>dash</code>, ...). <code>bash</code> can also be\nconsidered an implementation of <code>sh</code> (see below).</p>\n\n<p>Because <code>sh</code> is a specification, not an implementation, <code>/bin/sh</code> is a symlink\n(or a hard link) to an actual implementation on most POSIX systems.</p>\n\n<h1>What is bash</h1>\n\n<p><code>bash</code> started as an <code>sh</code>-compatible implementation (although it predates the POSIX standard by a few years), but as time passed it has acquired many extensions. Many of these extensions may change the behavior of valid POSIX shell scripts, so by itself <code>bash</code> is not a valid POSIX shell. Rather, it is a dialect of the POSIX shell language.</p>\n\n<p><code>bash</code> supports a <code>--posix</code> switch, which makes it more POSIX-compliant. It also tries to mimic POSIX if invoked as <code>sh</code>.</p>\n\n<h1>sh == bash?</h1>\n\n<p>For a long time, <code>/bin/sh</code> used to point to <code>/bin/bash</code> on most GNU/Linux systems. As a result, it had almost become safe to ignore the difference between the two. But that started to change recently.</p>\n\n<p>Some popular examples of systems where <code>/bin/sh</code> does not point to <code>/bin/bash</code> (and on some of which <code>/bin/bash</code> may not even exist) are:</p>\n\n<ol>\n<li>Modern Debian and Ubuntu systems, which symlink <code>sh</code> to <code>dash</code> by default;</li>\n<li><a href=\"https://en.wikipedia.org/wiki/BusyBox\">Busybox</a>, which is usually run during the Linux system boot time as part of <code>initramfs</code>. It uses the <code>ash</code> shell implementation.</li>\n<li>BSDs. OpenBSD uses <code>pdksh</code>, a descendant of the Korn shell. FreeBSD's <code>sh</code> is a descendant of the original UNIX Bourne shell.</li>\n</ol>\n\n<h1>Shebang line</h1>\n\n<p>Ultimately, it's up to you to decide which one to use, by writing the «shebang» line.</p>\n\n<p>E.g.</p>\n\n<pre><code>#!/bin/sh\n</code></pre>\n\n<p>will use <code>sh</code> (and whatever that happens to point to),</p>\n\n<pre><code>#!/bin/bash\n</code></pre>\n\n<p>will use <code>/bin/bash</code> if it's available (and fail with an error message if it's not). Of course, you can also specify another implementation, e.g.</p>\n\n<pre><code>#!/bin/dash\n</code></pre>\n\n<h1>Which one to use</h1>\n\n<p>For my own scripts, I prefer <code>sh</code> for the following reasons:</p>\n\n<ul>\n<li>it is standardized</li>\n<li>it is much simpler and easier to learn</li>\n<li>it is portable across POSIX systems — even if they happen not to have <code>bash</code>, they are required to have <code>sh</code></li>\n</ul>\n\n<p>There are advantages to using <code>bash</code> as well. Its features make programming more convenient and similar to programming in other modern programming languages. These include things like scoped local variables and arrays. Plain <code>sh</code> is a very minimalistic programming language.</p>\n    "},{"t":"Defining a variable with or without export","l":"http://stackoverflow.com/questions/1158091/defining-a-variable-with-or-without-export","q":"\n\n<p>What is <code>export</code> for?</p>\n\n<p>What is the difference between:</p>\n\n<pre><code>export name=value\n</code></pre>\n\n<p>and</p>\n\n<pre><code>name=value\n</code></pre>\n    ","a":"\n<p><code>export</code> makes the variable available to sub-processes.</p>\n\n<p>That is,</p>\n\n<pre><code>export name=value\n</code></pre>\n\n<p>means that the variable name is available to <em>any process</em> you run from that shell process. If you want a process to make use of this variable, use <code>export</code>, and run the process from that shell.</p>\n\n<pre><code>name=value\n</code></pre>\n\n<p>means the variable scope is restricted to the shell, and is not available to any other process. You would use this for (say) loop variables, temporary variables etc.</p>\n\n<p>It's important to note that exporting a variable doesn't make it available to parent processes. That is, specifying and exporting a variable in a spawned process doesn't make it available in the process that launched it.</p>\n    "},{"t":"How do I remove all .pyc files from a project?","l":"http://stackoverflow.com/questions/785519/how-do-i-remove-all-pyc-files-from-a-project","q":"\n\n<p>I've renamed some files in a fairly large project and want to remove the .pyc files they've left behind. I tried the bash script:</p>\n\n<pre><code> rm -r *.pyc\n</code></pre>\n\n<p>But that doesn't recurse through the folders as I thought it would, what am I doing wrong?</p>\n    ","a":"\n<pre><code>find . -name \"*.pyc\" -exec rm -rf {} \\;\n</code></pre>\n    "},{"t":"Get current directory name (without full path) in Bash Script","l":"http://stackoverflow.com/questions/1371261/get-current-directory-name-without-full-path-in-bash-script","q":"\n\n<p>How would I get just the current working directory name in a bash script, or even better, just a terminal command.</p>\n\n<p><code>pwd</code> gives the full path of the current working directory, e.g. <code>/opt/local/bin</code> but I only want <code>bin</code></p>\n    ","a":"\n<p>No need for basename, and especially no need for a subshell running pwd (which <a href=\"http://mywiki.wooledge.org/SubShell\">adds an extra, and expensive, fork operation</a>); the shell can do this internally using <a href=\"http://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\">parameter expansion</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>result=${PWD##*/}          # to assign to a variable\n\nprintf '%s\\n' \"${PWD##*/}\" # to print to stdout\n                           # ...more robust than echo for unusual names\n                           #    (consider a directory named -e or -n)\n\nprintf '%q\\n' \"${PWD##*/}\" # to print to stdout, quoted for use as shell input\n                           # ...useful to make hidden characters readable.\n</code></pre>\n    "},{"t":"Pipe to/from Clipboard","l":"http://stackoverflow.com/questions/749544/pipe-to-from-clipboard","q":"\n\n<p>Is it possible to pipe to/from the clipboard in <code>bash</code>? Whether it is piping to/from a device handle or using an auxiliary application, I can't find anything.</p>\n\n<p>For example, if <code>/dev/clip</code> was a device linking to the clipboard we could do:</p>\n\n<pre><code>cat /dev/clip        # dump the contents of the clipboard\ncat foo &gt; /dev/clip  # dump the contents of \"foo\" into the clipboard\n</code></pre>\n    ","a":"\n<p>You're a little ambiguous.  I expect you're probably a Linux user inside X who wants to put stuff in the X <code>PRIMARY</code> clipboard.</p>\n\n<p>It's important to understand that <code>bash</code> doesn't have a clipboard.  There is no such thing as \"the\" clipboard, because <code>bash</code> can run on Windows, Mac OS X, lots of other OSes, inside X, outside X, ...  Not to mention that X itself has three different clipboards itself.  There's a wealth of clipboards you could be dealing with.  Usually the clipboard you want to talk to has a utility that lets you talk to it.</p>\n\n<p>In case of X, yes, there's <code>xclip</code> (and others). <code>xclip -selection c</code> will send data to the clipboard that works with Ctrl-C, Ctrl-V in most applications.</p>\n\n<p>If you're trying to talk to the Mac OS X clipboard, there's <code>pbcopy</code>.</p>\n\n<p>If you're in Linux terminal mode (no X) then maybe you need to look into <code>gpm</code>.</p>\n\n<p>There's also <a href=\"http://www.gnu.org/software/screen/\">GNU <code>screen</code></a> which has a clipboard.  To put stuff in there, look at the <code>screen</code> command \"<code>readreg</code>\".</p>\n\n<p>Under Windows/cygwin, use <code>/dev/clipboard</code>.</p>\n    "},{"t":"How to run a .sh-script in an Unix console/Mac terminal?","l":"http://stackoverflow.com/questions/733824/how-to-run-a-sh-script-in-an-unix-console-mac-terminal","q":"\n\n<p>I know it, forget it and relearn it again. Time to write it down.</p>\n    ","a":"\n<p>To run a non-executable <code>sh</code> script, use:</p>\n\n<pre><code>sh myscript\n</code></pre>\n\n<p>To run a non-executable <code>bash</code> script, use:</p>\n\n<pre><code>bash myscript\n</code></pre>\n\n<p>To start an executable (which is any file with executable permission); you just specify it by its path:</p>\n\n<pre><code>/foo/bar\n/bin/bar\n./bar\n</code></pre>\n\n<p>To make a script executable, give it the necessary permission:</p>\n\n<pre><code>chmod +x bar\n./bar\n</code></pre>\n\n<p>When a file is executable, the <strong>kernel</strong> is responsible for figuring out how to execte it.  For non-binaries, this is done by looking at the first line of the file.  It should contain a <code>hashbang</code>:</p>\n\n<pre><code>#! /usr/bin/env bash\n</code></pre>\n\n<p>The hashbang tells the kernel what program to run (in this case the command <code>/usr/bin/env</code> is ran with the argument <code>bash</code>).  Then, the script is passed to the program (as second argument) along with all the arguments you gave the script as subsequent arguments.</p>\n\n<p>That means <strong>every script that is executable should have a hashbang</strong>.  If it doesn't, you're not telling the kernel what it <em>is</em>, and therefore the kernel doesn't know what program to use to interprete it.  It could be <code>bash</code>, <code>perl</code>, <code>python</code>, <code>sh</code>, or something else.  (In reality, the kernel will often use the user's default shell to interprete the file, which is very dangerous because it might not be the right interpreter at all or it might be able to parse some of it but with subtle behavioural differences such as is the case between <code>sh</code> and <code>bash</code>).</p>\n\n<h1>A note on <code>/usr/bin/env</code></h1>\n\n<p>Most commonly, you'll see hash bangs like so:</p>\n\n<pre><code>#!/bin/bash\n</code></pre>\n\n<p>The result is that the kernel will run the program <code>/bin/bash</code> to interpret the script.  Unfortunately, <code>bash</code> is not always shipped by default, and it is not always available in <code>/bin</code>.  While on Linux machines it usually is, there are a range of other POSIX machines where <code>bash</code> ships in various locations, such as <code>/usr/xpg/bin/bash</code> or <code>/usr/local/bin/bash</code>.</p>\n\n<p>To write a portable bash script, we can therefore not rely on hard-coding the location of the <code>bash</code> program.  POSIX already has a mechanism for dealing with that: <code>PATH</code>.  The idea is that you install your programs in one of the directories that are in <code>PATH</code> and the system should be able to find your program when you want to run it by name.</p>\n\n<p>Sadly, you <strong><em>cannot</em></strong> just do this:</p>\n\n<pre><code>#!bash\n</code></pre>\n\n<p>The kernel won't (some might) do a <code>PATH</code> search for you.  There is a program that can do a <code>PATH</code> search for you, though, it's called <code>env</code>.  Luckily, nearly all systems have an <code>env</code> program installed in <code>/usr/bin</code>.  So we start <code>env</code> using a hardcoded path, which then does a <code>PATH</code> search for <code>bash</code> and runs it so that it can interpret your script:</p>\n\n<pre><code>#!/usr/bin/env bash\n</code></pre>\n\n<p>This approach has one downside: According to POSIX, the hashbang can have <strong>one argument</strong>.  In this case, we use <code>bash</code> as the argument to the <code>env</code> program.  That means we have no space left to pass arguments to <code>bash</code>.  So there's no way to convert something like <code>#!/bin/bash -exu</code> to this scheme.  You'll have to put <code>set -exu</code> after the hashbang instead.</p>\n\n<p>This approach also has another advantage: Some systems may ship with a <code>/bin/bash</code>, but the user may not like it, may find it's buggy or outdated, and may have installed his own <code>bash</code> somewhere else.  This is often the case on OS X (Macs) where Apple ships an outdated <code>/bin/bash</code> and users install an up-to-date <code>/usr/local/bin/bash</code> using something like Homebrew.  When you use the <code>env</code> approach which does a <code>PATH</code> search, you take the user's preference into account and use his preferred bash over the one his system shipped with.</p>\n    "},{"t":"Redirect all output to file","l":"http://stackoverflow.com/questions/6674327/redirect-all-output-to-file","q":"\n\n<p>I know that in Linux, to redirect output from the screen to a file, I can either use the <code>&gt;</code> or <code>tee</code>. However, I'm not sure why part of the output is still output to the screen and not written to the file. </p>\n\n<p>Is there a way to redirect all output to file?</p>\n    ","a":"\n<p>That part is written to stderr, use <code>2&gt;</code> to redirect it. For example:</p>\n\n<pre><code>foo &gt; stdout.txt 2&gt; stderr.txt\n</code></pre>\n\n<p>or if you want in same file:</p>\n\n<pre><code>foo &gt; allout.txt 2&gt;&amp;1\n</code></pre>\n\n<p>Note: this works in (ba)sh, check your shell for proper syntax</p>\n    "},{"t":"echo that outputs to stderr","l":"http://stackoverflow.com/questions/2990414/echo-that-outputs-to-stderr","q":"\n\n<p>Is there a standard Bash tool that acts like echo but outputs to stderr rather than stdout?</p>\n\n<p>I know I can do <code>echo foo 1&gt;&amp;2</code> but it's kinda ugly and, I suspect, error prone (e.g. more likely to get edited wrong when things change). </p>\n    ","a":"\n<p>This question is old, but you could do this, which facilitates reading:</p>\n\n<pre><code>&gt;&amp;2 echo \"error\"\n</code></pre>\n    "},{"t":"Make bash alias that takes parameter?","l":"http://stackoverflow.com/questions/7131670/make-bash-alias-that-takes-parameter","q":"\n\n<p>I used to use CShell, which let you make an alias that takes a parameter. The notation was something like</p>\n\n<pre><code>alias junk=\"mv \\\\!* ~/.Trash\"\n</code></pre>\n\n<p>In Bash this does not seem to work. Given that Bash has a multitude of useful features, I would assume that this one has been implemented but I am wondering how?</p>\n\n<p>Any clues appreciated.</p>\n    ","a":"\n<p>Bash alias does not directly accept parameters. You will have to create a function and alias that.</p>\n\n<p><code>alias</code> does not accept parameters but it can alias a function that does. For example:</p>\n\n<pre><code>myfunction() {\n    #do things with parameters like $1 such as\n    mv $1 $1.bak\n    cp $2 $1\n}\nalias myname=myfunction\n</code></pre>\n\n<p>By the way, Bash functions defined in your <code>.bashrc</code> and other files are available as commands within your shell. So for instance you can call the earlier function like this </p>\n\n<pre><code>$ myfunction original.conf my.conf\n</code></pre>\n    "},{"t":"How to reload .bash_profile from the command line?","l":"http://stackoverflow.com/questions/4608187/how-to-reload-bash-profile-from-the-command-line","q":"\n\n<p>How can I reload <code>.bash_profile</code> from the command line? \nI can get the shell to recognize changes to <code>.bash_profile</code> by exiting and logging back in but I would like to be able to do it on demand.</p>\n    ","a":"\n<p>Simply type <code>source ~/.bash_profile</code></p>\n\n<p>Alternatively, if you like saving keystrokes you can type <code>. ~/.bash_profile</code></p>\n    "},{"t":"Count number of lines in a git repository","l":"http://stackoverflow.com/questions/4822471/count-number-of-lines-in-a-git-repository","q":"\n\n<p>How would I count the total number of lines present in all the files in a git repository?</p>\n\n<p><code>git ls-files</code> gives me a list of files tracked by git.</p>\n\n<p>I'm looking for a command to <code>cat</code> all those files. Something like</p>\n\n<pre><code>git ls-files | [cat all these files] | wc -l\n</code></pre>\n    ","a":"\n<p><code>xargs</code> will do what you want:</p>\n\n<pre><code>git ls-files | xargs cat | wc -l\n</code></pre>\n\n<p>But with more information and probably better, you can do:</p>\n\n<pre><code>git ls-files | xargs wc -l\n</code></pre>\n    "},{"t":"Passing parameters to a bash function","l":"http://stackoverflow.com/questions/6212219/passing-parameters-to-a-bash-function","q":"\n\n<p>I am trying to search how to pass parameters in a bash function, but what comes up is always how to pass parameter from the command line. </p>\n\n<p>I would like to pass parameters within my script. I tried:</p>\n\n<pre><code>myBackupFunction(\"..\", \"...\", \"xx\")\n\n\nfunction myBackupFunction($directory, $options, $rootPassword) {\n     ...\n}\n</code></pre>\n\n<p>But the syntax is not correct, how to pass parameter to my function?</p>\n    ","a":"\n<p>There are two typical ways of declaring a function. I prefer the second approach.</p>\n\n<pre><code>function function_name {\n   command...\n} \n</code></pre>\n\n<p>or </p>\n\n<pre><code>function_name () {\n   command...\n} \n</code></pre>\n\n<p>To call a function with arguments:</p>\n\n<pre><code>function_name $arg1 $arg2\n</code></pre>\n\n<p>The function refers to passed arguments by their position (not by name), that is $1, $2, and so forth. <strong>$0</strong> is the name of the script itself.</p>\n\n<p>Example:</p>\n\n<pre><code>function_name () {\n   echo \"Parameter #1 is $1\"\n}\n</code></pre>\n\n<p>Also, you need to call your function <strong>after</strong> it is declared. </p>\n\n<pre><code>#!/bin/sh\n\nfoo 1  # this will fail because foo has not been declared yet.\n\nfoo() {\n    echo \"Parameter #1 is $1\"\n}\n\nfoo 2 # this will work.\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<pre><code>./myScript.sh: line 2: foo: command not found\nParameter #1 is 2\n</code></pre>\n\n<p><a href=\"http://tldp.org/LDP/abs/html/complexfunct.html\">Reference: Advanced Bash-Scripting Guide</a>.</p>\n    "},{"t":"bash shell script check input argument","l":"http://stackoverflow.com/questions/6482377/bash-shell-script-check-input-argument","q":"\n\n<p>I need to check the existence of an input argument. I have the following script:</p>\n\n<pre><code>if [ \"$1\" -gt \"-1\" ]\n  then echo hi\nfi\n</code></pre>\n\n<p>I get </p>\n\n<pre><code>[: : integer expression expected\n</code></pre>\n\n<p>How do I check the input argument1 first to see if it exists?</p>\n    ","a":"\n<p>It is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>if [ $# -eq 0 ]\n  then\n    echo \"No arguments supplied\"\nfi\n</code></pre>\n\n<p><code>$#</code> variable will tell you the number of input arguments the script was passed</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>Or you can check if an argument is an empty string or not like:</p>\n\n<pre><code>if [ -z \"$1\" ]\n  then\n    echo \"No argument supplied\"\nfi\n</code></pre>\n\n<p>The <code>-z</code> switch will test if the expansion of \"$1\" is a null string or not. If it is a null string then the body is executed.</p>\n    "},{"t":"How to change the output color of echo in Linux","l":"http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux","q":"\n\n<p>I am trying to print a text in the terminal using echo command. </p>\n\n<p>I want to print the text in a red color. How can I do it?</p>\n    ","a":"\n<p>You can use these <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\">ANSI escape codes</a>:</p>\n\n<pre><code>Black        0;30     Dark Gray     1;30\nRed          0;31     Light Red     1;31\nGreen        0;32     Light Green   1;32\nBrown/Orange 0;33     Yellow        1;33\nBlue         0;34     Light Blue    1;34\nPurple       0;35     Light Purple  1;35\nCyan         0;36     Light Cyan    1;36\nLight Gray   0;37     White         1;37\n</code></pre>\n\n<p>And then use them like this in your script:</p>\n\n<pre><code>RED='\\033[0;31m'\nNC='\\033[0m' # No Color\nprintf \"I ${RED}love${NC} Stack Overflow\\n\"\n</code></pre>\n\n<p>which prints <code>love</code> in red.</p>\n    "},{"t":"Awk/Sed: How to do a recursive find/replace of a string?","l":"http://stackoverflow.com/questions/1583219/awk-sed-how-to-do-a-recursive-find-replace-of-a-string","q":"\n\n<p>How to I find and replace every occurrence of:</p>\n\n<pre><code>subdomainA.example.com\n</code></pre>\n\n<p>with </p>\n\n<pre><code>subdomainB.example.com\n</code></pre>\n\n<p>in every text file under the <code>/home/www/</code> directory tree (recursive find/replace).</p>\n    ","a":"\n<pre><code>cd /home/www\n\nfind . -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'\n</code></pre>\n\n<p>From <code>man find</code>:</p>\n\n<blockquote>\n  <p><strong>-print0</strong>   (GNU find  only) tells find to use the null character (\\0) instead of whitespace as the output delimiter between pathnames found.  This is a safer option if you files can contain blanks or other special character.  It is recommended to use the -print0 argument to find if you use -exec command or xargs (the -0 argument is needed in xargs.).</p>\n</blockquote>\n    "},{"t":"Sed command find and replace in file and overwrite file doesnt work, it empties the file","l":"http://stackoverflow.com/questions/5171901/sed-command-find-and-replace-in-file-and-overwrite-file-doesnt-work-it-empties","q":"\n\n<p>I would like to run a find and replace on a html file through the command line.</p>\n\n<p>my command looks something like this:</p>\n\n<pre><code>sed -e s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html &gt; index.html\n</code></pre>\n\n<p>When I run this and look at the file afterward, it is empty. (it deleted the contents of my file)</p>\n\n<p>when i run this after restoring the file again:</p>\n\n<pre><code>sed -e s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html\n</code></pre>\n\n<p>the stdout is the contents of the file, and the find and replace has been executed.</p>\n\n<p>Why is this happening?</p>\n    ","a":"\n<p>When the <strong>shell</strong> sees  <code>&gt; index.html</code> in the command line it opens the file <code>index.html</code> for <strong>writing</strong>, wiping off all its previous contents.</p>\n\n<p>To fix this you need to pass the <code>-i</code> option to <code>sed</code> to make the changes inline and create a backup of the original file before it does the changes in-place:</p>\n\n<pre><code>sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html\n</code></pre>\n\n<p>Without the .bak the command will fail on some platforms, such as Mac OSX.</p>\n    "},{"t":"Redirect stderr and stdout in a bash script","l":"http://stackoverflow.com/questions/637827/redirect-stderr-and-stdout-in-a-bash-script","q":"\n\n<p>I want to redirect both stdout and stderr of a process to a single file. How do I do that in bash?</p>\n    ","a":"\n<p>Take a look <a href=\"http://tldp.org/LDP/abs/html/io-redirection.html\">here</a>. Should be:</p>\n\n<pre><code>yourcommand &amp;&gt;filename\n</code></pre>\n\n<p>(redirects both <code>stdout</code> and <code>stderr</code> to filename).</p>\n    "},{"t":"Syntax for a single-line BASH infinite while loop","l":"http://stackoverflow.com/questions/1289026/syntax-for-a-single-line-bash-infinite-while-loop","q":"\n\n<p>Having trouble coming up with the right combination of semicolons and/or braces.  I'd like to do this, but as a one-liner from the command line:</p>\n\n<pre><code>while [ 1 ]\ndo\n    foo\n    sleep 2\ndone\n</code></pre>\n    ","a":"\n<pre><code>while true; do foo; sleep 2; done\n</code></pre>\n\n<p>By the way, if you type it as a multiline (as you are showing) at the command prompt and then call the history with arrow up, you will get it on a single line, correctly punctuated.</p>\n\n<pre><code>$ while true\n&gt; do\n&gt;    echo \"hello\"\n&gt;    sleep 2\n&gt; done\nhello\nhello\nhello\n^C\n$ &lt;arrow up&gt; while true; do    echo \"hello\";    sleep 2; done\n</code></pre>\n    "},{"t":"Capturing multiple line output to a bash variable","l":"http://stackoverflow.com/questions/613572/capturing-multiple-line-output-to-a-bash-variable","q":"\n\n<p>I've got a script 'myscript' that outputs the following:</p>\n\n<pre><code>abc\ndef\nghi\n</code></pre>\n\n<p>in another script, I call:</p>\n\n<pre><code>declare RESULT=$(./myscript)\n</code></pre>\n\n<p>and <code>$RESULT</code> gets the value</p>\n\n<pre><code>abc def ghi\n</code></pre>\n\n<p>Is there a way to store the result either with the newlines, or with '\\n' character so I can output it with '<code>echo -e</code>'?</p>\n    ","a":"\n<p>Actually, RESULT contains what you want — to demonstrate:</p>\n\n<pre><code>echo \"$RESULT\"\n</code></pre>\n\n<p>What you show is what you get from:</p>\n\n<pre><code>echo $RESULT\n</code></pre>\n\n<hr>\n\n<p>As noted in the comments, the difference is that (1) the double-quoted version of the variable (<code>echo \"$RESULT\"</code>) preserves internal spacing of the value exactly as it is represented in the variable — newlines, tabs, multiple blanks and all — whereas (2) the unquoted version (<code>echo $RESULT</code>) replaces each sequence of one or more blanks, tabs and newlines with a single space. Thus (1) preserves the shape of the input variable, whereas (2) creates a potentially very long single line of output with 'words' separated by single spaces (where a 'word' is a sequence of non-whitespace characters; there needn't be any alphanumerics in any of the words).</p>\n    "},{"t":"Loop through array of strings in bash script?","l":"http://stackoverflow.com/questions/8880603/loop-through-array-of-strings-in-bash-script","q":"\n\n<p>I want to write a script that loops through 15 strings (array possibly?) is that possible?</p>\n\n<p>Something like:</p>\n\n<pre><code>for databaseName in listOfNames\nthen\n# do something\nend \n</code></pre>\n    ","a":"\n<p>You can use it like this:</p>\n\n<pre><code>## declare an array variable\ndeclare -a arr=(\"element1\" \"element2\" \"element3\")\n\n## now loop through the above array\nfor i in \"${arr[@]}\"\ndo\n   echo \"$i\"\n   # or do whatever with individual element of the array\ndone\n\n# You can access them using echo \"${arr[0]}\", \"${arr[1]}\" also\n</code></pre>\n    "},{"t":"Specify private SSH-key to use when executing shell command with or without Ruby?","l":"http://stackoverflow.com/questions/4565700/specify-private-ssh-key-to-use-when-executing-shell-command-with-or-without-ruby","q":"\n\n<p>A rather unusual situation perhaps, but I want to specify a private SSH-key to use when executing a shell (git) command from the local computer.</p>\n\n<p>Basically like this: <code>git clone git@github.com:TheUser/TheProject.git -key \"/home/christoffer/ssh_keys/theuser\"</code></p>\n\n<p>Or even better (in Ruby):</p>\n\n<pre><code>with_key(\"/home/christoffer/ssh_keys/theuser\") do\n  sh(\"git clone git@github.com:TheUser/TheProject.git\")\nend\n</code></pre>\n\n<p>I have seen examples of connecting to a remote server with Net::SSH that uses a specified private key, but this is a local command. Is it possible?</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>Something like this should work:</p>\n\n<pre><code>ssh-agent (ssh-add /home/christoffer/ssh_keys/theuser; git clone git@github.com:TheUser/TheProject.git)\n</code></pre>\n\n<p>or as suggested by orip:</p>\n\n<pre><code>ssh-agent bash -c 'ssh-add /home/christoffer/ssh_keys/theuser; git clone git@github.com:TheUser/TheProject.git'\n</code></pre>\n\n<p>git will invoke ssh which will find its agent by environment variable; this will, in turn, have the key loaded.</p>\n\n<p>Alternatively, setting HOME may also do the trick, provided you are willing to setup a directory that contains only a .ssh directory as HOME; this may either contain an identity.pub, or a <a href=\"http://linux.die.net/man/5/ssh_config\">config file</a> setting IdentityFile.</p>\n    "},{"t":"Best way to kill all child processes","l":"http://stackoverflow.com/questions/392022/best-way-to-kill-all-child-processes","q":"\n\n<p>I basically want to kill a whole process tree.  What is the best way to do this using any common scripting languages.  I am looking for a simple solution.</p>\n    ","a":"\n<p>You don't say if the tree you want to kill is a single process group.  (This is often the case if the tree is the result of forking from a server start or a shell command line.)  You can discover process groups using GNU ps as follows:</p>\n\n<pre><code> ps x -o  \"%p %r %y %x %c \"\n</code></pre>\n\n<p>If it is a process group you want to kill, just use the <code>kill(1)</code> command but instead of giving it a process number, give it the <em>negation</em> of the group number.  For example to kill every process in group 5112, use <code>kill -TERM -5112</code>.</p>\n    "},{"t":"Bash: add value to array without specifying a key","l":"http://stackoverflow.com/questions/1951506/bash-add-value-to-array-without-specifying-a-key","q":"\n\n<p>Is there a way to do something like PHPs <code>$array[] = 'foo';</code> in bash vs doing:</p>\n\n<pre><code>array[0] = 'foo'\narray[1] = 'bar'\n</code></pre>\n    ","a":"\n<p>Yes there is:</p>\n\n<pre><code>ARRAY=()\nARRAY+=('foo')\nARRAY+=('bar')\n</code></pre>\n\n<p><a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameters\">Bash Reference Manual</a>:</p>\n\n<blockquote>\n  <p>In the context where an assignment statement is assigning a value to a shell variable or array index (see Arrays), the ‘+=’ operator can be used to append to or add to the variable's previous value.</p>\n</blockquote>\n    "},{"t":"Propagate all arguments in a bash shell script [duplicate]","l":"http://stackoverflow.com/questions/4824590/propagate-all-arguments-in-a-bash-shell-script","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/3190818/pass-all-arguments-from-bash-script-to-another-command\" dir=\"ltr\">Pass ALL Arguments from Bash Script to Another Command</a>\n                <span class=\"question-originals-answer-count\">\n                    1 answer\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I am writing a very simple script that calls another script, and I need to propagate the parameters from my current script to the script I am executing.</p>\n\n<p>For instance, my script name is <code>foo.sh</code> and calls <code>bar.sh</code></p>\n\n<p>foo.sh:</p>\n\n<pre><code>bar $1 $2 $3 $4\n</code></pre>\n\n<p>How can I do this without explicitly specifying each parameter?</p>\n    ","a":"\n<p>Use <code>\"$@\"</code> instead of plain <code>$@</code> if you actually wish your parameters to be passed the same.</p>\n\n<p>Observe:</p>\n\n<pre><code>$ cat foo.sh\n#!/bin/bash\nbaz.sh $@\n\n$ cat bar.sh\n#!/bin/bash\nbaz.sh \"$@\"\n\n$ cat baz.sh\n#!/bin/bash\necho Received: $1\necho Received: $2\necho Received: $3\necho Received: $4\n\n$ ./foo.sh first second\nReceived: first\nReceived: second\nReceived:\nReceived:\n\n$ ./foo.sh \"one quoted arg\"\nReceived: one\nReceived: quoted\nReceived: arg\nReceived:\n\n$ ./bar.sh first second\nReceived: first\nReceived: second\nReceived:\nReceived:\n\n$ ./bar.sh \"one quoted arg\"\nReceived: one quoted arg\nReceived:\nReceived:\nReceived:\n</code></pre>\n    "},{"t":"Listing only directory using ls in bash","l":"http://stackoverflow.com/questions/14352290/listing-only-directory-using-ls-in-bash","q":"\n\n<p>This command lists directories in the current path/folder: <code>ls -d */</code></p>\n\n<p>What exactly the pattern <code>*/</code> does?</p>\n\n<p>And how can we give absolute path in the above command (like <code>ls -d /home/alice/Documents</code>) for listing only directory in that path.</p>\n    ","a":"\n<p><code>*/</code> is a pattern that matches all of the subdirectories in the current directory (<code>*</code> would match all files <em>and</em> subdirectories; the <code>/</code> restricts it to directories). Similarly, to list all subdirectories under /home/alice/Documents, use <code>ls -d /home/alice/Documents/*/</code></p>\n    "},{"t":"How do I know the script file name in a Bash script?","l":"http://stackoverflow.com/questions/192319/how-do-i-know-the-script-file-name-in-a-bash-script","q":"\n\n<p>How can I determine the name of the Bash script file inside the script itself?</p>\n\n<p>Like if my script is in file <code>runme.sh</code>, then how would I make it to display \"You are running runme.sh\" message without hardcoding that?</p>\n    ","a":"\n<pre><code>me=`basename \"$0\"`\n</code></pre>\n\n<p>For reading through a symlink, which is usually not what you want (you usually don't want to confuse the user this way), try:</p>\n\n<pre><code>me=\"$(basename \"$(test -L \"$0\" &amp;&amp; readlink \"$0\" || echo \"$0\")\")\"\n</code></pre>\n\n<p>IMO, that'll produce confusing output.  \"I ran foo.sh, but it's saying I'm running bar.sh!?  Must be a bug!\"   Besides, one of the purposes of having differently-named symlinks is to provide different functionality based on the name it's called as (think gzip and gunzip on some platforms).</p>\n    "},{"t":"git: check if pull needed","l":"http://stackoverflow.com/questions/3258243/git-check-if-pull-needed","q":"\n\n<p>How to check whether the remote repo has changed and I need to pull?</p>\n\n<p>Now I use this simple script:</p>\n\n<pre><code>git pull --dry-run | grep -q -v 'Already up-to-date.' &amp;&amp; changed=1\n</code></pre>\n\n<p>but it is rather heavy.</p>\n\n<p>Do you know any better way? The ideal solution would check all the remote branches, and return names of the changed branches and the number of new commits in each one.</p>\n    ","a":"\n<p><code>git remote update</code> to bring your remote refs up to date. Then you can do one of several things, such as:</p>\n\n<ol>\n<li><p><code>git status -uno</code> will tell you whether the branch you are tracking is ahead, behind or has diverged. If it says nothing, the local and remote are the same.</p></li>\n<li><p><code>git show-branch *master</code> will show you the commits in all of the branches whose names end in master (eg master and origin/master).</p></li>\n</ol>\n\n<p>If you use <code>-v</code> with <code>git remote update</code> (<code>git remote -v update</code>) you can see which branches got updated, so you don't really need any further commands.</p>\n\n<p>However, it looks like you want to do this in a script or program and end up with a true/false value. If so, there are ways to check the relationship between your current HEAD commit and the head of the branch you are tracking, although since there are four possible outcomes you can't reduce it to a yes/no answer. However, if you're prepared to do a <code>pull --rebase</code> then you can treat \"local is behind\" and \"local has diverged\" as \"need to pull\", and the other two as \"don't need to pull\".</p>\n\n<p>You can get the commit id of any ref using <code>git rev-parse &lt;ref&gt;</code>, so you can do this for master and origin/master and compare them. If they are equal, the branches are the same. If they're unequal, you want to know which is ahead of the other. Using <code>git merge-base master origin/master</code> will tell you the common ancestor of both branches, and if they haven't diverged this will be the same as one or the other. If you get three different ids, the branches have diverged.</p>\n\n<p>To do this properly, eg in a script, you need to be able to refer to the current branch, and the remote branch it's tracking. The bash prompt-setting function in <code>/etc/bash_completion.d</code> has some useful code for getting branch names. However, you probably don't actually need to get the names. Git has some neat shorthands for referring to branches and commits (as documented in <code>git rev-parse --help</code>). In particular, you can use <code>@</code> for the current branch (assuming you're not in a detached-head state) and <code>@{u}</code> for its upstream branch (eg <code>origin/master</code>). So <code>git merge-base @ @{u}</code> will return the (hash of) the commit at which the current branch and its upstream diverge and <code>git rev-parse @</code> and <code>git rev-parse @{u}</code> will give you the hashes of the two tips. This can be summarized in the following script:</p>\n\n<pre><code>#!/bin/sh\n\nLOCAL=$(git rev-parse @)\nREMOTE=$(git rev-parse @{u})\nBASE=$(git merge-base @ @{u})\n\nif [ $LOCAL = $REMOTE ]; then\n    echo \"Up-to-date\"\nelif [ $LOCAL = $BASE ]; then\n    echo \"Need to pull\"\nelif [ $REMOTE = $BASE ]; then\n    echo \"Need to push\"\nelse\n    echo \"Diverged\"\nfi\n</code></pre>\n\n<p><em>Note:</em> older versions of git didn't allow <code>@</code> on its own, so you may have to use <code>@{0}</code> instead.</p>\n\n<p>The script also assumes that you've done a <code>git fetch</code> or <code>git remote update</code> first, to bring the tracking branches up to date. I didn't build this into the script because it's more flexible to be able to do the fetching and the comparing as separate operations, for example if you want to compare without fetching because you already fetched recently.</p>\n    "},{"t":"How to wait in bash for several subprocesses to finish and return exit code !=0 when any subprocess ends with code !=0?","l":"http://stackoverflow.com/questions/356100/how-to-wait-in-bash-for-several-subprocesses-to-finish-and-return-exit-code-0","q":"\n\n<p>How to wait in a bash script for several subprocesses spawned from that script to finish and return exit code !=0 when any of the subprocesses ends with code !=0 ?</p>\n\n<p>Simple script:</p>\n\n<pre><code>#!/bin/bash\nfor i in `seq 0 9`; do\n  doCalculations $i &amp;\ndone\nwait\n</code></pre>\n\n<p>The above script will wait for all 10 spawned subprocesses, but it will always give exit status 0 (see <code>help wait</code>). How can I modify this script so it will discover exit statuses of spawned subprocesses and return exit code 1 when any of subprocesses ends with code !=0?</p>\n\n<p>Is there any better solution for that than collecting PIDs of the subprocesses, wait for them in order and sum exit statuses?</p>\n    ","a":"\n<p><code>wait</code> also (optionally) takes the PID of the process to wait for, and with $! you get the PID of the last command launched in background.\nModify the loop to store the PID of each spawned sub-process into an array, and then loop again waiting on each PID.</p>\n    "},{"t":"How can I write a here doc to a file in Bash script?","l":"http://stackoverflow.com/questions/2953081/how-can-i-write-a-here-doc-to-a-file-in-bash-script","q":"\n\n<p>How can I write a here document to a file in Bash script?</p>\n    ","a":"\n<p>Read the Advanced Bash-Scripting Guide <a href=\"http://tldp.org/LDP/abs/html/here-docs.html\">Chapter 19. Here Documents</a>.</p>\n\n<p>Here's an example which will write the contents to a file at <code>/tmp/yourfilehere</code></p>\n\n<pre><code>cat &lt;&lt; EOF &gt; /tmp/yourfilehere\nThese contents will be written to the file.\n        This line is indented.\nEOF\n</code></pre>\n\n<p>Note that the final 'EOF' (The <code>LimitString</code>) should not have any whitespace in front of the word, because it means that the <code>LimitString</code> will not be recognized.</p>\n\n<p>In a shell script, you may want to use indentation to make the code readable, however this can have the undesirable effect of indenting the text within your here document. In this case, use <code>&lt;&lt;-</code> (followed by a dash) to disable leading tabs (<strong>Note</strong> that to test this you will need to <strong>replace the leading whitespace with a tab character</strong>, since I cannot print actual tab characters here.)</p>\n\n<pre><code>#!/usr/bin/env bash\n\nif true ; then\n    cat &lt;&lt;- EOF &gt; /tmp/yourfilehere\n    The leading tab is ignored.\n    EOF\nfi\n</code></pre>\n\n<p>If you don't want to interpret variables in the text, then use single quotes:</p>\n\n<pre><code>cat &lt;&lt; 'EOF' &gt; /tmp/yourfilehere\nThe variable $FOO will not be interpreted.\nEOF\n</code></pre>\n\n<p>To pipe the heredoc through a command pipeline:</p>\n\n<pre><code>cat &lt;&lt;'EOF' |  sed 's/a/b/'\nfoo\nbar\nbaz\nEOF\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>foo\nbbr\nbbz\n</code></pre>\n    "},{"t":"How to declare and use boolean variables in shell script?","l":"http://stackoverflow.com/questions/2953646/how-to-declare-and-use-boolean-variables-in-shell-script","q":"\n\n<p>I tried to declare a boolean variable in a shell script using the following syntax:</p>\n\n<pre><code>variable=$false\n\nvariable=$true\n</code></pre>\n\n<p>Is this correct? Also, if I wanted to update that variable would I use the same syntax? Finally, is the following syntax for using boolean variables as expressions correct:</p>\n\n<pre><code>if [ $variable ]\n\nif [ !$variable ]\n</code></pre>\n    ","a":"\n<p><strong>Revised Answer (Feb 12, 2014)</strong></p>\n\n<pre><code>the_world_is_flat=true\n# ...do something interesting...\nif [ \"$the_world_is_flat\" = true ] ; then\n    echo 'Be careful not to fall off!'\nfi\n</code></pre>\n\n<hr>\n\n<p><strong>Original Answer</strong></p>\n\n<p>Caveats: <a href=\"http://stackoverflow.com/a/21210966/89391\">http://stackoverflow.com/a/21210966/89391</a></p>\n\n<pre><code>the_world_is_flat=true\n# ...do something interesting...\nif $the_world_is_flat ; then\n    echo 'Be careful not to fall off!'\nfi\n</code></pre>\n\n<p>From: <a href=\"https://github.com/aperezdc/perezdecastro.org/blob/master/stash/using-boolean-variables-in-bash.markdown\">Using boolean variables in Bash</a></p>\n\n<p><em>The reason the original answer is included here is because the comments before the revision on Feb 12, 2014 pertain only to the original answer, and many of the comments are wrong when associated with the revised answer. For example, Dennis Williamson's comment about bash builtin <code>true</code> on Jun 2, 2010 only applies to the original answer, not the revised.</em></p>\n    "},{"t":"What are the special dollar sign shell variables?","l":"http://stackoverflow.com/questions/5163144/what-are-the-special-dollar-sign-shell-variables","q":"\n\n<p>In Bash, there appear to be several variables which hold special, consistently-meaning values. For instance,</p>\n\n<pre><code>./myprogram &amp;; echo $!\n</code></pre>\n\n<p>will return the PID of the process which backgrounded <code>myprogram</code>. I know of others, such as <code>$?</code> which I think is the current TTY. Are there others?</p>\n    ","a":"\n<ol>\n<li><code>$1</code>, <code>$2</code>, <code>$3</code>, ... are the <a href=\"https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html\">positional parameters</a>.</li>\n<li><code>\"$@\"</code> is an array-like construct of all positional parameters, <code>{$1, $2, $3 ...}</code>.</li>\n<li><code>\"$*\"</code> is the IFS expansion of all positional parameters, <code>$1 $2 $3 ...</code>.</li>\n<li><code>$#</code> is the number of positional parameters.</li>\n<li><code>$-</code> current options set for the shell.</li>\n<li><code>$$</code> pid of the current shell (not subshell).</li>\n<li><code>$_</code> most recent parameter (or the abs path of the command to start the current shell immediately after startup).</li>\n<li><code>$IFS</code> is the (input) field separator.</li>\n<li><code>$?</code> is the most recent foreground pipeline exit status.</li>\n<li><code>$!</code> is the PID of the most recent background command.</li>\n<li><code>$0</code> is the name of the shell or shell script.</li>\n</ol>\n\n<p>Most of the above can be found under <a href=\"https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html\">Special Parameters</a> in the Bash Reference Manual. There are all the <a href=\"https://www.gnu.org/software/bash/manual/html_node/Shell-Variables.html\">environment variables set by the shell</a>.</p>\n\n<p>For a comprehensive index, please see the <a href=\"https://www.gnu.org/software/bash/manual/html_node/Variable-Index.html\">Reference Manual Variable Index</a>.</p>\n    "},{"t":"How do I clear/delete the current line in terminal?","l":"http://stackoverflow.com/questions/9679776/how-do-i-clear-delete-the-current-line-in-terminal","q":"\n\n<p>If I'm  using terminal and typing in a line of text for a command, is there hotkey or anyway to clear/delete that line?</p>\n\n<p>For example, if my current line/command is something really long like:</p>\n\n<pre><code>&gt; git log --graph --all --blah..uh oh i want to cancel and clear this line &lt;cursor is here now&gt;\n</code></pre>\n\n<p>Is there a hotkey or command to go from the above to:</p>\n\n<pre><code>&gt;\n</code></pre>\n\n<p>?</p>\n\n<p>Usually I will press the <code>down</code> key and if my current line is a brand new one on the history, that will clear it.  But if I'm going through my command history via the <code>up</code> key and start editing or using those commands, <code>down</code> will only change the prompt to the next newest command in history, so it doesn't work here unless I press <code>down</code> multiple times.</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>You can use <kbd>Ctrl</kbd>+<kbd>U</kbd> to clear up to the beginning.</p>\n\n<p>You can also use <kbd>Ctrl</kbd>+<kbd>C</kbd> to cancel.</p>\n\n<p>If you want to keep the history, you can use <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>#</kbd> to make it a comment.</p>\n    "},{"t":"How do I test if a variable is a number in bash?","l":"http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash","q":"\n\n<p>I just can't figure out how do I make sure an argument passed to my script is a number or not.</p>\n\n<p>All I want to do is something like this:</p>\n\n<pre><code>test *isnumber* $1 &amp;&amp; VAR=$1 || echo \"need a number\"\n</code></pre>\n\n<p>Any help?</p>\n\n<p>UPDATE:\nI managed (with <a href=\"http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash/806923#806923\">Charles' help</a>) to do it, but I'm not yet sure it's the best way to do that (even though it worked on my tests). This is how it ended up:</p>\n\n<pre><code>[[ $1 =~ \"^[0-9]+$\" ]] &amp;&amp; echo \"number\" &amp;&amp; exit 0 || echo \"not a number\" &amp;&amp; exit 1\n</code></pre>\n    ","a":"\n<p>One approach is to use a regular expression, like so:</p>\n\n<pre><code>re='^[0-9]+$'\nif ! [[ $yournumber =~ $re ]] ; then\n   echo \"error: Not a number\" &gt;&amp;2; exit 1\nfi\n</code></pre>\n\n<p>If the value is not necessarily an integer, consider amending the regex appropriately; for instance:</p>\n\n<pre><code>^[0-9]+([.][0-9]+)?$\n</code></pre>\n\n<p>...or, to handle negative numbers:</p>\n\n<pre><code>^-?[0-9]+([.][0-9]+)?$\n</code></pre>\n    "},{"t":"How to count lines in a document?","l":"http://stackoverflow.com/questions/3137094/how-to-count-lines-in-a-document","q":"\n\n<p>I have lines like these, and I want to know how many lines I actually have...</p>\n\n<pre><code>09:16:39 AM  all    2.00    0.00    4.00    0.00    0.00    0.00    0.00    0.00   94.00\n09:16:40 AM  all    5.00    0.00    0.00    4.00    0.00    0.00    0.00    0.00   91.00\n09:16:41 AM  all    0.00    0.00    4.00    0.00    0.00    0.00    0.00    0.00   96.00\n09:16:42 AM  all    3.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00   96.00\n09:16:43 AM  all    0.00    0.00    1.00    0.00    1.00    0.00    0.00    0.00   98.00\n09:16:44 AM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00\n09:16:45 AM  all    2.00    0.00    6.00    0.00    0.00    0.00    0.00    0.00   92.00\n</code></pre>\n\n<p>Is there a way to count then using linux commands?</p>\n    ","a":"\n<p>Use <code>wc</code>:</p>\n\n<pre><code>wc -l &lt;filename&gt;\n</code></pre>\n\n<p>This will output the number of lines in <code>&lt;filename&gt;</code>:</p>\n\n<pre><code>$ wc -l /dir/file.txt\n3272485 /dir/file.txt\n</code></pre>\n\n<p>Or, to omit the <code>&lt;filename&gt;</code> from the result use <code>wc -l &lt; &lt;filename&gt;</code>:</p>\n\n<pre><code>$ wc -l &lt; /dir/file.txt\n3272485\n</code></pre>\n\n<p>You can also pipe data to <code>wc</code> as well:</p>\n\n<pre><code>$ cat /dir/file.txt | wc -l\n3272485\n$ curl yahoo.com --silent | wc -l\n63\n</code></pre>\n    "},{"t":"How to 'grep' a continuous stream?","l":"http://stackoverflow.com/questions/7161821/how-to-grep-a-continuous-stream","q":"\n\n<p>Is that possible to use <code>grep</code> on a continuous stream?</p>\n\n<p>What I mean is sort of a <code>tail -f &lt;file&gt;</code> command, but with <code>grep</code> on the output in order to keep only the lines that interest me.</p>\n\n<p>I've tried <code>tail -f &lt;file&gt; | grep pattern</code> but it seems that <code>grep</code> can only be executed once <code>tail</code> finishes, that is to say never.</p>\n    ","a":"\n<p>Turn on <code>grep</code>'s line buffering mode.</p>\n\n<pre><code>tail -f file | grep --line-buffered my_pattern\n</code></pre>\n    "},{"t":"Reliable way for a bash script to get the full path to itself?","l":"http://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself","q":"\n\n<p>I have a bash script that needs to know its full path. I'm trying to find a broadly-compatible way of doing that without ending up with relative or funky-looking paths. I only need to support bash, not sh, csh, etc.</p>\n\n<p>What I've found so far:</p>\n\n<ol>\n<li><p>The accepted answer to \"<a href=\"http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in\">Can a Bash script tell what directory it's stored in?</a>\" addresses getting the path of the script via <code>dirname $0</code>, which is fine, but that may return a <em>relative</em> path (like <code>.</code>), which is a problem if you want to change directories in the script and have the path still point to the script's directory. Still, <code>dirname</code> will be part of the puzzle.</p></li>\n<li><p>The accepted answer to \"<a href=\"http://stackoverflow.com/questions/3572030/bash-script-absolute-path-with-osx\">Bash script absolute path with OSX</a>\" <em>(OS X specific, but the answer works regardless)</em> gives a function that will test to see if <code>$0</code> looks relative and if so will pre-pend <code>$PWD</code> to it. But the result can still have relative bits in it (although overall it's absolute)&nbsp;— for instance, if the script is <code>t</code> in the directory <code>/usr/bin</code> and you're in <code>/usr</code> and you type <code>bin/../bin/t</code> to run it (yes, that's convoluted), you end up with <code>/usr/bin/../bin</code> as the script's directory path. Which <strong>works</strong>, but...</p></li>\n<li><p>The <code>readlink</code> solution <a href=\"http://fritzthomas.com/open-source/linux/384-how-to-get-the-absolute-path-within-the-running-bash-script/\">on this page</a>, which looks like this:</p>\n\n<pre><code># Absolute path to this script. /home/user/bin/foo.sh\nSCRIPT=$(readlink -f $0)\n# Absolute path this script is in. /home/user/bin\nSCRIPTPATH=`dirname $SCRIPT`\n</code></pre>\n\n<p>But <code>readlink</code> isn't POSIX and apparently the solution relies on GNU's <code>readlink</code> where BSD's won't work for some reason (I don't have access to a BSD-like system to check).</p></li>\n</ol>\n\n<p>So, various ways of doing it, but they all have their caveats.</p>\n\n<p>What would be a better way? Where \"better\" means:</p>\n\n<ul>\n<li>Gives me the absolute path.</li>\n<li>Takes out funky bits even when invoked in a convoluted way (see comment on #2 above). (E.g., at least moderately canonicalizes the path.)</li>\n<li>Relies only on bash-isms or things that are almost certain to be on most popular flavors of *nix systems (GNU/Linux, BSD and BSD-like systems like OS X, etc.).</li>\n<li>Avoids calling external programs if possible (e.g., prefers bash built-ins).</li>\n<li>(<strong>Updated</strong>, thanks for the head's up, <a href=\"http://stackoverflow.com/users/251414/wich\">wich</a>) Doesn't have to resolve symlinks (in fact, I'd kind of prefer it left them alone, but that's not a requirement).</li>\n</ul>\n    ","a":"\n<p>Answering my own question (per the <a href=\"http://stackoverflow.com/faq\">FAQ</a>)...</p>\n\n<p>Here's what I've come up with that seems to mostly fit my \"better\" criteria:</p>\n\n<pre><code>pushd `dirname $0` &gt; /dev/null\nSCRIPTPATH=`pwd`\npopd &gt; /dev/null\n</code></pre>\n\n<p>...but it seems roundabout and clunky. I'm hoping someone else will have a better answer.</p>\n\n<p>Note also that esoteric situations, such as executing a script that isn't coming from a file in an accessible file system at all (which is perfectly possible), is not catered to there (or in any of the other answers I've seen).</p>\n\n<p><strong>Edit</strong>: Change the second line to:</p>\n\n<pre><code>SCRIPTPATH=`pwd -P`\n</code></pre>\n\n<p>...if you want to resolve symlinks. (I don't, but others may.) <s>I don't know how widely-supported the <code>-P</code> flag is, though.</s><a href=\"http://stackoverflow.com/users/26428/dennis-williamson\">Dennis Williamson</a> tells us below that <code>-P</code> is reliable as of, well, a long time ago. :-)</p>\n    "},{"t":"How to determine the current shell I'm working on?","l":"http://stackoverflow.com/questions/3327013/how-to-determine-the-current-shell-im-working-on","q":"\n\n<p>How can I determine the current shell I am working on? </p>\n\n<p>Would the output of the <code>ps</code> command alone be sufficient?</p>\n\n<p>How can this be done in different flavors of UNIX?</p>\n    ","a":"\n<ul>\n<li><p>There are 3 approaches to finding the <strong>name</strong> of the current shell's executable:</p>\n\n<p>Please note that all 3 approaches can be fooled if the executable of the shell is <code>/bin/sh</code> but it's really a renamed <code>bash</code>, for example (which frequently happens). </p>\n\n<p><em>Thus your second question of whether <code>ps</code> output will do is answered with \"<strong>not always</strong>\".</em></p>\n\n<ol>\n<li><p><code>echo $0</code> - will print the program name... which in the case of shell is the actual shell</p></li>\n<li><p><code>ps  -ef | grep $$ | grep -v grep</code>  - will look for current process ID in the list of running processes. Current process being shell, it will include shell. </p>\n\n<p>This is not 100% reliable as you might have OTHER processes whose <code>ps</code> listing includes the same number as shell's process ID, especially if that ID is a small # (e.g. if shell's PID is \"5\", you may find processes called \"java5\" or \"perl5\" in the same <code>grep</code> output!). <em>Which presents the second problem to \"ps\" approach, on top of the shell name being not always reliable.</em></p></li>\n<li><p><code>echo $SHELL</code> The path to the current shell is in <code>SHELL</code> variable for any shell. The caveat for the last one is that if you launch a shell explicitly as a subprocess (e.g. it's not your login shell) you will get you login shell's value instead - if that's a possibility, use the <code>ps</code> or <code>$0</code> approach.</p></li>\n</ol>\n\n<hr></li>\n<li><p>However, if the executable is not matching real shell (e.g. <code>/bin/sh</code> is actually bash or ksh), you need heuristics. Here are some environmental variables specific to various shells:</p>\n\n<ul>\n<li><p><code>$version</code> is set on tcsh</p></li>\n<li><p><code>$BASH</code> is set on bash</p></li>\n<li><p><code>$shell</code> (lowercase) is set to actual shell name in csh or tcsh </p></li>\n<li><p><code>$ZSH_NAME</code> is set on zsh</p></li>\n<li><p>ksh has <code>$PS3</code> and <code>$PS4</code> set, whereas normal Bourne shell (<code>sh</code>) only has <code>$PS1</code> and <code>$PS2</code> set. This generally seems like the hardest to distinguish - the ONLY difference in entire set of envionmental variables between <code>sh</code> and <code>ksh</code> we have installed on Solaris boxen is <code>$ERRNO</code>, <code>$FCEDIT</code>, <code>$LINENO</code>, <code>$PPID</code>, <code>$PS3</code>, <code>$PS4</code>, <code>$RANDOM</code>, <code>$SECONDS</code>, <code>$TMOUT</code>.</p></li>\n</ul></li>\n</ul>\n    "},{"t":"How do I prompt a user for confirmation in bash script? [duplicate]","l":"http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/226703/how-do-i-prompt-for-input-in-a-linux-shell-script\" dir=\"ltr\">How do I prompt for input in a Linux shell script?</a>\n                <span class=\"question-originals-answer-count\">\n                    20 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I want to put a quick \"are you sure?\" prompt for confirmation at the top of a potentially dangerous bash script, what's the easiest/best way to do this?</p>\n    ","a":"\n<pre><code>read -p \"Are you sure? \" -n 1 -r\necho    # (optional) move to a new line\nif [[ $REPLY =~ ^[Yy]$ ]]\nthen\n    # do dangerous stuff\nfi\n</code></pre>\n\n<p><strong>Edit</strong>:</p>\n\n<p>I incorporated <strong>levislevis85</strong>'s suggestion (thanks!) and added the <code>-n</code> option to <code>read</code> to accept one character without the need to press <kbd>Enter</kbd>. You can use one or both of these.</p>\n\n<p>Also, the negated form might look like this:</p>\n\n<pre><code>read -p \"Are you sure? \" -n 1 -r\necho    # (optional) move to a new line\nif [[ ! $REPLY =~ ^[Yy]$ ]]\nthen\n    exit 1\nfi\n</code></pre>\n\n<p>However, as pointed out by Erich, under some circumstances such as a syntax error caused by the script being run in the wrong shell, the negated form could allow the script to continue to the \"dangerous stuff\". The failure mode should favor the safest outcome so only the first, non-negated <code>if</code> should be used.</p>\n    "},{"t":"Find and kill a process in one line using bash and regex","l":"http://stackoverflow.com/questions/3510673/find-and-kill-a-process-in-one-line-using-bash-and-regex","q":"\n\n<p>I often need to kill a process during programming.</p>\n\n<p>The way I do it now is:</p>\n\n<pre><code>[~]$ ps aux | grep 'python csp_build.py'\nuser    5124  1.0  0.3 214588 13852 pts/4    Sl+  11:19   0:00 python csp_build.py\nuser    5373  0.0  0.0   8096   960 pts/6    S+   11:20   0:00 grep python csp_build.py\n[~]$ kill 5124\n</code></pre>\n\n<p>How can I extract the process id automatically and kill it in the same line?</p>\n\n<p>Like this:</p>\n\n<pre><code>[~]$ ps aux | grep 'python csp_build.py' | kill &lt;regex that returns the pid&gt;\n</code></pre>\n    ","a":"\n<p>In <code>bash</code>, you should be able to do:</p>\n\n<pre><code>kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')\n</code></pre>\n\n<p>Details on its workings are as follows:</p>\n\n<ul>\n<li>The <code>ps</code> gives you the list of all the processes.</li>\n<li>The <code>grep</code> filters that based on your search string, <code>[p]</code> is a trick to stop you picking up the actual <code>grep</code> process itself.</li>\n<li>The <code>awk</code> just gives you the second field of each line, which is the PID.</li>\n<li>The <code>$(x)</code> construct means to execute <code>x</code> then take its output and put it on the command line. The output of that <code>ps</code> pipeline inside that construct above is the list of process IDs so you end up with a command like <code>kill 1234 1122 7654</code>.</li>\n</ul>\n\n<p>Here's a transcript showing it in action:</p>\n\n<pre><code>pax&gt; sleep 3600 &amp;\n[1] 2225\npax&gt; sleep 3600 &amp;\n[2] 2226\npax&gt; sleep 3600 &amp;\n[3] 2227\npax&gt; sleep 3600 &amp;\n[4] 2228\npax&gt; sleep 3600 &amp;\n[5] 2229\npax&gt; kill $(ps aux | grep '[s]leep' | awk '{print $2}')\n[5]+  Terminated              sleep 3600\n[1]   Terminated              sleep 3600\n[2]   Terminated              sleep 3600\n[3]-  Terminated              sleep 3600\n[4]+  Terminated              sleep 3600\npax&gt; _\n</code></pre>\n\n<p>and you can see it terminating all the sleepers.</p>\n\n<hr>\n\n<p>Explaining the <code>grep '[p]ython csp_build.py'</code> bit in a bit more detail:</p>\n\n<p>When you do <code>sleep 3600 &amp;</code> followed by <code>ps -ef | grep sleep</code>, you tend to get <em>two</em> processes with <code>sleep</code> in it, the <code>sleep 3600</code> and the <code>grep sleep</code> (because they both have <code>sleep</code> in them, that's not rocket science).</p>\n\n<p>However, <code>ps -ef | grep '[s]leep'</code> won't create a process with <code>sleep</code> in it, it instead creates <code>grep '[s]leep'</code> and here's the tricky bit: the <code>grep</code> doesn't find it because it's looking for the regular expression \"any character from the character class <code>[s]</code> (which is <code>s</code>) followed by <code>leep</code>.</p>\n\n<p>In other words, it's looking for <code>sleep</code> but the grep process is <code>grep '[s]leep'</code> which doesn't have <code>sleep</code> in it.</p>\n\n<p>When I was shown this (by someone here on SO), I immediately started using it because</p>\n\n<ul>\n<li>it's one less process than adding <code>| grep -v grep</code>; and</li>\n<li>it's elegant <em>and</em> sneaky, a rare combination :-)</li>\n</ul>\n    "},{"t":"How do I write stderr to a file while using “tee” with a pipe?","l":"http://stackoverflow.com/questions/692000/how-do-i-write-stderr-to-a-file-while-using-tee-with-a-pipe","q":"\n\n<p>I have below a command which will print the output of <code>aaa.sh</code> to the screen while also writing <em>stdout</em> to <code>bbb.out</code>; however I would also like to write <em>stderr</em> to a file named <code>ccc.out</code>.  Any suggestions on how to modify the piece below?</p>\n\n<pre><code>./aaa.sh | tee ./bbb.out\n</code></pre>\n\n<p><strong>Update:</strong> <em>stdout</em> and <em>stderr</em> should still both be printed to the screen, regardless.</p>\n    ","a":"\n<p>I'm assuming you want to still see STDERR and STDOUT on the terminal.  You could go for Josh Kelley's answer, but I find keeping a <code>tail</code> around in the background which outputs your log file very hackish and cludgy.  Notice how you need to keep an exra FD and do cleanup afterward by killing it and technically should be doing that in a <code>trap '...' EXIT</code>.</p>\n\n<p>There is a better way to do this, and you've already discovered it: <code>tee</code>.</p>\n\n<p>Only, instead of just using it for your stdout, have a tee for stdout and one for stderr.  How will you accomplish this?  Process substitution and file redirection:</p>\n\n<pre><code>command &gt; &gt;(tee stdout.log) 2&gt; &gt;(tee stderr.log &gt;&amp;2)\n</code></pre>\n\n<p>Let's split it up and explain:</p>\n\n<pre><code>&gt; &gt;(..)\n</code></pre>\n\n<p><code>&gt;(...)</code> (process substitution) creates a FIFO and lets <code>tee</code> listen on it.  Then, it uses <code>&gt;</code> (file redirection) to redirect the STDOUT of <code>command</code> to the FIFO that your first <code>tee</code> is listening on.</p>\n\n<p>Same thing for the second:</p>\n\n<pre><code>2&gt; &gt;(tee stderr.log &gt;&amp;2)\n</code></pre>\n\n<p>We use process substitution again to make a <code>tee</code> process that reads from STDIN and dumps it into <code>stderr.log</code>.  <code>tee</code> outputs its input back on STDOUT, but since its input is our STDERR, we want to redirect <code>tee</code>'s STDOUT to our STDERR again.  Then we use file redirection to redirect <code>command</code>'s STDERR to the FIFO's input (<code>tee</code>'s STDIN).</p>\n\n<p>See <a href=\"http://mywiki.wooledge.org/BashGuide/InputAndOutput\"></a><a href=\"http://mywiki.wooledge.org/BashGuide/InputAndOutput\">http://mywiki.wooledge.org/BashGuide/InputAndOutput</a></p>\n\n<p>Process substitution is one of those really lovely things you get as a bonus of choosing <code>bash</code> as your shell as opposed to <code>sh</code> (POSIX or Bourne).</p>\n\n<hr>\n\n<p>In <code>sh</code>, you'd have to do things manually:</p>\n\n<pre><code>out=\"${TMPDIR:-/tmp}/out.$$\" err=\"${TMPDIR:-/tmp}/err.$$\"\nmkfifo \"$out\" \"$err\"\ntrap 'rm \"$out\" \"$err\"' EXIT\ntee stdout.log &lt; \"$out\" &amp;\ntee stderr.log &lt; \"$err\" &gt;&amp;2 &amp;\ncommand &gt;\"$out\" 2&gt;\"$err\"\n</code></pre>\n    "},{"t":"Extract substring in bash","l":"http://stackoverflow.com/questions/428109/extract-substring-in-bash","q":"\n\n<p>Looking for a solution in bash (will be part of a script).</p>\n\n<p>Given a filename in the form \"someletters_12345_moreleters.ext\", I want to extract the 5 digits and put them into a variable.</p>\n\n<p>So to emphasize the point.  I have a filename with x number of characters then a five digit sequence surrounded by a single underscore on either side then another set of x number of characters.  I want to take the 5 digit number and put that into a variable.</p>\n\n<p>I am very interested in the number of different ways that this can be accomplished.  As with most things, I am sure there are a number of different ways to tackle this problem.</p>\n\n<hr>\n\n<p>Duplicate of</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/219402/what-linux-shell-command-returns-a-part-of-a-string\">What linux shell command returns a part of a string?</a></li>\n</ul>\n    ","a":"\n<p>Use <a href=\"http://www.manpagez.com/man/1/cut/\">cut</a>:</p>\n\n<pre><code>echo someletters_12345_moreleters.ext | cut -d'_' -f 2\n</code></pre>\n\n<p>More generic:</p>\n\n<pre><code>INPUT=someletters_12345_moreleters.ext\nSUBSTRING=`echo $INPUT| cut -d'_' -f 2`\necho $SUBSTRING\n</code></pre>\n    "},{"t":"Add line break to git commit -m from command line","l":"http://stackoverflow.com/questions/5064563/add-line-break-to-git-commit-m-from-command-line","q":"\n\n<p>I am using git from the command line, and trying to add a line break to the commit message (using git commit -m \"\") without going into <code>vim</code>.</p>\n\n<p>Is this possible?</p>\n    ","a":"\n<p>Certainly, how it's done depends on your shell. In bash, you can use single quotes around the message, and just leave the quote open, which will make bash prompt for another line, until you close the quote. Like this:</p>\n\n<pre><code>git commit -m 'Message\ngoes\nhere'\n</code></pre>\n\n<p>Alternatively, you can use a \"here document\":</p>\n\n<pre><code>git commit -F- &lt;&lt;EOF\nMessage\ngoes\nhere\nEOF\n</code></pre>\n    "},{"t":"What's the best way to check that environment variables are set in Unix shellscript","l":"http://stackoverflow.com/questions/307503/whats-the-best-way-to-check-that-environment-variables-are-set-in-unix-shellscr","q":"\n\n<p>I've got a few Unix shell scripts where I need to check that certain environment variables are set before I start doing stuff, so I do this sort of thing:</p>\n\n<pre><code>if [ -z \"$STATE\" ]; then\n    echo \"Need to set STATE\"\n    exit 1\nfi  \n\nif [ -z \"$DEST\" ]; then\n    echo \"Need to set DEST\"\n    exit 1\nfi\n</code></pre>\n\n<p>which is a lot of typing. Is there a more elegant idiom for checking that a set of environment variables is set?</p>\n\n<p>EDIT: I should mention that these variables have no meaningful default value - the script should error out if any are unset.</p>\n    ","a":"\n<h3>Parameter Expansion</h3>\n\n<p>The obvious answer is to use one of the special forms of parameter expansion:</p>\n\n<pre><code>: ${STATE?\"Need to set STATE\"}\n: ${DEST:?\"Need to set DEST non-empty\"}\n</code></pre>\n\n<p>The first requires STATE to be set, but STATE=\"\" (an empty string) is OK — not exactly what you want, but the alternative and older notation.</p>\n\n<p>The second requires DEST to be set and non-empty.</p>\n\n<p>If you supply no message, the shell provides a default message.</p>\n\n<p>The <code>${var?}</code> construct is portable back to Version 7 UNIX and the Bourne Shell (1978 or thereabouts).  The <code>${var:?}</code> construct is slightly more recent: I think it was in System III UNIX circa 1981, but it may have been in PWB UNIX before that.  It is therefore in the Korn Shell, and in the POSIX shells, including specifically Bash.</p>\n\n<p>It is usually documented in the shell's man page in a section called <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion\">Parameter Expansion</a>.  For example, the <code>bash</code> manual says:</p>\n\n<blockquote>\n<pre><code>${parameter:?word}\n</code></pre>\n  \n  <p>Display Error if Null or Unset.  If parameter is null or unset, the expansion of word (or a message to that effect if word is not present) is written to the standard error and the shell, if it is not interactive, exits.  Otherwise, the value of parameter is substituted.</p>\n</blockquote>\n\n<h3>The Colon Command</h3>\n\n<p>I should probably add that the colon command simply has its arguments evaluated and then succeeds.  It is the original shell comment notation (before '<code>#</code>' to end of line).  For a long time, Bourne shell scripts had a colon as the first character.  The C Shell would read a script and use the first character to determine whether it was for the C Shell (a '<code>#</code>' hash) or the Bourne shell (a '<code>:</code>' colon).  Then the kernel got in on the act and added support for '<code>#!/path/to/program</code>' and the Bourne shell got '<code>#</code>' comments, and the colon convention went by the wayside.  But if you come across a script that starts with a colon, now you will know why.</p>\n    "},{"t":"Exit Shell Script Based on Process Exit Code","l":"http://stackoverflow.com/questions/90418/exit-shell-script-based-on-process-exit-code","q":"\n\n<p>I have a shell script that executes a number of commands. How do I make the shell script exit if any of the commands exit with a non-zero exit code?</p>\n    ","a":"\n<p>After each command, the exit code can be found in the <code>$?</code> variable so you would have something like:</p>\n\n<pre><code>ls -al file.ext\nrc=$?; if [[ $rc != 0 ]]; then exit $rc; fi\n</code></pre>\n\n<p>You need to be careful of piped commands since the <code>$?</code> only gives you the return code of the last element in the pipe so, in the code:</p>\n\n<pre><code>ls -al file.ext | sed 's/^/xx: /\"\n</code></pre>\n\n<p>will not return an error code if the file doesn't exist (since the <code>sed</code> part of the pipeline actually works, returning 0).</p>\n    "},{"t":"unix shell script find out which directory the script file resides? [duplicate]","l":"http://stackoverflow.com/questions/242538/unix-shell-script-find-out-which-directory-the-script-file-resides","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in\" dir=\"ltr\">Can a Bash script tell what directory it's stored in?</a>\n                <span class=\"question-originals-answer-count\">\n                    42 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>Basically I need to run the script with paths related to the shell script file location, how can I change the current directory to the same directory as where the script file resides?</p>\n    ","a":"\n<p>In bash you should get what you need like this:</p>\n\n<pre><code>#!/bin/bash\n\nBASEDIR=$(dirname $0)\necho $BASEDIR\n</code></pre>\n    "},{"t":".bashrc at ssh login [closed]","l":"http://stackoverflow.com/questions/820517/bashrc-at-ssh-login","q":"\n\n<p>When I ssh into my ubuntu-box running Hardy 8.04, the environment variables in my .bashrc are not set.</p>\n\n<p>If I do a source .bashrc, the variables are properly set, and all is well.</p>\n\n<p>How come .bashrc isn't run at login?</p>\n    ","a":"\n<p><code>.bashrc</code> is not sourced when you log in using SSH. You need to source it in your <code>.bash_profile</code> like this:</p>\n\n<pre><code>if [ -f ~/.bashrc ]; then\n  . ~/.bashrc\nfi\n</code></pre>\n    "},{"t":"How to have the cp command create any necessary folders for copying a file to a destination [duplicate]","l":"http://stackoverflow.com/questions/947954/how-to-have-the-cp-command-create-any-necessary-folders-for-copying-a-file-to-a","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/1529946/linux-copy-and-create-destination-dir-if-it-does-not-exist\" dir=\"ltr\">linux: copy and create destination dir if it does not exist</a>\n                <span class=\"question-originals-answer-count\">\n                    5 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>When copying a file using <code>cp</code> to a folder that may or may not exist, how do I get <code>cp</code> to create the folder if necessary? Here is what I have tried:</p>\n\n<pre><code>[root@file nutch-0.9]# cp -f urls-resume /nosuchdirectory/hi.txt\ncp: cannot create regular file `/nosuchdirectory/hi.txt': No such file or directory\n[root@file nutch-0.9]# \n</code></pre>\n\n<p>besides,any way to make \"&gt;\" work that way,say to create a directory when need?</p>\n\n<pre><code>[root@file nutch-0.9]# echo test &gt; /nosuchtest/hi.txt\n-bash: /nosuchtest/hi.txt: No such file or directory\n</code></pre>\n    ","a":"\n<p>Old question but here is an easier answer if you are copying from some existing structure and you just need it recreated (usually the case):</p>\n\n<p>cp does support this but you need to read the full documentation (info coreutils 'cp invocation'):\n</p>\n\n<blockquote>\n<pre class=\"lang-none prettyprint-override\"><code>--parents\n     Form the name of each destination file by appending to the target\n     directory a slash and the specified name of the source file.  The\n     last argument given to `cp' must be the name of an existing\n     directory.  For example, the command:\n\n          cp --parents a/b/c existing_dir\n\n     copies the file `a/b/c' to `existing_dir/a/b/c', creating any\n     missing intermediate directories.\n</code></pre>\n</blockquote>\n\n<pre class=\"lang-none prettyprint-override\"><code>/tmp $ mkdir foo\n/tmp $ mkdir foo/foo\n/tmp $ touch foo/foo/foo.txt\n/tmp $ mkdir bar\n/tmp $ cp --parents foo/foo/foo.txt bar\n/tmp $ ls bar/foo/foo\nfoo.txt\n</code></pre>\n\n<p>No need for a script.</p>\n    "},{"t":"get current time in seconds since the Epoch on Linux, Bash","l":"http://stackoverflow.com/questions/1092631/get-current-time-in-seconds-since-the-epoch-on-linux-bash","q":"\n\n<p>I need something simple like <code>date</code>, but in seconds since 1970 instead of the current date, hours, minutes, and seconds.</p>\n\n<p><code>date</code> doesn't seem to offer that option. Is there an easy way?</p>\n    ","a":"\n<p>This should work:</p>\n\n<pre><code>date +%s\n</code></pre>\n    "},{"t":"In bash, how can I check if a string begins with some value?","l":"http://stackoverflow.com/questions/2172352/in-bash-how-can-i-check-if-a-string-begins-with-some-value","q":"\n\n<p>I would like to check if a string begins with \"node\" e.g. \"node001\". Something like</p>\n\n<pre><code>if [ $HOST == user* ]  \n  then  \n  echo yes  \nfi\n</code></pre>\n\n<p>How can I do it correctly？</p>\n\n<hr>\n\n<p>UPDATE:</p>\n\n<p>Thank you so much! I further need to combine expressions to check if HOST is either \"user1\" or begins with \"node\"</p>\n\n<pre><code>if [ [[ $HOST == user1 ]] -o [[ $HOST == node* ]] ];  \nthen  \necho yes \nfi\n\n&gt; &gt; &gt; -bash: [: too many arguments\n</code></pre>\n\n<p>How to do it correctly?</p>\n    ","a":"\n<p>This snippet on the <a href=\"http://tldp.org/LDP/abs/html/comparison-ops.html\">Advanced Bash Scripting Guide</a> says:</p>\n\n<pre><code># The == comparison operator behaves differently within a double-brackets\n# test than within single brackets.\n\n[[ $a == z* ]]   # True if $a starts with an \"z\" (wildcard matching).\n[[ $a == \"z*\" ]] # True if $a is equal to z* (literal matching).\n</code></pre>\n\n<p>So you had it <em>nearly</em> correct; you needed <em>double</em> brackets, not single brackets.</p>\n\n<hr>\n\n<p>With regards to your second question, you can write it this way:</p>\n\n<pre><code>HOST=user1\nif  [[ $HOST == user1 ]] || [[ $HOST == node* ]] ;\nthen\n    echo yes1\nfi\n\nHOST=node001\nif [[ $HOST == user1 ]] || [[ $HOST == node* ]] ;\nthen\n    echo yes2\nfi\n</code></pre>\n\n<p>Which will echo</p>\n\n<pre><code>yes1\nyes2\n</code></pre>\n\n<p>Bash's <code>if</code> syntax is hard to get used to (IMO).</p>\n    "},{"t":"How to redirect output to a file and stdout","l":"http://stackoverflow.com/questions/418896/how-to-redirect-output-to-a-file-and-stdout","q":"\n\n<p>In bash, calling <code>foo</code> would display any output from that command on the stdout.</p>\n\n<p>Calling <code>foo &gt; output</code> would redirect any output from that command to the file specified (in this case 'output').</p>\n\n<p>Is there a way to redirect output to a file <em>and</em> have it display on stdout?</p>\n    ","a":"\n<p>The command you want is named <strong><a href=\"http://www.gnu.org/software/coreutils/manual/html_node/tee-invocation.html\"><code>tee</code></a></strong>:</p>\n\n<pre><code>ls -lR / | tee output.file\n</code></pre>\n    "},{"t":"Aborting a shell script if any command returns a non-zero value?","l":"http://stackoverflow.com/questions/821396/aborting-a-shell-script-if-any-command-returns-a-non-zero-value","q":"\n\n<p>I have a Bash shell script that invokes a number of commands.\nI would like to have the shell script automatically exit with a return value of 1 if any of the commands return a non-zero value.</p>\n\n<p>Is this possible without explicitly checking the result of each command?</p>\n\n<p>e.g. </p>\n\n<pre><code>dosomething1\nif [[ $? -ne 0 ]]; then\n    exit 1\nfi\n\ndosomething2\nif [[ $? -ne 0 ]]; then\n    exit 1\nfi\n</code></pre>\n    ","a":"\n<p>Add this to the beginning of the script:</p>\n\n<pre><code>set -e\n</code></pre>\n\n<p>This will cause the shell to exit immediately if a simple command exits with a nonzero exit value.  A simple command is any command not part of an if, while, or until test, or part of an &amp;&amp; or || list.</p>\n\n<p>See the bash(1) man page on the \"set\" internal command for more details.</p>\n\n<p>I personally start almost all shell scripts with \"set -e\".  It's really annoying to have a script stubbornly continue when something fails in the middle and breaks assumptions for the rest of the script.</p>\n    "},{"t":"How can I remove the first line of a text file using bash/sed script?","l":"http://stackoverflow.com/questions/339483/how-can-i-remove-the-first-line-of-a-text-file-using-bash-sed-script","q":"\n\n<p>I need to repeatedly remove the first line from a huge text file using a bash script.</p>\n\n<p>Right now I am using <code>sed -i -e \"1d\" $FILE</code> - but it takes around a minute to do the deletion.</p>\n\n<p>Is there a more efficient way to accomplish this?</p>\n    ","a":"\n<p>Try GNU tail:</p>\n\n<pre><code>tail -n +2 \"$FILE\"\n</code></pre>\n\n<p>tail is much faster than sed.</p>\n    "},{"t":"How can I get `find` to ignore .svn directories?","l":"http://stackoverflow.com/questions/2314643/how-can-i-get-find-to-ignore-svn-directories","q":"\n\n<p>I often use the <code>find</code> command to search through source code, delete files, whatever. Annoyingly, because Subversion stores duplicates of each file in its <code>.svn/text-base/</code> directories my simple searches end up getting lots of duplicate results. For example, I want to recursively search for <code>uint</code> in multiple <code>messages.h</code> and <code>messages.cpp</code> files:</p>\n\n<pre><code># find -name 'messages.*' -exec grep -Iw uint {} +\n./messages.cpp:            Log::verbose &lt;&lt; \"Discarding out of date message: id \" &lt;&lt; uint(olderMessage.id)\n./messages.cpp:    Log::verbose &lt;&lt; \"Added to send queue: \" &lt;&lt; *message &lt;&lt; \": id \" &lt;&lt; uint(preparedMessage-&gt;id)\n./messages.cpp:                Log::error &lt;&lt; \"Received message with invalid SHA-1 hash: id \" &lt;&lt; uint(incomingMessage.id)\n./messages.cpp:            Log::verbose &lt;&lt; \"Received \" &lt;&lt; *message &lt;&lt; \": id \" &lt;&lt; uint(incomingMessage.id)\n./messages.cpp:            Log::verbose &lt;&lt; \"Sent message: id \" &lt;&lt; uint(preparedMessage-&gt;id)\n./messages.cpp:        Log::verbose &lt;&lt; \"Discarding unsent message: id \" &lt;&lt; uint(preparedMessage-&gt;id)\n./messages.cpp:        for (uint i = 0; i &lt; 10 &amp;&amp; !_stopThreads; ++i) {\n./.svn/text-base/messages.cpp.svn-base:            Log::verbose &lt;&lt; \"Discarding out of date message: id \" &lt;&lt; uint(olderMessage.id)\n./.svn/text-base/messages.cpp.svn-base:    Log::verbose &lt;&lt; \"Added to send queue: \" &lt;&lt; *message &lt;&lt; \": id \" &lt;&lt; uint(preparedMessage-&gt;id)\n./.svn/text-base/messages.cpp.svn-base:                Log::error &lt;&lt; \"Received message with invalid SHA-1 hash: id \" &lt;&lt; uint(incomingMessage.id)\n./.svn/text-base/messages.cpp.svn-base:            Log::verbose &lt;&lt; \"Received \" &lt;&lt; *message &lt;&lt; \": id \" &lt;&lt; uint(incomingMessage.id)\n./.svn/text-base/messages.cpp.svn-base:            Log::verbose &lt;&lt; \"Sent message: id \" &lt;&lt; uint(preparedMessage-&gt;id)\n./.svn/text-base/messages.cpp.svn-base:        Log::verbose &lt;&lt; \"Discarding unsent message: id \" &lt;&lt; uint(preparedMessage-&gt;id)\n./.svn/text-base/messages.cpp.svn-base:        for (uint i = 0; i &lt; 10 &amp;&amp; !_stopThreads; ++i) {\n./virus/messages.cpp:void VsMessageProcessor::_progress(const string &amp;fileName, uint scanCount)\n./virus/messages.cpp:ProgressMessage::ProgressMessage(const string &amp;fileName, uint scanCount)\n./virus/messages.h:    void _progress(const std::string &amp;fileName, uint scanCount);\n./virus/messages.h:    ProgressMessage(const std::string &amp;fileName, uint scanCount);\n./virus/messages.h:    uint        _scanCount;\n./virus/.svn/text-base/messages.cpp.svn-base:void VsMessageProcessor::_progress(const string &amp;fileName, uint scanCount)\n./virus/.svn/text-base/messages.cpp.svn-base:ProgressMessage::ProgressMessage(const string &amp;fileName, uint scanCount)\n./virus/.svn/text-base/messages.h.svn-base:    void _progress(const std::string &amp;fileName, uint scanCount);\n./virus/.svn/text-base/messages.h.svn-base:    ProgressMessage(const std::string &amp;fileName, uint scanCount);\n./virus/.svn/text-base/messages.h.svn-base:    uint        _scanCount;\n</code></pre>\n\n<p>How can I tell <code>find</code> to ignore the <code>.svn</code> directories?</p>\n\n<hr>\n\n<p><strong>Update</strong>: If you upgrade  your SVN client to <a href=\"http://subversion.apache.org/docs/release-notes/1.7.html#single-db\">version 1.7</a> this is no longer an issue.</p>\n\n<blockquote>\n  <p>A key feature of the changes introduced in Subversion 1.7 is the centralization of working copy metadata storage into a single location. Instead of a <code>.svn</code> directory in every directory in the working copy, Subversion 1.7 working copies have just one <code>.svn</code> directory—in the root of the working copy. This directory includes (among other things) an SQLite-backed database which contains all of the metadata Subversion needs for that working copy.</p>\n</blockquote>\n    ","a":"\n<p>For searching, can I suggest you look at <a href=\"http://www.betterthangrep.com\">ack</a> ? It's a source-code aware <code>find</code>, and as such will automatically ignore many file types, including source code repository info such as the above.</p>\n    "},{"t":"Automatic exit from bash shell script on error","l":"http://stackoverflow.com/questions/2870992/automatic-exit-from-bash-shell-script-on-error","q":"\n\n<p>I've been writing some shell script and I would find it useful if there was the ability to halt the execution of said shell script if any of the commands failed. See below for an example:</p>\n\n<pre><code>#!/bin/bash  \n\ncd some_dir  \n\n./configure --some-flags  \n\nmake  \n\nmake install\n</code></pre>\n\n<p>So in this case if the script can't change to the indicated directory then it would certainly not want to do a ./configure afterwards if it fails.</p>\n\n<p>Now I'm well aware that I could have an if check for each command (which I think is a hopeless solution), but is there a global setting to make the script exit if one of the commands fails?</p>\n    ","a":"\n<p>Use the <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin\"><code>set -e</code></a> builtin:</p>\n\n<pre><code>#!/bin/bash\nset -e\n# Any subsequent(*) commands which fail will cause the shell script to exit immediately\n</code></pre>\n\n<p>Alternatively, you can pass <code>-e</code> on the command line:</p>\n\n<pre><code>bash -e my_script.sh\n</code></pre>\n\n<p>You can also disable this behavior with <code>set +e</code>.</p>\n\n<p>(*) Note:</p>\n\n<blockquote>\n  <p>The shell does <em>not</em> exit if the command that fails is part of the\n  command list immediately following a <strong>while</strong> or <strong>until</strong> keyword, part of\n  the test in an <strong>if</strong> statement, part of a <strong>&amp;&amp;</strong> or <strong>||</strong> list, or if the\n  command's return value is being inverted via <strong>!</strong></p>\n</blockquote>\n\n<p>(from <code>man bash</code>)</p>\n    "},{"t":"How to return a string value from a bash function","l":"http://stackoverflow.com/questions/3236871/how-to-return-a-string-value-from-a-bash-function","q":"\n\n<p>I'd like to return a string from a bash function.</p>\n\n<p>I'll write the example in java to show what I'd like to do:</p>\n\n<pre>public String getSomeString() {\n  return \"tadaa\";\n}\n\nString variable = getSomeString();\n</pre>\n\n<p>The example below works in bash, but is there a better way to do this?</p>\n\n<pre>function getSomeString {\n   echo \"tadaa\"\n}\n\nVARIABLE=$(getSomeString)\n</pre>\n    ","a":"\n<p>There is no better way I know of. Bash knows only status codes (integers) and strings written to the stdout.</p>\n    "},{"t":"How do I send a file as an email attachment using Linux command line?","l":"http://stackoverflow.com/questions/17359/how-do-i-send-a-file-as-an-email-attachment-using-linux-command-line","q":"\n\n<p>I've created a script that runs every night on my Linux server that uses <code>mysqldump</code> to back up each of my MySQL databases to .sql files and packages them together as a compressed .tar file.  The next step I want to accomplish is to send that tar file through email to a remote email server for safekeeping.  I've been able to send the raw script in the body an email by piping the backup text file to <code>mailx</code> like so:</p>\n\n<pre><code>$ cat mysqldbbackup.sql | mailx backup@email.com\n</code></pre>\n\n<p><code>cat</code> echoes the backup file's text which is piped into the <code>mailx</code> program with the recipient's email address passed as an argument.</p>\n\n<p>While this accomplishes what I need, I think it could be one step better, <strong>Is there any way, using shell scripts or otherwise, to send the compressed .tar file to an outgoing email message as an <em>attachment</em>?</strong>  This would beat having to deal with very long email messages which contain header data and often have word-wrapping issues etc.</p>\n    ","a":"\n<p>None of the mutt ones worked for me.  It was thinking the email address was part of the attachemnt. Had to do:</p>\n\n<pre><code>echo \"This is the message body\" | mutt -a \"/path/to/file.to.attach\" -s \"subject of message\" -- recipient@domain.com\n</code></pre>\n    "},{"t":"How to compare strings in Bash script","l":"http://stackoverflow.com/questions/2237080/how-to-compare-strings-in-bash-script","q":"\n\n<p>I need to compare a variable to some string (and do something if they match).</p>\n    ","a":"\n<p>Try this:</p>\n\n<pre><code>if [ \"$x\" == \"valid\" ]; then\n  echo \"x has the value 'valid'\"\nfi\n</code></pre>\n\n<p>If you want to do something when they don't match, replace <code>==</code> with <code>!=</code>. You want the quotes around <code>$x</code>, because if <code>$x</code> is empty, you'll get <code>if [ == \"valid\" ]...</code> which is a syntax error.</p>\n    "},{"t":"How do I remove the file suffix and path portion from a path string in Bash?","l":"http://stackoverflow.com/questions/125281/how-do-i-remove-the-file-suffix-and-path-portion-from-a-path-string-in-bash","q":"\n\n<p>Given a string file path such as \"/foo/fizzbuzz.bar\", how would I use bash to extract just the \"fizzbuzz\" portion of said string?</p>\n    ","a":"\n<p>Here's how to do it with the # and % operators in Bash.</p>\n\n<pre><code>$ x=\"/foo/fizzbuzz.bar\"\n$ y=${x%.bar}\n$ echo ${y##*/}\nfizzbuzz\n</code></pre>\n\n<p><code>${x%.bar}</code> could also be <code>${x%.*}</code> to remove everything after a dot or <code>${x%%.*}</code> to remove everything after the first dot.</p>\n\n<p>Example:</p>\n\n<pre><code>$ x=\"/foo/fizzbuzz.bar.quux\"\n$ y=${x%.*}\n$ echo $y\n/foo/fizzbuzz.bar\n$ y=${x%%.*}\n$ echo $y\n/foo/fizzbuzz\n</code></pre>\n    "},{"t":"Print a file skipping X lines in Bash","l":"http://stackoverflow.com/questions/604864/print-a-file-skipping-x-lines-in-bash","q":"\n\n<p>I have a very long file which I want to print but skipping the first 1e6 lines for example. I look into the cat man page but I did not see any option to do this. I am looking for a command to do this or a simple bash program.</p>\n    ","a":"\n<p>you need tail.  </p>\n\n<pre><code>$ tail great-big-file.log\n&lt; Last 10 lines of great-big-file.log &gt;\n</code></pre>\n\n<p>if you really need to SKIP a particular number of lines, use </p>\n\n<pre><code>$ tail -n+&lt;First line to Print&gt; &lt;filename&gt;\n&lt; filename, excluding first so many lines. &gt;\n</code></pre>\n\n<p>That is, if you want to skip N lines, you start printing line N+1, </p>\n\n<p>If you want to just see the last so many lines, omit the \"+\":</p>\n\n<pre><code>$ tail -n&lt;Lines to show&gt; &lt;filename&gt;\n&lt; last so many lines of file. &gt;\n</code></pre>\n    "},{"t":"Pass ALL Arguments from Bash Script to Another Command","l":"http://stackoverflow.com/questions/3190818/pass-all-arguments-from-bash-script-to-another-command","q":"\n\n<p>What is the simplest way to grab all the given arguments for a bash script and pass them all into another command within the script? For example:</p>\n\n<p>Command Line:</p>\n\n<pre><code>./runProgram.sh [ARGS HERE]\n</code></pre>\n\n<p>Script:</p>\n\n<pre><code>#! /bin/bash\ncd bin/\njava com.myserver.Program [ARGS HERE]\n</code></pre>\n    ","a":"\n<p>For <em>bash</em> and other Bourne-like shells:</p>\n\n<pre><code>java com.myserver.Program \"$@\"\n</code></pre>\n    "},{"t":"Can I use Python as a bash replacement?","l":"http://stackoverflow.com/questions/209470/can-i-use-python-as-a-bash-replacement","q":"\n\n<p>I currently do my textfile manipulation through a bunch of badly remembered awk, sed, bash and a tiny bit of Perl.</p>\n\n<p>I've seen mentioned a few places that python is good for this kind of thing, I know a little and I would like to know more. Is python a good choice for this, and is there a good book or guide to learning how to use python to replace shell scripting, awk, sed and friends?</p>\n    ","a":"\n<p>Any shell has several sets of features.</p>\n\n<ul>\n<li><p>The Essential Linux/Unix commands.  All of these are available through the <a href=\"https://docs.python.org/3/library/subprocess.html\">subprocess</a> library.  This isn't always the best first choice for doing <em>all</em> external commands.  Look also at <a href=\"https://docs.python.org/3/library/shutil.html\">shutil</a> for some commands that are separate Linux commands, but you could probably implement directly in your Python scripts.  Another huge batch of Linux commands are in the <a href=\"https://docs.python.org/3/library/os.html\">os</a> library; you can do these more simply in Python.</p>\n\n<p>And -- bonus! -- more quickly.  Each separate Linux command in the shell (with a few exceptions) forks a subprocess.  By using Python <code>shutil</code> and <code>os</code> modules, you don't fork a subprocess.</p></li>\n<li><p>The shell environment features.  This includes stuff that sets a command's environment (current directory and environment variables and what-not).  You can easily manage this from Python directly.</p></li>\n<li><p>The shell programming features.  This is all the process status code checking, the various logic commands (if, while, for, etc.) the test command and all of it's relatives.  The function definition stuff.  This is all much, much easier in Python.  This is one of the huge victories in getting rid of bash and doing it in Python.</p></li>\n<li><p>Interaction features.  This includes command history and what-not.  You don't need this for writing shell scripts.  This is only for human interaction, and not for script-writing.</p></li>\n<li><p>The shell file management features.  This includes redirection and pipelines.  This is trickier.  Much of this can be done with subprocess.  But some things that are easy in the shell are unpleasant in Python.  Specifically stuff like <code>(a | b; c ) | something &gt;result</code>.  This runs two processes in parallel (with output of <code>a</code> as input to <code>b</code>), followed b a third process.  The output from that sequence is run in parallel with <code>something</code> and the output is collected into a file named <code>result</code>.  That's just complex to express in any other language.</p></li>\n</ul>\n\n<p>Specific programs (awk, sed, grep, etc.) can often be rewritten as Python modules.  Don't go overboard.  Replace what you need and evolve your \"grep\" module.  Don't start out writing a Python module that replaces \"grep\".</p>\n\n<p>The best thing is that you can do this in steps.</p>\n\n<ol>\n<li>Replace AWK and PERL with Python.  Leave everything else alone.</li>\n<li>Look at replacing GREP with Python.  This can be a bit more complex, but your version of GREP can be tailored to your processing needs.</li>\n<li>Look at replacing FIND with Python loops that use <code>os.walk</code>.  This is a big win because you don't spawn as many processes.</li>\n<li>Look at replacing common shell logic (loops, decisions, etc.) with Python scripts.</li>\n</ol>\n    "},{"t":"How to add a progress bar to a shell script?","l":"http://stackoverflow.com/questions/238073/how-to-add-a-progress-bar-to-a-shell-script","q":"\n\n<p>When scripting in bash or any other shell in *NIX, while running a command that will take more than a few seconds, a progress bar is needed.</p>\n\n<p>For example, copying a big file, opening a big tar file.</p>\n\n<p>What ways do you recommend to add progress bars to shell scripts?</p>\n    ","a":"\n<p>You can implement this by overwriting a line.  Use <code>\\r</code> to go back to the beginning of the line without writing <code>\\n</code> to the terminal.</p>\n\n<p>Write <code>\\n</code> when you're done to advance the line.</p>\n\n<p>Use <code>echo -ne</code> to:</p>\n\n<ol>\n<li>not print <code>\\n</code> and</li>\n<li>to recognize escape sequences like <code>\\r</code>.</li>\n</ol>\n\n<p>Here's a demo:</p>\n\n<pre><code>echo -ne '#####                     (33%)\\r'\nsleep 1\necho -ne '#############             (66%)\\r'\nsleep 1\necho -ne '#######################   (100%)\\r'\necho -ne '\\n'\n</code></pre>\n    "},{"t":"Bash script variable declaration - command not found","l":"http://stackoverflow.com/questions/2268104/bash-script-variable-declaration-command-not-found","q":"\n\n<p>This seems like such a simple question I'm embarrassed to ask it:</p>\n\n<p>test.sh</p>\n\n<pre><code>#!/bin/bash\nSTR = \"Hello World\"\necho $STR\n</code></pre>\n\n<p>when I run <em>sh test.sh</em> I get this:</p>\n\n<pre><code>test.sh: line 2: STR: command not found\n</code></pre>\n\n<p>What am I doing wrong?  I look at extremely basic/beginners bash scripting tutorials online and this is how they say to declare variables... So I'm not sure what I'm doing wrong.</p>\n\n<p>I'm on Ubuntu Server 9.10. And yes, bash is located at <code>/bin/bash</code>.</p>\n    ","a":"\n<p>You cannot have spaces around your '=' sign.  </p>\n\n<p>When you write:</p>\n\n<pre><code>STR = \"foo\"\n</code></pre>\n\n<p>bash tries to run a command named STR with 2 arguments (the strings '=' and 'foo')</p>\n\n<p>When you write:</p>\n\n<pre><code>STR =foo\n</code></pre>\n\n<p>bash tries to run a command named STR with 1 argument (the string '=foo')</p>\n\n<p>When you write:</p>\n\n<pre><code>STR= foo\n</code></pre>\n\n<p>bash tries to run the command foo with STR set to the empty string in its environment.</p>\n\n<p>I'm not sure if this helps to clarify or if it is mere obfuscation, but note that:</p>\n\n<ol>\n<li>the first command is exactly equivalent to: <code>STR \"=\" \"foo\"</code>,</li>\n<li>the second is the same as <code>STR \"=foo\"</code>,</li>\n<li>and the last is equivalent to <code>STR=\"\" foo</code>.</li>\n</ol>\n\n<p>The relevant section of the sh language spec, section 2.9.1 states:</p>\n\n<blockquote>\n  <p>A \"simple command\" is a sequence of optional variable assignments and redirections, in any sequence, optionally followed by words and redirections, terminated by a control operator.</p>\n</blockquote>\n\n<p>In that context, a <code>word</code> is the command that bash is going to run.  Any string  containing <code>=</code> (in any position other than at the beginning of the string) which is not a redirection is a variable assignment, while any string that is not a redirection and does not contain <code>=</code> is a command.  In <code>STR = \"foo\"</code>, <code>STR</code> is not a variable assignment.</p>\n    "},{"t":"ls command: how can I get a recursive full-path listing, one line per file?","l":"http://stackoverflow.com/questions/1767384/ls-command-how-can-i-get-a-recursive-full-path-listing-one-line-per-file","q":"\n\n<p>How can I get ls to spit out a flat list of recursive one-per-line paths?</p>\n\n<p>For example, I just want a flat listing of files with their full paths:</p>\n\n<pre><code>/home/dreftymac/.\n/home/dreftymac/foo.txt\n/home/dreftymac/bar.txt\n/home/dreftymac/stackoverflow\n/home/dreftymac/stackoverflow/alpha.txt\n/home/dreftymac/stackoverflow/bravo.txt\n/home/dreftymac/stackoverflow/charlie.txt\n</code></pre>\n\n<p><code>ls -a1</code> almost does what I need, but I do not want path fragments, I want full paths.</p>\n    ","a":"\n<p>@OP, if you really want to use ls, then format its output using awk</p>\n\n<pre><code>ls -R /path | awk '\n/:$/&amp;&amp;f{s=$0;f=0}\n/:$/&amp;&amp;!f{sub(/:$/,\"\");s=$0;f=1;next}\nNF&amp;&amp;f{ print s\"/\"$0 }'\n</code></pre>\n    "},{"t":"Git/Bash is extremely slow in Windows 7 x64","l":"http://stackoverflow.com/questions/4485059/git-bash-is-extremely-slow-in-windows-7-x64","q":"\n\n<p>I've been using Git on both Windows and Ubuntu during the development of a small project, frequently flipping back and forth between the two.  The issue I'm having is that Git/Bash consistently become slow.  When I say slow, I mean that running <code>cd</code> takes anywhere from 8-25 seconds, running <code>git</code> commands take from 5-20 seconds, and <code>ls</code> can take up to 30 seconds sometimes.  Needless to say, this is not fun, not to mention unproductive.  I know Git is slower on Windows, but this is ridiculous.</p>\n\n<p>The one solution which has worked--temporarily--for me has been to disable my network connection (as suggested in <a href=\"http://stackoverflow.com/questions/2835775/msysgit-bash-is-horrendously-slow-in-windows-7\">this answer</a>), start git, and then reconnect.  Sometimes it continues to run quickly for days after doing that, but the performance always degrades eventually.  I've trawled through the msysgit discussion group, SO, msysgit issue list, etc. on and off for weeks, but I haven't been able to turn up solutions which work.</p>\n\n<p>So far, I've tried:</p>\n\n<ul>\n<li>Adding git &amp; project folders to virus scanner's exclusion list</li>\n<li>Disabling my virus scanner completely (Kaspersky IS 2011)</li>\n<li>Ensuring that Outlook is not running (Outlook 2007)</li>\n<li>Shutting down all other applications</li>\n<li>Running git as administrator</li>\n<li>Disabling network connection, starting git, and keeping connection disabled</li>\n<li>Disabling network connection, starting git, re-enabling connection (works only occasionally)</li>\n<li>Running git gc</li>\n<li>And combinations of the above</li>\n</ul>\n\n<p>I did read that a couple people had success disabling bash completion, but ideally I'd like to keep that active.  The version of msysgit is 1.7.3.1-preview20101002 &amp; the OS is Windows 7 x64.  Running the same things on Linux is, predictably, lightning fast.  I would use Linux exclusively, but I need to run stuff in Windows, too (certain apps, testing, etc.).</p>\n\n<p>Has anyone encountered a similar issue?  If so, what was the underlying problem and what was the solution (if any)?</p>\n\n<p>Edit: This extends beyond just the git repositories, but just for reference, the repos I've been using git with have been pretty small: ~4-50 files max.</p>\n    ","a":"\n<p>It appears that completely uninstalling Git, restarting (the classic Windows cure), and reinstalling Git was the cure.  I also wiped out all bash config files which were left over (they were manually created).  Everything is fast again.</p>\n\n<p>If for some reason reinstalling isn't possible (or desirable), then I would definitely try changing the PS1 variable referenced in Chris Dolan's answer; it resulted in significant speedups in certain operations.</p>\n    "},{"t":"Can a shell script set environment variables of the calling shell?","l":"http://stackoverflow.com/questions/496702/can-a-shell-script-set-environment-variables-of-the-calling-shell","q":"\n\n<p>I'm trying to write a shell script that, when run, will set some environment variables that will stay set in the caller's shell.</p>\n\n<pre><code>setenv FOO foo\n</code></pre>\n\n<p>in csh/tcsh, or</p>\n\n<pre><code>export FOO=foo\n</code></pre>\n\n<p>in sh/bash only set it during the script's execution.</p>\n\n<p>I already know that </p>\n\n<pre><code>source myscript\n</code></pre>\n\n<p>will run the commands of the script rather than launching a new shell, and that can result in setting the \"caller's\" environment.</p>\n\n<p>But here's the rub:</p>\n\n<p>I want this script to be callable from either bash or csh.  In other words, I want users of either shell to be able to run my script and have their shell's environment changed.  So 'source' won't work for me, since a user running csh can't source a bash script, and a user running bash can't source a csh script.</p>\n\n<p>Is there any reasonable solution that doesn't involve having to write and maintain TWO versions on the script?</p>\n    ","a":"\n<p>Your shell process has a copy of the parent's environment and no access to the parent process's environment whatsoever. When your shell process terminates any changes you've made to its environment are lost. Sourcing a script file is the most commonly used method for configuring a shell environment, you may just want to bite the bullet and maintain one for each of the two flavors of shell.</p>\n    "},{"t":"Timeout a command in bash without unnecessary delay","l":"http://stackoverflow.com/questions/687948/timeout-a-command-in-bash-without-unnecessary-delay","q":"\n\n<p><a href=\"http://stackoverflow.com/questions/601543#637753\">This answer</a> to <a href=\"http://stackoverflow.com/questions/601543\">Command line command to auto-kill a command after a certain amount of time</a> </p>\n\n<p>proposes a 1-line method to timeout a long-running command from the bash command line:</p>\n\n<pre><code>( /path/to/slow command with options ) &amp; sleep 5 ; kill $!\n</code></pre>\n\n<p>But it's possible that a given \"long-running\" command may finish earlier than the timeout. (Let's call it a \"typically-long-running-but-sometimes-fast\" command, or <em>tlrbsf</em> for fun.)</p>\n\n<p>So this nifty 1-liner approach has a couple of problems. First, the <code>sleep</code> isn't conditional, so that sets an undesirable lower bound on the time taken for the sequence to finish. Consider 30s or 2m or even 5m for the sleep, when the <em>tlrbsf</em> command finishes in 2 seconds — highly undesirable. Second, the <code>kill</code> is unconditional, so this sequence will attempt to kill a non-running process and whine about it.</p>\n\n<p>So...</p>\n\n<p><strong>Is there a way</strong> to timeout a typically-long-running-but-sometimes-fast (<em>\"tlrbsf\"</em>) command that</p>\n\n<ul>\n<li>has a bash implementation (the other question already has Perl and C answers)</li>\n<li>will terminate at the earlier of the two: <em>tlrbsf</em> program termination, or timeout elapsed</li>\n<li>will not kill non-existing/non-running processes (or, optionally: will not <em>complain</em> about a bad kill)</li>\n<li>doesn't have to be a 1-liner</li>\n<li>can run under Cygwin or Linux</li>\n</ul>\n\n<p>... and, for bonus points, runs the <em>tlrbsf</em> command in the foreground and any 'sleep' or extra process in the background, such that the stdin/stdout/stderr of the <em>tlrbsf</em> command can be redirected, same as if it had been run directly?</p>\n\n<p>If so, please share your code. If not, please explain why.</p>\n\n<p>I have spent awhile trying to hack the aforementioned example but I'm hitting the limit of my bash skills.</p>\n    ","a":"\n<p>I think this is precisely what you are asking for:</p>\n\n<p><a href=\"http://www.bashcookbook.com/bashinfo/source/bash-4.0/examples/scripts/timeout3\">http://www.bashcookbook.com/bashinfo/source/bash-4.0/examples/scripts/timeout3</a></p>\n\n<pre><code>#!/bin/bash\n#\n# The Bash shell script executes a command with a time-out.\n# Upon time-out expiration SIGTERM (15) is sent to the process. If the signal\n# is blocked, then the subsequent SIGKILL (9) terminates it.\n#\n# Based on the Bash documentation example.\n\n# Hello Chet,\n# please find attached a \"little easier\"  :-)  to comprehend\n# time-out example.  If you find it suitable, feel free to include\n# anywhere: the very same logic as in the original examples/scripts, a\n# little more transparent implementation to my taste.\n#\n# Dmitry V Golovashkin &lt;Dmitry.Golovashkin@sas.com&gt;\n\nscriptName=\"${0##*/}\"\n\ndeclare -i DEFAULT_TIMEOUT=9\ndeclare -i DEFAULT_INTERVAL=1\ndeclare -i DEFAULT_DELAY=1\n\n# Timeout.\ndeclare -i timeout=DEFAULT_TIMEOUT\n# Interval between checks if the process is still alive.\ndeclare -i interval=DEFAULT_INTERVAL\n# Delay between posting the SIGTERM signal and destroying the process by SIGKILL.\ndeclare -i delay=DEFAULT_DELAY\n\nfunction printUsage() {\n    cat &lt;&lt;EOF\n\nSynopsis\n    $scriptName [-t timeout] [-i interval] [-d delay] command\n    Execute a command with a time-out.\n    Upon time-out expiration SIGTERM (15) is sent to the process. If SIGTERM\n    signal is blocked, then the subsequent SIGKILL (9) terminates it.\n\n    -t timeout\n        Number of seconds to wait for command completion.\n        Default value: $DEFAULT_TIMEOUT seconds.\n\n    -i interval\n        Interval between checks if the process is still alive.\n        Positive integer, default value: $DEFAULT_INTERVAL seconds.\n\n    -d delay\n        Delay between posting the SIGTERM signal and destroying the\n        process by SIGKILL. Default value: $DEFAULT_DELAY seconds.\n\nAs of today, Bash does not support floating point arithmetic (sleep does),\ntherefore all delay/time values must be integers.\nEOF\n}\n\n# Options.\nwhile getopts \":t:i:d:\" option; do\n    case \"$option\" in\n        t) timeout=$OPTARG ;;\n        i) interval=$OPTARG ;;\n        d) delay=$OPTARG ;;\n        *) printUsage; exit 1 ;;\n    esac\ndone\nshift $((OPTIND - 1))\n\n# $# should be at least 1 (the command to execute), however it may be strictly\n# greater than 1 if the command itself has options.\nif (($# == 0 || interval &lt;= 0)); then\n    printUsage\n    exit 1\nfi\n\n# kill -0 pid   Exit code indicates if a signal may be sent to $pid process.\n(\n    ((t = timeout))\n\n    while ((t &gt; 0)); do\n        sleep $interval\n        kill -0 $$ || exit 0\n        ((t -= interval))\n    done\n\n    # Be nice, post SIGTERM first.\n    # The 'exit 0' below will be executed if any preceeding command fails.\n    kill -s SIGTERM $$ &amp;&amp; kill -0 $$ || exit 0\n    sleep $delay\n    kill -s SIGKILL $$\n) 2&gt; /dev/null &amp;\n\nexec \"$@\"\n</code></pre>\n    "},{"t":"How to define hash tables in bash?","l":"http://stackoverflow.com/questions/1494178/how-to-define-hash-tables-in-bash","q":"\n\n<p>What I want to is the equivalent of <a href=\"http://diveintopython.net/getting_to_know_python/dictionaries.html\">Python dictionaries</a> but in bash (and hence, should work across OSX, Ubuntu and other major Linux distributions).</p>\n    ","a":"\n<h1>Bash 4</h1>\n\n<p>Bash 4 natively supports this feature.  Make sure your script's hashbang is <code>#!/usr/bin/env bash</code> or <code>#!/bin/bash</code> or anything else that references <code>bash</code> and not <code>sh</code>.  Make sure you're executing your script, and not doing something silly like <code>sh script</code> which would cause your <code>bash</code> hashbang to be ignored.  This is basic stuff, but so many keep failing at it, hence the re-iteration.</p>\n\n<p>You declare an associative array by doing:</p>\n\n<pre><code>declare -A animals\n</code></pre>\n\n<p>You can fill it up with elements using the normal array assignment operator:</p>\n\n<pre><code>animals=( [\"moo\"]=\"cow\" [\"woof\"]=\"dog\")\n</code></pre>\n\n<p>Or merge them:</p>\n\n<pre><code>declare -A animals=( [\"moo\"]=\"cow\" [\"woof\"]=\"dog\")\n</code></pre>\n\n<p>Then use them just like normal arrays.  <code>\"${animals[@]}\"</code> expands the values, <code>\"${!animals[@]}\"</code> (notice the <code>!</code>) expands the keys.  Don't forget to quote them:</p>\n\n<pre><code>echo \"${animals[\"moo\"]}\"\nfor sound in \"${!animals[@]}\"; do echo \"$sound - ${animals[\"$sound\"]}\"; done\n</code></pre>\n\n<h1>Bash 3</h1>\n\n<p>Before bash 4, you don't have associative arrays.  <strong>Do not use <code>eval</code> to emulate them</strong>.  You must avoid eval like the plague, because it <em>is</em> the plague of shell scripting.  The most important reason is that you don't want to treat your data as executable code (there are many other reasons too).</p>\n\n<p><em>First and foremost</em>: Just consider upgrading to bash 4.  Seriously.  <em>The future is now</em>, stop living in the past and <strong>suffering from it</strong> by forcing stupid broken and ugly hacks on your code and every poor soul stuck maintaining it.</p>\n\n<p>If you have some silly excuse why you \"<em>can't upgrade</em>\", <code>declare</code> is a far safer option.  It does not evaluate data as bash code like <code>eval</code> does, and as such it does not allow arbitrary code injection quite so easily.</p>\n\n<p>Let's prepare the answer by introducing the concepts:</p>\n\n<p>First, indirection (seriously; never use this unless you're mentally ill or have some other bad excuse for writing hacks).</p>\n\n<pre><code>$ animals_moo=cow; sound=moo; i=\"animals_$sound\"; echo \"${!i}\"\ncow\n</code></pre>\n\n<p>Secondly, <code>declare</code>:</p>\n\n<pre><code>$ sound=moo; animal=cow; declare \"animals_$sound=$animal\"; echo \"$animals_moo\"\ncow\n</code></pre>\n\n<p>Bring them together:</p>\n\n<pre><code># Set a value:\ndeclare \"array_$index=$value\"\n\n# Get a value:\narrayGet() { \n    local array=$1 index=$2\n    local i=\"${array}_$index\"\n    printf '%s' \"${!i}\"\n}\n</code></pre>\n\n<p>Let's use it:</p>\n\n<pre><code>$ sound=moo\n$ animal=cow\n$ declare \"animals_$sound=$animal\"\n$ arrayGet animals \"$sound\"\ncow\n</code></pre>\n\n<p>Note: <code>declare</code> cannot be put in a function.  Any use of <code>declare</code> inside a bash function turns the variable it creates <em>local</em> to the scope of that function, meaning we can't access or modify global arrays with it. (In bash 4 you can use declare -g to declare global variables - but in bash 4, you should be using associative arrays in the first place, not this hack.)</p>\n\n<h1>Summary</h1>\n\n<p>Upgrade to bash 4 and use <code>declare -A</code>.  If you can't, consider switching entirely to <code>awk</code> before doing ugly hacks as described above.  And definitely stay the heck away from <code>eval</code> hackery.</p>\n    "},{"t":"checking number of arguments bash script","l":"http://stackoverflow.com/questions/18568706/checking-number-of-arguments-bash-script","q":"\n\n<p>I'm trying to print an error message if my script gets too many (or too few) arguments.</p>\n\n<p>I tried the following code:</p>\n\n<pre><code>#!/bin/bash\necho Script name: $0\necho $# arguments \nif [$# -ne 1]; \n    then echo \"illegal number of parameters\"\nfi\n</code></pre>\n\n<p>For some unknown reason I've got the following error:</p>\n\n<pre><code>test: line 4: [2: command not found\n</code></pre>\n\n<p>What am I doing wrong? (I'm totally new to bash)</p>\n    ","a":"\n<p>Just like any other simple command, <code>[ ... ]</code> or <code>test</code> requires spaces between its arguments.</p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>if [ \"$#\" -ne 1 ]; then\n    echo \"Illegal number of parameters\"\nfi\n</code></pre>\n\n<p>Or</p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>if test \"$#\" -ne 1; then\n    echo \"Illegal number of parameters\"\nfi\n</code></pre>\n\n<p>When in Bash, prefer using <code>[[ ]]</code> instead as it doesn't do word splitting and pathname expansion to its variables that quoting may not be necessary unless it's part of an expression.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[[ $# -ne 1 ]]\n</code></pre>\n\n<p>It also has some other features like unquoted condition grouping, pattern matching (extended pattern matching with <code>extglob</code>) and regex matching.</p>\n\n<p>The following example checks if arguments are valid. It allows a single argument or two.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[[ ($# -eq 1 || ($# -eq 2 &amp;&amp; $2 == &lt;glob pattern&gt;)) &amp;&amp; $1 =~ &lt;regex pattern&gt; ]]\n</code></pre>\n\n<p>For pure arithmetic expressions, using <code>(( ))</code> to some may still be better, but they are still possible in <code>[[ ]]</code> with its arithmetic operators like <code>-eq</code>, <code>-ne</code>, <code>-lt</code>, <code>-le</code>, <code>-gt</code>, or <code>-ge</code> by placing the expression as a single string argument:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>A=1\n[[ 'A + 1' -eq 2 ]] &amp;&amp; echo true  ## Prints true.\n</code></pre>\n\n<p>That should be helpful if you would need to combine it with other features of <code>[[ ]]</code> as well.</p>\n\n<h3>References:</h3>\n\n<ul>\n<li><a href=\"http://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions\">Bash Conditional Expressions</a></li>\n<li><a href=\"http://www.gnu.org/software/bash/manual/bash.html#Conditional-Constructs\">Conditional Constructs</a></li>\n<li><a href=\"http://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching\">Pattern Matching</a></li>\n<li><a href=\"http://www.gnu.org/software/bash/manual/bash.html#Word-Splitting\">Word Splitting</a></li>\n<li><a href=\"http://www.gnu.org/software/bash/manual/bash.html#Filename-Expansion\">Filename Expansion (prev. Pathname Expansion)</a></li>\n</ul>\n    "},{"t":"Detect the OS from a Bash script","l":"http://stackoverflow.com/questions/394230/detect-the-os-from-a-bash-script","q":"\n\n<p>I would like to keep my <code>.bashrc</code> and <code>.bash_login</code> files in version control so that I can use them between all the computers I use. The problem is I have some OS specific aliases so I was looking for a way to determine if the script is running on Mac&nbsp;OS&nbsp;X, Linux or <a href=\"http://en.wikipedia.org/wiki/Cygwin\">Cygwin</a>.</p>\n\n<p>What is the proper way to detect the operating system in a <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> script?</p>\n    ","a":"\n<p>For my .bashrc, I use the following code:</p>\n\n<pre><code>platform='unknown'\nunamestr=`uname`\nif [[ \"$unamestr\" == 'Linux' ]]; then\n   platform='linux'\nelif [[ \"$unamestr\" == 'FreeBSD' ]]; then\n   platform='freebsd'\nfi\n</code></pre>\n\n<p>Then I do somethings like:</p>\n\n<pre><code>if [[ $platform == 'linux' ]]; then\n   alias ls='ls --color=auto'\nelif [[ $platform == 'freebsd' ]]; then\n   alias ls='ls -G'\nfi\n</code></pre>\n\n<p>It's ugly, but it works (you may use 'case' instead of 'if' if you prefer).</p>\n    "},{"t":"Given two directory trees, how can I find out which files differ?","l":"http://stackoverflow.com/questions/4997693/given-two-directory-trees-how-can-i-find-out-which-files-differ","q":"\n\n<p>If I want find the differences between two directory trees, I usually just execute:</p>\n\n<pre><code>diff -r dir1/ dir2/\n</code></pre>\n\n<p>This outputs exactly what the differences are between corresponding files.  I'm interested in just getting a list of corresponding files whose content differs.  I assumed that this would simply be a matter of passing a command line option to <code>diff</code>, but I couldn't find anything on the man page.</p>\n\n<p>Any suggestions?</p>\n    ","a":"\n<p>You said Linux, so you luck out (at least it should be available, not sure when it was added):</p>\n\n<pre><code>diff --brief -r dir1/ dir2/\n</code></pre>\n\n<p>Should do what you need.</p>\n    "},{"t":"Worth switching to zsh for casual use? [closed]","l":"http://stackoverflow.com/questions/43321/worth-switching-to-zsh-for-casual-use","q":"\n\n<p>The default shell in Mac OS X is <code>bash</code>, which I'm generally happy to be using. I just take it for granted. It would be really nice if it auto-completed <em>more stuff</em>, though, and I've heard good things about <code>zsh</code> in this regard. But I don't really have the inclination to spend hours fiddling with settings to improve my command line usage by a tiny amount, since my life on the command line isn't that bad. </p>\n\n<p>(As I understand it, <code>bash</code> can also be configured to auto-complete more cleverly. It's the configuring I'm not all that keen on.)</p>\n\n<p>Will switching to <code>zsh</code>, even in a small number cases, make my life easier? Or is it only a better shell if you put in the time to learn <em>why</em> it's better? (Examples would be nice, too <code>:)</code> )</p>\n\n<p></p><hr><p></p>\n\n<p>@<a href=\"http://stackoverflow.com/questions/43321/worth-switching-to-zsh-for-casual-use#43340\" rel=\"nofollow\">Rodney Amato</a>\n&amp;\n@<a href=\"http://stackoverflow.com/questions/43321/worth-switching-to-zsh-for-casual-use#43338\" rel=\"nofollow\">Vulcan Eager</a>\ngive two good reasons to respectively stick to <code>bash</code> and switch to <code>zsh</code>. Looks like I'll have to investigate both! Oh well <code>:)</code></p>\n\n<p>Is there anyone with an opinion from both sides of the argument?</p>\n    ","a":"\n<p>For casual use you are probably better off sticking with bash and just installing bash completion. </p>\n\n<p>Installing it is pretty easy, grab the bash-completion-20060301.tar.gz from <a href=\"http://www.caliban.org/bash/index.shtml#completion\">http://www.caliban.org/bash/index.shtml#completion</a> and extract it with </p>\n\n<pre><code>tar -xzvf bash-completion-20060301.tar.gz\n</code></pre>\n\n<p>then copy the bash_completion/bash_completion file to /etc with </p>\n\n<pre><code>sudo cp bash_completion/bash_completion /etc\n</code></pre>\n\n<p>which will prompt you for your password. You probably will want to make a /etc/bash_completion.d directory for any additional completion scripts (for instance I have the git completion script in there).</p>\n\n<p>Once this is done the last step is to make sure the .bash_profile file in your home directory has </p>\n\n<pre><code>if [ -f /etc/bash_completion ]; then\n     . /etc/bash_completion \nfi\n</code></pre>\n\n<p>in it to load the completion file when you login. </p>\n\n<p>To test it just open a new terminal, and try completing on cvs and it should show you the cvs options in the list of completions.</p>\n    "},{"t":"How to join multiple lines of file names into one with custom delimiter?","l":"http://stackoverflow.com/questions/2764051/how-to-join-multiple-lines-of-file-names-into-one-with-custom-delimiter","q":"\n\n<p>I would like to join the result of <code>ls -1</code> into one line and delimit it with whatever i want.</p>\n\n<p>Are there any standard Linux commands I can use to achieve this?</p>\n    ","a":"\n<blockquote>\n  <p><strong>EDIT</strong>: Simply \"<strong>ls -m</strong>\" If you want your delimiter to be a comma</p>\n</blockquote>\n\n<p>Ah, the power and simplicity !</p>\n\n<pre><code>ls -1 | tr \"\\\\n\" \",\"\n</code></pre>\n\n<p>Change the comma \"<strong>,</strong>\" to whatever you want.</p>\n    "},{"t":"Exclude .svn directories from grep","l":"http://stackoverflow.com/questions/1491514/exclude-svn-directories-from-grep","q":"\n\n<p>When I grep my Subversion working copy directory, the results include a lot of files from the .svn directories. Is it possible to recursively grep a directory, but exclude all results from  .svn directories?</p>\n    ","a":"\n<p>If you have GNU Grep, it should work like this:</p>\n\n<pre><code>grep --exclude-dir=\".svn\"\n</code></pre>\n\n<p>If happen to be on a Unix System without GNU Grep, try the following:</p>\n\n<pre><code>grep -R \"whatever you like\" *|grep -v \"\\.svn/*\" \n</code></pre>\n    "},{"t":"How can I add numbers in a bash script","l":"http://stackoverflow.com/questions/6348902/how-can-i-add-numbers-in-a-bash-script","q":"\n\n<p>I have this bash script and I had a problem in line 16.\nHow can I take the previous result of line 15 and add\nit to the variable in line 16?</p>\n\n<pre><code>#!/bin/bash\n\nnum=0\nmetab=0\n\nfor ((i=1; i&lt;=2; i++)); do      \n    for j in `ls output-$i-*`; do\n        echo \"$j\"\n\n        metab=$(cat $j|grep EndBuffer|awk '{sum+=$2} END { print sum/120}') (line15)\n        num= $num + $metab   (line16)\n    done\n    echo \"$num\"\n done\n</code></pre>\n    ","a":"\n<p><em>For integers</em>:</p>\n\n<ul>\n<li><p>Use <a href=\"http://tldp.org/LDP/abs/html/arithexp.html\">arithmetic expansion</a>: <code>$((EXPR))</code></p>\n\n<pre><code>num=$((num1 + num2))\nnum=$(($num1 + $num2))       # also works\nnum=$((num1 + 2 + 3))        # ...\nnum=$[num1+num2]             # old, deprecated arithmetic expression syntax\n</code></pre></li>\n<li><p>Using the external <code>expr</code> utility. Note that this is only needed for really old systems.</p>\n\n<pre><code>num=`expr $num1 + $num2`     # whitespace for expr is important\n</code></pre></li>\n</ul>\n\n<hr>\n\n<p><em>For floating point</em>:</p>\n\n<p>Bash doesn't directly support this, but there's a couple of external tools you can use:</p>\n\n<pre><code>num=$(awk \"BEGIN {print $num1+$num2; exit}\")\nnum=$(python -c \"print $num1+$num2\")\nnum=$(perl -e \"print $num1+$num2\")\nnum=$(echo $num1 + $num2 | bc)   # whitespace for echo is important\n</code></pre>\n\n<p>You can also use scientific notation (e.g.: <code>2.5e+2</code>)</p>\n\n<hr>\n\n<p><em>Common pitfalls</em>:</p>\n\n<ul>\n<li><p>When setting a variable, you cannot have whitespace on either side of <code>=</code>, otherwise it will force the shell to interpret the first word as the name of the application to run (eg: <code>num=</code> or <code>num</code>)</p>\n\n<p><strike><code>num= 1</code></strike> <strike><code>num =2</code></strike></p></li>\n<li><p><code>bc</code> and <code>expr</code> expect each number and operator as a separate argument, so whitespace is important. They cannot process arguments like <code>3+</code> <code>+4</code>.</p>\n\n<p><strike><code>num=`expr $num1+ $num2`</code></strike></p></li>\n</ul>\n    "},{"t":"How do I rename the extension for a batch of files?","l":"http://stackoverflow.com/questions/1224766/how-do-i-rename-the-extension-for-a-batch-of-files","q":"\n\n<p>In a directory, I have a bunch of <code>*.html</code> files.</p>\n\n<p>I'd like to rename them all to <code>*.txt</code></p>\n\n<p>I use the bash shell.</p>\n    ","a":"\n<p>The following would do and does not require the system to have the <code>rename</code> program (although you would most often have this on a system):</p>\n\n<pre><code>for file in *.html; do\n    mv \"$file\" \"`basename $file .html`.txt\"\ndone\n</code></pre>\n\n<p><em>EDIT:</em> As pointed out in the comments, this does not work for filenames with spaces in them without proper quoting (now added above). When working purely on your own files that you know do not have spaces in the filenames this will work but whenever you write something that may be reused at a later time, do not skip proper quoting. </p>\n\n<p>For an better solution (with only bash functionality, as opposed to external calls), see <a href=\"http://stackoverflow.com/questions/1224766/bash-rename-files/1225236#1225236\">one of the other answers</a>.</p>\n    "},{"t":"Colorized grep — viewing the entire file with highlighted matches","l":"http://stackoverflow.com/questions/981601/colorized-grep-viewing-the-entire-file-with-highlighted-matches","q":"\n\n<p>I find <code>grep</code>'s <code>--color=always</code> flag to be tremendously useful. However, grep only prints lines with matches (unless you ask for context lines). Given that each line it prints has a match, the highlighting doesn't add as much capability as it could.</p>\n\n<p>I'd really like to <code>cat</code> a file and see the entire file with the pattern matches highlighted.</p>\n\n<p>Is there some way I can tell grep to print every line being read regardless of whether there's a match? I know I could write a script to run grep on every line of a file, but I was curious whether this was possible with standard <code>grep</code>.</p>\n    ","a":"\n<pre><code>egrep --color 'pattern|$' file\n</code></pre>\n\n<p>or if you insist on using grep</p>\n\n<pre><code>grep --color -E 'pattern|$' file\n</code></pre>\n    "},{"t":"Getting ssh to execute a command in the background on target machine","l":"http://stackoverflow.com/questions/29142/getting-ssh-to-execute-a-command-in-the-background-on-target-machine","q":"\n\n<p>This is a follow-on question to the <a href=\"http://stackoverflow.com/questions/29061/how-do-you-use-ssh-in-a-shell-script\">How do you use ssh in a shell script?</a> question.  If I want to execute a command on the remote machine that runs in the background on that machine, how do I get the ssh command to return?  When I try to just include the ampersand (&amp;) at the end of the command it just hangs.  The exact form of the command looks like this:</p>\n\n<pre><code>ssh user@target \"cd /some/directory; program-to-execute &amp;\"\n</code></pre>\n\n<p>Any ideas?  One thing to note is that logins to the the target machine always produce a text banner and I have <strong>SSH</strong> keys set up so no password is required.</p>\n    ","a":"\n<p>I had this problem in a program I wrote a year ago -- turns out the answer is rather complicated. You'll need to use nohup as well as output redirection, as explained in the wikipedia artcle on <a href=\"http://en.wikipedia.org/wiki/Nohup\">nohup</a>, copied here for your convenience. </p>\n\n<blockquote>\n  <p>Nohuping backgrounded jobs is for\n  example useful when logged in via SSH,\n  since backgrounded jobs can cause the\n  shell to hang on logout due to a race\n  condition [2]. This problem can also\n  be overcome by redirecting all three\n  I/O streams:</p>\n\n<pre><code>nohup myprogram &gt; foo.out 2&gt; foo.err &lt; /dev/null &amp;\n</code></pre>\n</blockquote>\n    "},{"t":"In a bash script, how can I exit the entire script if a certain condition occurs?","l":"http://stackoverflow.com/questions/1378274/in-a-bash-script-how-can-i-exit-the-entire-script-if-a-certain-condition-occurs","q":"\n\n<p>I'm writing a script in Bash to test some code. However, it seems silly to run the tests if compiling the code fails in the first place, in which case I'll just abort the tests.</p>\n\n<p>Is there a way I can do this without wrapping the entire script inside of a while loop and using breaks? Something like a <strong>dun dun dun</strong> goto?</p>\n    ","a":"\n<p>Try this statement:</p>\n\n<pre><code>exit 0\n</code></pre>\n\n<p>Replace 0 with appropriate error codes. See also <a href=\"http://www.tldp.org/LDP/abs/html/exitcodes.html\">Exit Codes With Special Meanings</a>.</p>\n    "},{"t":"Get program execution time in the shell","l":"http://stackoverflow.com/questions/385408/get-program-execution-time-in-the-shell","q":"\n\n<p>I want to execute something in a linux shell under a few different conditions, and be able to output the execution time of each execution.</p>\n\n<p>I know I could write a perl or python script that would do this, but is there a way I can do it in the shell? (which happens to be bash)</p>\n    ","a":"\n<p>Use the built-in time command:</p>\n\n<pre>$ help time\n\ntime: time [-p] PIPELINE\n    Execute PIPELINE and print a summary of the real time, user CPU time,\n    and system CPU time spent executing PIPELINE when it terminates.\n    The return status is the return status of PIPELINE.  The `-p' option\n    prints the timing summary in a slightly different format.  This uses\n    the value of the TIMEFORMAT variable as the output format.\ntimes: times\n    Print the accumulated user and system times for processes run from\n    the shell.\n</pre>\n\n<p>Example:</p>\n\n<pre><code>$ time sleep 2\n</code></pre>\n\n<pre>real    0m2.009s\nuser    0m0.000s\nsys     0m0.004s\n</pre>\n    "},{"t":"Bash script plugin for Eclipse?","l":"http://stackoverflow.com/questions/1356827/bash-script-plugin-for-eclipse","q":"\n\n<p>Are there any decent <code>bash</code> plug-ins for Eclipse?  My only requirement is syntax highlighting.  I've googled about but did not see anything that looked like <em>\"the\"</em> <code>bash</code> plug-in.  </p>\n    ","a":"\n<p><a href=\"http://sourceforge.net/projects/shelled/\">ShellEd</a> looks promising, does syntax highlighting, and has positive reviews, although I've not tried it myself. It was <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=470792\">approved</a> for distro inclusion by Redhat. There's a little more info on the <a href=\"http://marketplace.eclipse.org/content/shelled\">ShellEd plugin page</a> on the Eclipse site, and <a href=\"http://sourceforge.net/apps/trac/shelled/wiki/Documentation/InstallGuide\">installation instructions</a> on their wiki.</p>\n\n<p>Note that if you're not running an up-to-date version of Eclipse (as of this writing, Juno) you'll need to use an older version, for instance 2.0.1 is compatible with Indigo.</p>\n    "},{"t":"Split string into an array in Bash","l":"http://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash","q":"\n\n<p>In a Bash script I would like to split a line into pieces and put them into an array.</p>\n\n<p>The line:</p>\n\n<pre><code>Paris, France, Europe\n</code></pre>\n\n<p>I would like to have them in an array like this:</p>\n\n<pre><code>array[0] = Paris\narray[1] = France\narray[2] = Europe\n</code></pre>\n\n<p>I would like to use simple code, the command's speed doesn't matter. How can I do it?</p>\n    ","a":"\n<pre><code>IFS=', ' read -a array &lt;&lt;&lt; \"$string\"\n</code></pre>\n\n<p>To access an individual element:</p>\n\n<pre><code>echo \"${array[0]}\"\n</code></pre>\n\n<p>To iterate over the elements:</p>\n\n<pre><code>for element in \"${array[@]}\"\ndo\n    echo \"$element\"\ndone\n</code></pre>\n\n<p>To get both the index and the value:</p>\n\n<pre><code>for index in \"${!array[@]}\"\ndo\n    echo \"$index ${array[index]}\"\ndone\n</code></pre>\n\n<p>The last example is useful because Bash arrays are sparse. In other words, you can delete an element or add an element and then the indices are not contiguous.</p>\n\n<pre><code>unset \"array[1]\"\narray[42]=Earth\n</code></pre>\n\n<p>To get the number of elements in an array:</p>\n\n<pre><code>echo \"${#array[@]}\"\n</code></pre>\n\n<p>As mentioned above, arrays can be sparse so you shouldn't use the length to get the last element. Here's how you can in Bash 4.2 and later:</p>\n\n<pre><code>echo \"${array[-1]}\"\n</code></pre>\n\n<p>in any version of Bash (from somewhere after 2.05b):</p>\n\n<pre><code>echo \"$array[@]: -1:1}\n</code></pre>\n\n<p>Larger negative offsets select farther from the end of the array. Note the space before the minus sign in the older form. It is required.</p>\n    "},{"t":"How to permanently set $PATH on Linux?","l":"http://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux","q":"\n\n<p>I'm trying to add a directory to my path so it will always be in my Linux path. I've tried:</p>\n\n<pre><code>export PATH=$PATH:/path/to/dir\n</code></pre>\n\n<p>This works, however each time I exit the terminal and start a new terminal instance, this path is lost, and I need to run the export command again.</p>\n\n<p>How can I do it so this will be set permanently?</p>\n    ","a":"\n<p><strong>You need to add it to your <code>~/.profile</code> file.</strong></p>\n\n<pre><code>export PATH=$PATH:/path/to/dir\n</code></pre>\n\n<p>Depending on what you're doing, you also may want to symlink to binaries:</p>\n\n<pre><code>cd /usr/bin\nsudo ln -s /path/to/binary binary-name\n</code></pre>\n    "},{"t":"Bash: How _best_ to include other scripts?","l":"http://stackoverflow.com/questions/192292/bash-how-best-to-include-other-scripts","q":"\n\n<p>The way you would normally include a script is with \"source\"</p>\n\n<p>eg:</p>\n\n<p>main.sh:</p>\n\n<pre><code>#!/bin/bash\n\nsource incl.sh\n\necho \"The main script\"\n</code></pre>\n\n<p>incl.sh:</p>\n\n<pre><code>echo \"The included script\"\n</code></pre>\n\n<p>The output of executing \"./main.sh\" is:</p>\n\n<pre><code>The included script\nThe main script\n</code></pre>\n\n<p>... Now, if you attempt to execute that shell script from another location, it can't find the include unless it's in your path.</p>\n\n<p>What's a good way to ensure that your script can find the include script, especially if for instance, the script needs to be portable?</p>\n    ","a":"\n<p>I tend to make my scripts all be relative to one another. \nThat way I can use dirname:</p>\n\n<pre><code>#!/bin/sh\n\nmy_dir=\"$(dirname \"$0\")\"\n\n\"$my_dir/other_script.sh\"\n</code></pre>\n    "},{"t":"What is the preferred Bash shebang?","l":"http://stackoverflow.com/questions/10376206/what-is-the-preferred-bash-shebang","q":"\n\n<p>Is there any <code>Bash</code> shebang objectively better than the others for most uses?</p>\n\n<ul>\n<li><code>#!/usr/bin/env bash</code></li>\n<li><code>#!/bin/bash</code></li>\n<li><code>#!/bin/sh</code></li>\n<li><code>#!/bin/sh -</code></li>\n<li>etc</li>\n</ul>\n\n<p>I vaguely recall a long time ago hearing that adding a dash to the end prevents someone passing a command to your script, but can’t find any details on that.</p>\n    ","a":"\n<p>You should use <code>#!/usr/bin/env bash</code> for <a href=\"https://en.wikipedia.org/wiki/Shebang_%28Unix%29#Portability\">portability</a>. And <strong><a href=\"http://mywiki.wooledge.org/BashGuide/CommandsAndArguments#Scripts\"><code>sh</code> is not <code>bash</code></a></strong>.</p>\n    "},{"t":"Bash command to sum a column of numbers [duplicate]","l":"http://stackoverflow.com/questions/3096259/bash-command-to-sum-a-column-of-numbers","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/450799/shell-command-to-sum-integers-one-per-line\" dir=\"ltr\">Shell command to sum integers, one per line?</a>\n                <span class=\"question-originals-answer-count\">\n                    38 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I want a bash command that I can pipe into that will sum a column of numbers. I just want a quick one liner that will do something essentially like this:</p>\n\n<pre><code>cat FileWithColumnOfNumbers.txt | sum\n</code></pre>\n    ","a":"\n<h1>Using existing file:</h1>\n\n<pre><code>paste -sd+ infile | bc\n</code></pre>\n\n<h1>Using stdin:</h1>\n\n<pre><code>&lt;cmd&gt; | paste -sd+ | bc\n</code></pre>\n\n<p>Edit:\nWith some <em>paste</em> implementations you need to be more explicit when reading from <em>stdin</em>:</p>\n\n<p><code>&lt;cmd&gt; | paste -sd+ - | bc</code></p>\n    "},{"t":"How to pass all arguments passed to my bash script to a function of mine?","l":"http://stackoverflow.com/questions/3811345/how-to-pass-all-arguments-passed-to-my-bash-script-to-a-function-of-mine","q":"\n\n<p>Let's say I have defined a function abc() that will handle all the logic related to analising the arguments passed to my script.</p>\n\n<p>How can I pass all arguments my bash script has received to it? The number of params is variable, so I can't just hardcode the arguments passed like this:</p>\n\n<pre><code>abc $1 $2 $3 $4\n</code></pre>\n\n<p>edit: Better yet, is there any way for my function to have access to the script arguments' variables?</p>\n    ","a":"\n<p>Pet peeve: when using <code>$@</code>, you should (almost) always put it in double-quotes to avoid misparsing of argument with spaces in them:</p>\n\n<pre><code>abc \"$@\"\n</code></pre>\n    "},{"t":"./configure : /bin/sh^M : bad interpreter","l":"http://stackoverflow.com/questions/2920416/configure-bin-shm-bad-interpreter","q":"\n\n<p>I've been trying to install lpng142 on my fed 12 system. Seems like a problem to me. I get this error</p>\n\n<pre><code>[root@localhost lpng142]# ./configure\nbash: ./configure: /bin/sh^M: bad interpreter: No such file or directory\n[root@localhost lpng142]# \n</code></pre>\n\n<p>How do I fix this? The <code>/etc/fstab</code> file:</p>\n\n<pre><code>#\n# /etc/fstab\n# Created by anaconda on Wed May 26 18:12:05 2010\n#\n# Accessible filesystems, by reference, are maintained under '/dev/disk'\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\n/dev/mapper/VolGroup-lv_root /                       ext4    defaults        1 1\nUUID=ce67cf79-22c3-45d4-8374-bd0075617cc8 /boot                   ext4    \ndefaults        1 2\n/dev/mapper/VolGroup-lv_swap swap                    swap    defaults        0 0\ntmpfs                   /dev/shm                tmpfs   defaults        0 0\ndevpts                  /dev/pts                devpts  gid=5,mode=620  0 0\nsysfs                   /sys                    sysfs   defaults        0 0\nproc                    /proc                   proc    defaults        0 0\n</code></pre>\n    ","a":"\n<p>Looks like you have a dos line ending file. The clue is the ^M</p>\n\n<p>You need to re-save the file using Unix line endings.</p>\n\n<p>You might have a dos2unix command line utility that will also do this for you.</p>\n    "},{"t":"YYYY-MM-DD format date in shell script","l":"http://stackoverflow.com/questions/1401482/yyyy-mm-dd-format-date-in-shell-script","q":"\n\n<p>I tried using <code>$(date)</code> in my bash shell script, however I want the date in YYYY-MM-DD format. How do I get this?</p>\n    ","a":"\n<p>In Bash: </p>\n\n<p>get year-month-day from date</p>\n\n<pre><code>DATE=`date +%Y-%m-%d`\n</code></pre>\n\n<p>get year-month-day hour:minute:second from date</p>\n\n<pre><code>DATE=`date +%Y-%m-%d:%H:%M:%S`\n</code></pre>\n\n<p><br>\nOther available date formats can be viewed from the <strong>man</strong> pages:</p>\n\n<pre><code>$man date\n</code></pre>\n    "},{"t":"How to kill all processes with a given partial name?","l":"http://stackoverflow.com/questions/8987037/how-to-kill-all-processes-with-a-given-partial-name","q":"\n\n<p>I want to kill all processes that I get by:</p>\n\n<pre><code>ps aux | grep my_pattern\n</code></pre>\n\n<p>How to do it?</p>\n\n<p>This does not work:</p>\n\n<pre><code>pkill my_pattern\n</code></pre>\n    ","a":"\n<p>Use <code>pkill -f</code>, which matches the pattern for any part of the command line</p>\n\n<pre><code>pkill -f my_pattern\n</code></pre>\n    "},{"t":"Parsing json with sed and awk","l":"http://stackoverflow.com/questions/1955505/parsing-json-with-sed-and-awk","q":"\n\n<p>I'm trying to parse json returned from a curl request, like sp:</p>\n\n<pre><code>curl 'http://twitter.com/users/username.json' | sed -e 's/[{}]/''/g' | awk -v k=\"text\" '{n=split($0,a,\",\"); for (i=1; i&lt;=n; i++) print a[i]}'\n</code></pre>\n\n<p>I have it set working where it splits the json into fields, i.e. the above returns</p>\n\n<pre><code>% ...\n\"geo_enabled\":false\n\"friends_count\":245\n\"profile_text_color\":\"000000\"\n\"status\":\"in_reply_to_screen_name\":null\n\"source\":\"web\"\n\"truncated\":false\n\"text\":\"My status\"\n\"favorited\":false\n% ...\n</code></pre>\n\n<p>But what I would like to do is grab a specific field (denoted by the -v k=text) and only print that. </p>\n\n<p>Any ideas? </p>\n    ","a":"\n<p>I've never used it, but you could try out <a href=\"http://github.com/micha/jsawk\">jsawk</a>. It would be something like this (haven't tested this, so I may be wrong):</p>\n\n<pre><code>curl 'http://twitter.com/users/username.json' | jsawk -a 'return this.name'\n</code></pre>\n    "},{"t":"Is [[ ]] preferable over [ ] in bash scripts?","l":"http://stackoverflow.com/questions/669452/is-preferable-over-in-bash-scripts","q":"\n\n<p>A co-worker claimed recently in a code review that the [[ ]] construct is to be preferred over [ ] in constructs like </p>\n\n<pre><code>if [ \"`id -nu`\" = \"$someuser\" ] ; then \n     echo \"I love you madly, $someuser\"\nfi\n</code></pre>\n\n<p>He couldn't provide a rationale. Is there one?</p>\n    ","a":"\n<p><code>[[</code> has less surprises and is generally safer to use. But it is not portable - Posix doesn't specify what it does and only some shells support it (beside bash, i heard ksh supports it too). For example, you can do </p>\n\n<pre><code>[[ -e $b ]]\n</code></pre>\n\n<p>to test whether a file exists. But with <code>[</code>, you have to quote <code>$b</code>, because it splits the argument and expands things like <code>\"a*\"</code> (where <code>[[</code> takes it literally). That has also to do with how <code>[</code> can be an external program and receives its argument just normally like every other program (although it can also be a builtin, but then it still has not this special handling).</p>\n\n<p><code>[[</code> also has some other nice features, like regular expression matching with <code>=~</code> along with operators like they are known in C-like languages. Here is a good page about it: <a href=\"http://mywiki.wooledge.org/BashFAQ/031\">What is the difference between test, <code>[</code> and <code>[[</code> ?</a> and <a href=\"http://mywiki.wooledge.org/BashGuide/Practices#Bash_Tests\">Bash Tests</a></p>\n    "},{"t":"How can I use inverse or negative wildcards when pattern matching in a unix/linux shell?","l":"http://stackoverflow.com/questions/216995/how-can-i-use-inverse-or-negative-wildcards-when-pattern-matching-in-a-unix-linu","q":"\n\n<p>Say I want to copy the contents of a directory excluding files and folders whose names contain the word 'Music'.</p>\n\n<pre><code>cp [exclude-matches] *Music* /target_directory\n</code></pre>\n\n<p>What should go in place of [exclude-matches] to accomplish this?</p>\n    ","a":"\n<p>In Bash you can do it by enabling the extglob option, like this (replace ls for cp and add the target directory, of course)</p>\n\n<pre><code>~/foobar&gt; shopt extglob\nextglob         off\n~/foobar&gt; ls\nabar  afoo  bbar  bfoo\n~/foobar&gt; ls !(b*)\n-bash: !: event not found\n~/foobar&gt; shopt -s extglob  #Enables extglob\n~/foobar&gt; ls !(b*)\nabar  afoo\n~/foobar&gt; ls !(a*)\nbbar  bfoo\n~/foobar&gt; ls !(*foo)\nabar  bbar\n</code></pre>\n\n<p>You can later disable extglob with</p>\n\n<pre><code>shopt -u extglob\n</code></pre>\n    "},{"t":"How to assign a heredoc value to a variable in Bash?","l":"http://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash","q":"\n\n<p>I have this multi-line string (quotes included)</p>\n\n<pre><code>abc'asdf\"\n$(dont-execute-this)\nfoo\"bar\"''\n</code></pre>\n\n<p>How would I assign it to a variable using a heredoc in Bash?</p>\n\n<p><strong>I need to preserves newlines.</strong></p>\n\n<p><em>I don't want to escape the characters in the string, that would be annoying...</em></p>\n    ","a":"\n<p>You can avoid a useless use of <code>cat</code> and handle mismatched quotes better with this:</p>\n\n<pre><code>$ read -r -d '' VAR &lt;&lt;'EOF'\nabc'asdf\"\n$(dont-execute-this)\nfoo\"bar\"''\nEOF\n</code></pre>\n\n<p>If you don't quote the variable when you echo it, newlines are lost. Quoting it preserves them:</p>\n\n<pre><code>$ echo \"$VAR\"\nabc'asdf\"\n$(dont-execute-this)\nfoo\"bar\"''\n</code></pre>\n\n<p>If you want to use indentation for readability in the source code, use a dash after the less-thans. The indentation must be done using only tabs (no spaces).</p>\n\n<pre><code>$ read -r -d '' VAR &lt;&lt;-'EOF'\n    abc'asdf\"\n    $(dont-execute-this)\n    foo\"bar\"''\n    EOF\n$ echo \"$VAR\"\nabc'asdf\"\n$(dont-execute-this)\nfoo\"bar\"''\n</code></pre>\n\n<p>If, instead, you want to preserve the tabs in the contents of the resulting variable, you need to remove tab from <code>IFS</code>. The terminal marker for the here doc (<code>EOF</code>) must not be indented.</p>\n\n<pre><code>$ IFS='' read -r -d '' VAR &lt;&lt;'EOF'\n    abc'asdf\"\n    $(dont-execute-this)\n    foo\"bar\"''\nEOF\n$ echo \"$VAR\"\n    abc'asdf\"\n    $(dont-execute-this)\n    foo\"bar\"''\n</code></pre>\n\n<p>Tabs can be inserted at the command line by pressing <kbd>Ctrl</kbd>-<kbd>V</kbd> <kbd>Tab</kbd>. If you are using an editor, depending on which one, that may also work or you may have to turn off the feature that automatically converts tabs to spaces.</p>\n    "},{"t":"How to call shell script from another shell script?","l":"http://stackoverflow.com/questions/8352851/how-to-call-shell-script-from-another-shell-script","q":"\n\n<p>Please mention sample code to call or run another script function from different scripts. (Given the <a href=\"http://www.gnu.org/software/bash/manual/bashref.html\">Bash</a> shell.)</p>\n    ","a":"\n<p>There are a couple of ways you can do this:</p>\n\n<ol>\n<li><p>The first is to make the other script executable, add the <code>#!/bin/bash</code> line at the top, and the path where the file is to the $PATH environment variable. Then you can call it as a normal command.</p></li>\n<li><p>Call it with the <code>source</code> command (alias is <code>.</code>) like this: <code>source /path/to/script</code>.</p></li>\n<li><p>Use the <code>bash</code> command to execute it: <code>/bin/bash /path/to/script</code>.</p></li>\n</ol>\n\n<p>The first and third methods execute the script as another process, so variables and functions in the other script will not be accessible. The second method executes the script in the first scripts process, and pulls in variables and functions from the other script so they are usable from the calling script.</p>\n    "},{"t":"How to programmatically determine the current checked out Git branch","l":"http://stackoverflow.com/questions/1593051/how-to-programmatically-determine-the-current-checked-out-git-branch","q":"\n\n<p><strong>In a Unix or GNU scripting environment (e.g. a Linux distro, Cygwin, OSX), what is the best way to determine which Git branch is currently checked out in a working directory?</strong></p>\n\n<p>One use of this technique would be automatically labeling a release (like <code>svnversion</code> would do with Subversion).</p>\n\n<p>Please also see my related question: <a href=\"http://stackoverflow.com/questions/1593188/how-to-programmatically-determine-whether-the-git-checkout-is-a-tag-and-if-so-wh\">How to programmatically determine whether a Git checkout is a tag, and if so what is the tag name?</a></p>\n    ","a":"\n<p>The correct solution is to take a peek at <a href=\"http://git.kernel.org/?p=git/git.git;a=blob;f=contrib/completion/git-completion.bash;hb=HEAD\">contrib/completions/git-completion.bash</a> does that for bash prompt in <code>__git_ps1</code>.  Removing all extras like selecting how to describe detached HEAD situation, i.e. when we are on unnamed branch, it is:</p>\n\n<pre><code>branch_name=\"$(git symbolic-ref HEAD 2&gt;/dev/null)\" ||\nbranch_name=\"(unnamed branch)\"     # detached HEAD\n\nbranch_name=${branch_name##refs/heads/}\n</code></pre>\n\n<p><a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-symbolic-ref.html\">git symbolic-ref</a> is used to extract fully qualified branch name from symbolic reference; we use it for HEAD, which is currently checked out branch.</p>\n\n<p>Alternate solution could be:</p>\n\n<pre><code>branch_name=$(git symbolic-ref -q HEAD)\nbranch_name=${branch_name##refs/heads/}\nbranch_name=${branch_name:-HEAD}\n</code></pre>\n\n<p>where in last line we deal with the detached HEAD situation, using simply \"HEAD\" to denote such situation.</p>\n\n<hr>\n\n<p><strong>Added 11-06-2013</strong></p>\n\n<p>Junio C. Hamano (git maintainer) blog post, <a href=\"http://git-blame.blogspot.com/2013/06/checking-current-branch-programatically.html\"><em>Checking the current branch programatically</em></a>, from June 10, 2013 explains <strong><em>whys</em></strong> (and hows) in more detail.</p>\n    "},{"t":"bash: pipe output AND capture exit status","l":"http://stackoverflow.com/questions/1221833/bash-pipe-output-and-capture-exit-status","q":"\n\n<p>I want to execute a long running command in bash shell, and both capture its exit status, and <a href=\"http://en.wikipedia.org/wiki/Tee%5F%28command%29\">tee</a> its output.</p>\n\n<p>So I do this</p>\n\n<pre><code>command | tee out.txt\nST=$?\n</code></pre>\n\n<p>The problem is that the variable ST captures the exit status of tee and not of command. How can I solve this?</p>\n\n<p>Note that command is long running and redirecting the output to a file to view it later is not a good solution for me.</p>\n    ","a":"\n<p>There is a environment variable called $PIPESTATUS; it's an array that holds the exit status of each command in your last foreground pipeline of commands.</p>\n\n<p>To use:</p>\n\n<pre><code>&lt;command&gt; | tee out.txt ; test ${PIPESTATUS[0]} -eq 0\n</code></pre>\n    "},{"t":"how does ` cat << EOF` work in bash?","l":"http://stackoverflow.com/questions/2500436/how-does-cat-eof-work-in-bash","q":"\n\n<p>I needed to write a script to enter multi-line input to a program (<code>psql</code>)</p>\n\n<p>After a bit of googling, I found the following syntax works:</p>\n\n<pre><code>cat &lt;&lt; EOF | psql ---params\nBEGIN;\n\n`pg_dump ----something`\n\nupdate table .... statement ...;\n\nEND;\nEOF\n</code></pre>\n\n<p>This correctly constructs the multi-line string (from <code>BEGIN;</code> to <code>END;</code>, inclusive) and pipes it as an input to <code>psql</code>.</p>\n\n<p>but I have no idea how/why it works, can some one please explain?</p>\n\n<p>I'm referring mainly to <code>cat &lt;&lt; EOF</code>, I know <code>&gt;</code> outputs to a file, <code>&gt;&gt;</code> appends to a file, <code>&lt;</code> reads input from file. </p>\n\n<p>What does <code>\"&lt;&lt;\"</code> exactly do?</p>\n\n<p>And is there a man page for it?</p>\n    ","a":"\n<p>This is heredoc format to put a string into stdin. See <a href=\"http://en.wikipedia.org/wiki/Here_document#Unix-Shells\">http://en.wikipedia.org/wiki/Here_document#Unix-Shells</a> for detail.</p>\n\n<hr>\n\n<p>From <code>man bash</code>:</p>\n\n<blockquote>\n  <h2>Here Documents</h2>\n  \n  <p>This type of redirection instructs the shell to read input from\n  the current source until a line\n  containing only word (with no trailing\n  blanks)  is  seen.</p>\n  \n  <p>All of the lines read up to that point are then used as the\n  standard input for a command.</p>\n  \n  <p>The format of here-documents is:</p>\n\n<pre><code>          &lt;&lt;[-]word\n                  here-document\n          delimiter\n</code></pre>\n  \n  <p>No parameter expansion, command substitution, arithmetic expansion, or\n  pathname expansion is performed on\n  <strong>word</strong>.  If any characters in <strong>word</strong> are\n  quoted, the\n  <strong>delimiter</strong> is the result of quote removal on <strong>word</strong>, and the lines\n  in the <strong>here-document</strong> are not expanded.\n  If <strong>word</strong> is unquoted, all lines of  the\n  <strong>here-document</strong>  are  subjected  to  parameter  expansion,  command\n  substitution, and arithmetic\n  expansion.  In the latter case, the\n  character sequence <code>\\&lt;newline&gt;</code> is\n  ignored, and <code>\\</code> must be used to quote the characters <code>\\</code>, <code>$</code>, and `.</p>\n  \n  <p>If the redirection operator is <code>&lt;&lt;-</code>, then all leading tab characters\n  are stripped from input lines and the\n  line containing <strong>delimiter</strong>.   This \n  allows  here-documents within shell scripts to be indented in a natural fashion.</p>\n</blockquote>\n    "},{"t":"Clear the Ubuntu bash screen for real","l":"http://stackoverflow.com/questions/5367068/clear-the-ubuntu-bash-screen-for-real","q":"\n\n<p>Using the <code>clear</code> command on the terminal only fools the user into thinking the screen has been cleared...you can still see output from the previous commands when you scroll using the mouse. This makes life difficult when you are drowning in a tsunami of text. </p>\n\n<p>Various solutions (escape code etc.) which can be found on the internet are only variations of what the clear command already does.</p>\n\n<p>So how do you clear the contents of the bash terminal in Ubuntu for real?</p>\n    ","a":"\n<p>I will answer my own question! Use the following command to do a clear screen instead of merely adding new lines ...</p>\n\n<pre><code>printf \"\\033c\"\n</code></pre>\n\n<p>yes that's a 'printf' on the bash prompt.</p>\n\n<p>You will probably want to define an alias though...</p>\n\n<pre><code>alias cls='printf \"\\033c\"'\n</code></pre>\n\n<h3>Explanation</h3>\n\n<pre class=\"lang-none prettyprint-override\"><code>\\033 == \\x1B == 27 == ESC\n</code></pre>\n\n<p>So this becomes <code>&lt;ESC&gt;c</code> which is the VT100 escape code for resetting the terminal. <a href=\"http://www.termsys.demon.co.uk/vtansi.htm\">Here</a> is some more information on terminal escape codes.</p>\n\n<h3>Edit</h3>\n\n<p>Here are a few other ways of doing it...</p>\n\n<pre><code>printf \"\\ec\" #\\e is ESC in bash\necho -en \"\\ec\" #thanks @Jonathon Reinhart.\n# -e    Enable interpretation of of backslash escapes\n# -n    Do not output a new line\n</code></pre>\n\n<h1>KDE</h1>\n\n<p>The above does not work on the KDE console (called Konsole) but there is hope! Use the following sequence of commands to clear the screen and the scroll-back buffer...</p>\n\n<pre><code>clear &amp;&amp; echo -en \"\\e[3J\"\n</code></pre>\n\n<p>Or perhaps use the following alias on KDE...</p>\n\n<pre><code>alias cls='clear &amp;&amp; echo -en \"\\e[3J\"'\n</code></pre>\n\n<p>I got the scroll-back clearing command from <a href=\"http://superuser.com/a/59718/6765\">here</a>.</p>\n    "},{"t":"bash/fish command to print absolute path to a file","l":"http://stackoverflow.com/questions/3915040/bash-fish-command-to-print-absolute-path-to-a-file","q":"\n\n<p>Question: is there a simple sh/bash/zsh/fish/... command to print the absolute path of whichever file I feed it?</p>\n\n<p>Usage case: I'm in directory <code>/a/b</code> and I'd like to print the full path to file <code>c</code> on the command-line so that I can easily paste it into another program: <code>/a/b/c</code>. Simple, yet a little program to do this could probably save me 5 or so seconds when it comes to handling long paths, which in the end adds up. So it surprises me that I can't find a standard utility to do this — is there really none?</p>\n\n<p>Here's a sample implementation, abspath.py:</p>\n\n<pre><code>#!/usr/bin/python\n# Author: Diggory Hardy &lt;diggory.hardy@gmail.com&gt;\n# Licence: public domain\n# Purpose: print the absolute path of all input paths\n\nimport sys\nimport os.path\nif len(sys.argv)&gt;1:\n    for i in range(1,len(sys.argv)):\n        print os.path.abspath( sys.argv[i] )\n    sys.exit(0)\nelse:\n    print &gt;&gt; sys.stderr, \"Usage: \",sys.argv[0],\" PATH.\"\n    sys.exit(1)\n</code></pre>\n    ","a":"\n<p>Try <code>realpath</code>.</p>\n\n<pre><code>~ $ realpath .bashrc\n/home/username/.bashrc\n</code></pre>\n    "},{"t":"Capturing Groups From a Grep RegEx","l":"http://stackoverflow.com/questions/1891797/capturing-groups-from-a-grep-regex","q":"\n\n<p>I've got this little script in <code>sh</code> (Mac OSX 10.6) to look through an array of files. Google has stopped being helpful at this point:</p>\n\n<pre><code>files=\"*.jpg\"\nfor f in $files\n    do\n        echo $f | grep -oEi '[0-9]+_([a-z]+)_[0-9a-z]*'\n        name=$?\n        echo $name\n    done\n</code></pre>\n\n<p>So far (obviously, to you shell gurus) <code>$name</code> merely holds 0, 1 or 2, depending on if <code>grep</code> found that the filename matched the matter provided. <strong>What I'd like is to capture what's inside the parens <code>([a-z]+)</code> and store that to a variable</strong>.</p>\n\n<p>I'd like <strong>to use <code>grep</code> only, if possible</strong>. If not, please no Python or Perl, etc. <code>sed</code> or something like it –&nbsp;I'm new to shell and would like to attack this from the *nix purist angle.</p>\n\n<p>Also, as a <strong>super-cool bonu</strong>s, I'm curious as to how I can concatenate string in shell? Is the group I captured was the string \"somename\" stored in $name, and I wanted to add the string \".jpg\" to the end of it, could I <code>cat $name '.jpg'</code>?</p>\n\n<p>Please explain what's going on, if you've got the time.</p>\n    ","a":"\n<p>If you're using Bash, you don't even have to use <code>grep</code>:</p>\n\n<pre><code>files=\"*.jpg\"\nregex=\"[0-9]+_([a-z]+)_[0-9a-z]*\"\nfor f in $files\ndo\n    [[ $f =~ $regex ]]\n    name=\"${BASH_REMATCH[1]}\"\n    echo \"${name}.jpg\"    # concatenate strings\n    name=\"${name}.jpg\"    # same thing stored in a variable\ndone\n</code></pre>\n\n<p>Edit: It's better to put the regex in a variable. Some patterns won't work if included literally.</p>\n\n<p>This uses  <code>=~</code> which is Bash's regex match operator. The results of the match are saved to an array called <code>$BASH_REMATCH</code>. The first capture group is stored in index 1, the second (if any) in index 2, etc. Index zero is the full match.</p>\n\n<p>You should be aware that without anchors, this regex (and the one using <code>grep</code>) will match any of the following examples and more, which may not be what you're looking for:</p>\n\n<pre><code>123_abc_d4e5\nxyz123_abc_d4e5\n123_abc_d4e5.xyz\nxyz123_abc_d4e5.xyz\n</code></pre>\n\n<p>To eliminate the second and fourth examples, make your regex like this:</p>\n\n<pre><code>^[0-9]+_([a-z]+)_[0-9a-z]*\n</code></pre>\n\n<p>which says the string must <em>start</em> with one or more digits. The carat represents the beginning of the string. If you add a dollar sign at the end of the regex, like this:</p>\n\n<pre><code>^[0-9]+_([a-z]+)_[0-9a-z]*$\n</code></pre>\n\n<p>then the third example will also be eliminated since the dot is not among the characters in the regex and the dollar sign represents the end of the string. Note that the fourth example fails this match as well.</p>\n\n<p>If you have GNU <code>grep</code> (around 2.5 or later, I think, when the <code>\\K</code> operator was added):</p>\n\n<pre><code>name=$(echo \"$f\" | grep -Po '(?i)[0-9]+_\\K[a-z]+(?=_[0-9a-z]*)').jpg\n</code></pre>\n\n<p>The <code>\\K</code> operator (variable-length look-behind) causes the preceding pattern to match, but doesn't include the match in the result. The fixed-length equivalent is <code>(?&lt;=)</code> - the pattern would be included before the closing parenthesis. You must use <code>\\K</code> if quantifiers may match strings of different lengths (e.g. <code>+</code>, <code>*</code>, <code>{2,4}</code>).</p>\n\n<p>The <code>(?=)</code> operator matches fixed or variable-length patterns and is called \"look-ahead\". It also does not include the matched string in the result.</p>\n\n<p>In order to make the match case-insensitive, the <code>(?i)</code> operator is used. It affects the patterns that follow it so its position is significant.</p>\n\n<p>The regex might need to be adjusted depending on whether there are other characters in the filename. You'll note that in this case, I show an example of concatenating a string at the same time that the substring is captured.</p>\n    "},{"t":"How do I check syntax in bash without running the script?","l":"http://stackoverflow.com/questions/171924/how-do-i-check-syntax-in-bash-without-running-the-script","q":"\n\n<p>Is it possible to check a bash script syntax without executing it?</p>\n\n<p>Using Perl, I can run <code>perl -c 'script name'</code>. Is there any equivalent command for bash scripts?</p>\n    ","a":"\n<pre><code>bash -n scriptname\n</code></pre>\n\n<p>Perhaps an obvious caveat: this validates syntax but won't check if your bash script tries to execute a command that isn't in your path, like <code>ech hello</code> instead of <code>echo hello</code>.</p>\n    "},{"t":"How to do a logical OR operation in Shell Scripting","l":"http://stackoverflow.com/questions/4111475/how-to-do-a-logical-or-operation-in-shell-scripting","q":"\n\n<p>I am trying to do a simple condition check, but it doesn't seem to work.</p>\n\n<p>If <code>$#</code> is equal to <code>0</code> or is greater than <code>1</code> then say hello.</p>\n\n<p>I have tried the following syntax with no success:</p>\n\n<pre><code>if [ \"$#\" == 0 -o \"$#\" &gt; 1 ] ; then\n echo \"hello\"\nfi\n\nif [ \"$#\" == 0 ] || [ \"$#\" &gt; 1 ] ; then\n echo \"hello\"\nfi\n</code></pre>\n    ","a":"\n<p>This should work OK.</p>\n\n<pre><code>if [ \"$#\" == 0 ] || [ \"$#\" -gt 1 ] ; then\n echo \"hello\"\nfi\n</code></pre>\n\n<p>I'm not sure if this is different in other shells but if you wish to use &lt;, &gt;, you need to put them inside double parenthesis like so: </p>\n\n<pre><code>if ((\"$#\" &gt; 1))\n ...\n</code></pre>\n    "},{"t":"Bash: Join elements of an array?","l":"http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array","q":"\n\n<p>If I have an array like this in Bash:</p>\n\n<pre><code>FOO=( a b c )\n</code></pre>\n\n<p>How do I join the elements with commas?  For example, producing <code>a,b,c</code>.</p>\n    ","a":"\n<p>Rewriting solution by Pascal Pilz as a function in 100% pure Bash (no external commands):</p>\n\n<pre><code>function join { local IFS=\"$1\"; shift; echo \"$*\"; }\n</code></pre>\n\n<p>For example,</p>\n\n<pre><code>join , a \"b c\" d #a,b c,d\njoin / var local tmp #var/local/tmp\njoin , \"${FOO[@]}\" #a,b,c\n</code></pre>\n    "},{"t":"how to find variable is empty or “” in shell script","l":"http://stackoverflow.com/questions/3061036/how-to-find-variable-is-empty-or-in-shell-script","q":"\n\n<p>How can I check if a variable is empty in Shell?</p>\n    ","a":"\n<p>In bash at least:</p>\n\n<pre><code>if [[ -z \"$var\" ]]\n</code></pre>\n\n<p>the command <code>man test</code> is your friend.</p>\n    "},{"t":"What Is the Purpose of the `:' (colon) GNU Bash Builtin?","l":"http://stackoverflow.com/questions/3224878/what-is-the-purpose-of-the-colon-gnu-bash-builtin","q":"\n\n<p>The question says it: what would be the purpose of a command that does nothing, being little more than a comment leader, but actually a shell built-in in and of itself.</p>\n\n<p>It's slower than inserting a comment into your scripts, by about 40% per call, which probably varies greatly on the size of the comment. The only possible reasons I can see for it are these:</p>\n\n<pre><code># poor man's delay function\nfor ((x=0;x&lt;100000;++x)) ; do : ; done\n\n# inserting comments into string of commands\ncommand ; command ; : we need a comment in here for some reason ; command\n\n# an alias for `true' (lazy programming)\nwhile : ; do command ; done\n</code></pre>\n\n<p><strong>Edit:</strong> I guess what I'm really looking for is what historical application it might have had.</p>\n    ","a":"\n<p><strong>Historically</strong>, Bourne shells didn't have <code>true</code> and <code>false</code> as built-in commands. <code>true</code> was instead simply aliased to <code>:</code>, and <code>false</code> to something like <code>let 0</code>.</p>\n\n<p><code>:</code> is slightly better than <code>true</code> for portability to ancient Bourne-derived shells. As a simple example, consider having neither the <code>!</code> pipeline operator nor the <code>||</code> list operator (as was the case for some ancient Bourne shells). This leaves the <code>else</code> clause of the <code>if</code> statement as the only means for branching based on exit status:</p>\n\n<pre><code>if command; then :; else ...; fi\n</code></pre>\n\n<p>Since <code>if</code> requires a non-empty <code>then</code> clause and comments don't count as non-empty, <code>:</code> serves as a no-op.</p>\n\n<p><strong>Nowadays</strong> (that is: in a modern context) you can usually use either <code>:</code> or <code>true</code>. Both are specified by POSIX, and some find <code>true</code> easier to read. However there is one interesting difference: <code>:</code> is a so-called POSIX <em>special built-in</em>, whereas <code>true</code> is a <em>regular built-in</em>.</p>\n\n<ul>\n<li><p>Special built-ins are required to be built into the shell; Regular built-ins are only \"typically\" built in, but it isn't strictly guaranteed. There usually shouldn't be a regular program named <code>:</code> with the function of <code>true</code> in PATH of most systems.</p></li>\n<li><p>Probably the most crucial difference is that with special built-ins, any variable set by the built-in - even in the environment during simple command evaluation - persists after the command completes, as demonstrated here using ksh93:</p>\n\n<pre><code>$ unset x; ( x=hi :; echo \"$x\" )\nhi\n$ ( x=hi true; echo \"$x\" )\n\n$\n</code></pre>\n\n<p>Note that Zsh ignores this requirement, as does GNU Bash except when operating in POSIX compatibility mode, but all other major \"POSIX sh derived\" shells observe this including dash, ksh93, and mksh.</p></li>\n<li><p>Another difference is that regular built-ins must be compatible with <code>exec</code> - demonstrated here using Bash:</p>\n\n<pre><code>$ ( exec : )\n-bash: exec: :: not found\n$ ( exec true )\n$\n</code></pre></li>\n<li><p>POSIX also explicitly notes that <code>:</code> may be faster than <code>true</code>, though  this is of course an implementation-specific detail.</p></li>\n</ul>\n    "},{"t":"install mysql on ubuntu without password prompt","l":"http://stackoverflow.com/questions/7739645/install-mysql-on-ubuntu-without-password-prompt","q":"\n\n<p>how to write a script  to install mysql server on ubuntu?.</p>\n\n<p><code>sudo apt-get install mysql</code> will install and ask for password for this how to assing password in script.</p>\n\n<pre><code>#!/bin/bash\nsudo apt-get install mysql  # To install mysql server\n\n# How to write script for assigning password to mysql root user\n\n# End\n</code></pre>\n    ","a":"\n<pre><code>sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password your_password'\nsudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password your_password'\nsudo apt-get -y install mysql-server\n</code></pre>\n\n<p>Replace your_password with the desired root password. (it seems your_password can also be left blank for a blank root password.)</p>\n\n<p>If your shell doesn't support <em>here-strings</em> (<em>zsh</em>, <em>ksh93</em> and <em>bash</em> support them), use:</p>\n\n<pre><code>echo ... | sudo debconf-set-selections \n</code></pre>\n    "},{"t":"How to iterate over associative array in bash","l":"http://stackoverflow.com/questions/3112687/how-to-iterate-over-associative-array-in-bash","q":"\n\n<p>Based on an associative array in a bash script I need to iterate over it to get the key and value.</p>\n\n<pre><code>#!/bin/bash\n\ndeclare -A array\narray[foo]=bar\narray[bar]=foo\n</code></pre>\n\n<p>I actually don't understand how to get the key while using a for-in loop.\nThanks in advance!</p>\n    ","a":"\n<p>The keys are accessed using an exclamation point: <code>${!array[@]}</code>, the <strong><em>values</em></strong> are accessed using <code>${array[@]}</code>.</p>\n\n<p>You can iterate over the key/value pairs like this:</p>\n\n<pre><code>for i in \"${!array[@]}\"\ndo\n  echo \"key  : $i\"\n  echo \"value: ${array[$i]}\"\ndone\n</code></pre>\n\n<p>Note the use of quotes around the variable in the <code>for</code> statement (plus the use of <code>@</code> instead of <code>*</code>). This is necessary in case any keys include spaces.</p>\n\n<p>The confusion in the other answer comes from the fact that your question includes \"foo\" and \"bar\" for both the keys <em>and</em> the values.</p>\n    "},{"t":"How to use 'find' to search for files created on a specific date? [closed]","l":"http://stackoverflow.com/questions/158044/how-to-use-find-to-search-for-files-created-on-a-specific-date","q":"\n\n<p>How do I use the UNIX tool 'find' to search for files created on a specific date?</p>\n    ","a":"\n<p>As pointed out by Max, you can't, but checking files modified or accessed is not all that hard.  I wrote a <a href=\"http://virtuelvis.com/2008/10/how-to-use-find-to-search-for-files-created-on-a-specific-date/\" rel=\"nofollow\">tutorial</a> about this, as late as today. The essence of which is to use <code>-newerXY</code> and <code>! -newerXY</code>:</p>\n\n<p>Example: To find all files modified on the 7th of June, 2007:</p>\n\n<pre><code>$ find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08\n</code></pre>\n\n<p>To find all files accessed on the 29th of september, 2008:</p>\n\n<pre><code>$ find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30\n</code></pre>\n\n<p>Or, files which had their permission changed on the same day:</p>\n\n<pre><code>$ find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30\n</code></pre>\n\n<p>If you don't change permissions on the file, 'c' would normally correspond to the creation date, though.</p>\n    "},{"t":"Error handling in BASH","l":"http://stackoverflow.com/questions/64786/error-handling-in-bash","q":"\n\n<p>What is your favorite method to handle errors in BASH? \nThe best example of handling errors in BASH I have found on the web was written by William Shotts, Jr at <a href=\"http://www.linuxcommand.org\">http://www.linuxcommand.org</a>. </p>\n\n<p>William Shotts, Jr suggests using the following function for error handling in BASH:</p>\n\n<pre><code>#!/bin/bash\n\n# A slicker error handling routine\n\n# I put a variable in my scripts named PROGNAME which\n# holds the name of the program being run.  You can get this\n# value from the first item on the command line ($0).\n\n# Reference: This was copied from &lt;http://www.linuxcommand.org/wss0150.php&gt;\n\nPROGNAME=$(basename $0)\n\nfunction error_exit\n{\n\n#   ----------------------------------------------------------------\n#   Function for exit due to fatal program error\n#   \tAccepts 1 argument:\n#   \t\tstring containing descriptive error message\n#   ----------------------------------------------------------------\n\n\n    echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1&gt;&amp;2\n    exit 1\n}\n\n# Example call of the error_exit function.  Note the inclusion\n# of the LINENO environment variable.  It contains the current\n# line number.\n\necho \"Example of error with line number and message\"\nerror_exit \"$LINENO: An error has occurred.\"\n</code></pre>\n\n<p>Do you have a better error handling routine that you use in BASH scripts?</p>\n    ","a":"\n<p>Use a trap!</p>\n\n<pre><code>tempfiles=( )\ncleanup() {\n  rm -f \"${tempfiles[@]}\"\n}\ntrap cleanup 0\n\nerror() {\n  local parent_lineno=\"$1\"\n  local message=\"$2\"\n  local code=\"${3:-1}\"\n  if [[ -n \"$message\" ]] ; then\n    echo \"Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}\"\n  else\n    echo \"Error on or near line ${parent_lineno}; exiting with status ${code}\"\n  fi\n  exit \"${code}\"\n}\ntrap 'error ${LINENO}' ERR\n</code></pre>\n\n<p>...then, whenever you create a temporary file:</p>\n\n<pre><code>temp_foo=\"$(mktemp -t foobar.XXXXXX)\"\ntempfiles+=( \"$temp_foo\" )\n</code></pre>\n\n<p>and <code>$temp_foo</code> will be deleted on exit, and the current line number will be printed. (<code>set -e</code> will likewise give you exit-on-error behavior, <a href=\"http://mywiki.wooledge.org/BashFAQ/105\">though it comes with some caveats</a>).</p>\n\n<p>You can either let the trap call <code>error</code> for you (in which case it uses the default exit code of 1 and no message) or call it yourself and provide explicit values; for instance:</p>\n\n<pre><code>error ${LINENO} \"the foobar failed\" 2\n</code></pre>\n\n<p>will exit with status 2, and give an explicit message.</p>\n    "},{"t":"How to resolve symbolic links in a shell script","l":"http://stackoverflow.com/questions/7665/how-to-resolve-symbolic-links-in-a-shell-script","q":"\n\n<p>Given an absolute or relative path (in a Unix-like system), I would like to determine the full path of the target after resolving any intermediate symlinks. Bonus points for also resolving ~username notation at the same time.</p>\n\n<p>If the target is a directory, it might be possible to chdir() into the directory and then call getcwd(), but I really want to do this from a shell script rather than writing a C helper. Unfortunately, shells have a tendency to try to hide the existence of symlinks from the user (this is bash on OS X):</p>\n\n<pre><code>$ ls -ld foo bar\ndrwxr-xr-x   2 greg  greg  68 Aug 11 22:36 bar\nlrwxr-xr-x   1 greg  greg   3 Aug 11 22:36 foo -&gt; bar\n$ cd foo\n$ pwd\n/Users/greg/tmp/foo\n$\n</code></pre>\n\n<p>What I want is a function resolve() such that when executed from the tmp directory in the above example, resolve(\"foo\") == \"/Users/greg/tmp/bar\".</p>\n    ","a":"\n<p>According to the standards, pwd -P should return the path with symlinks resolved.</p>\n\n<p>C function char *getcwd(char *buf, size_t size) from unistd.h should have the same behaviour.</p>\n\n<p><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getcwd.html\">getcwd</a>\n<a href=\"http://www.opengroup.org/onlinepubs/009695399/utilities/pwd.html\">pwd</a></p>\n    "},{"t":"use space as a delimiter with cut command","l":"http://stackoverflow.com/questions/816820/use-space-as-a-delimiter-with-cut-command","q":"\n\n<p>I want to use space as a delimiter with the <code>cut</code> command.</p>\n\n<p>What syntax can I use for this?</p>\n    ","a":"\n<pre><code>cut -d ' ' -f 2\n</code></pre>\n\n<p>Where 2 is the field number of the space-delimited field you want.</p>\n    "},{"t":"How to urlencode data for curl command?","l":"http://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command","q":"\n\n<p>I am trying to write a bash script for testing that takes a parameter and sends it through curl to web site.  I need to url encode the value to make sure that special characters are processed properly.  What is the best way to do this?  </p>\n\n<p>Here is my basic script so far:</p>\n\n<pre><code>#!/bin/bash\nhost=${1:?'bad host'}\nvalue=$2\nshift\nshift\ncurl -v -d \"param=${value}\" http://${host}/somepath $@\n</code></pre>\n    ","a":"\n<p>Just use <code>curl --data-urlencode</code>.</p>\n\n<blockquote>\n  <p>This posts data, similar to the other <code>--data</code> options with the exception that this performs URL-encoding. To be CGI-compliant, the <code>&lt;data&gt;</code> part should begin with a name followed by a separator and a content specification.</p>\n</blockquote>\n\n<p>Example usage:</p>\n\n<pre><code>curl --data-urlencode \"paramName=param\" www.example.com\n</code></pre>\n\n<p>See more at: <code>man curl</code>.</p>\n    "},{"t":"Escape a string for a sed replace pattern","l":"http://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern","q":"\n\n<p>In my bash script I have an external (received from user) string, which I should use in sed pattern.</p>\n\n<pre><code>REPLACE=\"&lt;funny characters here&gt;\"\nsed \"s/KEYWORD/$REPLACE/g\"\n</code></pre>\n\n<p>How can I escape the <code>$REPLACE</code> string so it would be safely accepted by <code>sed</code> as a literal replacement?</p>\n\n<p><strong>NOTE:</strong> The <code>KEYWORD</code> is a dumb substring with no matches etc. It is not supplied by user.</p>\n    ","a":"\n<p>Sorry for downvoting PEZ's accepted answer, but escaping everything is a bad idea. Sed needs many characters to be escaped to <em>get</em> their special meaning. For example, if you escape a digit in the replacement string, it will turn in to a backreference.</p>\n\n<p>As Ben Blank said, there are only three characters that need to be escaped in the replacement string (escapes themselves, forward slash for end of statement and &amp; for replace all):</p>\n\n<pre><code>sed -e 's/[\\/&amp;]/\\\\&amp;/g'</code></pre>\n\n<p>If you ever need to escape the <code>KEYWORD</code> string, the following is the one you need:</p>\n\n<pre><code>sed -e 's/[]\\/$*.^|[]/\\\\&amp;/g'</code></pre>\n\n<p><em>Addendum:</em> Remember, if you use a character other than <code>/</code> as delimiter, you need replace the slash in the expressions above wih the character you are using. See PeterJCLaw's comment for explanation.</p>\n\n<p><em>Fix 1 for KEYWORD variant:</em> Added the two characters Peter.O mentioned, and '(' and ')'.</p>\n\n<p><em>Fix 2 for KEYWORD variant:</em> Removed '(' and ')' again. Don't know what I was thinking when I added them. Thanks, Jesse.</p>\n    "},{"t":"find -exec with multiple commands","l":"http://stackoverflow.com/questions/5119946/find-exec-with-multiple-commands","q":"\n\n<p>I am trying to use find -exec with multiple commands without any success.  Does anybody know if commands such as the following are possible?</p>\n\n<pre><code>find *.txt -exec echo \"$(tail -1 '{}'),$(ls '{}')\" \\;\n</code></pre>\n\n<p>Basically, I am trying to print the last line of each txt file in the current directory and print at the end of the line, a comma followed by the filename.</p>\n    ","a":"\n<p><code>find</code> will also accept multiple <code>-exec</code> portions to the command:</p>\n\n<pre><code>find . -name \"*.txt\" -exec echo {} \\; -exec grep banana {} \\;\n</code></pre>\n\n<p>Note that in this case the second command will only run if the first one returns successfully, as mentioned by @Caleb. If you want both commands to run regardless of their success or failure, you could use this construct:</p>\n\n<pre><code>find . -name \"*.txt\" \\( -exec echo {} \\; -o -exec true \\; \\) -exec grep banana {} \\;\n</code></pre>\n    "},{"t":"Why do you need to put #!/bin/bash at the beginning of a script file?","l":"http://stackoverflow.com/questions/8967902/why-do-you-need-to-put-bin-bash-at-the-beginning-of-a-script-file","q":"\n\n<p>I have made <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> scripts before and they all ran fine without this at the beginning. What's the point of putting it in? Would things be any different?</p>\n\n<p>Also, how do you pronounce <code>#</code>? I know that <code>!</code> is pronounced as \"bang.\"</p>\n\n<p>How is <code>#!</code> pronounced?</p>\n    ","a":"\n<p>It's a convention so the *nix shell knows what kind of interpreter to run.</p>\n\n<p>For example, older flavors of ATT defaulted to \"sh\" (the Bourne shell), while older versions of BSD defaulted to \"csh\" (the C shell).</p>\n\n<p>Even today (where most systems run \"bash\", the \"Bourne Again Shell\"), scripts can be in bash, python, perl, ruby, PHP, etc, etc.  For example, you might see \"!/bin/perl\" or \"/bin/perl5\".</p>\n\n<p>PS:\nThe exclamation mark (\"!\") is affectionately called \"bang\".  The shell comment symbol (\"#\") is sometimes called \"hash\".</p>\n\n<p>PPS:\nRemember - under *nix, associating a suffix with a file type is merely a <em>convention</em>, not a \"rule\".  An \"executable\" can be a binary program, any one of a million script types and other things as well.  Hence the need for \"#!/bin/bash\".</p>\n    "},{"t":"Checking Bash exit status of several commands efficiently","l":"http://stackoverflow.com/questions/5195607/checking-bash-exit-status-of-several-commands-efficiently","q":"\n\n<p>Is there something similar to pipefail for multiple commands, like a 'try' statement but within bash. I would like to do something like this:</p>\n\n<pre><code>echo \"trying stuff\"\ntry {\n    command1\n    command2\n    command3\n}\n</code></pre>\n\n<p>And at any point, if any command fails, drop out and echo out the error of that command. I don't want to have to do something like:</p>\n\n<pre><code>command1\nif [ $? -ne 0 ]; then\n    echo \"command1 borked it\"\nfi\n\ncommand2\nif [ $? -ne 0 ]; then\n    echo \"command2 borked it\"\nfi\n</code></pre>\n\n<p>And so on... or anything like:</p>\n\n<pre><code>pipefail -o\ncommand1 \"arg1\" \"arg2\" | command2 \"arg1\" \"arg2\" | command3\n</code></pre>\n\n<p>Because the arguments of each command I believe (correct me if I'm wrong) will interfere with each other. These two methods seem horribly long-winded and nasty to me so I'm here appealing for a more efficient method.</p>\n    ","a":"\n<p>You can write a function that launches and tests the command for you:</p>\n\n<pre><code>function test {\n    \"$@\"\n    local status=$?\n    if [ $status -ne 0 ]; then\n        echo \"error with $1\" &gt;&amp;2\n    fi\n    return $status\n}\n\ntest command1\ntest command2\n</code></pre>\n    "},{"t":"redirect COPY of stdout to log file from within bash script itself","l":"http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself","q":"\n\n<p>I know how to redirect stdout to a file:</p>\n\n<pre><code>exec &gt; foo.log\necho test\n</code></pre>\n\n<p>this will put the 'test' into the foo.log file.</p>\n\n<p>Now I want to redirect the output into the log file AND keep it on stdout</p>\n\n<p>i.e. it can be done trivially from outside the script:</p>\n\n<pre><code>script | tee foo.log\n</code></pre>\n\n<p>but I want to do it from the inside</p>\n\n<p>I tried</p>\n\n<pre><code>exec | tee foo.log\n</code></pre>\n\n<p>but it didn't work</p>\n    ","a":"\n<pre><code>#!/usr/bin/env bash\n\n# Redirect stdout ( &gt; ) into a named pipe ( &gt;() ) running \"tee\"\nexec &gt; &gt;(tee logfile.txt)\n\n# Without this, only stdout would be captured - i.e. your\n# log file would not contain any error messages.\n# SEE answer by Adam Spiers, which keeps STDERR a seperate stream -\n# I did not want to steal from him by simply adding his answer to mine.\nexec 2&gt;&amp;1\n\necho \"foo\"\necho \"bar\" &gt;&amp;2\n</code></pre>\n\n<p>Note that this is <code>bash</code>, not <code>sh</code>. If you invoke the script with <code>sh myscript.sh</code>, you will get an error along the lines of <code>syntax error near unexpected token '&gt;'</code>.</p>\n    "},{"t":"Difference between return and exit in BASH functions","l":"http://stackoverflow.com/questions/4419952/difference-between-return-and-exit-in-bash-functions","q":"\n\n<p>What is the difference between the <code>return</code> and <code>exit</code> statement in BASH functions with respect to exit codes?</p>\n    ","a":"\n<p><code>return</code> returns a value from a function. <code>exit</code> abandons the current shell.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>As per your edit of the question, regarding exit codes, <code>return</code> has nothing to do with exit codes. Exit codes are intended for <strong>applications/scripts</strong>, not functions. So in this regard, the only keyword that sets the exit code of the script (the one that can be caught by the calling program using the <code>$?</code> shell variable) is <code>exit</code>.</p>\n    "},{"t":"How to simulate the environment cron executes a script with?","l":"http://stackoverflow.com/questions/2135478/how-to-simulate-the-environment-cron-executes-a-script-with","q":"\n\n<p>I normally have several problems with how cron executes scripts as they normally don't have my environment setup. Is there a way to invoke bash(?) in the same way cron does so I could test scripts before installing them?</p>\n    ","a":"\n<p>Add this to your cron:</p>\n\n<pre><code>30 08 * * * env &gt; ~/cronenv\n</code></pre>\n\n<p>After it runs, do this:</p>\n\n<pre><code>env - `cat ~/cronenv` /bin/sh\n</code></pre>\n\n<p>This assumes that your cron runs sh. I believe this is the default.</p>\n    "},{"t":"bash tool to get nth line from a file","l":"http://stackoverflow.com/questions/6022384/bash-tool-to-get-nth-line-from-a-file","q":"\n\n<p>Is there a \"canonical\" way of doing that? I've been using <code>head -n | tail -1</code> which does the trick, but I've been wondering if there's a bash tool that specifically extracts a line (or a range of lines) from a file.</p>\n\n<p>EDIT: By \"canonical\" I mean a program whose main function is doing that.</p>\n    ","a":"\n<p><code>head</code> and <code>pipe</code> with <code>tail</code> will be slow for a huge file. I would suggest <code>sed</code> like this:</p>\n\n<pre><code>sed 'NUMq;d' file\n</code></pre>\n\n<p>Where <code>NUM</code> is the number of line you want to print.</p>\n    "},{"t":"How to set current working directory to the directory of the script?","l":"http://stackoverflow.com/questions/3349105/how-to-set-current-working-directory-to-the-directory-of-the-script","q":"\n\n<p>I'm writing a bash script. I need the current working directory to always be the directory that the script is located in.</p>\n\n<p>The default behavior is that the current working directory in the script is that of the shell from which I run it, but I do not want this behavior.</p>\n    ","a":"\n<pre><code>#!/bin/bash\ncd \"$(dirname \"$0\")\"\n</code></pre>\n    "},{"t":"Bash Scripting & Read File line by line","l":"http://stackoverflow.com/questions/10929453/bash-scripting-read-file-line-by-line","q":"\n\n<p>I'm new to bash scripting. I've the following txt file:</p>\n\n<pre><code>Marco\nPaolo\nAntonio\n</code></pre>\n\n<p>I want to read it line by line, and for each line I want to assign txt line value to a variable: I explain better (suppose my variable is $name), flow is:</p>\n\n<pre><code>Read First line from file \n assign $name = \"Marco\"\n...\n doing some tasks with $name\n...\nRead Second line from file\nassign $name = \"Paolo\"\n</code></pre>\n\n<hr>\n\n<p>Thank you all, and if I want read a file using expect how should I do? I want do that because when I wrote  </p>\n\n<blockquote>\n  <p>doing some tasks with $name</p>\n</blockquote>\n\n<p>I meant that my tasks are expect commands.</p>\n    ","a":"\n<p>The following (save as <code>rr.sh</code>) reads a file passed as an argument line by line:</p>\n\n<pre><code>#!/bin/bash\nwhile IFS='' read -r line || [[ -n \"$line\" ]]; do\n    echo \"Text read from file: $line\"\ndone &lt; \"$1\"\n</code></pre>\n\n<p>Explanation:</p>\n\n<ul>\n<li><code>IFS=''</code> (or <code>IFS=</code>) prevents leading/trailing whitespace from being trimmed.</li>\n<li><code>-r</code> prevents backslash escapes from being interpreted.</li>\n<li><code>|| [[ -n $line ]]</code> prevents the last line from being ignored if it doesn't end with a <code>\\n</code> (since <code>read</code> returns a non-zero exit code when it encounters EOF).</li>\n</ul>\n\n<p>Run the script as follows:</p>\n\n<pre><code>chmod +x rr.sh\n./rr.sh filename.txt\n</code></pre>\n\n<p>....</p>\n    "},{"t":"How to tell if a string is not defined in a bash shell script?","l":"http://stackoverflow.com/questions/228544/how-to-tell-if-a-string-is-not-defined-in-a-bash-shell-script","q":"\n\n<p>If I want to check for the null string I would do</p>\n\n<pre><code>[ -z $mystr ]\n</code></pre>\n\n<p>but what if I want to check whether the variable has been defined at all?  Or is there no distinction in bash scripting?</p>\n    ","a":"\n<p>I think the answer you are after is implied (if not stated) by Vinko's answer, though it is not spelled out simply.  To distinguish whether VAR is set but empty or not set, you can use:</p>\n\n<pre><code>if [ -z \"${VAR+xxx}\" ]; then echo VAR is not set at all; fi\nif [ -z \"$VAR\" ] &amp;&amp; [ \"${VAR+xxx}\" = \"xxx\" ]; then echo VAR is set but empty; fi\n</code></pre>\n\n<p>You probably can combine the two tests on the second line into one with:</p>\n\n<pre><code>if [ -z \"$VAR\" -a \"${VAR+xxx}\" = \"xxx\" ]; then echo VAR is set but empty; fi\n</code></pre>\n\n<p>However, if you read the documentation for Autoconf, you'll find that they do not recommend combining terms with '<code>-a</code>' and do recommend using separate simple tests combined with <code>&amp;&amp;</code>.  I've not encountered a system where there is a problem; that doesn't mean they didn't used to exist (but they are probably extremely rare these days, even if they weren't as rare in the distant past).</p>\n\n<hr>\n\n<p>I was recently asked by email about this answer with the question:</p>\n\n<blockquote>\n  <p>You use two tests, and I understand the second one well, but not the first one. More precisely I don't understand the need for variable expansion</p>\n\n<pre><code>if [ -z \"${VAR+xxx}\" ]; then echo VAR is not set at all; fi\n</code></pre>\n  \n  <p>Wouldn't this accomplish the same?</p>\n\n<pre><code>if [ -z \"${VAR}\" ]; then echo VAR is not set at all; fi\n</code></pre>\n</blockquote>\n\n<p>Fair question - the answer is 'No, your simpler alternative does not do the same thing'.</p>\n\n<p>Suppose I write this before your test:</p>\n\n<pre><code>VAR=\n</code></pre>\n\n<p>Your test will say \"VAR is not set at all\", but mine will say (by implication because it echoes nothing) \"VAR is set but its value might be empty\".  Try this script:</p>\n\n<pre><code>(\nunset VAR\nif [ -z \"${VAR+xxx}\" ]; then echo JL:1 VAR is not set at all; fi\nif [ -z \"${VAR}\" ];     then echo MP:1 VAR is not set at all; fi\nVAR=\nif [ -z \"${VAR+xxx}\" ]; then echo JL:2 VAR is not set at all; fi\nif [ -z \"${VAR}\" ];     then echo MP:2 VAR is not set at all; fi\n)\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>JL:1 VAR is not set at all\nMP:1 VAR is not set at all\nMP:2 VAR is not set at all\n</code></pre>\n\n<p>In the second pair of tests, the variable is set, but it is set to the empty value.  This is the distinction that the <code>${VAR=value}</code> and <code>${VAR:=value}</code> notations make.  Ditto for <code>${VAR-value}</code> and <code>${VAR:-value}</code>, and <code>${VAR+value}</code> and <code>${VAR:+value}</code>, and so on.</p>\n\n<hr>\n\n<p>As <a href=\"http://stackoverflow.com/users/14731/gili\">Gili</a> points out in his <a href=\"http://stackoverflow.com/a/20003892\">answer</a>, if you  run <code>bash</code> with the <code>set -o nounset</code> option, then the basic answer above fails with <code>unbound variable</code>.  It is easily remedied:</p>\n\n<pre><code>if [ -z \"${VAR+xxx}\" ]; then echo VAR is not set at all; fi\nif [ -z \"${VAR-}\" ] &amp;&amp; [ \"${VAR+xxx}\" = \"xxx\" ]; then echo VAR is set but empty; fi\n</code></pre>\n\n<p>Or you could cancel the <code>set -o nounset</code> option with <code>set +u</code> (<code>set -u</code> being equivalent to <code>set -o nounset</code>).</p>\n    "},{"t":"command-line - what is the purpose of “&&”?","l":"http://stackoverflow.com/questions/4510640/command-line-what-is-the-purpose-of","q":"\n\n<p>As far as I know, using <code>&amp;</code> after the command is for running it in the background.</p>\n\n<p>Example of <code>&amp;</code> usage: <code>tar -czf file.tar.gz dirname &amp;</code></p>\n\n<p>But how about <code>&amp;&amp;</code>? (look at this example: <a href=\"http://serverfault.com/questions/215179/centos-100-disk-full-how-to-remove-log-files-history-etc#answer-215188\">http://serverfault.com/questions/215179/centos-100-disk-full-how-to-remove-log-files-history-etc#answer-215188</a>)</p>\n    ","a":"\n<p><code>&amp;&amp;</code> lets you do something based on whether the previous command completed successfully - that's why you tend to see it chained as <code>do_something &amp;&amp; do_something_else_that_depended_on_something</code>. </p>\n    "},{"t":"How do I get cURL to not show the progress bar?","l":"http://stackoverflow.com/questions/7373752/how-do-i-get-curl-to-not-show-the-progress-bar","q":"\n\n<p>I'm trying to use cURL in a script and get it to <strong><em>not</em></strong> show the progress bar. </p>\n\n<p>I've tried the <code>-s</code>, <code>-silent</code>, <code>-S</code>, and <code>-quiet</code> options, but none of them work.</p>\n\n<p>Here's a typical command I've tried:</p>\n\n<pre><code>curl -s http://google.com &gt; temp.html\n</code></pre>\n\n<p>I only get the progress bar when pushing it to a file, so <code>curl -s http://google.com</code> doesn't have a progress bar, but <code>curl -s http://google.com &gt; temp.html</code> does.</p>\n    ","a":"\n<pre><code>curl -s http://google.com &gt; temp.html\n</code></pre>\n\n<p>works for curl version 7.19.5 on Ubuntu 9.10 (no progress bar). But if for some reason that does not work on your platform, you could always redirect stderr to /dev/null:</p>\n\n<pre><code>curl  http://google.com 2&gt;/dev/null &gt; temp.html\n</code></pre>\n    "},{"t":"How to create cronjob using bash","l":"http://stackoverflow.com/questions/878600/how-to-create-cronjob-using-bash","q":"\n\n<p>Does crontab have an argument for creating cronjobs without using the editor (crontab -e). If so, What would be the code create a cronjob from a bash script?</p>\n    ","a":"\n<p>You can add to the crontab as follows:</p>\n\n<pre><code>#write out current crontab\ncrontab -l &gt; mycron\n#echo new cron into cron file\necho \"00 09 * * 1-5 echo hello\" &gt;&gt; mycron\n#install new cron file\ncrontab mycron\nrm mycron\n</code></pre>\n    "},{"t":"Shell - Multiple commands in one line","l":"http://stackoverflow.com/questions/5130847/shell-multiple-commands-in-one-line","q":"\n\n<p>Say I have a file <code>/templates/apple</code> and I want to</p>\n\n<ol>\n<li>put it in two different places and then</li>\n<li>remove the original.</li>\n</ol>\n\n<p>So, <code>/templates/apple</code> will be copied to <code>/templates/used</code> AND <code>/templates/inuse</code>\nand then after that I’d like to remove the original.</p>\n\n<p>Is <code>cp</code> the best way to do this, followed by <code>rm</code>? Or is there a better way?</p>\n\n<p>I want to do it all in one line so I’m thinking it would look something like:</p>\n\n<pre><code>cp /templates/apple /templates/used | cp /templates/apple /templates/inuse | rm /templates/apple\n</code></pre>\n\n<p>Is this the correct syntax?</p>\n    ","a":"\n<p>You are using <code>|</code> (pipe) to direct the output of a command into another command. What you are looking for is <code>&amp;&amp;</code> operator to execute the next command only if the previous one succeeded:</p>\n\n<pre><code>cp /templates/apple /templates/used &amp;&amp; cp /templates/apple /templates/inuse &amp;&amp; rm /templates/apple\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>cp /templates/apple /templates/used &amp;&amp; mv /templates/apple /templates/inuse\n</code></pre>\n\n<hr>\n\n<p>To summarize (non-exhaustively) bash's command operators/separators:</p>\n\n<ul>\n<li><code>|</code> pipes (pipelines) the standard output (<code>stdout</code>) of one command into the standard input of another one. Note that <code>stderr</code> still goes into its default destination, whatever that happen to be.</li>\n<li><code>|&amp;</code>pipes both <code>stdout</code> and <code>stderr</code> of one command into the standard input of another one. Very useful, available in bash version 4 and above.</li>\n<li><code>&amp;&amp;</code> executes the right-hand command of <code>&amp;&amp;</code> only if the previous one succeeded.</li>\n<li><code>||</code> executes the right-hand command of <code>||</code> only it the previous one failed.</li>\n<li><code>;</code> executes the right-hand command of <code>;</code> always regardless whether the previous command succeeded or failed. Unless <code>set -e</code> was previously invoked, which causes <code>bash</code> to fail on an error.</li>\n</ul>\n    "},{"t":"Check if an array contains a value","l":"http://stackoverflow.com/questions/3685970/check-if-an-array-contains-a-value","q":"\n\n<p>In Bash, what is the simplest way to test if an array contains a certain value?    </p>\n\n<p><strong>EDIT</strong>: with help from the answers and the comments, after some testing, I came up with this:</p>\n\n<pre><code>function contains() {\n    local n=$#\n    local value=${!n}\n    for ((i=1;i &lt; $#;i++)) {\n        if [ \"${!i}\" == \"${value}\" ]; then\n            echo \"y\"\n            return 0\n        fi\n    }\n    echo \"n\"\n    return 1\n}\n\nA=(\"one\" \"two\" \"three four\")\nif [ $(contains \"${A[@]}\" \"one\") == \"y\" ]; then\n    echo \"contains one\"\nfi\nif [ $(contains \"${A[@]}\" \"three\") == \"y\" ]; then\n    echo \"contains three\"\nfi\n</code></pre>\n\n<p>I'm not sure if it's the best solution, but it seems to work.</p>\n    ","a":"\n<p>There is <a href=\"http://tldp.org/LDP/abs/html/arrays.html#ARRAYSTROPS\">sample code that shows how to replace a substring from an array</a>.  You can make a copy of the array and try to remove the target value from the copy.  If the copy and original are then different, then the target value exists in the original string.</p>\n\n<p>The straightforward (but potentially more time-consuming) solution is to simply iterate through the entire array and check each item individually.  This is what I typically do because it is easy to implement and you can wrap it in a function (see <a href=\"http://www.faqs.org/docs/abs/HTML/assortedtips.html#ARRFUNC\">this info on passing an array to a function</a>).</p>\n    "},{"t":"How does this bash fork bomb work? [duplicate]","l":"http://stackoverflow.com/questions/991142/how-does-this-bash-fork-bomb-work","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/515844/the-bash-command-will-spawn-processes-to-kernel-death-can-you-exp\" dir=\"ltr\">The Bash command :(){ :|:&amp; };: will spawn processes to kernel death. Can you explain the syntax?</a>\n                <span class=\"question-originals-answer-count\">\n                    4 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>According to Wikipedia, the following is a very elegant bash fork bomb:</p>\n\n<pre><code>:(){ :|:&amp; };:\n</code></pre>\n\n<p>How does it work?</p>\n    ","a":"\n<p>Breaking it down, there are three big pieces:</p>\n\n<pre><code>:()      # Defines a function, \":\". It takes no arguments.\n{ ... }; # The body of the function.\n:        # Invoke the function \":\" that was just defined.\n</code></pre>\n\n<p>Inside the body, the function is invoked twice and the pipeline is backgrounded; each successive invocation on the processes spawns even more calls to \":\". This leads rapidly to an explosive consumption in system resources, grinding things to a halt. </p>\n\n<p>Note that invoking it once, infinitely recursing, wouldn't be good enough, since that would just lead to a stack overflow on the original process, which is messy but can be dealt with.</p>\n\n<p>A more human-friendly version looks like this:</p>\n\n<pre><code>kablammo() {             # Declaration\n  kablammo | kablammo&amp;   # The problematic body.\n}; kablammo              # End function definition; invoke function.\n</code></pre>\n\n<p><strong>Edit:</strong> William's comment below was a better wording of what I said above, so I've edited to incorporate that suggestion.</p>\n    "},{"t":"Extract File Basename Without Path and Extension in Bash","l":"http://stackoverflow.com/questions/2664740/extract-file-basename-without-path-and-extension-in-bash","q":"\n\n<p>Given  file names like these:</p>\n\n<pre><code>/the/path/foo.txt\nbar.txt\n</code></pre>\n\n<p>I hope to get</p>\n\n<pre><code>foo\nbar\n</code></pre>\n\n<p>Why this doesn't work?</p>\n\n<pre><code>#!/bin/bash\n\nfullfile=$1\nfname=$(basename $fullfile)\nfbname=${fname%.*}\necho $fbname\n</code></pre>\n\n<p>What's the right way to do it?</p>\n    ","a":"\n<p>You don't have to call external <code>basename</code> command. Instead, you could use the following commands:</p>\n\n<pre><code>$ s=/the/path/foo.txt\n$ echo ${s##*/}\nfoo.txt\n$ s=${s##*/}\n$ echo ${s%.txt}\nfoo\n$ echo ${s%.*}\nfoo\n</code></pre>\n\n<p>(From <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion\">here</a>) even though the OP is specifically about BASH, it is important to emphasize that the above commands use the BASH Shell Parameter Expansion and may not work in other shells.</p>\n    "},{"t":"Easy Way to Split a Large Text File?","l":"http://stackoverflow.com/questions/2016894/easy-way-to-split-a-large-text-file","q":"\n\n<p>I've got a large (by number of lines) plain text file that I'd like to split into smaller files, also by number of lines.  So if my file has around 2M lines, I'd like to split it up into 10 files that contain 200k lines, or 100 files that contain 20k lines (plus one file with the remainder; being evenly divisible doesn't matter).</p>\n\n<p>I could do this fairly easily in Python but I'm wondering if there's any kind of ninja way to do this using bash and unix utils (as opposed to manually looping and counting / partitioning lines).</p>\n    ","a":"\n<p>Have you looked at the split command?</p>\n\n<pre><code>$ split --help\nUsage: split [OPTION] [INPUT [PREFIX]]\nOutput fixed-size pieces of INPUT to PREFIXaa, PREFIXab, ...; default\nsize is 1000 lines, and default PREFIX is `x'.  With no INPUT, or when INPUT\nis -, read standard input.\n\nMandatory arguments to long options are mandatory for short options too.\n  -a, --suffix-length=N   use suffixes of length N (default 2)\n  -b, --bytes=SIZE        put SIZE bytes per output file\n  -C, --line-bytes=SIZE   put at most SIZE bytes of lines per output file\n  -d, --numeric-suffixes  use numeric suffixes instead of alphabetic\n  -l, --lines=NUMBER      put NUMBER lines per output file\n      --verbose           print a diagnostic to standard error just\n                            before each output file is opened\n      --help     display this help and exit\n      --version  output version information and exit\n</code></pre>\n\n<p>You could do something like:</p>\n\n<pre><code>split -l 200000 filename\n</code></pre>\n    "},{"t":"bash: When do we need curly braces in variables?","l":"http://stackoverflow.com/questions/8748831/bash-when-do-we-need-curly-braces-in-variables","q":"\n\n<p>I have be going through a lot of shell scripts and have a question. Apologies if it sounds trivial. </p>\n\n<p>The question is the usage of <code>{}</code> when expanding variables. For example in certain scripts, I have seen the following</p>\n\n<pre><code>var=10        # Declare variable\n\necho \"${var}\" # One use of the variable\necho \"$var\"   # Another use of the variable\n</code></pre>\n\n<p>Is there a significant difference, or is it just style? Is one preferred over the other?</p>\n    ","a":"\n<p>In this particular example, it makes no difference. However, the <code>{}</code> in <code>${}</code> are useful if you want to expand the variable <code>foo</code> in the string</p>\n\n<pre><code>\"${foo}bar\"\n</code></pre>\n\n<p>since <code>\"$foobar\"</code> would instead expand <code>foobar</code>.</p>\n\n<p>Curly braces are also unconditionally required when:</p>\n\n<ul>\n<li>expanding arrays, as in <code>${array[42]}</code></li>\n<li>using parameter expansion operations, as in <code>${filename%.*}</code> (remove extension)</li>\n<li>expanding positional parameters beyond 9: <code>\"$8 $9 ${10} ${11}\"</code></li>\n</ul>\n\n<p>Doing this everywhere, instead of just in potentially ambiguous cases, can be considered good programming practice. This is both for consistency and to avoid surprises like <code>$foo_$bar.jpg</code>, where it's not visually obvious that the underscore becomes part of the variable name.</p>\n    "},{"t":"How can I format my grep output to show line numbers at the end of the line, and also the hit count?","l":"http://stackoverflow.com/questions/3968103/how-can-i-format-my-grep-output-to-show-line-numbers-at-the-end-of-the-line-and","q":"\n\n<p>I'm using grep to match string in a file. Here is an example file:</p>\n\n<pre><code>example one,\nexample two null,\nexample three,\nexample four null,\n</code></pre>\n\n<p><code>grep -i null myfile.txt</code> returns </p>\n\n<pre><code>example two null,\nexample four null,\n</code></pre>\n\n<p>How can I return matched lines together with their line numbers like this:</p>\n\n<pre><code>  example two null, - Line number : 2\n  example four null, - Line number : 4\n  Total null count : 2\n</code></pre>\n\n<p>I know -c returns total matched lines, but I don't how to format it properly to add <code>total null count</code> in front, and I don't know how to add the line numbers.</p>\n\n<p>What can I do?</p>\n    ","a":"\n<p><code>-n</code> returns line number.</p>\n\n<pre><code>$ grep -in null myfile.txt\n\n2:example two null,\n4:example four null,\n</code></pre>\n\n<p>Combine with <code>awk</code> to print out the line number after the match:</p>\n\n<pre><code>$ grep -in null myfile.txt | awk -F: '{print $2\" - Line number : \"$1}'\n\nexample two null, - Line number : 2\nexample four null, - Line number : 4\n</code></pre>\n\n<p>Use command substitution to print out the total null count:</p>\n\n<pre><code>$ echo \"Total null count :\" $(grep -ic null myfile.txt)\n\nTotal null count : 2\n</code></pre>\n    "},{"t":"Ternary operator (?:) in Bash","l":"http://stackoverflow.com/questions/3953645/ternary-operator-in-bash","q":"\n\n<p>Is there a way to do something like this</p>\n\n<pre><code>int a = (b == 5) ? c : d;</code></pre>\n\n<p>using Bash?</p>\n    ","a":"\n<p>ternary operator <code>? :</code> is just short form of <code>if/else</code></p>\n\n<pre><code>case \"$b\" in\n 5) a=$c ;;\n *) a=$d ;;\nesac\n</code></pre>\n\n<p>Or</p>\n\n<pre><code> [[ $b = 5 ]] &amp;&amp; a=\"$c\" || a=\"$d\"\n</code></pre>\n    "},{"t":"How to create a file in Linux from terminal window?","l":"http://stackoverflow.com/questions/9381463/how-to-create-a-file-in-linux-from-terminal-window","q":"\n\n<p>What's the easiest way to create a file in Linux?</p>\n    ","a":"\n<p>Depending on what you want the file to contain:</p>\n\n<ul>\n<li><code>touch /path/to/file</code> for an empty file</li>\n<li><p><code>somecommand &gt; /path/to/file</code> for a file containing the output of some command.</p>\n\n<pre><code>  eg: grep --help &gt; randomtext.txt\n      echo \"This is some text\" &gt; randomtext.txt\n</code></pre></li>\n<li><p><code>nano /path/to/file</code> or <code>vi /path/to/file</code> (or <code>any other editor emacs,gedit etc</code>)<br>\nIt either opens the existing one for editing or creates &amp; opens the empty file to enter, if it doesn't exist</p></li>\n</ul>\n    "},{"t":"What should a longtime Windows user know when starting to use Linux? [closed]","l":"http://stackoverflow.com/questions/1576/what-should-a-longtime-windows-user-know-when-starting-to-use-linux","q":"\n\n<p>We've finally moved our websites to a decent <a href=\"http://www.simplehelix.com/\" rel=\"nofollow\">host</a>, and for the first time we have shell access.</p>\n\n<p>I know very little about using Linux. I can navigate through the file system, read files with <a href=\"http://en.wikipedia.org/wiki/Vim_%28text_editor%29\" rel=\"nofollow\">Vim</a> and I'm aware of the man command, and I have been able to work out solutions to problems as they show up (eventually), but I know I'm unaware of a lot.</p>\n\n<p>We currently only use the host to hold our live sites, I'm sure that we use it more effectively, but I'm not sure where to start.</p>\n\n<p>So with web development in mind:</p>\n\n<ul>\n<li>What are the essential commands that every Linux user should know about?</li>\n<li>What are the most useful commands that I should look into?</li>\n</ul>\n    ","a":"\n<p>If you only have shell access to your host, a number of issues are already taken care of for you, (you don't have to maintain the system yourself).</p>\n\n<p>The useful commands depend on what you primarily want to do, such as interacting with your source control system via command line (<em>you do use source control, don't you?</em>)  You already know how to use vim and navigate through the filesystem using <code>cd</code> and <code>ls</code>, so that is a great start.</p>\n\n<p>Most useful commands:</p>\n\n<ul>\n<li><a href=\"http://www.linuxmanpages.com/man1/ls.1.php\">ls</a>\n<ul>\n<li>list files in current directory (like Windows <code>dir</code>)</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/cd.1.php\">cd</a>\n<ul>\n<li>change directory</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/cp.1.php\">cp</a><br>\n<ul>\n<li>copying file(s)</li>\n<li>example: <pre><code>$&gt; cp {file1} {file2}<br>\n$&gt; cp /home/jms/file1.txt /home/jms/file1-copy.txt</code></pre></li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/mv.1.php\">mv</a><br>\n<ul>\n<li>moving or renaming file(s)</li>\n<li>example - rename file1.txt: <pre><code>$&gt; mv {file1} {file2}\n$&gt; mv /home/jms/file1.txt /home/jms/file_1_new_name.txt</code></pre> </li>\n<li>example - move file1.txt: <pre><code>$&gt; mv /home/jms/file1.txt /home/jms/myfiles/file1.txt </code></pre>    </li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/man.1.php\">man</a><br>\n<ul>\n<li>see the manual pages for a command</li>\n<li>example: <pre><code><a href=\"http://www.thinkgeek.com/tshirts/frustrations/5b7e/\">$&gt; man woman</a>\n$&gt; Segmentation fault (core dumped)</code></pre></li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/find.1.php\">find</a>\n<ul>\n<li>search through directories recursively (and optionally perform some action for each match)</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/grep.1.php\">grep</a><br>\n<ul>\n<li>search for pattern matches</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/wc.1.php\">wc</a>\n<ul>\n<li>word count / character count / line count </li>\n<li>example: counting the files in a the current directory (uses ls and wc)<pre><code>$&gt; ls | wc -l</code></pre></li>\n<li>example: count the files that contain .txt in your home directory (uses find, grep, and wc)<pre><code>$&gt; find /home/jms | grep *.txt | wc -l</code></pre></li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/less.1.php\">less</a>\n<ul>\n<li>lightweight file viewer</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/head.1.php\">head</a>\n<ul>\n<li>see the first few lines of a file</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/tail.1.php\">tail</a>\n<ul>\n<li>see the last few lines of a file (useful for realtime logging)</li>\n<li>example: monitor a logfile as logging occurs while an application is running<pre><code>$&gt; tail -f /var/log/somelogfile.log</code></pre></li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/passwd.1.php\">passwd</a>\n<ul>\n<li>change your password</li>\n<li>example: will act on current user and prompt for old/new password<pre><code>$&gt; passwd</code></pre></li>\n<li>example: will change password for the user named someuser<pre><code>$&gt; passwd someuser</code></pre></li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/ssh.1.php\">ssh</a>\n<ul>\n<li>secure shell for logging into remote systems</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/touch.1.php\">touch</a>\n<ul>\n<li>set file \"last modified\" time to now (creates a new file if none exists)</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/rm.1.php\">rm</a>\n<ul>\n<li>remove a file</li>\n<li>can also remove files and directories recursively</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/mkdir.1.php\">mkdir</a> / <a href=\"http://www.linuxmanpages.com/man1/rmdir.1.php\">rmdir</a>\n<ul>\n<li>create or remove a directory</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/df.1.php\">df</a>\n<ul>\n<li>check free disk space on volumes</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/du.1.php\">du</a>\n<ul>\n<li>check used disk space on a directory (recursively)</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/ln.1.php\">ln</a>\n<ul>\n<li>make a new file/directory that is a \"link\" to another (such as a symbolic link)</li>\n<li>example (symbolic link): <pre>$&gt; ln -s /path/to/destination</pre></li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/kill.1.php\">kill</a>\n<ul>\n<li>kill/stop a running process</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/chmod.1.php\">chmod</a>, <a href=\"http://www.linuxmanpages.com/man1/chown.1.php\">chown</a>\n<ul>\n<li>change permissions / ownership for files.</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man8/sudo.8.php\">sudo</a>\n<ul>\n<li>run a command with superuser (ie \"root\") privileges</li>\n<li>your web host may not give you permission to do this</li>\n</ul></li>\n<li><a href=\"http://www.linuxmanpages.com/man1/vi.1.php\">vi</a>\n<ul>\n<li>a text editor included with every linux installation</li>\n</ul></li>\n</ul>\n\n<p>A number of these items you will have an easier time learning by experimentation.</p>\n\n<p>A very <a href=\"http://tldp.org/LDP/abs/html/\">comprehensive guide to bash scripting</a> might also be of use.</p>\n    "},{"t":"How to recursively find the latest modified file in a directory?","l":"http://stackoverflow.com/questions/4561895/how-to-recursively-find-the-latest-modified-file-in-a-directory","q":"\n\n<p>It seems that <code>ls</code> doesn't sort the files correctly when doing a recursive call:</p>\n\n<pre><code>ls -altR . | head -n 3\n</code></pre>\n\n<p>How can I find the most recently modified file in a directory (including subdirectories)?</p>\n    ","a":"\n<pre><code>find . -type f -printf '%T@ %p\\n' | sort -n | tail -1 | cut -f2- -d\" \"\n</code></pre>\n\n<p>For a huge tree, it might be hard for <code>sort</code> to keep everything in memory.</p>\n\n<p><code>%T@</code> gives you the modification time like a unix timestamp, <code>sort -n</code> sorts numerically, <code>tail -1</code> takes the last line (highest timestamp), <code>cut -f2 -d\" \"</code> cuts away the first field (the timestamp) from the output.</p>\n\n<p><strong>Edit:</strong> Just as <code>-printf</code> is probably GNU-only, ajreals usage of <code>stat -c</code> is too. Although it is possible to do the same on BSD, the options for formatting is different (<code>-f \"%m %N\"</code> it would seem)</p>\n\n<p>And I missed the part of plural; if you want more then <em>the</em> latest file, just bump up the tail argument.</p>\n    "},{"t":"How do I execute any command editing its file (argument) “in place” using bash?","l":"http://stackoverflow.com/questions/146435/how-do-i-execute-any-command-editing-its-file-argument-in-place-using-bash","q":"\n\n<p>I have a file temp.txt, that I want to sort with the <code>sort</code> command in bash.</p>\n\n<p>I want the sorted results to replace the original file.</p>\n\n<p>This doesn't work for example (I get an empty file):</p>\n\n<pre><code>sortx temp.txt &gt; temp.txt\n</code></pre>\n\n<p>Can this be done in one line without resorting to copying to temporary files?</p>\n\n<hr>\n\n<p>EDIT: The <code>-o</code> option is very cool for <code>sort</code>. I used <code>sort</code> in my question as an example. I run into the same problem with other commands:</p>\n\n<pre><code>uniq temp.txt &gt; temp.txt.\n</code></pre>\n\n<p>Is there a better general solution?</p>\n    ","a":"\n<pre><code>sort temp.txt -o temp.txt\n</code></pre>\n    "},{"t":"bash script: get just filename from path","l":"http://stackoverflow.com/questions/3362920/bash-script-get-just-filename-from-path","q":"\n\n<p>How would I get just the filename without the extension and no path?</p>\n\n<p>The following gives me no extension but I still have the path attached:</p>\n\n<pre><code>source_file_filename_no_ext=${source_file%.*}\n</code></pre>\n    ","a":"\n<p>Most UNIXes have a <code>basename</code> executable for just that purpose.</p>\n\n<pre><code>pax&gt; a=/tmp/file.txt\npax&gt; b=$(basename $a)\npax&gt; echo $b\nfile.txt\n</code></pre>\n\n<hr>\n\n<p>If you want a bash-only solution, you can start with:</p>\n\n<pre><code>pax&gt; a=/tmp/xx/file.tar.gz\npax&gt; xpath=${a%/*} \npax&gt; xbase=${a##*/}\npax&gt; xfext=${xbase##*.}\npax&gt; xpref=${xbase%.*}\npax&gt; echo;echo path=${xpath};echo pref=${xpref};echo ext=${xfext}\n\npath=/tmp/xx\npref=file.tar\next=gz\n</code></pre>\n\n<p>That little snippet sets <code>xpath</code> (the file path), <code>xpref</code> (the file prefix) and <code>xfext</code> (the file extension).</p>\n    "},{"t":"BASH: Convert absolute path into relative path given a current directory","l":"http://stackoverflow.com/questions/2564634/bash-convert-absolute-path-into-relative-path-given-a-current-directory","q":"\n\n<pre><code>absolute=\"/foo/bar\"\ncurrent=\"/foo/baz/foo\"\n\n# magic\n\nrelative=\"../../bar\"\n</code></pre>\n\n<p>Can you help me with magic? (Hopefully not too complicated code...)</p>\n    ","a":"\n<pre><code>$ python -c \"import os.path; print os.path.relpath('/foo/bar', '/foo/baz/foo')\"\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>../../bar\n</code></pre>\n    "},{"t":"Bash: Recursively remove files","l":"http://stackoverflow.com/questions/2016844/bash-recursively-remove-files","q":"\n\n<p>Does anyone have a solution to remove those pesky ._ and .DS_Store files that one gets after moving files from a Mac to A Linux Server?</p>\n\n<p>specify a start directory and let it go? like /var/www/html/ down...</p>\n    ","a":"\n<p>change to the directory, and use:</p>\n\n<pre><code>find . -name \".DS_Store\" -print0 | xargs -0 rm -rf\nfind . -name \"._*\" -print0 | xargs -0 rm -rf\n</code></pre>\n\n<p>Not tested, try them without the xargs first!</p>\n\n<p>You could replace the period after find, with the directory, instead of changing to the directory first.</p>\n\n<pre><code>find /dir/here ...\n</code></pre>\n    "},{"t":"How to display a specific user's commits in svn log?","l":"http://stackoverflow.com/questions/4499910/how-to-display-a-specific-users-commits-in-svn-log","q":"\n\n<p>How to display a specific user's commits in svn? I didn't find any switches for that for svn log.</p>\n    ","a":"\n<p>You could use this:</p>\n\n<pre><code>svn log | sed -n '/USERNAME/,/-----$/ p' \n</code></pre>\n\n<p>It will show you every commit made by the specified user (USERNAME).</p>\n    "},{"t":"design patterns or best practices for shell scripts [closed]","l":"http://stackoverflow.com/questions/78497/design-patterns-or-best-practices-for-shell-scripts","q":"\n\n<p>Does anyone know of any resources that talk about best practices or design patterns for shell scripts (sh, bash etc...)?</p>\n    ","a":"\n<p>I wrote quite complex shell scripts and my first suggestion is \"don't\". The reason is that is fairly easy to make a small mistake that hinders your script, or even make it dangerous.</p>\n\n<p>That said, I don't have other resources to pass you but my personal experience. \nHere is what I normally do, which is overkill, but tends to be solid, although <em>very</em> verbose.</p>\n\n<p><strong>Invocation</strong></p>\n\n<p>make your script accept long and short options. be careful because there are two commands to parse options, getopt and getopts. Use getopt as you face less trouble.</p>\n\n<pre><code>CommandLineOptions__config_file=\"\"\nCommandLineOptions__debug_level=\"\"\n\ngetopt_results=`getopt -s bash -o c:d:: --long config_file:,debug_level:: -- \"$@\"`\n\nif test $? != 0\nthen\n    echo \"unrecognized option\"\n    exit 1\nfi\n\neval set -- \"$getopt_results\"\n\nwhile true\ndo\n    case \"$1\" in\n        --config_file)\n            CommandLineOptions__config_file=\"$2\";\n            shift 2;\n            ;;\n        --debug_level)\n            CommandLineOptions__debug_level=\"$2\";\n            shift 2;\n            ;;\n        --)\n            shift\n            break\n            ;;\n        *)\n            echo \"$0: unparseable option $1\"\n            EXCEPTION=$Main__ParameterException\n            EXCEPTION_MSG=\"unparseable option $1\"\n            exit 1\n            ;;\n    esac\ndone\n\nif test \"x$CommandLineOptions__config_file\" == \"x\"\nthen\n    echo \"$0: missing config_file parameter\"\n    EXCEPTION=$Main__ParameterException\n    EXCEPTION_MSG=\"missing config_file parameter\"\n    exit 1\nfi\n</code></pre>\n\n<p>Another important point is that a program should always return zero if completes successfully, non-zero if something went wrong.</p>\n\n<p><strong>Function calls</strong></p>\n\n<p>You can call functions in bash, just remember to define them before the call. Functions are like scripts, they can only return numeric values. This means that you have to invent a different strategy to return string values. My strategy is to use a variable called RESULT to store the result, and returning 0 if the function completed cleanly. \nAlso, you can raise exceptions if you are returning a value different from zero, and then set two \"exception variables\" (mine: EXCEPTION and EXCEPTION_MSG), the first containing the exception type and the second a human readable message.</p>\n\n<p>When you call a function, the parameters of the function are assigned to the special vars $0, $1 etc. I suggest you to put them into more meaningful names. declare the variables inside the function as local:</p>\n\n<pre><code>function foo {\n   local bar=\"$0\"\n}\n</code></pre>\n\n<p><strong>Error prone situations</strong></p>\n\n<p>In bash, unless you declare otherwise, an unset variable is used as an empty string. This is very dangerous in case of typo, as the badly typed variable will not be reported, and it will be evaluated as empty. use</p>\n\n<pre><code>set -o nounset\n</code></pre>\n\n<p>to prevent this to happen. Be careful though, because if you do this, the program will abort every time you evaluate an undefined variable. For this reason, the only way to check if a variable is not defined is the following:</p>\n\n<pre><code>if test \"x${foo:-notset}\" == \"xnotset\"\nthen\n    echo \"foo not set\"\nfi\n</code></pre>\n\n<p>You can declare variables as readonly:</p>\n\n<pre><code>readonly readonly_var=\"foo\"\n</code></pre>\n\n<p><strong>Modularization</strong></p>\n\n<p>You can achieve \"python like\" modularization if you use the following code:</p>\n\n<pre><code>set -o nounset\nfunction getScriptAbsoluteDir {\n    # @description used to get the script path\n    # @param $1 the script $0 parameter\n    local script_invoke_path=\"$1\"\n    local cwd=`pwd`\n\n    # absolute path ? if so, the first character is a /\n    if test \"x${script_invoke_path:0:1}\" = 'x/'\n    then\n        RESULT=`dirname \"$script_invoke_path\"`\n    else\n        RESULT=`dirname \"$cwd/$script_invoke_path\"`\n    fi\n}\n\nscript_invoke_path=\"$0\"\nscript_name=`basename \"$0\"`\ngetScriptAbsoluteDir \"$script_invoke_path\"\nscript_absolute_dir=$RESULT\n\nfunction import() { \n    # @description importer routine to get external functionality.\n    # @description the first location searched is the script directory.\n    # @description if not found, search the module in the paths contained in $SHELL_LIBRARY_PATH environment variable\n    # @param $1 the .shinc file to import, without .shinc extension\n    module=$1\n\n    if test \"x$module\" == \"x\"\n    then\n        echo \"$script_name : Unable to import unspecified module. Dying.\"\n        exit 1\n    fi\n\n    if test \"x${script_absolute_dir:-notset}\" == \"xnotset\"\n    then\n        echo \"$script_name : Undefined script absolute dir. Did you remove getScriptAbsoluteDir? Dying.\"\n        exit 1\n    fi\n\n    if test \"x$script_absolute_dir\" == \"x\"\n    then\n        echo \"$script_name : empty script path. Dying.\"\n        exit 1\n    fi\n\n    if test -e \"$script_absolute_dir/$module.shinc\"\n    then\n        # import from script directory\n        . \"$script_absolute_dir/$module.shinc\"\n    elif test \"x${SHELL_LIBRARY_PATH:-notset}\" != \"xnotset\"\n    then\n        # import from the shell script library path\n        # save the separator and use the ':' instead\n        local saved_IFS=\"$IFS\"\n        IFS=':'\n        for path in $SHELL_LIBRARY_PATH\n        do\n            if test -e \"$path/$module.shinc\"\n            then\n                . \"$path/$module.shinc\"\n                return\n            fi\n        done\n        # restore the standard separator\n        IFS=\"$saved_IFS\"\n    fi\n    echo \"$script_name : Unable to find module $module.\"\n    exit 1\n}\n</code></pre>\n\n<p>you can then import files with the extension .shinc with the following syntax</p>\n\n<p>import \"AModule/ModuleFile\"</p>\n\n<p>Which will be searched in SHELL_LIBRARY_PATH. As you always import in the global namespace, remember to prefix all your functions and variables with a proper prefix, otherwise you risk name clashes. I use double underscore as the python dot.</p>\n\n<p>Also, put this as first thing in your module</p>\n\n<pre><code># avoid double inclusion\nif test \"${BashInclude__imported+defined}\" == \"defined\"\nthen\n    return 0\nfi\nBashInclude__imported=1\n</code></pre>\n\n<p><strong>Object oriented programming</strong></p>\n\n<p>In bash, you cannot do object oriented programming, unless you build a quite complex system of allocation of objects (I thought about that. it's feasible, but insane).\nIn practice, you can however do \"Singleton oriented programming\": you have one instance of each object, and only one.</p>\n\n<p>What I do is: i define an object into a module (see the modularization entry). Then I define empty vars (analogous to member variables) an init function (constructor) and member functions, like in this example code</p>\n\n<pre><code># avoid double inclusion\nif test \"${Table__imported+defined}\" == \"defined\"\nthen\n    return 0\nfi\nTable__imported=1\n\nreadonly Table__NoException=\"\"\nreadonly Table__ParameterException=\"Table__ParameterException\"\nreadonly Table__MySqlException=\"Table__MySqlException\"\nreadonly Table__NotInitializedException=\"Table__NotInitializedException\"\nreadonly Table__AlreadyInitializedException=\"Table__AlreadyInitializedException\"\n\n# an example for module enum constants, used in the mysql table, in this case\nreadonly Table__GENDER_MALE=\"GENDER_MALE\"\nreadonly Table__GENDER_FEMALE=\"GENDER_FEMALE\"\n\n# private: prefixed with p_ (a bash variable cannot start with _)\np_Table__mysql_exec=\"\" # will contain the executed mysql command \n\np_Table__initialized=0\n\nfunction Table__init {\n    # @description init the module with the database parameters\n    # @param $1 the mysql config file\n    # @exception Table__NoException, Table__ParameterException\n\n    EXCEPTION=\"\"\n    EXCEPTION_MSG=\"\"\n    EXCEPTION_FUNC=\"\"\n    RESULT=\"\"\n\n    if test $p_Table__initialized -ne 0\n    then\n        EXCEPTION=$Table__AlreadyInitializedException   \n        EXCEPTION_MSG=\"module already initialized\"\n        EXCEPTION_FUNC=\"$FUNCNAME\"\n        return 1\n    fi\n\n\n    local config_file=\"$1\"\n\n      # yes, I am aware that I could put default parameters and other niceties, but I am lazy today\n      if test \"x$config_file\" = \"x\"; then\n          EXCEPTION=$Table__ParameterException\n          EXCEPTION_MSG=\"missing parameter config file\"\n          EXCEPTION_FUNC=\"$FUNCNAME\"\n          return 1\n      fi\n\n\n    p_Table__mysql_exec=\"mysql --defaults-file=$config_file --silent --skip-column-names -e \"\n\n    # mark the module as initialized\n    p_Table__initialized=1\n\n    EXCEPTION=$Table__NoException\n    EXCEPTION_MSG=\"\"\n    EXCEPTION_FUNC=\"\"\n    return 0\n\n}\n\nfunction Table__getName() {\n    # @description gets the name of the person \n    # @param $1 the row identifier\n    # @result the name\n\n    EXCEPTION=\"\"\n    EXCEPTION_MSG=\"\"\n    EXCEPTION_FUNC=\"\"\n    RESULT=\"\"\n\n    if test $p_Table__initialized -eq 0\n    then\n        EXCEPTION=$Table__NotInitializedException\n        EXCEPTION_MSG=\"module not initialized\"\n        EXCEPTION_FUNC=\"$FUNCNAME\"\n        return 1\n    fi\n\n    id=$1\n\n      if test \"x$id\" = \"x\"; then\n          EXCEPTION=$Table__ParameterException\n          EXCEPTION_MSG=\"missing parameter identifier\"\n          EXCEPTION_FUNC=\"$FUNCNAME\"\n          return 1\n      fi\n\n    local name=`$p_Table__mysql_exec \"SELECT name FROM table WHERE id = '$id'\"`\n      if test $? != 0 ; then\n        EXCEPTION=$Table__MySqlException\n        EXCEPTION_MSG=\"unable to perform select\"\n        EXCEPTION_FUNC=\"$FUNCNAME\"\n        return 1\n      fi\n\n    RESULT=$name\n    EXCEPTION=$Table__NoException\n    EXCEPTION_MSG=\"\"\n    EXCEPTION_FUNC=\"\"\n    return 0\n}\n</code></pre>\n\n<p><strong>Trapping and handling signals</strong></p>\n\n<p>I found this useful to catch and handle exceptions.</p>\n\n<pre><code>function Main__interruptHandler() {\n    # @description signal handler for SIGINT\n    echo \"SIGINT caught\"\n    exit\n} \nfunction Main__terminationHandler() { \n    # @description signal handler for SIGTERM\n    echo \"SIGTERM caught\"\n    exit\n} \nfunction Main__exitHandler() { \n    # @description signal handler for end of the program (clean or unclean). \n    # probably redundant call, we already call the cleanup in main.\n    exit\n} \n\ntrap Main__interruptHandler INT\ntrap Main__terminationHandler TERM\ntrap Main__exitHandler EXIT\n\nfunction Main__main() {\n    # body\n}\n\n# catch signals and exit\ntrap exit INT TERM EXIT\n\nMain__main \"$@\"\n</code></pre>\n\n<p><strong>Hints and tips</strong></p>\n\n<p>If something does not work for some reason, try to reorder the code. Order is important and not always intuitive.</p>\n\n<p>do not even consider working with tcsh. it does not support functions, and it's horrible in general. </p>\n\n<p>Hope it helps, although please note. If you have to use the kind of things I wrote here, it means that your problem is too complex to be solved with shell. use another language. I had to use it due to human factors and legacy.</p>\n    "},{"t":"Pseudo-terminal will not be allocated because stdin is not a terminal","l":"http://stackoverflow.com/questions/7114990/pseudo-terminal-will-not-be-allocated-because-stdin-is-not-a-terminal","q":"\n\n<p>I am trying to write a shell scipt that creates some directories on a remote server and then uses scp to copy files from my local machine onto the remote. Here's what I have so far:</p>\n\n<pre><code>ssh -t user@server&lt;&lt;EOT\nDEP_ROOT='/home/matthewr/releases'\ndatestamp=$(date +%Y%m%d%H%M%S)\nREL_DIR=$DEP_ROOT\"/\"$datestamp\nif [ ! -d \"$DEP_ROOT\" ]; then\n    echo \"creating the root directory\"\n    mkdir $DEP_ROOT\nfi\nmkdir $REL_DIR\nexit\nEOT\n\nscp ./dir1 user@server:$REL_DIR\nscp ./dir2 user@server:$REL_DIR\n</code></pre>\n\n<p>Whenever I run it I get this message:</p>\n\n<pre><code>Pseudo-terminal will not be allocated because stdin is not a terminal.\n</code></pre>\n\n<p>And the script just hangs forever.</p>\n\n<p>My public key is trusted on the server and I can run all the commands outside of the script just fine. Any ideas?</p>\n    ","a":"\n<p>Try <code>ssh -t -t</code> to force pseudo-tty allocation even if stdin isn't a terminal.</p>\n\n<p>See also: <a href=\"http://stackoverflow.com/questions/7085429/terminating-ssh-session-executed-by-bash-script\">Terminating SSH session executed by bash script</a></p>\n    "},{"t":"With Bash Scripting, how can I suppress all output from a command?","l":"http://stackoverflow.com/questions/617182/with-bash-scripting-how-can-i-suppress-all-output-from-a-command","q":"\n\n<p>I have a bash script that runs a program with parameters.  That program outputs some status (doing this, doing that...).  There is no option for this program to be quiet.  How can I prevent the script from displaying anything?</p>\n\n<p>I am looking for something like windows \"echo off\".</p>\n    ","a":"\n<p>The following sends standard output to the null device (bit bucket).</p>\n\n<pre><code>scriptname &gt;/dev/null\n</code></pre>\n\n<p>and if you also want error messages to be sent there, use one of (the first may not work in all shells):</p>\n\n<pre><code>scriptname &amp;&gt;/dev/null\nscriptname &gt;/dev/null 2&gt;&amp;1\nscriptname &gt;/dev/null 2&gt;/dev/null\n</code></pre>\n\n<p>and, if you want to record the messages but not see them, replace <code>/dev/null</code> with an actual file, such as:</p>\n\n<pre><code>scriptname &amp;&gt;scriptname.out\n</code></pre>\n\n<p>For completeness, under Windows cmd.exe (where \"nul\" is the equivalent of \"/dev/null\"), it is :</p>\n\n<pre><code>scriptname &gt;nul 2&gt;nul\n</code></pre>\n    "},{"t":"Find and Replace Inside a Text File from a Bash Command","l":"http://stackoverflow.com/questions/525592/find-and-replace-inside-a-text-file-from-a-bash-command","q":"\n\n<p>What's the simplest way to do a find and replace for a given input string, say <code>abc</code>, and replace with another string, say <code>XYZ</code> in file <code>/tmp/file.txt</code>?</p>\n\n<p>I am writting an app and using IronPython to execute commands through SSH — but I don't know Unix that well and don't know what to look for.</p>\n\n<p>I have heard that Bash, apart from being a command line interface, can be a very powerful scripting language. So, if this is true, I assume you can perform actions like these.</p>\n\n<p>Can I do it with bash, and what's the simplest (one line) script to achieve my goal?</p>\n    ","a":"\n<p>File manipulation isn't normally done by Bash, but by programs invoked by Bash, e.g.:</p>\n\n<pre><code>&gt; perl -pi -e 's/abc/XYZ/g' /tmp/file.txt\n</code></pre>\n\n<p>The <code>-i</code> flag tells it to do an in-place replacement.</p>\n\n<p>See <code>man perlrun</code> for more details, including how to take a backup of the original file.</p>\n    "},{"t":"bash - automatically capture output of last executed command into a variable","l":"http://stackoverflow.com/questions/5955577/bash-automatically-capture-output-of-last-executed-command-into-a-variable","q":"\n\n<p>I'd like to be able to use the result of the last executed command in a subsequent command. For example,</p>\n\n<pre><code>$ find . -name foo.txt\n./home/user/some/directory/foo.txt\n</code></pre>\n\n<p>Now let's say I want to be able to open the file in an editor, or delete it, or do something else with it, e.g.</p>\n\n<pre><code>mv &lt;some-variable-that-contains-the-result&gt; /some/new/location\n</code></pre>\n\n<p>How can I do it? Maybe using some bash variable?</p>\n\n<p><strong>Update:</strong></p>\n\n<p>To clarify, I don't want to assign things manually. What I'm after is something like built-in bash variables, e.g.</p>\n\n<pre><code>ls /tmp\ncd $_\n</code></pre>\n\n<p><code>$_</code> holds the last argument of the previous command. I want something similar, but with the output of the last command.</p>\n\n<p><strong>Final update:</strong></p>\n\n<p>Seth's answer has worked quite well. Couple of things to bear in mind:</p>\n\n<ul>\n<li>don't forget to <code>touch /tmp/x</code> when trying the solution for the very first time</li>\n<li>the result will only be stored if last command's exit code was successful</li>\n</ul>\n    ","a":"\n<p>This is a really hacky solution, but it seems to mostly work some of the time.  During testing, I noted it sometimes didn't work very well when getting a <kbd>^C</kbd> on the command line, though I did tweak it a bit to behave a bit better.  </p>\n\n<p>This hack is an interactive mode hack only, and I am pretty confident that I would not recommend it to anyone.  Background commands are likely to cause even less defined behavior than normal.  The other answers are a better way of programmatically getting at results.</p>\n\n<hr>\n\n<p>That being said, here is the \"solution\":</p>\n\n\n\n<pre class=\"lang-bash prettyprint-override\"><code>PROMPT_COMMAND='LAST=\"`cat /tmp/x`\"; exec &gt;/dev/tty; exec &gt; &gt;(tee /tmp/x)'\n</code></pre>\n\n<p>Set this bash environmental variable and issues commands as desired.  <code>$LAST</code> will usually have the output you are looking for:</p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>startide seth&gt; fortune\nCourtship to marriage, as a very witty prologue to a very dull play.\n                -- William Congreve\nstartide seth&gt; echo \"$LAST\"\nCourtship to marriage, as a very witty prologue to a very dull play.\n                -- William Congreve\n</code></pre>\n    "},{"t":"generate a core dump in linux","l":"http://stackoverflow.com/questions/17965/generate-a-core-dump-in-linux","q":"\n\n<p>I have a process in linux that's getting a segmentation fault.  How can I tell it to generate a core dump when it fails?</p>\n    ","a":"\n<p>This depends on what shell you are using.  If you are using bash, then the ulimit command controls several settings relating to program execution, such as whether you should dump core.  If you type</p>\n\n<pre><code>ulimit -c unlimited\n</code></pre>\n\n<p>then that will tell bash that its programs can dump cores of any size.  You can specify a size such as 52M instead of unlimited if you want, but in practice this shouldn't be necessary since the size of core files will probably never be an issue for you.</p>\n\n<p>In tcsh, you'd type</p>\n\n<pre><code>limit coredumpsize unlimited\n</code></pre>\n    "},{"t":"Why do you need ./ (dot-slash) before script name to run it in bash?","l":"http://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-script-name-to-run-it-in-bash","q":"\n\n<p>When running scripts in bash, I have to write <code>./</code> in the beginning:</p>\n\n<pre><code>$ ./manage.py syncdb\n</code></pre>\n\n<p>If I don't, I get an error message:</p>\n\n<pre><code>$ manage.py syncdb\n-bash: manage.py: command not found\n</code></pre>\n\n<p>What is the reason for this? I thought <code>.</code> is an alias for current folder, and therefore these two calls should be equivalent.</p>\n\n<p>I also don't understand why I don't need <code>./</code> when running applications, such as:</p>\n\n<pre><code>user:/home/user$ cd /usr/bin\nuser:/usr/bin$ git\n</code></pre>\n\n<p>(which runs without <code>./</code>)</p>\n    ","a":"\n<p>Because on Unix, usually, the current directory is not in <code>$PATH</code>.</p>\n\n<p>When you type a command the shell looks up a list of directories, as specified by the <code>PATH</code> variable. The current directory is not in that list.</p>\n\n<p>The reason for not having the current directory on that list is security.</p>\n\n<p>Let's say you're root and go into another user's directory and type <code>sl</code> instead of <code>ls</code>. If the current directory is in <code>PATH</code>, the shell will try to execute the <code>sl</code> program in that directory (since there is no other <code>sl</code> program). That <code>sl</code> program might be malicious.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>That <code>sl</code> part was just an example. The directories in <code>PATH</code> are searched sequentially and when a match is made that program is executed. So, depending on how <code>PATH</code> looks, typing a normal command may or may not be enough to run the program in the current directory.</p>\n    "},{"t":"how to split a string in shell and get the last field","l":"http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field","q":"\n\n<p>suppose I have the string <code>1:2:3:4:5</code> and I want to get its last field (<code>5</code> in this case). how do I do that using Bash? I tried <code>cut</code>, but I don't know how to specify the last field with <code>-f</code>.</p>\n    ","a":"\n<p>You can use <a href=\"http://www.linuxjournal.com/article/8919\">string operators</a>:</p>\n\n<pre><code>$ foo=1:2:3:4:5\n$ echo ${foo##*:}\n5\n</code></pre>\n\n<p>This trims everything from the front until a ':', greedily.</p>\n\n<pre><code>${foo  &lt;-- from variable foo\n  ##   &lt;-- greedy front trim\n  *    &lt;-- matches anything\n  :    &lt;-- until the last ':'\n }\n</code></pre>\n    "},{"t":"How to test if string exists in file with Bash shell?","l":"http://stackoverflow.com/questions/4749330/how-to-test-if-string-exists-in-file-with-bash-shell","q":"\n\n<p>I have a file that contains directory names:</p>\n\n<p><code>my_list.txt</code> :</p>\n\n<pre><code>/tmp\n/var/tmp\n</code></pre>\n\n<p>I'd like to check in Bash before I'll add a directory name if that name already exists in the file.</p>\n    ","a":"\n<pre><code>grep -Fxq \"$FILENAME\" my_list.txt\n</code></pre>\n\n<p>The exit status is 0 (true) if the name was found, 1 (false) if not, so:</p>\n\n<pre><code>if grep -Fxq \"$FILENAME\" my_list.txt\nthen\n    # code if found\nelse\n    # code if not found\nfi\n</code></pre>\n\n<p>Here are the relevant sections of <a href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?grep\">the man page for <code>grep</code></a>:</p>\n\n<pre><code>grep [options] PATTERN [FILE...]\n\n-F, --fixed-strings\n       Interpret PATTERN as a list of fixed strings, separated by  new-\n       lines, any of which is to be matched.\n\n-x, --line-regexp\n       Select only those matches that exactly match the whole line.\n\n-q, --quiet, --silent\n       Quiet; do not write anything to standard output.  Exit  immedi-\n       ately  with  zero status if any match is found, even if an error\n       was detected.  Also see the -s or --no-messages option.\n</code></pre>\n    "},{"t":"Linux repeat command automatically","l":"http://stackoverflow.com/questions/13593771/linux-repeat-command-automatically","q":"\n\n<p>Is it possible in linux command line to have a command repeat every n seconds.</p>\n\n<p>For example, say I have an import running and i am doing</p>\n\n<pre><code>ls -l\n</code></pre>\n\n<p>to check the file size is increasing.  I would like to have a command to have this automatically repeat.</p>\n    ","a":"\n<p>Watch every 5 seconds ...</p>\n\n<p><code>watch -n 5 ls -l</code></p>\n\n<p>If you wish to have visual confirmation of changes, append <code>--differences</code> prior to the <code>ls</code> command.</p>\n\n<p>According to the OSX man page, there's also</p>\n\n<blockquote>\n  <p>The --cumulative option makes highlighting \"sticky\", presenting a\n  running display of  all  positions  that  have  ever changed.  The -t\n  or --no-title option turns off the header showing the interval,\n  command, and current time at the top of the display, as well as the\n  following blank line.</p>\n</blockquote>\n\n<p>Linux/Unix man page can be found <a href=\"http://linux.die.net/man/1/watch\">here</a> </p>\n    "},{"t":"How to make the 'cut' command treat several sequential delimiters as one?","l":"http://stackoverflow.com/questions/4143252/how-to-make-the-cut-command-treat-several-sequential-delimiters-as-one","q":"\n\n<p>I'm trying to extract a certain (the fourth) field from the column-based, 'space'-adjusted text stream. I'm trying to use the <code>cut</code> command in the following manner: </p>\n\n<p><code>cat text.txt | cut -d \" \" -f 4</code></p>\n\n<p>Unfortunately, <code>cut</code> doesn't treat several spaces as one delimiter. I could have piped through awk</p>\n\n<p><code>awk '{ printf $4; }'</code> </p>\n\n<p>or sed</p>\n\n<p><code>sed  -E \"s/[[:space:]]+/ /g\"</code></p>\n\n<p>to collapse the spaces, but I'd like to know if there any way to deal with <code>cut</code> and several delimiters natively?</p>\n    ","a":"\n<p>Try:</p>\n\n<pre><code>cat text.txt | tr -s ' ' | cut -d ' ' -f 4\n</code></pre>\n\n<pre>-s, --squeeze-repeats   replace each input sequence of a repeated character\n                        that is listed in SET1 with a single occurrence\n                        of that character\n</pre>\n    "},{"t":"How to zero pad a sequence of integers in bash so that all have the same width?","l":"http://stackoverflow.com/questions/8789729/how-to-zero-pad-a-sequence-of-integers-in-bash-so-that-all-have-the-same-width","q":"\n\n<p>I need to loop some values,</p>\n\n<pre><code>for i in $(seq $first $last)\ndo\n    does something here\ndone\n</code></pre>\n\n<p>For <code>$first</code> and <code>$last</code>, i need it to be of fixed length 5. So if the input is <code>1</code>, i need to add zeros in front such that it becomes <code>00001</code>. It loops till <code>99999</code> for example, but the length has to be 5.</p>\n\n<p>E.g.: <code>00002</code>, <code>00042</code>, <code>00212</code>, <code>012312</code> and so forth.</p>\n\n<p>Any idea on how i can do that? </p>\n    ","a":"\n<p>In your specific case though it's probably easiest to use the <code>-f</code> flag to <code>seq</code> to get it to format the numbers as it outputs the list.  For example:</p>\n\n<pre><code>for i in $(seq -f \"%05g\" 10 15)\ndo\n  echo $i\ndone\n</code></pre>\n\n<p>will produce the following output:</p>\n\n<pre><code>00010\n00011\n00012\n00013\n00014\n00015\n</code></pre>\n\n<p>More generally, <code>bash</code> has <code>printf</code> as a built-in so you can pad output with zeroes as follows:</p>\n\n<pre><code>$ i=99\n$ printf \"%05d\\n\" $i\n00099\n</code></pre>\n\n<p>You can use the <code>-v</code> flag to store the output in another variable:</p>\n\n<pre><code>$ i=99\n$ printf -v j \"%05d\" $i\n$ echo $j\n00099\n</code></pre>\n\n<p>Notice that <code>printf</code> supports a slightly different format to <code>seq</code> so you need to use <code>%05d</code> instead of <code>%05g</code>.</p>\n    "},{"t":"xargs with multiple commands as argument","l":"http://stackoverflow.com/questions/6958689/xargs-with-multiple-commands-as-argument","q":"\n\n<pre><code>cat a.txt | xargs -I % echo %\n</code></pre>\n\n<p>In the example above xargs takes <code>echo %</code> as the command argument. But in some cases, I need multiple commands to process instead of one, for example:</p>\n\n<pre><code>cat a.txt | xargs -I % {command1; command2; ... }\n</code></pre>\n\n<p>But xargs doesn't accept this form. One solution I know is that I can define a function to wrap the commands, but it's not pipeline, I don't prefer it. Is there other solution?</p>\n    ","a":"\n<pre><code>cat a.txt | xargs -I % sh -c 'command1; command2; ...'\n</code></pre>\n\n<p>Note that this is a <a href=\"http://www.catb.org/jargon/html/U/UUOC.html\">Useless Use Of cat</a>.  I'd write it as:</p>\n\n<pre><code>&lt; a.txt xargs -I % sh -c 'command1; command2; ...'\n</code></pre>\n\n<p>(Yes, the redirection can be at the beginning of the command.)</p>\n\n<p>Presumably <code>command1</code> and/or <code>command2</code> will contain one or more <code>%</code> characters; otherwise there wouldn't be much point to the <code>-I %</code> option to <code>xargs</code>.</p>\n    "},{"t":"How do I compare two string variables in an 'if' statement in Bash?","l":"http://stackoverflow.com/questions/4277665/how-do-i-compare-two-string-variables-in-an-if-statement-in-bash","q":"\n\n<p>I'm trying to get an <code>if</code> statement to work in <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> (using <a href=\"http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29\">Ubuntu</a>):</p>\n\n<pre><code>#!/bin/bash\n\ns1=\"hi\"\ns2=\"hi\"\n\nif [\"$s1\" == \"$s2\"]\nthen\n  echo match\nfi\n</code></pre>\n\n<p>I've tried various forms of the <code>if</code> statement, using [[\"$s1\" == \"$s2\"]], with and without quotes, using <code>=</code>, <code>==</code> and <code>-eq</code>, but I still get the following error:</p>\n\n<blockquote>\n  <p>[hi: command not found</p>\n</blockquote>\n\n<p>I've looked at various sites and tutorials and copied those, but it doesn't work - what am I doing wrong?</p>\n\n<p>Eventually, I want to say if <code>$s1</code> contains <code>$s2</code>, so how can I do that?</p>\n\n<p>I did just work out the spaces bit.. :/ How do I say contains?</p>\n\n<p>I tried</p>\n\n<pre><code>if [[ \"$s1\" == \"*$s2*\" ]]\n</code></pre>\n\n<p>but it didn't work.</p>\n    ","a":"\n<p>For string comparison, use:</p>\n\n<pre><code>if [ \"$s1\" == \"$s2\" ]\n</code></pre>\n\n<p>For the <code>a</code> contains <code>b</code>, use:</p>\n\n<pre><code>if [[ $s1 == *\"$s2\"* ]]\n</code></pre>\n    "},{"t":"Bash: How to undo the effect of “set -e” which makes bash exit immediately if any command fails","l":"http://stackoverflow.com/questions/3517162/bash-how-to-undo-the-effect-of-set-e-which-makes-bash-exit-immediately-if-an","q":"\n\n<p>After enter <code>set -e</code> in an interactive bash, bash will exit immediately if any command exits with non-zero. How can I undo this effect? Thanks.</p>\n    ","a":"\n<p>With <code>set +e</code>.  Yeah, it's backward that you <em>enable</em> shell options with <code>set -</code> and <em>disable</em> them with <code>set +</code>.  Historical raisins, donchanow.</p>\n    "},{"t":"Best way to simulate “group by” from bash?","l":"http://stackoverflow.com/questions/380817/best-way-to-simulate-group-by-from-bash","q":"\n\n<p>Suppose you have a file that contains IP addresses, one address in each line:</p>\n\n<pre><code>10.0.10.1\n10.0.10.1\n10.0.10.3\n10.0.10.2\n10.0.10.1\n</code></pre>\n\n<p>You need a shell script that counts for each IP address how many times it appears in the file. For the previous input you need the following output:</p>\n\n<pre><code>10.0.10.1 3\n10.0.10.2 1\n10.0.10.3 1\n</code></pre>\n\n<p>One way to do this is:</p>\n\n<pre><code>cat ip_addresses |uniq |while read ip\ndo\n    echo -n $ip\" \"\n    grep -c $ip ip_addresses\ndone\n</code></pre>\n\n<p>However it is really far from being efficient.</p>\n\n<p>How would you solve this problem more efficiently using bash?</p>\n\n<p>(One thing to add: I know it can be solved from perl or awk, I'm interested in a better solution in bash, not in those languages.)</p>\n\n<p>ADDITIONAL INFO:</p>\n\n<p>Suppose that the source file is 5GB and the machine running the algorithm has 4GB. So sort is not an efficient solution, neither is reading the file more than once.</p>\n\n<p>I liked the hashtable-like solution - anybody can provide improvements to that solution?</p>\n\n<p>ADDITIONAL INFO #2:</p>\n\n<p>Some people asked why would I bother doing it in bash when it is way easier in e.g. perl. The reason is that on the machine I had to do this perl wasn't available for me. It was a custom built linux machine without most of the tools I'm used to. And I think it was an interesting problem.</p>\n\n<p>So please, don't blame the question, just ignore it if you don't like it. :-)</p>\n    ","a":"\n<pre><code>sort ip_addresses | uniq -c\n</code></pre>\n\n<p>This will print the count first, but other than that it should be exactly what you want.</p>\n    "},{"t":"How to convert DOS/Windows newline (CRLF) to Unix newline (\\n) in bash script?","l":"http://stackoverflow.com/questions/2613800/how-to-convert-dos-windows-newline-crlf-to-unix-newline-n-in-bash-script","q":"\n\n<p>How can I programmatically (i.e., not using e.g. <code>vi</code>) convert DOS/Windows newlines to Unix?</p>\n\n<p>The <code>dos2unix</code> and <code>unix2dos</code> commands are not available on certain systems, how can I emulate these with commands like <code>sed</code>/<code>awk</code>/<code>tr</code>?</p>\n    ","a":"\n<p>You can use <code>tr</code> to convert from DOS to Unix, you can only do this safely if CR appears in your file only as the first byte of a CRLF byte pair.  This is usually the case.  You then use:</p>\n\n<pre><code>tr -d '\\015' &lt;DOS-file &gt;UNIX-file\n</code></pre>\n\n<p>Note that the name <code>DOS-file</code> is different from the name <code>UNIX-file</code>; if you try to use the same name twice, you will end up with no data in the file.</p>\n\n<p>You can't do it the other way round (with standard 'tr').</p>\n\n<p>If you know how to enter carriage return into a script (<kbd>control-V</kbd>, <kbd>control-M</kbd> to enter control-M), then:</p>\n\n<pre><code>sed 's/^M$//'     # DOS to Unix\nsed 's/$/^M/'     # Unix to DOS\n</code></pre>\n\n<p>where the '^M' is the control-M character.  You can also use the <code>bash</code> <a href=\"http://www.gnu.org/software/bash/manual/bash.html#ANSI_002dC-Quoting\">ANSI-C Quoting</a> mechanism to specify the carriage return:</p>\n\n<pre><code>sed $'s/\\r$//'     # DOS to Unix\nsed $'s/$/\\r/'     # Unix to DOS\n</code></pre>\n\n<p>Question: why can't you get <code>dos2unix</code> and <code>unix2dos</code> installed (or <code>dtou</code> and <code>utod</code>)?  Or is this a restriction imposed by the person setting homework?</p>\n    "},{"t":"How do I write a bash script to restart a process if it dies?","l":"http://stackoverflow.com/questions/696839/how-do-i-write-a-bash-script-to-restart-a-process-if-it-dies","q":"\n\n<p>I have a python script that'll be checking a queue and performing an action on each item:</p>\n\n<pre><code># checkqueue.py\nwhile True:\n  check_queue()\n  do_something()\n</code></pre>\n\n<p>How do I write a bash script that will check if it's running, and if not, start it.  Roughly the following pseudo code (or maybe it should do something like <code>ps | grep</code>?):</p>\n\n<pre><code># keepalivescript.sh\nif processidfile exists:\n  if processid is running:\n     exit, all ok\n\nrun checkqueue.py\nwrite processid to processidfile\n</code></pre>\n\n<p>I'll call that from a crontab:</p>\n\n<pre><code># crontab\n*/5 * * * * /path/to/keepalivescript.sh\n</code></pre>\n\n<p>Thanks in advance.</p>\n    ","a":"\n<p>Avoid PID-files, crons, or anything else that tries to evaluate processes that aren't their children.</p>\n\n<p>There is a very good reason why in UNIX, you can ONLY wait on your children.  Any method (ps parsing, pgrep, storing a PID, ...) that tries to work around that is flawed and has gaping holes in it.  Just say <strong>no</strong>.</p>\n\n<p>Instead you need the process that monitors your process to be the process' parent.  What does this mean?  It means only the process that <em>starts</em> your process can reliably wait for it to end.  In bash, this is absolutely trivial.</p>\n\n<pre><code>until myserver; do\n    echo \"Server 'myserver' crashed with exit code $?.  Respawning..\" &gt;&amp;2\n    sleep 1\ndone\n</code></pre>\n\n<p>The above piece of bash code runs <code>myserver</code> in an <code>until</code> loop.  The first line starts <code>myserver</code> and waits for it to end.  When it ends, <code>until</code> checks its exit status.  If the exit status is <code>0</code>, it means it ended gracefully (which means you asked it to shut down somehow, and it did so successfully).  In that case we don't want to restart it (we just asked it to shut down!).  If the exit status is <em>not</em> <code>0</code>, <code>until</code> will run the loop body, which emits an error message on STDERR and restarts the loop (back to line 1) <em>after 1 second</em>.</p>\n\n<p>Why do we wait a second?  Because if something's wrong with the startup sequence of <code>myserver</code> and it crashes immediately, you'll have a very intensive loop of constant restarting and crashing on your hands.  The <code>sleep 1</code> takes away the strain from that.</p>\n\n<p>Now all you need to do is start this bash script (asynchronously, probably), and it will monitor <code>myserver</code> and restart it as necessary.  If you want to start the monitor on boot (making the server \"survive\" reboots), you can schedule it in your user's cron(1) with an <code>@reboot</code> rule.  Open your cron rules with <code>crontab</code>:</p>\n\n<pre><code>crontab -e\n</code></pre>\n\n<p>Then add a rule to start your monitor script:</p>\n\n<pre><code>@reboot /usr/local/bin/myservermonitor\n</code></pre>\n\n<hr>\n\n<p>Alternatively; look at inittab(5) and /etc/inittab.  You can add a line in there to have <code>myserver</code> start at a certain init level and be respawned automatically.</p>\n\n<hr>\n\n<p>Edit.</p>\n\n<p>Let me add some information on why <strong>not</strong> to use PID files.  While they are very popular; they are also very flawed and there's no reason why you wouldn't just do it the correct way.</p>\n\n<p>Consider this:</p>\n\n<ol>\n<li><p>PID recycling (killing the wrong process):</p>\n\n<ul>\n<li><code>/etc/init.d/foo start</code>: start <code>foo</code>, write <code>foo</code>'s PID to <code>/var/run/foo.pid</code></li>\n<li>A while later: <code>foo</code> dies somehow.</li>\n<li>A while later: any random process that starts (call it <code>bar</code>) takes a random PID, imagine it taking <code>foo</code>'s old PID.</li>\n<li>You notice <code>foo</code>'s gone: <code>/etc/init.d/foo/restart</code> reads <code>/var/run/foo.pid</code>, checks to see if it's still alive, finds <code>bar</code>, thinks it's <code>foo</code>, kills it, starts a new <code>foo</code>.</li>\n</ul></li>\n<li><p>PID files go stale.  You need over-complicated (or should I say, non-trivial) logic to check whether the PID file is stale, and any such logic is again vulnerable to <code>1.</code>.</p></li>\n<li><p>What if you don't even have write access or are in a read-only environment?</p></li>\n<li><p>It's pointless overcomplication; see how simple my example above is.  No need to complicate that, at all.</p></li>\n</ol>\n\n<p>See also: <a href=\"http://stackoverflow.com/questions/25906020/are-pid-files-still-flawed-when-doing-it-right/25933330#25933330\">Are PID-files still flawed when doing it 'right'?</a></p>\n\n<p>By the way; <strong>even worse than PID files is parsing <code>ps</code>!</strong>  Don't ever do this.</p>\n\n<ol>\n<li><code>ps</code> is very unportable.  While you find it on almost every UNIX system; its arguments vary greatly if you want non-standard output.  And standard output is ONLY for human consumption, not for scripted parsing!</li>\n<li>Parsing <code>ps</code> leads to a LOT of false positives.  Take the <code>ps aux | grep PID</code> example, and now imagine someone starting a process with a number somewhere as argument that happens to be the same as the PID you stared your daemon with!  Imagine two people starting an X session and you grepping for X to kill yours.  It's just all kinds of bad.</li>\n</ol>\n\n<p>If you don't want to manage the process yourself; there are some perfectly good systems out there that will act as monitor for your processes.  Look into <a href=\"http://smarden.org/runit/\">runit</a>, for example.</p>\n    "},{"t":"How to fix Terminal not loading ~/.bashrc on OS X Lion [closed]","l":"http://stackoverflow.com/questions/7780030/how-to-fix-terminal-not-loading-bashrc-on-os-x-lion","q":"\n\n<p>Whenever I open a new tab in Terminal using <kbd>Cmd</kbd> + <kbd>T</kbd>, it opens bash in the same directory, as the previous tab. This works fine when I'm in the <code>~</code> directory, but if I'm anywhere else, I get an error loading <code>.bashrc</code></p>\n\n<pre><code>Last login: Sat Oct 15 21:10:00 on ttys002\n-bash: .bashrc: No such file or directory\nJakub-Arnolds-MacBook-Pro:projects darth$ \n</code></pre>\n\n<p>It looks like <code>.bashrc</code> is loaded via relative and not absolute path, because if I do <code>source ~/.bashrc</code>, everything works smoothly.</p>\n\n<p><img src=\"http://i.stack.imgur.com/bEowZ.jpg\" alt=\"loaded bashrc\"></p>\n\n<p>I think this is a OS X Lion related problem, because before the upgrade from Snow Leopard, I didn't have the same issue. But that might be caused by Terminal always opening at <code>~</code>, I don't remember if it tried to open the same directory.</p>\n\n<p><strong>However the question remains the same, how can I make Terminal load <code>~/.bashrc</code> via absolute path, and not relative?</strong></p>\n    ","a":"\n<p>Terminal opens a login shell. This means, ~/.bash_profile will get executed, ~/.bashrc not. The solution on most systems is to „require“ the ~/.bashrc in the ~/.bash_profile: just put this snippet in your ~/.bash_profile:</p>\n\n<pre><code>[[ -s ~/.bashrc ]] &amp;&amp; source ~/.bashrc\n</code></pre>\n    "},{"t":"Shell Programming: What's the difference between $(command) and `command`","l":"http://stackoverflow.com/questions/4708549/shell-programming-whats-the-difference-between-command-and-command","q":"\n\n<p>In sh/ksh/bash to store the output of a command as a variable you can do either</p>\n\n<pre><code>MY_VAR=$(command)\n#or you can do\nMY_VAR=`command`\n</code></pre>\n\n<p>What's the difference if any between the two methods?</p>\n    ","a":"\n<p>The backticks/gravemarks have been deprecated in favor of <code>$()</code> for command substitution because <code>$()</code> can easily nest within itself as in <code>$(echo foo$(echo bar))</code>.  There are also minor differences such as how backslashes are parsed in the backtick/gravemark version.</p>\n\n<p>See the <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_03\"><strong>POSIX</strong></a> spec for detailed information on the various differences.</p>\n    "},{"t":"How do I get bash completion to work with aliases?","l":"http://stackoverflow.com/questions/342969/how-do-i-get-bash-completion-to-work-with-aliases","q":"\n\n<p>Case in point: </p>\n\n<p>I'm a on mac with bash v3.2.17, I'm using git installed via macports with the bash_completion variant.</p>\n\n<p>When I type <code>git checkout m&lt;tab&gt;</code>. for example, I get it completed to <code>master</code>.</p>\n\n<p>However, I've got an alias to <code>git checkout</code>, <code>gco</code>. When I type <code>gco m&lt;tab&gt;</code>, I don't get the branch name autocompleted.</p>\n\n<p>Ideally I'd like autocompletion to just magically work for all my aliases. Is it possible? Failing that, I'd like to manually customize it for each alias. So, how do I go about either?</p>\n    ","a":"\n<p>As stated in the comments above,</p>\n\n<pre><code>complete -o default -o nospace -F _git_checkout gco\n</code></pre>\n\n<p>will no longer work. However, there's a <code>__git_complete</code> function in git-completion.bash which can be used to set up completion for aliases like so:</p>\n\n<pre><code>__git_complete gco _git_checkout\n</code></pre>\n    "},{"t":"How to delete files older than X hours","l":"http://stackoverflow.com/questions/249578/how-to-delete-files-older-than-x-hours","q":"\n\n<p>I'm writing a bash script that needs to delete old files.</p>\n\n<p>It's currently implemented using :</p>\n\n<pre><code>find $LOCATION -name $REQUIRED_FILES -type f -mtime +1 -delete\n</code></pre>\n\n<p>This will delete of the files older than 1 day.</p>\n\n<p>However, what if I need a finer resolution that 1 day, say like 6 hours old? Is there a nice clean way to do it, like there is using find and -mtime?</p>\n    ","a":"\n<p>Does your <a href=\"http://linuxcommand.org/man_pages/find1.html\"><code>find</code></a> have the <code>-mmin</code> option? That can let you test the number of mins since last modification:</p>\n\n<pre><code>find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete\n</code></pre>\n\n<p>Or maybe look at using <a href=\"http://linux.about.com/library/cmd/blcmdl8_tmpwatch.htm\"><code>tmpwatch</code></a> to do the same job. phjr also recommended <a href=\"http://linux.about.com/cs/linux101/g/tmpreaper.htm\"><code>tmpreaper</code></a> in the comments.</p>\n    "},{"t":"BASH - How to use arguments from previous command?","l":"http://stackoverflow.com/questions/4009412/bash-how-to-use-arguments-from-previous-command","q":"\n\n<p>I know that ESC DOT gives you the last argument of the last command.</p>\n\n<p>But I'm interested in first argument of the last command.\nIs there a key binding to do so?</p>\n\n<p>On the same lines, is there a generic way of getting nth argument from last command.\n(I know that in a bash script you can use $0, $1 etc., but these don't work on commandline)</p>\n\n<p><strong>Also, what about iterating through 0th argument of previous commands, like we can do with last argument by continuously pressing ESC DOT</strong></p>\n    ","a":"\n<p>Just as <code>M-.</code> (meta-dot or esc-dot or alt-dot) is the readline function <code>yank-last-arg</code>, <code>M-C-y</code> (meta-control-y or esc-ctrl-y or ctrl-alt-y) is the readline function <code>yank-nth-arg</code>. Without specifying <code>n</code>, it yanks the first argument of the previous command.</p>\n\n<p>To specify an argument, press Escape and a number or hold Alt and press a number. You can do <kbd>Alt</kbd>-<kbd>-</kbd>to begin specifying a negative number then release Alt and press the digit (this will count from the end of the list of arguments.</p>\n\n<p>Example:</p>\n\n<p>Enter the following command</p>\n\n<pre><code>$ echo a b c d e f g\na b c d e f g\n</code></pre>\n\n<p>Now at the next prompt, type <code>echo</code> (with a following space), then</p>\n\n<p>Press <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd> and you'll now see:</p>\n\n<pre><code>$ echo a\n</code></pre>\n\n<p>without pressing <kbd>Enter</kbd> yet, do the following</p>\n\n<p>Press <kbd>Alt</kbd>-<kbd>3</kbd>  <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd></p>\n\n<p>Press <kbd>Alt</kbd>-<kbd>-</kbd> <kbd>2</kbd> <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd></p>\n\n<p>Now you will see:</p>\n\n<pre><code>$ echo ace\n</code></pre>\n\n<p>By the way, you could have put the <code>echo</code> on the line by selecting argument 0:</p>\n\n<p>Press <kbd>Alt</kbd>-<kbd>0</kbd> <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd></p>\n\n<p><strong>Edit:</strong></p>\n\n<p>To answer the question you added to your original:</p>\n\n<p>You can press <kbd>Alt</kbd>-<kbd>0</kbd> then repeatedly press <kbd>Alt</kbd>-<kbd>.</kbd> to step through the previous commands (arg 0). Similarly <kbd>Alt</kbd>-<kbd>-</kbd> then repeating <kbd>Alt</kbd>-<kbd>.</kbd> would allow you to step through the previous next-to-last arguments.</p>\n\n<p>If there is no appropriate argument on a particular line in history, the bell will be rung.</p>\n\n<p>If there is a particular combination you use frequently, you can define a macro so one keystroke will perform it. This example will recall the second argument from previous commands by pressing <kbd>Alt</kbd>-<kbd>Shift</kbd>-<kbd>Y</kbd>. You could choose any available keystroke you prefer instead of this one. You can press it repeatedly to step through previous ones.</p>\n\n<p>To try it out, enter the macro at a Bash prompt:</p>\n\n<pre><code>bind '\"\\eY\": \"\\e2\\e.\"'\n</code></pre>\n\n<p>To make it persistent, add this line to your <code>~/.inputrc</code> file:</p>\n\n<pre><code>\"\\eY\": \"\\e2\\e.\"\n</code></pre>\n\n<p>Unfortunately, this doesn't seem to work for arg 0 or negative argument numbers.</p>\n    "},{"t":"Process all arguments except the first one","l":"http://stackoverflow.com/questions/9057387/process-all-arguments-except-the-first-one","q":"\n\n<p>I have a simple script where the first argument is reserved for the filename, and all other optional arguments should be passed to other parts of the script.</p>\n\n<p>Using Google I found <a href=\"http://wiki.bash-hackers.org/scripting/posparams#mass_usage\">this wiki</a>, but it provided a literal example:</p>\n\n<pre><code>echo \"${@: -1}\"\n</code></pre>\n\n<p>I can't get anything else to work, like:</p>\n\n<pre><code>echo \"${@:2}\"\n</code></pre>\n\n<p>or</p>\n\n<pre><code>echo \"${@:2,1}\"\n</code></pre>\n\n<p>I get \"Bad substitution\" from the terminal.</p>\n\n<p>What is the problem, and how can I process all but the first argument passed to a bash script?</p>\n    ","a":"\n<p>Try this:</p>\n\n<pre><code>echo \"${*:2}\"\n</code></pre>\n\n<p></p>\n    "},{"t":"Get file directory path from filepath","l":"http://stackoverflow.com/questions/6121091/get-file-directory-path-from-filepath","q":"\n\n<p>In bash programming If <code>VAR=\"/home/me/mydir/file.c\"</code>,<br>\nHow to get the <code>\"/home/me/mydir\"</code>.</p>\n    ","a":"\n<p><code>dirname</code> and <code>basename</code> are the tools you're looking for for extracting path components:</p>\n\n<pre><code>$ VAR=/home/me/mydir/file.c\n\n$ DIR=$(dirname \"${VAR}\")\n\n$ echo \"${DIR}\"\n/home/me/mydir\n\n$ basename \"${VAR}\"\nfile.c\n</code></pre>\n\n<p>They're not <em>internal</em> <code>bash</code> commands but should be available on the vast majority of systems that will be running <code>bash</code>.</p>\n    "},{"t":"Setting an environment variable before a command in bash not working for second command in a pipe","l":"http://stackoverflow.com/questions/10856129/setting-an-environment-variable-before-a-command-in-bash-not-working-for-second","q":"\n\n<p>In a given shell, normally I'd set a variable or variables and then run a command. Recently I learned about the concept of prepending a variable definition to a command:</p>\n\n<pre><code>FOO=bar somecommand someargs\n</code></pre>\n\n<p>This works... kind of. It doesn't work when you're changing a LC_* variable (which seems to affect the command but NOT its arguments, e.g., '[a-z]' char ranges) or when piping output to another command thusly:</p>\n\n<pre><code>FOO=bar somecommand someargs | somecommand2  # somecommand2 is unaware of FOO\n</code></pre>\n\n<p>I can prepend somecommand2 with \"FOO=bar\" as well, which works but which adds unwanted duplication, and it doesn't help with arguments that are interpreted depending on the variable (e.g. '[a-z]')</p>\n\n<p>So, what's a good way to do this on a single line? I'm thinking something on the order of:</p>\n\n<pre><code>FOO=bar (somecommand someargs | somecommand2)  # Doesn't actually work\n</code></pre>\n\n<p>Edit: I got lots of good answers! The goal is to keep this a one-liner, preferably without using \"export\". The method using a call to bash was best overall, though the parenthetical version with \"export\" in it was a little more compact. The method of using redirection rather than a pipe is interesting as well.</p>\n    ","a":"\n<pre><code>FOO=bar bash -c 'somecommand someargs | somecommand2'\n</code></pre>\n    "},{"t":"How to copy a file to multiple directories using the gnu cp command","l":"http://stackoverflow.com/questions/195655/how-to-copy-a-file-to-multiple-directories-using-the-gnu-cp-command","q":"\n\n<p>Is it possible to copy a single file to multiple directories using the cp command ?</p>\n\n<p>I tried the following , which did not work:  </p>\n\n<pre><code>cp file1 /foo/ /bar/\ncp file1 {/foo/,/bar}\n</code></pre>\n\n<p>I know it's possible using a for loop, or find. But is it possible using the gnu cp command?</p>\n    ","a":"\n<p>No, <code>cp</code> can copy multiple sources but will only copy to a single destination. You need to arrange to invoke <code>cp</code> multiple times - once per destination - for what you want to do; using, as you say, a loop or some other tool.</p>\n    "},{"t":"linux: kill background task","l":"http://stackoverflow.com/questions/1624691/linux-kill-background-task","q":"\n\n<p>How do I kill the last spawned background task in linux?</p>\n\n<p>Example:</p>\n\n<pre><code>doSomething\ndoAnotherThing\ndoB &amp;\ndoC\ndoD\n#kill doB\n????\n</code></pre>\n    ","a":"\n<p>There's a special variable for this in bash:</p>\n\n<pre><code>kill $!\n</code></pre>\n\n<p>$! expands to the PID of the last process executed in the background.</p>\n    "},{"t":"Running script upon login mac [closed]","l":"http://stackoverflow.com/questions/6442364/running-script-upon-login-mac","q":"\n\n<p>I am wondering if anyone is able to help me out with getting a .sh file to run when I log in to my account on my computer. I am running Mac OS X 10.6.7.</p>\n\n<p>I have a file \"Example.sh\" that I want to run when I log onto my computer. I do not have a problem running it when I am already logged in, but I want this to run automatically.</p>\n\n<p>People are saying to add it to the login shell file, but I do not know where that is. Some help please. Thanks in advance</p>\n    ","a":"\n<p>You can:</p>\n\n<ul>\n<li>start Automator.app</li>\n<li>Select \"Application\"</li>\n<li>click \"Show library\" in the toolbar (if hidden)</li>\n<li>Add \"Run shell script\" (from the Actions/Utilities)</li>\n<li>Copy&amp;paste your script into the window</li>\n<li>Test it</li>\n<li><p>Save somewhere, for example you can make an \"Applications\" folder in your HOME (you will get an your_name.app)</p></li>\n<li><p>Go to System Preferences -&gt; Accounts -&gt; Login items</p></li>\n<li>Add this app</li>\n<li>test &amp; done ;)</li>\n</ul>\n\n<p>EDIT:</p>\n\n<p><em>I've recently earned a \"Good answer\" badge for this answer. While my solution is simple and working, the cleanest way to run any program or shell script at login time is described in <a href=\"http://stackoverflow.com/a/13372744/805031\">@trisweb's answer</a></em>, <strong>unless, you want interactivity</strong>.</p>\n\n<p>With automator solution you can do things like next:\n<img src=\"http://i.stack.imgur.com/sCy4t.png\" alt=\"automator screenshot login application\"></p>\n\n<p>so, asking to run a script or quit the app, asking passwords, running other automator workflows at login time, conditionally run applications at login time and so on...</p>\n    "},{"t":"How to list running screen sessions?","l":"http://stackoverflow.com/questions/537942/how-to-list-running-screen-sessions","q":"\n\n<p>I have a bunch of servers, on which I run experiments using <code>screen</code>. The procedure is the following :</p>\n\n<ol>\n<li><code>ssh</code> to server XXX</li>\n<li>launch <code>screen</code></li>\n<li>start experiments in a few tabs</li>\n<li>detach <code>screen</code></li>\n<li>disconnect from the server</li>\n</ol>\n\n<p>While the experiments are running, I can easily find on which servers they are by <code>ssh</code>ing to all servers and listing my running processes (using <code>top</code> or <code>ps</code>).</p>\n\n<p>However, once the experiments are finished, how could I find on which servers I have a screen session opened (so that I can have a look at the output, relaunch them, etc.) ?</p>\n\n<p>PS: my experiments do print their output to files, too... but this is not the point of my question.</p>\n    ","a":"\n<p>To list all of the screen sessions for a user, run the following command as that user:</p>\n\n<pre><code>screen -ls\n</code></pre>\n\n<p>To see all screen sessions on a specific machine you can do:</p>\n\n<pre><code>ls -laR /var/run/screen/\n</code></pre>\n\n<p>I get this on my machine:</p>\n\n<pre><code>gentle ~ # ls -laR /var/run/screen/\n\n/var/run/screen/:\ntotal 1\ndrwxrwxr-x  4 root utmp   96 Mar  1  2005 .\ndrwxr-xr-x 10 root root  840 Feb  1 03:10 ..\ndrwx------  2 josh users  88 Jan 13 11:33 S-josh\ndrwx------  2 root root   48 Feb 11 10:50 S-root\n\n/var/run/screen/S-josh:\ntotal 0\ndrwx------ 2 josh users 88 Jan 13 11:33 .\ndrwxrwxr-x 4 root utmp  96 Mar  1  2005 ..\nprwx------ 1 josh users  0 Feb 11 10:41 12931.pts-0.gentle\n\n/var/run/screen/S-root:\ntotal 0\ndrwx------ 2 root root 48 Feb 11 10:50 .\ndrwxrwxr-x 4 root utmp 96 Mar  1  2005 ..\n</code></pre>\n\n<p>The files are Unix Sockets.</p>\n    "},{"t":"Can I change the name of `nohup.out`?","l":"http://stackoverflow.com/questions/4549489/can-i-change-the-name-of-nohup-out","q":"\n\n<p>When I run <code>nohup some_command &amp;</code>, the output goes to <code>nohup.out</code>; <code>man nohup</code> says to look at <code>info nohup</code> which in turn says:</p>\n\n<blockquote>\n  <p>If standard output is a terminal, the\n  command's standard output is appended\n  to the file 'nohup.out'; if that\n  cannot be written to, it is appended\n  to the file '$HOME/nohup.out'; and if\n  that cannot be written to, the command\n  is not run.</p>\n</blockquote>\n\n<p>But if I already have one command using <code>nohup</code> with output going to <code>/nohup.out</code> and I want to run another, <code>nohup</code> command, can I redirect the output to <code>nohup2.out</code>? </p>\n    ","a":"\n<pre><code>nohup some_command &gt; nohup2.out 2&gt;&amp;1&amp;\n</code></pre>\n\n<p>and voila.</p>\n\n<hr>\n\n<p>abbreviated syntax in Bash version &gt;= 4 (from @ephemient's comment, also works on zsh 5.0.x):</p>\n\n<pre><code>nohup some_command &amp;&gt; nohup2.out&amp;\n</code></pre>\n    "},{"t":"How to create a hex dump of file containing only the hex characters without spaces in bash?","l":"http://stackoverflow.com/questions/2614764/how-to-create-a-hex-dump-of-file-containing-only-the-hex-characters-without-spac","q":"\n\n<p>How do I create an <strong>unmodified</strong> hex dump of a binary file in Linux using bash? The <code>od</code> and <code>hexdump</code> commands both insert spaces in the dump and this is not ideal.</p>\n\n<p>Is there a way to simply write a long string with all the hex characters, minus spaces or newlines in the output?</p>\n    ","a":"\n<p><code>xxd -p file</code></p>\n\n<p>Or if you want it all on a single line:</p>\n\n<p><code>xxd -p file | tr -d '\\n'</code></p>\n    "},{"t":"Difference between single and double quotes in bash","l":"http://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash","q":"\n\n<p>In Bash shell scripting, what is the difference between single quotes (<code>''</code>) and double quotes (<code>\"\"</code>)?</p>\n    ","a":"\n<p>Single quotes won't interpolate anything, but double quotes will (for example variables, backticks, certain <code>\\</code> escapes, etc...)</p>\n\n<p>The Bash manual has this to say:</p>\n\n<blockquote>\n  <p><a href=\"http://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\">3.1.2.2 Single Quotes</a></p>\n  \n  <p>Enclosing characters in single quotes (‘'’) preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash. </p>\n  \n  <p><a href=\"http://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\">3.1.2.3 Double Quotes</a></p>\n  \n  <p>Enclosing characters in double quotes (‘\"’) preserves the literal value of all characters within the quotes, with the exception of ‘$’, ‘`’, ‘\\’, and, when history expansion is enabled, ‘!’. The characters ‘$’ and ‘`’ retain their special meaning within double quotes (see Shell Expansions). The backslash retains its special meaning only when followed by one of the following characters: ‘$’, ‘`’, ‘\"’, ‘\\’, or newline. Within double quotes, backslashes that are followed by one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion will be performed unless an ‘!’ appearing in double quotes is escaped using a backslash. The backslash preceding the ‘!’ is not removed.</p>\n  \n  <p>The special parameters ‘*’ and ‘@’ have special meaning when in double quotes (see Shell Parameter Expansion). </p>\n</blockquote>\n    "},{"t":"Recursively look for files with a specific extension","l":"http://stackoverflow.com/questions/5927369/recursively-look-for-files-with-a-specific-extension","q":"\n\n<p>I'm trying to find all files with a specific extension in a directory and its subdirectories with my bash (Latest Ubuntu LTS Release).</p>\n\n<p>This is what's written in a script file:</p>\n\n<pre><code>#!/bin/bash\n\ndirectory=\"/home/flip/Desktop\"\nsuffix=\"in\"\n\nbrowsefolders ()\n  for i in \"$1\"/*; \n  do\n    echo \"dir :$directory\"\n    echo \"filename: $i\"\n    #   echo ${i#*.}\n    extension=`echo \"$i\" | cut -d'.' -f2`\n    echo \"Erweiterung $extension\"\n    if     [ -f \"$i\" ]; then        \n\n        if [ $extension == $suffix ]; then\n            echo \"$i ends with $in\"\n\n        else\n            echo \"$i does NOT end with $in\"\n        fi\n    elif [ -d \"$i\" ]; then  \n    browsefolders \"$i\"\n    fi\n  done\n}\nbrowsefolders  \"$directory\"\n</code></pre>\n\n<p>Unfortunately, when I start this script in terminal, it says:</p>\n\n<pre><code>[: 29: in: unexpected operator\n</code></pre>\n\n<p>(with <code>$extension</code> instead of <code>'in'</code>)</p>\n\n<p>What's going on here, where's the error?\nBut this curly brace </p>\n    ","a":"\n<pre><code>find $directory -type f -name \"*.in\"\n</code></pre>\n\n<p>is a bit shorter than that whole thing (and safer - deals with whitespace in filenames and directory names).</p>\n\n<p>Your script is probably failing for entries that don't have a <code>.</code> in their name, making <code>$extension</code> empty.</p>\n    "},{"t":"Bash : iterate over list of files with spaces","l":"http://stackoverflow.com/questions/7039130/bash-iterate-over-list-of-files-with-spaces","q":"\n\n<p>I want to iterate over a list of files. This list is the result of a <code>find</code> command, so I came up with:</p>\n\n<pre><code>getlist() {\n  for f in $(find . -iname \"foo*\")\n  do\n    echo \"File found: $f\"\n    # do something useful\n  done\n}\n</code></pre>\n\n<p>It's fine except if a file has spaces in its name:</p>\n\n<pre><code>$ ls\nfoo_bar_baz.txt\nfoo bar baz.txt\n\n$ getlist\nFile found: foo_bar_baz.txt\nFile found: foo\nFile found: bar\nFile found: baz.txt\n</code></pre>\n\n<p>How can I do to avoid the split on spaces ?</p>\n    ","a":"\n<p>You could replace the word-based iteration with a line-based one:</p>\n\n<pre><code>find . -iname \"foo*\" | while read f\ndo\n    # ... loop body\ndone\n</code></pre>\n    "},{"t":"Copy folder recursively, excluding some folders","l":"http://stackoverflow.com/questions/2193584/copy-folder-recursively-excluding-some-folders","q":"\n\n<p>I am trying to write a simple bash script that will copy the entire contents of a folder including hidden files and folders into another folder, but I want to exclude certain specific folders.  How could I achieve this?</p>\n    ","a":"\n<p>Use rsync:</p>\n\n<pre><code>rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination\n</code></pre>\n\n<p>Note that using <code>source</code> and <code>source/</code> are different.  A trailing slash means to copy the contents of the folder <code>source</code> into <code>destination</code>.  Without the trailing slash, it means copy the folder <code>source</code> into <code>destination</code>.</p>\n\n<p>Alternatively, if you have lots of directories (or files) to exclude, you can use <code>--exclude-from=FILE</code>, where <code>FILE</code> is the name of a file containing files or directories to exclude.</p>\n\n<p><code>--exclude</code> may also contain wildcards, such as <code>--exclude=*/.svn*</code></p>\n    "},{"t":"How do I change bash history completion to complete what's already on the line?","l":"http://stackoverflow.com/questions/1030182/how-do-i-change-bash-history-completion-to-complete-whats-already-on-the-line","q":"\n\n<p>I found a command a couple of months ago that made my bash history auto-complete on what's already on the line when pressing the up arrow: </p>\n\n<pre><code>$ vim fi\n</code></pre>\n\n<p>Press <kbd>↑</kbd></p>\n\n<pre><code>$ vim file.py\n</code></pre>\n\n<p>I'd like to set this up on my new computer, because it saves a lot of time when keeping a big history. The problem is that I can't for the life of me remember where it was mentioned and reading through endless bash references and tutorials unfortunately didn't help either.</p>\n\n<p>Does anybody know the command?</p>\n    ","a":"\n<p>Probably something like</p>\n\n<pre># ~/.inputrc\n\"\\e[A\": history-search-backward\n\"\\e[B\": history-search-forward\n</pre>\n\n<p>or equivalently,</p>\n\n<pre># ~/.bashrc\nif [[ $- == *i* ]]\nthen\n    bind '\"\\e[A\": history-search-backward'\n    bind '\"\\e[B\": history-search-forward'\nfi\n</pre>\n\n<p>(the if statement checks for interactive mode)</p>\n\n<p>Normally, Up and Down are bound to the Readline functions <code>previous-history</code> and <code>next-history</code> respectively.  I prefer to bind PgUp/PgDn to these functions, instead of displacing the normal operation of Up/Down.</p>\n\n<pre># ~/.inputrc\n\"\\e[5~\": history-search-backward\n\"\\e[6~\": history-search-forward\n</pre>\n\n<p>After you modify <code>~/.inputrc</code>, restart your shell or use <kbd>Ctrl</kbd>+<kbd>X</kbd>, <kbd>Ctrl</kbd>+<kbd>R</kbd> to tell it to re-read <code>~/.inputrc</code>.</p>\n\n<hr>\n\n<p>By the way, if you're looking for relevant documentation: </p>\n\n<p>Bash uses <a href=\"http://tiswww.case.edu/php/chet/readline/rltop.html\">The GNU Readline Library</a> for the shell prompt and history.</p>\n    "},{"t":"How can I escape white space in a bash loop list?","l":"http://stackoverflow.com/questions/301039/how-can-i-escape-white-space-in-a-bash-loop-list","q":"\n\n<p>I have a bash shell script that loops through all child directories (but not files) of a certain directory.  The problem is that some of the directory names contain spaces.  </p>\n\n<p>Here are the contents of my test directory:</p>\n\n<pre><code>$ls -F test\nBaltimore/  Cherry Hill/  Edison/  New York City/  Philadelphia/  cities.txt\n</code></pre>\n\n<p>And the code that loops through the directories:</p>\n\n<pre><code>for f in `find test/* -type d`; do\n  echo $f\ndone\n</code></pre>\n\n<p>Here's the output:</p>\n\n<pre>test/Baltimore\ntest/Cherry\nHill\ntest/Edison \ntest/New\nYork\nCity\ntest/Philadelphia\n</pre>\n\n<p>Cherry Hill and New York City are treated as 2 or 3 separate entries.</p>\n\n<p>I tried quoting the filenames, like so:</p>\n\n<pre><code>for f in `find test/* -type d | sed -e 's/^/\\\"/' | sed -e 's/$/\\\"/'`; do\n  echo $f\ndone\n</code></pre>\n\n<p>but to no avail.</p>\n\n<p>There's got to be a simple way to do this.</p>\n\n<hr>\n\n<p>The answers below are great.  But to make this more complicated - I don't always want to use the directories listed in my test directory.  Sometimes I want to pass in the directory names as command-line parameters instead.</p>\n\n<p>I took Charles' suggestion of setting the IFS and came up with the following:</p>\n\n<pre><code>dirlist=\"${@}\"\n(\n  [[ -z \"$dirlist\" ]] &amp;&amp; dirlist=`find test -mindepth 1 -type d` &amp;&amp; IFS=$'\\n'\n  for d in $dirlist; do\n    echo $d\n  done\n)\n</code></pre>\n\n<p>and this works just fine unless there are spaces in the command line arguments (even if those arguments are quoted).  For example, calling the script like this: <code>test.sh \"Cherry Hill\" \"New York City\"</code> produces the following output:</p>\n\n<pre>Cherry\nHill\nNew\nYork\nCity\n</pre>\n    ","a":"\n<p>First, don't do it that way. The best approach is to use <code>find -exec</code> properly:</p>\n\n<pre><code># this is safe\nfind test -type d -exec echo '{}' +\n</code></pre>\n\n<p>The other safe approach is to use NUL-terminated list, though this requires that your find support <code>-print0</code>:</p>\n\n<pre><code># this is safe\nwhile IFS= read -r -d '' n; do\n  printf '%q\\n' \"$n\"\ndone &lt; &lt;(find test -mindepth 1 -type d -print0)\n</code></pre>\n\n<p>You can also populate an array from find, and pass that array later:</p>\n\n<pre><code># this is safe\ndeclare -a myarray\nwhile IFS= read -r -d '' n; do\n  myarray+=( \"$n\" )\ndone &lt; &lt;(find test -mindepth 1 -type d -print0)\nprintf '%q\\n' \"${myarray[@]}\" # printf is an example; use it however you want\n</code></pre>\n\n<p>If your find doesn't support <code>-print0</code>, your result is then unsafe -- the below will not behave as desired if files exist containing newlines in their names (which, yes, is legal):</p>\n\n<pre><code># this is unsafe\nwhile IFS= read -r n; do\n  printf '%q\\n' \"$n\"\ndone &lt; &lt;(find test -mindepth 1 -type d)\n</code></pre>\n\n<p>If one isn't going to use one of the above, a third approach (less efficient in terms of both time and memory usage, as it reads the entire output of the subprocess before doing word-splitting) is to use an <code>IFS</code> variable which doesn't contain the space character. Turn off globbing (<code>set -f</code>) to prevent strings containing glob characters such as <code>[]</code>, <code>*</code> or <code>?</code> from being expanded:</p>\n\n<pre><code># this is unsafe (but less unsafe than it would be without the following precautions)\n(\n IFS=$'\\n' # split only on newlines\n set -f    # disable globbing\n for n in $(find test -mindepth 1 -type d); do\n   printf '%q\\n' \"$n\"\n done\n)\n</code></pre>\n\n<p>Finally, for the command-line parameter case, you should be using arrays if your shell supports them (i.e. it's ksh, bash or zsh):</p>\n\n<pre><code># this is safe\nfor d in \"$@\"; do\n  printf '%s\\n' \"$d\"\ndone\n</code></pre>\n\n<p>will maintain separation. Note that the quoting (and the use of <code>$@</code> rather than <code>$*</code>) is important. Arrays can be populated in other ways as well, such as glob expressions:</p>\n\n<pre><code># this is safe\nentries=( test/* )\nfor d in \"${entries[@]}\"; do\n  printf '%s\\n' \"$d\"\ndone\n</code></pre>\n    "},{"t":"Command substitution: backticks or dollar sign / paren enclosed? [duplicate]","l":"http://stackoverflow.com/questions/9405478/command-substitution-backticks-or-dollar-sign-paren-enclosed","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/4708549/shell-programming-whats-the-difference-between-command-and-command\" dir=\"ltr\">Shell Programming: What's the difference between $(command) and `command`</a>\n                <span class=\"question-originals-answer-count\">\n                    5 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>What's the preferred way to do command substitution in bash?</p>\n\n<p>I've always done it like this:</p>\n\n<pre><code>echo \"Hello, `whoami`.\"\n</code></pre>\n\n<p>But recently, I've often seen it written like this:</p>\n\n<pre><code>echo \"Hello, $(whoami).\"\n</code></pre>\n\n<p>What's the preferred syntax, and why? Or are they pretty much interchangeable?</p>\n\n<p>I tend to favor the first, simply because my text editor seems to know what it is, and does syntax highlighting appropriately.</p>\n\n<p>I read <a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_04.html#sect_03_04_04\">here</a> that escaped characters act a bit differently in each case, but it's not clear to me which behavior is preferable, or if it just depends on the situation.</p>\n\n<p>Side question: Is it bad practice to use <em>both</em> forms in one script, for example when nesting command substitutions?</p>\n    ","a":"\n<p>There are several questions/issues here, so I'll repeat each section of the poster's text, block-quoted, and followed by my response.</p>\n\n<blockquote>\n  <p>What's the preferred syntax, and why? Or are they pretty much interchangeable?</p>\n</blockquote>\n\n<p>I would say that the <code>$(some_command)</code> form is preferred over the <code>`some_command`</code> form. The second form, using a pair of backquotes (the \"`\" character, also called a backtick and a grave accent), is the historical way of doing it. The first form, using dollar sign and parentheses, is a newer POSIX form, which means it's probably a more standard way of doing it. In turn, I'd think that that means it's more likely to work correctly with different shells and with different *nix implementations.</p>\n\n<p>Another reason given for preferring the first (POSIX) form is that it's easier to read, especially when command substitutions are nested. Plus, with the backtick form, the backtick characters have to be backslash-escaped in the nested (inner) command substitutions.</p>\n\n<p>With the POSIX form, you don't need to do that.</p>\n\n<p>As far as whether they're interchangeable, well, I'd say that, in general, they are interchangeable, apart from the exceptions you mentioned for escaped characters. However, I don't know and cannot say whether all modern shells and all modern *nixes support both forms. I doubt that they do, especially older shells/older *nixes. If I were you, I wouldn't depend on interchangeability without first running a couple of quick, simple tests of each form on any shell/*nix implementations that you plan to run your finished scripts on.</p>\n\n<blockquote>\n  <p>I tend to favor the first, simply because my text editor seems to know what it is, and does syntax highlighting appropriately.</p>\n</blockquote>\n\n<p>It's unfortunate that your editor doesn't seem to support the POSIX form; maybe you should check to see if there's an update to your editor that supports the POSIX way of doing it. Long shot maybe, but who knows? Or, maybe you should even consider trying a different editor.</p>\n\n<p>GGG, what text editor are you using???</p>\n\n<blockquote>\n  <p>I read here that escaped characters act a bit differently in each case, but it's not clear to me which behavior is preferable, or if it just depends on the situation.</p>\n</blockquote>\n\n<p>I'd say that it depends on what you're trying to accomplish; in other words, whether you're using escaped characters along with command substitution or not.</p>\n\n<blockquote>\n  <p>Side question: Is it bad practice to use both forms in one script, for example when nesting command substitutions?</p>\n</blockquote>\n\n<p>Well, it might make the script slightly easier to READ (typographically speaking), but harder to UNDERSTAND! Someone reading your script (or YOU, reading it six months later!) would likely wonder why you didn't just stick to one form or the other--unless you put some sort of note about why you did this in the comments. Plus, mixing both forms in one script would make that script less likely to be portable: In order for the script to work properly, the shell that's executing it has to support BOTH forms, not just one form or the other.</p>\n\n<p>For making a shell script understandable, I'd personally prefer sticking to one form or the other throughout any one script, unless there's a good technical reason to do otherwise. Moreover, I'd prefer the POSIX form over the older form; again, unless there's a good technical reason to do otherwise.</p>\n\n<p>For more on the topic of command substitution, and the two different forms for doing it, I suggest you refer to the section on command substitution in the O'Reilly book \"Classic Shell Scripting,\" second edition, by Robbins and Beebe. In that section, the authors state that the POSIX form for command substitution \"is recommended for all new development.\" I have no financial interest in this book; it's just one I have (and love) on shell scripting, though it's more for intermediate or advanced shell scripting, and not really for beginning shell scripting.</p>\n\n<p>-B.</p>\n    "},{"t":"How to extract tar.xz files in Linux? [closed]","l":"http://stackoverflow.com/questions/12298368/how-to-extract-tar-xz-files-in-linux","q":"\n\n<p>How to extract <strong>tar.xz</strong> files in Linux?       </p>\n    ","a":"\n<p>Try:</p>\n\n<pre><code> $ tar xvfJ filename.tar.xz\n</code></pre>\n\n<p>Note that <code>xz</code> support from <a href=\"http://www.gnu.org/software/tar/\"><code>tar 1.22</code> (march 2009)</a>.<br>\nCheck you <code>tar</code> version (and upgrade if needed).</p>\n\n<p>I had a <code>tar 1.15.1</code>, which resulted in:</p>\n\n<pre><code>tar: This does not look like a tar archive\ntar: Skipping to next header\ntar: Archive contains obsolescent base-64 headers\ntar: Read 2144 bytes from /path/to/my_archive.tar.xz\ntar: Error exit delayed from previous errors\n</code></pre>\n\n<p>With a recent <code>tar</code>, a simple <code>tar xpvf</code> will work (for <code>.tar.xz</code>, or <code>.tar.gz</code>):</p>\n\n<pre><code>tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract\n</code></pre>\n\n<p>('<code>extract</code>' being the parent directory in which the archive is extracted)</p>\n    "},{"t":"How to pass in password to pg_dump?","l":"http://stackoverflow.com/questions/2893954/how-to-pass-in-password-to-pg-dump","q":"\n\n<p>I'm trying to create a cronjob to back up my database every night before something catastrophic happens. It looks like this command should meet my needs:</p>\n\n<pre><code>0 3 * * * pg_dump dbname | gzip &gt; ~/backup/db/$(date +%Y-%m-%d).psql.gz\n</code></pre>\n\n<p>Except after running that, it expects me to type in a password. I can't do that if I run it from cron. How can I pass one in automatically?</p>\n    ","a":"\n<p>Create a .pgpass file in the home directory of the account that pg_dump will run as: see <a href=\"http://www.postgresql.org/docs/current/static/libpq-pgpass.html\">http://www.postgresql.org/docs/current/static/libpq-pgpass.html</a> for details of the format (including the last para where it explains it will be ignored if you don't set the mode to 0600).</p>\n    "},{"t":"“find: paths must precede expression:” How do I specify a recursive search that also finds files in the current directory?","l":"http://stackoverflow.com/questions/6495501/find-paths-must-precede-expression-how-do-i-specify-a-recursive-search-that","q":"\n\n<p>I am having a hard time getting <strong>find</strong> to look for matches in the current directory as well as its subdirectories. </p>\n\n<p>When I run <code>find *test.c</code> it only gives me the matches in the current directory. (does not look in subdirectories)</p>\n\n<p>If I try <code>find . -name *test.c</code> I would expect the same results, but instead it gives me only matches that are in a subdirectory. When there are files that should match in the working directory, it gives me: <code>find: paths must precede expression: mytest.c</code> </p>\n\n<p>What does this error mean, and how can I get the matches from both the current directory and its subdirectories?</p>\n    ","a":"\n<p>Try putting it in quotes -- you're running into the shell's wildcard expansion, so what you're acually passing to find will look like:</p>\n\n<pre><code>find . -name bobtest.c cattest.c snowtest.c\n</code></pre>\n\n<p>...causing the syntax error. So try this instead:</p>\n\n<pre><code>find . -name '*test.c'\n</code></pre>\n\n<p>Note the single quotes around your file expression -- these will stop the shell (bash) expanding your wildcards.</p>\n    "},{"t":"How can I use bash syntax in Makefile targets?","l":"http://stackoverflow.com/questions/589276/how-can-i-use-bash-syntax-in-makefile-targets","q":"\n\n<p>I often find <code>bash</code> syntax very helpful, e.g. process substitution like in <code>diff &lt;(sort file1) &lt;(sort file2)</code>.</p>\n\n<p>Is it possible to use such bash commands in a Makefile? I'm thinking of something like this:</p>\n\n<pre><code>file-differences:\n    diff &lt;(sort file1) &lt;(sort file2) &gt; $@\n</code></pre>\n\n<p>In my GNU Make 3.80 this will give an error since it uses the <code>shell</code> instead of <code>bash</code> to execute the commands.</p>\n    ","a":"\n<p>From the GNU Make documentation,</p>\n\n<pre><code>5.3.1 Choosing the Shell\n------------------------\n\nThe program used as the shell is taken from the variable `SHELL'.  If\nthis variable is not set in your makefile, the program `/bin/sh' is\nused as the shell.\n</code></pre>\n\n<p>So put <code>SHELL := /bin/bash</code> at the top of your makefile, and you should be good to go.</p>\n    "},{"t":"In bash, how does one clear the current input?","l":"http://stackoverflow.com/questions/1056394/in-bash-how-does-one-clear-the-current-input","q":"\n\n<p>Suppose in bash you start writing a command like:</p>\n\n<pre><code>$ rm -rf /foo/bar/really/long/path/here\n</code></pre>\n\n<p>and then realize you don't want to execute this after all.  Is there a way to clear the input with one or two keystrokes?</p>\n\n<p>What I have been doing lately is prepending echo and enclosing the input in quotes (Ctrl+A, <code>echo \"</code>, Ctrl+E, <code>\"</code>) then hitting enter.  Is there a faster way?</p>\n    ","a":"\n<ol>\n<li><p>Press <kbd>Ctrl</kbd>-<kbd>U</kbd> to delete everything before the cursor. The deleted command will be stored into a buffer. Press <kbd>Ctrl</kbd>-<kbd>Y</kbd> to paste the deleted command.</p>\n\n<p>(Optional: Press <kbd>End</kbd> or <kbd>Ctrl</kbd>-<kbd>E</kbd> to jump to the end of the input first.)</p></li>\n<li><p>Alternatively, press <kbd>Ctrl</kbd>-<kbd>C</kbd> to abort what you're typing.</p></li>\n</ol>\n    "},{"t":"Quick-and-dirty way to ensure only one instance of a shell script is running at a time","l":"http://stackoverflow.com/questions/185451/quick-and-dirty-way-to-ensure-only-one-instance-of-a-shell-script-is-running-at","q":"\n\n<p>What's a quick-and-dirty way to make sure that only one instance of a shell script is running at a given time?</p>\n    ","a":"\n<p>Here's an implementation that uses a <em>lockfile</em> and echoes a PID into it. This serves as a protection if the process is killed before removing the <em>pidfile</em>:</p>\n\n<pre><code>LOCKFILE=/tmp/lock.txt\nif [ -e ${LOCKFILE} ] &amp;&amp; kill -0 `cat ${LOCKFILE}`; then\n    echo \"already running\"\n    exit\nfi\n\n# make sure the lockfile is removed when we exit and then claim it\ntrap \"rm -f ${LOCKFILE}; exit\" INT TERM EXIT\necho $$ &gt; ${LOCKFILE}\n\n# do stuff\nsleep 1000\n\nrm -f ${LOCKFILE}\n</code></pre>\n\n<p>The trick here is the <code>kill -0</code> which doesn't deliver any signal but just checks if a process with the given PID exists.  Also the call to <code>trap</code> will ensure that the <em>lockfile</em> is removed even when your process is killed (except <code>kill -9</code>).</p>\n    "},{"t":"Assigning default values to shell variables with a single command in bash","l":"http://stackoverflow.com/questions/2013547/assigning-default-values-to-shell-variables-with-a-single-command-in-bash","q":"\n\n<p>i have a whole bunch of tests on variables in a bash (3.00) shell script where if the variable is not set, then it assigns a default, e.g.:</p>\n\n<pre><code>if [ -z \"${VARIABLE}\" ]; then \n    FOO='default'\nelse \n    FOO=${VARIABLE}\nfi\n</code></pre>\n\n<p>I seem to recall there's some syntax to doing this in one line, something resembling a ternary operator, e.g.:</p>\n\n<pre><code>FOO=${ ${VARIABLE} : 'default' }\n</code></pre>\n\n<p>(though I know that won't work...)</p>\n\n<p>am i crazy, or does something like that exist?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>Very close to what you posted, actually:</p>\n\n<pre><code>FOO=${VARIABLE:-default}\n</code></pre>\n\n<p>Or, which will assign to VARIABLE as well:</p>\n\n<pre><code>FOO=${VARIABLE:=default}\n</code></pre>\n    "},{"t":"How to detect if my shell script is running through a pipe?","l":"http://stackoverflow.com/questions/911168/how-to-detect-if-my-shell-script-is-running-through-a-pipe","q":"\n\n<p>How do I detect from within a shell script if its standard output is targetting a terminal or if it's piped to another process? (Case in point: I'd like to add escape codes to colorize output, but only when run interactively, but not when piped, similarly to what <code>ls --color</code> does.)</p>\n    ","a":"\n<p>Pure bash:</p>\n\n<pre><code>if [ -t 1 ] ; then echo terminal; fi\n</code></pre>\n\n<p>returns \"terminal\", because the output is going straight to you, while </p>\n\n<pre><code>(if [ -t 1 ] ; then echo terminal; fi) | cat\n</code></pre>\n\n<p>returns nothing, because the output is going to <code>cat</code>.</p>\n\n<hr>\n\n<p>The -t flag is described in the man pages as</p>\n\n<blockquote>\n  <p>-t fd  True if file descriptor fd is open and refers to a terminal.</p>\n</blockquote>\n\n<p>and I take advantage of the usual file descriptor assignments</p>\n\n<pre><code>0:     stdin  \n1:     stdout  \n2:     stderr\n</code></pre>\n    "},{"t":"Linux how to copy but not overwrite?","l":"http://stackoverflow.com/questions/9392735/linux-how-to-copy-but-not-overwrite","q":"\n\n<p>I want to <code>cp</code> a directory but I do not want to overwrite any existing files even it they are older than the copied files. And I want to do it completely noniteractive as this will be a part of a Crontab Bash script. Any ideas?</p>\n    ","a":"\n<p>Taken from the <a href=\"http://manpages.ubuntu.com/manpages/precise/en/man1/cp.1.html\">man page</a>:</p>\n\n<pre><code>-n, --no-clobber\n              do not overwrite an existing file (overrides a previous -i option)\n</code></pre>\n    "},{"t":"What is the Linux equivalent to DOS pause?","l":"http://stackoverflow.com/questions/92802/what-is-the-linux-equivalent-to-dos-pause","q":"\n\n<p>I have a Bash shell script in which I would like to pause execution until the user presses a key. In DOS, this is easily accomplished with the \"pause\" command. Is there a Linux equivalent I can use in my script?</p>\n    ","a":"\n<p><code>read</code> does this:</p>\n\n<pre><code>user@host:~$ read -n1 -r -p \"Press any key to continue...\" key\n[...]\nuser@host:~$ \n</code></pre>\n\n<p>The <code>-n1</code> specifies that it only waits for a single character.  The <code>-r</code> puts it into raw mode, which is necessary because otherwise, if you press something like backslash, it doesn't register until you hit the next key.  The <code>-p</code> specifies the prompt, which must be quoted if it contains spaces.  The <code>key</code> argument is only necessary if you want to know which key they pressed, in which case you can access it through <code>$key</code>.</p>\n\n<p>If you are using bash, you can also specify a timeout with <code>-t</code>, which causes read to return a failure when a key isn't pressed.  So for example:</p>\n\n<pre><code>read -t5 -n1 -r -p 'Press any key in the next five seconds...' key\nif [ \"$?\" -eq \"0\" ]; then\n    echo 'A key was pressed.'\nelse\n    echo 'No key was pressed.'\nfi\n</code></pre>\n    "},{"t":"How can I convert tabs to spaces in every file of a directory?","l":"http://stackoverflow.com/questions/11094383/how-can-i-convert-tabs-to-spaces-in-every-file-of-a-directory","q":"\n\n<p>How can I convert tabs to spaces in every file of a directory (possibly recursively)?</p>\n\n<p>Also, is there a way of setting the number of spaces per tab?</p>\n    ","a":"\n<p><code>find ./ -type f -not -iwholename '*.git*' -exec sed -i 's/\\t/####/g' {} \\;</code></p>\n\n<p>The # are spaces</p>\n\n<p><strong>For newer installations use <code>expand</code> - see answers below</strong></p>\n    "},{"t":"Echo tab characters in bash script","l":"http://stackoverflow.com/questions/525872/echo-tab-characters-in-bash-script","q":"\n\n<p>How do I echo one or more tab characters using a bash script?\nWhen I run this code</p>\n\n<pre><code>res='   \t'x # res = \"\\t\\tx\"\necho '['$res']' # expect [\\t\\tx]\n</code></pre>\n\n<p>I get this</p>\n\n<pre><code>res=[ x] # that is [&lt;space&gt;x]\n</code></pre>\n    ","a":"\n<pre><code>echo -e ' \\t '\n</code></pre>\n\n<p>will echo 'space tab space newline' (<code>-e</code> means 'enable interpretation of backslash escapes):</p>\n\n<pre><code>$ echo -e ' \\t ' | hexdump -C\n00000000  20 09 20 0a                                       | . .|\n</code></pre>\n    "},{"t":"Can bash show a function's definition?","l":"http://stackoverflow.com/questions/6916856/can-bash-show-a-functions-definition","q":"\n\n<p>Is there a way to view a bash function's definition in bash?</p>\n\n<p>For example, say I defined the function <code>foobar</code></p>\n\n<pre><code>function foobar {\n    echo \"I'm foobar\"\n}\n</code></pre>\n\n<p>Is there any way to later get the code that <code>foobar</code> runs?</p>\n\n<pre><code>$ # non-working pseudocode\n$ echo $foobar\necho \"I'm foobar\"\n</code></pre>\n    ","a":"\n<p>Use <code>type</code>. If <code>foobar</code> is e.g. defined in your <code>~/.profile</code>:</p>\n\n<pre><code>$ type foobar\nfoobar is a function\nfoobar {\n    echo \"I'm foobar\"\n}\n</code></pre>\n\n<p>This does find out what <code>foobar</code> was, and if it was defined as a function it calls <code>declare -f</code> as explained by pmohandras.</p>\n    "},{"t":"Why start a shell command with a backslash?","l":"http://stackoverflow.com/questions/15691977/why-start-a-shell-command-with-a-backslash","q":"\n\n<pre><code>\\curl -L https://get.rvm.io | bash -s stable\n</code></pre>\n\n<p>Why is the command starting with '\\' ?\n<a href=\"https://www.digitalocean.com/community/articles/how-to-install-ruby-on-rails-on-ubuntu-12-04-lts-precise-pangolin-with-rvm\">This is the site where I saw it </a></p>\n    ","a":"\n<pre><code>alias curl='curl --some --default --options'\n</code></pre>\n\n<p>If you have an alias for <code>curl</code> and you don't want to use it, putting a backslash in front disables the alias and runs the curl binary directly.</p>\n\n<p>Note that this only applies at an interactive shell. Aliases don't take effect in scripts so it would be unnecessary there.</p>\n    "},{"t":"Split Files using tar ,gz,zip or bzip2 [closed]","l":"http://stackoverflow.com/questions/1120095/split-files-using-tar-gz-zip-or-bzip2","q":"\n\n<p>I need to compress a gigantic file :D the size is about 17-20 GB. I need to split it to files in size around 1GB for each part. I tried to google it and found ways using <code>split</code>, <code>cat</code> commands but it did not work at all for large files, also they won't work in Windows; I need to extract it on windows machine.</p>\n    ","a":"\n<p>You can use the <code>split</code> command with the <code>-b</code> option:</p>\n\n<pre><code>split -b 1024m file.tar.gz\n</code></pre>\n\n<p>It can be reassembled on a Windows machine using @<a href=\"http://stackoverflow.com/questions/1120095/split-files-using-tar-gz-zip-or-bzip2/1120121#1120121\">Joshua</a>'s answer.</p>\n\n<pre><code>copy /b file1 + file2 + file3 + file4 filetogether\n</code></pre>\n\n<hr>\n\n<p><strong>Edit</strong>: As @Charlie stated in the comment below, you might want to set a prefix explicitly because it will use <code>x</code> otherwise, which can be confusing.</p>\n\n<pre><code>split -b 1024m \"file.tar.gz\" \"file.tar.gz.part-\"\n\n// Creates files: file.tar.gz.part-aa, file.tar.gz.part-ab, file.tar.gz.part-ac, ...\n</code></pre>\n\n<hr>\n\n<p><strong>Edit</strong>: Editing the post because question is closed and the most effective solution is very close to the content of this answer:</p>\n\n<pre><code># create archives\n$ tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_\n# uncompress\n$ cat myfiles_split.tgz_* | tar xz\n</code></pre>\n\n<p>This solution avoids the need to use an intermediate large file when (de)compressing. Use the tar -C option to use a different directory for the resulting files. btw if the archive consists from only a single file, tar could be avoided and only gzip used:</p>\n\n<pre><code># create archives\n$ gzip -c my_large_file | split -b 1024MiB - myfile_split.gz_\n# uncompress\n$ cat myfile_split.gz_* | gunzip -c &gt; my_large_file\n</code></pre>\n\n<p>For windows you can download ported versions of the same commands or use cygwin.</p>\n    "},{"t":"How to gzip all files in all sub-directories into one compressed file in bash","l":"http://stackoverflow.com/questions/12331633/how-to-gzip-all-files-in-all-sub-directories-into-one-compressed-file-in-bash","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3341131/gzipping-up-a-set-of-directories-and-creating-a-tar-compressed-file\">gzipping up a set of directories and creating a tar compressed file</a>  </p>\n</blockquote>\n\n\n\n<p><a href=\"http://stackoverflow.com/questions/10363921/how-to-gzip-all-files-in-all-sub-directories-in-bash\">This post</a> describes how to gzip each file individually within a directory structure. However, I need to do something slightly different. I need to produce one big gzip file for all files under a certain directory. I also need to be able to specify the output filename for the compressed file (e.g., files.gz) and overwrite the old compressed file file if one already exists. </p>\n\n<p>I'm pretty new to Linux, so thanks in advance to any Linux gurus out there for whom this is a cakewalk.</p>\n    ","a":"\n<pre><code>tar -zcvf compressFileName.tar.gz folderToCompress\n</code></pre>\n\n<p>everything in folderToCompress will go to compressFileName</p>\n\n<p>Edit: After review and comments I realized that people may get confused with compressFileName without an extension. If you want you can use .tar.gz extension(as suggested) with the compressFileName</p>\n    "},{"t":"Determine if a function exists in bash","l":"http://stackoverflow.com/questions/85880/determine-if-a-function-exists-in-bash","q":"\n\n<p>Currently I'm doing some unit tests which are executed from bash. Unit tests are initialized, executed and cleaned up in a bash script. This script usualy contains an init(), execute() and cleanup() functions. But they are not mandatory. I'd like to test if they are or are not defined.</p>\n\n<p>I did this previously by greping and seding the source, but it seemed wrong. Is there a more elegant way to do this?</p>\n\n<p>Edit: The following sniplet works like a charm:</p>\n\n<pre><code>fn_exists()\n{\n    type $1 | grep -q 'shell function'\n}\n</code></pre>\n    ","a":"\n<p>I think you're looking for the 'type' command. It'll tell you whether something is a function, built-in function, external command, or just not defined. Example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ type foo\nbash: type: foo: not found\n\n$ type ls\nls is aliased to `ls --color=auto'\n\n$ which type\n\n$ type type\ntype is a shell builtin\n\n$ type -t rvm\nfunction\n\n$ if [ -n \"$(type -t rvm)\" ] &amp;&amp; [ \"$(type -t rvm)\" = function ]; then echo rvm is a function; else echo rvm is NOT a function; fi\nrvm is a function\n</code></pre>\n    "},{"t":"How to create a temporary directory?","l":"http://stackoverflow.com/questions/4632028/how-to-create-a-temporary-directory","q":"\n\n<p>I use to create a <code>tempfile</code>, delete it and recreate it as a directory: </p>\n\n<pre><code>tmpnam=`tempfile`\nrm -f $tmpnam\nmkdir \"$tmpnam\"\n</code></pre>\n\n<p>The problem is, another process may get a same name <code>X</code>, if it accidently executes tempfile after one process <code>rm -f X</code> and just before <code>mkdir X</code>.</p>\n    ","a":"\n<p>Use <a href=\"http://www.mktemp.org/\"><code>mktemp -d</code></a>. It creates a temporary directory with a random name and makes sure that file doesn't already exist. You need to remember to delete the directory after using it though.</p>\n    "},{"t":"How to use > in an xargs command?","l":"http://stackoverflow.com/questions/845863/how-to-use-in-an-xargs-command","q":"\n\n<p>I want to find a bash command that will let me grep every file in a directory and write the output of that grep to a separate file.  My guess would have been to do something like this</p>\n\n<pre><code>ls -1 | xargs -I{} \"grep ABC '{}' &gt; '{}'.out\"\n</code></pre>\n\n<p>but, as far as I know, xargs doesn't like the double-quotes.  If I remove the double-quotes, however, then the command redirects the output of the entire command to a single file called '{}'.out instead of to a series of individual files.  </p>\n\n<p>Does anyone know of a way to do this using xargs?  I just used this grep scenario as an example to illustrate my problem with xargs so any solutions that don't use xargs aren't as applicable for me.</p>\n    ","a":"\n<p>Do not make the mistake of doing this:</p>\n\n<pre><code>sh -c \"grep ABC {} &gt; {}.out\"\n</code></pre>\n\n<p>This will break under a lot of conditions, including funky filenames and is impossible to quote right. What you need to do, is this:</p>\n\n<pre><code>sh -c 'grep ABC \"$1\" &gt; \"$1.out\"' -- {}\n</code></pre>\n\n<p>Applies to <code>xargs</code> as well as <code>find</code>.</p>\n\n<p>By the way, never use xargs without the <code>-0</code> option (unless for very rare and controlled one-time interactive use where you aren't worried about destroying your data).</p>\n\n<p>Also don't parse <code>ls</code>.  Ever.  Use globbing or <code>find</code> instead: <a href=\"http://mywiki.wooledge.org/ParsingLs\">http://mywiki.wooledge.org/ParsingLs</a></p>\n\n<p>Use <code>find</code> for everything that needs recursion and a simple loop with a glob for everything else:</p>\n\n<pre><code>find /foo -exec sh -c 'grep \"$1\" &gt; \"$1.out\"' -- {} \\;\n</code></pre>\n\n<p>or non-recursive:</p>\n\n<pre><code>for file in *; do grep \"$file\" &gt; \"$file.out\"; done\n</code></pre>\n\n<p>Notice the proper use of quotes.</p>\n    "},{"t":"Bash - Recursively Create Nonexistent Subdirectories","l":"http://stackoverflow.com/questions/1731767/bash-recursively-create-nonexistent-subdirectories","q":"\n\n<p>I am creating a quick backup script that will dump some databases into a nice/neat directory structure and I realized that I need to test to make sure that the directories exist before I create them. The code I have works, but it seems that there is a better way to do it. Any suggestions?</p>\n\n<pre><code>[ -d \"$BACKUP_DIR\" ] || mkdir \"$BACKUP_DIR\"\n[ -d \"$BACKUP_DIR/$client\" ] || mkdir \"$BACKUP_DIR/$client\"\n[ -d \"$BACKUP_DIR/$client/$year\" ] || mkdir \"$BACKUP_DIR/$client/$year\"\n[ -d \"$BACKUP_DIR/$client/$year/$month\" ] || mkdir \"$BACKUP_DIR/$client/$year/$month\"\n[ -d \"$BACKUP_DIR/$client/$year/$month/$day\" ] || mkdir \"$BACKUP_DIR/$client/$year/$month/$day\"\n</code></pre>\n    ","a":"\n<p>You can use the <code>-p</code> parameter, which is <a href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?mkdir\" rel=\"nofollow\">documented as</a>:</p>\n\n<blockquote>\n  <p>-p, --parents</p>\n  \n  <p>no error if existing, make parent directories as needed</p>\n</blockquote>\n\n<p>So:</p>\n\n<pre><code>mkdir -p \"$BACKUP_DIR/$client/$year/$month/$day\"\n</code></pre>\n    "},{"t":"How to create a CPU spike with a bash command","l":"http://stackoverflow.com/questions/2925606/how-to-create-a-cpu-spike-with-a-bash-command","q":"\n\n<p>I want to create a near 100% load on a Linux machine.  It's quad core system and I want all cores going full speed.  Ideally, the CPU load would last a designated amount of time and then stop.  I'm hoping there's some trick in bash.  I'm thinking some sort of infinite loop. </p>\n    ","a":"\n<p>You can also do</p>\n\n<pre><code>dd if=/dev/zero of=/dev/null\n</code></pre>\n\n<p>To run more of those to put load on more cores, try to fork it: </p>\n\n<pre><code>fulload() { dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &amp; }; fulload; read; killall dd\n</code></pre>\n\n<p>Repeat the command in the curly brackets as many times as the number of threads you want to produce (here 4 threads). \nSimple enter hit will stop it (just make sure no other dd is running on this user or you kill it too). </p>\n    "},{"t":"Bash script to replace spaces in file names","l":"http://stackoverflow.com/questions/2709458/bash-script-to-replace-spaces-in-file-names","q":"\n\n<p>Can anyone recommend a safe solution to recursively replace spaces with underscores in file and directory names starting from a given root directory? For example,</p>\n\n<pre>$ tree\n.\n|-- a dir\n|   `-- file with spaces.txt\n`-- b dir\n    |-- another file with spaces.txt\n    `-- yet another file with spaces.pdf\n</pre>\n\n<p>becomes</p>\n\n<pre>$ tree\n.\n|-- a_dir\n|   `-- file_with_spaces.txt\n`-- b_dir\n    |-- another_file_with_spaces.txt\n    `-- yet_another_file_with_spaces.pdf\n</pre>\n\n<p><strong>Edit</strong></p>\n\n<p>Thanks for the answers; they all seem to work. I picked the one by Dennis as the main answer because it seems to me the simplest, even though it takes two steps.</p>\n    ","a":"\n<p>Use <code>rename</code> (aka <code>prename</code>) which is a Perl script which may be on your system already. Do it in two steps:</p>\n\n<pre><code>find -name \"* *\" -type d | rename 's/ /_/g'    # do the directories first\nfind -name \"* *\" -type f | rename 's/ /_/g'\n</code></pre>\n\n<p><strong>Edit:</strong></p>\n\n<p>Based on <strong>Jürgen's</strong> answer and able to handle multiple layers of files and directories in a single bound using the \"Revision 1.5  1998/12/18 16:16:31  rmb1\" version of <code>/usr/bin/rename</code> (a Perl script):</p>\n\n<pre><code>find /tmp/ -depth -name \"* *\" -execdir rename 's/ /_/g' \"{}\" \\;\n</code></pre>\n    "},{"t":"bash shell scripting combining *.txt into one file","l":"http://stackoverflow.com/questions/2150614/bash-shell-scripting-combining-txt-into-one-file","q":"\n\n<p>What is the quickest and most pragmatic way to combine all *.txt file in a directory into one large text file?</p>\n\n<p>Currently I'm using windows with cygwin so I have access to BASH.</p>\n\n<p>Windows shell command would be nice too but I doubt there is one.</p>\n    ","a":"\n<p>This appends the output to all.txt</p>\n\n<pre><code>cat *.txt &gt;&gt; all.txt\n</code></pre>\n\n<p>This overwrites all.txt</p>\n\n<pre><code>cat *.txt &gt; all.txt\n</code></pre>\n    "},{"t":"sed command failing on Mac, but works on Linux","l":"http://stackoverflow.com/questions/4247068/sed-command-failing-on-mac-but-works-on-linux","q":"\n\n<p>I've succesfully used the following sed command to search/replace text in Linux:</p>\n\n<pre><code>sed -i 's/old_link/new_link/g' *\n</code></pre>\n\n<p>However, when I try it on my Mac OS X, I get:</p>\n\n<blockquote>\n  <p>\"command c expects \\ followed by text\"</p>\n</blockquote>\n\n<p>Thought my mac runs a normal BASH shell.  What's up?</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>According to @High Performance, this is due to Mac sed being of a different BSD flavor, so my question would therefore be how do I replicate this command in BSD sed?</p>\n\n<p><strong>EDIT:</strong> </p>\n\n<p>Here is an actual example that causes this:</p>\n\n<pre><code>sed -i 's/hello/gbye/g' *\n</code></pre>\n    ","a":"\n<p>If you use the -i option you need to provide an extension for your backups.</p>\n\n<p>If you have:</p>\n\n<pre><code>File1.txt\nFile2.cfg\n</code></pre>\n\n<p>The command:</p>\n\n<pre><code>sed -i '.original' 's/old_link/new_link/g' *\n</code></pre>\n\n<p>create 2 backup files like:</p>\n\n<pre><code>File1.txt.original\nFile2.cfg.original\n</code></pre>\n\n<p>You can use</p>\n\n<pre><code>sed -i '' 's/old_link/new_link/g' *\n</code></pre>\n\n<p>to ignore backups.</p>\n    "},{"t":"changing default shell in linux [closed]","l":"http://stackoverflow.com/questions/13046192/changing-default-shell-in-linux","q":"\n\n<p>How it is possible to change the default shell? Currently <code>env</code> command says </p>\n\n<pre><code>SHELL=/bin/tcsh\n</code></pre>\n\n<p>and I want to change that to bash</p>\n    ","a":"\n<p>Try linux command <code>chsh</code>.</p>\n\n<p>The detailed command is <code>chsh -s /bin/bash</code>.\nIt will prompt you to enter your password.\nYour default login shell is <code>/bin/bash</code> now.</p>\n\n<p>The following is quoted from man page:</p>\n\n<blockquote>\n  <p>The chsh command changes the user login shell. This determines the\n  name\n         of the users initial login command. A normal user may only change the\n         login shell for her own account, the superuser may change the login\n         shell for any account</p>\n</blockquote>\n\n<p>This command will change the default login shell permanently.</p>\n    "},{"t":"Use of an exclamation mark in a git commit message via command line?","l":"http://stackoverflow.com/questions/5131948/use-of-an-exclamation-mark-in-a-git-commit-message-via-command-line","q":"\n\n<p>How do I enter an exclamation point into a git commit message from the command line?</p>\n\n<p>It is possible to escape the exclamation point with a backslash, but then the backslash ends up in the commit message as well.</p>\n\n<p>I want something like this:</p>\n\n<pre><code>git commit -am \"Nailed it!\"\n</code></pre>\n    ","a":"\n<p>Use single quotes instead of double quotes</p>\n\n<pre><code>git commit -am 'Nailed it!'\n</code></pre>\n\n<p>Alternatively, if you need to use double quotes for whatever reason but still want a literal <code>!</code> then turn off history expansion at the top of your script via <code>set +H</code></p>\n    "},{"t":"How can I quickly sum all numbers in a file?","l":"http://stackoverflow.com/questions/2702564/how-can-i-quickly-sum-all-numbers-in-a-file","q":"\n\n<p>I have a file which contains several thousand numbers, each on it's own line:</p>\n\n<pre><code>34\n42\n11\n6\n2\n99\n...\n</code></pre>\n\n<p>I'm looking to write a script which will print the sum of all numbers in the file. I've got a solution, but it's not very efficient. (It takes several minutes to run.) I'm looking for a more efficient solution. Any suggestions?</p>\n    ","a":"\n<p>For a Perl one-liner, it's basically the same thing as the <code>awk</code> solution in <a href=\"http://stackoverflow.com/questions/2702564/script-to-sum-all-numbers-in-a-file-linux/2702577#2702577\">Ayman Hourieh's answer</a>:</p>\n\n<pre><code> % perl -nle '$sum += $_ } END { print $sum'\n</code></pre>\n\n<p>If you're curious what Perl one-liners do, you can deparse them:</p>\n\n<pre><code> %  perl -MO=Deparse -nle '$sum += $_ } END { print $sum'\n</code></pre>\n\n<p>The result is a more verbose version of the program, in a form that no one would ever write on their own:</p>\n\n<pre><code>BEGIN { $/ = \"\\n\"; $\\ = \"\\n\"; }\nLINE: while (defined($_ = &lt;ARGV&gt;)) {\n    chomp $_;\n    $sum += $_;\n}\nsub END {\n    print $sum;\n}\n-e syntax OK\n</code></pre>\n\n<p>Just for giggles, I tried this with a file containing 1,000,000 numbers (in the range 0 - 9,999). On my Mac Pro, it returns virtually instantaneously. That's too bad, because I was hoping using <code>mmap</code> would be really fast, but it's just the same time:</p>\n\n<pre><code>use 5.010;\nuse File::Map qw(map_file);\n\nmap_file my $map, $ARGV[0];\n\n$sum += $1 while $map =~ m/(\\d+)/g;\n\nsay $sum;\n</code></pre>\n    "},{"t":"iterm2: how to get jump to beginning/end of line in bash shell?","l":"http://stackoverflow.com/questions/6205157/iterm2-how-to-get-jump-to-beginning-end-of-line-in-bash-shell","q":"\n\n<p>I can see that <kbd>Ctrl</kbd>+<kbd>left</kbd>/<kbd>right</kbd> jumps to the beginning/end of line. How to change this to <kbd>Cmd</kbd>+<kbd>left</kbd>/<kbd>right arrow</kbd>?</p>\n\n<p>In order to get <kbd>Alt</kbd>+<kbd>left</kbd>/<kbd>right arrow</kbd> working correctly for word jumping follow <a href=\"http://hackaddict.blogspot.com/2007/07/skip-to-next-or-previous-word-in-iterm.html\" rel=\"nofollow\">this article</a>.</p>\n    ","a":"\n<p><strong>Add in iTerm2 the following Profile Shortcut Keys</strong></p>\n\n<pre><code>FOR  ACTION         SEND\n⌘←  \"HEX CODE\"      0x01 \n⌘→  \"HEX CODE\"      0x05\n⌥←  \"SEND ESC SEQ\"  b\n⌥→  \"SEND ESC SEQ\"  f\n</code></pre>\n    "},{"t":"Select unique or distinct values from a list in UNIX shell script","l":"http://stackoverflow.com/questions/618378/select-unique-or-distinct-values-from-a-list-in-unix-shell-script","q":"\n\n<p>I have a ksh script that returns a long list of values, newline separated, and I want to see only the unique/distinct values. It is possible to do this?</p>\n\n<p>For example, say my output is file suffixes in a directory:</p>\n\n<blockquote>\n<pre><code>tar\ngz\njava\ngz\njava\ntar\nclass\nclass\n</code></pre>\n</blockquote>\n\n<p>I want to see a list like:</p>\n\n<blockquote>\n<pre><code>tar\ngz\njava\nclass\n</code></pre>\n</blockquote>\n    ","a":"\n<p>You might want to look at the <code>uniq</code> and <code>sort</code> applications.</p>\n\n<pre>./yourscript.ksh | sort | uniq\n</pre>\n\n<p>(FYI, yes, the sort is necessary in this command line, <code>uniq</code> only strips duplicate lines that are immediately after each other)</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Contrary to what has been posted by <a href=\"http://stackoverflow.com/questions/618378/select-unique-or-distinct-values-from-a-list-in-unix-shell-script/618382#618382\">Aaron Digulla</a> in relation to <code>uniq</code>'s commandline options:</p>\n\n<p>Given the following input:</p>\n\n<pre>class\njar\njar\njar\nbin\nbin\njava\n</pre>\n\n<p><code>uniq</code> will output all lines exactly once:</p>\n\n<pre>class\njar\nbin\njava\n</pre>\n\n<p><code>uniq -d</code> will output all lines that appear more than once, and it will print them once:</p>\n\n<pre>jar\nbin\n</pre>\n\n<p><code>uniq -u</code> will output all lines that appear exactly once, and it will print them once:</p>\n\n<pre>class\njava\n</pre>\n    "},{"t":"Bash script, read values from stdin pipe","l":"http://stackoverflow.com/questions/2746553/bash-script-read-values-from-stdin-pipe","q":"\n\n<p>I am trying to get bash to process data from stdin that gets piped it, but no luck, what I mean is none of the following work:</p>\n\n<pre><code>echo \"hello world\" | test=($(&lt; /dev/stdin)); echo test=$test\ntest=\n\n\necho \"hello world\" | read test; echo test=$test\ntest=\n\n\necho \"hello world\" | test=`cat`; echo test=$test\ntest=\n</code></pre>\n\n<p>where I want the output to be <code>test=hello world</code>. Note I've tried putting \"\" quotes around <code>\"$test\"</code> that doesn't work either.</p>\n    ","a":"\n<p>Use</p>\n\n<pre><code>IFS= read var &lt;&lt; EOF\n$(foo)\nEOF\n</code></pre>\n\n<p>You <em>can</em> trick <code>read</code> into accepting from a pipe like this:</p>\n\n<pre><code>echo \"hello world\" | { read test; echo test=$test; }\n</code></pre>\n\n<p>or even write a function like this:</p>\n\n<pre><code>read_from_pipe() { read \"$@\" &lt;&amp;0; }\n</code></pre>\n\n<p>But there's no point - your variable assignments may not last! A pipeline may spawn a subshell, where the environment is inherited by value, not by reference. This is why <code>read</code> doesn't bother with input from a pipe - it's undefined.</p>\n\n<p>FYI, <a href=\"http://www.etalabs.net/sh_tricks.html\">http://www.etalabs.net/sh_tricks.html</a> is a nifty collection of the cruft necessary to fight the oddities and incompatibilities of bourne shells, sh.</p>\n    "},{"t":"linux: copy and create destination dir if it does not exist","l":"http://stackoverflow.com/questions/1529946/linux-copy-and-create-destination-dir-if-it-does-not-exist","q":"\n\n<p>Linux: I want a command (or probably an option to cp) that creates the destination directory if it does not exist.</p>\n\n<p>Example:</p>\n\n<pre><code>cp -? file /path/to/copy/file/to/is/very/deep/there\n</code></pre>\n    ","a":"\n<pre><code>test -d \"$d\" || mkdir -p \"$d\" &amp;&amp; cp file \"$d\"\n</code></pre>\n\n<p>(there's no such option for <code>cp</code>).</p>\n    "},{"t":"What is your favorite Bash prompt? [closed]","l":"http://stackoverflow.com/questions/103857/what-is-your-favorite-bash-prompt","q":"\n\n<p>What are some elements in your favorite Bash prompt?</p>\n\n<p>I like to have an indicator of the success of the most recent command, like so (in <code>.bashrc</code>):</p>\n\n<pre><code>function exitstatus {\n\n    EXITSTATUS=\"$?\"\n    BOLD=\"\\[\\033[1m\\]\"\n    RED=\"\\[\\033[1;31m\\]\"\n    GREEN=\"\\[\\e[32;1m\\]\"\n    BLUE=\"\\[\\e[34;1m\\]\"\n    OFF=\"\\[\\033[m\\]\"\n\n    PROMPT=\"[\\u@\\h ${BLUE}\\W${OFF}\"\n\n    if [ \"${EXITSTATUS}\" -eq 0 ]\n    then\n       PS1=\"${PROMPT} ${BOLD}${GREEN}:)${OFF} ]\\$ \"\n    else\n       PS1=\"${PROMPT} ${BOLD}${RED}:(${OFF} ]\\$ \"\n    fi\n\n    PS2=\"${BOLD}&gt;${OFF} \"\n}\n\nPROMPT_COMMAND=exitstatus\n</code></pre>\n    ","a":"\n<p>Take a gander at \"<a href=\"http://www.reddit.com/r/programming/comments/697cu/bash_users_what_do_you_have_for_your_ps1/\" rel=\"nofollow\">Bash users: What do you have for your $PS1?</a>\" for a large number of examples.</p>\n    "},{"t":"Bash - remove the last line from a file","l":"http://stackoverflow.com/questions/4881930/bash-remove-the-last-line-from-a-file","q":"\n\n<p>I have a file, <code>foo.txt</code>, containing the following lines:</p>\n\n<pre><code>a\nb\nc\n</code></pre>\n\n<p>I want a simple command that results in the contents of <code>foo.txt</code> being:</p>\n\n<pre><code>a\nb\n</code></pre>\n    ","a":"\n<p>Using <a href=\"http://www.gnu.org/software/sed/\"><code>GNU sed</code></a>:</p>\n\n<pre><code>sed -i '$ d' foo.txt\n</code></pre>\n\n<p>The <code>-i</code> option does not exist in older versions, so you have to use it as a filter with a temporary file:</p>\n\n<pre><code>cp foo.txt foo.txt.tmp\nsed '$ d' foo.txt.tmp &gt; foo.txt\nrm -f foo.txt.tmp\n</code></pre>\n\n<p>Of course, in that case you could also use <code>head -n -1</code> instead of <code>sed</code>.</p>\n    "},{"t":"how to run script as another user without password [closed]","l":"http://stackoverflow.com/questions/6905697/how-to-run-script-as-another-user-without-password","q":"\n\n<p>I have script.sh that must be run as user2.  However, this script can only be run under user1 in my application.</p>\n\n<p>I would like the following command to run:</p>\n\n<pre><code>su user2 -C script.sh\n</code></pre>\n\n<p>but be able to run without password.</p>\n\n<p>I also want this to be very restrictive, as in user1 can only run script.sh under user2 and nothing else.</p>\n\n<p>I've tried doing this with sudoers file and just got endlessly confused after hours of trying.</p>\n\n<p>If somebody can provide an explicit example of how this can be accomplished (instead of something generic like use sudoers), it would be greatly appreciated.</p>\n    ","a":"\n<p>Call <code>visudo</code> and add this:</p>\n\n<pre><code>user1 ALL=(user2) NOPASSWD: /home/user2/bin/test.sh\n</code></pre>\n\n<p>The command paths must be absolute! Then call <code>sudo -u user2 /home/user2/bin/test.sh</code> from a <code>user1</code> shell. Done.</p>\n    "},{"t":"A semantics for Bash scripts?","l":"http://stackoverflow.com/questions/23207168/a-semantics-for-bash-scripts","q":"\n\n<p>More than any other language I know, I've \"learned\" Bash by Googling every time I need some little thing. Consequently, I can patchwork together little scripts that appear to work. However, I don't <em>really</em> know what's going on, and I was hoping for a more formal introduction to Bash as a programming language. For example: What is the evaluation order? what are the scoping rules? What is the typing discipline, e.g. is everything a string? What is the state of the program -- is it a key-value assignment of strings to variable names; is there more than that, e.g. the stack? Is there a heap? And so on.</p>\n\n<p>I thought to consult the GNU Bash manual for this kind of insight, but it doesn't seem to be what I want; it's more of a laundry list of syntactic sugar rather than an explanation of the core semantic model. The million-and-one \"bash tutorials\" online are only worse. Perhaps I should first study <code>sh</code>, and understand Bash as a syntactic sugar on top of this? I don't know if this is an accurate model, though.</p>\n\n<p>Any suggestions?</p>\n\n<p><strong>EDIT:</strong> I've been asked to provide examples of what ideally I'm looking for. A rather extreme example of what I would consider a \"formal semantics\" is <a href=\"http://cs.brown.edu/~sk/Publications/Papers/Published/gsk-essence-javascript/paper.pdf\">this paper on \"the essence of JavaScript\"</a>. Perhaps a slightly less formal example is the <a href=\"http://www.haskell.org/definition/haskell2010.pdf\">Haskell 2010 report</a>.</p>\n    ","a":"\n<p>A shell is an interface for the operating system. It is usually a more-or-less robust programming language in its own right, but with features designed to make it easy to interact specifically with the operating system and filesystem. The POSIX shell's (hereafter referred to just as \"the shell\") semantics are a bit of a mutt, combining some features of LISP (s-expressions have a lot in common with shell <a href=\"http://mywiki.wooledge.org/WordSplitting\">word splitting</a>) and C (much of the shell's <a href=\"http://mywiki.wooledge.org/ArithmeticExpression\">arithmetic syntax</a> semantics comes from C).</p>\n\n<p>The other root of the shell's syntax comes from its upbringing as a mishmash of individual UNIX utilities. Most of what are often builtins in the shell can actually be implemented as external commands. It throws many shell neophytes for a loop when they realize that <code>/bin/[</code> exists on many systems.</p>\n\n<pre><code>$ if '/bin/[' -f '/bin/['; then echo t; fi # Tested as-is on OS X, without the `]`\nt\n</code></pre>\n\n<p>wat?</p>\n\n<p>This makes a lot more sense if you look at how a shell is implemented. Here's an implementation I did as an exercise. It's in Python, but I hope that's not a hangup for anyone. It's not terribly robust, but it is instructive:</p>\n\n<pre><code>#!/usr/bin/env python\n\nfrom __future__ import print_function\nimport os, sys\n\n'''Hacky barebones shell.'''\n\ntry:\n  input=raw_input\nexcept NameError:\n  pass\n\ndef main():\n  while True:\n    cmd = input('prompt&gt; ')\n    args = cmd.split()\n    if not args:\n      continue\n    cpid = os.fork()\n    if cpid == 0:\n      # We're in a child process\n      os.execl(args[0], *args)\n    else:\n      os.waitpid(cpid, 0)\n\nif __name__ == '__main__':\n  main()\n</code></pre>\n\n<p>I hope the above makes it clear that the execution model of a shell is pretty much:</p>\n\n<pre><code>1. Expand words.\n2. Assume the first word is a command.\n3. Execute that command with the following words as arguments.\n</code></pre>\n\n<p>Expansion, command resolution, execution. All of the shell's semantics are bound up in one of these three things, although they're far richer than the implementation I wrote above.</p>\n\n<p>Not all commands <code>fork</code>. In fact, there are a handful of commands that don't make <a href=\"http://unix.stackexchange.com/questions/50058/what-is-the-point-of-the-cd-external-command\">a ton of sense</a> implemented as externals (such that they would have to <code>fork</code>), but even those are often available as externals for strict POSIX compliance.</p>\n\n<p>Bash builds upon this base by adding new features and keywords to enhance the POSIX shell. It is nearly compatible with sh, and bash is so ubiquitous that some script authors go years without realizing that a script may not actually work on a POSIXly strict system. (I also wonder how people can care so much about the semantics and style of one programming language, and so little for the semantics and style of the shell, but I diverge.)</p>\n\n<h2>Order of evaluation</h2>\n\n<p>This is a bit of a trick question: Bash interprets expressions in its primary syntax from left to right, but in its arithmetic syntax it follows C precedence. Expressions differ from <em>expansions</em>, though. From the <code>EXPANSION</code> section of the bash manual:</p>\n\n<blockquote>\n  <p>The order of expansions is: brace expansion; tilde expansion, parameter\n    and variable expansion, arithmetic expansion, and command substitution\n    (done in a left-to-right fashion); word splitting; and pathname expansion.</p>\n</blockquote>\n\n<p>If you understand wordsplitting, pathname expansion and parameter expansion, you are well on your way to understanding most of what bash does. Note that pathname expansion coming after wordsplitting is critical, because it ensures that a file with whitespace in its name can still be matched by a glob. This is why good use of glob expansions is better than <a href=\"http://mywiki.wooledge.org/ParsingLs\">parsing commands</a>, in general.</p>\n\n<h2>Scope</h2>\n\n<h3>Function scope</h3>\n\n<p>Much like old ECMAscript, the shell has dynamic scope unless you explicitly declare names within a function.</p>\n\n<pre><code>$ foo() { echo $x; }\n$ bar() { local x; echo $x; }\n$ foo\n\n$ bar\n\n$ x=123\n$ foo\n123\n$ bar\n\n$ …\n</code></pre>\n\n<h3>Environment and process \"scope\"</h3>\n\n<p>Subshells inherit the variables of their parent shells, but other kinds of processes don't inherit unexported names.</p>\n\n<pre><code>$ x=123\n$ ( echo $x )\n123\n$ bash -c 'echo $x'\n\n$ export x\n$ bash -c 'echo $x'\n123\n$ y=123 bash -c 'echo $y' # another way to transiently export a name\n123\n</code></pre>\n\n<p>You can combine these scoping rules:</p>\n\n<pre><code>$ foo() {\n&gt;   local -x bar=123 # Export foo, but only in this scope\n&gt;   bash -c 'echo $bar'\n&gt; }\n$ foo\n123\n$ echo $bar\n\n$\n</code></pre>\n\n<h2>Typing discipline</h2>\n\n<p>Um, types. Yeah. Bash really doesn't have types, and everything expands to a string (or perhaps a <em>word</em> would be more appropriate.) But let's examine the different types of expansions.</p>\n\n<h3>Strings</h3>\n\n<p>Pretty much anything can be treated as a string. Barewords in bash are strings whose meaning depends entirely on the expansion applied to it.</p>\n\nNo expansion\n\n<p>It may be worthwhile to demonstrate that a bare word really is just a word, and that quotes change nothing about that.</p>\n\n<pre><code>$ echo foo\nfoo\n$ 'echo' foo\nfoo\n$ \"echo\" foo\nfoo\n</code></pre>\n\nSubstring expansion\n\n<pre><code>$ fail='echoes'\n$ set -x # So we can see what's going on\n$ \"${fail:0:-2}\" Hello World\n+ echo Hello World\nHello World\n</code></pre>\n\n<p>For more on expansions, read the <code>Parameter Expansion</code> section of the manual. It's quite powerful.</p>\n\n<h3>Integers and arithmetic expressions</h3>\n\n<p>You can imbue names with the integer attribute to tell the shell to treat the right hand side of assignment expressions as arithmetic. Then, when the parameter expands it will be evaluated as integer math before expanding to … a string.</p>\n\n<pre><code>$ foo=10+10\n$ echo $foo\n10+10\n$ declare -i foo\n$ foo=$foo # Must re-evaluate the assignment\n$ echo $foo\n20\n$ echo \"${foo:0:1}\" # Still just a string\n2\n</code></pre>\n\n<h3>Arrays</h3>\n\nArguments and Positional Parameters\n\n<p>Before talking about arrays it might be worth discussing positional parameters. The arguments to a shell script can be accessed using numbered parameters, <code>$1</code>, <code>$2</code>, <code>$3</code>, etc. You can access all these parameters at once using <code>\"$@\"</code>, which expansion has many things in common with arrays. You can set and change the positional parameters using the <code>set</code> or <code>shift</code> builtins, or simply by invoking the shell or a shell function with these parameters:</p>\n\n<pre><code>$ bash -c 'for ((i=1;i&lt;=$#;i++)); do\n&gt;   printf \"\\$%d =&gt; %s\\n\" \"$i\" \"${@:i:1}\"\n&gt; done' -- foo bar baz\n$1 =&gt; foo\n$2 =&gt; bar\n$3 =&gt; baz\n$ showpp() {\n&gt;   local i\n&gt;   for ((i=1;i&lt;=$#;i++)); do\n&gt;     printf '$%d =&gt; %s\\n' \"$i\" \"${@:i:1}\"\n&gt;   done\n&gt; }\n$ showpp foo bar baz\n$1 =&gt; foo\n$2 =&gt; bar\n$3 =&gt; baz\n$ showshift() {\n&gt;   shift 3\n&gt;   showpp \"$@\"\n&gt; }\n$ showshift foo bar baz biz quux xyzzy\n$1 =&gt; biz\n$2 =&gt; quux\n$3 =&gt; xyzzy\n</code></pre>\n\n<p>The bash manual also sometimes refers to <code>$0</code> as a positional parameter. I find this confusing, because it doesn't include it in the argument count <code>$#</code>, but it is a numbered parameter, so meh. <code>$0</code> is the name of the shell or the current shell script.</p>\n\nArrays\n\n<p>The syntax of arrays is modeled after positional parameters, so it's mostly healthy to think of arrays as a named kind of \"external positional parameters\", if you like. Arrays can be declared using the following approaches:</p>\n\n<pre><code>$ foo=( element0 element1 element2 )\n$ bar[3]=element3\n$ baz=( [12]=element12 [0]=element0 )\n</code></pre>\n\n<p>You can access array elements by index:</p>\n\n<pre><code>$ echo \"${foo[1]}\"\nelement1\n</code></pre>\n\n<p>You can slice arrays:</p>\n\n<pre><code>$ printf '\"%s\"\\n' \"${foo[@]:1}\"\n\"element1\"\n\"element2\"\n</code></pre>\n\n<p>If you treat an array as a normal parameter, you'll get the zeroth index.</p>\n\n<pre><code>$ echo \"$baz\"\nelement0\n$ echo \"$bar\" # Even if the zeroth index isn't set\n\n$ …\n</code></pre>\n\n<p>If you use quotes or backslashes to prevent wordsplitting, the array will maintain the specified wordsplitting:</p>\n\n<pre><code>$ foo=( 'elementa b c' 'd e f' )\n$ echo \"${#foo[@]}\"\n2\n</code></pre>\n\n<p>The main difference between arrays and positional parameters are:</p>\n\n<ol>\n<li>Positional parameters are not sparse. If <code>$12</code> is set, you can be sure <code>$11</code> is set, too. (It could be set to the empty string, but <code>$#</code> will not be smaller than 12.) If <code>\"${arr[12]}\"</code> is set, there's no guarantee that <code>\"${arr[11]}\"</code> is set, and the length of the array could be as small as 1.</li>\n<li>The zeroth element of an array is unambiguously the zeroth element of that array. In positional parameters, the zeroth element is not the <em>first argument</em>, but the name of the shell or shell script.</li>\n<li>To <code>shift</code> an array, you have to slice and reassign it, like <code>arr=( \"${arr[@]:1}\" )</code>. You could also do <code>unset arr[0]</code>, but that would make the first element at index 1.</li>\n<li>Arrays can be shared implicitly between shell functions as globals, but you have to explicitly pass positional parameters to a shell function for it to see those.</li>\n</ol>\n\n<p>It's often convenient to use pathname expansions to create arrays of filenames:</p>\n\n<pre><code>$ dirs=( */ )\n</code></pre>\n\n<h3>Commands</h3>\n\n<p>Commands are key, but they're also covered in better depth than I can by the manual. Read the <code>SHELL GRAMMAR</code> section. The different kinds of commands are:</p>\n\n<ol>\n<li>Simple Commands (e.g. <code>$ startx</code>)</li>\n<li>Pipelines (e.g. <code>$ yes | make config</code>) (lol)</li>\n<li>Lists (e.g. <code>$ grep -qF foo file &amp;&amp; sed 's/foo/bar/' file &gt; newfile</code>)</li>\n<li>Compound Commands (e.g. <code>$ ( cd -P /var/www/webroot &amp;&amp; echo \"webroot is $PWD\" )</code>)</li>\n<li>Coprocesses (Complex, no example)</li>\n<li>Functions (A named compound command that can be treated as a simple command)</li>\n</ol>\n\n<h2>Execution Model</h2>\n\n<p>The execution model of course involves both a heap and a stack. This is endemic to all UNIX programs. Bash also has a call stack for shell functions, visible via nested use of the <code>caller</code> builtin. </p>\n\n<p>References:</p>\n\n<ol>\n<li>The <code>SHELL GRAMMAR</code> section of the bash manual</li>\n<li>The <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html\">XCU Shell Command Language</a> documentation</li>\n<li>The <a href=\"http://mywiki.wooledge.org/BashGuide\">Bash Guide</a> on Greycat's wiki.</li>\n<li><a href=\"http://www.apuebook.com/\">Advanced Programming in the UNIX Environment</a></li>\n</ol>\n\n<p>Please make comments if you want me to expand further in a specific direction.</p>\n    "},{"t":"Replace one substring for another string in shell script","l":"http://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script","q":"\n\n<p>I have \"i love Suzi and Marry\" and i want change \"Suzi\" to \"Sara\"</p>\n\n<pre><code>#!/bin/bash\nfirstString=\"I love Suzi and Marry\"\nsecondString=\"Sara\"\n# do something...\n</code></pre>\n\n<p>and a the result must be next:</p>\n\n<pre><code>firstString=\"I love Sara and Marry\"\n</code></pre>\n\n<p>Maybe someone can help me here?</p>\n    ","a":"\n<p>You can write:</p>\n\n<pre><code>original_string='i love Suzi and Marry'\nstring_to_replace_Suzi_with=Sara\nresult_string=\"${original_string/Suzi/$string_to_replace_Suzi_with}\"\n</code></pre>\n    "},{"t":"How to remove trailing whitespace of all files recursively?","l":"http://stackoverflow.com/questions/149057/how-to-remove-trailing-whitespace-of-all-files-recursively","q":"\n\n<p>How can you remove all of the trailing whitespace of an entire project? Starting at a root directory, and removing the trailing whitespace from all files in all folders.</p>\n\n<p>Also, I want to to be able to modify the file directly, and not just print everything to stdout.</p>\n    ","a":"\n<p>Here is an OS X &gt;= 10.6 Snow Leopard solution.</p>\n\n<p><strong>It Ignores .git and .svn folders</strong> and their contents. Also it won't leave a backup file.</p>\n\n<pre><code>find . -not \\( -name .svn -prune -o -name .git -prune \\) -type f -print0 | xargs -0 sed -i '' -E \"s/[[:space:]]*$//\"\n</code></pre>\n    "},{"t":"What does set -e mean in a bash script?","l":"http://stackoverflow.com/questions/19622198/what-does-set-e-mean-in-a-bash-script","q":"\n\n<p>I am very new to bash scripting and to the Ubuntu/Debian package system.</p>\n\n<p>Today I am studying the content of this <strong>preinst</strong> file that the script executes before that package is unpacked from its Debian archive (.deb) file.</p>\n\n<p>The script has the following code:</p>\n\n<pre><code>#!/bin/bash\nset -e\n# Automatically added by dh_installinit\nif [ \"$1\" = install ]; then\n   if [ -d /usr/share/MyApplicarionName ]; then\n     echo \"MyApplicarionName is just installed\"\n     return 1\n   fi\n   rm -Rf $HOME/.config/nautilus-actions/nautilus-actions.conf\n   rm -Rf $HOME/.local/share/file-manager/actions/*\nfi\n# End automatically added section\n</code></pre>\n\n<p>My fist query is about the line</p>\n\n<pre><code>set -e\n</code></pre>\n\n<p>Probably it is a stupid question but, using Google, I can’t find an answer.</p>\n\n<p>I think that the rest of the script is pretty simple: It checks whether the Debian/Ubuntu package manager is executing an install operation. If it is, it checks whether my application has just been installed on the system. If it has, the script prints the message <strong>\"MyApplicarionName is just installed\"</strong> and ends (<code>return 1</code> mean that ends with an “error”, doesn’t it?).</p>\n\n<p>If the user is asking the Debian/Ubuntu package system to install my package, the script also deletes two directories.</p>\n\n<p>Is this right or am I missing something?</p>\n    ","a":"\n<p>From <code>help set</code> :</p>\n\n<pre><code>  -e  Exit immediately if a command exits with a non-zero status.\n</code></pre>\n\n<p>But it's not very reliable and considered a bad practice, better use :</p>\n\n<pre><code>trap 'do_something' ERR\n</code></pre>\n\n<p>to run <code>do_something</code> function when errors will occurs.</p>\n\n<p>See <a href=\"http://mywiki.wooledge.org/BashFAQ/105\">http://mywiki.wooledge.org/BashFAQ/105</a></p>\n    "},{"t":"How do you normalize a file path in Bash?","l":"http://stackoverflow.com/questions/284662/how-do-you-normalize-a-file-path-in-bash","q":"\n\n<p>I want to transform <code>/foo/bar/..</code> to <code>/foo</code></p>\n\n<p>Is there a bash command which does this?</p>\n\n<hr>\n\n<p>Edit: in my practical case, the directory does exist.</p>\n    ","a":"\n<p>Try <code>realpath</code>.  <em>Bonus</em>: it's available as a bash command <em>and</em> in the standard linux C libraries.</p>\n\n<hr>\n\n<p><strong>Update</strong>: <code>realpath</code> is not part of the standard distribution; we'd been using it for so long that I didn't think to check!  Below is the source in its entirety, hereby donated to the public domain.</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>// realpath.c: display the absolute path to a file or directory.\n// Adam Liss, August, 2007\n// This program is provided \"as-is\" to the public domain, without express or\n// implied warranty, for any non-profit use, provided this notice is maintained.\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;libgen.h&gt;   \n#include &lt;limits.h&gt;\n\nstatic char *s_pMyName;\nvoid usage(void);\n\nint main(int argc, char *argv[])\n{\n    char\n        sPath[PATH_MAX];\n\n\n    s_pMyName = strdup(basename(argv[0]));\n\n    if (argc &lt; 2)\n        usage();\n\n    printf(\"%s\\n\", realpath(argv[1], sPath));\n    return 0;\n}    \n\nvoid usage(void)\n{\n    fprintf(stderr, \"usage: %s PATH\\n\", s_pMyName);\n    exit(1);\n}\n</code></pre>\n    "},{"t":"find: missing argument to -exec","l":"http://stackoverflow.com/questions/2961673/find-missing-argument-to-exec","q":"\n\n<p>I was helped out today with a command, but it doesn't seem to be working. This is the command:</p>\n\n<pre><code>find /home/me/download/ -type f -name \"*.rm\" -exec ffmpeg -i {} -sameq {}.mp3 &amp;&amp; rm {}\\;\n</code></pre>\n\n<p>The shell returns</p>\n\n<pre><code>find: missing argument to `-exec'\n</code></pre>\n\n<p>What I am basically trying to do is go through a directory recursively (if it has other directories) and run the ffmpeg command on the <code>.rm</code> file types and convert them to <code>.mp3</code> file types. Once this is done, remove the <code>.rm</code> file that has just been converted.</p>\n\n<p>I appreciate any help on this.</p>\n    ","a":"\n<p>I figured it out now. When you need to run two commands in exec in a find you need to actually have two separate execs. This finally worked for me.</p>\n\n<pre><code>find . -type f -name \"*.rm\" -exec ffmpeg -i {} -sameq {}.mp3 \\; -exec rm {} \\;\n</code></pre>\n    "},{"t":"How to check if running in Cygwin, Mac or Linux?","l":"http://stackoverflow.com/questions/3466166/how-to-check-if-running-in-cygwin-mac-or-linux","q":"\n\n<p>I have a shell script that is used both on Windows/Cygwin and Mac and Linux. It needs slightly  different variables for each versions.</p>\n\n<p>How can a shell/bash script detect whether it is running in Cygwin, on a Mac or in Linux?</p>\n    ","a":"\n<p>Usually, <code>uname</code> with its various options will tell you what environment you're running in:</p>\n\n<pre><code>pax&gt; uname -a\nCYGWIN_NT-5.1 IBM-L3F3936 1.5.25(0.156/4/2) 2008-06-12 19:34 i686 Cygwin\n\npax&gt; uname -s\nCYGWIN_NT-5.1\n\npax&gt; uname -o\nCygwin\n</code></pre>\n\n<p>Unfortunately, I don't have a Linux or Mac handy so someone else will have to add those.</p>\n\n<p>According to the very helpful schot, <code>uname -s</code> gives <code>Darwin</code> for OSX and <code>Linux</code> for Linux and my Cygwin gives <code>CYGWIN_NT-5.1</code>. But you'll probably have to experiment with all sorts of different versions.</p>\n    "},{"t":"How to limit depth for recursive file list?","l":"http://stackoverflow.com/questions/4509624/how-to-limit-depth-for-recursive-file-list","q":"\n\n<p>Is there a way to limit the depth of a recursive file listing in linux?</p>\n\n<p>The command I'm using at the moment is:</p>\n\n<pre><code> ls -laR &gt; dirlist.txt\n</code></pre>\n\n<p>But I've got about 200 directories and each of them have 10's of directories. So it's just going to take far too long and hog too many system resources.</p>\n\n<p>All I'm really interested in is the ownership and permissions information for the first level subdirectories:</p>\n\n<pre><code>drwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain1.co.uk  \ndrwxr--r-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain1.co.uk/htdocs  \ndrwxr--r-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain1.co.uk/cgi-bin  \ndrwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain2.co.uk  \ndrwxr-xrwx 14 proftp root  1234 Dec 22 13:19 /var/www/vhosts/domain2.co.uk/htdocs  \ndrwxr-xrwx 14 proftp root  1234 Dec 22 13:19 /var/www/vhosts/domain2.co.uk/cgi-bin  \ndrwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain3.co.uk  \ndrwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain3.co.uk/htdocs  \ndrwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain3.co.uk/cgi-bin  \ndrwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain4.co.uk  \ndrwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain4.co.uk/htdocs\ndrwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain4.co.uk/cgi-bin\n</code></pre>\n\n<p><b>EDIT:</b></p>\n\n<p>Final choice of command:</p>\n\n<pre><code>find -maxdepth 2 -type d -ls &gt;dirlist\n</code></pre>\n    ","a":"\n<p>Checkout the <code>-maxdepth</code> flag of <code>find</code></p>\n\n<pre><code>find . -maxdepth 1 -type d -exec ls -ld \"{}\" \\;\n</code></pre>\n\n<p>Here I used 1 as max level depth, <code>-type d</code> means find only directories, which then <code>ls -ld</code> lists contents of, in long format.</p>\n    "},{"t":"Quick way to find if a port is open on Linux","l":"http://stackoverflow.com/questions/9609130/quick-way-to-find-if-a-port-is-open-on-linux","q":"\n\n<p>From a bash script how can I quickly find out whether a port <code>445</code> is open/listening on a server.</p>\n\n<p>I have tried a couple of options, but I want something quick:<br>\n1. <code>lsof -i :445</code>  (Takes seconds)<br>\n2. <code>netstat -an |grep 445 |grep LISTEN</code> (Takes seconds)<br>\n3. <code>telnet</code> (it doesn't return)<br>\n4. <code>nmap</code>, <code>netcat</code> are not available on the server  </p>\n\n<p>It will be nice to know of a way that doesn't enumerate first and greps after that.</p>\n    ","a":"\n<p>A surprise I found out recently is that Bash natively supports <a href=\"http://tldp.org/LDP/abs/html/devref1.html\">tcp connections as file descriptors</a>. To use:</p>\n\n<pre><code>exec 6&lt;&gt;/dev/tcp/ip.addr.of.server/445\necho -e \"GET / HTTP/1.0\\n\" &gt;&amp;6\ncat &lt;&amp;6\n</code></pre>\n\n<p>I'm using 6 as the file descriptor because 0,1,2 are stdin, stdout, and stderr. 5 is sometimes used by <a href=\"http://tldp.org/LDP/abs/html/io-redirection.html\">Bash for child processes</a>, so 3,4,6,7,8, and 9 should be safe.</p>\n\n<p>As per the comment below, to test for listening on a <em>local server</em> in a script:</p>\n\n<pre><code>exec 6&lt;&gt;/dev/tcp/127.0.0.1/445 || echo \"No one is listening!\"\nexec 6&gt;&amp;- # close output connection\nexec 6&lt;&amp;- # close input connection\n</code></pre>\n\n<p>To determine if someone is listening, attempt to connect by loopback. If it fails, then the port is closed or we aren't allowed access. Afterwards, close the connection. </p>\n\n<p>Modify this for your use case, such as sending an email, exiting the script on failure, or starting the required service.</p>\n    "},{"t":"How to debug a bash script?","l":"http://stackoverflow.com/questions/951336/how-to-debug-a-bash-script","q":"\n\n<p>Is there any way to debug a bash script? E.g something that prints a sort of execution log like \"calling line 1\", \"calling line 2\" etc.</p>\n    ","a":"\n<pre><code>sh -x script [arg1 ...]\nbash -x script [arg1 ...]\n</code></pre>\n\n<p>These give you a trace of what is being executed.  (See also 'Clarification' near the bottom of the answer.)</p>\n\n<p>Sometimes, you need to control the debugging within the script.  In that case, as Cheeto reminded me, you can use:</p>\n\n<pre><code>set -x\n</code></pre>\n\n<p>This turns debugging on.  You can then turn it off again with:</p>\n\n<pre><code>set +x\n</code></pre>\n\n<p>Also, shells generally provide options '<code>-n</code>' for 'no execution' and '<code>-v</code>' for 'verbose' mode; you can use these in combination to see whether the shell thinks it could execute your script - occasionally useful if you have an unbalanced quote somewhere.</p>\n\n<p></p><hr><p></p>\n\n<p>There is contention that the '<code>-x</code>' option in Bash is different from other shells (see the comments).  The <a href=\"http://www.gnu.org/software/bash/manual/bashref.html\">Bash Manual</a> says:</p>\n\n<ul>\n<li><p>-x</p>\n\n<p>Print a trace of simple commands, for commands, case commands, select commands, and arithmetic for commands and their arguments or associated word lists after they are expanded and before they are executed. The value of the PS4 variable is expanded and the resultant value is printed before the command and its expanded arguments. </p></li>\n</ul>\n\n<p>That much does not seem to indicate different behaviour at all.  I don't see any other relevant references to '<code>-x</code>' in the manual.  It does not describe differences in the startup sequence.</p>\n\n<p><em>Clarification</em>: On systems such as a typical Linux box, where '<code>/bin/sh</code>' is a symlink to '<code>/bin/bash</code>' (or to any Bash executable), the two command lines achieve the identical effect.  On other systems (for example, Solaris), <code>/bin/sh</code> is not Bash, and the two command lines would give (slightly) different results; most notably, '<code>/bin/sh</code>' would be confused by constructs in Bash that it does not recognize at all.  When invoked by name like this, the 'shebang' line ('<code>#!/bin/bash</code>' vs <code>'#!/bin/sh</code>') at the start of the file has no effect on how the contents are interpreted.  I've not found anything in the Bash Manual that indicates different behaviour from Bash depending on whether it is invoked as 'sh' or 'bash'.</p>\n    "},{"t":"Test whether a glob has any matches in bash","l":"http://stackoverflow.com/questions/2937407/test-whether-a-glob-has-any-matches-in-bash","q":"\n\n<p>If I want to check for the existance of a single file, I can test for it using <code>test -e filename</code> or <code>[ -e filename ]</code>.</p>\n\n<p>Supposing I have a glob and I want to know whether any files exist whose names match the glob. The glob can match 0 files (in which case I need to do nothing), or it can match 1 or more files (in which case I need to do something). How can I test whether a glob has any matches? (I don't care how many matches there are, and it would be best if I could do this with one <code>if</code> statement and no loops (simply because I find that most readable).</p>\n\n<p>(<code>test -e glob*</code> fails if the glob matches more than one file.)</p>\n    ","a":"\n<p>The nullglob shell option is indeed a bashism.</p>\n\n<p>To avoid the need for a tedious save and restore of the nullglob state, I'd only set it inside the subshell that expands the glob:</p>\n\n<pre><code>if test -n \"$(shopt -s nullglob; echo glob*)\"\nthen\n    echo found\nelse\n    echo not found\nfi\n</code></pre>\n\n<p>For better portability and more flexible globbing, use find:</p>\n\n<pre><code>if test -n \"$(find . -maxdepth 1 -name 'glob*' -print -quit)\"\nthen\n    echo found\nelse\n    echo not found\nfi\n</code></pre>\n\n<p>Explicit <strong>-print -quit</strong> actions are used for <strong>find</strong> instead of the default implicit <strong>-print</strong> action so that <strong>find</strong> will quit as soon as it finds the first file matching the search criteria. Where lots of files match, this should run much faster than <code>echo glob*</code> or <code>ls glob*</code> and it also avoids the possibility of overstuffing the expanded command line (some shells have a 4K length limit).</p>\n\n<p>If <strong>find</strong> feels like overkill and the number of files likely to match is small, use stat:</p>\n\n<pre><code>if stat -t glob* &gt;/dev/null 2&gt;&amp;1\nthen\n    echo found\nelse\n    echo not found\nfi\n</code></pre>\n    "},{"t":"View line-endings in a text file","l":"http://stackoverflow.com/questions/3569997/view-line-endings-in-a-text-file","q":"\n\n<p>I'm trying to use something in bash to show me the line endings in a file printed rather than interpreted. The file is a dump from SSIS/SQL Server being read in by a Linux machine for processing.</p>\n\n<p>Is there any switches within <code>vi</code>, <code>less</code>, <code>more</code>, etc?</p>\n\n<p>In addition to seeing the line-endings, I need to know what type of line end it is (CRLF or LF).</p>\n    ","a":"\n<p>You can use the <code>file</code> utility to give you an indication of the type of line endings.</p>\n\n<p>Unix:</p>\n\n<pre><code>$ file testfile1.txt\ntestfile.txt: ASCII text\n</code></pre>\n\n<p>\"DOS\":</p>\n\n<pre><code>$ file testfile2.txt\ntestfile2.txt: ASCII text, with CRLF line terminators\n</code></pre>\n\n<p>To convert from \"DOS\" to Unix:</p>\n\n<pre><code>$ dos2unix testfile2.txt\n</code></pre>\n\n<p>To convert from Unix to \"DOS\":</p>\n\n<pre><code>$ unix2dos testfile1.txt\n</code></pre>\n\n<p>Converting an already converted file has no effect so it's safe to run blindly (i.e. without testing the format first) although the usual disclaimers apply, as always.</p>\n    "},{"t":"count (non-blank) lines-of-code in bash","l":"http://stackoverflow.com/questions/114814/count-non-blank-lines-of-code-in-bash","q":"\n\n<p>In Bash, how do I count the number of non-blank lines of code in a project?</p>\n    ","a":"\n<pre><code>cat foo.c | sed '/^\\s*$/d' | wc -l\n</code></pre>\n\n<p>And if you consider comments blank lines:</p>\n\n<pre><code>cat foo.pl | sed '/^\\s*#/d;/^\\s*$/d' | wc -l\n</code></pre>\n\n<p>Although, that's language dependent. </p>\n    "},{"t":"What's the Cleanest Way to SSH and Run Multiple Commands in Bash?","l":"http://stackoverflow.com/questions/4412238/whats-the-cleanest-way-to-ssh-and-run-multiple-commands-in-bash","q":"\n\n<p>I already have an ssh agent set up, and I can run commands on an external server in bash script doing stuff like:</p>\n\n<pre><code>ssh blah_server \"ls; pwd;\"\n</code></pre>\n\n<p>Now, what I'd really like to do is run a lot of long commands on an external server. Enclosing all of these in between quotation marks would be quite ugly, and I'd really rather avoid sshing multiple times just to avoid this. </p>\n\n<p>So, is there a way I can do this in one go enclosed in parentheses or something? I'm looking for something along the lines of:</p>\n\n<pre><code>ssh blah_server (\n   ls some_folder;\n   ./someaction.sh;\n   pwd;\n)\n</code></pre>\n\n<p>Basically, I'll be happy with any solution as long as it's clean. Thanks in advance!</p>\n\n<h3>Edit</h3>\n\n<p>To clarify, I'm talking about this being part of a larger bash script. Other people might need to deal with the script down the line, so I'd like to keep it clean. I don't want to have a bash script with one line that looks like:<br></p>\n\n<pre><code>ssh blah_server \"ls some_folder; ./someaction.sh 'some params'; pwd; ./some_other_action 'other params';\"\n</code></pre>\n\n<p>because it is extremely ugly and difficult to read.</p>\n    ","a":"\n<p>How about a \"here document\"</p>\n\n<pre><code>ssh otherhost &lt;&lt; EOF\n  ls some_folder; \n  ./someaction.sh 'some params'\n  pwd\n  ./some_other_action 'other params'\nEOF\n</code></pre>\n\n<p>To avoid the problems mentioned by @Globalz in the comments, you may be able to (depending what you're doing on the remote site) get away with replacing the first line with</p>\n\n<pre><code>ssh otherhost /bin/bash &lt;&lt; EOF\n</code></pre>\n    "},{"t":"rm all files except some","l":"http://stackoverflow.com/questions/4325216/rm-all-files-except-some","q":"\n\n<p>When using <code>sudo rm -r</code>, how can I delete all files, with the exception of the following:</p>\n\n<pre><code>textfile.txt\nbackup.tar.gz\nscript.php\ndatabase.sql\ninfo.txt\n</code></pre>\n    ","a":"\n<pre><code>find [path] -type f -not -name 'EXPR' | xargs rm\n</code></pre>\n\n<p>for example, delete all non txt-files in the current directory:</p>\n\n<pre><code>find . -type f -not -name '*txt' | xargs rm\n</code></pre>\n\n<p>The \"find | xargs\" combination is really useful.</p>\n\n<p>If you don't specify \"-type f\" <code>find</code> will also list directories, which you may not want.</p>\n    "},{"t":"How to represent multiple conditions in a shell script?","l":"http://stackoverflow.com/questions/3826425/how-to-represent-multiple-conditions-in-a-shell-script","q":"\n\n<p>I want to represent multiple conditions like this:</p>\n\n<pre><code>if [ ( $g -eq 1 -a \"$c\" = \"123\" ) -o ( $g -eq 2 -a \"$c\" = \"456\" ) ]   \nthen  \n    echo abc;  \nelse  \n    echo efg;   \nfi  \n</code></pre>\n\n<p>but when I execute the script, it shows</p>\n\n<pre><code>syntax error at line 15: `[' unexpected, \n</code></pre>\n\n<p>where line 15 is the one showing if ....  </p>\n\n<p>What is wrong with this condition? I guess something is wrong with the <code>()</code>.</p>\n    ","a":"\n<p>Classic technique (escape metacharacters):</p>\n\n<pre><code>if [ \\( \"$g\" -eq 1 -a \"$c\" = \"123\" \\) -o \\( \"$g\" -eq 2 -a \"$c\" = \"456\" \\) ]\nthen echo abc\nelse echo efg\nfi\n</code></pre>\n\n<p>I've enclosed the references to <code>$g</code> in double quotes; that's good practice, in general.  Strictly, the parentheses aren't needed because the precedence of <code>-a</code> and <code>-o</code> makes it correct even without them.</p>\n\n<p>Note that the <code>-a</code> and <code>-o</code> operators are part of the POSIX specification for <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html\"><code>test</code></a>, aka <code>[</code>, mainly for backwards compatibility (since they were a part of <code>test</code> in 7th Edition UNIX, for example), but they are explicitly marked as 'obsolescent' by POSIX.  Bash (see <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions\">conditional expressions</a>) seems to preempt the classic and POSIX meanings for <code>-a</code> and <code>-o</code> with its own alternative operators that take arguments.</p>\n\n<hr>\n\n<p>With some care, you can use the more modern <code>[[</code> operator, but be aware that the versions in Bash and Korn Shell (for example) need not be identical.</p>\n\n<pre><code>for g in 1 2 3\ndo\n    for c in 123 456 789\n    do\n        if [[ ( \"$g\" -eq 1 &amp;&amp; \"$c\" = \"123\" ) || ( \"$g\" -eq 2 &amp;&amp; \"$c\" = \"456\" ) ]]\n        then echo \"g = $g; c = $c; true\"\n        else echo \"g = $g; c = $c; false\"\n        fi\n    done\ndone\n</code></pre>\n\n<p>Example run, using Bash 3.2.57 on Mac OS X:</p>\n\n<pre><code>g = 1; c = 123; true\ng = 1; c = 456; false\ng = 1; c = 789; false\ng = 2; c = 123; false\ng = 2; c = 456; true\ng = 2; c = 789; false\ng = 3; c = 123; false\ng = 3; c = 456; false\ng = 3; c = 789; false\n</code></pre>\n\n<p>You don't need to quote the variables in <code>[[</code> as you do with <code>[</code> because it is not a separate command in the same way that <code>[</code> is.</p>\n\n<hr>\n\n<blockquote>\n  <p>Isn't it a classic question?</p>\n</blockquote>\n\n<p>I would have thought so.  However, there is another alternative, namely:</p>\n\n<pre><code>if [ \"$g\" -eq 1 -a \"$c\" = \"123\" ] || [ \"$g\" -eq 2 -a \"$c\" = \"456\" ]\nthen echo abc\nelse echo efg\nfi\n</code></pre>\n\n<p>Indeed, if you read the 'portable shell' guidelines for the <code>autoconf</code> tool or related packages, this notation — using '<code>||</code>' and '<code>&amp;&amp;</code>' — is what they recommend.  I suppose you could even go so far as:</p>\n\n<pre><code>if [ \"$g\" -eq 1 ] &amp;&amp; [ \"$c\" = \"123\" ]\nthen echo abc\nelif [ \"$g\" -eq 2 ] &amp;&amp; [ \"$c\" = \"456\" ]\nthen echo abc\nelse echo efg\nfi\n</code></pre>\n\n<p>Where the actions are as trivial as echoing, this isn't bad.  When the action block to be repeated is multiple lines, the repetition is too painful and one of the earlier versions is preferable — or you need to wrap the actions into a function that is invoked in the different <code>then</code> blocks.</p>\n    "},{"t":"How can I ssh directly to a particular directory?","l":"http://stackoverflow.com/questions/626533/how-can-i-ssh-directly-to-a-particular-directory","q":"\n\n<p>I often have to login to one of several servers and go to one of several directories on those machines.  Currently I do something of this sort:</p>\n\n<pre>localhost ~]$ ssh somehost\n\nWelcome to somehost!\n\nsomehost ~]$ cd /some/directory/somewhere/named/Foo\nsomehost Foo]$ \n</pre>\n\n<p>I have scripts that can determine which host and which directory I need to get into but I cannot figure out a way to do this:</p>\n\n<pre>localhost ~]$ go_to_dir Foo\n\nWelcome to somehost!\n\nsomehost Foo]$\n</pre>\n\n<p>Is there an easy, clever or any way to do this?</p>\n    ","a":"\n<p>You can do the following:</p>\n\n<pre><code>ssh -t xxx.xxx.xxx.xxx \"cd /directory_wanted ; bash\"\n</code></pre>\n\n<p>This way, you will get a shell right on the directory_wanted.</p>\n    "},{"t":"Delete terminal history in Linux [closed]","l":"http://stackoverflow.com/questions/6709349/delete-terminal-history-in-linux","q":"\n\n<p>When you use the up key in a Linux terminal, you can use previous commands again. Great feature. However, I started logging mysql into mysql with the sensitive details in the command.</p>\n\n<p>How can I delete that history?</p>\n    ","a":"\n<p>You can clear your bash history like this:</p>\n\n<pre><code>history -cw \n</code></pre>\n\n<p>First flag clears the history, and the second writes the now (empty) history file.</p>\n    "},{"t":"Different bash prompt for different vi editing mode?","l":"http://stackoverflow.com/questions/1039713/different-bash-prompt-for-different-vi-editing-mode","q":"\n\n<p>When using vi mode (set -o vi) with Bash, it would be nice to have a prompt that depends on the mode you are currently in (insert or command). How does one find out this editing mode?</p>\n\n<p>B.t.w, this seems to be possible in <a href=\"http://pthree.org/2009/03/28/add-vim-editing-mode-to-your-zsh-prompt/\">ZSH</a>:</p>\n    ","a":"\n<p>Fresh bash 4.3 and readline 6.3 have something for you guys.. from the changelog:</p>\n\n<pre><code>4.  New Features in Readline\nj.  New user-settable variable, show-mode-in-prompt, adds a characters to the\n    beginning of the prompt indicating the current editing mode.\n</code></pre>\n\n<p>So putting</p>\n\n<pre><code>set show-mode-in-prompt on\n</code></pre>\n\n<p>into /etc/inputrc or ~/.inputrc (thx stooj) should affect all your readline-enabled programs ;)</p>\n    "},{"t":"find -exec a shell function?","l":"http://stackoverflow.com/questions/4321456/find-exec-a-shell-function","q":"\n\n<p>Is there a way to get <code>find</code> to execute a function I define in the shell? For example:</p>\n\n<pre><code>dosomething () {\n  echo \"doing something with $1\"\n}\nfind . -exec dosomething {} \\;\n</code></pre>\n\n<p>The result of that is:</p>\n\n<pre><code>find: dosomething: No such file or directory\n</code></pre>\n\n<p>Is there a way to get <code>find</code>'s <code>-exec</code> to see <code>dosomething</code>?</p>\n    ","a":"\n<p>Since only the shell knows how to run shell functions, you have to run a shell to run a function.  You also need to mark your function for export with <code>export -f</code>, otherwise the subshell won't inherit them:</p>\n\n<pre><code>export -f dosomething\nfind . -exec bash -c 'dosomething \"$0\"' {} \\;\n</code></pre>\n    "},{"t":"Correct Bash and shell script variable capitalization","l":"http://stackoverflow.com/questions/673055/correct-bash-and-shell-script-variable-capitalization","q":"\n\n<p>I run across many shell scripts with variables in all caps, and I've always thought that there is a severe misunderstanding with that.  My understanding is that, by convention (and perhaps by necessity long ago), <strong>environment variables</strong> are in all-caps.</p>\n\n<p>But in modern scripting environments like Bash, I have always prefered the convention of lower-case variables for temporary variables, and upper-case variables <em>only for exported (i.e. environment) variables</em>.  For example:</p>\n\n<pre><code>#!/usr/bin/env bash\nyear=`date +%Y`\necho \"It is $year.\"\nexport JAVA_HOME=\"$HOME/java\"\n</code></pre>\n\n<p>That has always been my take on things.  Are there any authoritative sources which either agree or disagree with this approach, or is it purely a matter of style?</p>\n    ","a":"\n<p>By convention, environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..) are capitalized. All other variable names should be lower case.</p>\n\n<p>Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.</p>\n\n<p>Keeping to this convention, you can rest assured that you don't need to know every environment variable used by UNIX tools or shells in order to avoid overwriting them.  If it's your variable, lowercase it.  If you export it, uppercase it.</p>\n    "},{"t":"Is there a better way to run a command N times in bash?","l":"http://stackoverflow.com/questions/3737740/is-there-a-better-way-to-run-a-command-n-times-in-bash","q":"\n\n<p>I occasionally run a bash command line like this:</p>\n\n<pre><code>n=0; while [[ $n -lt 10 ]]; do some_command; n=$((n+1)); done\n</code></pre>\n\n<p>To run <code>some_command</code> a number of times in a row -- 10 times in this case.</p>\n\n<p>Often <code>some_command</code> is really a chain of commands or a pipeline.</p>\n\n<p>Is there a more concise way to do this?</p>\n    ","a":"\n<pre><code>for run in {1..10}\ndo\n  command\ndone\n</code></pre>\n    "},{"t":"Check if a package is installed and then install it if it's not","l":"http://stackoverflow.com/questions/1298066/check-if-a-package-is-installed-and-then-install-it-if-its-not","q":"\n\n<p>I'm working on a Ubuntu system and </p>\n\n<p>Currently this is what I'm doing:</p>\n\n<pre><code>if ! which command &gt; /dev/null; then\n   echo -e \"Command not found! Install? (y/n) \\c\"\n   read\n   if \"$REPLY\" = \"y\"; then\n      sudo apt-get install command\n   fi\nfi\n</code></pre>\n\n<p>Is this what most people would do? Or is there a more elegant solution?</p>\n    ","a":"\n<p>To check if <code>packagename</code> was installed, type:</p>\n\n<pre><code>dpkg -s &lt;packagename&gt;\n</code></pre>\n\n<p>You can also use <code>dpkg-query</code> that has a neater output for your purpose, and accepts wild cards, too.</p>\n\n<pre><code>dpkg-query -l &lt;packagename&gt;\n</code></pre>\n\n<p>To find what package owns the <code>command</code>, try:</p>\n\n<pre><code>dpkg -S `which &lt;command&gt;`\n</code></pre>\n\n<p>For further details, see article <em><a href=\"http://www.cyberciti.biz/faq/find-out-if-package-is-installed-in-linux/\">Find out if package is installed in Linux</a></em> and <a href=\"http://www.cyberciti.biz/howto/question/linux/dpkg-cheat-sheet.php\">dpkg cheat sheet</a>.</p>\n    "},{"t":"How do I find the number of arguments passed to a Bash script?","l":"http://stackoverflow.com/questions/4423306/how-do-i-find-the-number-of-arguments-passed-to-a-bash-script","q":"\n\n<p>How do I find the number of arguments passed to a Bash script?</p>\n\n<p>This is what I have currently:</p>\n\n<pre><code>#!/bin/bash\ni=0\nfor var in \"$@\"\ndo\n  i=i+1\ndone\n</code></pre>\n\n<p>Are there other (better) ways of doing this?</p>\n    ","a":"\n<p>The number of arguments is <code>$#</code></p>\n\n<p>Search for it on this page to learn more:\n<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#ARGLIST\">http://tldp.org/LDP/abs/html/internalvariables.html#ARGLIST</a></p>\n    "},{"t":"How to get arguments with flags in bash script","l":"http://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash-script","q":"\n\n<p>I know that I can easily get positioned parameters like this in bash:</p>\n\n<p><code>$0</code> or <code>$1</code></p>\n\n<p>I want to be able to use flag options like this to specify for what each parameter is used:</p>\n\n<pre><code>mysql -u user -h host\n</code></pre>\n\n<p>What is the best way to get <code>-u param</code> value and <code>-h param</code> value by flag instead of by position?</p>\n    ","a":"\n<p>This is the idiom I usually use:</p>\n\n<pre><code>while test $# -gt 0; do\n        case \"$1\" in\n                -h|--help)\n                        echo \"$package - attempt to capture frames\"\n                        echo \" \"\n                        echo \"$package [options] application [arguments]\"\n                        echo \" \"\n                        echo \"options:\"\n                        echo \"-h, --help                show brief help\"\n                        echo \"-a, --action=ACTION       specify an action to use\"\n                        echo \"-o, --output-dir=DIR      specify a directory to store output in\"\n                        exit 0\n                        ;;\n                -a)\n                        shift\n                        if test $# -gt 0; then\n                                export PROCESS=$1\n                        else\n                                echo \"no process specified\"\n                                exit 1\n                        fi\n                        shift\n                        ;;\n                --action*)\n                        export PROCESS=`echo $1 | sed -e 's/^[^=]*=//g'`\n                        shift\n                        ;;\n                -o)\n                        shift\n                        if test $# -gt 0; then\n                                export OUTPUT=$1\n                        else\n                                echo \"no output dir specified\"\n                                exit 1\n                        fi\n                        shift\n                        ;;\n                --output-dir*)\n                        export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`\n                        shift\n                        ;;\n                *)\n                        break\n                        ;;\n        esac\ndone\n</code></pre>\n\n<p>Key points are:</p>\n\n<ul>\n<li><code>$#</code> is the number of arguments</li>\n<li>while loop looks at all of the arguments supplied, matching on their values inside a case statement</li>\n<li>shift takes the first one away. You can shift multiple times inside of a case statement to take multiple values.</li>\n</ul>\n    "},{"t":"How to make the hardware beep sound in Mac OS X 10.6","l":"http://stackoverflow.com/questions/3127977/how-to-make-the-hardware-beep-sound-in-mac-os-x-10-6","q":"\n\n<p>I just want that Mac OS X 10.6 does a hardware beep sound like in open suse and other distributions. I tried following approaches</p>\n\n<p>Terminal -&gt; beep = -bash: beep: command not found</p>\n\n<p>Terminal -&gt; say beep = voice speaks out beep (Not a Hardware beep but awesome ;) )</p>\n\n<p>applescript -&gt; beep = Macintosh bell (I want a Hardware beep!)</p>\n\n<p>Does anybody know how to make the Hardware beep in bin/bash or applescript?</p>\n    ","a":"\n<p><code>tput bel</code> works in most shells. </p>\n\n<p>In OS X, this (and any other command that makes the bell go off) also gets you a badge if the command is executed when Terminal was not in the foreground:</p>\n\n<p><img src=\"http://i.stack.imgur.com/X5mGd.png\" alt=\"\"></p>\n    "},{"t":"How to evaluate http response codes from bash/shell script?","l":"http://stackoverflow.com/questions/2220301/how-to-evaluate-http-response-codes-from-bash-shell-script","q":"\n\n<p>I have the feeling that I'm missing the obvious, but have not succeeded with <code>man [curl|wget]</code> or google (\"http\" makes such a bad search term). I'm looking for a quick&amp;dirty fix to one of our webservers that frequently fails, returning status code 500 with an error message. Once this happens, it needs to be restarted.</p>\n\n<p>As the root cause seems to be hard to find, we're aiming for a quick fix, hoping that it will be enough to bridge the time until we can really fix it (the service doesn't need high availability)</p>\n\n<p>The proposed solution is to create a cron job that runs every 5 minutes, checking <a href=\"http://localhost:8080/\">http://localhost:8080/</a>. If this returns with status code 500, the webserver will be restarted. The server will restart in under a minute, so there's no need to check for restarts already running.</p>\n\n<p>The server in question is a ubuntu 8.04 minimal installation with just enough packages installed to run what it currently needs. There is no hard requirement to do the task in bash, but I'd like it to run in such a minimal environment without installing any more interpreters. </p>\n\n<p>(I'm sufficiently familiar with scripting that the command/options to assign the http status code to an environment variable would be enough - this is what I've looked for and could not find.)</p>\n    ","a":"\n<p>I haven't tested this on a 500 code, but it works on others like 200, 302 and 404.</p>\n\n<pre><code>response=$(curl --write-out %{http_code} --silent --output /dev/null servername)\n</code></pre>\n    "},{"t":"Simple logical operators in BASH","l":"http://stackoverflow.com/questions/6270440/simple-logical-operators-in-bash","q":"\n\n<p>I have a couple of variables and I want to check the following condition (written out in words, then my failed attempt at bash scripting):</p>\n\n<pre><code>if varA EQUALS 1 AND ( varB EQUALS \"t1\" OR varB EQUALS \"t2\" ) then \n\ndo something\n\ndone.\n</code></pre>\n\n<p>And in my failed attempt, I came up with:</p>\n\n<pre><code>if (($varA == 1)) &amp;&amp; ( (($varB == \"t1\")) || (($varC == \"t2\")) ); \n  then\n    scale=0.05\n  fi\n</code></pre>\n    ","a":"\n<p>What you've written actually almost works (it would work if all the variables were numbers), but it's not an idiomatic way at all.</p>\n\n<ul>\n<li><code>(…)</code> parentheses indicate a <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Command-Grouping\">subshell</a>. What's inside them isn't an expression like in many other languages. It's a list of commands (just like outside parentheses). These commands are executed in a separate subprocess, so any redirection, assignment, etc. performed inside the parentheses has no effect outside the parentheses.\n<ul>\n<li>With a leading dollar sign, <code>$(…)</code> is a <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Command-Substitution\">command substitution</a>: there is a command inside the parentheses, and the output from the command is used as part of the command line (after extra expansions unless the substitution is between double quotes, but that's <a href=\"http://unix.stackexchange.com/questions/131766/why-does-my-shell-script-choke-on-whitespace-or-other-special-characters\">another story</a>).</li>\n</ul></li>\n<li><code>{ … }</code> braces are like parentheses in that they group commands, but they only influence parsing, not grouping. The program <code>x=2; { x=4; }; echo $x</code> prints 4, whereas <code>x=2; (x=4); echo $x</code> prints 2. (Also braces require spaces around them and a semicolon before closing, whereas parentheses don't. That's just a syntax quirk.)\n<ul>\n<li>With a leading dollar sign, <code>${VAR}</code> is a <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion\">parameter expansion</a>, expanding to the value of a variable, with possible extra transformations.</li>\n</ul></li>\n<li><code>((…))</code> double parentheses surround an <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Shell-Arithmetic\">arithmetic instruction</a>, that is, a computation on integers, with a syntax resembling other programming languages. This syntax is mostly used for assignments and in conditionals.\n<ul>\n<li>The same syntax is used in arithmetic expressions <code>$((…))</code>, which expand to the integer value of the expression.</li>\n</ul></li>\n<li><code>[[…]]</code> double brackets surround <a href=\"http://www.gnu.org/software/bash/manual/bash.html#index-_005b_005b\">conditional expressions</a>. Conditional expressions are mostly built on <a href=\"http://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions\">operators</a> such as <code>-n $variable</code> to test if a variable is empty and <code>-e $file</code> to test if a file exists. There are also string equality operators: <code>\"$string1\" = \"$string2\"</code> (beware that the right-hand side is a pattern, e.g. <code>[[ $foo = a* ]]</code> tests if <code>$foo</code> starts with <code>a</code> while <code>[[ $foo = \"a*\" ]]</code> tests if <code>$foo</code> is exactly <code>a*</code>), and the familiar <code>!</code>, <code>&amp;&amp;</code> and <code>||</code> operators for negation, conjunction and disjunction as well as parentheses for grouping. Note that you need a space around each operator (e.g. <code>[[ \"$x\" = \"$y\" ]]</code>, not <s><code>[[ \"$x\"=\"$y\" ]]</code></s>), and a space or a character like <code>;</code> both inside and outside the brackets (e.g. <code>[[ -n $foo ]]</code>, not <s><code>[[-n $foo]]</code></s>).</li>\n<li><code>[ … ]</code> single brackets are an alternate form of conditional expressions with more quirks (but older and more portable). Don't write any for now; start worrying about them when you find scripts that contain them.</li>\n</ul>\n\n<p>This is the idiomatic way to write your test in bash:</p>\n\n<pre><code>if [[ $varA = 1 &amp;&amp; ($varB = \"t1\" || $varC = \"t2\") ]]; then\n</code></pre>\n\n<p>If you need portability to other shells, this would be the way (note the additional quoting and the separate sets of brackets around each individual test):</p>\n\n<pre><code>if [ \"$varA\" = 1 ] &amp;&amp; { [ \"$varB\" = \"t1\" ] || [ \"$varC\" = \"t2\" ]; } then\n</code></pre>\n    "},{"t":"How to make zsh run as a login shell on Mac OS X (in iTerm)?","l":"http://stackoverflow.com/questions/1276703/how-to-make-zsh-run-as-a-login-shell-on-mac-os-x-in-iterm","q":"\n\n<p>When zsh is set as a login shell on Mac OS X, when it is started by iTerm, zsh doesn't consider that it's being run as a login shell, although it's started as ‘-zsh’ (‘-’ is put as the first character of arg[0]) which is supposed to mean that it should start as a login shell.</p>\n\n<p>So, when I set the login shell to bash, bash recognizes this first ‘-’ in $0 and runs as a login shell, but zsh doesn't, although it seems that it should.</p>\n\n<p>Is there a way to either make zsh recognize the ‘-’ in the arg[0], or make iTerm run the shell with a --login command line argument?</p>\n    ","a":"\n<pre><code>chsh -s $(which zsh)\n</code></pre>\n\n<p>You'll be prompted for your password, but once you update your settings any new iTerm/Terminal sessions you start on that machine will default to zsh.</p>\n    "},{"t":"Shell/Bash Command to get nth line of STDOUT","l":"http://stackoverflow.com/questions/1429556/shell-bash-command-to-get-nth-line-of-stdout","q":"\n\n<p>Is there any bash command that will let you get the nth line of STDOUT?</p>\n\n<p>That is to say, something that would take this</p>\n\n<pre><code>$ ls -l\n-rw-r--r--@ 1 root  wheel my.txt\n-rw-r--r--@ 1 root  wheel files.txt\n-rw-r--r--@ 1 root  wheel here.txt\n</code></pre>\n\n<p>and do something like</p>\n\n<pre><code>$ ls -l | magic-command 2\n-rw-r--r--@ 1 root  wheel files.txt\n</code></pre>\n\n<p>I realize this would be bad practice when writing scripts meant to be reused, BUT when working with the shell day to day it'd be useful to me to be able to filter my STDOUT in such a way.  </p>\n\n<p>I also realize this would be semi-trivial command to write (buffer STDOUT, return a specific line), but I want to know if there's some <strong>standard</strong> shell command to do this that would be available without me dropping a script into place. </p>\n    ","a":"\n<p>Using <code>sed</code>, just for variety:</p>\n\n<pre><code>ls -l | sed -n 2p\n</code></pre>\n\n<p>Using this alternative, which looks more efficient since it stops reading the input when the required line is printed, may generate a SIGPIPE in the feeding process, which may in turn generate an unwanted error message:</p>\n\n<pre><code>ls -l | sed -n -e '2{p;q}'\n</code></pre>\n\n<p>I've seen that often enough that I usually use the first (which is easier to type, anyway), though <code>ls</code> is not a command that complains when it gets SIGPIPE.</p>\n\n<p>For a range of lines:</p>\n\n<pre><code>ls -l | sed -n 2,4p\n</code></pre>\n\n<p>For several ranges of lines:</p>\n\n<pre><code>ls -l | sed -n -e 2,4p -e 20,30p\nls -l | sed -n -e '2,4p;20,30p'\n</code></pre>\n    "},{"t":"How to get a password from a shell script without echoing","l":"http://stackoverflow.com/questions/3980668/how-to-get-a-password-from-a-shell-script-without-echoing","q":"\n\n<p>I have a script that automates a process that needs access to a password protected system. The system is accessed via a command-line program that accepts the user password as an argument.</p>\n\n<p>I would like to prompt the user to type in their password, assign it to a shell variable, and then use that variable to construct the command line of the accessing program (which will of course produce stream output that I will process).  </p>\n\n<p>I am a reasonably competent shell programmer in Bourne/Bash, but I don't know how to accept the user input without having it echo to the terminal (or maybe having it echoed using '*' characters).  </p>\n\n<p>Can anyone help with this?</p>\n    ","a":"\n<p>Here is another way to do it:</p>\n\n<pre><code>#!/bin/bash\n# Read Password\necho -n Password: \nread -s password\necho\n# Run Command\necho $password\n</code></pre>\n\n<p>The <code>read -s</code> will turn off echo for you. Just replace the <code>echo</code> on the last line with the command you want to run.</p>\n    "},{"t":"Length of string in bash","l":"http://stackoverflow.com/questions/17368067/length-of-string-in-bash","q":"\n\n<p>How do you get the length of a string stored in a variable and assign that to another variable?</p>\n\n<pre><code>$ myvar=\"some string\"\n$ echo ${#myvar}  \n11\n</code></pre>\n\n<p>How do you set another variable to the output <code>11</code>?</p>\n    ","a":"\n<p>Just do this:</p>\n\n<pre><code>size=${#myvar} \n</code></pre>\n\n<p>To confirm it was properly saved:</p>\n\n<pre><code>$ echo $size\n11\n</code></pre>\n    "},{"t":"How to store standard error in a variable in a Bash script","l":"http://stackoverflow.com/questions/962255/how-to-store-standard-error-in-a-variable-in-a-bash-script","q":"\n\n<p>Let's say I have a script like the following:</p>\n\n<p>useless.sh</p>\n\n<pre><code>echo \"This Is Error\" 1&gt;&amp;2\necho \"This Is Output\"\n</code></pre>\n\n<p>And I have another shell script:</p>\n\n<p>alsoUseless.sh</p>\n\n<pre><code>./useless.sh | sed 's/Output/Useless/'\n</code></pre>\n\n<p>I want to capture \"This Is Error\", or any other stderr from useless.sh, into a variable. \nLet's call it ERROR.</p>\n\n<p>Notice that I am using stdout for something. I want to continue using stdout, so redirecting stderr into stdout is not helpful, in this case.</p>\n\n<p>So, basically, I want to do</p>\n\n<pre><code>./useless.sh 2&gt; $ERROR | ...\n</code></pre>\n\n<p>but that obviously doesn't work.</p>\n\n<p>I also know that I could do</p>\n\n<pre><code>./useless.sh 2&gt; /tmp/Error\nERROR=`cat /tmp/Error`\n</code></pre>\n\n<p>but that's ugly and unnecessary.</p>\n\n<p>Unfortunately, if no answers turn up here that's what I'm going to have to do.</p>\n\n<p>I'm hoping there's another way.</p>\n\n<p>Anyone have any better ideas?</p>\n    ","a":"\n<p>It would be neater to capture the error file thus:</p>\n\n<pre><code>ERROR=$(&lt;/tmp/Error)\n</code></pre>\n\n<p>The shell recognizes this and doesn't have to run '<code>cat</code>' to get the data.</p>\n\n<p>The bigger question is hard.  I don't think there's an easy way to do it.  You'd have to build the entire pipeline into the sub-shell, eventually sending its final standard output to a file, so that you can redirect the errors to standard output.</p>\n\n<pre><code>ERROR=$( { ./useless.sh | sed s/Output/Useless/ &gt; outfile; } 2&gt;&amp;1 )\n</code></pre>\n\n<p>Note that the semi-colon is needed (in classic shells - Bourne, Korn - for sure; probably in Bash too).  The '<code>{}</code>' does I/O redirection over the enclosed commands.  As written, it would capture errors from <code>sed</code> too.</p>\n\n<p>(Formally untested code - use at own risk.)</p>\n    "},{"t":"GIT Bash - how to default to other directory instead of home directory","l":"http://stackoverflow.com/questions/7017143/git-bash-how-to-default-to-other-directory-instead-of-home-directory","q":"\n\n<p>I am developing on a windows machine. The only place I need for linux command line is Git Bash. The problem is: When I open it, I am in the home directory. I have to change the directory to my workspace, like:</p>\n\n<pre><code>cd ../../../d/work_space_for_my_company/project/code_source\n</code></pre>\n\n<p>Can I wrap this in a .sh file so I don't have to hand-type it anymore? This should be simple but I have zero knowledge about Linux command line. I am really appreciated If you can walk me\nthrough how to create that .sh file.</p>\n    ","a":"\n<p>Just write that line to a file \"cd.sh\", then do this from your shell prompt:</p>\n\n<pre><code>. ./cd.sh\n</code></pre>\n\n<p>Or you can create an alias or function in your <code>$HOME/.bashrc</code> file:</p>\n\n<pre><code>foo() { cd /d/work_space_for_my_company/project/code_source ; }\n</code></pre>\n\n<p>(Note that I've omitted the \"../../..\"; you don't need it.)</p>\n\n<p>EDIT: If you add a line</p>\n\n<pre><code>foo\n</code></pre>\n\n<p>to your .bashrc after the function definition, your shell will start in that directory.</p>\n    "},{"t":"Bash - get last dirname/filename in a file path argument","l":"http://stackoverflow.com/questions/3294072/bash-get-last-dirname-filename-in-a-file-path-argument","q":"\n\n<p>I'm trying to write a post-commit hook for SVN, which is hosted on our development server.  My goal is to try to automatically checkout a copy of the committed project to the directory where it is hosted on the server.  However I need to be able to read only the last directory in the directory string passed to the script in order to checkout to the same sub-directory where our projects are hosted.</p>\n\n<p>For example if I make an SVN commit to the project \"example\", my script gets \"/usr/local/svn/repos/example\" as its first argument.  I need to get just \"example\" off the end of the string and then concat it with another string so I can checkout to \"/server/root/example\" and see the changes live immediately. </p>\n    ","a":"\n<p><a href=\"http://swoolley.org/man.cgi/basename\"><code>basename</code></a> does remove the directory prefix of a path:</p>\n\n<pre><code>$ basename /usr/local/svn/repos/example\nexample\n$ echo \"/server/root/$(basename /usr/local/svn/repos/example)\"\n/server/root/example\n</code></pre>\n    "},{"t":"Generating random number between 1 and 10 in Bash Shell Script [duplicate]","l":"http://stackoverflow.com/questions/8988824/generating-random-number-between-1-and-10-in-bash-shell-script","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/2556190/random-number-from-a-range-in-a-bash-script\" dir=\"ltr\">Random number from a range in a Bash Script</a>\n                <span class=\"question-originals-answer-count\">\n                    12 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>How would I generate an inclusive random number between  1 to 10 in Bash Shell Script?</p>\n\n<p>Would it be <code>$(RANDOM 1+10)</code>?</p>\n    ","a":"\n<pre><code>$(( ( RANDOM % 10 )  + 1 ))\n</code></pre>\n\n<p><strong>EDIT.</strong> Changed brackets into parenthesis according to the comment.\n<a href=\"http://islandlinux.org/howto/generate-random-numbers-bash-scripting\">http://islandlinux.org/howto/generate-random-numbers-bash-scripting</a></p>\n    "},{"t":"Find all storage devices attached to a Linux machine [closed]","l":"http://stackoverflow.com/questions/200960/find-all-storage-devices-attached-to-a-linux-machine","q":"\n\n<p>I have a need to find all of the writable storage devices attached to a given machine, <strong>whether or not</strong> they are mounted.</p>\n\n<p>The dopey way to do this would be to <em>try</em> every entry in <code>/dev</code> that corresponds to a writable devices (<code>hd* and sd*</code>)......</p>\n\n<p>Is there a better solution, or should I stick with this one?</p>\n    ","a":"\n<p><code>/proc/partitions</code> will list all the block devices and partitions that the system recognizes.  You can then try using <code>file -s &lt;device&gt;</code> to determine what kind of filesystem is present on the partition, if any.</p>\n    "},{"t":"On EC2: sudo node command not found, but node without sudo is ok","l":"http://stackoverflow.com/questions/4976658/on-ec2-sudo-node-command-not-found-but-node-without-sudo-is-ok","q":"\n\n<p>I have just installed nodejs on a new EC2 micro instance.</p>\n\n<p>I installed it normally, ./configure -&gt; make -&gt; sudo make install.</p>\n\n<p><strong>Problem:</strong> When I run \"node\" under ec2-user, it runs perfectly. When I run \"sudo node\", it fails.</p>\n\n<p>I found out that node is in:</p>\n\n<pre><code>[ec2-user@XXXX ~]$ whereis node\nnode: /usr/local/bin/node /usr/local/lib/node\n</code></pre>\n\n<p>and the current path is</p>\n\n<pre><code>[ec2-user@XXXX ~]$ echo $PATH\n/usr/local/bin:/bin:/usr/bin:/opt/aws/bin:/home/ec2-user/bin\n</code></pre>\n\n<p>but, the sudo path is</p>\n\n<pre><code>[root@ip-10-112-222-32 ~]# echo $PATH\n/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin:/root/bin\n</code></pre>\n\n<p>then I tried to edit the root PATH to include the paths to node, so \"node\" runs when I'm logged in as root - but it still won't work when I log in as ec2-user and run \"sudo node\".</p>\n\n<p>I need this to install npm properfly. Any idea on how to include the node path while running \"sudo node\"?</p>\n    ","a":"\n<p>Yes, it is a bit annoying but you can fix it with some links:</p>\n\n<pre><code>sudo ln -s /usr/local/bin/node /usr/bin/node\nsudo ln -s /usr/local/lib/node /usr/lib/node\nsudo ln -s /usr/local/bin/npm /usr/bin/npm\nsudo ln -s /usr/local/bin/node-waf /usr/bin/node-waf\n</code></pre>\n\n<p>There might be more but that is all I have run across so far. Lack of node-waf will cause some <code>npm</code> installs to fail with a rather cryptic error message.</p>\n    "},{"t":"How to Put Line Comment for a Multi-line Command","l":"http://stackoverflow.com/questions/9522631/how-to-put-line-comment-for-a-multi-line-command","q":"\n\n<p>I know how to write a multi-line command in Bash script, but how can I add comment for each line in a Multi-line command?</p>\n\n<pre><code>CommandName InputFiles      \\ # This is the comment for the 1st line\n            --option1 arg1  \\ # This is the comment for the 2nd line\n            --option2 arg2    # This is the comment for the 3nd line\n</code></pre>\n\n<p>But unfortunately, the comment after continuation character <code>\\</code> will break the command.</p>\n    ","a":"\n<p>I'm afraid that, in general, you can't do what you're asking for. The best you can do is a comment on the lines before the command, or one single comment at the end of the command line, or a comment after the command.</p>\n\n<p>You can't manage to intersperse comments inside a command this way. The \\s effectively merge those lines, so for all intents and purposes you're trying to intersperse comments in a single line.</p>\n    "},{"t":"How can I convert a series of images to a PDF from the command line on linux? [closed]","l":"http://stackoverflow.com/questions/8955425/how-can-i-convert-a-series-of-images-to-a-pdf-from-the-command-line-on-linux","q":"\n\n<p>I have a scanning server I wrote in cgi/bash and want to be able to convert a bunch of images (all in one folder) to a pdf from the command line. How can that be done?</p>\n    ","a":"\n<p>Using <a href=\"http://www.imagemagick.org/script/index.php\">imagemagick</a>, you can try:</p>\n\n<pre><code>convert page.png page.pdf\n</code></pre>\n\n<p>Or for multiple images:</p>\n\n<pre><code>convert page*.png mydoc.pdf\n</code></pre>\n    "},{"t":"Redirect STDERR / STDOUT of a process AFTER it's been started, using command line?","l":"http://stackoverflow.com/questions/593724/redirect-stderr-stdout-of-a-process-after-its-been-started-using-command-lin","q":"\n\n<p>In the shell you can do redirection, &gt; &lt;, etc., but how about AFTER a program is started?</p>\n\n<p>Here's how I came to ask this question:  a program running in the background of my terminal keeps outputting annoying text. It's an important process so I have to open another shell to avoid the text. I'd like to be able to &gt;/dev/null or some other redirection so I can keep working in the same shell.</p>\n    ","a":"\n<p>Short of closing and reopening your tty (i.e. logging off and back on, which may also terminate some of your background processes in the process) you only have one choice left:</p>\n\n<ul>\n<li>attach to the process in question using gdb, and run:\n<ul>\n<li>p dup2(open(\"/dev/null\", 0), 1)</li>\n<li>p dup2(open(\"/dev/null\", 0), 2) </li>\n<li>detach</li>\n<li>quit</li>\n</ul></li>\n</ul>\n\n<p>e.g.:</p>\n\n<pre><code>$ tail -f /var/log/lastlog &amp;\n[1] 5636\n\n$ ls -l /proc/5636/fd\ntotal 0\nlrwx------ 1 myuser myuser 64 Feb 27 07:36 0 -&gt; /dev/pts/0\nlrwx------ 1 myuser myuser 64 Feb 27 07:36 1 -&gt; /dev/pts/0\nlrwx------ 1 myuser myuser 64 Feb 27 07:36 2 -&gt; /dev/pts/0\nlr-x------ 1 myuser myuser 64 Feb 27 07:36 3 -&gt; /var/log/lastlog\n\n$ gdb -p 5636\nGNU gdb 6.8-debian\nCopyright (C) 2008 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nAttaching to process 5636\nReading symbols from /usr/bin/tail...(no debugging symbols found)...done.\nReading symbols from /lib/librt.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib/librt.so.1\nReading symbols from /lib/libc.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib/libc.so.6\nReading symbols from /lib/libpthread.so.0...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New Thread 0x7f3c8f5a66e0 (LWP 5636)]\nLoaded symbols for /lib/libpthread.so.0\nReading symbols from /lib/ld-linux-x86-64.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/ld-linux-x86-64.so.2\n\n(no debugging symbols found)\n0x00007f3c8eec7b50 in nanosleep () from /lib/libc.so.6\n\n(gdb) p dup2(open(\"/dev/null\",0),1)\n[Switching to Thread 0x7f3c8f5a66e0 (LWP 5636)]\n$1 = 1\n\n(gdb) p dup2(open(\"/dev/null\",0),2)\n$2 = 2\n\n(gdb) detach\nDetaching from program: /usr/bin/tail, process 5636\n\n(gdb) quit\n\n$ ls -l /proc/5636/fd\ntotal 0\nlrwx------ 1 myuser myuser 64 Feb 27 07:36 0 -&gt; /dev/pts/0\nlrwx------ 1 myuser myuser 64 Feb 27 07:36 1 -&gt; /dev/null\nlrwx------ 1 myuser myuser 64 Feb 27 07:36 2 -&gt; /dev/null\nlr-x------ 1 myuser myuser 64 Feb 27 07:36 3 -&gt; /var/log/lastlog\nlr-x------ 1 myuser myuser 64 Feb 27 07:36 4 -&gt; /dev/null\nlr-x------ 1 myuser myuser 64 Feb 27 07:36 5 -&gt; /dev/null\n</code></pre>\n\n<p>You may also consider:</p>\n\n<ul>\n<li>using <code>screen</code>; screen provides several virtual TTYs you can switch between without having to open new SSH/telnet/etc, sessions</li>\n<li>using <code>nohup</code>; this allows you to close and reopen your session without losing any background processes in the... process.</li>\n</ul>\n    "},{"t":"Root user/sudo equivalent in Cygwin?","l":"http://stackoverflow.com/questions/4090301/root-user-sudo-equivalent-in-cygwin","q":"\n\n<p>I'm trying to run a bash script in Cygwin.  </p>\n\n<p>I get <code>Must run as root, i.e. sudo ./scriptname</code> errors.  </p>\n\n<p><code>chmod 777 scriptname</code> does nothing to help.  </p>\n\n<p>I've looked for ways to imitate sudo on Cygwin, to add a root user, since calling \"su\" renders the error <code>su: user root does not exist</code>, anything useful, and have found nothing.  </p>\n\n<p>Anyone have any suggestions?</p>\n\n<p><strong>Edit</strong>: I thought I should close this off, since it's still getting so many views. Basically, as far as I have found through quite a bit of searching, there is no effective way at this point to run a script as a sudo user in Cygwin. I'm hoping it's added in a later version of Cygwin, but for now there's nothing out there.</p>\n\n<p><strong>Much Later Edit</strong>: <a href=\"http://stackoverflow.com/users/413884/adamthewebman\">AdamTheWebMan</a> recently posted an <a href=\"http://stackoverflow.com/a/11833077/470925\">answer</a> that looks quite promising involving <a href=\"https://github.com/nu774/sudo-for-cygwin\">sudo-for-cygwin</a>. I haven't accepted because I haven't had a chance to really check it out yet. But I might. I might actually accept an answer after all this time.</p>\n    ","a":"\n<p>I answered this question on <a href=\"http://superuser.com/questions/122418/theres-no-sudo-command-in-cygwin\">SuperUser</a> but only after the OP disregarded the unhelpful answer that was at the time the only answer to the question.</p>\n\n<p><strong>Here is the proper way to elevate permissions in Cygwin, copied from my own answer on SuperUser:</strong></p>\n\n<p>I found the answer on <a href=\"http://cygwin.com/ml/cygwin/2010-04/msg00651.html\">the cygwin mailing list</a>. To run <code>command</code> with elevated privileges in Cygwin, precede the command with <code>cygstart --action=runas</code> like this:</p>\n\n<pre><code>$ cygstart --action=runas command\n</code></pre>\n\n<p><strong>This will open a Windows dialogue box asking for the Admin password and run the command if the proper password is entered.</strong></p>\n\n<p>This is easily scripted, so long as <code>~/bin</code> is in your path. Create a file <code>~/bin/sudo</code> with the following content:</p>\n\n<pre><code>#!/usr/bin/bash\ncygstart --action=runas \"$@\"\n</code></pre>\n\n<p>Now make the file executable:</p>\n\n<pre><code>$ chmod +x ~/bin/sudo\n</code></pre>\n\n<p>Now you can run commands with <strong>real elevated privileges</strong>:</p>\n\n<pre><code>$ sudo elevatedCommand\n</code></pre>\n\n<p>You may need to add <code>~/bin</code> to your path. You can run the following command on the Cygwin CLI, or add it to <code>~/.bashrc</code>:</p>\n\n<pre><code>$ PATH=$HOME/bin:$PATH\n</code></pre>\n\n<p>Tested on 64-bit Windows 8.</p>\n    "},{"t":"How do I delete a bash function?","l":"http://stackoverflow.com/questions/245406/how-do-i-delete-a-bash-function","q":"\n\n<p>I have done this:</p>\n\n<pre><code>bash $ z() { echo 'hello world'; }\n</code></pre>\n\n<p>How do I get rid of it?</p>\n    ","a":"\n<pre><code>unset -f z\n</code></pre>\n\n<p>Will unset the function named z.  A couple people have answered with:</p>\n\n<pre><code>unset z\n</code></pre>\n\n<p>but if you have a function and a variable named z only the variable will be unset, not the function.</p>\n    "},{"t":"Bash: how to check if a process id (PID) exists","l":"http://stackoverflow.com/questions/3043978/bash-how-to-check-if-a-process-id-pid-exists","q":"\n\n<p>In a bash script i want to do the following (in pseudo-code):</p>\n\n<pre><code>if [ a process exists with $PID ]; then\n\n    kill $PID \n\nfi\n</code></pre>\n\n<p>What's the appropriate bash for the conditional statement?</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>To check for the existence of a process, use</p>\n\n<pre><code>kill -0 $PID\n</code></pre>\n\n<p>But just as @unwind said, if you're going to kill it anyway, just</p>\n\n<pre><code>kill $PID\n</code></pre>\n\n<p>or you will have a race condition.</p>\n\n<p>If you want to ignore the text output of <code>kill</code> and do something based on the exit code, you can</p>\n\n<pre><code>if ! kill $PID &gt; /dev/null 2&gt;&amp;1; then\n    echo \"Could not send SIGTERM to process $PID\" &gt;&amp;2\nfi\n</code></pre>\n    "},{"t":"How to show a message box from a bash script in linux","l":"http://stackoverflow.com/questions/7035/how-to-show-a-message-box-from-a-bash-script-in-linux","q":"\n\n<p>I'm writing a few little bash scripts under Ubuntu linux. I want to be able to run them from the GUI without needing a terminal window to enter any input or view any output.</p>\n\n<p>So far the only input required is a password for sudo - and gksudo handles that fine.\nBut I haven't found an easy way to show a message box yet. Is there some kind of 'gkmessage' command available? I'd prefer something present in a default Ubuntu install, but I don't mind installing a new package if necessary.</p>    ","a":"\n<p>I believe <a href=\"http://live.gnome.org/Zenity\">Zenity</a> will do what you want.  It's specifically designed for displaying GTK dialogs from the command line, and it's available as an <a href=\"http://packages.ubuntu.com/hardy/zenity\">Ubuntu package</a>.</p>\n    "},{"t":"Stop on first error [duplicate]","l":"http://stackoverflow.com/questions/3474526/stop-on-first-error","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/2870992/automatic-exit-from-bash-shell-script-on-error\">Automatic exit from bash shell script on error</a>  </p>\n</blockquote>\n\n\n\n<p>How can I have bash stop on the first command failure, without putting stuff like this all through my code?</p>\n\n<pre><code>some_prog || exit 1\nsome_other_prog || exit 1\n</code></pre>\n    ","a":"\n<p>Maybe you want <code>set -e</code>:</p>\n\n<p><a href=\"http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2382181\">http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2382181</a></p>\n    "},{"t":"How does a Linux/Unix Bash script know its own PID?","l":"http://stackoverflow.com/questions/2493642/how-does-a-linux-unix-bash-script-know-its-own-pid","q":"\n\n<p>I have a script in Bash called <code>Script.sh</code>, and it needs to know its own PID (i.e. I need to get PID inside the Script.sh ) </p>\n\n<p>Any idea how to do this ?</p>\n    ","a":"\n<p>The variable '$$' contains the PID.</p>\n    "},{"t":"Using variables inside a bash heredoc","l":"http://stackoverflow.com/questions/4937792/using-variables-inside-a-bash-heredoc","q":"\n\n<p>I'm trying to interpolate variables inside of a bash heredoc:</p>\n\n<pre><code>var=$1\nsudo tee \"/path/to/outfile\" &gt; /dev/null &lt;&lt; \"EOF\"\nSome text that contains my $var\nEOF\n</code></pre>\n\n<p>This isn't working as I'd expect ($var is treated literally, not expanded).</p>\n\n<p>I need to use sudo tee because creating the file requires sudo.  Doing something like:</p>\n\n<pre><code>sudo cat &gt; /path/to/outfile &lt;&lt;EOT\nmy text...\nEOT\n</code></pre>\n\n<p>Doesn't work, because &gt;outfile opens the file in the current shell, which is not using sudo.</p>\n\n<p>Any ideas?</p>\n    ","a":"\n<p>In answer to your first question, there's no parameter substitution because you've put the delimiter in quotes - <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Redirections\">the bash manual says</a>:</p>\n\n<blockquote>\n  <p>The format of here-documents is:</p>\n\n<pre><code>      &lt;&lt;[-]word\n              here-document\n      delimiter\n</code></pre>\n  \n  <p>No  parameter expansion, command substitution, arithmetic expansion, or\n  pathname expansion is performed on <em>word</em>.  If any characters in <em>word</em> are\n  quoted,  the  <em>delimiter</em> is the result of quote removal on word, and the\n  lines in the here-document are not expanded.  If <em>word</em> is unquoted,  all\n  lines  of  the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. [...]</p>\n</blockquote>\n\n<p>If you change your first example to use <code>&lt;&lt;EOF</code> instead of <code>&lt;&lt; \"EOF\"</code> you'll find that it works.</p>\n\n<p>In your second example, the shell invokes <code>sudo</code> only with the parameter <code>cat</code>, and the redirection applies to the output of <code>sudo cat</code> as the original user.  It'll work if you try:</p>\n\n<pre><code>sudo sh -c \"cat &gt; /path/to/outfile\" &lt;&lt;EOT\nmy text...\nEOT\n</code></pre>\n    "},{"t":"OSX bash, 'watch' command","l":"http://stackoverflow.com/questions/9574089/osx-bash-watch-command","q":"\n\n<p>I'm looking for the best way to duplicate the Linux 'watch' command on Mac OSX. I'd like to run a command every few seconds to pattern match on the contents of an output file using 'tail' and 'sed'. </p>\n\n<p>What's my best option on a Mac, and can it be done without downloading software?</p>\n    ","a":"\n<p>You can emulate the basic functionality with the shell loop:</p>\n\n<pre><code>while :; do clear; your_command; sleep 2; done\n</code></pre>\n\n<p>That will loop forever, clear the screen, run your command, and wait two seconds - the basic <code>watch your_command</code> implementation.</p>\n\n<p>You can take this a step further and create a <code>watch.sh</code> script that can accept <code>your_command</code> and <code>sleep_duration</code> as parameters:</p>\n\n<pre><code>#!/bin/bash\n# usage: watch.sh &lt;your_command&gt; &lt;sleep_duration&gt;\n\nwhile :; \n  do \n  clear; \n  echo \"$(date)\"\n  $1; \n  sleep $2; \ndone\n</code></pre>\n    "},{"t":"How to make a programme continue to run after log out from ssh? [duplicate]","l":"http://stackoverflow.com/questions/954302/how-to-make-a-programme-continue-to-run-after-log-out-from-ssh","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/285015/linux-prevent-a-background-process-from-being-stopped-after-closing-ssh-client\">Linux: Prevent a background process from being stopped after closing SSH client</a>  </p>\n</blockquote>\n\n\n\n<p>I have a program that takes a lot of time to finish.\nIt is running as root over ssh.<br>\nI want it to continue to run after I logout,is this possible and how would I achieve this?</p>\n    ","a":"\n<p>Assuming that you have a program running in the foreground, <strong>press ctrl-Z</strong>, then:</p>\n\n<pre><code>[1]+  Stopped                 myprogram\n$ disown -h %1\n$ bg 1\n[1]+ myprogram &amp;\n$ logout\n</code></pre>\n\n<p>If there is only one job, then you don't need to specify the job number. Just use <code>disown -h</code> and <code>bg</code>.</p>\n\n<h2>Explanation of the above steps:</h2>\n\n<p>You press ctrl-Z. The system suspends the running program, displays a job number and a \"Stopped\" message and returns you to a bash prompt. </p>\n\n<p>You type the <code>disown -h %1</code> command (here, I've used a <code>1</code>, but you'd use the job number that was displayed in the <code>Stopped</code> message) which marks the job so it ignores the <code>SIGHUP</code> signal (it will not be stopped by logging out). </p>\n\n<p>Next, type the <code>bg</code> command using the same job number; this resumes the running of the program in the background and a message is displayed confirming that. </p>\n\n<p>You can now log out and it will continue running..</p>\n    "},{"t":"How to redirect both stdout and stderr to a file","l":"http://stackoverflow.com/questions/7526971/how-to-redirect-both-stdout-and-stderr-to-a-file","q":"\n\n<p>Hi I am running a bash script that creates a log file for the execution of the command</p>\n\n<p>I use the following</p>\n\n<pre><code>Command1 &gt;&gt; log_file\nCommand2 &gt;&gt; log_file\n</code></pre>\n\n<p>This only sends the standard output and not the standard error which appears on the terminal.</p>\n\n<p>Can I log both the stderr and stdout logged to a file?</p>\n    ","a":"\n<p>If you want to log to the same file:</p>\n\n<pre><code>command1 &gt;&gt; log_file 2&gt;&amp;1\n</code></pre>\n\n<p>If you want different files:</p>\n\n<pre><code>command1 &gt;&gt; log_file 2&gt;&gt; err_file\n</code></pre>\n    "},{"t":"Validating parameters to a bash script","l":"http://stackoverflow.com/questions/699576/validating-parameters-to-a-bash-script","q":"\n\n<p>I'm a total newbie to doing any bash scripting, but I came up with a basic one to help automate the process of removing a number of folders as they become unneeded.</p>\n\n<pre><code>#!/bin/bash\nrm -rf ~/myfolder1/$1/anotherfolder\nrm -rf ~/myfolder2/$1/yetanotherfolder\nrm -rf ~/myfolder3/$1/thisisafolder\n</code></pre>\n\n<p>This is evoked like so:</p>\n\n<pre><code>./myscript.sh &lt;{id-number}&gt;\n</code></pre>\n\n<p>The problem is that if you forget to type in the <code>id-number</code> <em>(as I did just then)</em>, then it could potentially delete a lot of things that you really don't want deleted.</p>\n\n<p><strong>Is there a way you can add any form of validation to the command line parameters?</strong> In my case, it'd be good to check that a) there is one parameter, b) it's numerical, and c) that folder exists; before continuing with the script.</p>\n    ","a":"\n<pre><code>#!/bin/sh\ndie () {\n    echo &gt;&amp;2 \"$@\"\n    exit 1\n}\n\n[ \"$#\" -eq 1 ] || die \"1 argument required, $# provided\"\necho $1 | grep -E -q '^[0-9]+$' || die \"Numeric argument required, $1 provided\"\n\nwhile read dir \ndo\n    [ -d \"$dir\" ] || die \"Directory $dir does not exist\"\n    rm -rf \"$dir\"\ndone &lt;&lt;EOF\n~/myfolder1/$1/anotherfolder \n~/myfolder2/$1/yetanotherfolder \n~/myfolder3/$1/thisisafolder\nEOF\n</code></pre>\n\n<p><strong>edit</strong>: I missed the part about checking if the directories exist at first, so I added that in, completing the script. Also, have addressed issues raised in comments; fixed the regular expression, switched from <code>==</code> to <code>eq</code>.</p>\n\n<p>This should be a portable, POSIX compliant script as far as I can tell; it doesn't use any bashisms, which is actually important because <code>/bin/sh</code> on Ubuntu is actually <code>dash</code> these days, not <code>bash</code>.</p>\n    "},{"t":"about .bash_profile, .bashrc, and where should alias be written in? [duplicate]","l":"http://stackoverflow.com/questions/902946/about-bash-profile-bashrc-and-where-should-alias-be-written-in","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/415403/whats-the-difference-between-bashrc-bash-profile-and-environment\">What's the difference between .bashrc, .bash_profile, and .environment?</a>  </p>\n</blockquote>\n\n\n\n<p>it seems that if i use</p>\n\n<pre><code>alias ls='ls -F'\n</code></pre>\n\n<p>inside of .bashrc on Mac OS X, then the newly created shell will not have that alias.  I need to type bash again and that alias will be in effect.</p>\n\n<p>and if i log into linux on the hosting company, the .bashrc has a comment line that says:</p>\n\n<p>for non-login shell</p>\n\n<p>and </p>\n\n<p>.bash_profile has a comment</p>\n\n<p>for login shell</p>\n\n<p>so where should aliases be written in?  how come we separate login shell and non-login shell?</p>\n\n<p>some webpage say use  .bash_aliases  but it doesn't work on Mac OS X, it seems.</p>\n    ","a":"\n<p>The reason you separate the login and non login shell is because the .bashrc is reloaded every time you start a new copy of bash.  The profile is loaded only when you either login, or use the appropriate flag to tell bash to ast as a login shell.  </p>\n\n<p>What I do is</p>\n\n<ul>\n<li>put my PATH set up into a .profile file (because I sometimes use other shells)  </li>\n<li>Put my bash aliases and functions into my .bashrc  </li>\n<li>Then use this:  </li>\n</ul>\n\n<p><code>.bash_profile</code>:</p>\n\n<pre><code>#!/bin/bash\n#\n# CRM .bash_profile Time-stamp: \"2008-12-07 19:42\"\n#\n# echo \"Loading ${HOME}/.bash_profile\"\nsource ~/.profile # Get the paths\nsource ~/.bashrc  # get aliases\n#\n#- end\n</code></pre>\n\n<p>Oh, and the reason you need to type bash again to get the new alias is that bash loads your .bashrc when it starts; it doesn't reload it unless you tell it to.  You can reload the .bashrc (and not need a second shell) by typing</p>\n\n<pre><code>source ~/.bashrc\n</code></pre>\n\n<p>which loads the .bashrc as if you had typed the commends directly to bash.</p>\n    "},{"t":"Fastest way(s) to move the cursor on a terminal command line?","l":"http://stackoverflow.com/questions/657130/fastest-ways-to-move-the-cursor-on-a-terminal-command-line","q":"\n\n<p>What is the best way to move around on a given very long command line in the terminal?</p>\n\n<p>Say I used the arrow key or <kbd>Ctrl</kbd>-<kbd>R</kbd> to get this long command line:</p>\n\n<pre><code>./cmd --option1 --option2 --option3 --option4 --option5 --option6 --option7 --option8 --option9 --option10 --option11 --option12 --option13 --option14 --option15 --option16 --option17 --option18 --option19 --option20 --option21 --option22 --option23 --option24 --option25 --option26 --option27 --option28 --option29 --option30 --option31 --option32 --option33 --option34 --option35 --option36 --option37 --option38 --option39 --option40 --option41 --option42 --option43 --option44 --option45 --option46 --option47 --option48 --option49 --option50 \n</code></pre>\n\n<p>Now I need to move (starting from the beginning or the end of the line) the cursor to <code>--option25</code> to modify something there. </p>\n\n<p>What is the fastest way to get there? What I usually do is <kbd>Ctrl</kbd>-<kbd>A</kbd> to get to the beginning and then repeatedly <kbd>Alt</kbd>-<kbd>F</kbd> to move forward, word by word (or <kbd>Ctrl</kbd>-<kbd>E</kbd> to go the end and <kbd>Alt</kbd>-<kbd>B</kbd> to then go backward). But on a long line that takes too much time. There must be a way to search and jump directly to the part I need to modify, e.g. <code>option25</code>?</p>\n    ","a":"\n<p>Since this hasn't been closed yet, here are a few more options.</p>\n\n<ul>\n<li>Use <code>C-xC-e</code> to open the current line in the editor specified by <code>$FCEDIT</code> or <code>$EDITOR</code> or <code>emacs</code> (tried in that order).</li>\n<li>If you ran the command earlier, hit <kbd>Ctrl</kbd>+<kbd>r</kbd> for a reverse history search and type <code>option25</code> (in this case). The line will be displayed. Hit <code>TAB</code> to start editing at this point.</li>\n<li>Use history expansion with the <code>s///</code> modifier. E.g. <code>!-2:s/--option25/--newoption/</code> would rerun the second-to-last command, but replace option25. To modify the last <code>./cmd</code> command, use the <code>!string</code> syntax: <code>!./cmd:s/--option25/--newoption/</code><br>\nAny delimiter may be used in place of / in the substitution.</li>\n<li>If editing the previous line, you can use quick substitution: <code>^--option25^--newoption</code></li>\n<li>Character search. This was mentioned by Pax, and can be done in regular emacs-mode with <code>C-]</code> for forward search, and <code>C-M-]</code> for backward search.</li>\n</ul>\n\n<p>I recommend the second option. <kbd>Ctrl</kbd>+<kbd>r</kbd> is really handy and fast, no mucking about with editors, and you see the results before the command is run (unlike the history expansions).</p>\n    "},{"t":"bash conditionals: how to “and” expressions? (if [ ! -z $VAR && -e $VAR ])","l":"http://stackoverflow.com/questions/8920245/bash-conditionals-how-to-and-expressions-if-z-var-e-var","q":"\n\n<p>I guess I'm not clear on how to do \"and\" tests.  I wanted to make sure an argument existed which was working well with <code>[ -e $VAR ]</code> but turns out that was also evaluating as true on empty string; which I do not want.</p>\n\n<p>How do I 'and' them together?  Or is there another unary test that accomplishes what I want?</p>\n    ","a":"\n<pre><code>if [ ! -z \"$var\" ] &amp;&amp; [ -e \"$var\" ]; then\n      # something ...\nfi\n</code></pre>\n    "},{"t":"What is the best practice for dealing with passwords in github?","l":"http://stackoverflow.com/questions/2397822/what-is-the-best-practice-for-dealing-with-passwords-in-github","q":"\n\n<p>I've got a little Bash script that I use to access twitter and pop up a Growl notification in certain situations. Whats the best way to handle storing my password with the script? </p>\n\n<p>I would like to post this script on GitHub, but I'm wondering what the best way to keep my login/password private while doing this is. Currently the password is stored in the script itself. I can't remove it right before I push because all the old commits will contain the password. Developing without the password isn't an option. I imagine that I should be storing the password in an external config file, but I thought I'd check to see if there was an established way to handle this before I tried and put something together.</p>\n    ","a":"\n<p>The typical way to do this is to read the password info from a configuration file. If your configuration file is called <code>foobar.config</code>, then you would commit a file called <code>foobar.config.example</code> to the repository, containing sample data. To run your program, you would create a local (not tracked) file called <code>foobar.config</code> with your <em>real</em> password data.</p>\n\n<p>To filter out your existing password from previous commits, see the GitHub help page on <a href=\"http://help.github.com/removing-sensitive-data/\">Removing sensitive data</a>.</p>\n    "}]