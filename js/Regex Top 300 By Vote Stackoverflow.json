[{"t":"Using a regular expression to validate an email address","l":"http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address","q":"\n\n<p>Over the years I have slowly developed a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> that validates MOST email addresses correctly, assuming they don't use an IP address as the server part.</p>\n\n<p>I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn't allowing 4-character TLDs).</p>\n\n<p><em>What's the best regular expression you have or have seen for validating emails?</em></p>\n\n<p>I've seen several solutions that use functions that use several shorter expressions, but I'd rather have one long complex expression in a simple function instead of several short expression in a more complex function.</p>\n    ","a":"\n<p>There is no simple regular expression for this problem: see \n<a href=\"http://ex-parrot.com/~pdw/Mail-RFC822-Address.html\">this fully RFC‑822–compliant regex</a>, which is anything but simple. (It was written before the days of grammatical patterns.)  The grammar specified in <a href=\"http://www.ietf.org/rfc/rfc5322.txt\">RFC 5322</a> is too complicated for primitive regular expressions.</p>\n\n<p>The more sophisticated grammatical patterns in Perl, PCRE, and PHP can all <a href=\"http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">manage to correctly parse RFC 5322 without a hitch</a>. Python and C# should also be able to manage it, but they use a different syntax from those first three. However, if you are forced to use one of the many less powerful pattern-matching languages, then it’s best to use a real parser. </p>\n\n<p>It's also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered in the same web page as was the address. </p>\n\n<p>Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down <code>president@whitehouse.gov</code>, and that will even parse as legal, but it isn't likely to be the person at the other end.</p>\n\n<p>For PHP, you should <em>not</em> use the pattern given in <a href=\"http://www.linuxjournal.com/article/9585\">Validate an E-Mail Address with PHP, the Right Way</a> from which I quote:</p>\n\n<blockquote>\n  <p>There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.</p>\n</blockquote>\n\n<p>That is no better than all the other non-RFC patterns. It isn’t even smart enough to handle even <a href=\"http://www.ietf.org/rfc/rfc0822.txt\">RFC 822</a>, let alone RFC 5322. <a href=\"http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">This one</a>, however, is.</p>\n\n<p>If you want to get fancy and pedantic, <a href=\"http://cubicspot.blogspot.com/2012/06/correct-way-to-validate-e-mail-address.html\">implement a complete state engine</a>. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can't handle it is just rude and impolite from the user's perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like</p>\n\n<blockquote>\n  <p>The specified e-mail address 'myemail@address,com' is invalid. Did you mean 'myemail@address.com'?</p>\n</blockquote>\n\n<p>See also <a href=\"http://worsethanfailure.com/Articles/Validating_Email_Addresses.aspx\">Validating Email Addresses</a>, including the comments. Or <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\">Comparing E-mail Address Validating Regular Expressions</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/SrUwP.png\"><img src=\"https://i.stack.imgur.com/SrUwP.png\" alt=\"Regular expression visualization\"></a></p>\n\n<p><a href=\"https://www.debuggex.com/r/aH_x42NflV8G-GS7\">Debuggex Demo</a></p>\n    "},{"t":"Regular expression to match line that doesn't contain a word?","l":"http://stackoverflow.com/questions/406230/regular-expression-to-match-line-that-doesnt-contain-a-word","q":"\n\n<p>I know it's possible to match for a word and then reverse the matches using other tools (e.g. <code>grep -v</code>). However, I'd like to know if it's possible to match lines that <em>don't</em> contain a specific word (e.g. hede) using a regular expression? </p>\n\n<p>Input:</p>\n\n<pre><code>hoho\nhihi\nhaha\nhede\n</code></pre>\n\n<p><code># grep \"Regex for do not contain hede\" Input</code></p>\n\n<p>Output: </p>\n\n<pre><code>hoho\nhihi\nhaha\n</code></pre>\n    ","a":"\n<p>The notion that regex doesn't support inverse matching is not entirely true. You can mimic this behavior by using negative look-arounds:</p>\n\n<pre><code>^((?!hede).)*$\n</code></pre>\n\n<p>The regex above will match any string, or line without a line break, <strong>not</strong> containing the (sub) string 'hede'.\nAs mentioned, this is not something regex is \"good\" at (or should do), but still, it <em>is</em> possible. </p>\n\n<p>And if you need to match line break chars as well, use the <a href=\"http://perldoc.perl.org/perlre.html#Modifiers\">DOT-ALL modifier</a> (the trailing <code>s</code> in the following pattern):</p>\n\n<pre><code>/^((?!hede).)*$/s\n</code></pre>\n\n<p>or use it inline:</p>\n\n<pre><code>/(?s)^((?!hede).)*$/\n</code></pre>\n\n<p><em>(where the <code>/.../</code> are the regex delimiters, ie, not part of the pattern)</em></p>\n\n<p>If the DOT-ALL modifier is not available, you can mimic the same behavior with the character class <code>[\\s\\S]</code>:</p>\n\n<pre><code>/^((?!hede)[\\s\\S])*$/\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>A string is just a list of <code>n</code> characters. Before, and after each character, there's an empty string. So a list of <code>n</code> characters will have <code>n+1</code> empty strings. Consider the string <code>\"ABhedeCD\"</code>:</p>\n\n<pre><code>    +--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+\nS = |e1| A |e2| B |e3| h |e4| e |e5| d |e6| e |e7| C |e8| D |e9|\n    +--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+\n\nindex    0      1      2      3      4      5      6      7\n</code></pre>\n\n<p>where the <code>e</code>'s are the empty strings. The regex <code>(?!hede).</code> looks ahead to see if there's no substring <code>\"hede\"</code> to be seen, and if that is the case (so something else is seen), then the <code>.</code> (dot) will match any character except a line break. Look-arounds are also called <em>zero-width-assertions</em> because they don't <em>consume</em> any characters. They only assert/validate something. </p>\n\n<p>So, in my example, every empty string is first validated to see if there's no <code>\"hede\"</code> up ahead, before a character is consumed by the <code>.</code> (dot). The regex <code>(?!hede).</code> will do that only once, so it is wrapped in a group, and repeated zero or more times: <code>((?!hede).)*</code>. Finally, the start- and end-of-input are anchored to make sure the entire input is consumed: <code>^((?!hede).)*$</code></p>\n\n<p>As you can see, the input <code>\"ABhedeCD\"</code> will fail because on <code>e3</code>, the regex <code>(?!hede)</code> fails (there <em>is</em> <code>\"hede\"</code> up ahead!).</p>\n    "},{"t":"Validate email address in JavaScript?","l":"http://stackoverflow.com/questions/46155/validate-email-address-in-javascript","q":"\n\n<p>How can an email address be validated in JavaScript?</p>\n    ","a":"\n<p>Using <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expressions</a> is probably the best way. Here's an example (<a href=\"http://jsbin.com/ozeyag/19\">live demo</a>):</p>\n\n<pre><code>function validateEmail(email) {\n    var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n    return re.test(email);\n}\n</code></pre>\n\n<p>Here's the example of regular expresion that accepts unicode:</p>\n\n<pre><code>var re = /^(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+\\.)+[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n</code></pre>\n\n<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can  easily be disabled. This should be validated on the server side as well.</p>\n    "},{"t":"RegEx match open tags except XHTML self-contained tags","l":"http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags","q":"\n\n<p>I need to match all of these opening tags:</p>\n\n<pre><code>&lt;p&gt;\n&lt;a href=\"foo\"&gt;\n</code></pre>\n\n<p>But not these:</p>\n\n<pre><code>&lt;br /&gt;\n&lt;hr class=\"foo\" /&gt;\n</code></pre>\n\n<p>I came up with this and wanted to make sure I've got it right. I am only capturing the <code>a-z</code>.</p>\n\n<pre><code>&lt;([a-z]+) *[^/]*?&gt;\n</code></pre>\n\n<p>I believe it says:</p>\n\n<ul>\n<li>Find a less-than, then</li>\n<li>Find (and capture) a-z one or more times, then</li>\n<li>Find zero or more spaces, then</li>\n<li>Find any character zero or more times, greedy, except <code>/</code>, then</li>\n<li>Find a greater-than</li>\n</ul>\n\n<p>Do I have that right? And more importantly, what do you think?</p>\n    ","a":"\n<p>You can't parse [X]HTML with regex. Because HTML can't be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &lt;center&gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow <i>it is too late it is too late we cannot be saved</i> the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) <i>dear lord help us how can anyone survive this scourge</i> using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes <i>using rege</i>x as a tool to process HTML establishes a brea<i>ch between this world</i> and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but <i>more corrupt) a mere glimp</i>se of the world of reg​<b>ex parsers for HTML will ins</b>​tantly transport a p<i>rogrammer's consciousness i</i>nto a w<i>orl</i>d of ceaseless screaming, he comes<strike>, the pestilent sl</strike>ithy regex-infection wil​<b>l devour your HT</b>​ML parser, application and existence for all time like Visual Basic only worse <i>he comes he com</i>es <i>do not fi</i>​ght h<b>e com̡e̶s, ̕h̵i</b>​s un̨ho͞ly radiańcé de<i>stro҉ying all enli̍̈́̂̈́ghtenment, HTML tags <b>lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq</b>​uid p</i>ain, the song of re̸gular exp​re<strike>ssion parsing </strike>will exti<i>​nguish the voices of mor​<b>tal man from the sp</b>​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​</i>he f<code>inal snuf</code>fing o<i>f the lie​<b>s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T A</b></i><b>LL I​S L</b>OST th<i>e pon̷y he come</i>s he c̶̮om<strike>es he co</strike><b><strike>me</strike>s t<i>he</i> ich​</b>or permeat<i>es al</i>l MY FAC<i>E MY FACE ᵒh god n<b>o NO NOO̼</b></i><b>O​O N</b>Θ stop t<i>he an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨ</i>e̠̅s<code> ͎a̧͈͖r̽̾̈́͒͑e</code> n<b>​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ T</b>O͇̹̺ͅƝ̴ȳ̳ TH̘<b>Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝</b>S̨̥̫͎̭ͯ̿̔̀ͅ</p>\n\n<hr>\n\n<p>Have you tried using an XML parser instead?</p>\n\n<hr>\n\n<blockquote>\n  <p><strong>Moderator's Note</strong></p>\n  \n  <p>This post is locked to prevent inappropriate edits to its content. The post looks exactly as it is supposed to look - there are no problems with its content. Please do not flag it for our attention.</p>\n</blockquote>\n    "},{"t":"\\d is less efficient than [0-9]","l":"http://stackoverflow.com/questions/16621738/d-is-less-efficient-than-0-9","q":"\n\n<p>I made a comment yesterday on an answer where someone had used <code>[0123456789]</code> in a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> rather than <code>[0-9]</code> or <code>\\d</code>. I said it was probably more efficient to use a range or digit specifier than a character set.</p>\n\n<p>I decided to test that out today and found out to my surprise that (in the C# regex engine at least) <code>\\d</code> appears to be less efficient than either of the other two which don't seem to differ much. Here is my test output over 10000 random strings of 1000 random characters with 5077 actually containing a digit:</p>\n\n<pre><code>Regular expression \\d           took 00:00:00.2141226 result: 5077/10000\nRegular expression [0-9]        took 00:00:00.1357972 result: 5077/10000  63.42 % of first\nRegular expression [0123456789] took 00:00:00.1388997 result: 5077/10000  64.87 % of first\n</code></pre>\n\n<p>It's a surprise to me for two reasons:</p>\n\n<ol>\n<li>I would have thought the range would be implemented much more efficiently than the set.</li>\n<li>I can't understand why <code>\\d</code> is worse than <code>[0-9]</code>. Is there more to <code>\\d</code> than simply shorthand for <code>[0-9]</code>?</li>\n</ol>\n\n<p>Here is the test code:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Text.RegularExpressions;\n\nnamespace SO_RegexPerformance\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var rand = new Random(1234);\n            var strings = new List&lt;string&gt;();\n            //10K random strings\n            for (var i = 0; i &lt; 10000; i++)\n            {\n                //Generate random string\n                var sb = new StringBuilder();\n                for (var c = 0; c &lt; 1000; c++)\n                {\n                    //Add a-z randomly\n                    sb.Append((char)('a' + rand.Next(26)));\n                }\n                //In roughly 50% of them, put a digit\n                if (rand.Next(2) == 0)\n                {\n                    //Replace one character with a digit, 0-9\n                    sb[rand.Next(sb.Length)] = (char)('0' + rand.Next(10));\n                }\n                strings.Add(sb.ToString());\n            }\n\n            var baseTime = testPerfomance(strings, @\"\\d\");\n            Console.WriteLine();\n            var testTime = testPerfomance(strings, \"[0-9]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n            testTime = testPerfomance(strings, \"[0123456789]\");\n            Console.WriteLine(\"  {0:P2} of first\", testTime.TotalMilliseconds / baseTime.TotalMilliseconds);\n        }\n\n        private static TimeSpan testPerfomance(List&lt;string&gt; strings, string regex)\n        {\n            var sw = new Stopwatch();\n\n            int successes = 0;\n\n            var rex = new Regex(regex);\n\n            sw.Start();\n            foreach (var str in strings)\n            {\n                if (rex.Match(str).Success)\n                {\n                    successes++;\n                }\n            }\n            sw.Stop();\n\n            Console.Write(\"Regex {0,-12} took {1} result: {2}/{3}\", regex, sw.Elapsed, successes, strings.Count);\n\n            return sw.Elapsed;\n        }\n    }\n}\n</code></pre>\n    ","a":"\n<p><code>\\d</code> checks all <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> digits, while <code>[0-9]</code> is limited to these 10 characters. For example, <a href=\"http://en.wikipedia.org/wiki/Persian_language\">Persian</a> digits, <code>۱۲۳۴۵۶۷۸۹</code>, are an example of Unicode digits which are matched with <code>\\d</code>, but not <code>[0-9]</code>.</p>\n\n<p>You can generate a list of all such characters using the following code:</p>\n\n<pre><code>var sb = new StringBuilder();\nfor(UInt16 i = 0; i &lt; UInt16.MaxValue; i++)\n{\n    string str = Convert.ToChar(i).ToString();\n    if (Regex.IsMatch(str, @\"\\d\"))\n        sb.Append(str);\n}\nConsole.WriteLine(sb.ToString());\n</code></pre>\n\n<p>Which generates:</p>\n\n<blockquote>\n  <p>0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９</p>\n</blockquote>\n    "},{"t":"startsWith() and endsWith() functions in PHP","l":"http://stackoverflow.com/questions/834303/startswith-and-endswith-functions-in-php","q":"\n\n<p>How can I write two functions that would take a string and return if it starts with the specified character/string or ends with it?</p>\n\n<p>For example:</p>\n\n<pre><code>$str = '|apples}';\n\necho startsWith($str, '|'); //Returns true\necho endsWith($str, '}'); //Returns true\n</code></pre>\n    ","a":"\n<p>It is possible to use <a href=\"http://php.net/manual/en/function.strrpos.php\"><code>strrpos</code></a> and <a href=\"http://php.net/manual/en/function.strpos.php\"><code>strpos</code></a> to check start-with and ends-with respectively:</p>\n\n<pre><code>function startsWith($haystack, $needle) {\n    // search backwards starting from haystack length characters from the end\n    return $needle === \"\" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;\n}\nfunction endsWith($haystack, $needle) {\n    // search forward starting from end minus needle length characters\n    return $needle === \"\" || (($temp = strlen($haystack) - strlen($needle)) &gt;= 0 &amp;&amp; strpos($haystack, $needle, $temp) !== FALSE);\n}\n</code></pre>\n\n<p>Tests and results (<a href=\"http://ideone.com/y0bjQs\">compare with this</a>):</p>\n\n<pre><code>startsWith(\"abcdef\", \"ab\") -&gt; true\nstartsWith(\"abcdef\", \"cd\") -&gt; false\nstartsWith(\"abcdef\", \"ef\") -&gt; false\nstartsWith(\"abcdef\", \"\") -&gt; true\nstartsWith(\"\", \"abcdef\") -&gt; false\n\nendsWith(\"abcdef\", \"ab\") -&gt; false\nendsWith(\"abcdef\", \"cd\") -&gt; false\nendsWith(\"abcdef\", \"ef\") -&gt; true\nendsWith(\"abcdef\", \"\") -&gt; true\nendsWith(\"\", \"abcdef\") -&gt; false\n</code></pre>\n\n<p>Note: the <code>strncmp</code> and <code>substr_compare</code> functions will outperform this function.</p>\n    "},{"t":"A comprehensive regex for phone number validation","l":"http://stackoverflow.com/questions/123559/a-comprehensive-regex-for-phone-number-validation","q":"\n\n<p>I'm trying to put together a comprehensive regex to validate phone numbers. Ideally it would handle international formats, but it must handle US formats, including the following:</p>\n\n<ul>\n<li>1-234-567-8901</li>\n<li>1-234-567-8901 x1234</li>\n<li>1-234-567-8901 ext1234</li>\n<li>1 (234) 567-8901</li>\n<li>1.234.567.8901</li>\n<li>1/234/567/8901</li>\n<li>12345678901</li>\n</ul>\n\n<p>I'll answer with my current attempt, but I'm hoping somebody has something better and/or more elegant.</p>\n    ","a":"\n<p>Better option... just strip all non-digit characters on input (except 'x' and leading '+' signs), taking care because of the British tendency to write numbers in the non-standard form <code>+44 (0) ...</code> when asked to use the international prefix (in that specific case, you should discard the <code>(0)</code> entirely).</p>\n\n<p>Then, you end up with values like:</p>\n\n<pre><code> 12345678901\n 12345678901x1234\n 345678901x1234\n 12344678901\n 12345678901\n 12345678901\n 12345678901\n +4112345678\n +44123456789\n</code></pre>\n\n<p>Then when you display, reformat to your hearts content. e.g.</p>\n\n<pre><code>  1 (234) 567-8901\n  1 (234) 567-8901 x1234\n</code></pre>\n    "},{"t":"Non capturing group? (?:)","l":"http://stackoverflow.com/questions/3512471/non-capturing-group","q":"\n\n<p>After reading some tutorials I still don't get it.</p>\n\n<p>Could someone explain how <code>?:</code> is used and what it's good for?</p>\n    ","a":"\n<p>Let me try to explain this with an example.</p>\n\n<p>Consider the following text:</p>\n\n<pre><code>http://stackoverflow.com/\nhttp://stackoverflow.com/questions/tagged/regex\n</code></pre>\n\n<p>Now, if I apply the regex below over it...</p>\n\n<pre><code>(http|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\n</code></pre>\n\n<p>... I would get the following result:</p>\n\n<pre><code>Match \"http://stackoverflow.com/\"\n     Group 1: \"http\"\n     Group 2: \"stackoverflow.com\"\n     Group 3: \"/\"\n\nMatch \"http://stackoverflow.com/questions/tagged/regex\"\n     Group 1: \"http\"\n     Group 2: \"stackoverflow.com\"\n     Group 3: \"/questions/tagged/regex\"\n</code></pre>\n\n<p>But I don't care about the protocol -- I just want the host and path of the URL. So, I change the regex to include the non-capturing group <code>(?:)</code>.</p>\n\n<pre><code>(?:http|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\n</code></pre>\n\n<p>Now, my result looks like this:</p>\n\n<pre><code>Match \"http://stackoverflow.com/\"\n     Group 1: \"stackoverflow.com\"\n     Group 2: \"/\"\n\nMatch \"http://stackoverflow.com/questions/tagged/regex\"\n     Group 1: \"stackoverflow.com\"\n     Group 2: \"/questions/tagged/regex\"\n</code></pre>\n\n<p>See? The first group has not been captured. The parser uses it to match the text, but ignores it later, in the final result.</p>\n\n<hr>\n\n<h2>EDIT:</h2>\n\n<p>As requested, let me try to explain groups too.</p>\n\n<p>Well, groups serve many purposes. They can help you to extract exact information from a bigger match (which can also be named), they let you rematch a previous matched group, and can be used for substitutions. Let's try some examples, shall we?</p>\n\n<p>Ok, imagine you have some kind of XML or HTML (be aware that <a href=\"http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags\">regex may not be the best tool for the job</a>, but it is nice as an example). You want to parse the tags, so you could do something like this (I have added spaces to make it easier to understand):</p>\n\n<pre><code>   \\&lt;(?&lt;TAG&gt;.+?)\\&gt; [^&lt;]*? \\&lt;/\\k&lt;TAG&gt;\\&gt;\nor\n   \\&lt;(.+?)\\&gt; [^&lt;]*? \\&lt;/\\1\\&gt;\n</code></pre>\n\n<p>The first regex has a named group (TAG), while the second one uses a common group. Both regexes do the same thing: they use the value from the first group (the name of the tag) to match the closing that. The difference is that the first one uses the name to use the value, and the second one uses the group index (which starts at 1).</p>\n\n<p>Let's try some substitutions now. Consider the following text:</p>\n\n<pre><code>Lorem ipsum dolor sit amet consectetuer feugiat fames malesuada pretium egestas.\n</code></pre>\n\n<p>Now, let's use the this dumb regex over it:</p>\n\n<pre><code>\\b(\\S)(\\S)(\\S)(\\S*)\\b\n</code></pre>\n\n<p>This regex matches words with at least 3 characters, and uses groups to separate the first three letters. The result is this:</p>\n\n<pre><code>Match \"Lorem\"\n     Group 1: \"L\"\n     Group 2: \"o\"\n     Group 3: \"r\"\n     Group 4: \"em\"\nMatch \"ipsum\"\n     Group 1: \"i\"\n     Group 2: \"p\"\n     Group 3: \"s\"\n     Group 4: \"um\"\n...\n\nMatch \"consectetuer\"\n     Group 1: \"c\"\n     Group 2: \"o\"\n     Group 3: \"n\"\n     Group 4: \"sectetuer\"\n...\n</code></pre>\n\n<p>So, if we apply the substitution string...</p>\n\n<pre><code>$1_$3$2_$4\n</code></pre>\n\n<p>... over it, we are trying to use the first group, add an underscore, use the third group, then the second group, add another underscore, and then the fourth group. The resulting string would be like the one below.</p>\n\n<pre><code>L_ro_em i_sp_um d_lo_or s_ti_ a_em_t c_no_sectetuer f_ue_giat f_ma_es m_la_esuada p_er_tium e_eg_stas.\n</code></pre>\n\n<p>You can use named groups for substitutions too, using ${name}.</p>\n\n<p>To play around with regexes, I recommend <a href=\"http://www.radsoftware.com.au/regexdesigner/\">Rad Software Regular Expression Designer</a>, which has a nice \"Language Elements\" tab with quick access to some basic instructions. It's based at .NET's regex engine.</p>\n\n<p>You can test your regex with many online tools, for example: <a href=\"http://regex101.com/\">http://regex101.com/</a> or <a href=\"http://regexpal.com/\">http://regexpal.com/</a>.</p>\n    "},{"t":"How do you access the matched groups in a JavaScript regular expression?","l":"http://stackoverflow.com/questions/432493/how-do-you-access-the-matched-groups-in-a-javascript-regular-expression","q":"\n\n<p>I want to match a portion of a string using a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> and then access that parenthesized substring:</p>\n\n<pre><code>var myString = \"something format_abc\"; // I want \"abc\"\n\nvar arr = /(?:^|\\s)format_(.*?)(?:\\s|$)/.exec(myString);\n\nconsole.log(arr);     // Prints: [\" format_abc\", \"abc\"] .. so far so good.\nconsole.log(arr[1]);  // Prints: undefined  (???)\nconsole.log(arr[0]);  // Prints: format_undefined (!!!)\n</code></pre>\n\n<p>What am I doing wrong?</p>\n\n<hr>\n\n<p>I've discovered that there was nothing wrong with the regular expression code above: the actual string which I was testing against was this:</p>\n\n<pre><code>\"date format_%A\"\n</code></pre>\n\n<p>Reporting that \"%A\" is undefined seems a very strange behaviour, but it is not directly related to this question, so I've opened a new one, <em><a href=\"http://stackoverflow.com/questions/432826/why-is-a-matched-substring-returning-undefined-in-javascript\">Why is a matched substring returning \"undefined\" in JavaScript?</a></em>.</p>\n\n<hr>\n\n<p>The issue was that <code>console.log</code> takes its parameters like a <code>printf</code> statement, and since the string I was logging (<code>\"%A\"</code>) had a special value, it was trying to find the value of the next parameter.</p>\n    ","a":"\n<p>You can access capturing groups like this:</p>\n\n<pre><code>var myString = \"something format_abc\";\nvar myRegexp = /(?:^|\\s)format_(.*?)(?:\\s|$)/g;\nvar match = myRegexp.exec(myString);\nalert(match[1]);  // abc\n</code></pre>\n\n<p>And if there are multiple matches you can iterate over them:</p>\n\n<pre><code>match = myRegexp.exec(myString);\nwhile (match != null) {\n    // matched text: match[0]\n    // match start: match.index\n    // capturing group n: match[n]\n    match = myRegexp.exec(myString);\n}\n</code></pre>\n    "},{"t":"How do you pass a variable to a Regular Expression JavaScript?","l":"http://stackoverflow.com/questions/494035/how-do-you-pass-a-variable-to-a-regular-expression-javascript","q":"\n\n<p>I would like to create a String.replaceAll() method in JavaScript and I'm thinking that using a RegEx would be most terse way to do it.  However, I can't figure out how to pass a variable in to a RegEx.  I can do this already which will replace all the instances of \"B\" with \"A\".</p>\n\n<pre><code>\"ABABAB\".replace(/B/g, \"A\");\n</code></pre>\n\n<p>But I want to do something like this:</p>\n\n<pre><code>String.prototype.replaceAll = function(replaceThis, withThis) {\n    this.replace(/replaceThis/g, withThis);\n};\n</code></pre>\n\n<p>But obviously this will only replace the text \"replaceThis\"...so how do I pass this variable in to my RegEx string?</p>\n    ","a":"\n<p>Instead of using the <code>/regex/g</code> syntax, you can construct a new <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions\">RegExp</a> object:</p>\n\n<pre><code>var re = new RegExp(\"regex\",\"g\");\n</code></pre>\n\n<p>You can dynamically create regex objects this way. Then you will do:</p>\n\n<pre><code>\"mystring\".replace(re, \"newstring\");\n</code></pre>\n    "},{"t":"What is the best regular expression to check if a string is a valid URL?","l":"http://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url","q":"\n\n<p>How can I check if a given string is a valid URL address?</p>\n\n<p>My knowledge of regular expressions is basic and doesn't allow me to choose from the hundreds of regular expressions I've already seen on the web.</p>\n    ","a":"\n<p>I wrote my URL (actually IRI, internationalized) pattern to comply with RFC 3987 (<a href=\"http://www.faqs.org/rfcs/rfc3987.html\" rel=\"nofollow\">http://www.faqs.org/rfcs/rfc3987.html</a>). These are in PCRE syntax.</p>\n\n<p>For absolute IRIs (internationalized):</p>\n\n<pre><code>/^[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?$/i\n</code></pre>\n\n<p>To also allow relative IRIs:</p>\n\n<pre><code>/^(?:[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?|(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?)$/i\n</code></pre>\n\n<p>How they were compiled (in PHP):</p>\n\n<pre><code>&lt;?php\n\n/* Regex convenience functions (character class, non-capturing group) */\nfunction cc($str, $suffix = '', $negate = false) {\n    return '[' . ($negate ? '^' : '') . $str . ']' . $suffix;\n}\nfunction ncg($str, $suffix = '') {\n    return '(?:' . $str . ')' . $suffix;\n}\n\n/* Preserved from RFC3986 */\n\n$ALPHA = 'a-z';\n$DIGIT = '0-9';\n$HEXDIG = $DIGIT . 'a-f';\n\n$sub_delims = '!\\\\$&amp;\\'\\\\(\\\\)\\\\*\\\\+,;=';\n$gen_delims = ':\\\\/\\\\?\\\\#\\\\[\\\\]@';\n$reserved = $gen_delims . $sub_delims;\n$unreserved = '-' . $ALPHA . $DIGIT . '\\\\._~';\n\n$pct_encoded = '%' . cc($HEXDIG) . cc($HEXDIG);\n\n$dec_octet = ncg(implode('|', array(\n    cc($DIGIT),\n    cc('1-9') . cc($DIGIT),\n    '1' . cc($DIGIT) . cc($DIGIT),\n    '2' . cc('0-4') . cc($DIGIT),\n    '25' . cc('0-5')\n)));\n\n$IPv4address = $dec_octet . ncg('\\\\.' . $dec_octet, '{3}');\n\n$h16 = cc($HEXDIG, '{1,4}');\n$ls32 = ncg($h16 . ':' . $h16 . '|' . $IPv4address);\n\n$IPv6address = ncg(implode('|', array(\n    ncg($h16 . ':', '{6}') . $ls32,\n    '::' . ncg($h16 . ':', '{5}') . $ls32,\n    ncg($h16, '?') . '::' . ncg($h16 . ':', '{4}') . $ls32,\n    ncg($h16 . ':' . $h16, '?') . '::' . ncg($h16 . ':', '{3}') . $ls32,\n    ncg(ncg($h16 . ':', '{0,2}') . $h16, '?') . '::' . ncg($h16 . ':', '{2}') . $ls32,\n    ncg(ncg($h16 . ':', '{0,3}') . $h16, '?') . '::' . $h16 . ':' . $ls32,\n    ncg(ncg($h16 . ':', '{0,4}') . $h16, '?') . '::' . $ls32,\n    ncg(ncg($h16 . ':', '{0,5}') . $h16, '?') . '::' . $h16,\n    ncg(ncg($h16 . ':', '{0,6}') . $h16, '?') . '::',\n)));\n\n$IPvFuture = 'v' . cc($HEXDIG, '+') . cc($unreserved . $sub_delims . ':', '+');\n\n$IP_literal = '\\\\[' . ncg(implode('|', array($IPv6address, $IPvFuture))) . '\\\\]';\n\n$port = cc($DIGIT, '*');\n\n$scheme = cc($ALPHA) . ncg(cc('-' . $ALPHA . $DIGIT . '\\\\+\\\\.'), '*');\n\n/* New or changed in RFC3987 */\n\n$iprivate = '\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}';\n\n$ucschar = '\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}' .\n    '\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}' .\n    '\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}' .\n    '\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}' .\n    '\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}' .\n    '\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}';\n\n$iunreserved = '-' . $ALPHA . $DIGIT . '\\\\._~' . $ucschar;\n\n$ipchar = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . ':@'));\n\n$ifragment = ncg($ipchar . '|' . cc('\\\\/\\\\?'), '*');\n\n$iquery = ncg($ipchar . '|' . cc($iprivate . '\\\\/\\\\?'), '*');\n\n$isegment_nz_nc = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . '@'), '+');\n$isegment_nz = ncg($ipchar, '+');\n$isegment = ncg($ipchar, '*');\n\n$ipath_empty = '(?!' . $ipchar . ')';\n$ipath_rootless = ncg($isegment_nz) . ncg('\\\\/' . $isegment, '*');\n$ipath_noscheme = ncg($isegment_nz_nc) . ncg('\\\\/' . $isegment, '*');\n$ipath_absolute = '\\\\/' . ncg($ipath_rootless, '?'); // Spec says isegment-nz *( \"/\" isegment )\n$ipath_abempty = ncg('\\\\/' . $isegment, '*');\n\n$ipath = ncg(implode('|', array(\n    $ipath_abempty,\n    $ipath_absolute,\n    $ipath_noscheme,\n    $ipath_rootless,\n    $ipath_empty\n))) . ')';\n\n$ireg_name = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . '@'), '*');\n\n$ihost = ncg(implode('|', array($IP_literal, $IPv4address, $ireg_name)));\n$iuserinfo = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . ':'), '*');\n$iauthority = ncg($iuserinfo . '@', '?') . $ihost . ncg(':' . $port, '?');\n\n$irelative_part = ncg(implode('|', array(\n    '\\\\/\\\\/' . $iauthority . $ipath_abempty . '',\n    '' . $ipath_absolute . '',\n    '' . $ipath_noscheme . '',\n    '' . $ipath_empty . ''\n)));\n\n$irelative_ref = $irelative_part . ncg('\\\\?' . $iquery, '?') . ncg('\\\\#' . $ifragment, '?');\n\n$ihier_part = ncg(implode('|', array(\n    '\\\\/\\\\/' . $iauthority . $ipath_abempty . '',\n    '' . $ipath_absolute . '',\n    '' . $ipath_rootless . '',\n    '' . $ipath_empty . ''\n)));\n\n$absolute_IRI = $scheme . ':' . $ihier_part . ncg('\\\\?' . $iquery, '?');\n\n$IRI = $scheme . ':' . $ihier_part . ncg('\\\\?' . $iquery, '?') . ncg('\\\\#' . $ifragment, '?');\n\n$IRI_reference = ncg($IRI . '|' . $irelative_ref);\n</code></pre>\n\n<p>Edit 7 March 2011: Because of the way PHP handles backslashes in quoted strings, these are unusable by default. You'll need to double-escape backslashes except where the backslash has a special meaning in regex. You can do that this way:</p>\n\n<pre><code>$escape_backslash = '/(?&lt;!\\\\)\\\\(?![\\[\\]\\\\\\^\\$\\.\\|\\*\\+\\(\\)QEnrtaefvdwsDWSbAZzB1-9GX]|x\\{[0-9a-f]{1,4}\\}|\\c[A-Z]|)/';\n$absolute_IRI = preg_replace($escape_backslash, '\\\\\\\\', $absolute_IRI);\n$IRI = preg_replace($escape_backslash, '\\\\\\\\', $IRI);\n$IRI_reference = preg_replace($escape_backslash, '\\\\\\\\', $IRI_reference);\n</code></pre>\n    "},{"t":"Match All Occurrences of a Regex","l":"http://stackoverflow.com/questions/80357/match-all-occurrences-of-a-regex","q":"\n\n<p>Is there a quick way to find every match of a regular expression in Ruby? I've looked through the Regex object in the Ruby STL and searched on Google to no avail.</p>\n    ","a":"\n<p>Using <a href=\"http://ruby-doc.org/core-1.9.3/String.html#method-i-scan\"><code>scan</code></a> should do the trick:</p>\n\n<pre><code>string.scan(/regex/)\n</code></pre>\n    "},{"t":"Regular expression to search for Gadaffi","l":"http://stackoverflow.com/questions/5365283/regular-expression-to-search-for-gadaffi","q":"\n\n<p>I'm trying to search for the word Gadaffi. What's the best regular expression to search for this? </p>\n\n<p>My best attempt so far is:</p>\n\n<pre><code>\\b[KG]h?add?af?fi$\\b\n</code></pre>\n\n<p>But I still seem to be missing some journals. Any suggestions?</p>\n\n<p>Update: I found a pretty extensive list here: <a href=\"http://blogs.abcnews.com/theworldnewser/2009/09/how-many-different-ways-can-you-spell-gaddafi.html\">http://blogs.abcnews.com/theworldnewser/2009/09/how-many-different-ways-can-you-spell-gaddafi.html</a></p>\n\n<p>The answer below matches all the 30 variants:</p>\n\n<pre>Gadaffi\nGadafi\nGadafy\nGaddafi\nGaddafy\nGaddhafi\nGadhafi\nGathafi\nGhadaffi\nGhadafi\nGhaddafi\nGhaddafy\nGheddafi\nKadaffi\nKadafi\nKaddafi\nKadhafi\nKazzafi\nKhadaffy\nKhadafy\nKhaddafi\nQadafi\nQaddafi\nQadhafi\nQadhdhafi\nQadthafi\nQathafi\nQuathafi\nQudhafi\nKad'afi\n</pre>\n    ","a":"\n<p><code>\\b[KGQ]h?add?h?af?fi\\b</code></p>\n\n<p>Arabic transcription is (Wiki says) \"Qaḏḏāfī\", so maybe adding a Q. And one H (\"Gadhafi\", as the article (see below) mentions).</p>\n\n<p>Btw, why is there a <code>$</code> at the end of the regex?</p>\n\n<hr>\n\n<p>Btw, nice article on the topic:</p>\n\n<p><a href=\"http://hotword.dictionary.com/gaddafi/\">Gaddafi, Kadafi, or Qaddafi? Why is the Libyan leader’s name spelled so many different ways?</a>.</p>\n\n<hr>\n\n<p><strong>EDIT</strong></p>\n\n<p>To match all the names in the <a href=\"http://www.express.be/joker/nl/platdujour/gaddafi-khadaffi-el-qadafi-kadhafy/141157.htm\">article you've mentioned later</a>, this should match them all. Let's just hope it won't match a lot of other stuff :D </p>\n\n<pre><code>\\b(Kh?|Gh?|Qu?)[aeu](d['dt]?|t|zz|dhd)h?aff?[iy]\\b\n</code></pre>\n    "},{"t":"jQuery selector regular expressions","l":"http://stackoverflow.com/questions/190253/jquery-selector-regular-expressions","q":"\n\n<p>I am after documentation on using wildcard or regular expressions (not sure on the exact terminology) with a jQuery selector.</p>\n\n<p>I have looked for this myself but have been unable to find information on the syntax and how to use it. Does anyone know where the documentation for the syntax is?</p>\n\n<p>EDIT: The attribute filters allow you to select based on patterns of an attribute value.</p>\n    ","a":"\n<p>James Padolsey created a <a href=\"http://james.padolsey.com/javascript/regex-selector-for-jquery/\">wonderful filter</a> that allows regex to be used for selection.</p>\n\n<p>Say you have the following <code>div</code>:</p>\n\n<pre><code>&lt;div class=\"asdf\"&gt;\n</code></pre>\n\n<p>Padolsey's <code>:regex</code> filter can select it like so:</p>\n\n<pre><code>$(\"div:regex(class, .*sd.*)\")\n</code></pre>\n\n<p>Also, check the <a href=\"http://docs.jquery.com/Selectors\">official documentation on selectors</a>.</p>\n    "},{"t":"Is there a regular expression to detect a valid regular expression?","l":"http://stackoverflow.com/questions/172303/is-there-a-regular-expression-to-detect-a-valid-regular-expression","q":"\n\n<p>Is is possible to detect a valid regular expression with another regular expression?  If so please give example code below.</p>\n    ","a":"\n<pre><code>/\n^                                             # start of string\n(                                             # first group start\n  (?:\n    (?:[^?+*{}()[\\]\\\\|]+                      # literals and ^, $\n     | \\\\.                                    # escaped characters\n     | \\[ (?: \\^?\\\\. | \\^[^\\\\] | [^\\\\^] )     # character classes\n          (?: [^\\]\\\\]+ | \\\\. )* \\]\n     | \\( (?:\\?[:=!]|\\?&lt;[=!]|\\?&gt;)? (?1)?? \\)  # parenthesis, with recursive content\n     | \\(\\? (?:R|[+-]?\\d+) \\)                 # recursive matching\n     )\n    (?: (?:[?+*]|\\{\\d+(?:,\\d*)?\\}) [?+]? )?   # quantifiers\n  | \\|                                        # alternative\n  )*                                          # repeat content\n)                                             # end first group\n$                                             # end of string\n/\n</code></pre>\n\n<p>This is a recursive regex, and is not supported by many regex engines. PCRE based ones should support it.</p>\n\n<p>Without whitespace and comments:</p>\n\n<pre><code>/^((?:(?:[^?+*{}()[\\]\\\\|]+|\\\\.|\\[(?:\\^?\\\\.|\\^[^\\\\]|[^\\\\^])(?:[^\\]\\\\]+|\\\\.)*\\]|\\((?:\\?[:=!]|\\?&lt;[=!]|\\?&gt;)?(?1)??\\)|\\(\\?(?:R|[+-]?\\d+)\\))(?:(?:[?+*]|\\{\\d+(?:,\\d*)?\\})[?+]?)?|\\|)*)$/\n</code></pre>\n\n<p><strong>Edit:</strong> Added some description.<br>\n<strong>Edit2:</strong> Added recursion constructs, possessive quantifiers, and string edge assertions. It now matches itself (the short version at least).<br>\n<strong>Edit3:</strong> Bug fix. \"<code>|</code>\" is not a literal, so \"<code>|?</code>\" is not valid.<br>\n<strong>Edit4:</strong> Updated character classes. They can have optional negation, must have at least one character, and first character can be <code>]</code> without closing the class.</p>\n    "},{"t":"Can you provide some examples of why it is hard to parse XML and HTML with a regex?","l":"http://stackoverflow.com/questions/701166/can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-reg","q":"\n\n<p>One mistake I see people making <a href=\"http://stackoverflow.com/questions/699708/variable-order-regex-syntax\">over</a> and <a href=\"http://stackoverflow.com/questions/457015/regular-expression-help\">over again</a> is trying to parse XML or HTML with a regex.  Here are a few of the reasons parsing XML and HTML is hard:</p>\n\n<p>People want to treat a file as a sequence of lines, but this is valid:</p>\n\n<pre><code>&lt;tag\nattr=\"5\"\n/&gt;\n</code></pre>\n\n<p>People want to treat &lt; or &lt;tag as the start of a tag, but stuff like this exists in the wild:</p>\n\n<pre><code>&lt;img src=\"imgtag.gif\" alt=\"&lt;img&gt;\" /&gt;\n</code></pre>\n\n<p>People often want to match starting tags to ending tags, but XML and HTML allow tags to contain themselves (which traditional regexes cannot handle at all):</p>\n\n<pre><code>&lt;span id=\"outer\"&gt;&lt;span id=\"inner\"&gt;foo&lt;/span&gt;&lt;/span&gt;\n</code></pre>\n\n<p>People often want to match against the content of a document (such as the famous \"find all phone numbers on a given page\" problem), but the data may be marked up (even if it appears to be normal when viewed):</p>\n\n<pre><code>&lt;span class=\"phonenum\"&gt;(&lt;span class=\"area code\"&gt;703&lt;/span&gt;)\n&lt;span class=\"prefix\"&gt;348&lt;/span&gt;-&lt;span class=\"linenum\"&gt;3020&lt;/span&gt;&lt;/span&gt;\n</code></pre>\n\n<p>Comments may contain poorly formatted or incomplete tags:</p>\n\n<pre><code>&lt;a href=\"foo\"&gt;foo&lt;/a&gt;\n&lt;!-- FIXME:\n    &lt;a href=\"\n--&gt;\n&lt;a href=\"bar\"&gt;bar&lt;/a&gt;\n</code></pre>\n\n<p>What other gotchas are you aware of?</p>\n    ","a":"\n<p>Here's some fun valid XML for you:</p>\n\n<pre><code>&lt;!DOCTYPE x [ &lt;!ENTITY y \"a]&gt;b\"&gt; ]&gt;\n&lt;x&gt;\n    &lt;a b=\"&amp;y;&gt;\" /&gt;\n    &lt;![CDATA[[a&gt;b &lt;a&gt;b &lt;a]]&gt;\n    &lt;?x &lt;a&gt; &lt;!-- &lt;b&gt; ?&gt; c --&gt; d\n&lt;/x&gt;\n</code></pre>\n\n<p>And this little bundle of joy is valid HTML:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\" [\n    &lt;!ENTITY % e \"href='hello'\"&gt;\n    &lt;!ENTITY e \"&lt;a %e;&gt;\"&gt;\n]&gt;\n    &lt;title&gt;x&lt;/TITLE&gt;\n&lt;/head&gt;\n    &lt;p id  =  a:b center&gt;\n    &lt;span / hello &lt;/span&gt;\n    &amp;amp&lt;br left&gt;\n    &lt;!---- &gt;t&lt;!---&gt; &lt; --&gt;\n    &amp;e link &lt;/a&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Not to mention all the browser-specific parsing for invalid constructs.</p>\n\n<p>Good luck pitting regex against that!</p>\n\n<p>EDIT (Jörg W Mittag): Here is another nice piece of well-formed, valid HTML 4.01:</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n  \"http://www.w3.org/TR/html4/strict.dtd\"&gt; \n&lt;HTML/\n  &lt;HEAD/\n    &lt;TITLE/&gt;/\n    &lt;P/&gt;\n</code></pre>\n    "},{"t":"Generic htaccess redirect www to non-www","l":"http://stackoverflow.com/questions/234723/generic-htaccess-redirect-www-to-non-www","q":"\n\n<p>I would like to redirect <code>www.example.com</code> to <code>example.com</code>. The following htaccess code makes this happen:</p>\n\n<pre><code>RewriteCond %{HTTP_HOST} ^www\\.example\\.com [NC]\nRewriteRule ^(.*)$ http://example.com/$1 [L,R=301]\n</code></pre>\n\n<p>But, is there a way to do this in a generic fashion without hardcoding the domain name?</p>\n    ","a":"\n<pre><code>RewriteEngine On\nRewriteBase /\nRewriteCond %{HTTP_HOST} ^www\\.(.*)$ [NC]\nRewriteRule ^(.*)$ http://%1/$1 [R=301,L]\n</code></pre>\n\n<p>Same as <a href=\"http://stackoverflow.com/a/235064/662581\">Michael's</a> except this one works :P</p>\n    "},{"t":"How to replace plain URLs with links?","l":"http://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links","q":"\n\n<p>I am using the function below to match URLs inside a given text and replace them for HTML links. The regular expression is working great, but currently I am only replacing the first match.</p>\n\n<p>How I can replace all the URL? I guess I should be using the <em>exec</em> command, but I did not really figure how to do it.</p>\n\n<pre><code>function replaceURLWithHTMLLinks(text) {\n    var exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/i;\n    return text.replace(exp,\"&lt;a href='$1'&gt;$1&lt;/a&gt;\"); \n}\n</code></pre>\n    ","a":"\n<p>First off, rolling your own regexp to parse URLs is a <em>terrible idea</em>. You must imagine this is a common enough problem that someone has written, debugged and <a href=\"http://benalman.com/code/test/js-linkify/\">tested</a> a library for it, according to <a href=\"https://metacpan.org/pod/Regexp::Common::URI#REFERENCES\">the RFCs</a>. <strong>URIs are complex</strong> - check out the <a href=\"https://github.com/joyent/node/blob/master/lib/url.js\">code for URL parsing in Node.js</a> and the Wikipedia page on <a href=\"http://en.wikipedia.org/wiki/URI_scheme\">URI schemes</a>.</p>\n\n<p>There are a ton of edge cases when it comes to parsing URLs: <a href=\"http://en.wikipedia.org/wiki/Top-level_domain#IDN_test_domains\">international domain names</a>, actual (<code>.museum</code>) vs. nonexistent (<code>.etc</code>) TLDs, weird punctuation including <a href=\"http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html\">parentheses</a>, punctuation at the end of the URL, IPV6 hostnames etc.</p>\n\n<p>I've looked at <a href=\"https://github.com/search?l=JavaScript&amp;q=linkify&amp;ref=cmdform&amp;search_target=global&amp;type=Repositories\">a ton</a> of <a href=\"https://github.com/search?l=JavaScript&amp;q=autolink&amp;ref=cmdform&amp;search_target=global&amp;type=Repositories\">libraries</a>, and those that were worth investigating all have their downsides:</p>\n\n<ul>\n<li><a href=\"https://github.com/cowboy/javascript-linkify\">Ben Alman's linkify</a> hasn't been maintained since 2009.</li>\n<li>Soapbox's <a href=\"http://soapbox.github.io/jQuery-linkify/\">jQuery linkify</a> has seen some serious effort put into it, and <a href=\"https://github.com/SoapBox/jQuery-linkify/pull/51\">a major refactor in Jan 2015</a> but it's a bit overkill in weaving jQuery into what's essentially a purely JavaScript problem. This, however, will be <a href=\"https://github.com/SoapBox/jQuery-linkify/issues/56\">solved when 2.0 is out</a>!</li>\n<li>Django's urlize <a href=\"https://github.com/ljosa/urlize.js/pull/18\">doesn't handle TLDs properly</a>. Here is the official <a href=\"http://data.iana.org/TLD/tlds-alpha-by-domain.txt\">list of valid TLDs</a></li>\n<li><a href=\"https://github.com/bryanwoods/autolink-js/issues/12\">autolink-js</a> wouldn't detect \"www.google.com\" without http://, so it's not quite suitable for autolinking \"casual URLs\" (without a scheme/protocol) found in plain text.</li>\n</ul>\n\n<p><a href=\"https://github.com/gregjacobs/Autolinker.js\">Autolinker.js</a> is the only library I've found so far that lists features (e.g. <em>\"Will properly handle HTML input. The utility will not change the <code>href</code> attribute inside anchor () tags\"</em>). I'll be looking into it more.</p>\n\n<p>If you insist on a regular expression, the most comprehensive is the <a href=\"https://github.com/component/regexps/blob/master/index.js#L3\">URL regexp from Component</a>, though it will falsely detect some non-existent two-letter TLDs by looking at it.</p>\n    "},{"t":"How do I remove all non alphanumeric characters from a string except dash?","l":"http://stackoverflow.com/questions/3210393/how-do-i-remove-all-non-alphanumeric-characters-from-a-string-except-dash","q":"\n\n<p>How do I remove all non alphanumeric characters from a string except dash and space characters?</p>\n    ","a":"\n<p>Replace <code>[^a-zA-Z0-9 -]</code> with an empty string.</p>\n\n<pre><code>Regex rgx = new Regex(\"[^a-zA-Z0-9 -]\");\nstr = rgx.Replace(str, \"\");\n</code></pre>\n    "},{"t":"Regular Expressions: Is there an AND operator?","l":"http://stackoverflow.com/questions/469913/regular-expressions-is-there-an-and-operator","q":"\n\n<p>Obviously, you can use the <code>|</code> (pipe?) to represent <code>OR</code>, but is there a way to represent <code>AND</code> as well?</p>\n\n<p>Specifically, I'd like to match paragraphs of text that contain ALL of a certain phrase, but in no particular order.</p>\n    ","a":"\n<p>Use a non-consuming regular expression.</p>\n\n<p>The typical (i.e. Perl/Java) notation is:</p>\n\n<p><code>(?=</code><em>expr</em><code>)</code></p>\n\n<p>This means \"match <em>expr</em> but after that continue matching at the original match-point.\"  </p>\n\n<p>You can do as many of these as you want, and this will be an \"and.\"  Example:</p>\n\n<p><code>(?=match this expression)(?=match this too)(?=oh, and this)</code></p>\n\n<p>You can even add capture groups inside the non-consuming expressions if you need to save some of the data therein.</p>\n    "},{"t":"Regular Expression for alphanumeric and underscores","l":"http://stackoverflow.com/questions/336210/regular-expression-for-alphanumeric-and-underscores","q":"\n\n<p>I would like to have a regular expression that checks if a string contains only upper and lowercase letters, numbers, and underscores.</p>\n    ","a":"\n<p>To match a string that contains <em>only</em> those characters (or an empty string), try</p>\n\n<pre><code>\"^[a-zA-Z0-9_]*$\"\n</code></pre>\n\n<p>This works for .NET regular expressions, and probably a lot of other languages as well.</p>\n\n<p>Breaking it down:</p>\n\n<pre><code>^ : start of string\n[ : beginning of character group\na-z : any lowercase letter\nA-Z : any uppercase letter\n0-9 : any digit\n_ : underscore\n] : end of character group\n* : zero or more of the given characters\n$ : end of string\n</code></pre>\n\n<p>If you don't want to allow empty strings, use + instead of *.</p>\n\n<p><strong>EDIT</strong> As others have pointed out, some regex languages have a shorthand form for <code>[a-zA-Z0-9_]</code>. In the .NET regex language, you can turn on ECMAScript behavior and use <code>\\w</code> as a shorthand (yielding <code>^\\w*$</code> or <code>^\\w+$</code>). Note that in other languages, and by default in .NET, <code>\\w</code> is somewhat broader, and will match other sorts of unicode characters as well (thanks to Jan for pointing this out). So if you're really intending to match <strong>only</strong> those characters, using the explicit (longer) form is probably best.</p>\n    "},{"t":"Regular expression to match DNS hostname or IP Address?","l":"http://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address","q":"\n\n<p>Does anyone have a regular expression handy that will match any legal DNS hostname or IP address?</p>\n\n<p>It's easy to write one that works 95% of the time, but I'm hoping to get something that's well tested to exactly match the latest RFC specs for DNS hostnames.</p>\n    ","a":"\n<p>You can use the following regular expressions separately or by combining them in a joint OR expression.</p>\n\n<pre><code>ValidIpAddressRegex = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\";\n\nValidHostnameRegex = \"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$\";\n</code></pre>\n\n<p><strong>ValidIpAddressRegex</strong> matches valid IP addresses and <strong>ValidHostnameRegex</strong> valid host names. Depending on the language you use \\ could have to be escaped with \\.</p>\n\n<hr>\n\n<p><strong>ValidHostnameRegex</strong> is valid as per <a href=\"http://tools.ietf.org/html/rfc1123\">RFC 1123</a>. Originally, <a href=\"http://tools.ietf.org/html/rfc952\">RFC 952</a> specified that hostname segments could not start with a digit.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Hostname\">http://en.wikipedia.org/wiki/Hostname</a></p>\n\n<blockquote>\n  <p>The original specification of\n  hostnames in <a href=\"http://tools.ietf.org/html/rfc952\">RFC\n  952</a>,\n  mandated that labels could not start\n  with a digit or with a hyphen, and\n  must not end with a hyphen. However, a\n  subsequent specification (<a href=\"http://tools.ietf.org/html/rfc1123\">RFC\n  1123</a>)\n  permitted hostname labels to start\n  with digits.</p>\n</blockquote>\n\n<pre><code>Valid952HostnameRegex = \"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$\";\n</code></pre>\n    "},{"t":"How to do a regular expression replace in MySQL?","l":"http://stackoverflow.com/questions/986826/how-to-do-a-regular-expression-replace-in-mysql","q":"\n\n<p>I have a table with ~500k rows; varchar(255) UTF8 column <code>filename</code> contains a file name;</p>\n\n<p>I'm trying to strip out various strange characters out of the filename - thought I'd use a character class: <code>[^a-zA-Z0-9()_ .\\-]</code></p>\n\n<p>Now, <strong>is there a function in MySQL that lets you replace through a regular expression</strong>? I'm looking for a similar functionality to REPLACE() function - simplified example follows:</p>\n\n<pre><code>SELECT REPLACE('stackowerflow', 'ower', 'over');\n\nOutput: \"stackoverflow\"\n\n/* does something like this exist? */\nSELECT X_REG_REPLACE('Stackoverflow','/[A-Zf]/','-'); \n\nOutput: \"-tackover-low\"\n</code></pre>\n\n<p>I know about <a href=\"http://stackoverflow.com/a/6943142/19746\">REGEXP/RLIKE</a>, but those only check <em>if</em> there is a match, not <em>what</em> the match is.</p>\n\n<p>(I <em>could</em> do a \"<code>SELECT pkey_id,filename FROM foo WHERE filename RLIKE '[^a-zA-Z0-9()_ .\\-]'</code>\" from a PHP script, do a <code>preg_replace</code> and then \"<code>UPDATE foo ... WHERE pkey_id=...</code>\", but that looks like a last-resort slow &amp; ugly hack)</p>\n    ","a":"\n<p>No.</p>\n\n<p>But if you have access to your server, you could use a user defined function (UDF)  like <a href=\"https://github.com/hholzgra/mysql-udf-regexp\" rel=\"nofollow\">mysql-udf-regexp</a>.</p>\n    "},{"t":"How can I make my match non greedy in vim?","l":"http://stackoverflow.com/questions/1305853/how-can-i-make-my-match-non-greedy-in-vim","q":"\n\n<p>I have a big HTML file that has lots of markup that looks like this:</p>\n\n<pre><code>&lt;p class=\"MsoNormal\" style=\"margin: 0in 0in 0pt;\"&gt;\n  &lt;span style=\"font-size: small; font-family: Times New Roman;\"&gt;stuff here&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>I'm trying to do a Vim search-and-replace to get rid of all <code>class=\"\"</code> and <code>style=\"\"</code> but I'm having trouble making the match ungreedy.</p>\n\n<p>My first attempt was this</p>\n\n<pre><code>%s/style=\".*?\"//g\n</code></pre>\n\n<p>but Vim doesn't seem to like the <code>?</code>.  Unfortunately removing the <code>?</code> makes the match too greedy.</p>\n\n<p>How can I make my match ungreedy?</p>\n    ","a":"\n<p>Instead of <code>.*</code> use <code>.\\{-}</code>.</p>\n\n<p><code>%s/style=\".\\{-}\"//g</code></p>\n\n<p>Also, see <code>:help non-greedy</code></p>\n    "},{"t":"Find CRLF in Notepad++","l":"http://stackoverflow.com/questions/133965/find-crlf-in-notepad","q":"\n\n<p>How can I find/replace all CRLF characters in notepad++?  Looking for something equivalent to the ^p special character in Word.</p>\n    ","a":"\n<p><strong><code>[\\r\\n]+</code></strong> should work too</p>\n\n<p>Update March, 26th 2012, release date of <strong><a href=\"http://notepad-plus-plus.org/news/notepad-6.0-release.html\">Notepad++ 6.0</a></strong>:</p>\n\n<p>OMG, it actually does work now!!!</p>\n\n<p><img src=\"http://i.stack.imgur.com/ZiyXX.png\" alt=\"PCRE regexp in Notepad++\"></p>\n\n<hr>\n\n<p>Original answer 2008 (Notepad++ 4.x) - 2009-2010-2011 (Notepad++ 5.x)</p>\n\n<p>Actually no, it does not seem to work with regexp...</p>\n\n<p>But if you have Notepad++ 5.x, you can use the '<strong>extended</strong>' search mode and look for <code>\\r\\n</code>. That does find all your <code>CRLF</code>.</p>\n\n<p>(I realize this is the same answer than the others, but again, 'extended mode' is only available with Notepad++ 4.9, 5.x and more)</p>\n\n<hr>\n\n<p>Since April 2009, you have a wiki article on the Notepad++ site on this topic:<br>\n\"<strong><a href=\"http://sourceforge.net/apps/mediawiki/notepad-plus/index.php?title=Replacing_Newlines\">How To Replace Line Ends, thus changing the line layout</a></strong>\".<br>\n(mentioned by <a href=\"http://stackoverflow.com/users/467509/georgiecasey\">georgiecasey</a> in his/her <a href=\"http://stackoverflow.com/questions/133965/find-crlf-in-notepad/4608574#4608574\">answer below</a>)</p>\n\n<p>Some relevant extracts includes the following search processes:</p>\n\n<blockquote>\n  <h3>Simple search (<kbd>Ctrl</kbd>+<kbd>F</kbd>), Search Mode = <code>Normal</code></h3>\n  \n  <p>You can select an <code>EOL</code> in the editing window. </p>\n  \n  <ul>\n  <li>Just move the cursor to the end of the line, and type <kbd>Shift</kbd>+<kbd>Right</kbd> Arrow. </li>\n  <li>or, to select <code>EOL</code> with the mouse, start just at the line end and drag to the start of the next line; dragging to the right of the <code>EOL</code> won't work.\n  You can manually copy the <code>EOL</code> and paste it into the field for Unix files (<code>LF</code>-only).</li>\n  </ul>\n  \n  <h3>Simple search (Ctrl+F), Search Mode = Extended</h3>\n  \n  <p>The \"Extended\" option shows <code>\\n</code> and <code>\\r</code> as characters that could be matched.<br>\n  As with the Normal search mode, Notepad++ is looking for the exact character.<br>\n  Searching for <code>\\r</code> in a UNIX-format file will not find anything, but searching for <code>\\n</code> will. Similarly, a Macintosh-format file will contain <code>\\r</code> but not <code>\\n</code>.</p>\n  \n  <h3>Simple search (Ctrl+F), Search Mode = Regular expression</h3>\n  \n  <p>Regular expressions use the characters <code>^</code> and <code>$</code> to anchor the match string to the beginning or end of the line. For instance, searching for <code>return;$</code> will find occurrences of \"return;\" that occur with no subsequent text on that same line. The anchor characters work identically in all file formats.<br>\n  The '.' dot metacharacter does not match line endings.</p>\n  \n  <p>[Tested in Notepad++ 5.8.5]: <strong>a regular expression search with an explicit <code>\\r</code> or <code>\\n</code> does not work (contrary to the <a href=\"http://www.scintilla.org/ScintillaDoc.html\">Scintilla documentation</a>)</strong>.<br>\n  Neither does a search on an explicit (pasted) LF, or on the (invisible) EOL characters placed in the field when an EOL is selected.\n  Advanced search (<kbd>Ctrl</kbd>+<kbd>R</kbd>) without regexp</p>\n  \n  <p><kbd>Ctrl</kbd>+<kbd>M</kbd> will insert something that matches newlines. They will be replaced by the replace string.<br>\n  I recommend this method as the most reliable, unless you really need to use regex.<br>\n  As an example, to remove every second newline in a double spaced file, enter <kbd>Ctrl</kbd>+<kbd>M</kbd> twice in the search string box, and once in the replace string box.</p>\n  \n  <h3>Advanced search (<kbd>Ctrl</kbd>+<kbd>R</kbd>) with Regexp.</h3>\n  \n  <p>Neither <kbd>Ctrl</kbd>+<kbd>M</kbd>, <code>$</code> nor <code>\\r\\n</code> are matched. </p>\n</blockquote>\n\n<hr>\n\n<p>The same wiki also mentions the <strong>Hex editor alternative</strong>:</p>\n\n<blockquote>\n  <ul>\n  <li>Type the new string at the beginning of the document. </li>\n  <li>Then select to <strong>view the document in Hex mode</strong>.  </li>\n  <li>Select one of the new lines and hit <kbd>Ctrl</kbd>+<kbd>H</kbd>. </li>\n  <li>While you have the Replace dialog box up, select on the background the new replacement string and <kbd>Ctrl</kbd>+<kbd>C</kbd> copy it to paste it in the Replace with text input. </li>\n  <li>Then Replace or Replace All as you wish. </li>\n  </ul>\n  \n  <p>Note: the character selected for new line usually appears as <strong><code>0a</code></strong>.<br>\n  It may have a different value if the file is in Windows Format. In that case you can always go to <code>Edit -&gt; EOL Conversion -&gt; Convert to Unix Format</code>, and after the replacement switch it back and <code>Edit -&gt; EOL Conversion -&gt; Convert to Windows Format</code>.</p>\n</blockquote>\n    "},{"t":"Find and kill a process in one line using bash and regex","l":"http://stackoverflow.com/questions/3510673/find-and-kill-a-process-in-one-line-using-bash-and-regex","q":"\n\n<p>I often need to kill a process during programming.</p>\n\n<p>The way I do it now is:</p>\n\n<pre><code>[~]$ ps aux | grep 'python csp_build.py'\nuser    5124  1.0  0.3 214588 13852 pts/4    Sl+  11:19   0:00 python csp_build.py\nuser    5373  0.0  0.0   8096   960 pts/6    S+   11:20   0:00 grep python csp_build.py\n[~]$ kill 5124\n</code></pre>\n\n<p>How can I extract the process id automatically and kill it in the same line?</p>\n\n<p>Like this:</p>\n\n<pre><code>[~]$ ps aux | grep 'python csp_build.py' | kill &lt;regex that returns the pid&gt;\n</code></pre>\n    ","a":"\n<p>In <code>bash</code>, you should be able to do:</p>\n\n<pre><code>kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')\n</code></pre>\n\n<p>Details on its workings are as follows:</p>\n\n<ul>\n<li>The <code>ps</code> gives you the list of all the processes.</li>\n<li>The <code>grep</code> filters that based on your search string, <code>[p]</code> is a trick to stop you picking up the actual <code>grep</code> process itself.</li>\n<li>The <code>awk</code> just gives you the second field of each line, which is the PID.</li>\n<li>The <code>$(x)</code> construct means to execute <code>x</code> then take its output and put it on the command line. The output of that <code>ps</code> pipeline inside that construct above is the list of process IDs so you end up with a command like <code>kill 1234 1122 7654</code>.</li>\n</ul>\n\n<p>Here's a transcript showing it in action:</p>\n\n<pre><code>pax&gt; sleep 3600 &amp;\n[1] 2225\npax&gt; sleep 3600 &amp;\n[2] 2226\npax&gt; sleep 3600 &amp;\n[3] 2227\npax&gt; sleep 3600 &amp;\n[4] 2228\npax&gt; sleep 3600 &amp;\n[5] 2229\npax&gt; kill $(ps aux | grep '[s]leep' | awk '{print $2}')\n[5]+  Terminated              sleep 3600\n[1]   Terminated              sleep 3600\n[2]   Terminated              sleep 3600\n[3]-  Terminated              sleep 3600\n[4]+  Terminated              sleep 3600\npax&gt; _\n</code></pre>\n\n<p>and you can see it terminating all the sleepers.</p>\n\n<hr>\n\n<p>Explaining the <code>grep '[p]ython csp_build.py'</code> bit in a bit more detail:</p>\n\n<p>When you do <code>sleep 3600 &amp;</code> followed by <code>ps -ef | grep sleep</code>, you tend to get <em>two</em> processes with <code>sleep</code> in it, the <code>sleep 3600</code> and the <code>grep sleep</code> (because they both have <code>sleep</code> in them, that's not rocket science).</p>\n\n<p>However, <code>ps -ef | grep '[s]leep'</code> won't create a process with <code>sleep</code> in it, it instead creates <code>grep '[s]leep'</code> and here's the tricky bit: the <code>grep</code> doesn't find it because it's looking for the regular expression \"any character from the character class <code>[s]</code> (which is <code>s</code>) followed by <code>leep</code>.</p>\n\n<p>In other words, it's looking for <code>sleep</code> but the grep process is <code>grep '[s]leep'</code> which doesn't have <code>sleep</code> in it.</p>\n\n<p>When I was shown this (by someone here on SO), I immediately started using it because</p>\n\n<ul>\n<li>it's one less process than adding <code>| grep -v grep</code>; and</li>\n<li>it's elegant <em>and</em> sneaky, a rare combination :-)</li>\n</ul>\n    "},{"t":"How do I replace multiple spaces with a single space in C#?","l":"http://stackoverflow.com/questions/206717/how-do-i-replace-multiple-spaces-with-a-single-space-in-c","q":"\n\n<p>How can I replace multiple spaces in a string with only one space in C#?</p>\n\n<p>Example:</p>\n\n<pre><code>1 2 3  4    5\n</code></pre>\n\n<p>would be:</p>\n\n<pre><code>1 2 3 4 5\n</code></pre>\n    ","a":"\n<pre><code>RegexOptions options = RegexOptions.None;\nRegex regex = new Regex(@\"[ ]{2,}\", options);     \ntempo = regex.Replace(tempo, @\" \");\n</code></pre>\n    "},{"t":"Is it worth using Python's re.compile?","l":"http://stackoverflow.com/questions/452104/is-it-worth-using-pythons-re-compile","q":"\n\n<p>Is there any benefit in using compile for regular expressions in Python?</p>\n\n<pre><code>h = re.compile('hello')\nh.match('hello world')\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>re.match('hello', 'hello world')\n</code></pre>\n    ","a":"\n<p>I've had a lot of experience running a compiled regex 1000s of times versus compiling on-the-fly, and have not noticed any perceivable difference.  Obviously, this is anecdotal, and certainly not a great argument <em>against</em> compiling, but I've found the difference to be negligible.</p>\n\n<p>EDIT:\nAfter a quick glance at the actual Python 2.5 library code, I see that Python internally compiles AND CACHES regexes whenever you use them anyway (including calls to <code>re.match()</code>), so you're really only changing WHEN the regex gets compiled, and shouldn't be saving much time at all - only the time it takes to check the cache (a key lookup on an internal <code>dict</code> type).</p>\n\n<p>From module re.py (comments are mine):</p>\n\n<pre><code>def match(pattern, string, flags=0):\n    return _compile(pattern, flags).match(string)\n\ndef _compile(*key):\n\n    # Does cache check at top of function\n    cachekey = (type(key[0]),) + key\n    p = _cache.get(cachekey)\n    if p is not None: return p\n\n    # ...\n    # Does actual compilation on cache miss\n    # ...\n\n    # Caches compiled regex\n    if len(_cache) &gt;= _MAXCACHE:\n        _cache.clear()\n    _cache[cachekey] = p\n    return p\n</code></pre>\n\n<p>I still often pre-compile regular expressions, but only to bind them to a nice, reusable name, not for any expected performance gain.</p>\n    "},{"t":"Non greedy regex matching in sed?","l":"http://stackoverflow.com/questions/1103149/non-greedy-regex-matching-in-sed","q":"\n\n<p>I'm trying to use sed to clean up lines of URLs to extract just the domain..</p>\n\n<p>So from:</p>\n\n<pre><code>http://www.suepearson.co.uk/product/174/71/3816/\n</code></pre>\n\n<p>I want:</p>\n\n<p><a href=\"http://www.suepearson.co.uk/\">http://www.suepearson.co.uk/</a></p>\n\n<p>(either with or without the trainling slash, it doesn't matter)</p>\n\n<p>I have tried:</p>\n\n<pre><code> sed 's|\\(http:\\/\\/.*?\\/\\).*|\\1|'\n</code></pre>\n\n<p>and (escaping the non greedy quantifier)</p>\n\n<pre><code>sed 's|\\(http:\\/\\/.*\\?\\/\\).*|\\1|'\n</code></pre>\n\n<p>but I can not seem to get the non greedy quantifier to work, so it always ends up matching the whole string.</p>\n    ","a":"\n<p>Neither basic nor extended Posix/GNU regex recognizes the non-greedy quantifier; you need a later regex.  Fortunately, Perl regex for this context is pretty easy to get:</p>\n\n<pre><code>perl -pe 's|(http://.*?/).*|\\1|'\n</code></pre>\n    "},{"t":"How does Stack Overflow generate its SEO-friendly URLs?","l":"http://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls","q":"\n\n<p>What is a good complete <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> or some other process that would take the title:</p>\n\n<blockquote>\n  <p>How do you change a title to be part of the URL like Stack Overflow?</p>\n</blockquote>\n\n<p>and turn it into </p>\n\n<pre><code>how-do-you-change-a-title-to-be-part-of-the-url-like-stack-overflow\n</code></pre>\n\n<p>that is used in the SEO-friendly URLs on Stack&nbsp;Overflow?</p>\n\n<p>The development environment I am using is <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\">Ruby on Rails</a>, but if there are some other platform-specific solutions (.NET, PHP, <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\">Django</a>), I would love to see those too. </p>\n\n<p>I am sure I (or another reader) will come across the same problem on a different platform down the line. </p>\n\n<p>I am using custom routes, and I mainly want to know how to alter the string to all special characters are removed, it's all lowercase, and all whitespace is replaced.</p>\n    ","a":"\n<p>Here's how we do it. Note that there are probably more edge conditions than you realize at first glance.</p>\n\n<p>This is the second version, unrolled for 5x more performance (and yes, I benchmarked it). I figured I'd optimize it because this function can be called hundreds of times per page.</p>\n\n<pre><code>/// &lt;summary&gt;\n/// Produces optional, URL-friendly version of a title, \"like-this-one\". \n/// hand-tuned for speed, reflects performance refactoring contributed\n/// by John Gietzen (user otac0n) \n/// &lt;/summary&gt;\npublic static string URLFriendly(string title)\n{\n    if (title == null) return \"\";\n\n    const int maxlen = 80;\n    int len = title.Length;\n    bool prevdash = false;\n    var sb = new StringBuilder(len);\n    char c;\n\n    for (int i = 0; i &lt; len; i++)\n    {\n        c = title[i];\n        if ((c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9'))\n        {\n            sb.Append(c);\n            prevdash = false;\n        }\n        else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z')\n        {\n            // tricky way to convert to lowercase\n            sb.Append((char)(c | 32));\n            prevdash = false;\n        }\n        else if (c == ' ' || c == ',' || c == '.' || c == '/' || \n            c == '\\\\' || c == '-' || c == '_' || c == '=')\n        {\n            if (!prevdash &amp;&amp; sb.Length &gt; 0)\n            {\n                sb.Append('-');\n                prevdash = true;\n            }\n        }\n        else if ((int)c &gt;= 128)\n        {\n            int prevlen = sb.Length;\n            sb.Append(RemapInternationalCharToAscii(c));\n            if (prevlen != sb.Length) prevdash = false;\n        }\n        if (i == maxlen) break;\n    }\n\n    if (prevdash)\n        return sb.ToString().Substring(0, sb.Length - 1);\n    else\n        return sb.ToString();\n}\n</code></pre>\n\n<p>To see the previous version of the code this replaced (but is functionally equivalent to, and 5x faster), view revision history of this post (click the date link).</p>\n\n<p>Also, the <code>RemapInternationalCharToAscii</code> method source code can be found <a href=\"http://meta.stackexchange.com/a/7696\">here</a>.</p>\n    "},{"t":"Split Java String by New Line","l":"http://stackoverflow.com/questions/454908/split-java-string-by-new-line","q":"\n\n<p>I'm trying to split text in a <code>JTextArea</code> using a regex to split the String by <code>\\n</code> However, this does not work and I also tried by <code>\\r\\n|\\r|n</code> and many other combination of regexes.\nCode:</p>\n\n<pre><code>public void insertUpdate(DocumentEvent e) {\n    String split[], docStr = null;\n    Document textAreaDoc = (Document)e.getDocument();\n\n    try {\n        docStr = textAreaDoc.getText(textAreaDoc.getStartPosition().getOffset(), textAreaDoc.getEndPosition().getOffset());\n    } catch (BadLocationException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n    }\n\n    split = docStr.split(\"\\\\n\");\n}\n</code></pre>\n    ","a":"\n<p>This should cover you:</p>\n\n<pre><code>String lines[] = String.split(\"\\\\r?\\\\n\");\n</code></pre>\n\n<p>There's only really two newlines (UNIX and Windows) that you need to worry about.</p>\n    "},{"t":"How to escape text for regular expression in Java","l":"http://stackoverflow.com/questions/60160/how-to-escape-text-for-regular-expression-in-java","q":"\n\n<p>Does Java have a built-in way to escape arbitrary text so that it can be included in a regular expression? For example, if my users enter \"$5\", I'd like to match that exactly rather than a \"5\" after the end of input.</p>\n    ","a":"\n<p>Since <a href=\"http://download.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#quote%28java.lang.String%29\">Java 1.5, yes</a>:</p>\n\n<pre><code>Pattern.quote(\"$5\");\n</code></pre>\n    "},{"t":"Regular expression search replace in Sublime Text 2","l":"http://stackoverflow.com/questions/11819886/regular-expression-search-replace-in-sublime-text-2","q":"\n\n<p>I'm looking to do search replace on regular expressions in Sublime Text 2. The <a href=\"http://docs.sublimetext.info/en/latest/search_and_replace/search_and_replace_overview.html#regular-expressions\">documentation on this</a> is rather anemic. Specifically, I want to do a replace on groups, so something like converting this text:</p>\n\n<p><code>Hello my name is bob</code></p>\n\n<p>And this search term:</p>\n\n<p>Find what: <code>my name is (\\w)+</code></p>\n\n<p>Replace with: <code>my name used to be $(1)</code></p>\n\n<p>The search term works just fine but I can't figure out a way to actually do a replace using the regexp group.</p>\n    ","a":"\n<p>Usually a back-reference is either <code>$1</code> or <code>\\1</code> (backslash one) for the first capture group (the first match of a pattern in parentheses). So maybe try:</p>\n\n<pre><code>my name used to be \\1\n</code></pre>\n\n<p>or</p>\n\n<pre><code>my name used to be $1\n</code></pre>\n\n<p><strong>UPDATE:</strong>\nAs several people have pointed out, your original capture pattern is incorrect and will only capture the final letter of the name rather than the whole name. You should use the following pattern to capture all of the letters of the name:</p>\n\n<pre><code>my name is (\\w+)\n</code></pre>\n    "},{"t":"What special characters must be escaped in regular expressions?","l":"http://stackoverflow.com/questions/399078/what-special-characters-must-be-escaped-in-regular-expressions","q":"\n\n<p>I am tired of always trying to guess, if I should escape special characters like '<code>()[]{}|</code>' etc. when using many implementations of regexps.</p>\n\n<p>It is different with, for example, Python, sed, grep, awk, Perl, rename, Apache, find and so on.\nIs there any rule set which tells when I should, and when I should not, escape special characters? Does it depend on the regexp type, like PCRE, POSIX or extended regexps?</p>\n    ","a":"\n<p>Which characters you must and which you mustn't escape indeed depends on the regex flavor you're working with.</p>\n\n<p>For PCRE, and most other so-called Perl-compatible flavors, escape these outside character classes:</p>\n\n<pre><code>.^$*+?()[{\\|\n</code></pre>\n\n<p>and these inside character classes:</p>\n\n<pre><code>^-]\\\n</code></pre>\n\n<p>For POSIX extended regexes (ERE), escape these outside character classes (same as PCRE):</p>\n\n<pre><code>.^$*+?()[{\\|\n</code></pre>\n\n<p>Escaping any other characters is an error with POSIX ERE.</p>\n\n<p>Inside character classes, the backslash is a literal character in POSIX regular expressions.  You cannot use it to escape anything.  You have to use \"clever placement\" if you want to include character class metacharacters as literals.  Put the ^ anywhere except at the start, the ] at the start, and the - at the start or the end of the character class to match these literally, e.g.:</p>\n\n<pre><code>[]^-]\n</code></pre>\n\n<p>In POSIX basic regular expressions (BRE), these are metacharacters that you need to escape to suppress their meaning:</p>\n\n<pre><code>.^$*\n</code></pre>\n\n<p>Escaping parentheses and curly brackets in BREs gives them the special meaning their unescaped versions have in EREs.  Some implementations (e.g. GNU) also give special meaning to other characters when escaped, such as \\? and +.  Escaping a character other than .^$*(){} is normally an error with BREs.</p>\n\n<p>Inside character classes, BREs follow the same rule as EREs.</p>\n\n<p>If all this makes your head spin, grab a copy of <a href=\"http://www.regexbuddy.com\">RegexBuddy</a>.  On the Create tab, click Insert Token, and then Literal.  RegexBuddy will add escapes as needed.</p>\n    "},{"t":"Learning Regular Expressions [closed]","l":"http://stackoverflow.com/questions/4736/learning-regular-expressions","q":"\n\n<p>I don't really understand regular expressions.  Can you explain them to me in an easy-to-follow manner?  If there are any online tools or books, could you also link to them?</p>\n    ","a":"\n<p>The most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine's syntax is the syntax of the programming language you're using. Languages such as Perl remove most of this complication, but you'll have to keep in mind other considerations if you're using regular expressions in a C program.</p>\n\n<p>If you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.</p>\n\n<h2>Start simple</h2>\n\n<p>Conceptually, the simplest regular expressions are literal characters. The pattern <code>N</code> matches the character 'N'.</p>\n\n<p>Regular expressions next to each other match sequences. For example, the pattern <code>Nick</code> matches the sequence 'N' followed by 'i' followed by 'c' followed by 'k'.</p>\n\n<p>If you've ever used <code>grep</code> on Unix—even if only to search for ordinary looking strings—you've already been using regular expressions! (The <code>re</code> in <code>grep</code> refers to regular expressions.)</p>\n\n<h2>Order from the menu</h2>\n\n<p>Adding just a little complexity, you can match either 'Nick' or 'nick' with the pattern <code>[Nn]ick</code>. The part in square brackets is a <em>character class</em>, which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so <code>[a-c]</code> matches either 'a' or 'b' or 'c'.</p>\n\n<p>The pattern <code>.</code> is special: rather than matching a literal dot only, it matches <em>any</em> character<sup>†</sup>. It's the same conceptually as the really big character class <code>[-.?+%$A-Za-z0-9...]</code>.</p>\n\n<p>Think of character classes as menus: pick just one.</p>\n\n<h2>Helpful shortcuts</h2>\n\n<p>Using <code>.</code> can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match non-negative integers: one way to write that is <code>[0-9]+</code>. Digits are a frequent match target, so you could instead use <code>\\d+</code> match non-negative integers. Others are <code>\\s</code> (whitespace) and <code>\\w</code> (word characters: alphanumerics or underscore).</p>\n\n<p>The uppercased variants are their complements, so <code>\\S</code> matches any <em>non</em>-whitespace character, for example.</p>\n\n<h2>Once is not enough</h2>\n\n<p>From there, you can repeat parts of your pattern with <em>quantifiers</em>. For example, the pattern <code>ab?c</code> matches 'abc' or 'ac' because the <code>?</code> quantifier makes the subpattern it modifies optional. Other quantifiers are</p>\n\n<ul>\n<li><code>*</code> (zero or more times)</li>\n<li><code>+</code> (one or more times)</li>\n<li><code>{n}</code> (exactly <em>n</em> times)</li>\n<li><code>{n,}</code> (at least <em>n</em> times)</li>\n<li><code>{n,m}</code> (at least <em>n</em> times but no more than <em>m</em> times)</li>\n</ul>\n\n<p>Putting some of these blocks together, the pattern <code>[Nn]*ick</code> matches all of</p>\n\n<ul>\n<li>ick</li>\n<li>Nick</li>\n<li>nick</li>\n<li>Nnick</li>\n<li>nNick</li>\n<li>nnick</li>\n<li><em>(and so on)</em></li>\n</ul>\n\n<p>The first match demonstrates an important lesson: <em><code>*</code> always succeeds!</em> Any pattern can match zero times.</p>\n\n<h2>Grouping</h2>\n\n<p>A quantifier modifies the pattern to its immediate left. You might expect <code>0abc+0</code> to match '0abc0', '0abcabc0', and so forth, but the pattern <em>immediately</em> to the left of the plus quantifier is <code>c</code>. This means <code>0abc+0</code> matches '0abc0', '0abcc0', '0abccc0', and so on.</p>\n\n<p>To match one or more sequences of 'abc' with zeros on the ends, use <code>0(abc)+0</code>. The parentheses denote a subpattern that can be quantified as a unit. It's also common for regular expression engines to save or \"capture\" the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and <code>substr</code>.</p>\n\n<h2>Alternation</h2>\n\n<p>Earlier, we saw one way to match either 'Nick' or 'nick'. Another is with alternation as in <code>Nick|nick</code>. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of <code>|</code>, <em>e.g.</em>, <code>(Nick|nick)</code>.</p>\n\n<p>For another example, you could equivalently write <code>[a-c]</code> as <code>a|b|c</code>, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.</p>\n\n<h2>Escaping</h2>\n\n<p>Although some characters match themselves, others have special meanings. The pattern <code>\\d+</code> doesn't match backslash followed by lowercase D followed by a plus sign: to get that, we'd use <code>\\\\d\\+</code>. A backslash removes the special meaning from the following character.</p>\n\n<h2>Greediness</h2>\n\n<p>Regular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.</p>\n\n<p>For example, say the input is</p>\n\n<blockquote>\n  <p>\"Hello,\" she said, \"How are you?\"</p>\n</blockquote>\n\n<p>You might expect <code>\".+\"</code> to match only 'Hello,' and will then be surprised when you see that it matched from 'Hello' all the way through 'you?'.</p>\n\n<p>To switch from greedy to what you might think of as cautious, add an extra <code>?</code> to the quantifier. Now you understand how <code>\\((.+?)\\)</code>, the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.</p>\n\n<p>If your input is '(123) (456)', then the first capture will be '123'. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.</p>\n\n<p>(As to your confusion, I don't know of any regular-expression dialect where <code>((.+?))</code> would do the same thing. I suspect something got lost in transmission somewhere along the way.)</p>\n\n<h2>Anchors</h2>\n\n<p>Use the special pattern <code>^</code> to match only at the beginning of your input and <code>$</code> to match only at the end. Making \"bookends\" with your patterns where you say, \"I know what's at the front and back, but give me everything between\" is a useful technique.</p>\n\n<p>Say you want to match comments of the form</p>\n\n<blockquote>\n  <p><code>-- This is a comment --</code></p>\n</blockquote>\n\n<p>you'd write <code>^--\\s+(.+)\\s+--$</code>.</p>\n\n<h2>Build your own</h2>\n\n<p>Regular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.</p>\n\n<h2>Tools for writing and debugging regexes:</h2>\n\n<ul>\n<li><a href=\"http://www.regexr.com/\">RegExr</a> (for JavaScript)</li>\n<li>Perl: <a href=\"http://search.cpan.org/dist/YAPE-Regex-Explain/\">YAPE: Regex Explain</a></li>\n<li><a href=\"http://weitz.de/regex-coach/\">Regex Coach</a> (engine backed by <a href=\"http://weitz.de/cl-ppcre/\">CL-PPCRE</a>)</li>\n<li><a href=\"http://regexpal.com\">RegexPal</a> (for JavaScript)</li>\n<li><a href=\"http://www.regular-expressions.info/\">Regular Expressions Online Tester</a> </li>\n<li><a href=\"http://www.regexbuddy.com/\">Regex Buddy</a></li>\n<li><a href=\"http://www.regex101.com/\">Regex 101</a> (for PCRE, JavaScript, Python)</li>\n<li><a href=\"http://laurent.riesterer.free.fr/regexp/\">Visual RegExp</a></li>\n<li><a href=\"http://www.ultrapico.com/Expresso.htm\">Expresso</a> (for .NET)</li>\n<li><a href=\"http://www.rubular.com/\">Rubular</a> (for Ruby)</li>\n<li><a href=\"http://regexlib.com/Default.aspx\">Regular Expression Library</a> (Predefined Regexes for common scenarios)</li>\n<li><a href=\"http://www.txt2re.com/\">Txt2RE</a></li>\n<li><a href=\"http://www.regextester.com/\">Regex Tester</a> (for JavaScript)</li>\n</ul>\n\n<h2>Books</h2>\n\n<ul>\n<li><a href=\"http://oreilly.com/catalog/9780596528126/\">Mastering Regular Expressions</a> and the <a href=\"http://oreilly.com/catalog/9780596002893\">2nd Edition</a></li>\n<li><a href=\"http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/\">Regular Expressions Cheat Sheet</a></li>\n<li><a href=\"http://rads.stackoverflow.com/amzn/click/0596520689\">Regex Cookbook</a></li>\n<li><a href=\"http://rads.stackoverflow.com/amzn/click/0672325667\">Teach Yourself Regular Expressions</a></li>\n</ul>\n\n<h2>Free resources</h2>\n\n<ul>\n<li><a href=\"http://neverfear.org/blog/view/Regex_tutorial_for_people_who_should_know_Regex__but_do_not___Part_1\">Regular Expressions - Everything you should know</a> (PDF Series)</li>\n<li><a href=\"http://www.greenend.org.uk/rjk/2002/06/regexp.html\">Regex Syntax Summary</a></li>\n<li><a href=\"http://perl.plover.com/Regex/\">How Regexes Work</a></li>\n</ul>\n\n<h2>Footnote</h2>\n\n<p><strong>†:</strong> The statement above that <code>.</code> matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, <code>\"\\n\"</code>, but in practice you rarely expect a pattern such as <code>.+</code> to cross a newline boundary. Perl regexes have a <a href=\"http://perldoc.perl.org/perlre.html#s\"><code>/s</code> switch</a> and Java <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html#DOTALL\"><code>Pattern.DOTALL</code></a>, for example, to make <code>.</code> match any character at all. For languages that don't have such a feature, you can use something like <code>[\\s\\S]</code> to match \"any whitespace or any non-whitespace\", in other words anything.</p>\n    "},{"t":"Regular expressions in an Objective-C Cocoa application","l":"http://stackoverflow.com/questions/422138/regular-expressions-in-an-objective-c-cocoa-application","q":"\n\n<p>Initial Googling indicates that there's no built-in way to do regular expressions in an Objective-C Cocoa application.</p>\n\n<p>So four questions:</p>\n\n<ol>\n<li><p>Is that really true?</p></li>\n<li><p>Are you kidding me?</p></li>\n<li><p>Ok, then is there a nice open-source library you recommend?</p></li>\n<li><p>What are ways to get close enough without importing a library, perhaps with the NSScanner class?</p></li>\n</ol>\n    ","a":"\n<p>I noticed that as of iOS 4.0 Apple provides a <a href=\"https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSRegularExpression_Class/Reference/Reference.html\">NSRegularExpression class</a>. Additionally, as of 10.7, the class is available <a href=\"https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSRegularExpression_Class/Reference/Reference.html\">under OS  X</a>.</p>\n    "},{"t":"Why are regular expressions so controversial? [closed]","l":"http://stackoverflow.com/questions/764247/why-are-regular-expressions-so-controversial","q":"\n\n<p>When exploring regular expressions (otherwise known as RegEx-es), there are many individuals who seem to see regular expressions as the Holy Grail.  Something that looks so complicated - just must be the answer to any question.  They tend to think that every problem is solvable using regular expressions.</p>\n\n<p>On the other hand, there are also many people who try to avoid regular expressions at all cost.  They try to find a way around regular expressions and accept additional coding just for the sake of it, even if a regular expressions would be a more compact solution.</p>\n\n<p>Why are regular expressions considered so controversial?  Is there widespread misunderstandings about how they work?  Or could it be a broad belief that regular expressions are generally slow?   </p>\n    ","a":"\n<p>I don't think people object to regular expressions because they're slow, but rather because they're hard to read and write, as well as tricky to get right. While there are some situations where regular expressions provide an effective, compact solution to the problem, they are sometimes shoehorned into situations where it's better to use an easy-to-read, maintainable section of code instead.</p>\n    "},{"t":"How to count string occurrence in string?","l":"http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string","q":"\n\n<p>How can I count the number of times a particular string occurs in another string. For example, this is what I am trying to do in Javascript:</p>\n\n<pre><code>var temp = \"This is a string.\";\nalert(temp.count(\"is\")); //should output '2'\n</code></pre>\n    ","a":"\n<pre><code>var temp = \"This is a string.\";\n\n// the g in the regular expression says to search the whole string \n// rather than just find the first occurrence\nvar count = (temp.match(/is/g) || []).length;\n\nalert(count);\n</code></pre>\n    "},{"t":"How to negate specific word in regex?","l":"http://stackoverflow.com/questions/1240275/how-to-negate-specific-word-in-regex","q":"\n\n<p>I know that I can negate group of chars as in [^bar] but I need a regular expression where negation applies to the specific word - so in my example how do I negate an actual \"bar\" and not \"any chars in bar\"?</p>\n    ","a":"\n<p>A great way to do this is to use <a href=\"http://www.regular-expressions.info/lookaround.html\">negative lookahead</a>:</p>\n\n<pre><code>^(?!.*bar).*$\n</code></pre>\n    "},{"t":"How do I grep for all non-ASCII characters in UNIX","l":"http://stackoverflow.com/questions/3001177/how-do-i-grep-for-all-non-ascii-characters-in-unix","q":"\n\n<p>I have several very large XML files and I'm trying to find the lines that contain non-ASCII characters. I've tried the following:</p>\n\n<pre><code>grep -e \"[\\x{00FF}-\\x{FFFF}]\" file.xml\n</code></pre>\n\n<p>But this returns every line in the file, regardless of whether the line contains a character in the range specified.</p>\n\n<p>Do I have the syntax wrong or am I doing something else wrong?  I've also tried:</p>\n\n<pre><code>egrep \"[\\x{00FF}-\\x{FFFF}]\" file.xml \n</code></pre>\n\n<p>(with both single and double quotes surrounding the pattern).</p>\n    ","a":"\n<p>You can use the command: </p>\n\n<pre><code>grep --color='auto' -P -n \"[\\x80-\\xFF]\" file.xml\n</code></pre>\n\n<p>This will give you the line number, and will highlight non-ascii chars in red.</p>\n    "},{"t":"Removing empty lines in Notepad++","l":"http://stackoverflow.com/questions/3866034/removing-empty-lines-in-notepad","q":"\n\n<p>How can I replace empty lines in Notepad++? I tried a find and replace with the empty lines in the find, and nothing in the replace, but it did not work; it probably needs regex.</p>\n    ","a":"\n<p>You need something like a regular expression.</p>\n\n<p><strong>You have to be in <code>Extended</code> mode</strong></p>\n\n<p>If you want all the lines to end up on a <strong>single line</strong> use <code>\\r\\n</code>. If you want to simply remove <strong>empty</strong> lines, use <code>\\n\\r</code> as @Link originally suggested.</p>\n\n<p>Replace either expression with nothing.</p>\n    "},{"t":"jQuery validate: How to add a rule for regular expression validation?","l":"http://stackoverflow.com/questions/280759/jquery-validate-how-to-add-a-rule-for-regular-expression-validation","q":"\n\n<p>I am using the <strong><a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> validation plugin</strong>. Great stuff! I want to migrate my existing ASP.NET solution to use jQuery instead of the ASP.NET validators. I am missing a replacement for the <strong>regular expression</strong> validator. I want to be able to do something like this:</p>\n\n<pre><code>$(\"Textbox\").rules(\"add\", { regularExpression: \"^[a-zA-Z'.\\s]{1,40}$\" })\n</code></pre>\n\n<p>How do I <strong>add a custom rule</strong> to achieve this?</p>\n    ","a":"\n<p>Thanks to the answer of redsquare I added a method like this:</p>\n\n<pre><code>$.validator.addMethod(\n        \"regex\",\n        function(value, element, regexp) {\n            var re = new RegExp(regexp);\n            return this.optional(element) || re.test(value);\n        },\n        \"Please check your input.\"\n);\n</code></pre>\n\n<p>now all you need to do to validate against any regex is this:</p>\n\n<pre><code>$(\"#Textbox\").rules(\"add\", { regex: \"^[a-zA-Z'.\\\\s]{1,40}$\" })\n</code></pre>\n\n<p>Additionally, it looks like there is a file called additional-methods.js that contains the method \"pattern\", which can be a RegExp when created using the method without quotes.</p>\n\n<p><a href=\"http://bassistance.de/jquery-plugins/jquery-plugin-validation/\">http://bassistance.de/jquery-plugins/jquery-plugin-validation/</a></p>\n\n<p><a href=\"http://ajax.aspnetcdn.com/ajax/jquery.validate/1.9/additional-methods.js\">http://ajax.aspnetcdn.com/ajax/jquery.validate/1.9/additional-methods.js</a></p>\n    "},{"t":"How do I split a string with multiple separators in javascript?","l":"http://stackoverflow.com/questions/650022/how-do-i-split-a-string-with-multiple-separators-in-javascript","q":"\n\n<p>How do I split a string with multiple separators in JavaScript?  I'm trying to split on both commas and spaces but, AFAIK, JS's split function only supports one separator.</p>\n    ","a":"\n<p>Pass in a regexp as the parameter:</p>\n\n<pre><code>js&gt; \"Hello awesome, world!\".split(/[\\s,]+/)\nHello,awesome,world!\n</code></pre>\n\n<p><strong>Edited to add:</strong></p>\n\n<p>You can get the last element by selecting the length of the array minus 1:</p>\n\n<pre><code>&gt;&gt;&gt; bits = \"Hello awesome, world!\".split(/[\\s,]+/)\n[\"Hello\", \"awesome\", \"world!\"]\n&gt;&gt;&gt; bit = bits[bits.length - 1]\n\"world!\"\n</code></pre>\n\n<p>... and if the pattern doesn't match:</p>\n\n<pre><code>&gt;&gt;&gt; bits = \"Hello awesome, world!\".split(/foo/)\n[\"Hello awesome, world!\"]\n&gt;&gt;&gt; bits[bits.length - 1]\n\"Hello awesome, world!\"\n</code></pre>\n    "},{"t":"Javascript regex multiline flag doesn't work","l":"http://stackoverflow.com/questions/1068280/javascript-regex-multiline-flag-doesnt-work","q":"\n\n<p>I wrote a regex to fetch string from html, but it seems the multiline flag doesn't work.</p>\n\n<p>this is my pattern and I want to get the text in h1 tag.</p>\n\n<pre><code>var pattern= /&lt;div class=\"box-content-5\"&gt;.*&lt;h1&gt;([^&lt;]+?)&lt;\\/h1&gt;/mi\nm = html.search(pattern);\nreturn m[1];\n</code></pre>\n\n<p>I created a string to test it. When the string contains \"\\n\" the result is always null. If I remove all the \"\\n\" , it gave me the right result, no matter with or without /m flag.</p>\n\n<p>what's wrong with my regex?</p>\n    ","a":"\n<p>You are looking for the <code>/.../s</code> modifier, also known as the <em>dotall</em> modifier. It forces the dot <code>.</code> to also match newlines, which it <em>does not do</em> by default.</p>\n\n<p>The bad news is that it does not exist in Javascript. The good news is that you can work around it by using a character class (e.g. <code>\\s</code>) and its negation (<code>\\S</code>) together, like this:</p>\n\n<pre><code>[\\s\\S]\n</code></pre>\n\n<p>So in your case the regex would become:</p>\n\n<pre><code>/&lt;div class=\"box-content-5\"&gt;[\\s\\S]*&lt;h1&gt;([^&lt;]+?)&lt;\\/h1&gt;/i\n</code></pre>\n    "},{"t":"Escape string for use in Javascript regex [duplicate]","l":"http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\">Is there a RegExp.escape function in Javascript?</a>  </p>\n</blockquote>\n\n\n\n<p>I am trying to build a javascript regex based on user input:</p>\n\n<pre>function FindString(input) {\n    var reg = new RegExp('' + input + '');\n    // [snip] perform search\n}\n</pre>\n\n<p>But the regex will not work correctly when the user input contains a <code>?</code> or <code>*</code> because they are interpreted as regex specials. In fact, if the user puts an unbalanced <code>(</code> or <code>[</code> in their string, the regex isn't even valid.</p>\n\n<p>What is the javascript function to correctly escape all special characters for use in regex?</p>\n    ","a":"\n<h1>Short 'n Sweet</h1>\n\n<pre><code>function escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&amp;\");\n}\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\">MDN: Javascript Guide: Regular Expressions</a></p>\n\n<pre><code>escapeRegExp(\"All of these should be escaped: \\ ^ $ * + ? . ( ) | { } [ ]\");\n\n&gt;&gt;&gt; \"All of these should be escaped: \\\\ \\^ \\$ \\* \\+ \\? \\. \\( \\) \\| \\{ \\} \\[ \\] \"\n</code></pre>\n\n<p>Other symbols (~`!@# ...) MAY be escaped without consequence, but are not required to be.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<h2>Test Case: A typical url</h2>\n\n<pre><code>escapeRegExp(\"/path/to/resource.html?search=query\");\n\n&gt;&gt;&gt; \"\\/path\\/to\\/resource\\.html\\?search=query\"\n</code></pre>\n\n<h1>The Long Answer</h1>\n\n<p>If you're going to use the function above at least link to this stack overflow post in your code's documentation so that it doesn't look like crazy hard-to-test voodoo.</p>\n\n<pre><code>var escapeRegExp;\n\n(function () {\n  // Referring to the table here:\n  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n  // these characters should be escaped\n  // \\ ^ $ * + ? . ( ) | { } [ ]\n  // These characters only have special meaning inside of brackets\n  // they do not need to be escaped, but they MAY be escaped\n  // without any adverse effects (to the best of my knowledge and casual testing)\n  // : ! , = \n  // my test \"~!@#$%^&amp;*(){}[]`/=?+\\|-_;:'\\\",&lt;.&gt;\".match(/[\\#]/g)\n\n  var specials = [\n        // order matters for these\n          \"-\"\n        , \"[\"\n        , \"]\"\n        // order doesn't matter for any of these\n        , \"/\"\n        , \"{\"\n        , \"}\"\n        , \"(\"\n        , \")\"\n        , \"*\"\n        , \"+\"\n        , \"?\"\n        , \".\"\n        , \"\\\\\"\n        , \"^\"\n        , \"$\"\n        , \"|\"\n      ]\n\n      // I choose to escape every character with '\\'\n      // even though only some strictly require it when inside of []\n    , regex = RegExp('[' + specials.join('\\\\') + ']', 'g')\n    ;\n\n  escapeRegExp = function (str) {\n    return str.replace(regex, \"\\\\$&amp;\");\n  };\n\n  // test escapeRegExp(\"/path/to/res?search=this.that\")\n}());\n</code></pre>\n    "},{"t":"Convert PHP closing tag into comment","l":"http://stackoverflow.com/questions/15219815/convert-php-closing-tag-into-comment","q":"\n\n<p>One of the lines in my script contains a PHP closing tag inside a string. Under normal operation this does not cause a problem, but I need to comment out the line.</p>\n\n<p>I have tried to comment out this line with <code>//</code>, <code>/*</code> <code>*/</code> and <code>#</code> but none of them work, the parser considers closing tag to be an actual closing tag.</p>\n\n<p>Here is the line in question:</p>\n\n<pre><code>$string = preg_replace('#&lt;br\\s*/?&gt;(?:\\s*&lt;br\\s*/?&gt;)+#i', '&lt;br /&gt;', $string);\n//                              ^^             ^^\n</code></pre>\n\n<p>What can I do to comment out the above line?</p>\n    ","a":"\n<p>Use a trick: concatenate the string from two pieces. This way, the closing tag is cut in two, and is not a valid closing tag anymore. <code>'?&gt;' --&gt; '?'.'&gt;'</code></p>\n\n<p>In your code:</p>\n\n<pre><code>$string = preg_replace('#&lt;br\\s*/?'.'&gt;(?:\\s*&lt;br\\s*/?'.'&gt;)+#i', '&lt;br /&gt;', $string);\n</code></pre>\n\n<p>This will make <code>//</code> comments work. </p>\n\n<p>For <code>/* */</code> comments to work, you'd have to split the <code>*/</code> sequence too:</p>\n\n<pre><code>$string = preg_replace('#&lt;br\\s*'.'/?'.'&gt;(?:\\s*&lt;br\\s*'.'/?'.'&gt;)+#i', '&lt;br /&gt;', $string);\n</code></pre>\n\n<p>Remember, sometimes, even though the whole is <em>more</em> than the sum of its parts - but being greedy is bad, there are times you are better left with <em>less</em>. :)</p>\n    "},{"t":"How do I access named capturing groups in a .NET Regex?","l":"http://stackoverflow.com/questions/906493/how-do-i-access-named-capturing-groups-in-a-net-regex","q":"\n\n<p>I'm having a hard time finding a good resource that explains how to use Named Capturing Groups in C#.  This is the code that I have so far:</p>\n\n<pre><code>string page = Encoding.ASCII.GetString(bytePage);\nRegex qariRegex = new Regex(\"&lt;td&gt;&lt;a href=\\\"(?&lt;link&gt;.*?)\\\"&gt;(?&lt;name&gt;.*?)&lt;/a&gt;&lt;/td&gt;\");\nMatchCollection mc = qariRegex.Matches(page);\nCaptureCollection cc = mc[0].Captures;\nMessageBox.Show(cc[0].ToString());\n</code></pre>\n\n<p>However this always just shows the full line:</p>\n\n<pre><code>&lt;td&gt;&lt;a href=\"/path/to/file\"&gt;Name of File&lt;/a&gt;&lt;/td&gt;\n</code></pre>\n\n<p>I have experimented with several other \"methods\" that I've found on various websites but I keep getting the same result.</p>\n\n<p>How can I access the named capturing groups that are specified in my regex?</p>\n    ","a":"\n<p>Use the group collection of the Match object, indexing it with the capturing group name, e.g. </p>\n\n<pre><code>foreach (Match m in mc){\n    MessageBox.Show(m.Groups[\"link\"]);\n}\n</code></pre>\n    "},{"t":"How to remove non-alphanumeric characters?","l":"http://stackoverflow.com/questions/659025/how-to-remove-non-alphanumeric-characters","q":"\n\n<p>I need to remove all characters from a string which aren't in <code>a-z A-Z 0-9</code> set or are not spaces.</p>\n\n<p>Does anyone have a function to do this?</p>\n    ","a":"\n<p>Sounds like you almost knew what you wanted to do already, you basically defined it as a regex.</p>\n\n<pre><code>preg_replace(\"/[^A-Za-z0-9 ]/\", '', $string);\n</code></pre>\n    "},{"t":"How do you implement a good profanity filter?","l":"http://stackoverflow.com/questions/273516/how-do-you-implement-a-good-profanity-filter","q":"\n\n<p>Many of us need to deal with user input, search queries, and situations where the input text can potentially contain profanity or undesirable language. Oftentimes this needs to be filtered out.</p>\n\n<p>Where can one find a good list of swear words in various languages and dialects? </p>\n\n<p>Are there APIs available to sources that contain good lists? Or maybe an API that simply says \"yes this is clean\" or \"no this is dirty\" with some parameters?</p>\n\n<p>What are some good methods for catching folks trying to trick the system, like a$$, azz, or a55?</p>\n\n<p>Bonus points if you offer solutions for PHP. :)</p>\n\n<h2><em>Edit: Response to answers that say simply avoid the programmatic issue:</em></h2>\n\n<p>I think there is a place for this kind of filter when, for instance, a user can use public image search to find pictures that get added to a sensitive community pool. If they can search for \"penis\", then they will likely get many pictures of, yep. If we don't want pictures of that, then preventing the word as a search term is a good gatekeeper, though admittedly not a foolproof method. Getting the list of words in the first place is the real question.</p>\n\n<p>So I'm really referring to a way to figure out of a single token is dirty or not and then simply disallow it. I'd not bother preventing a sentiment like the totally hilarious \"long necked giraffe\" reference. Nothing you can do there. :)</p>\n    ","a":"\n<p><a href=\"http://blog.codinghorror.com/obscenity-filters-bad-idea-or-incredibly-intercoursing-bad-idea/\">Obscenity Filters: Bad Idea, or Incredibly Intercoursing Bad Idea?</a></p>\n\n<p>Also, one can't forget <a href=\"http://habitatchronicles.com/2007/03/the-untold-history-of-toontowns-speedchat-or-blockchattm-from-disney-finally-arrives/\">The Untold History of Toontown's SpeedChat</a>, where even using a \"safe-word whitelist\" resulted in a 14 year old quickly circumventing it with:\n<em>\"I want to stick my long-necked Giraffe up your fluffy white bunny.\"</em></p>\n\n<p>Bottom line: Ultimately, for any system that you implement, there is absolutely no substitute for human review (whether peer or otherwise). Feel free to implement a rudimentary tool to get rid of the drive-by's, but for the determined troll, you absolutely must have a non-algorithm-based approach. </p>\n\n<p>A system that removes anonymity and introduces accountability (something that Stack Overflow does well) is helpful also, particularly in order to help combat <a href=\"http://www.penny-arcade.com/comic/2004/03/19/\">John Gabriel's G.I.F.T.</a></p>\n\n<p>You also asked where you can get profanity lists to get you started -- one open-source project to check out is <a href=\"http://dansguardian.org\">Dansguardian</a> -- check out the source code for their default profanity lists. There is also an additional third party <a href=\"http://contentfilter.futuragts.com/phraselists/\">Phrase List</a> that you can download for the proxy that may be a helpful gleaning point for you.</p>\n\n<p><strong>Edit in response the question edit:</strong> Thanks for the clarification on what you're trying to do. In that case, if you're just trying to do a simple word filter, there are two ways you can do it. One is to create a single long regexp with all of the banned phrases that you want to censor, and merely do a regex find/replace with it. A regex like:</p>\n\n<pre><code>$filterRegex = \"(boogers|snot|poop|shucks|argh)\"\n</code></pre>\n\n<p>and run it on your input string using <a href=\"http://us.php.net/preg_match\">preg_match()</a> to wholesale test for a hit,</p>\n\n<p>or <a href=\"http://us.php.net/preg_replace\">preg_replace()</a> to blank them out.</p>\n\n<p>You can also load those functions up with arrays rather than a single long regex, and for long word lists, it may be more manageable. See the <a href=\"http://us.php.net/preg_replace\">preg_replace()</a> for some good examples as to how arrays can be used flexibly.</p>\n\n<p>For additional PHP programming examples, see this page for a <a href=\"http://www.bitrepository.com/advanced-word-filter.html\">somewhat advanced generic class</a> for word filtering that *'s out the center letters from censored words, and this <a href=\"http://stackoverflow.com/questions/24515/bad-words-filter\">previous Stack Overflow question</a> that also has a PHP example (the main valuable part in there is the SQL-based filtered word approach -- the leet-speak compensator can be dispensed with if you find it unnecessary). </p>\n\n<p>You also added: \"<em>Getting the list of words in the first place is the real question.</em>\" -- in addition to some of the previous Dansgaurdian links, you may find <a href=\"http://urbanoalvarez.es/blog/2008/04/04/bad-words-list/\">this handy .zip</a> of 458 words to be helpful.</p>\n    "},{"t":"Simple regular expression for a decimal with a precision of 2","l":"http://stackoverflow.com/questions/308122/simple-regular-expression-for-a-decimal-with-a-precision-of-2","q":"\n\n<p>What is the regular expression for a decimal with a precision of 2?</p>\n\n<p><em>Valid examples</em>:</p>\n\n<pre><code>123.12\n2\n56754\n92929292929292.12\n0.21\n3.1\n</code></pre>\n\n<p><em>Invalid examples:</em></p>\n\n<pre><code>12.1232\n2.23332\ne666.76\n</code></pre>\n\n<p>The decimal point may be optional, and integers may also be included.</p>\n    ","a":"\n<p>Valid regex tokens vary by implementation.  The most generic form that I know of would be:</p>\n\n<pre><code>[0-9]+(\\.[0-9][0-9]?)?\n</code></pre>\n\n<p>The most compact:</p>\n\n<pre><code>\\d+(\\.\\d{1,2})?\n</code></pre>\n\n<p>Both assume that you must have both at least one digit before and one after the decimal place.</p>\n\n<p>To require that the whole string is a number of this form, wrap the expression in start and end tags such as (in Perl's form):</p>\n\n<pre><code>^\\d+(\\.\\d{1,2})?$\n</code></pre>\n\n<p><strong>ADDED:</strong> Wrapped the fractional portion in ()? to make it optional.  Be aware that this excludes forms such as \"12.\"  Including that would be more like <code>^\\d+\\.?\\d{0,2}$</code>.</p>\n    "},{"t":"Regex for numbers only","l":"http://stackoverflow.com/questions/273141/regex-for-numbers-only","q":"\n\n<p>I haven't used regular expressions at all, so I'm having difficulty troubleshooting. I want the regex to match only when the contained string is all numbers; but with the two examples below it is matching a string that contains all numbers plus an equals sign like \"1234=4321\". I'm sure there's a way to change this behavior, but as I said, I've never really done much with regular expressions.</p>\n\n<pre><code>string compare = \"1234=4321\";\nRegex regex = new Regex(@\"[\\d]\");\n\nif (regex.IsMatch(compare))\n{ \n    //true\n}\n\nregex = new Regex(\"[0-9]\");\n\nif (regex.IsMatch(compare))\n{ \n    //true\n}\n</code></pre>\n\n<p>In case it matters, I'm using C# and .NET2.0.</p>\n    ","a":"\n<p>Use the beginning and end anchors.</p>\n\n<pre><code>Regex regex = new Regex(@\"^\\d$\");\n</code></pre>\n\n<p>Use <code>\"^\\d+$\"</code> if you need to match more than one digit.</p>\n\n<hr>\n\n<p>Note that <code>\"\\d\"</code> will match <code>[0-9]</code> and other digit characters like the Eastern Arabic numerals <code>٠١٢٣٤٥٦٧٨٩</code>.  Use <code>\"^[0-9]+$\"</code> to restrict matches to just the Arabic numerals 0 - 9.</p>\n\n<hr>\n\n<p>If you need to include any numeric representations other than just digits (like decimal values for starters), then see <a href=\"http://stackoverflow.com/users/471272/tchrist\">@tchrist</a>'s <a href=\"http://stackoverflow.com/a/4247184/1288\">comprehensive guide to parsing numbers with regular expressions</a>.</p>\n    "},{"t":"Greedy vs. Reluctant vs. Possessive Quantifiers","l":"http://stackoverflow.com/questions/5319840/greedy-vs-reluctant-vs-possessive-quantifiers","q":"\n\n<p>I found this <a href=\"http://download.oracle.com/javase/tutorial/essential/regex/quant.html\">excellent tutorial</a> on regular expressions and while I intuitively understand what \"greedy\", \"reluctant\" and \"possessive\" quantifiers do, there seems to be a serious hole in my understanding.</p>\n\n<p>Specifically, in the following example:</p>\n\n<pre><code>Enter your regex: .*foo  // greedy quantifier\nEnter input string to search: xfooxxxxxxfoo\nI found the text \"xfooxxxxxxfoo\" starting at index 0 and ending at index 13.\n\nEnter your regex: .*?foo  // reluctant quantifier\nEnter input string to search: xfooxxxxxxfoo\nI found the text \"xfoo\" starting at index 0 and ending at index 4.\nI found the text \"xxxxxxfoo\" starting at index 4 and ending at index 13.\n\nEnter your regex: .*+foo // possessive quantifier\nEnter input string to search: xfooxxxxxxfoo\nNo match found.\n</code></pre>\n\n<p>The explanation mentions <strong>eating</strong> the entire input string, letters been <strong>consumed</strong>, matcher <strong>backing off</strong>, rightmost occurrence of \"foo\" has been <strong>regurgitated</strong>, etc.</p>\n\n<p>Unfortunately, despite the nice metaphors, I still don't understand what is eaten by whom... Do you know of another tutorial that explains (concisely) <em>how</em> regular expressions engines work?</p>\n\n<p>Alternatively, if someone can explain in somewhat different phrasing the following paragraph, that would be much appreciated:</p>\n\n<blockquote>\n  <p>The first example uses the greedy\n  quantifier .* to find \"anything\", zero\n  or more times, followed by the letters\n  \"f\" \"o\" \"o\". Because the quantifier is\n  greedy, the .* portion of the\n  expression first eats the entire input\n  string. At this point, the overall\n  expression cannot succeed, because the\n  last three letters (\"f\" \"o\" \"o\") have\n  already been consumed (<strong>by whom?</strong>). So the matcher\n  slowly backs off (<strong>from right-to-left?</strong>) one letter at a time\n  until the rightmost occurrence of\n  \"foo\" has been regurgitated (<strong>what does this mean?</strong>), at which\n  point the match succeeds and the\n  search ends.</p>\n  \n  <p>The second example, however, is\n  reluctant, so it starts by first\n  consuming (<strong>by whom?</strong>) \"nothing\". Because \"foo\"\n  doesn't appear at the beginning of the\n  string, it's forced to swallow (<strong>who</strong> swallows?) the\n  first letter (an \"x\"), which triggers\n  the first match at 0 and 4. Our test\n  harness continues the process until\n  the input string is exhausted. It\n  finds another match at 4 and 13.</p>\n  \n  <p>The third example fails to find a\n  match because the quantifier is\n  possessive. In this case, the entire\n  input string is consumed by .*+, (<strong>how?</strong>)\n  leaving nothing left over to satisfy\n  the \"foo\" at the end of the\n  expression. Use a possessive\n  quantifier for situations where you\n  want to seize all of something without\n  ever backing off (<strong>what does back off mean?</strong>); it will outperform\n  the equivalent greedy quantifier in\n  cases where the match is not\n  immediately found.</p>\n</blockquote>\n    ","a":"\n<p>I'll give it a shot.</p>\n\n<p>A <strong>greedy</strong> quantifier first matches as much as possible. So the <code>.*</code> matches the entire string. Then the matcher tries to match the <code>f</code> following, but there are no characters left. So it \"backtracks\", making the greedy quantifier match one less thing (leaving the \"o\" at the end of the string unmatched). That still doesn't match the <code>f</code> in the regex, so it \"backtracks\" one more step, making the greedy quantifier match one less thing again (leaving the \"oo\" at the end of the string unmatched). That <em>still</em> doesn't match the <code>f</code> in the regex, so it backtracks one more step (leaving the \"foo\" at the end of the string unmatched). Now, the matcher finally matches the <code>f</code> in the regex, and the <code>o</code> and the next <code>o</code> are matched too. Success!</p>\n\n<p>A <strong>reluctant</strong> or \"non-greedy\" quantifier first matches as little as possible. So the <code>.*</code> matches nothing at first, leaving the entire string unmatched. Then the matcher tries to match the <code>f</code> following, but the unmatched portion of the string starts with \"x\" so that doesn't work. So the matcher backtracks, making the non-greedy quantifier match one more thing (now it matches the \"x\", leaving \"fooxxxxxxfoo\" unmatched). Then it tries to match the <code>f</code>, which succeeds, and the <code>o</code> and the next <code>o</code> in the regex match too. Success!</p>\n\n<p>In your example, it then starts the process over with the remaining unmatched portion of the string, following the same process.</p>\n\n<p>A <strong>possessive</strong> quantifier is just like the greedy quantifier, but it doesn't backtrack. So it starts out with <code>.*</code> matching the entire string, leaving nothing unmatched. Then there is nothing left for it to match with the <code>f</code> in the regex. Since the possessive quantifier doesn't backtrack, the match fails there.</p>\n    "},{"t":"Split a string by spaces — preserving quoted substrings — in Python","l":"http://stackoverflow.com/questions/79968/split-a-string-by-spaces-preserving-quoted-substrings-in-python","q":"\n\n<p>I have a string which is like this:</p>\n\n<pre><code>this is \"a test\"\n</code></pre>\n\n<p>I'm trying to write something in Python to split it up by space while ignoring spaces within quotes. The result I'm looking for is:</p>\n\n<pre><code>['this','is','a test']\n</code></pre>\n\n<p>PS. I know you are going to ask \"what happens if there are quotes within the quotes, well, in my application, that will never happen.</p>\n    ","a":"\n<p>You want split, from the shlex module.</p>\n\n<pre><code>&gt;&gt;&gt; import shlex\n&gt;&gt;&gt; shlex.split('this is \"a test\"')\n['this', 'is', 'a test']\n</code></pre>\n\n<p>This should do exactly what you want.</p>\n    "},{"t":"Is there any way to put malicious code into a regular expression?","l":"http://stackoverflow.com/questions/4579497/is-there-any-way-to-put-malicious-code-into-a-regular-expression","q":"\n\n<p>I want to add regular expression search capability to my public web page. Other than <a href=\"http://en.wikipedia.org/wiki/HTML\">HTML</a> encoding the output, do I need to do anything to guard against malicious user input?</p>\n\n<p>Google searches are swamped by people solving the converse problem-- using regular expressions to detect malicious input--which I'm not interested in. In my scenario, the user input <em>is</em> a regular expression.</p>\n\n<p>I'll be using the <em>Regex</em> library in .NET (C#).</p>\n    ","a":"\n<h2>Denial‐of‐Service Concerns</h2>\n\n<p>The most common concern with regexes is a denial‐of‐service attack through pathological patterns that go exponential — or even super‐exponential! — and so appear to take forever to solve. These may only show up on particular input data, but one can generally create one wherein this doesn’t matter.</p>\n\n<p>Which ones these are will depend somewhat on how smart the regex compiler you’re using happens to be, because some of these can be detected during compilation time.  Regex compilers that implement recursion usually have a built‐in recursion‐depth counter for checking non‐progression.</p>\n\n<p>Russ Cox’s excellent 2007 paper on <a href=\"http://swtch.com/~rsc/regexp/regexp1.html\">Regular Expression Matching Can Be Simple And Fast \n(but is slow in Java, Perl, PHP, Python, Ruby, ...)</a> talks about ways that most modern NFAs, which all seem to derive from Henry Spencer’s code, suffer severe performance degradation, but where a Thompson‐style NFA has no such problems.</p>\n\n<p>If you only admit patterns that can be solved by DFAs, you can compile them up as such, and they will run faster, possibly much faster. However, it takes <em>time</em> to do this. The Cox paper mentions this approach and its attendant issues. It all comes down to a classic time–space trade‐off.</p>\n\n<p>With a DFA, you spend more time building it (and allocating more states), whereas with an NFA you spend more time executing it, since it can be multiple states at the same time, and backtracking can eat your lunch — and your CPU.</p>\n\n<h2>Denial‐of‐Service Solutions</h2>\n\n<p>Probably the most reasonable way to address these patterns that are on the losing end of a race with the heat‐death of the universe is to wrap them with a timer that effectively places  a maximum amount of time allowed for their execution. Usually this will be much, much less than the default timeout that most HTTP servers provide. </p>\n\n<p>There are various ways to implement these, ranging form a simple <code>alarm(N)</code> at the C level, to some sort of <code>try {}</code> block the catches alarm‐type exceptions, all the way to spawning off a new thread that’s specially created with a timing constraint built right into it.</p>\n\n<h2>Code Callouts</h2>\n\n<p>In regex languages that admit code callouts, some mechanism for allowing or disallowing these from the string you’re going to compile <em>should</em> be provided.  Even if code callouts are only to code in the language you are using, you should restrict them; they don’t have to be able to call external code, although if they can, you’ve got much bigger problems.</p>\n\n<p>For example, in Perl one cannot have code callouts in regexes created from string interpolation (as these would be, as they’re compiled during run‐time) unless the special lexically‐scoped pragma <code>use re \"eval\";</code> in active in the current scope. </p>\n\n<p>That way nobody can sneak in a code callout to run system programs like <code>rm -rf *</code>, for example. Because code callouts are so security‐sensitive, Perl disables them by default on all interpolated strings, and you have to go out of your way to re‐enable them.</p>\n\n<h2>User‐Defined \\P{roperties}</h2>\n\n<p>There remains one more security‐sensitive issue related to Unicode-style properties — like <code>\\pM</code>, <code>\\p{Pd}</code>, <code>\\p{Pattern_Syntax}</code>, or <code>\\p{Script=Greek}</code> — that <em>may</em> exist in some regex compilers that support that notation. </p>\n\n<p>The issue is that in some of these, the set of possible properties is user‐extensible. That means you can have custom properties that are actual code callouts to named functions in some particular namepace, like <code>\\p{GoodChars}</code> or <code>\\p{Class::Good_Characters}</code>.  How your language handles those might be worth looking at. </p>\n\n<h2>Sandboxing</h2>\n\n<p>In Perl, a sandboxed compartment via the <code>Safe</code> module would give control over namespace visibility. Other languages offer similar sandboxing technologies. If such devices are available, you might want to look into them, because they are specifically designed for limited execution of untrusted code.</p>\n    "},{"t":"How do you debug a regex? [closed]","l":"http://stackoverflow.com/questions/2348694/how-do-you-debug-a-regex","q":"\n\n<p>Regular expressions can become quite complex.  The lack of white space makes them difficult to read.  I can't step though a regular expression with a debugger.  So how do experts debug complex regular expressions?</p>\n    ","a":"\n<p>You buy <a href=\"http://www.regexbuddy.com/\">RegexBuddy</a> and use its built in <a href=\"http://www.regexbuddy.com/debug.html\">debug feature</a>. If you work with regexes more than twice a  year, you will make this money back in time saved in no time. RegexBuddy will also help you to create simple and complex regular expressions, and even generate the code for you in a variety of languages.</p>\n\n<p><img src=\"http://www.regexbuddy.com/screens/debug.png\" alt=\"alt text\"></p>\n\n<p>Also, according to the developer, this tool runs nearly flawlessly on <a href=\"http://www.regexbuddy.com/wine.html\">Linux when used with WINE</a>.</p>\n    "},{"t":"Is there a RegExp.escape function in Javascript?","l":"http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript","q":"\n\n<p>I just want to create a regular expression out of any possible string.</p>\n\n<pre><code>var usersString = \"Hello?!*`~World()[]\";\nvar expression = new RegExp(RegExp.escape(usersString))\nvar matches = \"Hello\".match(expression);\n</code></pre>\n\n<p>Is there a built in method for that?  If not, what do people use?  Ruby has <a href=\"http://ruby-doc.org/core/classes/Regexp.html#M001195\"><code>RegExp.escape</code></a>.  I don't feel like I'd need to write my own, there's gotta be something standard out there.  Thanks!</p>\n    ","a":"\n<p>The function linked above is insufficient. It fails to escape <code>^</code> or <code>$</code> (start and end of string), or <code>-</code>, which in a character group is used for ranges.</p>\n\n<p>Use this function:</p>\n\n<pre><code>RegExp.escape= function(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&amp;');\n};\n</code></pre>\n\n<p>While it may seem unnecessary at first glance, escaping <code>-</code> (as well as <code>^</code>) makes the function suitable for escaping characters to be inserted into a character class as well as the body of the regex.</p>\n\n<p>Escaping <code>/</code> makes the function suitable for escaping characters to be used in a JS regex literal for later eval.</p>\n\n<p>As there is no downside to escaping either of them it makes sense to escape to cover wider use cases.</p>\n\n<p>And yes, it is a disappointing failing that this is not part of standard JavaScript.</p>\n    "},{"t":"How does this giant regex work?","l":"http://stackoverflow.com/questions/3328235/how-does-this-giant-regex-work","q":"\n\n<p>I recently found the code below in one of my directories, in a file called <code>doc.php</code>. The file functions or links to a file manager. It's quite nicely done. Basically, it lists all the files in the current directory, and it lets you change directories.</p>\n\n<p>It had access to all my files (add, rename, info, delete...). I don't remember installing it. I deleted it, deleted a few suspicious and large files simple called <code>core</code> and reset all my passwords.</p>\n\n<p>Googling some of the code snippets leads to a lot of results, most of them not very informative... <a href=\"http://www.the16types.info/vbulletin/site-discussion/31050-firefox-reporting-the16types-attack-site-3.html#post663577\">However, here is a more informative result.</a></p>\n\n<p>However, I'm not sure I understand how this thing works. I have a few questions:</p>\n\n<ol>\n<li><strong>What possible ways could this have gotten on my site / directory?</strong></li>\n<li><p><strong>How can I trace back what the results of the preg_replace look like?</strong></p>\n\n<pre><code>&lt;?php \n$auth_pass = \"\"; \n$color = \"#df5\"; \n$default_action = \"FilesMan\"; \n$default_charset = \"Windows-1251\"; \npreg_replace(\"/.*/e\",\"\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28''\\x29\\x29\\x29\\x3B\",\".\"); \n?&gt;    \n</code></pre></li>\n</ol>\n\n<hr>\n\n<p>Edit:</p>\n\n<p>Here is the unobfuscated PHP code: <a href=\"http://pastie.org/1058996\">http://pastie.org/1058996</a> </p>\n    ","a":"\n<p>This is not entirely a regular expression.   The regex is <code>/.*/</code>,  which basically means \"match everything\".  The <code>/e</code> Modifier however <code>eval()</code>'s the code in the next parameter.  In fact this is a way for someone to hide code.   The following proof that this is a <strong>backdoor</strong>,  and you must <strong>remove it immediately</strong>.   Your system maybe compromised further. </p>\n\n<p>This is what the backdoor looks like when it is accessed:</p>\n\n<p><img src=\"http://img412.imageshack.us/img412/7242/backdre.gif\" alt=\"alt text\"></p>\n\n<p>the hex part of the code:</p>\n\n<p><code>\\x65\\x76\\x61\\x6C\\x28\\x67\\x7A\\x69\\x6E\\x66\\x6C\\x61\\x74\\x65\\x28\\x62\\x61\\x73\\x65\\x36\\x34\\x5F\\x64\\x65\\x63\\x6F\\x64\\x65\\x28</code></p>\n\n<p>is acutally:\n <code>eval(gzinflate(base64_decode(</code></p>\n\n<p>This is the code will print out the source code for this backdoor.  However i would not execute the resulting PHP code,  unless it is on a disposable virtual machine. </p>\n\n<pre><code>&lt;?php\nprint  gzinflate(base64_decode(\"\"));\n?&gt;\n</code></pre>\n\n<p><strong>How to lock down your server:</strong></p>\n\n<p>There are a number of ways this could have gotten on your site.  Most likely you have been hacked using <a href=\"http://inj3ct0r.com/\">Exploit Code</a> because one of your web applications is out of date.  Try updating everything,  including libraries.   Change passwords for everything,  especially FTP,  although should be using sftp or ftps.</p>\n\n<p>If you control your MySQL server make sure your web application's MySQL user account <strong>is not</strong> <code>root</code>,  and make sure you remove MySQL <code>FILE</code> privileges from the account.  You should also go a step further and do a <code>chmod 500 -R /path/to/web/root</code>  and do a <code>chown www-data -R /path/to/web/root</code>  www-data is a common user for apache,  but it might be differnt for your system try running <code>&lt;?php system(\"whoami\")?&gt;</code> to figure out the user account. </p>\n\n<p>Next run <a href=\"http://phpsec.org/projects/phpsecinfo/\">phpsecinfo</a>.  Modify your php.ini or .htaccess and remove all RED,  and try and remove as much yellow as possible. </p>\n    "},{"t":"Can regular expressions be used to match nested patterns?","l":"http://stackoverflow.com/questions/133601/can-regular-expressions-be-used-to-match-nested-patterns","q":"\n\n<p>Is it possible to write a regular expression that matches a nested pattern that occurs an unknown number of times. For example, can a regular expression match an opening and closing brace when there are an unknown number of open closing braces nested within the outer braces.</p>\n\n<p>For example:</p>\n\n<pre><code>public MyMethod()\n{\n  if (test)\n  {\n    // More { }\n  }\n\n  // More { }\n} // End\n</code></pre>\n\n<p>Should match:</p>\n\n<pre><code>{\n  if (test)\n  {\n    // More { }\n  }\n\n  // More { }\n}\n</code></pre>\n    ","a":"\n<p>No. It's that easy. A finite automaton (which is the data structure underlying a regular expression) does not have memory apart from the state it's in, and if you have arbitrarily deep nesting, you need an arbitrarily large automaton, which collides with the notion of a <em>finite</em> automaton.</p>\n\n<p>You can match nested/paired elements up to a fixed depth, where the depth is only limited by your memory, because the automaton gets very large. In practice, however, you should use a push-down automaton, i.e a parser for a context-free grammar, for instance LL (top-down) or LR (bottom-up). You have to take the worse runtime behavior into account: O(n^3) vs. O(n), with n = length(input).</p>\n\n<p>There are many parser generators avialable, for instance <a href=\"http://www.antlr.org/\">ANTLR</a> for Java. Finding an existing grammar for Java (or C) is also not difficult.<br>\nFor more background: <a href=\"http://en.wikipedia.org/wiki/Automata_theory\">Automata Theory</a> at Wikipedia</p>\n    "},{"t":"Interactive search/replace regex in Vim?","l":"http://stackoverflow.com/questions/505848/interactive-search-replace-regex-in-vim","q":"\n\n<p>I know the regex for doing a global replace,</p>\n\n<pre><code>     %s/old/new/g\n</code></pre>\n\n<p>How do you go about doing an interactive search-replace in <a href=\"http://en.wikipedia.org/wiki/Vim_%28text_editor%29\">Vim</a>?</p>\n    ","a":"\n<p>Doing this</p>\n\n<pre><code>%s/old/new/gc\n</code></pre>\n\n<p>will give you a yes/no prompt at each occurrence of 'old'.</p>\n\n<p><img src=\"http://farm4.static.flickr.com/3329/3248747349_044503153c_o.jpg\" alt=\"\"></p>\n    "},{"t":"What is the difference between Python's re.search and re.match?","l":"http://stackoverflow.com/questions/180986/what-is-the-difference-between-pythons-re-search-and-re-match","q":"\n\n<p>What is the difference between the <code>search()</code> and <code>match()</code> functions in the <a href=\"http://docs.python.org/2/library/re.html\">Python <code>re</code> module</a>?</p>\n\n<p>I've read the <a href=\"http://www.python.org/doc/2.5.2/lib/matching-searching.html\">documentation</a> (<a href=\"http://docs.python.org/2/library/re.html?highlight=matching%20searching#search-vs-match\">current documentation</a>), but I never seem to remember it.  I keep having to look it up and re-learn it.  I'm hoping that someone will answer it clearly with examples so that (perhaps) it will stick in my head.  Or at least I'll have a better place to return with my question and it will take less time to re-learn it.</p>\n    ","a":"\n<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>\n\n<p>As <a href=\"http://docs.python.org/2/library/re.html#re.match\">re.match documentation</a> says:</p>\n\n<blockquote>\n  <p>If zero or more characters at the\n  <strong>beginning of string</strong> match the regular expression pattern, return a\n  corresponding <code>MatchObject</code> instance.\n  Return <code>None</code> if the string does not\n  match the pattern; note that this is\n  different from a zero-length match.</p>\n  \n  <p>Note: If you want to locate a match\n  anywhere in string, use <code>search()</code>\n  instead.</p>\n</blockquote>\n\n<p><code>re.search</code> searches the entire string, as <a href=\"http://docs.python.org/2/library/re.html#re.search\">the documentation says</a>:</p>\n\n<blockquote>\n  <p><strong>Scan through string</strong> looking for a\n  location where the regular expression\n  pattern produces a match, and return a\n  corresponding <code>MatchObject</code> instance.\n  Return <code>None</code> if no position in the\n  string matches the pattern; note that\n  this is different from finding a\n  zero-length match at some point in the\n  string.</p>\n</blockquote>\n\n<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>\n\n<p>The documentation has a <a href=\"http://docs.python.org/2/library/re.html#search-vs-match\">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>\n\n<blockquote>\n  <p>Python offers two different primitive\n  operations based on regular\n  expressions: <code>match</code> checks for a match\n  <strong>only at the beginning</strong> of the string,\n  while <code>search</code> checks for a match\n  <strong>anywhere</strong> in the string (this is what\n  Perl does by default).</p>\n  \n  <p>Note that <code>match</code> may differ from <code>search</code>\n  even when using a regular expression\n  beginning with <code>'^'</code>: <code>'^'</code> matches only\n  at the start of the string, or in\n  <code>MULTILINE</code> mode also immediately\n  following a newline. The “<code>match</code>”\n  operation succeeds <em>only if the pattern\n  matches at the <strong>start</strong> of the string</em>\n  regardless of mode, or at the starting\n  position given by the optional <code>pos</code>\n  argument regardless of whether a\n  newline precedes it.</p>\n</blockquote>\n\n<p>Now, enough talk. Time to some example code:</p>\n\n<pre><code># example code:\nstring_with_newlines = \"\"\"something\nsomeotherthing\"\"\"\n\nimport re\n\nprint re.match('some', string_with_newlines) # matches\nprint re.match('someother', \n               string_with_newlines) # won't match\nprint re.match('^someother', string_with_newlines, \n               re.MULTILINE) # also won't match\nprint re.search('someother', \n                string_with_newlines) # finds something\nprint re.search('^someother', string_with_newlines, \n                re.MULTILINE) # also finds something\n\nm = re.compile('thing$', re.MULTILINE)\n\nprint m.match(string_with_newlines) # no match\nprint m.match(string_with_newlines, pos=4) # matches\nprint m.search(string_with_newlines, \n               re.MULTILINE) # also matches\n</code></pre>\n    "},{"t":"Regular expression to stop at first match","l":"http://stackoverflow.com/questions/2503413/regular-expression-to-stop-at-first-match","q":"\n\n<p>My regex pattern looks something like</p>\n\n<pre><code>&lt;xxxx location=\"file path/level1/level2\" xxxx some=\"xxx\"&gt;\n</code></pre>\n\n<p>I am only interested in the part in quotes assigned to location. Shouldn't it be as easy as below without the greedy switch? </p>\n\n<pre><code>/.*location=\"(.*)\".*/\n</code></pre>\n\n<p>Does not seem to work.</p>\n    ","a":"\n<p>You need to make your regular expression non-greedy, because by default, <code>\"(.*)\"</code> will match all of <code>\"file path/level1/level2\" xxx some=\"xxx\"</code>.</p>\n\n<p>Instead you can make your dot-star non-greedy, which will make it match as few characters as possible:</p>\n\n<pre><code>/location=\"(.*?)\"/\n</code></pre>\n\n<p>Adding a <code>?</code> on a quantifier (<code>?</code>, <code>*</code> or <code>+</code>) makes it non-greedy.</p>\n    "},{"t":"Using C# regular expressions to remove HTML tags","l":"http://stackoverflow.com/questions/787932/using-c-sharp-regular-expressions-to-remove-html-tags","q":"\n\n<p>How do I use C# regular expression to replace/remove all HTML tags, including the angle brackets?\nCan someone please help me with the code?</p>\n    ","a":"\n<p>As often stated before, you should not use regular expressions to process XML or HTML documents. They do not perform very well with HTML and XML documents, because there is no way to express nested structures in a general way.</p>\n\n<p>You could use the following.</p>\n\n<pre><code>String result = Regex.Replace(htmlDocument, @\"&lt;[^&gt;]*&gt;\", String.Empty);\n</code></pre>\n\n<p>This will work for most cases, but there will be cases (for example CDATA containing angle brackets) where this will not work as expected.</p>\n    "},{"t":"Using regular expressions to parse HTML: why not?","l":"http://stackoverflow.com/questions/590747/using-regular-expressions-to-parse-html-why-not","q":"\n\n<p>It seems like every question on stackoverflow where the asker is using regex to grab some information from HTML will inevitably have an \"answer\" that says not to use regex to parse HTML.</p>\n\n<p>Why not? I'm aware that there are quote-unquote \"real\" HTML parsers out there like <a href=\"http://www.crummy.com/software/BeautifulSoup/\">Beautiful Soup</a>, and I'm sure they're powerful and useful, but if you're just doing something simple, quick, or dirty, then why bother using something so complicated when a few regex statements will work just fine?</p>\n\n<p>Moreover, is there just something fundamental that I don't understand about regex that makes them a bad choice for parsing in general?</p>\n    ","a":"\n<p>Entire HTML parsing is not possible with regular expressions, since it depends on matching the opening and the closing tag which is not possible with regexps.</p>\n\n<p>Regular expressions can only match <a href=\"http://en.wikipedia.org/wiki/Regular_grammar\">regular languages</a> but HTML is a <a href=\"http://en.wikipedia.org/wiki/Context-free_grammar\">context-free language</a>. The only thing you can do with regexps on HTML is heuristics but that will not work on every condition. It should be possible to present a HTML file that will be matched wrongly by any regular expression.</p>\n    "},{"t":"Regex - how to match everything except a particular pattern","l":"http://stackoverflow.com/questions/611883/regex-how-to-match-everything-except-a-particular-pattern","q":"\n\n<p>How do I write a regex to match any string that doesn't meet a particular pattern? I'm faced with a situation where I have to match an (A and ~B) pattern.</p>\n    ","a":"\n<p>You could use a look-ahead assertion:</p>\n\n<pre><code>(?!999)\\d{3}\n</code></pre>\n\n<p>This example matches three digits other than <code>999</code>.</p>\n\n<p></p><hr><p></p>\n\n<p>But if you happen not to have a regular expression implementation with this feature (see <a href=\"http://www.regular-expressions.info/refflavors.html\">Comparison of Regular Expression Flavors</a>), you probably have to build a regular expression with the basic features on your own.</p>\n\n<p>A compatible regular expression with basic syntax only would be:</p>\n\n<pre><code>[0-8]\\d\\d|\\d[0-8]\\d|\\d\\d[0-8]\n</code></pre>\n\n<p>This does also match any three digits sequence that is not <code>999</code>.</p>\n    "},{"t":"Javascript REGEX: How to get youtube video id from URL?","l":"http://stackoverflow.com/questions/3452546/javascript-regex-how-to-get-youtube-video-id-from-url","q":"\n\n<p>I want to get the <code>v=id</code> from youtube's <code>URL</code> with javascript(no jquery, pure javascript);</p>\n\n<p><strong>Example Youtube URL formats:</strong></p>\n\n<hr>\n\n<p><code>http://www.youtube.com/watch?v=u8nQa1cJyX8&amp;a=GxdCwVVULXctT2lYDEPllDR0LRTutYfW</code></p>\n\n<p><code>http://www.youtube.com/watch?v=u8nQa1cJyX8</code></p>\n\n<p><em>or any other youtube format what contains a <code>video id</code> in the <code>url</code></em></p>\n\n<p><strong>Result from these formats</strong></p>\n\n<hr>\n\n<p><code>u8nQa1cJyX8</code></p>\n    ","a":"\n<p>You don't need to use a regular expression for this.</p>\n\n<pre><code>var video_id = window.location.search.split('v=')[1];\nvar ampersandPosition = video_id.indexOf('&amp;');\nif(ampersandPosition != -1) {\n  video_id = video_id.substring(0, ampersandPosition);\n}\n</code></pre>\n    "},{"t":"How can I add a string to the end of each line in Vim?","l":"http://stackoverflow.com/questions/594448/how-can-i-add-a-string-to-the-end-of-each-line-in-vim","q":"\n\n<p>I want to add <code>*</code> to the end of each line in Vim.</p>\n\n<p>I tried the code unsuccessfully</p>\n\n<pre><code>:%s/\\n/*\\n/g\n</code></pre>\n    ","a":"\n<p><code>:%s/$/\\*/g</code> </p>\n\n<p>should work. So should <code>:%s/$/*/g</code> as <a href=\"http://stackoverflow.com/users/51577/mrwiggles\">MrWiggles</a> points out correctly.</p>\n    "},{"t":"Why does String.split need pipe delimiter to be escaped?","l":"http://stackoverflow.com/questions/9808689/why-does-string-split-need-pipe-delimiter-to-be-escaped","q":"\n\n<p>I am trying to parse a file that has each line with pipe delimited values.\nIt did not work correctly when i did not escape the pipe delimiter in split method, it worked correctly after i escaped the pipe as below.</p>\n\n<pre><code>private ArrayList&lt;String&gt; parseLine(String line) {\n    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\n    String[] list_str = line.split(\"\\\\|\"); // note the escape \"\\\\\" here\n    System.out.println(list_str.length);\n    System.out.println(line);\n    for(String s:list_str) {\n        list.add(s);\n        System.out.print(s+ \"|\");\n    }\n    return list;\n}\n</code></pre>\n\n<p>Can someone please explain why the pipe character needs to be escaped for the <code>split()</code> method?</p>\n    ","a":"\n<p><code>String.split</code> expects a regular expression argument.  An unescaped <code>|</code> is parsed as a regex meaning \"empty string or empty string,\" which isn't what you mean.</p>\n    "},{"t":"Is there a PHP function that can escape regex patterns before they are applied?","l":"http://stackoverflow.com/questions/1531456/is-there-a-php-function-that-can-escape-regex-patterns-before-they-are-applied","q":"\n\n<p>Is there a PHP function that can <code>escape regex patterns</code> before they are applied?</p>\n\n<p>I am looking along the lines of the C# <code>Regex.Escape()</code> function.</p>\n    ","a":"\n<p><a href=\"http://php.net/preg_quote\">preg_quote()</a> is what you are looking for:</p>\n\n<blockquote>\n  <p>preg_quote() takes str  and puts a\n  backslash in front of every character\n  that is part of the regular expression\n  syntax. This is useful if you have a\n  run-time string that you need to match\n  in some text and the string may\n  contain special regex characters.</p>\n  \n  <p>The special regular expression\n  characters are: . \\ + * ? [ ^ ] $ ( )\n  { } = ! &lt; &gt; | : -</p>\n</blockquote>\n    "},{"t":"Regular expression pattern not matching anywhere in string","l":"http://stackoverflow.com/questions/4231382/regular-expression-pattern-not-matching-anywhere-in-string","q":"\n\n<p>I am trying to match <code>&lt;input&gt;</code> type “hidden” fields using this pattern:</p>\n\n<pre><code>/&lt;input type=\"hidden\" name=\"([^\"]*?)\" value=\"([^\"]*?)\" /&gt;/\n</code></pre>\n\n<p>This is sample form data:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"SaveRequired\" value=\"False\" /&gt;&lt;input type=\"hidden\" name=\"__VIEWSTATE1\" value=\"1H4sIAAtzrkX7QfL5VEGj6nGi+nP\" /&gt;&lt;input type=\"hidden\" name=\"__VIEWSTATE2\" value=\"0351118MK\" /&gt;&lt;input type=\"hidden\" name=\"__VIEWSTATE3\" value=\"ZVVV91yjY\" /&gt;&lt;input type=\"hidden\" name=\"__VIEWSTATE0\" value=\"3\" /&gt;&lt;input type=\"hidden\" name=\"__VIEWSTATE\" value=\"\" /&gt;&lt;input type=\"hidden\" name=\"__VIEWSTATE\" value=\"\" /&gt;\n</code></pre>\n\n<p>But I am not sure that the <code>type</code>, <code>name</code>, and <code>value</code> attributes will always appear in the same order. If the <code>type</code> attribute comes last, the match will fail because in my pattern it’s at the start.</p>\n\n<p><strong>Question:</strong><br>\nHow can I change my pattern so it will match regardless of the positions of the attributes in the <code>&lt;input&gt;</code> tag?</p>\n\n<p><strong>P.S.:</strong> By the way I am using the <em>Adobe Air</em> based <a href=\"http://gskinner.com/RegExr/desktop/\"><em>RegEx Desktop Tool</em></a> for testing regular expressions.</p>\n    ","a":"\n<p>Contrary to all the answers here, for what you're trying to do regex is a perfectly valid solution. This is because you are NOT trying to match balanced tags-- THAT would be impossible with regex! But you are only matching what's in one tag, and that's perfectly regular.</p>\n\n<p>Here's the problem, though. You can't do it with just one regex... you need to do one match to capture an <code>&lt;input&gt;</code> tag, then do further processing on that. Note that this will only work if none of the attribute values have a <code>&gt;</code> character in them, so it's not perfect, but it should suffice for sane inputs.</p>\n\n<p>Here's some Perl (pseudo)code to show you what I mean:</p>\n\n<pre><code>my $html = readLargeInputFile();\n\nmy @input_tags = $html =~ m/\n    (\n        &lt;input                      # Starts with \"&lt;input\"\n        (?=[^&gt;]*?type=\"hidden\")     # Use lookahead to make sure that type=\"hidden\"\n        [^&gt;]+                       # Grab the rest of the tag...\n        \\/&gt;                         # ...except for the /&gt;, which is grabbed here\n    )/xgm;\n\n# Now each member of @input_tags is something like &lt;input type=\"hidden\" name=\"SaveRequired\" value=\"False\" /&gt;\n\nforeach my $input_tag (@input_tags)\n{\n  my $hash_ref = {};\n  # Now extract each of the fields one at a time.\n\n  ($hash_ref-&gt;{\"name\"}) = $input_tag =~ /name=\"([^\"]*)\"/;\n  ($hash_ref-&gt;{\"value\"}) = $input_tag =~ /value=\"([^\"]*)\"/;\n\n  # Put $hash_ref in a list or something, or otherwise process it\n}\n</code></pre>\n\n<p>The basic principle here is, don't try to do too much with one regular expression. As you noticed, regular expressions enforce a certain amount of order. So what you need to do instead is to first match the CONTEXT of what you're trying to extract, then do submatching on the data you want.</p>\n\n<p><b>EDIT:</b> However, I will agree that in general, using an HTML parser is probably easier and better and you really should consider redesigning your code or re-examining your objectives. :-) But I had to post this answer as a counter to the knee-jerk reaction that parsing any subset of HTML is impossible: HTML and XML are both irregular when you consider the entire specification, but the specification of a tag is decently regular, certainly within the power of PCRE.</p>\n    "},{"t":"jQuery regex validation of e-mail address","l":"http://stackoverflow.com/questions/2855865/jquery-regex-validation-of-e-mail-address","q":"\n\n<p>I'm not too sure about how to do this.  I need/want to validate email addresses by regex using something like this:</p>\n\n<pre><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|edu|gov|mil|biz|info|mobi|name|aero|asia|jobs|museum)\n</code></pre>\n\n<p>Not I need to run this in a jQuery function like this:  Where does the validation go and what is the expression? - please</p>\n\n<pre><code> $j(\"#fld_emailaddress\").live('change',function() { \nvar emailaddress = $j(\"#fld_emailaddress\").val();\n\n// validation here? \n\nif(emailaddress){}\n\n// end validation\n\n$j.ajax({  \n        type: \"POST\",  \n         url: \"../ff-admin/ff-register/ff-user-check.php\",  \n        data: \"fld_emailaddress=\"+ emailaddress,  \n        success: function(msg)\n        { \n            if(msg == 'OK') { \n            $j(\"#fld_username\").attr('disabled',false); \n            $j(\"#fld_password\").attr('disabled',false); \n            $j(\"#cmd_register_submit\").attr('disabled',false); \n            $j(\"#fld_emailaddress\").removeClass('object_error'); // if necessary\n            $j(\"#fld_emailaddress\").addClass(\"object_ok\");\n            $j('#email_ac').html('&amp;nbsp;&lt;img src=\"img/cool.png\" align=\"absmiddle\"&gt; &lt;font color=\"Green\"&gt; Your email &lt;strong&gt;'+ emailaddress+'&lt;/strong&gt; is OK.&lt;/font&gt;  ');\n            } else {  \n            $j(\"#fld_username\").attr('disabled',true); \n            $j(\"#fld_password\").attr('disabled',true); \n            $j(\"#cmd_register_submit\").attr('disabled',true);  \n            $j(\"#fld_emailaddress\").removeClass('object_ok'); // if necessary\n            $j(\"#fld_emailaddress\").addClass(\"object_error\");\n            $j('#email_ac').html(msg);\n            }\n        }\n     });\n});\n</code></pre>\n    ","a":"\n<h1>UPDATES</h1>\n\n<ul>\n<li>using new regex </li>\n<li>added support for <a href=\"http://en.wikipedia.org/wiki/Email_address#Address_tags\" rel=\"nofollow\">Address tags</a> (+ sign)</li>\n</ul>\n\n<hr>\n\n<pre><code>function isValidEmailAddress(emailAddress) {\n    var pattern = new RegExp(/^((([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i);\n    return pattern.test(emailAddress);\n};\n</code></pre>\n\n<hr>\n\n<pre><code>if( !isValidEmailAddress( emailaddress ) ) { /* do stuff here */ }\n</code></pre>\n\n<ul>\n<li><strong>NOTE:</strong> <a href=\"http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses\">keep in mind that no 100% regex</a> email check exists!</li>\n</ul>\n    "},{"t":"How to use '-prune' option of 'find' in sh?","l":"http://stackoverflow.com/questions/1489277/how-to-use-prune-option-of-find-in-sh","q":"\n\n<p>I don't quite understand the example given from the 'man find', can anyone give me some examples and explanations? Can I combine regular expression in it? </p>\n\n<p></p><hr><p></p>\n\n<p>the more detailed question is like this: write a shell script, changeall, which has an interface like \"changeall [-r|-R] \"string1\" \"string2\". It will find all files with an suffix of .h, .C, .cc, or .cpp and change all occurrences of \"string1\" to \"string2\". -r is option for staying in current dir only or including subdir's. NOTE: 1) for non-recursive case, 'ls' is NOT allowed, we could only use 'find' and 'sed'. 2) I tried 'find -depth' but it was NOT supported. That's why I was wondering if '-prune' could help, but didn't understand the example from 'man find'. </p>\n\n<p></p><hr><p></p>\n\n<p>EDIT2: I was doing assignment, I didn't ask question in great details because I would like to finish it myself. Since I already done it and hand it in, now I can state the whole question. Also, I managed to finish the assignment without using -prune, but would like to learn it anyway. </p>\n    ","a":"\n<p>The thing I'd found confusing about about <code>-prune</code> is that it's an action (like <code>-print</code>), not a test (like <code>-name</code>). It alters the \"to-do\" list, <em>but always returns true</em>.</p>\n\n<p>The general pattern for using <code>-prune</code> is this:</p>\n\n<pre><code>find [path] [conditions to prune] -prune -o \\\n                                   [your usual conditions] [actions to perform]\n</code></pre>\n\n<p>You pretty much always want the the <code>-o</code> immediately after <code>-prune</code>, because that first part of the test (up to including <code>-prune</code>) will return <em>false</em> for the stuff you actually want (ie: the stuff you don't want to prune out).</p>\n\n<p>Here's an example:</p>\n\n<pre><code>find . -name .snapshot -prune -o -name '*.foo' -print\n</code></pre>\n\n<p>This will find the \"*.foo\" files that aren't under \".snapshot\" directories. In this example, <code>-name .snapshot</code> is the \"tests for stuff you want to prune\", and <code>-name '*.foo' -print</code> is the \"stuff you'd normally put after the path\".</p>\n\n<p><strong>Important notes</strong>:</p>\n\n<ol>\n<li><p>If all you want to do is print the results you might be used to leaving out the <code>-print</code> action. You generally <em>don't</em> want to do that when using <code>-prune</code>.</p>\n\n<p>The default behavior of find is to \"and\" the <em>entire</em> expression with the <code>-print</code> action if there are no actions other than <code>-prune</code> (ironically) at the end. That means that writing this: </p>\n\n<pre><code>find . -name .snapshot -prune -o -name '*.foo'              # DON'T DO THIS\n</code></pre>\n\n<p>is equivalent to writing this:</p>\n\n<pre><code>find . \\( -name .snapshot -prune -o -name '*.foo' \\) -print # DON'T DO THIS\n</code></pre>\n\n<p>which means that it'll also print out the name of the directory you're pruning, which usually isn't what you want. Instead it's better to explicitly specify the <code>-print</code> action if that's what you want:</p>\n\n<pre><code>find . -name .snapshot -prune -o -name '*.foo' -print       # DO THIS\n</code></pre></li>\n<li><p>If your \"usual condition\" happens to match files that also match your prune condition, those files will <em>not</em> be included in the output. The way to fix this is to add a <code>-type d</code> predicate to your prune condition.</p>\n\n<p>For example, suppose we wanted to prune out any directory that started with <code>.git</code> (this is admittedly somewhat contrived -- normally you only need to remove thing named <em>exactly</em> <code>.git</code>), but other than that wanted to see all files, including files like <code>.gitignore</code>. You might try this:</p>\n\n<pre><code>find . -name '.git*' -prune -o -type f -print               # DON'T DO THIS\n</code></pre>\n\n<p>This would <em>not</em> include <code>.gitignore</code> in the output. Here's the fixed version: </p>\n\n<pre><code>find . -type d -name '.git*' -prune -o -type f -print       # DO THIS\n</code></pre></li>\n</ol>\n\n<p>Extra tip: if you're using the GNU version of <code>find</code>, the texinfo page for <code>find</code> has a more detailed explanation than its manpage (as is true for most GNU utilities).</p>\n    "},{"t":"Java: splitting a comma-separated string but ignoring commas in quotes","l":"http://stackoverflow.com/questions/1757065/java-splitting-a-comma-separated-string-but-ignoring-commas-in-quotes","q":"\n\n<p>I have a string vaguely like this:</p>\n\n<pre><code>foo,bar,c;qual=\"baz,blurb\",d;junk=\"quux,syzygy\"\n</code></pre>\n\n<p>that I want to split by commas -- but I need to ignore commas in quotes. How can I do this? Seems like a regexp approach fails; I suppose I can manually scan and enter a different mode when I see a quote, but it would be nice to use preexisting libraries. (<em>edit</em>: I guess I meant libraries that are already part of the JDK or already part of a commonly-used libraries like Apache Commons.)</p>\n\n<p>the above string should split into:</p>\n\n<pre><code>foo\nbar\nc;qual=\"baz,blurb\"\nd;junk=\"quux,syzygy\"\n</code></pre>\n\n<p><strong>note:</strong> this is NOT a CSV file, it's a single string contained in a file with a larger overall structure</p>\n    ","a":"\n<p>Try:</p>\n\n<pre><code>public class Main { \n    public static void main(String[] args) {\n        String line = \"foo,bar,c;qual=\\\"baz,blurb\\\",d;junk=\\\"quux,syzygy\\\"\";\n        String[] tokens = line.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);\n        for(String t : tokens) {\n            System.out.println(\"&gt; \"+t);\n        }\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&gt; foo\n&gt; bar\n&gt; c;qual=\"baz,blurb\"\n&gt; d;junk=\"quux,syzygy\"\n</code></pre>\n\n<p>In other words: <em>split on the comma only if that comma has zero, or an even number of quotes ahead of it</em>.</p>\n\n<p>Or, a bit friendlier for the eyes:</p>\n\n<pre><code>public class Main { \n    public static void main(String[] args) {\n        String line = \"foo,bar,c;qual=\\\"baz,blurb\\\",d;junk=\\\"quux,syzygy\\\"\";\n\n        String otherThanQuote = \" [^\\\"] \";\n        String quotedString = String.format(\" \\\" %s* \\\" \", otherThanQuote);\n        String regex = String.format(\"(?x) \"+ // enable comments, ignore white spaces\n                \",                         \"+ // match a comma\n                \"(?=                       \"+ // start positive look ahead\n                \"  (                       \"+ //   start group 1\n                \"    %s*                   \"+ //     match 'otherThanQuote' zero or more times\n                \"    %s                    \"+ //     match 'quotedString'\n                \"  )*                      \"+ //   end group 1 and repeat it zero or more times\n                \"  %s*                     \"+ //   match 'otherThanQuote'\n                \"  $                       \"+ // match the end of the string\n                \")                         \", // stop positive look ahead\n                otherThanQuote, quotedString, otherThanQuote);\n\n        String[] tokens = line.split(regex, -1);\n        for(String t : tokens) {\n            System.out.println(\"&gt; \"+t);\n        }\n    }\n}\n</code></pre>\n\n<p>which produces the same as the first example.</p>\n    "},{"t":"Find all occurrences of a substring in Python","l":"http://stackoverflow.com/questions/4664850/find-all-occurrences-of-a-substring-in-python","q":"\n\n<p>Python has <code>string.find()</code> and <code>string.rfind()</code> to get the index of a substring in string.</p>\n\n<p>I wonder, maybe there is something like <code>string.find_all()</code> which can return all founded indexes (not only first from beginning or first from end)?</p>\n\n<p>For example:</p>\n\n<pre><code>string = \"test test test test\"\n\nprint string.find('test') # 0\nprint string.rfind('test') # 15\n\n#that's the goal\nprint string.find_all('test') # [0,5,10,15]\n</code></pre>\n    ","a":"\n<p>There is no simple built-in string function that does what you're looking for, but you could use the more powerful <a href=\"http://www.regular-expressions.info/\">regular expressions</a>:</p>\n\n<pre><code>&gt;&gt;&gt; [m.start() for m in re.finditer('test', 'test test test test')]\n[0, 5, 10, 15]\n</code></pre>\n\n<p>If you want to find overlapping matches, <a href=\"http://www.regular-expressions.info/lookaround.html\">lookahead</a> will do that:</p>\n\n<pre><code>&gt;&gt;&gt; [m.start() for m in re.finditer('(?=tt)', 'ttt')]\n[0, 1]\n</code></pre>\n\n<p>If you want a reverse find-all without overlaps, you can combine positive and negative lookahead into an expression like this:</p>\n\n<pre><code>&gt;&gt;&gt; search = 'tt'\n&gt;&gt;&gt; [m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]\n[1]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.finditer\"><code>re.finditer</code></a> returns a <a href=\"http://wiki.python.org/moin/Generators\">generator</a>, so you could change the <code>[]</code> in the above to <code>()</code> to get a generator instead of a list which will be more efficient if you're only iterating through the results once.</p>\n    "},{"t":"How to extract base URL from a string in JavaScript?","l":"http://stackoverflow.com/questions/1420881/how-to-extract-base-url-from-a-string-in-javascript","q":"\n\n<p>I'm trying to find a relatively easy and reliable method to extract the base URL from a string variable using JavaScript (or jQuery).</p>\n\n<p>For example, given something like:</p>\n\n<pre>http://www.sitename.com/article/2009/09/14/this-is-an-article/</pre>\n\n<p>I'd like to get:</p>\n\n<pre>http://www.sitename.com/</pre>\n\n<p>Is a regular expression the best bet? If so, what statement could I use to assign the base URL extracted from a given string to a new variable?</p>\n\n<p>I've done some searching on this, but everything I find in the JavaScript world seems to revolve around gathering this information from the actual document URL using <em>location.host</em> or similar.</p>\n    ","a":"\n<p>Edit: Some complain that it doesn't take into account protocol. So I decided to upgrade the code, since it is marked as answer. For those who like one-line-code... well sorry this why we use code minimizers, code should be human readable and this way is better... in my opinion.</p>\n\n<pre><code>pathArray = location.href.split( '/' );\nprotocol = pathArray[0];\nhost = pathArray[2];\nurl = protocol + '//' + host;\n</code></pre>\n\n<p>or use @David Czihak solution (from bellow):</p>\n\n<pre><code>if (!location.origin)\n   location.origin = location.protocol + \"//\" + location.host;\n</code></pre>\n    "},{"t":"Add spaces before Capital Letters","l":"http://stackoverflow.com/questions/272633/add-spaces-before-capital-letters","q":"\n\n<p>Given the string \"ThisStringHasNoSpacesButItDoesHaveCapitals\" what is the best way to add spaces before the capital letters. So the end string would be \"This String Has No Spaces But It Does Have Capitals\"</p>\n\n<p>Here is my attempt with a RegEx</p>\n\n<pre><code>System.Text.RegularExpressions.Regex.Replace(value, \"[A-Z]\", \" $0\")\n</code></pre>\n    ","a":"\n<p>The regexes will work fine (I even voted up Martin Browns answer), but they are expensive (and personally I find any pattern longer than a couple of characters prohibitively obtuse)</p>\n\n<p>This function </p>\n\n<pre><code>string AddSpacesToSentence(string text, bool preserveAcronyms)\n{\n        if (string.IsNullOrWhiteSpace(text))\n           return string.Empty;\n        StringBuilder newText = new StringBuilder(text.Length * 2);\n        newText.Append(text[0]);\n        for (int i = 1; i &lt; text.Length; i++)\n        {\n            if (char.IsUpper(text[i]))\n                if ((text[i - 1] != ' ' &amp;&amp; !char.IsUpper(text[i - 1])) ||\n                    (preserveAcronyms &amp;&amp; char.IsUpper(text[i - 1]) &amp;&amp; \n                     i &lt; text.Length - 1 &amp;&amp; !char.IsUpper(text[i + 1])))\n                    newText.Append(' ');\n            newText.Append(text[i]);\n        }\n        return newText.ToString();\n}\n</code></pre>\n\n<p>Will do it 100,000 times in 2,968,750 ticks, the regex will take 25,000,000 ticks (and thats with the regex compiled).</p>\n\n<p>It's better, for a given value of better (i.e. faster) however it's more code to maintain. \"Better\" is often compromise of competing requirements.</p>\n\n<p>Hope this helps :)</p>\n\n<p><strong>Update</strong><br>\nIt's a good long while since I looked at this, and I just realised the timings haven't been updated since the code changed (it only changed a little).</p>\n\n<p>On a string with 'Abbbbbbbbb' repeated 100 times (i.e. 1,000 bytes), a run of 100,000 conversions takes the hand coded function 4,517,177 ticks, and the Regex below takes 59,435,719 making the Hand coded function run in 7.6% of the time it takes the Regex.</p>\n\n<p><strong>Update 2</strong>\nWill it take Acronyms into account? It will now!\nThe logic of the if statment is fairly obscure, as you can see expanding it to this ...</p>\n\n<pre><code>if (char.IsUpper(text[i]))\n    if (char.IsUpper(text[i - 1]))\n        if (preserveAcronyms &amp;&amp; i &lt; text.Length - 1 &amp;&amp; !char.IsUpper(text[i + 1]))\n            newText.Append(' ');\n        else ;\n    else if (text[i - 1] != ' ')\n        newText.Append(' ');\n</code></pre>\n\n<p>... doesn't help at all!</p>\n\n<p>Here's the original <em>simple</em> method that doesn't worry about Acronyms</p>\n\n<pre><code>string AddSpacesToSentence(string text)\n{\n        if (string.IsNullOrWhiteSpace(text))\n           return \"\";\n        StringBuilder newText = new StringBuilder(text.Length * 2);\n        newText.Append(text[0]);\n        for (int i = 1; i &lt; text.Length; i++)\n        {\n            if (char.IsUpper(text[i]) &amp;&amp; text[i - 1] != ' ')\n                newText.Append(' ');\n            newText.Append(text[i]);\n        }\n        return newText.ToString();\n}\n</code></pre>\n    "},{"t":"Converting user input string to regular expression","l":"http://stackoverflow.com/questions/874709/converting-user-input-string-to-regular-expression","q":"\n\n<p>I am designing a regular expression tester in HTML and JavaScript. The user will enter a regex, a string, and choose the function they want to test with (e.g. search, match, replace, etc.) via radio button and the program will display the results when that function is run with the specified arguments. Naturally there will be extra text boxes for the extra arguments to replace and such. </p>\n\n<p>My problem is getting the string from the user and turning it into a regular expression. If I say that they don't need to have <code>//</code>'s around the regex they enter, then they can't set flags, like <code>g</code> and <code>i</code>. So they have to have the <code>//</code>'s around the expression, but how can I convert that string to a regex? It can't be a literal since its a string, and I can't pass it to the RegExp constructor since its not a string without the <code>//</code>'s. Is there any other way to make a user input string into a regex? Will I have to parse the string and flags of the regex with the <code>//</code>'s then construct it another way? Should I have them enter a string, and then enter the flags separately? </p>\n    ","a":"\n<p>Use the <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/RegExp\">RegExp object constructor</a> to create a regular expression from a string:</p>\n\n<pre><code>var re = new RegExp(\"a|b\", \"i\");\n// same as\nvar re = /a|b/i;\n</code></pre>\n    "},{"t":"How can I exclude one word with grep?","l":"http://stackoverflow.com/questions/4538253/how-can-i-exclude-one-word-with-grep","q":"\n\n<p>I need something like:</p>\n\n<pre><code>grep ^\"unwanted_word\"XXXXXXXX\n</code></pre>\n    ","a":"\n<p>You can also do it using <code>-v</code> option of grep as:</p>\n\n<pre><code>grep -v \"unwanted_word\" file | grep XXXXXXXX\n</code></pre>\n\n<p><code>grep -v \"unwanted_word\" file</code> will filter the lines that have the <code>unwanted_word</code> and <code>grep XXXXXXXX</code> will list only lines with pattern <code>XXXXXXXX</code>.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>From your comment it looks like you want to list all lines without the <code>unwanted_word</code>. In that case all you need is:</p>\n\n<pre><code>grep -v 'unwanted_word' file\n</code></pre>\n    "},{"t":"How to extract a substring using regex","l":"http://stackoverflow.com/questions/4662215/how-to-extract-a-substring-using-regex","q":"\n\n<p>I have a string that has two single quotes in it, the <code>'</code> character. In between the single quotes is the data I want.</p>\n\n<p>How can I write a regex to extract \"the data i want\" from the following text?</p>\n\n<pre><code>mydata = \"some string with 'the data i want' inside\";\n</code></pre>\n    ","a":"\n<p>Assuming you want the part between single quotes, use this regular expression with a <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html\"><code>Matcher</code></a>:</p>\n\n<pre><code>\"'(.*?)'\"\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>String mydata = \"some string with 'the data i want' inside\";\nPattern pattern = Pattern.compile(\"'(.*?)'\");\nMatcher matcher = pattern.matcher(mydata);\nif (matcher.find())\n{\n    System.out.println(matcher.group(1));\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre>the data i want\n</pre>\n    "},{"t":"Match whitespace but not newlines (Perl)","l":"http://stackoverflow.com/questions/3469080/match-whitespace-but-not-newlines-perl","q":"\n\n<p>I sometimes want to match whitespace but not newline.  So far I've been resorting to <code>[ \\t]</code> .  Is there a less awkward way?</p>\n    ","a":"\n<p>I am shocked that so many unnecessarily elaborate answers have been written. By far the cleanest way, which will work on version 10 and later of Perl 5, is to use the <em>horizontal whitespace</em> character class <code>\\h</code>. This will match just horizontal tab and space from the ASCII set, or any of these Unicode characters.</p>\n\n<pre><code>CHARACTER TABULATION\nSPACE\nNO-BREAK SPACE\nOGHAM SPACE MARK\nMONGOLIAN VOWEL SEPARATOR\nEN QUAD\nEM QUAD\nEN SPACE\nEM SPACE\nTHREE-PER-EM SPACE\nFOUR-PER-EM SPACE\nSIX-PER-EM SPACE\nFIGURE SPACE\nPUNCTUATION SPACE\nTHIN SPACE\nHAIR SPACE\nNARROW NO-BREAK SPACE\nMEDIUM MATHEMATICAL SPACE\nIDEOGRAPHIC SPACE\n</code></pre>\n    "},{"t":"How do I match any character across multiple lines in a regular expression?","l":"http://stackoverflow.com/questions/159118/how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression","q":"\n\n<p>For example, this regex</p>\n\n<pre><code>(.*)&lt;FooBar&gt;\n</code></pre>\n\n<p>will match:</p>\n\n<pre><code>abcde&lt;FooBar&gt;\n</code></pre>\n\n<p>But how do I get it to match across multiple lines?</p>\n\n<pre><code>abcde\nfghij&lt;FooBar&gt;\n</code></pre>\n    ","a":"\n<p>It depends on the language, but there should be a modifier that you can add to the regex pattern. In PHP it is:</p>\n\n<pre><code>/(.*)&lt;FooBar&gt;/s\n</code></pre>\n\n<p>The <strong>s</strong> at the end causes the dot to match <em>all</em> characters including newlines.</p>\n    "},{"t":"awk: access captured group from line pattern","l":"http://stackoverflow.com/questions/2957684/awk-access-captured-group-from-line-pattern","q":"\n\n<p>If I have an awk command</p>\n\n<pre><code>pattern { ... }\n</code></pre>\n\n<p>and pattern uses a capturing group, how can I access the string so captured in the block?</p>\n    ","a":"\n<p>That was a stroll down memory lane...</p>\n\n<p>I replaced awk by perl a long time ago.</p>\n\n<p>Apparently the AWK regular expression engine does not capture its groups.</p>\n\n<p>you might consider using something like :</p>\n\n<pre><code>perl -n -e'/test(\\d+)/ &amp;&amp; print $1'\n</code></pre>\n\n<p>the -n flag causes perl to loop over every line like awk does.</p>\n    "},{"t":"Remove new lines from string","l":"http://stackoverflow.com/questions/3760816/remove-new-lines-from-string","q":"\n\n<pre><code>$string = \"\nput returns between paragraphs\n\nfor linebreak add 2 spaces at end\n\n\";\n</code></pre>\n\n<p>Want to remove all new lines from string.</p>\n\n<p>I've this regex, it can catch all of them, the problem is I don't know with which function should I use it.</p>\n\n<pre><code>/\\r\\n|\\r|\\n/\n</code></pre>\n\n<p><code>$string</code> should become:</p>\n\n<pre><code>$string = \"put returns between paragraphs for linebreak add 2 spaces at end \";\n</code></pre>\n    ","a":"\n<p>You have to be cautious of double line breaks, which would cause double spaces. Use this really efficient regular expression:</p>\n\n<pre><code>$string = trim(preg_replace('/\\s\\s+/', ' ', $string));\n</code></pre>\n\n<p>Multiple spaces and newlines are replaced with a single space.</p>\n\n<p><strong>Edit:</strong> As others have pointed out, this solution has issues matching single newlines in between words. This is not present in the example, but one can easily see how that situation could occur. An alternative is to do the following:</p>\n\n<pre><code>$string = trim(preg_replace('/\\s+/', ' ', $string));\n</code></pre>\n    "},{"t":"REGEX to replace multiple Spaces with a single space","l":"http://stackoverflow.com/questions/1981349/regex-to-replace-multiple-spaces-with-a-single-space","q":"\n\n<p>Given a string like: </p>\n\n<pre>\"The dog      has a long   tail, and it     is RED!\"</pre>\n\n<p>What kind of JQUERY, JavaScript magic can be used to keep spaces to only 1 max?</p>\n\n<p>Goal: </p>\n\n<pre>\"The dog has a long tail, and it is RED!\"</pre>\n\n<p>thanks</p>\n    ","a":"\n<p>Given that you also want to cover tabs, newlines, etc, just replace <code>\\s\\s+</code> with <code>' '</code>: </p>\n\n<pre><code>string = string.replace(/\\s\\s+/g, ' ');\n</code></pre>\n\n<p>If you really want to cover only spaces (and thus not tabs, newlines, etc), do so:</p>\n\n<pre><code>string = string.replace(/  +/g, ' ');\n</code></pre>\n    "},{"t":"c# regex email validation","l":"http://stackoverflow.com/questions/5342375/c-sharp-regex-email-validation","q":"\n\n<p>I use this</p>\n\n<pre><code>@\"^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$\"\n</code></pre>\n\n<p>regexp to validate the email</p>\n\n<p><code>([\\w\\.\\-]+)</code> - this is for the first-level domain (many letters and numbers, also point and hyphen)<br><br>\n<code>([\\w\\-]+)</code> - this is for second-level domain<br><br>\n<code>((\\.(\\w){2,3})+)</code> - and this is for other level domains(from 3 to infinity) which includes a point and 2 or 3 literals<br></p>\n\n<p>what's wrong with this regex?</p>\n\n<p>EDIT:it doesn't match the \"something@someth.ing\" email</p>\n    ","a":"\n<p>TLD's like <a href=\"http://en.wikipedia.org/wiki/.museum\">.museum</a> aren't matched this way, and there are a few other long TLD's. Also, you can validate email addresses using the <a href=\"http://msdn.microsoft.com/en-us/library/system.net.mail.mailaddress.aspx\">MailAddress class</a> as Microsoft explains <a href=\"http://msdn.microsoft.com/en-us/library/01escwtf.aspx\">here</a> in a note:</p>\n\n<blockquote>\n  <p>Instead of using a regular expression to validate an email address,\n  you can use the System.Net.Mail.MailAddress class. To determine\n  whether an email address is valid, pass the email address to the\n  MailAddress.MailAddress(String) class constructor.</p>\n</blockquote>\n\n<pre><code>public bool IsValid(string emailaddress)\n{\n    try\n    {\n        MailAddress m = new MailAddress(emailaddress);\n\n        return true;\n    }\n    catch (FormatException)\n    {\n        return false;\n    }\n}\n</code></pre>\n\n<p>This saves you a lot af headaches because you don't have to write (or try to understand someone else's) regex.</p>\n    "},{"t":"Trim spaces from start and end of string","l":"http://stackoverflow.com/questions/3000649/trim-spaces-from-start-and-end-of-string","q":"\n\n<p>I am trying to find a way to trim spaces from the start and end of the title string. I was using this, but it doesn't seem to be working:</p>\n\n<pre><code>title = title.replace(/(^[\\s]+|[\\s]+$)/g, '');\n</code></pre>\n\n<p>Any ideas?</p>\n    ","a":"\n<p>Note: As of 2015, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim#Browser_compatibility\" rel=\"nofollow\">all major browsers (including IE&gt;=9) support String.prototype.trim()</a>. This means that for most use cases simply doing <code>str.trim()</code> is the best way of achieving what the question asks. </p>\n\n<hr>\n\n<p>Steven Levithan analyzed many different implementation of <code>trim</code> in Javascript in terms of performance.</p>\n\n<p>His recommendation is:</p>\n\n<pre><code>function trim1 (str) {\n    return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n}\n</code></pre>\n\n<p>for \"general-purpose implementation which is fast cross-browser\", and</p>\n\n<pre><code>function trim11 (str) {\n    str = str.replace(/^\\s+/, '');\n    for (var i = str.length - 1; i &gt;= 0; i--) {\n        if (/\\S/.test(str.charAt(i))) {\n            str = str.substring(0, i + 1);\n            break;\n        }\n    }\n    return str;\n}\n</code></pre>\n\n<p>\"if you want to handle long strings exceptionally fast in all browsers\".</p>\n\n<h3>References</h3>\n\n<ul>\n<li><a href=\"http://blog.stevenlevithan.com/archives/faster-trim-javascript\" rel=\"nofollow\">blog.stevenlevithan.com -- Faster JavaScript Trim</a></li>\n</ul>\n    "},{"t":"Check whether a string matches a regex","l":"http://stackoverflow.com/questions/6603015/check-whether-a-string-matches-a-regex","q":"\n\n<p>I want to use JavaScript (or jQuery) to do some client-side validation to check whether a string matches the regex:</p>\n\n<pre><code>^([a-z0-9]{5,})$\n</code></pre>\n\n<p>Ideally it would be an expression that returned true or false. </p>\n\n<p>I'm a JavaScript newbie, does <code>match()</code> do what I need? It seems to check whether part of a string matches a regex, not the whole thing. </p>\n    ","a":"\n<p>Use <code>regex.test()</code> if all you want is a boolean result:</p>\n\n<pre><code>/^([a-z0-9]{5,})$/.test('abc1');   // false\n\n/^([a-z0-9]{5,})$/.test('abc12');   // true\n\n/^([a-z0-9]{5,})$/.test('abc123');   // true\n</code></pre>\n\n<p>...and you could remove the <code>()</code> from your regexp since you've no need for a capture.</p>\n    "},{"t":"Split string on whitespace in Python","l":"http://stackoverflow.com/questions/8113782/split-string-on-whitespace-in-python","q":"\n\n<p>I'm looking for the Python equivalent of </p>\n\n<pre><code>String str = \"many   fancy word \\nhello    \\thi\";\nString whiteSpaceRegex = \"\\\\s\";\nString[] words = str.split(whiteSpaceRegex);\n\n[\"many\", \"fancy\", \"word\", \"hello\", \"hi\"]\n</code></pre>\n    ","a":"\n<p>The <code>str.split()</code> method without an argument splits on whitespace:</p>\n\n<pre><code>&gt;&gt;&gt; \"many   fancy word \\nhello    \\thi\".split()\n['many', 'fancy', 'word', 'hello', 'hi']\n</code></pre>\n    "},{"t":"Regular Expression to find a string included between two characters, while EXCLUDING the delimiters","l":"http://stackoverflow.com/questions/1454913/regular-expression-to-find-a-string-included-between-two-characters-while-exclu","q":"\n\n<p>I looked around for a while, but probably I can't \"Google\" with the proper keywords, so I'm asking here. I need to extract from a string a set of characters which are included between two delimiters, without returning the delimiters themselves. I'm trying to do it with C# RegEx object.</p>\n\n<p>A simple example should be helpful:</p>\n\n<p><strong>Target</strong>: extract the substring between square brackets, without returning the brackets \nthemselves.</p>\n\n<p><strong>Base string</strong>: <em>This is a test string [more or less]</em></p>\n\n<p>If I use the following reg. ex.</p>\n\n<pre>\\[.*?\\]</pre>\n\n<p>The match is \"[more or less]\". I need to get only \"more or less\", without the brackets. Is it possible to do it? Many thanks.</p>\n    ","a":"\n<p>Easy done:</p>\n\n<pre><code>(?&lt;=\\[)(.*?)(?=\\])\n</code></pre>\n\n<p>Technically that's using lookaheads and lookbehinds. See <a href=\"http://www.regular-expressions.info/lookaround.html\">Lookahead and Lookbehind Zero-Width Assertions</a>. The pattern consists of:</p>\n\n<ul>\n<li>is preceded by a [ that is not captured (lookbehind);</li>\n<li>a non-greedy captured group. It's non-greedy to stop at the first ]; and</li>\n<li>is followed by a ] that is not captured (lookahead).</li>\n</ul>\n\n<p>Alternatively you can just capture what's between the square brackets:</p>\n\n<pre><code>\\[(.*?)\\]\n</code></pre>\n\n<p>and return the first captured group instead of the entire match.</p>\n    "},{"t":"Regular expression to match non-English characters?","l":"http://stackoverflow.com/questions/150033/regular-expression-to-match-non-english-characters","q":"\n\n<p>What is the easiest way to match non-English characters in a regex? I would like to match all words individually in an input string, but the language may not be English, so I will need to match things like ü, ö, ß, and ñ. Also, this is in Javascript/jQuery, so any solution will need to apply to that. </p>\n    ","a":"\n<p>This should do it:</p>\n\n<pre><code>[^\\x00-\\x7F]+\n</code></pre>\n\n<p>It matches any character which is not contained in the <a href=\"http://en.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange\">ASCII character set</a> (0-127, i.e. 0x0 to 0x7F). You can do the same thing with Unicode:</p>\n\n<pre><code>[^\\u0000-\\u007F]+\n</code></pre>\n    "},{"t":"What do lazy and greedy mean in the context of regular expressions?","l":"http://stackoverflow.com/questions/2301285/what-do-lazy-and-greedy-mean-in-the-context-of-regular-expressions","q":"\n\n<p>Could someone explain these two terms in an understandable way?</p>\n    ","a":"\n<p>Greedy will consume as much as possible. From <a href=\"http://www.regular-expressions.info/repeat.html\">http://www.regular-expressions.info/repeat.html</a> we see the example of trying to match HTML tags with <code>&lt;.+&gt;</code>. Suppose you have the following:</p>\n\n<pre><code>&lt;em&gt;Hello World&lt;/em&gt;\n</code></pre>\n\n<p>You may think that <code>&lt;.+&gt;</code> (. means <em>anything</em> and + means <em>repeated</em>) would only match the <code>&lt;em&gt;</code> and the <code>&lt;/em&gt;</code>, when in reality it will be very greedy, and go from the first <code>&lt;</code> to the last <code>&gt;</code>. This means it will match <code>&lt;em&gt;Hello World&lt;/em&gt;</code> instead of what you wanted.</p>\n\n<p>Making it lazy (<code>&lt;.+?&gt;</code>) will prevent this. By adding the ? after the +, we tell it to repeat <em>as few times as possible</em>, so the first <code>&gt;</code> it comes across, is where we want to stop the matching.</p>\n\n<p>I'd encourage you to download <a href=\"http://www.gskinner.com/RegExr/\">RegExr</a>, a great tool that will help you explore Regular Expressions - I use it all the time.</p>\n    "},{"t":"How do I perform a Perl substitution on a string while keeping the original?","l":"http://stackoverflow.com/questions/22836/how-do-i-perform-a-perl-substitution-on-a-string-while-keeping-the-original","q":"\n\n<p>In Perl, what is a good way to perform a replacement on a string using a regular expression and store the value in a different variable, without changing the original?</p>\n\n<p>I usually just copy the string to a new variable then bind it to the <code>s///</code> regex that does the replacement on the new string, but I was wondering if there is a better way to do this?</p>\n\n<pre><code>$newstring = $oldstring;\n$newstring =~ s/foo/bar/g;\n</code></pre>\n    ","a":"\n<p>This is the idiom I've always used to get a modified copy of a string without changing the original:</p>\n\n<pre><code>(my $new = $original) =~ s/foo/bar/;\n</code></pre>\n\n<p>In perl 5.14.0 or later, you can use the new <code>/r</code> <a href=\"http://search.cpan.org/~flora/perl-5.14.2/pod/perl5140delta.pod#Non-destructive_substitution\">non-destructive substitution modifier:</a></p>\n\n<pre><code>my $new = $old =~ s/foo/bar/r; \n</code></pre>\n    "},{"t":"Regular Expression to match outer brackets","l":"http://stackoverflow.com/questions/546433/regular-expression-to-match-outer-brackets","q":"\n\n<p>I need a regular expression to select all the text between two outer brackets.</p>\n\n<p>Example: <code>some text(text here(possible text)text(possible text(more text)))end text</code></p>\n\n<p>Result: <code>(text here(possible text)text(possible text(more text)))</code></p>\n\n<p>I've been trying for hours, mind you my regular expression knowledge isn't what I'd like it to be :-) so any help will be gratefully received.</p>\n    ","a":"\n<p>Regular expressions are the wrong tool for the job because you are dealing with nested structures, i.e. recursion.</p>\n\n<p>But there is a simple algorithm to do this, which I described <a href=\"http://stackoverflow.com/questions/524548/regular-expression-to-detect-semi-colon-terminated-c-for-while-loops/524624#524624\">in this answer</a> to a <a href=\"http://stackoverflow.com/questions/524548/regular-expression-to-detect-semi-colon-terminated-c-for-while-loops\">previous question</a>. </p>\n    "},{"t":"Find and extract numbers from a string","l":"http://stackoverflow.com/questions/4734116/find-and-extract-numbers-from-a-string","q":"\n\n<p>I have a requirement to find and extract a number contained within a string in.</p>\n\n<p>For example, from these strings:</p>\n\n<pre><code>string test = \"1 test\"\nstring test1 = \" 1 test\"\nstring test2 = \"test 99\"\n</code></pre>\n\n<p>How can I do this?</p>\n    ","a":"\n<p><code>\\d+</code> is the regex for an integer number. So </p>\n\n<pre><code>//System.Text.RegularExpressions.Regex\nresultString = Regex.Match(subjectString, @\"\\d+\").Value;\n</code></pre>\n\n<p>will give you that number as a string. <code>Int32.Parse(resultString)</code> will then give you the number.</p>\n    "},{"t":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","l":"http://stackoverflow.com/questions/22542834/how-to-use-regular-expressions-regex-in-microsoft-excel-both-in-cell-and-loops","q":"\n\n<p>How can I use regular expressions in Excel and take advantage of Excel's powerful grid like setup for data manipulation?</p>\n\n<ul>\n<li>In-cell function to return matched pattern or replaced value in string.</li>\n<li>Sub to loop through a column of data and extract matches to adjacent cells.</li>\n<li>What setup is necessary?</li>\n<li>What are Excel's special characters for Regex expressions?</li>\n</ul>\n\n<hr>\n\n<p>I understand Regex is not ideal for many situations (<a href=\"http://stackoverflow.com/a/4098123/2521004\">To use or not to use regular expressions?</a>) since excel can use <code>Left</code>, <code>Mid</code>, <code>Right</code>, <code>Instr</code> type commands for similar manipulations.  </p>\n    ","a":"\n<p><a href=\"http://en.wikipedia.org/wiki/Regular_expressions\" rel=\"nofollow\">Regular expressions</a> are used for Pattern Matching.  To use in Excel follow these steps.</p>\n\n<p><strong>Step 1</strong>: Add VBA reference to \"Microsoft VBScript Regular Expressions 5.5\"</p>\n\n<ul>\n<li>Select \"Developer\" tab (<a href=\"http://msdn.microsoft.com/en-us/library/bb608625.aspx\" rel=\"nofollow\">I don't have this tab what do I do?</a>)</li>\n<li>Select \"Visual Basic\" icon from 'Code' ribbon section</li>\n<li>In \"Microsoft Visual Basic for Applications\" window select \"Tools\" from the top menu.</li>\n<li>Select \"References\"</li>\n<li>Check the box next to \"Microsoft VBScript Regular Expressions 5.5\" to include in your workbook.</li>\n<li>Click \"OK\"</li>\n</ul>\n\n<p><strong>Step 2</strong>: Define your pattern</p>\n\n<p><em>Basic definitions:</em></p>\n\n<p><code>-</code>  Range.  </p>\n\n<ul>\n<li>E.g. <code>a-z</code> matches an lower case letters from a to z</li>\n<li>E.g. <code>0-5</code> matches any number from 0 to 5</li>\n</ul>\n\n<p><code>[]</code> Match exactly one of the objects inside these brackets.</p>\n\n<ul>\n<li>E.g. <code>[a]</code> matches the letter a</li>\n<li>E.g. <code>[abc]</code> matches a single letter which can be a, b or c</li>\n<li>E.g. <code>[a-z]</code> matches any single lower case letter of the alphabet.</li>\n</ul>\n\n<p><code>()</code> Groups different matches for return purposes.  See examples below.</p>\n\n<p><code>{}</code> Multiplier for repeated copies of pattern defined before it.</p>\n\n<ul>\n<li>E.g. <code>[a]{2}</code> matches two consecutive lower case letter a: <code>aa</code></li>\n<li>E.g. <code>[a]{1,3}</code> matches at least one and up to three lower case letter <code>a</code>, <code>aa</code>, <code>aaa</code>           </li>\n</ul>\n\n<p><code>+</code>  Match at least one, or more, of the pattern defined before it.</p>\n\n<ul>\n<li>E.g. <code>a+</code> will match consecutive a's <code>a</code>, <code>aa</code>, <code>aaa</code>, and so on</li>\n</ul>\n\n<p><code>?</code>  Match zero or one of the pattern defined before it.</p>\n\n<ul>\n<li>E.g. Pattern may or may not be present but can only be matched one time.</li>\n<li>E.g. <code>[a-z]?</code> matches empty string or any single lower case letter.</li>\n</ul>\n\n<p><code>*</code>  Match zero or more of the pattern defined before it.\n - E.g. Wildcard for pattern that may or may not be present.\n - E.g. <code>[a-z]*</code> matches empty string or string of lower case letters.</p>\n\n<p><code>.</code>  Matches any character except newline <code>\\n</code></p>\n\n<ul>\n<li>E.g. <code>a.</code> Matches a two character string starting with a and ending with anything except <code>\\n</code></li>\n</ul>\n\n<p><code>|</code>  OR operator </p>\n\n<ul>\n<li>E.g. <code>a|b</code> means either <code>a</code> or <code>b</code> can be matched.</li>\n<li>E.g. <code>red|white|orange</code> matches exactly one of the colors.</li>\n</ul>\n\n<p><code>^</code>  NOT operator</p>\n\n<ul>\n<li>E.g. <code>[^0-9]</code> character can not contain a number</li>\n<li>E.g. <code>[^aA]</code> character can not be lower case <code>a</code> or upper case <code>A</code></li>\n</ul>\n\n<p><code>\\</code>  Escapes special character that follows (overrides above behavior)</p>\n\n<ul>\n<li>E.g. <code>\\.</code>, <code>\\\\</code>, <code>\\(</code>, <code>\\?</code>, <code>\\$</code>, <code>\\^</code></li>\n</ul>\n\n<hr>\n\n<p><em>Anchoring Patterns:</em></p>\n\n<p><code>^</code>  Match must occur at start of string</p>\n\n<ul>\n<li>E.g. <code>^a</code> First character must be lower case letter <code>a</code></li>\n<li>E.g. <code>^[0-9]</code> First character must be a number.</li>\n</ul>\n\n<p><code>$</code>  Match must occur at end of string</p>\n\n<ul>\n<li>E.g. <code>a$</code> Last character must be lower case letter <code>a</code>   </li>\n</ul>\n\n<hr>\n\n<p><em>Precedence table:</em></p>\n\n<pre><code>Order  Name                Representation\n1      Parentheses         ( )\n2      Multipliers         ? + * {m,n} {m, n}?\n3      Sequence &amp; Anchors  abc ^ $\n4      Alternation         |\n</code></pre>\n\n<hr>\n\n<p><em>Predefined Character Abbreviations:</em></p>\n\n<pre><code>abr    same as       meaning\n\\d     [0-9]         Any single digit\n\\D     [^0-9]        Any single character that's not a digit\n\\w     [a-zA-Z0-9_]  Any word character\n\\W     [^a-zA-Z0-9_] Any non-word character\n\\s     [ \\r\\t\\n\\f]   Any space character\n\\S     [^ \\r\\t\\n\\f]  Any non-space character\n\\n     [\\n]          New line\n</code></pre>\n\n<hr>\n\n<p><strong>Example 1</strong>: <em>Run as macro</em></p>\n\n<p>The following example macro looks at the value in cell <code>A1</code> to see if the first 1 or 2 characters are digits.  If so, they are removed and the rest of the string is displayed.  If not, then a box appears telling you that no match is found.  Cell <code>A1</code> values of <code>12abc</code> will return <code>abc</code>, value of <code>1abc</code> will return <code>abc</code>, value of <code>abc123</code> will return \"Not Matched\" because the digits were not at the start of the string.</p>\n\n<pre><code>Private Sub simpleRegex()\n    Dim strPattern As String: strPattern = \"^[0-9]{1,2}\"\n    Dim strReplace As String: strReplace = \"\"\n    Dim regEx As New RegExp\n    Dim strInput As String\n    Dim Myrange As Range\n\n    Set Myrange = ActiveSheet.Range(\"A1\")\n\n    If strPattern &lt;&gt; \"\" Then\n        strInput = Myrange.Value\n        strReplace = \"\"\n\n        With regEx\n            .Global = True\n            .MultiLine = True\n            .IgnoreCase = False\n            .Pattern = strPattern\n        End With\n\n        If regEx.Test(strInput) Then\n            MsgBox (regEx.Replace(strInput, strReplace))\n        Else\n            MsgBox (\"Not matched\")\n        End If\n    End If\nEnd Sub\n</code></pre>\n\n<hr>\n\n<p><strong>Example 2</strong>: <em>Run as an in-cell function</em></p>\n\n<p>This example is the same as example 1 but is setup to run as an in-cell function. To use, change the code to this:</p>\n\n<pre><code>Function simpleCellRegex(Myrange As Range) As String\n    Dim regEx As New RegExp\n    Dim strPattern As String\n    Dim strInput As String\n    Dim strReplace As String\n    Dim strOutput As String\n\n\n    strPattern = \"^[0-9]{1,3}\"\n\n    If strPattern &lt;&gt; \"\" Then\n        strInput = Myrange.Value\n        strReplace = \"\"\n\n        With regEx\n            .Global = True\n            .MultiLine = True\n            .IgnoreCase = False\n            .Pattern = strPattern\n        End With\n\n        If regEx.test(strInput) Then\n            simpleCellRegex = regEx.Replace(strInput, strReplace)\n        Else\n            simpleCellRegex = \"Not matched\"\n        End If\n    End If\nEnd Function\n</code></pre>\n\n<p>Place your strings (\"12abc\") in cell <code>A1</code>.  Enter this formula <code>=simpleCellRegex(A1)</code> in cell <code>B1</code> and the result will be \"abc\".</p>\n\n<p><img src=\"http://i.stack.imgur.com/q3RRC.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p><strong>Example 3</strong>: <em>Loop Through Range</em></p>\n\n<p>This example is the same as example 1 but loops through a range of cells.</p>\n\n<pre><code>Private Sub simpleRegex()\n    Dim strPattern As String: strPattern = \"^[0-9]{1,2}\"\n    Dim strReplace As String: strReplace = \"\"\n    Dim regEx As New RegExp\n    Dim strInput As String\n    Dim Myrange As Range\n\n    Set Myrange = ActiveSheet.Range(\"A1:A5\")\n\n    For Each cell In Myrange\n        If strPattern &lt;&gt; \"\" Then\n            strInput = cell.Value\n            strReplace = \"\"\n\n            With regEx\n                .Global = True\n                .MultiLine = True\n                .IgnoreCase = False\n                .Pattern = strPattern\n            End With\n\n            If regEx.Test(strInput) Then\n                MsgBox (regEx.Replace(strInput, strReplace))\n            Else\n                MsgBox (\"Not matched\")\n            End If\n        End If\n    Next\nEnd Sub\n</code></pre>\n\n<hr>\n\n<p><strong>Example 4</strong>: Splitting apart different patterns</p>\n\n<p>This example loops through a range (<code>A1</code>, <code>A2</code> &amp; <code>A3</code>) and looks for a string starting with three digits followed by a single alpha character and then 4 numeric digits.  The output splits apart the pattern matches into adjacent cells by using the <code>()</code>.  <code>$1</code> represents the first pattern matched within the first set of <code>()</code>.</p>\n\n<pre><code>Private Sub splitUpRegexPattern()\n    Dim regEx As New RegExp\n    Dim strPattern As String\n    Dim strInput As String\n    Dim strReplace As String\n    Dim Myrange As Range\n\n    Set Myrange = ActiveSheet.Range(\"A1:A3\")\n\n    For Each C In Myrange\n        strPattern = \"(^[0-9]{3})([a-zA-Z])([0-9]{4})\"\n\n        If strPattern &lt;&gt; \"\" Then\n            strInput = C.Value\n            strReplace = \"$1\"\n\n            With regEx\n                .Global = True\n                .MultiLine = True\n                .IgnoreCase = False\n                .Pattern = strPattern\n            End With\n\n            If regEx.test(strInput) Then\n                C.Offset(0, 1) = regEx.Replace(strInput, \"$1\")\n                C.Offset(0, 2) = regEx.Replace(strInput, \"$2\")\n                C.Offset(0, 3) = regEx.Replace(strInput, \"$3\")\n            Else\n                C.Offset(0, 1) = \"(Not matched)\"\n            End If\n        End If\n    Next\nEnd Sub\n</code></pre>\n\n<p>Results:</p>\n\n<p><img src=\"http://i.stack.imgur.com/9eCZ5.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p><strong>Additional Pattern Examples</strong></p>\n\n<pre><code>String   Regex Pattern                  Explanation\na1aaa    [a-zA-Z][0-9][a-zA-Z]{3}       Single alpha, single digit, three alpha characters\na1aaa    [a-zA-Z]?[0-9][a-zA-Z]{3}      May or may not have preceeding alpha character\na1aaa    [a-zA-Z][0-9][a-zA-Z]{0,3}     Single alpha, single digit, 0 to 3 alpha characters\na1aaa    [a-zA-Z][0-9][a-zA-Z]*         Single alpha, single digit, followed by any number of alpha characters\n\n&lt;/i8&gt;    \\&lt;\\/[a-zA-Z][0-9]\\&gt;            Exact non-word character except any single alpha followed by any single digit\n</code></pre>\n    "},{"t":"regex.test V.S. string.match to know if a string matches a regular expression","l":"http://stackoverflow.com/questions/10940137/regex-test-v-s-string-match-to-know-if-a-string-matches-a-regular-expression","q":"\n\n<p>Many times I'm using the string <code>match</code> function to know if a string matches a regular expression.</p>\n\n\n\n<pre class=\"lang-html prettyprint-override\"><code>if(str.match(/{regex}/))\n</code></pre>\n\n<p>Is there any difference between this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>if (/{regex}/.test(str))\n</code></pre>\n\n<p>They seem to give the same result?</p>\n    ","a":"\n<h2>Basic Usage</h2>\n\n<p>First, let's see what each function does:</p>\n\n<p><em>regexObject</em>.<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\">test</a></strong>( <em>String</em> )</p>\n\n<blockquote>\n  <p>Executes the search for a match between a regular expression and a specified string. Returns <em>true</em> or <em>false</em>.</p>\n</blockquote>\n\n<p><em>string</em>.<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\">match</a></strong>( <em>RegExp</em> )</p>\n\n<blockquote>\n  <p>Used to retrieve the matches when matching a string against a regular expression. Returns an array with the matches or <code>null</code> if there are none.</p>\n</blockquote>\n\n<p>Since <code>null</code> evaluates to <code>false</code>,</p>\n\n<pre><code>if ( string.match(regex) ) {\n  // There was a match.\n} else {\n  // No match.\n} \n</code></pre>\n\n<hr>\n\n<h2>Performance</h2>\n\n<p>Is there any difference regarding performance? </p>\n\n<p><strong>Yes</strong>. I found this short note in the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/match\">MDN site</a>:</p>\n\n<blockquote>\n  <p>If you need to know if a string matches a regular expression regexp, use regexp.test(string).</p>\n</blockquote>\n\n<p>Is the difference significant? </p>\n\n<p>The answer once more is <strong>YES</strong>! This <a href=\"http://jsperf.com/test-vs-match-regex\">jsPerf</a> I put together shows the difference is  <strong>~30% - ~60%</strong> depending on the browser:</p>\n\n<p><img src=\"http://i.stack.imgur.com/CHYn6.jpg\" alt=\"test vs match | Performance Test\"></p>\n\n<h2>Conclusion</h2>\n\n<p>Use <code>.test</code> if you want a faster boolean check. Use <code>.match</code> to retrieve all matches when using the <code>g</code> global flag. </p>\n\n<p><sub> Amazed by not finding even a single blog or a Stack Overflow answer entry to my question when searched for <em>\"regex test vs match javascript\"</em>, made me use the <a href=\"http://blog.stackoverflow.com/2011/07/its-ok-to-ask-and-answer-your-own-questions/\">share your knowledge, Q&amp;A-style</a> feature. Hope you'll like it. </sub></p>\n    "},{"t":"Escaping regex string in Python","l":"http://stackoverflow.com/questions/280435/escaping-regex-string-in-python","q":"\n\n<p>I want to use input from a user as a regex pattern for a search over some text.  It works, but how I can handle cases where user puts characters that have meaning in regex?  For example, the user wants to search for Word <code>(s)</code>: regex engine will take the <code>(s)</code> as a group.  I want it to treat it like a string <code>\"(s)\" </code>.  I can run <code>replace</code> on user input and replace the <code>(</code> with <code>\\(</code> and the <code>)</code> with <code>\\)</code> but the problem is I will need to do replace for every possible regex symbol. Do you know some better way ?</p>\n    ","a":"\n<p>Use the <code>re.escape()</code> function for this:</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.escape\">4.2.3 <code>re</code> Module Contents</a></p>\n\n<blockquote>\n  <p><strong>escape(string)</strong></p>\n  \n  <p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>\n</blockquote>\n\n<p>A simplistic example, search any occurence of the provided string optionally followed by 's', and return the match object.</p>\n\n<pre><code>def simplistic_plural(word, text):\n    word_or_plural = re.escape(word) + 's?'\n    return re.match(word_or_plural, text)\n</code></pre>\n    "},{"t":"How to extract img src, title and alt from html using php?","l":"http://stackoverflow.com/questions/138313/how-to-extract-img-src-title-and-alt-from-html-using-php","q":"\n\n<p>I would like to create a page where all images which reside on my website are listed with title and alternative representation.</p>\n\n<p>I already wrote me a little program to find and load all HTML files, but now I am stuck at how to extract <code>src</code>, <code>title</code> and <code>alt</code> from this HTML:</p>\n\n<pre><code>&lt;img <b>src</b>=\"/image/fluffybunny.jpg\" <b>title</b>=\"Harvey the bunny\" <b>alt</b>=\"a cute little fluffy bunny\" /&gt;</code></pre>\n\n<p>I guess this should be done with some regex, but since the order of the tags may vary, and I need all of them, I don't really know how to parse this in an elegant way (I could do it the hard char by char way, but that's painful).</p>\n    ","a":"\n<h2>EDIT : now that I know better</h2>\n\n<p>Using regexp to solve this kind of problem is <a href=\"http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454\">a bad idea</a> and will likely lead in unmaintainable and unreliable code. Better use an <a href=\"http://simplehtmldom.sourceforge.net/\" rel=\"nofollow\">HTML parser</a>. </p>\n\n<h2>Solution With regexp</h2>\n\n<p>In that case it's better to split the process into two parts :</p>\n\n<ul>\n<li>get all the img tag</li>\n<li>extract their metadata</li>\n</ul>\n\n<p>I will assume your doc is not xHTML strict so you can't use an XML parser. E.G. with this web page source code :</p>\n\n<pre><code>/* preg_match_all match the regexp in all the $html string and output everything as \nan array in $result. \"i\" option is used to make it case insensitive */\n\npreg_match_all('/&lt;img[^&gt;]+&gt;/i',$html, $result); \n\nprint_r($result);\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; &lt;img src=\"/Content/Img/stackoverflow-logo-250.png\" width=\"250\" height=\"70\" alt=\"logo link to homepage\" /&gt;\n            [1] =&gt; &lt;img class=\"vote-up\" src=\"/content/img/vote-arrow-up.png\" alt=\"vote up\" title=\"This was helpful (click again to undo)\" /&gt;\n            [2] =&gt; &lt;img class=\"vote-down\" src=\"/content/img/vote-arrow-down.png\" alt=\"vote down\" title=\"This was not helpful (click again to undo)\" /&gt;\n            [3] =&gt; &lt;img src=\"http://www.gravatar.com/avatar/df299babc56f0a79678e567e87a09c31?s=32&amp;d=identicon&amp;r=PG\" height=32 width=32 alt=\"gravatar image\" /&gt;\n            [4] =&gt; &lt;img class=\"vote-up\" src=\"/content/img/vote-arrow-up.png\" alt=\"vote up\" title=\"This was helpful (click again to undo)\" /&gt;\n\n[...]\n        )\n\n)\n</code></pre>\n\n<p>Then we get all the img tag attributes with a loop :</p>\n\n<pre><code>$img = array();\nforeach( $result as $img_tag)\n{\n    preg_match_all('/(alt|title|src)=(\"[^\"]*\")/i',$img_tag, $img[$img_tag]);\n}\n\nprint_r($img);\n\nArray\n(\n    [&lt;img src=\"/Content/Img/stackoverflow-logo-250.png\" width=\"250\" height=\"70\" alt=\"logo link to homepage\" /&gt;] =&gt; Array\n        (\n            [0] =&gt; Array\n                (\n                    [0] =&gt; src=\"/Content/Img/stackoverflow-logo-250.png\"\n                    [1] =&gt; alt=\"logo link to homepage\"\n                )\n\n            [1] =&gt; Array\n                (\n                    [0] =&gt; src\n                    [1] =&gt; alt\n                )\n\n            [2] =&gt; Array\n                (\n                    [0] =&gt; \"/Content/Img/stackoverflow-logo-250.png\"\n                    [1] =&gt; \"logo link to homepage\"\n                )\n\n        )\n\n    [&lt;img class=\"vote-up\" src=\"/content/img/vote-arrow-up.png\" alt=\"vote up\" title=\"This was helpful (click again to undo)\" /&gt;] =&gt; Array\n        (\n            [0] =&gt; Array\n                (\n                    [0] =&gt; src=\"/content/img/vote-arrow-up.png\"\n                    [1] =&gt; alt=\"vote up\"\n                    [2] =&gt; title=\"This was helpful (click again to undo)\"\n                )\n\n            [1] =&gt; Array\n                (\n                    [0] =&gt; src\n                    [1] =&gt; alt\n                    [2] =&gt; title\n                )\n\n            [2] =&gt; Array\n                (\n                    [0] =&gt; \"/content/img/vote-arrow-up.png\"\n                    [1] =&gt; \"vote up\"\n                    [2] =&gt; \"This was helpful (click again to undo)\"\n                )\n\n        )\n\n    [&lt;img class=\"vote-down\" src=\"/content/img/vote-arrow-down.png\" alt=\"vote down\" title=\"This was not helpful (click again to undo)\" /&gt;] =&gt; Array\n        (\n            [0] =&gt; Array\n                (\n                    [0] =&gt; src=\"/content/img/vote-arrow-down.png\"\n                    [1] =&gt; alt=\"vote down\"\n                    [2] =&gt; title=\"This was not helpful (click again to undo)\"\n                )\n\n            [1] =&gt; Array\n                (\n                    [0] =&gt; src\n                    [1] =&gt; alt\n                    [2] =&gt; title\n                )\n\n            [2] =&gt; Array\n                (\n                    [0] =&gt; \"/content/img/vote-arrow-down.png\"\n                    [1] =&gt; \"vote down\"\n                    [2] =&gt; \"This was not helpful (click again to undo)\"\n                )\n\n        )\n\n    [&lt;img src=\"http://www.gravatar.com/avatar/df299babc56f0a79678e567e87a09c31?s=32&amp;d=identicon&amp;r=PG\" height=32 width=32 alt=\"gravatar image\" /&gt;] =&gt; Array\n        (\n            [0] =&gt; Array\n                (\n                    [0] =&gt; src=\"http://www.gravatar.com/avatar/df299babc56f0a79678e567e87a09c31?s=32&amp;d=identicon&amp;r=PG\"\n                    [1] =&gt; alt=\"gravatar image\"\n                )\n\n            [1] =&gt; Array\n                (\n                    [0] =&gt; src\n                    [1] =&gt; alt\n                )\n\n            [2] =&gt; Array\n                (\n                    [0] =&gt; \"http://www.gravatar.com/avatar/df299babc56f0a79678e567e87a09c31?s=32&amp;d=identicon&amp;r=PG\"\n                    [1] =&gt; \"gravatar image\"\n                )\n\n        )\n\n   [..]\n        )\n\n)\n</code></pre>\n\n<p>Regexps are CPU intensive so you may want to cache this page. If you have no cache system, you can tweak your own by using <a href=\"http://fr2.php.net/manual/fr/function.ob-start.php\" rel=\"nofollow\">ob_start</a> and loading / saving from a text file.</p>\n\n<h2>How does this stuff work ?</h2>\n\n<p>First, we use <a href=\"http://fr2.php.net/manual/fr/function.preg-match-all.php\" rel=\"nofollow\">preg_ match_ all</a>, a function that gets every string matching the pattern and ouput it in it's third parameter.</p>\n\n<p>The regexps :</p>\n\n<pre><code>&lt;img[^&gt;]+&gt;\n</code></pre>\n\n<p>We apply it on all html web pages. It can be read as <em>every string that starts with \"<code>&lt;img</code>\", contains non \"&gt;\" char and ends with a &gt;</em>.</p>\n\n<pre><code>(alt|title|src)=(\"[^\"]*\")\n</code></pre>\n\n<p>We apply it successively on each img tag. It can be read as <em>every string starting with \"alt\", \"title\" or \"src\", then a \"=\", then a ' \" ', a bunch of stuff that are not ' \" ' and ends with a ' \" '. Isolate the sub-strings between ()</em>. </p>\n\n<p>Finally, every time you want to deal with regexps, it handy to have good tools to quickly test them. Check this <a href=\"http://regex.larsolavtorvik.com/\" rel=\"nofollow\">online regexp tester</a>.</p>\n\n<p>EDIT : answer to the first comment.</p>\n\n<p>It's true that I did not think about the (hopefully few) people using single quotes.</p>\n\n<p>Well, if you use only ', just replace all the \" by '. </p>\n\n<p>If you mix both. First you should slap yourself :-), then try to use (\"|') instead or \" and [^ø] to replace [^\"].</p>\n    "},{"t":"Remove multiple whitespaces","l":"http://stackoverflow.com/questions/2326125/remove-multiple-whitespaces","q":"\n\n<p>I'm getting <code>$row['message']</code> from a MySQL database and I need to remove all whitespace like <code>\\n</code> <code>\\t</code> and so on.</p>\n\n<pre><code>$row['message'] = \"This is   a Text \\n and so on \\t     Text text.\";\n</code></pre>\n\n<p>should be formatted to:</p>\n\n<pre><code>$row['message'] = 'This is a Text and so on Text text.';\n</code></pre>\n\n<p>I tried:</p>\n\n<pre><code> $ro = preg_replace('/\\s\\s+/', ' ',$row['message']);\n echo $ro;\n</code></pre>\n\n<p>but it doesn't remove <code>\\n</code> or <code>\\t</code>, just single spaces. Can anyone tell me how to do that?</p>\n    ","a":"\n<p>You need:</p>\n\n<pre><code>$ro = preg_replace('/\\s+/', ' ',$row['message']);\n</code></pre>\n\n<p>You are using <code>\\s\\s+</code> which means whitespace(space, tab or newline) followed by one or more whitespace. Which effectively means replace two or more whitespace with a single space. </p>\n\n<p>What you want is replace one or more whitespace with single whitespace, so you can use the pattern  <code>\\s\\s*</code> or <code>\\s+</code> (recommended)</p>\n    "},{"t":"Regular expression to extract text between square brackets","l":"http://stackoverflow.com/questions/2403122/regular-expression-to-extract-text-between-square-brackets","q":"\n\n<p>Simple regex question. I have a string on the following format:</p>\n\n<pre><code>this is a [sample] string with [some] special words. [another one]\n</code></pre>\n\n<p>What is the regular expression to extract the words within the square brackets, ie.</p>\n\n<pre><code>sample\nsome\nanother one\n</code></pre>\n\n<p>Note: In my use case, brackets cannot be nested.</p>\n    ","a":"\n<p>You can use the following regex <strong>globally</strong>:</p>\n\n<pre><code>\\[(.*?)\\]\n</code></pre>\n\n<p>Explanation:</p>\n\n<ul>\n<li><code>\\[</code> : <code>[</code> is a meta char and needs to be escaped if you want to match it literally.</li>\n<li><code>(.*?)</code> : match everything in a non-greedy way and capture it.</li>\n<li><code>\\]</code> : <code>]</code> is a meta char and needs to be escaped if you want to match it literally.</li>\n</ul>\n    "},{"t":"Matching a space in regex","l":"http://stackoverflow.com/questions/559363/matching-a-space-in-regex","q":"\n\n<p>I need to match a space character in a PHP regular expression. Anyone got any ideas?</p>\n\n<p>I mean like \"gavin schulz\", the space in between the two words. I am using a regular expression to make sure that I only allow letters, number and a space. But I'm not sure how to find the space. This is what I have right now:</p>\n\n<pre><code>$newtag = preg_replace(\"/[^a-zA-Z0-9s|]/\", \"\", $tag);\n</code></pre>\n    ","a":"\n<p>If you're looking for a space, that would be <code>\" \"</code> (one space).</p>\n\n<p>If you're looking for one or more, it's <code>\"  *\"</code> (that's <em>two</em> spaces and an asterisk) or <code>\" +\"</code> (one space and a plus).</p>\n\n<p>If you're looking for common spacing, use <code>\"[ X]\"</code> or <code>\"[ X][ X]*\"</code> or <code>\"[ X]+\"</code> where <code>X</code> is the physical tab character (and each is preceded by a single space in all those examples).</p>\n\n<p>These will work in <em>every</em>* regex engine I've ever seen (some of which don't even have the one-or-more <code>\"+\"</code> character, ugh).</p>\n\n<p>If you know you'll be using one of the more modern regex engines, <code>\"\\s\"</code> and its variations are the way to go. In addition, I believe word boundaries match start and end of lines as well, important when you're looking for words that may appear without preceding or following spaces.</p>\n\n<p>For PHP specifically, <a href=\"http://www.wellho.net/regex/php.html\">this page</a> may help.</p>\n\n<p>From your edit, it appears you want to remove all non valid characters The start of this is (note the space inside the regex):</p>\n\n<pre><code>$newtag = preg_replace (\"/[^a-zA-Z0-9 ]/\", \"\", $tag);\n#                                    ^ space here\n</code></pre>\n\n<p>If you also want trickery to ensure there's only one space between each word and none at the start or end, that's a little more complicated (and probably another question) but the basic idea would be:</p>\n\n<pre><code>$newtag = preg_replace (\"/ +/\", \" \", $tag); # convert all multispaces to space\n$newtag = preg_replace (\"/^ /\", \"\", $tag);  # remove space from start\n$newtag = preg_replace (\"/ $/\", \"\", $tag);  # and end\n</code></pre>\n    "},{"t":"Unicode equivalents for \\w and \\b in Java regular expressions?","l":"http://stackoverflow.com/questions/4304928/unicode-equivalents-for-w-and-b-in-java-regular-expressions","q":"\n\n<p>Many modern regex implementations interpret the <code>\\w</code> character class shorthand as \"any letter, digit, or connecting punctuation\" (usually: underscore). That way, a regex like <code>\\w+</code> matches words like <code>hello</code>, <code>élève</code>, <code>GOÄ_432</code> or <code>gefräßig</code>.</p>\n\n<p>Unfortunately, Java doesn't. In Java, <code>\\w</code> is limited to <code>[A-Za-z0-9_]</code>. This makes matching words like those mentioned above difficult, among other problems.</p>\n\n<p>It also appears that the <code>\\b</code> word separator matches in places where it shouldn't. </p>\n\n<p>What would be the correct equivalent of a .NET-like, Unicode-aware <code>\\w</code> or <code>\\b</code> in Java? Which other shortcuts need \"rewriting\" to make them Unicode-aware?</p>\n    ","a":"\n<h2>Source code</h2>\n\n<p>The source code for the rewriting functions I discuss below <strong><a href=\"http://training.perl.com/scripts/tchrist-unicode-charclasses__alpha.java\" rel=\"nofollow\">is available here</a>.</strong></p>\n\n<h2>Update in Java 7</h2>\n\n<p>Sun’s updated <code>Pattern</code> class for JDK7 has a marvelous new flag, <code>UNICODE_CHARACTER_CLASS</code>, which makes everything work right again. It’s available as an embeddable <code>(?U)</code> for inside the pattern, so you can use it with the <code>String</code> class’s wrappers, too.  It also sports corrected definitions for various other properties, too.  It now tracks The Unicode Standard, in both <a href=\"http://unicode.org/reports/tr18/#Categories\" rel=\"nofollow\">RL1.2</a> and <a href=\"http://unicode.org/reports/tr18/#Compatibility_Properties\" rel=\"nofollow\">RL1.2a</a> from <em>UTS#18: Unicode Regular Expressions</em>. This is an exciting and dramatic improvement, and the development team is to be commended for this important effort.</p>\n\n<hr>\n\n<h2>Java’s Regex Unicode Problems</h2>\n\n<p>The problem with Java regexes is that the Perl 1.0 charclass escapes — meaning <code>\\w</code>, <code>\\b</code>, <code>\\s</code>, <code>\\d</code> and their complements — are not in Java extended to work with Unicode.  Alone amongst these, <code>\\b</code> enjoys certain extended semantics, but these map neither to <a href=\"http://unicode.org/reports/tr18/#word\" rel=\"nofollow\"><code>\\w</code></a>, nor to <a href=\"http://www.unicode.org/reports/tr31/\" rel=\"nofollow\">Unicode identifiers</a>, nor to <a href=\"http://www.unicode.org/reports/tr29/WordBreakTest.html\" rel=\"nofollow\">Unicode line-break properties</a>.</p>\n\n<p>Additionally, the POSIX properties in Java are accessed this way:</p>\n\n<pre><code>POSIX syntax    Java syntax\n\n[[:Lower:]]     \\p{Lower}\n[[:Upper:]]     \\p{Upper}\n[[:ASCII:]]     \\p{ASCII}\n[[:Alpha:]]     \\p{Alpha}\n[[:Digit:]]     \\p{Digit}\n[[:Alnum:]]     \\p{Alnum}\n[[:Punct:]]     \\p{Punct}\n[[:Graph:]]     \\p{Graph}\n[[:Print:]]     \\p{Print}\n[[:Blank:]]     \\p{Blank}\n[[:Cntrl:]]     \\p{Cntrl}\n[[:XDigit:]]    \\p{XDigit}\n[[:Space:]]     \\p{Space}\n</code></pre>\n\n<p>This is a real mess, because it means that things like <code>Alpha</code>, <code>Lower</code>, and <code>Space</code> do <strong>not</strong> in Java map to the Unicode <code>Alphabetic</code>, <code>Lowercase</code>, or <code>Whitespace</code> properties. This is exceeedingly annoying. Java’s Unicode property support is <strong>strictly antemillennial</strong>, by which I mean it supports no Unicode property that has come out in the last decade.  </p>\n\n<p>Not being able to talk about whitespace properly is super-annoying.  Consider the following table. For each of those code points, there is both a J-results column\nfor Java and a P-results column for Perl or any other PCRE-based regex engine:</p>\n\n<pre><code>             Regex    001A    0085    00A0    2029\n                      J  P    J  P    J  P    J  P\n                \\s    1  1    0  1    0  1    0  1\n               \\pZ    0  0    0  0    1  1    1  1\n            \\p{Zs}    0  0    0  0    1  1    0  0\n         \\p{Space}    1  1    0  1    0  1    0  1\n         \\p{Blank}    0  0    0  0    0  1    0  0\n    \\p{Whitespace}    -  1    -  1    -  1    -  1\n\\p{javaWhitespace}    1  -    0  -    0  -    1  -\n \\p{javaSpaceChar}    0  -    0  -    1  -    1  -\n</code></pre>\n\n<p>See that?</p>\n\n<p>Virtually every one of those Java white space results is &nbsp; ̲w̲r̲o̲n̲g̲&nbsp; according to Unicode.  It’s a <strong>really big problem.</strong>  Java is just messed up, giving answers that are “wrong” according to existing practice and also according to Unicode.  Plus Java doesn’t even give you access to the real Unicode properties! In fact, Java does not support <em>any</em> property that corresponds to Unicode whitespace. </p>\n\n<hr>\n\n<h2>The Solution to All Those Problems, and More</h2>\n\n<p>To deal with this and many other related problems, yesterday I wrote a Java function to rewrite a pattern string that rewrites these 14 charclass escapes:</p>\n\n<pre><code>\\w \\W \\s \\S \\v \\V \\h \\H \\d \\D \\b \\B \\X \\R\n</code></pre>\n\n<p>by replacing them with things that actually work to match Unicode in a predictable and consistent fashion. It’s only an alpha prototype from a single hack session, but it is completely functional. </p>\n\n<p>The short story is that my code rewrites those 14 as follows:</p>\n\n<pre><code>\\s =&gt; [\\u0009-\\u000D\\u0020\\u0085\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]\n\\S =&gt; [^\\u0009-\\u000D\\u0020\\u0085\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]\n\n\\v =&gt; [\\u000A-\\u000D\\u0085\\u2028\\u2029]\n\\V =&gt; [^\\u000A-\\u000D\\u0085\\u2028\\u2029]\n\n\\h =&gt; [\\u0009\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]\n\\H =&gt; [^\\u0009\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001-\\u200A\\u202F\\u205F\\u3000]\n\n\\w =&gt; [\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]]\n\\W =&gt; [^\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]]\n\n\\b =&gt; (?:(?&lt;=[\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]])(?![\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]])|(?&lt;![\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]])(?=[\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]]))\n\\B =&gt; (?:(?&lt;=[\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]])(?=[\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]])|(?&lt;![\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]])(?![\\pL\\pM\\p{Nd}\\p{Nl}\\p{Pc}[\\p{InEnclosedAlphanumerics}&amp;&amp;\\p{So}]]))\n\n\\d =&gt; \\p{Nd}\n\\D =&gt; \\P{Nd}\n\n\\R =&gt; (?:(?&gt;\\u000D\\u000A)|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029])\n\n\\X =&gt; (?&gt;\\PM\\pM*)\n</code></pre>\n\n<p>Some things to consider...</p>\n\n<ul>\n<li><p>That uses for its <code>\\X</code> definition what <a href=\"http://www.unicode.org/reports/tr29\" rel=\"nofollow\">Unicode now refers to</a> as a <em>legacy grapheme cluster</em>, not an <em>extended grapheme cluster</em>, as the latter is rather more complicated. Perl itself now uses the fancier version, but the old version is still perfectly workable for the most common situations. <strong>EDIT:</strong> See addendum at bottom.</p></li>\n<li><p>What to do about <code>\\d</code> depends on your intent, but the default is the Uniode definition. I can see people not always wanting <code>\\p{Nd}</code>, but sometimes either <code>[0-9]</code> or <code>\\pN</code>.</p></li>\n<li><p>The two boundary definitions, <code>\\b</code> and <code>\\B</code>, are specifically written to use the <code>\\w</code> definition.</p></li>\n<li><p>That <code>\\w</code> definition is overly broad, because it grabs the parenned letters not just the circled ones. The Unicode <code>Other_Alphabetic</code> property isn’t available until JDK7, so that’s the best you can do.</p></li>\n</ul>\n\n<hr>\n\n<h2>Exploring Boundaries</h2>\n\n<p>Boundaries have been a problem ever since Larry Wall first coined the <code>\\b</code> and <code>\\B</code> syntax for talking about them for Perl 1.0 back in 1987. The key to understanding how <code>\\b</code> and <code>\\B</code> both work is to dispel two pervasive myths about them:</p>\n\n<ol>\n<li>They are <strong>only ever looking</strong> for <code>\\w</code> word characters, <strong>never</strong> for non-word characters.</li>\n<li>They do not specifically look for the edge of the string.</li>\n</ol>\n\n<p>A <code>\\b</code> boundary means:</p>\n\n<pre><code>    IF does follow word\n        THEN doesn't precede word\n    ELSIF doesn't follow word\n        THEN does precede word\n</code></pre>\n\n<p>And those are all  defined perfectly straightforwardly as:</p>\n\n<ul>\n<li><em>follows word</em> is <code>(?&lt;=\\w)</code>.</li>\n<li><em>precedes word</em> is <code>(?=\\w)</code>.</li>\n<li><em>doesn’t follow word</em> is <code>(?&lt;!\\w)</code>.</li>\n<li><em>doesn’t precede word</em> is <code>(?!\\w)</code>.</li>\n</ul>\n\n<p>Therefore, since <code>IF-THEN</code> is encoded as an <code>and</code> ed-together <code>AB</code> in regexes,  an <code>or</code> is <code>X|Y</code>, and because the <code>and</code> is  higher in precedence than <code>or</code>, that is simply <code>AB|CD</code>.  So every <code>\\b</code> that means a boundary can be safely replaced with:</p>\n\n<pre><code>    (?:(?&lt;=\\w)(?!\\w)|(?&lt;!\\w)(?=\\w))\n</code></pre>\n\n<p>with the <code>\\w</code> defined in the appropriate way. </p>\n\n<p>(You might think it strange that the <code>A</code> and <code>C</code> components are opposites. In a perfect world, you should be able to write that <code>AB|D</code>, but for a while I was chasing down mutual exclusion contradictions in Unicode properties — which I <em>think</em> I’ve taken care of, but I left the double condition in the boundary just in case. Plus this makes it more extensible if you get extra ideas later.)</p>\n\n<p>For the <code>\\B</code> non-boundaries, the logic is:</p>\n\n<pre><code>    IF does follow word\n        THEN does precede word\n    ELSIF doesn't follow word\n        THEN doesn't precede word\n</code></pre>\n\n<p>Allowing all instances of <code>\\B</code> to be replaced with:</p>\n\n<pre><code>    (?:(?&lt;=\\w)(?=\\w)|(?&lt;!\\w)(?!\\w))\n</code></pre>\n\n<p>This really is how <code>\\b</code> and <code>\\B</code> behave.  Equivalent patterns for them are</p>\n\n<ul>\n<li><code>\\b</code> using the <code>((IF)THEN|ELSE)</code> construct is <code>(?(?&lt;=\\w)(?!\\w)|(?=\\w))</code></li>\n<li><code>\\B</code> using the <code>((IF)THEN|ELSE)</code> construct is <code>(?(?=\\w)(?&lt;=\\w)|(?&lt;!\\w))</code></li>\n</ul>\n\n<p>But the versions with just <code>AB|CD</code> are fine, especially if you lack conditional patterns in your regex language — like Java.  ☹</p>\n\n<p>I’ve already verified the behaviour of the boundaries using all three equivalent definitions with a test suite that checks 110,385,408  matches per run, and which I've run on a dozen different data configurations according to:</p>\n\n<pre><code>     0 ..     7F    the ASCII range\n    80 ..     FF    the non-ASCII Latin1 range\n   100 ..   FFFF    the non-Latin1 BMP (Basic Multilingual Plane) range\n 10000 .. 10FFFF    the non-BMP portion of Unicode (the \"astral\" planes)\n</code></pre>\n\n<p>However, people often want a different sort of boundary. They want something that is whitespace and edge-of-string aware:</p>\n\n<ul>\n<li><em>left edge</em>  as <code>(?:(?&lt;=^)|(?&lt;=\\s))</code> </li>\n<li><em>right edge</em> as <code>(?=$|\\s)</code></li>\n</ul>\n\n<hr>\n\n<h2>Fixing Java with Java</h2>\n\n<p>The code I posted in <a href=\"http://stackoverflow.com/questions/3537706/howto-unescape-a-java-string-literal-in-java/4298836#4298836\">my other answer</a> provides this and quite a few other conveniences. This includes definitions for natural-language words, dashes, hyphens, and apostrophes, plus a bit more.</p>\n\n<p>It also allows you to specify Unicode characters in logical code points, not in idiotic UTF-16 surrogates. <strong>It’s hard to overstress how important that is!</strong> And that’s just for the string expansion.  </p>\n\n<p>For regex charclass substitution that makes the charclass in your Java regexes <em>finally</em> work on Unicode, <em>and work correctly,</em>  grab <strong><a href=\"http://training.perl.com/scripts/tchrist-unicode-charclasses__alpha.java\" rel=\"nofollow\">the full source from here</a>.</strong>  You may do with it as you please, of course. If you make fixes to it, I’d love to hear of it, but you don’t have to. It’s pretty short. The guts of the main regex rewriting function is simple:</p>\n\n<pre><code>switch (code_point) {\n\n    case 'b':  newstr.append(boundary);\n               break; /* switch */\n    case 'B':  newstr.append(not_boundary);\n               break; /* switch */\n\n    case 'd':  newstr.append(digits_charclass);\n               break; /* switch */\n    case 'D':  newstr.append(not_digits_charclass);\n               break; /* switch */\n\n    case 'h':  newstr.append(horizontal_whitespace_charclass);\n               break; /* switch */\n    case 'H':  newstr.append(not_horizontal_whitespace_charclass);\n               break; /* switch */\n\n    case 'v':  newstr.append(vertical_whitespace_charclass);\n               break; /* switch */\n    case 'V':  newstr.append(not_vertical_whitespace_charclass);\n               break; /* switch */\n\n    case 'R':  newstr.append(linebreak);\n               break; /* switch */\n\n    case 's':  newstr.append(whitespace_charclass);\n               break; /* switch */\n    case 'S':  newstr.append(not_whitespace_charclass);\n               break; /* switch */\n\n    case 'w':  newstr.append(identifier_charclass);\n               break; /* switch */\n    case 'W':  newstr.append(not_identifier_charclass);\n               break; /* switch */\n\n    case 'X':  newstr.append(legacy_grapheme_cluster);\n               break; /* switch */\n\n    default:   newstr.append('\\\\');\n               newstr.append(Character.toChars(code_point));\n               break; /* switch */\n\n}\nsaw_backslash = false;\n</code></pre>\n\n<p>Anyway, that code is just an alpha release, stuff I hacked up over the weekend. It won’t stay that way.</p>\n\n<p>For the beta I intend to:</p>\n\n<ul>\n<li><p>fold together the code duplication</p></li>\n<li><p>provide a clearer interface regarding unescaping string escapes versus augmenting regex escapes</p></li>\n<li><p>provide some flexibility in the <code>\\d</code> expansion, and maybe the <code>\\b</code></p></li>\n<li><p>provide convenience methods that handle turning around and calling Pattern.compile or String.matches or whatnot for you</p></li>\n</ul>\n\n<p>For production release, it should have javadoc and a JUnit test suite. I may include my gigatester, but it’s not written as JUnit tests.</p>\n\n<hr>\n\n<h2>Addendum</h2>\n\n<p>I have good news and bad news.  </p>\n\n<p>The good news is that I’ve now got a <strong>very</strong> close approximation to an <em>extended grapheme cluster</em> to use for an improved <code>\\X</code>. </p>\n\n<p>The bad news ☺ is that that pattern is: </p>\n\n<pre><code>(?:(?:\\u000D\\u000A)|(?:[\\u0E40\\u0E41\\u0E42\\u0E43\\u0E44\\u0EC0\\u0EC1\\u0EC2\\u0EC3\\u0EC4\\uAAB5\\uAAB6\\uAAB9\\uAABB\\uAABC]*(?:[\\u1100-\\u115F\\uA960-\\uA97C]+|([\\u1100-\\u115F\\uA960-\\uA97C]*((?:[[\\u1160-\\u11A2\\uD7B0-\\uD7C6][\\uAC00\\uAC1C\\uAC38]][\\u1160-\\u11A2\\uD7B0-\\uD7C6]*|[\\uAC01\\uAC02\\uAC03\\uAC04])[\\u11A8-\\u11F9\\uD7CB-\\uD7FB]*))|[\\u11A8-\\u11F9\\uD7CB-\\uD7FB]+|[^[\\p{Zl}\\p{Zp}\\p{Cc}\\p{Cf}&amp;&amp;[^\\u000D\\u000A\\u200C\\u200D]]\\u000D\\u000A])[[\\p{Mn}\\p{Me}\\u200C\\u200D\\u0488\\u0489\\u20DD\\u20DE\\u20DF\\u20E0\\u20E2\\u20E3\\u20E4\\uA670\\uA671\\uA672\\uFF9E\\uFF9F][\\p{Mc}\\u0E30\\u0E32\\u0E33\\u0E45\\u0EB0\\u0EB2\\u0EB3]]*)|(?s:.))\n</code></pre>\n\n<p>which in Java you’d write as:</p>\n\n<pre><code>String extended_grapheme_cluster = \"(?:(?:\\\\u000D\\\\u000A)|(?:[\\\\u0E40\\\\u0E41\\\\u0E42\\\\u0E43\\\\u0E44\\\\u0EC0\\\\u0EC1\\\\u0EC2\\\\u0EC3\\\\u0EC4\\\\uAAB5\\\\uAAB6\\\\uAAB9\\\\uAABB\\\\uAABC]*(?:[\\\\u1100-\\\\u115F\\\\uA960-\\\\uA97C]+|([\\\\u1100-\\\\u115F\\\\uA960-\\\\uA97C]*((?:[[\\\\u1160-\\\\u11A2\\\\uD7B0-\\\\uD7C6][\\\\uAC00\\\\uAC1C\\\\uAC38]][\\\\u1160-\\\\u11A2\\\\uD7B0-\\\\uD7C6]*|[\\\\uAC01\\\\uAC02\\\\uAC03\\\\uAC04])[\\\\u11A8-\\\\u11F9\\\\uD7CB-\\\\uD7FB]*))|[\\\\u11A8-\\\\u11F9\\\\uD7CB-\\\\uD7FB]+|[^[\\\\p{Zl}\\\\p{Zp}\\\\p{Cc}\\\\p{Cf}&amp;&amp;[^\\\\u000D\\\\u000A\\\\u200C\\\\u200D]]\\\\u000D\\\\u000A])[[\\\\p{Mn}\\\\p{Me}\\\\u200C\\\\u200D\\\\u0488\\\\u0489\\\\u20DD\\\\u20DE\\\\u20DF\\\\u20E0\\\\u20E2\\\\u20E3\\\\u20E4\\\\uA670\\\\uA671\\\\uA672\\\\uFF9E\\\\uFF9F][\\\\p{Mc}\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E45\\\\u0EB0\\\\u0EB2\\\\u0EB3]]*)|(?s:.))\";\n</code></pre>\n\n<p><em>¡Tschüß!</em></p>\n    "},{"t":"Regex to match only letters","l":"http://stackoverflow.com/questions/3617797/regex-to-match-only-letters","q":"\n\n<p>How can I write a regex that matches only letters?</p>\n    ","a":"\n<p>Use a character set: <code>[a-zA-Z]</code> matches one letter from A–Z in lowercase and uppercase. <code>[a-zA-Z]+</code> matches one or more letters and <code>^[a-zA-Z]+$</code> matches only strings that consist of one or more letters only (<code>^</code> and <code>$</code> mark the begin and end of a string respectively).</p>\n\n<p>If you want to match other letters than A–Z, you can either add them to the character set: <code>[a-zA-ZäöüßÄÖÜ]</code>. Or you use predefined character classes like the <a href=\"http://www.regular-expressions.info/unicode.html#prop\">Unicode character property</a> class <code>\\p{L}</code> that describes the Unicode characters that are letters.</p>\n    "},{"t":"How does RegexOptions.Compiled work?","l":"http://stackoverflow.com/questions/513412/how-does-regexoptions-compiled-work","q":"\n\n<p>What is going on behind the scenes when you mark a regular expression as one to be compiled? How does this compare/is different from a cached regular expression?</p>\n\n<p>Using this information, how do you determine when the cost of computation is negligible compared to the performance increase?</p>\n    ","a":"\n<p><code>RegexOptions.Compiled</code> instructs the regular expression engine to compile the regular expression expression into IL using lightweight code generation (<a href=\"http://blogs.msdn.com/b/joelpob/archive/2004/03/31/105282.aspx\">LCG</a>). This compilation happens during the construction of the object and <strong>heavily</strong> slows it down. In turn, matches using the regular expression are faster.</p>\n\n<p>If you do not specify this flag, your regular expression is considered \"interpreted\".</p>\n\n<p>Take this example:</p>\n\n<pre><code>public static void TimeAction(string description, int times, Action func)\n{\n    // warmup\n    func();\n\n    var watch = new Stopwatch();\n    watch.Start();\n    for (int i = 0; i &lt; times; i++)\n    {\n        func();\n    }\n    watch.Stop();\n    Console.Write(description);\n    Console.WriteLine(\" Time Elapsed {0} ms\", watch.ElapsedMilliseconds);\n}\n\nstatic void Main(string[] args)\n{\n    var simple = \"^\\\\d+$\";\n    var medium = @\"^((to|from)\\W)?(?&lt;url&gt;http://[\\w\\.:]+)/questions/(?&lt;questionId&gt;\\d+)(/(\\w|-)*)?(/(?&lt;answerId&gt;\\d+))?\";\n    var complex = @\"^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\"\"]+\"\n      + @\"(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\"\"]+)*)|(\"\".+\"\"))@\"\n      + @\"((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"\n      + @\"\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+\"\n      + @\"[a-zA-Z]{2,}))$\";\n\n\n    string[] numbers = new string[] {\"1\",\"two\", \"8378373\", \"38737\", \"3873783z\"};\n    string[] emails = new string[] { \"sam@sam.com\", \"sss@s\", \"sjg@ddd.com.au.au\", \"onelongemail@oneverylongemail.com\" };\n\n    foreach (var item in new[] {\n        new {Pattern = simple, Matches = numbers, Name = \"Simple number match\"},\n        new {Pattern = medium, Matches = emails, Name = \"Simple email match\"},\n        new {Pattern = complex, Matches = emails, Name = \"Complex email match\"}\n    })\n    {\n        int i = 0;\n        Regex regex;\n\n        TimeAction(item.Name + \" interpreted uncached single match (x1000)\", 1000, () =&gt;\n        {\n            regex = new Regex(item.Pattern);\n            regex.Match(item.Matches[i++ % item.Matches.Length]);\n        });\n\n        i = 0;\n        TimeAction(item.Name + \" compiled uncached single match (x1000)\", 1000, () =&gt;\n        {\n            regex = new Regex(item.Pattern, RegexOptions.Compiled);\n            regex.Match(item.Matches[i++ % item.Matches.Length]);\n        });\n\n        regex = new Regex(item.Pattern);\n        i = 0;\n        TimeAction(item.Name + \" prepared interpreted match (x1000000)\", 1000000, () =&gt;\n        {\n            regex.Match(item.Matches[i++ % item.Matches.Length]);\n        });\n\n        regex = new Regex(item.Pattern, RegexOptions.Compiled);\n        i = 0;\n        TimeAction(item.Name + \" prepared compiled match (x1000000)\", 1000000, () =&gt;\n        {\n            regex.Match(item.Matches[i++ % item.Matches.Length]);\n        });\n\n    }\n}\n</code></pre>\n\n<p>It performs 4 tests on 3 different regular expressions. First it tests a <strong>single</strong> once off match (compiled vs non compiled). Second it tests repeat matches that reuse the same regular expression.</p>\n\n<p>The results on my machine (compiled in release, no debugger attached)</p>\n\n<h3>1000 single matches (construct Regex, Match and dispose)</h3>\n\n<pre>Type        | Platform | Trivial Number | Simple Email Check | Ext Email Check\n------------------------------------------------------------------------------\nInterpreted | x32      |    4 ms        |    26 ms           |    31 ms\nInterpreted | x64      |    5 ms        |    29 ms           |    35 ms\nCompiled    | x32      |  913 ms        |  3775 ms           |  4487 ms\nCompiled    | x64      | 3300 ms        | 21985 ms           | 22793 ms\n</pre>\n\n<h3>1,000,000 matches - reusing the Regex object</h3>\n\n<pre>Type        | Platform | Trivial Number | Simple Email Check | Ext Email Check\n------------------------------------------------------------------------------\nInterpreted | x32      |  422 ms        |   461 ms           |  2122 ms\nInterpreted | x64      |  436 ms        |   463 ms           |  2167 ms\nCompiled    | x32      |  279 ms        |   166 ms           |  1268 ms\nCompiled    | x64      |  281 ms        |   176 ms           |  1180 ms\n</pre>\n\n<p>These results show that compiled regular expressions can be up to <strong>60%</strong> faster for cases where you reuse the <code>Regex</code> object. <strong>However</strong> in some cases can be over <strong>3 orders of magnitude</strong> slower to construct.</p>\n\n<p>It also shows that the <strong>x64 version</strong> of .NET can be <strong>5 to 6 times slower</strong> when it comes to compilation of regular expressions.</p>\n\n<hr>\n\n<p>The recommendation would be to <strong>use the compiled version</strong> in cases where either</p>\n\n<ol>\n<li>You do not care about object initialization cost and need the extra performance boost. (note we are talking fractions of a millisecond here)</li>\n<li>You care a little bit about initialization cost, but are reusing the Regex object so many times that it will compensate for it during your application life cycle.</li>\n</ol>\n\n<hr>\n\n<h3>Spanner in the works, the Regex cache</h3>\n\n<p>The regular expression engine contains an LRU cache which holds the last 15 regular expressions that were tested using the static methods on the <code>Regex</code> class.</p>\n\n<p>For example: <code>Regex.Replace</code>, <code>Regex.Match</code> etc.. all use the Regex cache.</p>\n\n<p>The size of the cache can be increases by setting <a href=\"http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.cachesize.aspx\"><code>Regex.CacheSize</code></a>. It accepts changes in size any time during your applications life cycle.</p>\n\n<p>New regular expressions are only cached <strong>by the static helpers</strong> on the Regex class. If you construct your objects the cache is checked (for reuse and bumped), however, the regular expression you construct is <strong>not appended to the cache</strong>.</p>\n\n<p>This cache is a <strong>trivial</strong> LRU cache, it is implemented using a simple double linked list. If you happen to increase it to 5000, and use 5000 different calls on the static helpers, every regular expression construction will crawl the 5000 entries to see if it is previously cached. There is a <strong>lock</strong> around the check, so the check can decrease parallelism and introduce thread blocking.</p>\n\n<p>The number is set quite low to protect yourself from case like this, though in some cases you may have no choice but to increase it.</p>\n\n<p>My <strong>strong recommendation</strong> would be <strong>never</strong> pass the <code>RegexOptions.Compiled</code> option to a static helper.</p>\n\n<p>For example:</p>\n\n<pre><code>\\\\ WARNING: bad code\nRegex.IsMatch(@\"\\\\d+\", \"10000\", RegexOptions.Compiled)\n</code></pre>\n\n<p>The reason being that you are heavily risking a miss on the LRU cache which will trigger a <strong>super expensive</strong> compile. Additionally, you have no idea what the libraries you depend on are doing, so have little ability to control or predict the <strong>best possible</strong> size of the cache.</p>\n\n<p>See also: <a href=\"http://blogs.msdn.com/b/bclteam/archive/2010/06/25/optimizing-regular-expression-performance-part-i-working-with-the-regex-class-and-regex-objects.aspx\">BCL team blog</a></p>\n\n<hr>\n\n<p><strong>Note</strong> : this is relevant for .NET 2.0 and .NET 4.0. There are some expected changes in 4.5 that may cause this to be revised.</p>\n    "},{"t":"How do HTML parses work if they're not using regexp?","l":"http://stackoverflow.com/questions/2400623/how-do-html-parses-work-if-theyre-not-using-regexp","q":"\n\n<p>I see questions every day asking how to parse or extract something from some HTML string and the first answer/comment is always \"Don't use RegEx to parse HTML, lest you feel the wrath!\" (that last part is sometimes omitted).</p>\n\n<p>This is rather confusing for me, I always thought that in general, the best way to parse any complicated string is to use a regular expression.  So how does a HTML parser work?  Doesn't it use regular expressions to parse.</p>\n\n<p>One particular argument for using a regular expression is that there's not always a parsing alternative (such as JavaScript, where DOMDocument isn't a universally available option).  jQuery, for instance, seems to manage just fine using a regex to convert a HTML string to DOM nodes.</p>\n\n<p>Not sure whether or not to CW this, it's a genuine question that I want to be answered and not really intended to be a discussion thread.</p>\n    ","a":"\n<p>Usually by using a tokeniser. The draft <a href=\"http://www.w3.org/TR/html5/syntax.html#parsing\">HTML5 specification has an extensive algorithm</a> for handling \"real world HTML\". </p>\n    "},{"t":"How do I extract text that lies between parentheses (round brackets)?","l":"http://stackoverflow.com/questions/378415/how-do-i-extract-text-that-lies-between-parentheses-round-brackets","q":"\n\n<p>I have a string <code>User name (sales)</code> and I want to extract the text between the brackets, how would I do this? </p>\n\n<p>I suspect sub-string but I can't work out how to read until the closing bracket, the length of text will vary.</p>\n    ","a":"\n<p>A very simple way to do it is by using regular expressions:</p>\n\n<pre><code>Regex.Match(\"User name (sales)\", @\"\\(([^)]*)\\)\").Groups[1].Value\n</code></pre>\n\n<hr>\n\n<p>As a response to the (very funny) comment, here's the same Regex with some explanation:</p>\n\n<pre><code>\\(             # Escaped parenthesis, means \"starts with a '(' character\"\n    (          # Parentheses in a regex mean \"put (capture) the stuff \n               #     in between into the Groups array\" \n       [^)]    # Any character that is not a ')' character\n       *       # Zero or more occurrences of the aforementioned \"non ')' char\"\n    )          # Close the capturing group\n\\)             # \"Ends with a ')' character\"\n</code></pre>\n    "},{"t":"How can I strip HTML tags from a string in ASP.NET?","l":"http://stackoverflow.com/questions/785715/how-can-i-strip-html-tags-from-a-string-in-asp-net","q":"\n\n<p>Using ASP.NET, how can I strip the HTML tags from a given string reliably (i.e. not using regex)? I am looking for something like PHP's <code>strip_tags</code>.</p>\n\n<h3>Example:</h3>\n\n<p><code>&lt;ul&gt;&lt;li&gt;Hello&lt;/li&gt;&lt;/ul&gt;</code></p>\n\n<h3>Output:</h3>\n\n<p>\"Hello\"</p>\n\n<p>I am trying not to reinvent the wheel, but I have not found anything that meets my needs so far.</p>\n    ","a":"\n<p>If it is just stripping <em>all</em> HTML tags from a string, this works reliably with regex as well. Replace:</p>\n\n<pre><code>&lt;[^&gt;]*(&gt;|$)\n</code></pre>\n\n<p>with the empty string, globally. Don't forget to normalize the string afterwards, replacing:</p>\n\n<pre><code>[\\s\\r\\n]+\n</code></pre>\n\n<p>with a single space, and trimming the result. Optionally replace any HTML character entities back to the actual characters.</p>\n\n<p><strong>Note</strong>: </p>\n\n<ol>\n<li>There is a limitation: HTML and XML allow <code>&gt;</code> in attribute values. This solution <em>will</em> return broken markup when encountering such values.</li>\n<li>The solution is technically safe, as in: The result will never contain anything that could be used to do cross site scripting or to break a page layout. It is just not very clean.</li>\n<li>As with all things HTML and regex:<br>\n<strong>Use <a href=\"http://htmlagilitypack.codeplex.com/\">a proper parser</a> if you must get it right under all circumstances.</strong></li>\n</ol>\n    "},{"t":"Switch statement for string matching in JavaScript","l":"http://stackoverflow.com/questions/2896626/switch-statement-for-string-matching-in-javascript","q":"\n\n<p>How do I write a swtich for the following conditional?</p>\n\n<p>If the url <strong>contains</strong> \"foo\", then settings.base_url is \"bar\".</p>\n\n<p>The following is achieving the effect required but I've a feeling this would be more manageable in a switch:</p>\n\n<pre><code>var doc_location = document.location.href;\nvar url_strip = new RegExp(\"http:\\/\\/.*\\/\");\nvar base_url = url_strip.exec(doc_location)\nvar base_url_string = base_url[0];\n\n//BASE URL CASES\n\n// LOCAL\nif (base_url_string.indexOf('xxx.local') &gt; -1) {\n    settings = {\n        \"base_url\" : \"http://xxx.local/\"\n    };\n}\n\n// DEV\nif (base_url_string.indexOf('xxx.dev.yyy.com') &gt; -1) {\n    settings = {\n        \"base_url\" : \"http://xxx.dev.yyy.com/xxx/\"\n    };\n}\n</code></pre>\n    ","a":"\n<p><s>You can't do it in a <code>switch</code> unless you're doing <strong>full</strong> string matching; that's doing <strong>substring</strong> matching.</s> <em>(This isn't</em> quite <em>true, as Sean points out in the comments. See note at the end.)</em></p>\n\n<p>If you're happy that your regex at the top is stripping away everything that you don't want to compare in your match, you don't need a substring match, and could do:</p>\n\n<pre><code>switch (base_url_string) {\n    case \"xxx.local\":\n        // Blah\n        break;\n    case \"xxx.dev.yyy.com\":\n        // Blah\n        break;\n}\n</code></pre>\n\n<p>...but again, that only works if that's the <em>complete</em> string you're matching. It would fail if <code>base_url_string</code> were, say, \"yyy.xxx.local\" whereas your current code would match that in the \"xxx.local\" branch.</p>\n\n<hr>\n\n<p><strong>Update</strong>: Okay, so technically you <em>can</em> use a <code>switch</code> for substring matching, but I wouldn't recommend it in most situations. Here's how (<a href=\"http://jsbin.com/ehabar\">live example</a>):</p>\n\n<pre><code>function test(str) {\n    switch (true) {\n      case /xyz/.test(str):\n        display(\"• Matched 'xyz' test\");\n        break;\n      case /test/.test(str):\n        display(\"• Matched 'test' test\");\n        break;\n      case /ing/.test(str):\n        display(\"• Matched 'ing' test\");\n        break;\n      default:\n        display(\"• Didn't match any test\");\n        break;\n    }\n}\n</code></pre>\n\n<p>That works because of the way JavaScript <a href=\"http://es5.github.com/#x12.11\"><code>switch</code> statements work</a>, in particular two key aspects: First, that the cases are considered in <em>source text</em> order, and second that the selector expressions (the bits after the keyword <code>case</code>) are <em>expressions</em> that are evaluated as that case is evaluated (not constants as in some other languages). So since our test expression is <code>true</code>, the first <code>case</code> expression that results in <code>true</code> will be the one that gets used.</p>\n    "},{"t":"How do you match only valid roman numerals with a regular expression?","l":"http://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression","q":"\n\n<p>Thinking about <a href=\"http://stackoverflow.com/questions/267351/how-can-i-convert-from-integers-to-roman-numerals-using-a-syntax-directed-trans\">my other problem</a>, i decided I can't even create a regular expression that will match roman numerals (let alone a context-free grammar that will generate them)</p>\n\n<p>The problem is matching only valid roman numerals. \nEg, 990 is NOT \"XM\", it's \"CMXC\"</p>\n\n<p>My problem in making the regex for this is that in order to allow or not allow certain characters, I need to look back.\nLet's take thousands and hundreds, for example.</p>\n\n<p>I can allow M{0,2}C?M (to allow for 900, 1000, 1900, 2000, 2900 and 3000). However, If the match is on CM, I can't allow following characters to be C or D (because I'm already at 900).</p>\n\n<p>How can I express this in a regex?<br>\nIf it's simply not expressible in a regex, is it expressible in a context-free grammar?</p>\n    ","a":"\n<p>Try:</p>\n\n<pre><code>^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\n</code></pre>\n\n<p>Breaking it down:</p>\n\n<hr>\n\n<blockquote>\n  <p><code>M{0,4}</code></p>\n</blockquote>\n\n<p>This specifies the thousands section and basically restrains it to between <code>0</code> and <code>4000</code>. It's a relatively simple:</p>\n\n<pre><code>   0: &lt;empty&gt;  matched by M{0}\n1000: M        matched by M{1}\n2000: MM       matched by M{2}\n3000: MMM      matched by M{3}\n4000: MMMM     matched by M{4}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p><code>(CM|CD|D?C{0,3})</code></p>\n</blockquote>\n\n<p>Slightly more complex, this is for the hundreds section and covers all the possibilities:</p>\n\n<pre><code>  0: &lt;empty&gt;  matched by D?C{0} (with D not there)\n100: C        matched by D?C{1} (with D not there)\n200: CC       matched by D?C{2} (with D not there)\n300: CCC      matched by D?C{3} (with D not there)\n400: CD       matched by CD\n500: D        matched by D?C{0} (with D there)\n600: DC       matched by D?C{1} (with D there)\n700: DCC      matched by D?C{2} (with D there)\n800: DCCC     matched by D?C{3} (with D there)\n900: CM       matched by CM\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p><code>(XC|XL|L?X{0,3})</code></p>\n</blockquote>\n\n<p>Same rules as previous section but for the tens place:</p>\n\n<pre><code> 0: &lt;empty&gt;  matched by L?X{0} (with L not there)\n10: X        matched by L?X{1} (with L not there)\n20: XX       matched by L?X{2} (with L not there)\n30: XXX      matched by L?X{3} (with L not there)\n40: XL       matched by XL\n50: L        matched by L?X{0} (with L there)\n60: LX       matched by L?X{1} (with L there)\n70: LXX      matched by L?X{2} (with L there)\n80: LXXX     matched by L?X{3} (with L there)\n90: XC       matched by XC\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p><code>(IX|IV|V?I{0,3})</code></p>\n</blockquote>\n\n<p>This is the units section, handling <code>0</code> through <code>9</code> and also similar to the previous two sections (Roman numerals, despite their seeming weirdness, follow some logical rules once you figure out what they are):</p>\n\n<pre><code>0: &lt;empty&gt;  matched by V?I{0} (with V not there)\n1: I        matched by V?I{1} (with V not there)\n2: II       matched by V?I{2} (with V not there)\n3: III      matched by V?I{3} (with V not there)\n4: IV       matched by IV\n5: V        matched by V?I{0} (with V there)\n6: VI       matched by V?I{1} (with V there)\n7: VII      matched by V?I{2} (with V there)\n8: VIII     matched by V?I{3} (with V there)\n9: IX       matched by IX\n</code></pre>\n    "},{"t":"Java - escape string to prevent SQL injection","l":"http://stackoverflow.com/questions/1812891/java-escape-string-to-prevent-sql-injection","q":"\n\n<p>I'm trying to put some anti sql injection in place in java and am finding it very difficult to work with the the \"replaceAll\" string function. Ultimately I need a function that will convert any existing <code>\\</code> to <code>\\\\</code>, any <code>\"</code> to <code>\\\"</code>, any <code>'</code> to <code>\\'</code>, and any <code>\\n</code> to <code>\\\\n</code> so that when the string is evaluated by MySQL SQL injections will be blocked. </p>\n\n<p>I've jacked up some code I was working with and all the <code>\\\\\\\\\\\\\\\\\\\\\\</code> in the function are making my eyes go nuts. If anyone happens to have an example of this I would greatly appreciate it.</p>\n    ","a":"\n<p>PreparedStatements are the way to go, because they make SQL injection impossible.  Here's a simple example taking the user's input as the parameters:</p>\n\n<pre><code>public insertUser(String name, String email) {\n   Connection conn = null;\n   PreparedStatement stmt = null;\n   try {\n      conn = setupTheDatabaseConnectionSomehow();\n      stmt = conn.prepareStatement(\"INSERT INTO person (name, email) values (?, ?)\");\n      stmt.setString(1, name);\n      stmt.setString(2, email);\n      stmt.executeUpdate();\n   }\n   finally {\n      try {\n         if (stmt != null) { stmt.close(); }\n      }\n      catch (Exception e) {\n         // log this error\n      }\n      try {\n         if (conn != null) { conn.close(); }\n      }\n      catch (Exception e) {\n         // log this error\n      }\n   }\n}\n</code></pre>\n\n<p>No matter what characters are in name and email, those characters will be placed directly in the database.  They won't affect the INSERT statement in any way.</p>\n\n<p>There are different set methods for different data types -- which one you use depends on what your database fields are.  For example, if you have an INTEGER column in the database, you should use a <code>setInt</code> method.  <a href=\"http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html\">The PreparedStatement documentation</a> lists all the different methods available for setting and getting data.</p>\n    "},{"t":"Regex Match all characters between two strings","l":"http://stackoverflow.com/questions/6109882/regex-match-all-characters-between-two-strings","q":"\n\n<p>Example:\n\"This is just\\na simple sentence\".</p>\n\n<p>I want to match every character between \"This is\" and \"sentence\". Line breaks should be ignored. I can't figure out, what the correct syntax is.</p>\n    ","a":"\n<p>For example</p>\n\n<pre><code>(?&lt;=This is)(.*)(?=sentence)\n</code></pre>\n\n<p><a href=\"http://regexr.com?2tr28\">Regexr</a></p>\n\n<p>I used lookbehind <code>(?&lt;=)</code> and look ahead <code>(?=)</code> so that \"This is\" and \"sentence\" is not included in the match, but this is up to your use case, you can also simply write <code>This is(.*)sentence</code>.</p>\n\n<p>The important thing here is that you activate the \"dotall\" mode of your regex engine, so that the <code>.</code> is matching the newline. But how you do this depends on your regex engine.</p>\n\n<p>The next thing is if you use <code>.*</code> or <code>.*?</code>. The first one is greedy and will match till the last \"sentence\" in your string, the second one is lazy and will match till the next \"sentence\" in your string.</p>\n\n<p><strong>Update</strong></p>\n\n<p><a href=\"http://gskinner.com/RegExr/?2tr2n\">Regexr</a></p>\n\n<pre><code>This is(?s)(.*)sentence\n</code></pre>\n\n<p>Where the (?s) turns on the dotall modifier, making the <code>.</code> matching the newline characters.</p>\n\n<p><strong>Update 2:</strong></p>\n\n<pre><code>(?&lt;=is \\()(.*?)(?=\\s*\\))\n</code></pre>\n\n<p>is matching your example \"This is (a simple) sentence\". See here on <a href=\"http://regexr.com?2tr5t\">Regexr</a></p>\n    "},{"t":"Regex lookahead, lookbehind and atomic groups","l":"http://stackoverflow.com/questions/2973436/regex-lookahead-lookbehind-and-atomic-groups","q":"\n\n<p>I've found these things in my regex body but I haven't got a clue what for I can use them?\nDoes somebody got some examples so I can try to  understand how they work?</p>\n\n<pre><code>(?!) - negative lookahead\n(?=) - positive lookahead\n(?&lt;=) - positive lookbehind\n(?&lt;!) - negative lookbehind\n\n(?&gt;) - atomic group\n</code></pre>\n    ","a":"\n<p>Lookarounds are zero width assertions. The check for a regex (towards right or left of the current position - based on ahead or behind), succeeds or fails when a match is found (based on if it is positive or negative) and discards the matched portion. They don't consume any character - the matching for regex following them (if any), will start at the same cursor position. </p>\n\n<p>Read <a href=\"http://www.regular-expressions.info/lookaround.html\">regular-expression.info</a> for more details.</p>\n\n<ul>\n<li>Positive lookahead:  </li>\n</ul>\n\n<p>Syntax:</p>\n\n<pre><code>(?=REGEX_1)REGEX_2\n</code></pre>\n\n<p>Match only if REGEX_1 matches; after matching REGEX_1, the match is discarded and searching for REGEX_2 starts at the same position.</p>\n\n<p>example:</p>\n\n<pre><code>(?=[a-z0-9]{4}$)[a-z]{1,2}[0-9]{2,3}\n</code></pre>\n\n<p>REGEX_1 is <code>[a-z0-9]{4}$</code> which matches four alphanumeric chars followed by end of line.<br>\nREGEX_2 is <code>[a-z]{1,2}[0-9]{2,3}</code> which matches one or two letters followed by two or three digits.</p>\n\n<p>REGEX_1 makes sure that the length of string is indeed 4, but doesn't consume any characters so that search for REGEX_2 starts at the same location. Now REGEX_2 makes sure that the string matches some other rules. Without look-ahead it would match strings of length three or five.</p>\n\n<ul>\n<li>Negative lookahead</li>\n</ul>\n\n<p>Syntax:</p>\n\n<pre><code>(?!REGEX_1)REGEX_2\n</code></pre>\n\n<p>Match only if REGEX_1 does not match; after checking REGEX_1, the search for REGEX_2 starts at the same position.</p>\n\n<p>example:</p>\n\n<pre><code>(?!.*\\bFWORD\\b)\\w{10,30}$\n</code></pre>\n\n<p>The look-ahead part checks for the <code>FWORD</code> in the string and fails if it finds it. If it doesn't find <code>FWORD</code>, the look-ahead succeeds and the following part verifies that the string's length is between 10 and 30 and that it contains only word characters <code>a-zA-Z0-9_</code></p>\n\n<p>Look-behind is similar to look-ahead: it just looks behind the current cursor position. Some regex flavors like javascript doesn't support look-behind assertions. And most flavors that support it (PHP, Python etc) require that look-behind portion to have a fixed length.</p>\n\n<ul>\n<li>Atomic groups basically discards/forgets the subsequent tokens in the group once a token matches. Check this page for examples of <a href=\"http://www.regular-expressions.info/atomic.html\">atomic groups</a></li>\n</ul>\n    "},{"t":"C++: what regex library should I use? [closed]","l":"http://stackoverflow.com/questions/181624/c-what-regex-library-should-i-use","q":"\n\n<p>I'm working on a commercial (not open source) C++ project that runs on a  linux-based system.  I need to do some regex within the C++ code.  (I know:  I now have 2 problems.)</p>\n\n<p>QUESTION:  What libraries do people who regularly do regex from C/C++ recommend I look into?  A quick search has brought the following to my attention:</p>\n\n<p>1) Boost.Regex (I need to go read the Boost Software License, but this question is not about software licenses)</p>\n\n<p>2) C (not C++) POSIX regex (#include &lt;regex.h&gt;, regcomp, regexec, etc.)</p>\n\n<p>3) <a href=\"http://freshmeat.net/projects/cpp_regex/\">http://freshmeat.net/projects/cpp_regex/</a>  (I know nothing about this one; seems to be GPL, therefore not usable on this project)</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>Thanks for all the suggestions.</p>\n\n<p>I tried out a few things today, and with the stuff we're trying to do, I opted for the simplest solution where I don't have to download any other 3rd-party library.  In the end, I #include &lt;regex.h&gt; and used the standard C POSIX calls regcomp() and regexec().  Not C++, but in a pinch this proved to be the easiest.</p>\n    "},{"t":"How to find patterns across multiple lines using grep?","l":"http://stackoverflow.com/questions/2686147/how-to-find-patterns-across-multiple-lines-using-grep","q":"\n\n<p>I want to find files that have \"abc\" AND \"efg\" in that order, and those two strings are on different lines in that file. Eg: a file with content:</p>\n\n<pre><code>blah blah..\nblah blah..\nblah abc blah\nblah blah..\nblah blah..\nblah blah..\nblah efg blah blah\nblah blah..\nblah blah..\n</code></pre>\n\n<p>Should be matched.</p>\n    ","a":"\n<p>Grep is not sufficient for this operation.</p>\n\n<p><a href=\"http://linuxcommand.gds.tuwien.ac.at/man_pages/pcregrep1.html\">pcregrep</a> which is found in most of the modern Linux systems can be used as</p>\n\n<pre><code>pcregrep -M  'abc.*(\\n|.)*efg' test.txt\n</code></pre>\n    "},{"t":"How do I convert CamelCase into human-readable names in Java?","l":"http://stackoverflow.com/questions/2559759/how-do-i-convert-camelcase-into-human-readable-names-in-java","q":"\n\n<p>I'd like to write a method that converts CamelCase into a human-readable name.</p>\n\n<p>Here's the test case:</p>\n\n<pre><code>public void testSplitCamelCase() {\n    assertEquals(\"lowercase\", splitCamelCase(\"lowercase\"));\n    assertEquals(\"Class\", splitCamelCase(\"Class\"));\n    assertEquals(\"My Class\", splitCamelCase(\"MyClass\"));\n    assertEquals(\"HTML\", splitCamelCase(\"HTML\"));\n    assertEquals(\"PDF Loader\", splitCamelCase(\"PDFLoader\"));\n    assertEquals(\"A String\", splitCamelCase(\"AString\"));\n    assertEquals(\"Simple XML Parser\", splitCamelCase(\"SimpleXMLParser\"));\n    assertEquals(\"GL 11 Version\", splitCamelCase(\"GL11Version\"));\n}\n</code></pre>\n    ","a":"\n<p>This works with your testcases:</p>\n\n<pre><code>static String splitCamelCase(String s) {\n   return s.replaceAll(\n      String.format(\"%s|%s|%s\",\n         \"(?&lt;=[A-Z])(?=[A-Z][a-z])\",\n         \"(?&lt;=[^A-Z])(?=[A-Z])\",\n         \"(?&lt;=[A-Za-z])(?=[^A-Za-z])\"\n      ),\n      \" \"\n   );\n}\n</code></pre>\n\n<p>Here's a test harness:</p>\n\n<pre><code>    String[] tests = {\n        \"lowercase\",        // [lowercase]\n        \"Class\",            // [Class]\n        \"MyClass\",          // [My Class]\n        \"HTML\",             // [HTML]\n        \"PDFLoader\",        // [PDF Loader]\n        \"AString\",          // [A String]\n        \"SimpleXMLParser\",  // [Simple XML Parser]\n        \"GL11Version\",      // [GL 11 Version]\n        \"99Bottles\",        // [99 Bottles]\n        \"May5\",             // [May 5]\n        \"BFG9000\",          // [BFG 9000]\n    };\n    for (String test : tests) {\n        System.out.println(\"[\" + splitCamelCase(test) + \"]\");\n    }\n</code></pre>\n\n<p>It uses zero-length matching regex with lookbehind and lookforward to find where to insert spaces. Basically there are 3 patterns, and I use <code>String.format</code> to put them together to make it more readable.</p>\n\n<p>The three patterns are:</p>\n\n<h3>UC behind me, UC followed by LC in front of me</h3>\n\n<pre><code>  XMLParser   AString    PDFLoader\n    /\\        /\\           /\\\n</code></pre>\n\n<h3>non-UC behind me, UC in front of me</h3>\n\n<pre><code> MyClass   99Bottles\n  /\\        /\\\n</code></pre>\n\n<h3>Letter behind me, non-letter in front of me</h3>\n\n<pre><code> GL11    May5    BFG9000\n  /\\       /\\      /\\\n</code></pre>\n\n<hr>\n\n<h3>References</h3>\n\n<ul>\n<li><a href=\"http://www.regular-expressions.info/lookaround.html\">regular-expressions.info/Lookarounds</a></li>\n</ul>\n\n<h3>Related questions</h3>\n\n<p>Using zero-length matching lookarounds to split:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2910536/regex-split-string-but-keep-separators\">Regex split string but keep separators</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2819933/java-split-is-eating-my-characters/\">Java split is eating my characters</a></li>\n</ul>\n    "},{"t":"Java how to replace 2 or more spaces with single space in string and delete leading spaces only","l":"http://stackoverflow.com/questions/2932392/java-how-to-replace-2-or-more-spaces-with-single-space-in-string-and-delete-lead","q":"\n\n<p>Looking for quick, simple way in Java to change this string </p>\n\n<pre><code>\" hello     there   \"\n</code></pre>\n\n<p>to something that looks like this</p>\n\n<pre><code>\"hello there\"\n</code></pre>\n\n<p>where I replace all those multiple spaces with a single space, except I also want the one or more spaces at the beginning of string to be gone.</p>\n\n<p>Something like this gets me partly there</p>\n\n<pre><code>String mytext = \" hello     there   \";\nmytext = mytext.replaceAll(\"( )+\", \" \");\n</code></pre>\n\n<p>but not quite.</p>\n    ","a":"\n<p>Try this:</p>\n\n<pre><code>String after = before.trim().replaceAll(\" +\", \" \");\n</code></pre>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://java.sun.com/javase/6/docs/api/java/lang/String.html#trim%28%29\"><code>String.trim()</code></a>\n<ul>\n<li>Returns a copy of the string, with leading and trailing whitespace omitted.</li>\n</ul></li>\n<li><a href=\"http://www.regular-expressions.info/repetitions.html\">regular-expressions.info/Repetition</a></li>\n</ul>\n\n<hr>\n\n<h3>No <code>trim()</code> regex</h3>\n\n<p>It's also possible to do this with just one <code>replaceAll</code>, but this is much less readable than the <code>trim()</code> solution. Nonetheless, it's provided here just to show what regex can do:</p>\n\n<pre><code>    String[] tests = {\n        \"  x  \",          // [x]\n        \"  1   2   3  \",  // [1 2 3]\n        \"\",               // []\n        \"   \",            // []\n    };\n    for (String test : tests) {\n        System.out.format(\"[%s]%n\",\n            test.replaceAll(\"^ +| +$|( )+\", \"$1\")\n        );\n    }\n</code></pre>\n\n<p>There are 3 alternates:</p>\n\n<ul>\n<li><code>^_+</code> : any sequence of spaces at the beginning of the string\n<ul>\n<li>Match and replace with <code>$1</code>, which captures the empty string</li>\n</ul></li>\n<li><code>_+$</code> : any sequence of spaces at the end of the string\n<ul>\n<li>Match and replace with <code>$1</code>, which captures the empty string</li>\n</ul></li>\n<li><code>(_)+</code> : any sequence of spaces that matches none of the above, meaning it's in the middle\n<ul>\n<li>Match and replace with <code>$1</code>, which captures a single space</li>\n</ul></li>\n</ul>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://www.regular-expressions.info/anchors.html\">regular-expressions.info/Anchors</a></li>\n</ul>\n    "},{"t":"How can I match multiple occurrences with a regex in JavaScript similar to PHP's preg_match_all()?","l":"http://stackoverflow.com/questions/520611/how-can-i-match-multiple-occurrences-with-a-regex-in-javascript-similar-to-phps","q":"\n\n<p>I am trying to parse url-encoded strings that are made up of key=value pairs separated by either <code>&amp;</code> or <code>&amp;amp;</code>. </p>\n\n<p>The following will only match the first occurrence, breaking apart the keys and values into separate result elements:</p>\n\n<pre><code>var result = mystring.match(/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/)\n</code></pre>\n\n<p>The results for the string '1111342=Adam%20Franco&amp;348572=Bob%20Jones' would be:</p>\n\n<pre><code>['1111342', 'Adam%20Franco']\n</code></pre>\n\n<p>Using the global flag, 'g', will match all occurrences, but only return the fully matched sub-strings, not the separated keys and values:</p>\n\n<pre><code>var result = mystring.match(/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/g)\n</code></pre>\n\n<p>The results for the string '1111342=Adam%20Franco&amp;348572=Bob%20Jones' would be:</p>\n\n<pre><code>['1111342=Adam%20Franco', '&amp;348572=Bob%20Jones']\n</code></pre>\n\n<p>While I could split the string on <code>&amp;</code> and break apart each key/value pair individually, is there any way using JavaScript's regular expression support to match multiple occurrences of the pattern <code>/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/</code> similar to PHP's <code>preg_match_all()</code> function?</p>\n\n<p>I'm aiming for some way to get results with the sub-matches separated like:</p>\n\n<pre><code>[['1111342', '348572'], ['Adam%20Franco', 'Bob%20Jones']]\n</code></pre>\n\n<p>or </p>\n\n<pre><code>[['1111342', 'Adam%20Franco'], ['348572', 'Bob%20Jones']]\n</code></pre>\n    ","a":"\n<p>I would suggest an alternative regex, using sub-groups to capture name and value of the parameters individually:</p>\n\n<pre><code>function getUrlParams(url) {\n  var re = /(?:\\?|&amp;(?:amp;)?)([^=&amp;#]+)(?:=?([^&amp;#]*))/g,\n      match, params = {},\n      decode = function (s) {return decodeURIComponent(s.replace(/\\+/g, \" \"));};\n\n  if (typeof url == \"undefined\") url = document.location.href;\n\n  while (match = re.exec(url)) {\n    params[decode(match[1])] = decode(match[2]);\n  }\n  return params;\n}\n\nvar result = getUrlParams(\"http://maps.google.de/maps?f=q&amp;source=s_q&amp;hl=de&amp;geocode=&amp;q=Frankfurt+am+Main&amp;sll=50.106047,8.679886&amp;sspn=0.370369,0.833588&amp;ie=UTF8&amp;ll=50.116616,8.680573&amp;spn=0.35972,0.833588&amp;z=11&amp;iwloc=addr\");\n</code></pre>\n\n<p><code>result</code> is an object:</p>\n\n<pre>{\n  f: \"q\"\n  geocode: \"\"\n  hl: \"de\"\n  ie: \"UTF8\"\n  iwloc: \"addr\"\n  ll: \"50.116616,8.680573\"\n  q: \"Frankfurt am Main\"\n  sll: \"50.106047,8.679886\"\n  source: \"s_q\"\n  spn: \"0.35972,0.833588\"\n  sspn: \"0.370369,0.833588\"\n  z: \"11\"\n}\n</pre>\n\n<p>The regex breaks down as follows:</p>\n\n<pre>(?:            # non-capturing group\n  \\?|&amp;         #   \"?\" or \"&amp;\"\n  (?:amp;)?    #   (allow \"&amp;amp;\", for wrongly HTML-encoded URLs)\n)              # end non-capturing group\n(              # group 1\n  [^=&amp;#]+      #   any character except \"=\", \"&amp;\" or \"#\"; at least once\n)              # end group 1 - this will be the parameter's name\n(?:            # non-capturing group\n  =?           #   an \"=\", optional\n  (            #   group 2\n    [^&amp;#]*     #     any character except \"&amp;\" or \"#\"; any number of times\n  )            #   end group 2 - this will be the parameter's value\n)              # end non-capturing group\n</pre>\n    "},{"t":"Javascript + Unicode regexes","l":"http://stackoverflow.com/questions/280712/javascript-unicode-regexes","q":"\n\n<p>Does anyone know of any JavaScript libraries that support Unicode-aware regular expressions? For example, there should be something akin to \\w that can match any code-point in Letters or Marks category (not just the ASCII ones), and hopefully have filters like [[P*]] for punctuation etc.</p>\n    ","a":"\n<h2>Situation for ES 6</h2>\n\n<p>The upcoming ECMAScript language specification, edition 6, includes Unicode-aware regular expressions. Support must be enabled with the <code>u</code> modifier on the regex. See <a href=\"https://mathiasbynens.be/notes/es6-unicode-regex\"><em>Unicode-aware regular expressions in ES6</em></a>.</p>\n\n<p>Until ES 6 is finished and widely adopted among browser vendors you're still on your own, though. <strong>Update:</strong> There is now <a href=\"http://mths.be/regexpu\">a transpiler named <em>regexpu</em></a> that translates ES6 Unicode regular expressions into equivalent ES5. It can be used as part of your build process. <a href=\"http://mothereff.in/regexpu\">Try it out online.</a></p>\n\n<h2>Situation for ES 5 and below</h2>\n\n<p>Even though JavaScript operates on Unicode strings, it does not implement Unicode-aware character classes and has no concept of POSIX character classes or Unicode blocks/sub-ranges.</p>\n\n<ul>\n<li><p><a href=\"https://mathiasbynens.be/notes/javascript-unicode#regex\">Issues with Unicode in JavaScript regular expressions</a></p></li>\n<li><p>Check your expectations here: <a href=\"http://hamstersoup.com/javascript/regexp_character_class_tester.html\">Javascript RegExp Unicode Character Class tester</a> (<em>Edit:</em> the original page is down, <a href=\"http://web.archive.org/web/20101104085449/http://hamstersoup.com/javascript/regexp_character_class_tester.html\">the Internet Archive still has a copy</a>.)</p></li>\n<li><p>Flagrant Badassery has an article on <a href=\"http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode\">JavaScript, Regex, and Unicode</a> that sheds some light on the matter.</p></li>\n<li><p>Also read <a href=\"http://stackoverflow.com/questions/14389/\">Regex and Unicode</a> here on SO. Probably you have to build your own \"punctuation character class\".</p></li>\n<li><p>Check out the <a href=\"http://kourge.net/projects/regexp-unicode-block\">Regular Expression: Match Unicode Block Range</a> builder, which lets you build a JavaScript regular expression that matches characters that fall in any number of specified Unicode blocks.  </p>\n\n<p>I just did it for the \"General Punctuation\" and \"Supplemental Punctuation\" sub-ranges, and the result is as simple and straight-forward as I would have expected it:</p>\n\n<pre><code>[\\u2000-\\u206F\\u2E00-\\u2E7F]\n</code></pre></li>\n<li><p>There also is <a href=\"http://www.xregexp.com/\">XRegExp</a>, a project that brings <a href=\"http://www.xregexp.com/plugins/#unicode\">Unicode support to JavaScript</a> by offering an alternative regex engine with extended capabilities.</p></li>\n</ul>\n    "},{"t":"PHP validation/regex for URL","l":"http://stackoverflow.com/questions/206059/php-validation-regex-for-url","q":"\n\n<p>I've been looking for a simple regex for URL's, does anybody have one handy that works well?  I didn't find one with the zend framework validation classes and have seen several implementations.</p>\n\n<p>Thanks  </p>\n    ","a":"\n<p>I used this on a few projects, I don't believe I've run into issues, but I'm sure it's not exhaustive:</p>\n\n<pre><code>$text = preg_replace(\n  '#((https?|ftp)://(\\S*?\\.\\S*?))([\\s)\\[\\]{},;\"\\':&lt;]|\\.\\s|$)#i',\n  \"'&lt;a href=\\\"$1\\\" target=\\\"_blank\\\"&gt;$3&lt;/a&gt;$4'\",\n  $text\n);\n</code></pre>\n\n<p>Most of the random junk at the end is to deal with situations like <code>http://domain.com.</code> in a sentence (to avoid matching the trailing period). I'm sure it could be cleaned up but since it worked. I've more or less just copied it over from project to project.</p>\n    "},{"t":"What is the ultimate postal code and zip regex?","l":"http://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex","q":"\n\n<p>I'm looking for the ultimate postal code and zip code regex. I'm looking for something that will cover most (hopefully all) of the world.</p>\n    ","a":"\n<p>There is none.</p>\n\n<p>Postal/zip codes around the world don't follow a common pattern. In some countries they are made up by numbers, in others they can be combinations of numbers an letters, some can contain spaces, others dots, the number of characters can vary from two to at least six...</p>\n\n<p>What you could do (theoretically) is create a seperate regex for every country in the world, not recommendable IMO. But you would still be missing on the validation part: Zip code <code>12345</code> may exist, but <code>12346</code> not, maybe <code>12344</code> doesn't exist either. How do you check for that with a regex? </p>\n\n<p>You can't.</p>\n    "},{"t":"Multi-line regex support in Vim","l":"http://stackoverflow.com/questions/784176/multi-line-regex-support-in-vim","q":"\n\n<p>I notice the standard regex syntax for matching across multiple lines is to use /s, like so:</p>\n\n<pre><code>This is\\nsome text\n/This.*text/s\n</code></pre>\n\n<p>This works in Perl for instance but doesn't seem to be supported in Vim. Instead, I have to be much more specific:</p>\n\n<pre><code>/This[^\\r\\n]*[\\r\\n]*text/\n</code></pre>\n\n<p>I can't find any reason for why this should be, so I'm thinking I probably just missed the relevant bits in the vim help. </p>\n\n<p>Can anyone confirm this behaviour one way or the other?</p>\n    ","a":"\n<p>Yes, Perl's <code>//s</code> modifier isn't available on Vim regexes.  See <code>:h perl-patterns</code> for details and a list of other differences between Vim and Perl regexes.</p>\n\n<p>Instead you can use <code>\\_.</code>, which means \"match any single character including newline\".  It's a bit shorter than what you have.  See <code>:h /\\_.</code>.</p>\n\n<pre><code>/This\\_.*text/\n</code></pre>\n    "},{"t":"Named capturing groups in JavaScript regex?","l":"http://stackoverflow.com/questions/5367369/named-capturing-groups-in-javascript-regex","q":"\n\n<p>As far as I know there is no such thing as named capturing groups in JavaScript. What is the alternative way to get similar functionality?</p>\n    ","a":"\n<p>Generally, you can do everything with normal (numbered) capturing groups that you can do with named capturing groups, you just need to keep track of the numbers. </p>\n\n<p>There are only two \"structural\" advantages of named capturing groups I can think of: </p>\n\n<ol>\n<li><p>In some regex flavors (.NET and JGSoft, as far as I know), you can use the same name for different groups in your regex (<a href=\"http://stackoverflow.com/questions/5149524/regular-expression-to-find-separator-dots-in-formula/5164598#5164598\">see here for an example where this matters</a>). But most regex flavors do not support this functionality anyway.</p></li>\n<li><p>If you need to refer to numbered capturing groups in a situation where they are surrounded by digits, you can get a problem. Let's say you want to add a zero to a digit and therefore want to replace <code>(\\d)</code> with <code>$10</code>. In JavaScript, this will work (as long as you have fewer than 10 capturing group in your regex), but Perl will think you're looking for backreference number <code>10</code> instead of number <code>1</code>, followed by a <code>0</code>. In Perl, you can use <code>${1}0</code> in this case.</p></li>\n</ol>\n\n<p>Other than that, named capturing groups are just \"syntactic sugar\". It helps to use capturing groups only when you really need them and to use non-capturing groups <code>(?:...)</code> in all other circumstances.</p>\n\n<p>The problem with JavaScript is that it does not support verbose regexes which would make the creation of readable, complex regular expressions a lot easier.</p>\n    "},{"t":"Regex: matching up to the first occurrence of a character","l":"http://stackoverflow.com/questions/2013124/regex-matching-up-to-the-first-occurrence-of-a-character","q":"\n\n<p>I am looking for a pattern that matches everything <strong>until</strong> the first occurrence of a specific character, say a \";\" - a <strong>semicolon</strong>.</p>\n\n<p>I wrote this:</p>\n\n<pre><code>/^(.*);/\n</code></pre>\n\n<p>But it actually matches everything (including the semicolon) until the last occurrence of a semicolon.</p>\n    ","a":"\n<p>You need</p>\n\n<pre><code>/[^;]*/\n</code></pre>\n\n<p>The [^;] is a <em>character class</em>, it matches everything but a semicolon.</p>\n\n<p>To cite the <a href=\"http://perldoc.perl.org/perlre.html\"><code>perlre</code></a> manpage:</p>\n\n<blockquote>\n  <p>You can specify a character class, by enclosing a list of characters in [] , which will match any character from the list. If the first character after the \"[\" is \"^\", the class matches any character not in the list.</p>\n</blockquote>\n\n<p>This should work in most regex dialects.</p>\n    "},{"t":"Case insensitive Python regular expression without re.compile","l":"http://stackoverflow.com/questions/500864/case-insensitive-python-regular-expression-without-re-compile","q":"\n\n<p>In Python, I can compile a regular expression to be case-insensitive using <code>re.compile</code>:</p>\n\n<pre><code>&gt;&gt;&gt; s = 'TeSt'\n&gt;&gt;&gt; casesensitive = re.compile('test')\n&gt;&gt;&gt; ignorecase = re.compile('test', re.IGNORECASE)\n&gt;&gt;&gt; \n&gt;&gt;&gt; print casesensitive.match(s)\nNone\n&gt;&gt;&gt; print ignorecase.match(s)\n&lt;_sre.SRE_Match object at 0x02F0B608&gt;\n</code></pre>\n\n<p>Is there a way to do the same, but without using <code>re.compile</code>. I can't find anything like Perl's <code>i</code> suffix (e.g. <code>m/test/i</code>) in the documentation.</p>\n    ","a":"\n<p>It looks like you just need to pass it as a param to <a href=\"http://www.regular-expressions.info/python.html\">search</a> or <a href=\"http://mysite.verizon.net/bcorfman/2007/12/something-i-hate-about-pythons-re.html#c4780382480608248726\">match</a>:</p>\n\n<pre><code>re.search('test', 'TeSt', re.IGNORECASE)\nre.match('test', 'TeSt', re.IGNORECASE)\n</code></pre>\n\n<p>For re.sub, it looks like <a href=\"http://m0j0.wordpress.com/2007/05/18/regular-expressions-with-python-re-module/\">this might</a> help:</p>\n\n<pre><code>result = re.sub(r'(?i)test', 'XXXX', 'TeSt')\n</code></pre>\n    "},{"t":"How to use regex with find command?","l":"http://stackoverflow.com/questions/6844785/how-to-use-regex-with-find-command","q":"\n\n<p>I have some images named with generated uuid1 string. For example 81397018-b84a-11e0-9d2a-001b77dc0bed.jpg. I want to find out all these images using \"find\" command:</p>\n\n<pre><code>find . -regex \"[a-f0-9\\-]\\{36\\}\\.jpg\".\n</code></pre>\n\n<p>But it doesn't work. Something wrong with the regex? Could someone help me with this?</p>\n    ","a":"\n<pre><code>find . -regextype sed -regex \".*/[a-f0-9\\-]\\{36\\}\\.jpg\"\n</code></pre>\n\n<p>Note that you need to specify <code>.*/</code> in the beginning because <code>find</code> matches the whole path.</p>\n\n<p>Example:</p>\n\n<pre><code>susam@nifty:~/so$ find . -name \"*.jpg\"\n./foo-111.jpg\n./test/81397018-b84a-11e0-9d2a-001b77dc0bed.jpg\n./81397018-b84a-11e0-9d2a-001b77dc0bed.jpg\nsusam@nifty:~/so$ \nsusam@nifty:~/so$ find . -regextype sed -regex \".*/[a-f0-9\\-]\\{36\\}\\.jpg\"\n./test/81397018-b84a-11e0-9d2a-001b77dc0bed.jpg\n./81397018-b84a-11e0-9d2a-001b77dc0bed.jpg\n</code></pre>\n\n<p>My version of find:</p>\n\n<pre><code>$ find --version\nfind (GNU findutils) 4.4.2\nCopyright (C) 2007 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by Eric B. Decker, James Youngman, and Kevin Dalley.\nBuilt using GNU gnulib version e5573b1bad88bfabcda181b9e0125fb0c52b7d3b\nFeatures enabled: D_TYPE O_NOFOLLOW(enabled) LEAF_OPTIMISATION FTS() CBO(level=0) \nsusam@nifty:~/so$ \nsusam@nifty:~/so$ find . -regextype foo -regex \".*/[a-f0-9\\-]\\{36\\}\\.jpg\"\nfind: Unknown regular expression type `foo'; valid types are `findutils-default', `awk', `egrep', `ed', `emacs', `gnu-awk', `grep', `posix-awk', `posix-basic', `posix-egrep', `posix-extended', `posix-minimal-basic', `sed'.\n</code></pre>\n    "},{"t":"Regex: Remove lines containing","l":"http://stackoverflow.com/questions/5876296/regex-remove-lines-containing","q":"\n\n<p>I have a long document of commands. Using notepad++ or regex, I want to delete all lines containing \"help\" including keyboard_help etc.</p>\n\n<p>How can this be done?</p>\n    ","a":"\n<p>This is also possible with Notepad++</p>\n\n<ul>\n<li><p>Goto the search menu <kbd>Ctrl</kbd>+<kbd>F</kbd> and there\nto the <code>\"Mark\"</code> tab. Check <code>\"Bookmark\nline\"</code> (if there is no <code>\"Mark\"</code> tab update to the current version).</p></li>\n<li><p>Then just enter your search term and\nclick <code>\"Mark All\"</code></p>\n\n<p><code>==&gt;</code> All line containing the search term are bookmarked.</p></li>\n<li><p>Now go to the Menu <code>\"Search -&gt; Bookmark -&gt; Remove Bookmarked lines\"</code></p></li>\n<li><p>Done.</p></li>\n</ul>\n    "},{"t":"Regular Expressions and negating a whole character group","l":"http://stackoverflow.com/questions/977251/regular-expressions-and-negating-a-whole-character-group","q":"\n\n<p>I'm attempting something which I feel should be fairly obvious to me but it's not.  I'm trying to match a string which does NOT contain a specific sequence of characters.  I've tried using <code>[^ab]</code>, <code>[^(ab)]</code>, etc. to match strings containing no 'a's or 'b's, or only 'a's or only 'b's or 'ba' but not match on 'ab'.  The examples I gave won't match 'ab' it's true but they also won't match 'a' alone and I need them to.  Is there some simple way to do this?</p>\n    ","a":"\n<p>Use negative lookahead:</p>\n\n<pre><code>^(?!.*ab).*$\n</code></pre>\n    "},{"t":"What's the difference between “groups” and “captures” in .NET regular expressions?","l":"http://stackoverflow.com/questions/3320823/whats-the-difference-between-groups-and-captures-in-net-regular-expression","q":"\n\n<p>I'm a little fuzzy on what the difference between a \"group\" and a \"capture\" are when it comes to .NET's regular expression language.  Consider the following C# code:</p>\n\n<pre><code>MatchCollection matches = Regex.Matches(\"{Q}\", @\"^\\{([A-Z])\\}$\");\n</code></pre>\n\n<p>I expect this to result in a single capture for the letter 'Q', but if I print the properties of the returned <code>MatchCollection</code>, I see:</p>\n\n<pre><code>matches.Count: 1\nmatches[0].Value: {Q}\n        matches[0].Captures.Count: 1\n                matches[0].Captures[0].Value: {Q}\n        matches[0].Groups.Count: 2\n                matches[0].Groups[0].Value: {Q}\n                matches[0].Groups[0].Captures.Count: 1\n                        matches[0].Groups[0].Captures[0].Value: {Q}\n                matches[0].Groups[1].Value: Q\n                matches[0].Groups[1].Captures.Count: 1\n                        matches[0].Groups[1].Captures[0].Value: Q\n</code></pre>\n\n<p>What exactly is going on here?  I understand that there's also a capture for the entire match, but how do the groups come in?  And why doesn't <code>matches[0].Captures</code> include the capture for the letter 'Q'?</p>\n    ","a":"\n<p>You won't be the first who's fuzzy about it. Here's what the famous <a href=\"http://oreilly.com/catalog/9781565922570\">Jeffrey Friedl</a> has to say about it (pages 437+):</p>\n\n<blockquote>\n  <p>Depending on your view, it either adds\n  an interesting new dimension to the\n  match results, or adds confusion and\n  bloat.</p>\n</blockquote>\n\n<p>And further on:</p>\n\n<blockquote>\n  <p>The main difference between a Group\n  object and a Capture object is that\n  each Group object contains a\n  collection of Captures representing\n  all the <em>intermediary</em>  matches by the\n  group during the match, as well as the\n  final text matched by the group.</p>\n</blockquote>\n\n<p>And a few pages later, this is his conclusion:</p>\n\n<blockquote>\n  <p>After getting past the .NET\n  documentation and actually\n  understanding what these objects add,\n  I've got mixed feelings about them. On\n  one hand, it's an interesting\n  innovation [..] on the other hand, it\n  seems to add an efficiency burden [..]\n  of a functionality that won't be used\n  in the majority of cases</p>\n</blockquote>\n\n<p>In other words: they are very similar, but occasionally and as it happens, you'll find a use for them. Before you grow another grey beard, you may even get fond of the Captures...</p>\n\n<hr>\n\n<p>Since neither the above, nor what's said in the other post really seems to answer your question, consider the following. Think of Captures as a kind of history tracker. When the regex makes his match, it goes through the string from left to right (ignoring backtracking for a moment) and when it encounters a matching capturing parentheses, it will store that in <code>$x</code> (x being any digit), let's say <code>$1</code>. </p>\n\n<p>Normal regex engines, when the capturing parentheses are to be repeated, will throw away the current <code>$1</code> and will replace it with the new value. Not .NET, which will keep this history and places it in <code>Captures[0]</code>.</p>\n\n<p>If we change your regex to look as follows: </p>\n\n<pre><code>MatchCollection matches = Regex.Matches(\"{Q}{R}{S}\", @\"(\\{[A-Z]\\})+\");\n</code></pre>\n\n<p>you will notice that the first <code>Group</code> will have one <code>Captures</code> (the first group always being the whole match, i.e., equal to <code>$0</code>) and the second group will hold <code>{S}</code>, i.e. only the last matching group. However, and here's the catch, if you want to find the other two catches, they're in <code>Captures</code>, which contains all intermediary captures for <code>{Q}</code> <code>{R}</code> and <code>{S}</code>.</p>\n\n<p>If you ever wondered how you could get from the multiple-capture, which only shows last match to the individual captures that are clearly there in the string, you must use <code>Captures</code>.</p>\n\n<p><em>A final word on your final question: the total match always has one total Capture, don't mix that with the individual Groups. Captures are only interesting inside groups</em>.</p>\n    "},{"t":"Difference between \\A \\Z and ^ $ in Ruby regular expressions","l":"http://stackoverflow.com/questions/577653/difference-between-a-z-and-in-ruby-regular-expressions","q":"\n\n<p>In the documentation I read:</p>\n\n<blockquote>\n  <p>use \\A and \\Z to match the start and end of the string, ^ and $ match the start/end of a line</p>\n</blockquote>\n\n<p>I am going to apply a regular expression to check username (or e-mail is the same) submitted by user. Which expression should I use with <code>validates_format_of</code> in model? I can't understand the difference: I've always used ^ and $ ...</p>\n    ","a":"\n<p>If you're depending on the regular expression for validation, you always want to use <code>\\A</code> and <code>\\z</code>. <code>^</code> and <code>$</code> will only match up until a newline character, which means they could use an email like <code>me@example.com\\n&lt;script&gt;dangerous_stuff();&lt;/script&gt;</code> and still have it validate, since the regex only sees everything before the <code>\\n</code>.</p>\n\n<p>My recommendation would just be completely stripping new lines from a username or email beforehand, since there's pretty much no legitimate reason for one. Then you can safely use EITHER <code>\\A</code> <code>\\z</code> or <code>^</code> <code>$</code>.</p>\n    "},{"t":"Using sed and grep to search and replace","l":"http://stackoverflow.com/questions/1169927/using-sed-and-grep-to-search-and-replace","q":"\n\n<p>I am using <code>egrep -R</code> followed by a regular expression containing about 10 unions, so like:\n<code>.jpg | .png | .gif</code> etc. This works well, now I would like to replace all strings found with <code>.bmp</code></p>\n\n<p>I was thinking of something like</p>\n\n<pre><code>egrep -lR \"\\.jpg|\\.png|\\.gif\" . | sed \"s/some_expression/.jpg/\" file_it_came_form\n</code></pre>\n\n<p>so the issue here is how do I do a similar union regular expression in <code>sed</code> and how do I tell it to save the changes to the file that it got the input from.</p>\n    ","a":"\n<p>Use this command:</p>\n\n<pre><code>egrep -lRZ \"\\.jpg|\\.png|\\.gif\" . \\\n    | xargs -0 -l sed -i -e 's/\\.jpg\\|\\.gif\\|\\.png/.bmp/g'\n</code></pre>\n\n<ul>\n<li><p><strong><code>egrep</code></strong>: find matching lines using extended regular expressions</p>\n\n<ul>\n<li><p><code>-l</code>: only list matching filenames</p></li>\n<li><p><code>-R</code>: search recursively through all given directories</p></li>\n<li><p><code>-Z</code>: use <code>\\0</code> as record separator</p></li>\n<li><p><code>\"\\.jpg|\\.png|\\.gif\"</code>: match one of the strings <code>\".jpg\"</code>, <code>\".gif\"</code> or <code>\".png\"</code></p></li>\n<li><p><code>.</code>: start the search in the current directory</p></li>\n</ul></li>\n<li><p><strong><code>xargs</code></strong>: execute a command with the stdin as argument</p>\n\n<ul>\n<li><p><code>-0</code>: use <code>\\0</code> as record separator. This is important to match the <code>-Z</code> of <code>egrep</code> and to avoid being fooled by spaces and newlines in input filenames.</p></li>\n<li><p><code>-l</code>: use one line per command as parameter</p></li>\n</ul></li>\n<li><p><strong><code>sed</code></strong>: the *<em>s</em>*tream *<em>ed</em>*itor</p>\n\n<ul>\n<li><p><code>-i</code>: replace the input file with the output without making a backup</p></li>\n<li><p><code>-e</code>: use the following argument as expression</p></li>\n<li><p><code>'s/\\.jpg\\|\\.gif\\|\\.png/.bmp/g'</code>: replace all occurrences of the strings <code>\".jpg\"</code>, <code>\".gif\"</code> or <code>\".png\"</code> with <code>\".bmp\"</code></p></li>\n</ul></li>\n</ul>\n    "},{"t":"PHP Regex to get youtube video ID?","l":"http://stackoverflow.com/questions/3392993/php-regex-to-get-youtube-video-id","q":"\n\n<p>Can someone show me how to get the youtube id out of a url regardless of what other GET variables are in the URL.</p>\n\n<p>Use this video for example: <code>http://www.youtube.com/watch?v=C4kxS1ksqtw&amp;feature=related</code>\n<br>So between <code>v=</code> and before the next <code>&amp;</code></p>\n    ","a":"\n<p><a href=\"http://php.net/manual/en/function.parse-url.php\">Use parse_url()</a> and <a href=\"http://www.php.net/manual/en/function.parse-str.php\">parse_str()</a>.</p>\n\n<p>(You can use regexes for just about anything, but they are very easy to make an error in, so if there are PHP functions specifically for what you are trying to accomplish, use those.)</p>\n\n<p>parse_url takes a string and cuts it up into an array that has a bunch of info. You can work with this array, or you can specify the one item you want as a second argument. In this case we're interested in the query, which is <code>PHP_URL_QUERY</code>.</p>\n\n<p>Now we have the query, which is <code>v=C4kxS1ksqtw&amp;feature=relate</code>, but we only want the part after <code>v=</code>. For this we turn to <code>parse_str</code> which basically works like <code>GET</code> on a string. It takes a string and creates the variables specified in the string. In this case <code>$v</code> and <code>$feature</code> is created. We're only interested in <code>$v</code>.</p>\n\n<p>To be safe, you don't want to just store all the variables from the <code>parse_url</code> in your namespace (see mellowsoon's comment). Instead store the variables as elements of an array, so that you have control over what variables you are storing, and you cannot accidentally overwrite an existing variable.</p>\n\n<p>Putting everything together, we have:</p>\n\n<pre><code>&lt;?php\n$url = \"http://www.youtube.com/watch?v=C4kxS1ksqtw&amp;feature=relate\";\nparse_str( parse_url( $url, PHP_URL_QUERY ), $my_array_of_vars );\necho $my_array_of_vars['v'];    \n  // Output: C4kxS1ksqtw\n?&gt; \n</code></pre>\n\n<p><a href=\"http://codepad.viper-7.com/7TmHqr\"><strong>Working example</strong></a></p>\n\n<hr>\n\n<p>Edit:</p>\n\n<p>hehe - thanks Charles. That made me laugh, I've never seen the Zawinski quote before:</p>\n\n<p><em><code>Some people, when confronted with a problem, think ‘I know, I’ll use regular expressions.’  Now they have two problems.</code></em>\n– <em>Jamie Zawinski</em></p>\n    "},{"t":"A simple way to remove multiple spaces in a string in Python","l":"http://stackoverflow.com/questions/1546226/a-simple-way-to-remove-multiple-spaces-in-a-string-in-python","q":"\n\n<p>Suppose this is the string:</p>\n\n<pre><code>The   fox jumped   over    the log.\n</code></pre>\n\n<p>It would result in:</p>\n\n<pre><code>The fox jumped over the log.\n</code></pre>\n\n<p>What is the simplest, 1-2 liner that can do this? Without splitting and going into lists...</p>\n    ","a":"\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(' +',' ','The     quick brown    fox')\n'The quick brown fox'\n</code></pre>\n    "},{"t":"Using Regular Expressions to Extract a Value in Java","l":"http://stackoverflow.com/questions/237061/using-regular-expressions-to-extract-a-value-in-java","q":"\n\n<p>I have several strings in the rough form:</p>\n\n<pre><code>[some text] [some number] [some more text]\n</code></pre>\n\n<p>I want to extract the text in [some number] using the Java Regex classes.</p>\n\n<p>I know roughly what regular expression I want to use (though all suggestions are welcome). What I'm really interested in are the Java calls to take the regex string and use it on the source data to produce the value of [some number].</p>\n\n<p>EDIT: I should add that I'm only interested in a single [some number] (basically, the first instance). The source strings are short and I'm not going to be looking for multiple occurrences of [some number].</p>\n    ","a":"\n<p>Try:</p>\n\n<pre><code>Pattern p = Pattern.compile(\"^[a-zA-Z]+([0-9]+).*\");\nMatcher m = p.matcher(\"Testing123Testing\");\n\nif (m.find()) {\n    System.out.println(m.group(1));\n}\n</code></pre>\n    "},{"t":"Using Java to find substring of a bigger string using Regular Expression","l":"http://stackoverflow.com/questions/600733/using-java-to-find-substring-of-a-bigger-string-using-regular-expression","q":"\n\n<p>If I have a string like this:</p>\n\n<pre><code>FOO[BAR]\n</code></pre>\n\n<p>I need a generic way to get the \"BAR\" string out of the string so that no matter what string is between the square brackets it would be able to get the string.</p>\n\n<p>e.g.</p>\n\n<pre><code>FOO[DOG] = DOG\nFOO[CAT] = CAT\n</code></pre>\n    ","a":"\n<p>You should be able to use non-greedy quantifiers, specifically *?.  You're going to probably want the following:</p>\n\n<pre><code>Pattern MY_PATTERN = Pattern.compile(\"\\\\[(.*?)\\\\]\");\n</code></pre>\n\n<p>This will give you a pattern that will match your string and put the text within the square brackets in the first group.  Have a look at the <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\">Pattern API Documentation</a> for more information.</p>\n\n<p>To extract the string, you could use something like the following:</p>\n\n<pre><code>Matcher m = MY_PATTERN.matcher(\"FOO[BAR]\");\nwhile (m.find()) {\n    String s = m.group(1);\n    // s now contains \"BAR\"\n}\n</code></pre>\n    "},{"t":"Difference between matches() and find() in Java Regex","l":"http://stackoverflow.com/questions/4450045/difference-between-matches-and-find-in-java-regex","q":"\n\n<p>I am trying to understand the difference between <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#matches%28%29\"><code>matches()</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#find%28%29\"><code>find()</code></a>.</p>\n\n<p>According to the Javadoc, (from what I understand), <code>matches()</code> will search the entire string even if it finds what it is looking for, and <code>find()</code> will stop when it finds what it is looking for.</p>\n\n<p>If that assumption is correct, I cannot see whenever you would want to use <code>matches()</code> instead of <code>find()</code>, unless you want to count the number of matches it finds.</p>\n\n<p>In my opionon the String class should then have <code>find()</code> instead of <code>matches()</code> as an inbuilt method.</p>\n\n<p>So to summarize:</p>\n\n<ol>\n<li>Is my assumption correct?</li>\n<li>When is it useful to use <code>matches()</code> instead of <code>find()</code>?</li>\n</ol>\n    ","a":"\n<p><code>matches</code> tries to match the expression against the entire string and implicitly add a <code>^</code> at the start and <code>$</code> at the end of your pattern, meaning it will not look for a substring. Hence the output of this code:</p>\n\n<pre><code>public static void main(String[] args) throws ParseException {\n    Pattern p = Pattern.compile(\"\\\\d\\\\d\\\\d\");\n    Matcher m = p.matcher(\"a123b\");\n    System.out.println(m.find());\n    System.out.println(m.matches());\n\n    p = Pattern.compile(\"^\\\\d\\\\d\\\\d$\");\n    m = p.matcher(\"123\");\n    System.out.println(m.find());\n    System.out.println(m.matches());\n}\n\n/* output:\ntrue\nfalse\ntrue\ntrue\n*/\n</code></pre>\n\n<p><code>123</code> is a substring of <code>a123b</code> so the <code>find()</code> method outputs true. <code>matches()</code> only 'sees' <code>a123b</code> which is not the same as <code>123</code> and thus outputs false.</p>\n    "},{"t":"Python: Extract numbers from a string","l":"http://stackoverflow.com/questions/4289331/python-extract-numbers-from-a-string","q":"\n\n<p>I would extract all the numbers contained in a string. Which is the better suited for the purpose, regular expressions or the <code>isdigit()</code> method?</p>\n\n<p>Example:</p>\n\n<pre><code>line = \"hello 12 hi 89\"\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>[12, 89]\n</code></pre>\n    ","a":"\n<p>If you only want to extract only positive integers, try the following:</p>\n\n<pre><code>&gt;&gt;&gt; str = \"h3110 23 cat 444.4 rabbit 11 2 dog\"\n&gt;&gt;&gt; [int(s) for s in str.split() if s.isdigit()]\n[23, 11, 2]\n</code></pre>\n\n<p>I would argue that this is better than the regex example for three reasons.  First,  you don't need another module; secondly, it's more readable because you don't need to parse the regex mini-language; and third, it is faster (and thus likely more pythonic):</p>\n\n<pre><code>python -m timeit -s \"str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000\" \"[s for s in str.split() if s.isdigit()]\"\n100 loops, best of 3: 2.84 msec per loop\n\npython -m timeit -s \"import re\" \"str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000\" \"re.findall('\\\\b\\\\d+\\\\b', str)\"\n100 loops, best of 3: 5.66 msec per loop\n</code></pre>\n\n<p>This will not recognize floats, negative integers, or integers in hexadecimal format.  If you can't accept these limitations, <a href=\"http://stackoverflow.com/questions/4289331/python-extract-numbers-of-a-string/4289415#4289415\">slim's answer below</a> will do the trick.</p>\n    "},{"t":"How does {m}{n} (“exactly n times” twice) work?","l":"http://stackoverflow.com/questions/18958747/how-does-mn-exactly-n-times-twice-work","q":"\n\n<p>So, some way or another (playing around), I found myself with a regex like <code>\\d{1}{2}</code>.</p>\n\n<p>Logically, to me, it should mean:</p>\n\n<blockquote>\n  <p>(A digit exactly once) exactly twice, i.e. a digit exactly twice.</p>\n</blockquote>\n\n<p>But it, in fact, appears to just mean \"a digit exactly once\" (thus ignoring the <code>{2}</code>).</p>\n\n<pre><code>String regex = \"^\\\\d{1}{2}$\"; // ^$ to make those not familiar with 'matches' happy\nSystem.out.println(\"1\".matches(regex)); // true\nSystem.out.println(\"12\".matches(regex)); // false\n</code></pre>\n\n<p>Similar results can be seen using <code>{n}{m,n}</code> or similar.</p>\n\n<p>Why does this happen? Is it explicitly stated in regex / Java documentation somewhere or is it just a decision Java developers made on-the-fly or is it maybe a bug?</p>\n\n<p>Or is it in fact not ignored and it actually means something else entirely?</p>\n\n<p>Not that it matters much, but it's not across-the-board regex behaviour, <a href=\"http://www.rubular.com/r/eefKxje4nf\">Rubular</a> does what I expect.</p>\n\n<p>Note - the title is mainly for searchability for users who want to know how it works (not why).</p>\n    ","a":"\n<p>When I input your regex in RegexBuddy using the Java regex syntax, it displays following message</p>\n\n<blockquote>\n  <p>Quantifiers must be preceded by a token that can be repeated «{2}»</p>\n</blockquote>\n\n<p>Changing the regex to explicitly use a grouping <code>^(\\d{1}){2}</code> solves that error and works as you expect.</p>\n\n<hr>\n\n<p>I assume that the java regex engine simply neglects the error/expression and works with what has been compiled so far. </p>\n\n<p><strong>Edit</strong></p>\n\n<p>The reference to the <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html\" rel=\"nofollow\">IEEE-Standard</a> in <a href=\"http://stackoverflow.com/a/18958937/52598\">@piet.t's answer</a> seems to support that assumption.</p>\n\n<p><strong>Edit 2</strong> <em>(kudos to @fncomp)</em></p>\n\n<p>For completeness, one would typically use <code>(?:)</code>to avoid capturing the group. The complete regex then becomes <code>^(?:\\d{1}){2}</code> </p>\n    "},{"t":"Regex Named Groups in Java","l":"http://stackoverflow.com/questions/415580/regex-named-groups-in-java","q":"\n\n<p>It is my understanding that the <code>java.regex</code> package does not have support for named groups (<a href=\"http://www.regular-expressions.info/named.html\">http://www.regular-expressions.info/named.html</a>) so can anyone point me towards a third-party library that does?</p>\n\n<p>I've looked at <a href=\"http://jregex.sourceforge.net/\">jregex</a> but its last release was in 2002 and it didn't work for me (admittedly I only tried briefly) under java5.</p>\n    ","a":"\n<p>(<strong>Update</strong>: <strong>August 2011</strong>)</p>\n\n<p>As <a href=\"http://stackoverflow.com/users/50260/geofflane\">geofflane</a> mentions in <a href=\"http://stackoverflow.com/questions/415580/regex-named-groups-in-java/7033467#7033467\">his answer</a> (upvoted), <a href=\"http://download.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#group%28java.lang.String%29\">Java 7 now support named groups</a>.<br>\n<a href=\"http://stackoverflow.com/users/471272/tchrist\">tchrist</a> points out in the comment that the support is limited.<br>\nHe <strong>details the limitations in his great answer \"<a href=\"http://stackoverflow.com/questions/5767627/java-regex-helper/5771326#5771326\">Java Regex Helper</a>\"</strong>  </p>\n\n<p>Java 7 regex named group support was presented back in <a href=\"http://blogs.oracle.com/xuemingshen/entry/named_capturing_group_in_jdk7\"><strong>September 2010</strong> in Oracle's blog</a>.</p>\n\n<p>In the official release of Java 7, the constructs to support the named capturing group are:</p>\n\n<blockquote>\n  <ul>\n  <li><code>(?&lt;name&gt;X)</code> to define a named group name\"</li>\n  <li><code>\\k&lt;name&gt;</code> to backreference a named group \"name\"</li>\n  <li><code>${name}</code> to reference to captured group in Matcher's replacement string</li>\n  <li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#group%28java.lang.String%29\"><code>Matcher.group(String name)</code></a> to return the captured input subsequence by the given \"named group\".</li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<p><strong>Other alternatives for pre-Java 7</strong> were:</p>\n\n<ul>\n<li><a href=\"http://code.google.com/p/named-regexp/\">Google named-regex</a> (see <a href=\"http://stackoverflow.com/users/134642/john-hardy\">John Hardy</a>'s <a href=\"http://stackoverflow.com/questions/415580/regex-named-groups-in-java/1095737#1095737\">answer</a>, upvoted)<br>\n<a href=\"http://stackoverflow.com/users/337621/gabor-liptak\">Gábor Lipták</a> mentions (November 2012) that this project might not be active (with <a href=\"http://code.google.com/p/named-regexp/issues/list\">several outstanding bugs</a>), and its <a href=\"https://github.com/tony19/named-regexp\">GitHub fork</a> could be considered instead.</li>\n<li><a href=\"http://jregex.sourceforge.net/\">jregex</a> (See <a href=\"http://stackoverflow.com/users/22982/brian-clozel\">Brian Clozel</a>'s <a href=\"http://stackoverflow.com/questions/415580/regex-named-groups-in-java/3782345#3782345\">answer</a>, upvoted)</li>\n</ul>\n\n<hr>\n\n<p>(<strong>Original answer</strong>: <strong>Jan 2009</strong>, with the next two links now broken)</p>\n\n<p>You can not refer to named group, unless you code your own version of Regex...</p>\n\n<p>That is precisely what <a href=\"http://x86.sun.com/thread.jspa?threadID=785370&amp;messageID=4463652\">Gorbush2 did in this thread</a>.</p>\n\n<p><a href=\"http://gorbush.narod.ru/files/regex2.zip\"><strong>Regex2</strong></a></p>\n\n<p>(limited implementation, as pointed out again by <a href=\"http://stackoverflow.com/users/471272/tchrist\">tchrist</a>, as it looks only for ASCII identifiers. tchrist details the limitation as:</p>\n\n<blockquote>\n  <p>only being able to have one named group per same name (which you don’t always have control over!) and not being able to use them for in-regex recursion.</p>\n</blockquote>\n\n<p>Note: You can find true regex recursion examples in Perl and PCRE regexes, as mentioned in <a href=\"http://www.perl.com/pub/2003/06/06/regexps.html\">Regexp Power</a>, <a href=\"http://www.pcre.org/pcre.txt\">PCRE specs</a> and <a href=\"http://perl.plover.com/yak/regex/samples/slide083.html\">Matching Strings with Balanced Parentheses</a> slide)</p>\n\n<p>Example:</p>\n\n<p>String:</p>\n\n<pre><code>\"TEST 123\"\n</code></pre>\n\n<p>RegExp:</p>\n\n<pre><code>\"(?&lt;login&gt;\\\\w+) (?&lt;id&gt;\\\\d+)\"\n</code></pre>\n\n<p>Access</p>\n\n<pre><code>matcher.group(1) ==&gt; TEST\nmatcher.group(\"login\") ==&gt; TEST\nmatcher.name(1) ==&gt; login\n</code></pre>\n\n<p>Replace</p>\n\n<pre><code>matcher.replaceAll(\"aaaaa_$1_sssss_$2____\") ==&gt; aaaaa_TEST_sssss_123____\nmatcher.replaceAll(\"aaaaa_${login}_sssss_${id}____\") ==&gt; aaaaa_TEST_sssss_123____ \n</code></pre>\n\n<hr>\n\n<p>(extract from the implementation)</p>\n\n<pre><code>public final class Pattern\n    implements java.io.Serializable\n{\n[...]\n    /**\n     * Parses a group and returns the head node of a set of nodes that process\n     * the group. Sometimes a double return system is used where the tail is\n     * returned in root.\n     */\n    private Node group0() {\n        boolean capturingGroup = false;\n        Node head = null;\n        Node tail = null;\n        int save = flags;\n        root = null;\n        int ch = next();\n        if (ch == '?') {\n            ch = skip();\n            switch (ch) {\n\n            case '&lt;':   // (?&lt;xxx)  look behind or group name\n                ch = read();\n                int start = cursor;\n[...]\n                // test forGroupName\n                int startChar = ch;\n                while(ASCII.isWord(ch) &amp;&amp; ch != '&gt;') ch=read();\n                if(ch == '&gt;'){\n                    // valid group name\n                    int len = cursor-start;\n                    int[] newtemp = new int[2*(len) + 2];\n                    //System.arraycopy(temp, start, newtemp, 0, len);\n                    StringBuilder name = new StringBuilder();\n                    for(int i = start; i&lt; cursor; i++){\n                        name.append((char)temp[i-1]);\n                    }\n                    // create Named group\n                    head = createGroup(false);\n                    ((GroupTail)root).name = name.toString();\n\n                    capturingGroup = true;\n                    tail = root;\n                    head.next = expr(tail);\n                    break;\n                }\n</code></pre>\n    "},{"t":"(grep) Regex to match non-ASCII characters?","l":"http://stackoverflow.com/questions/2124010/grep-regex-to-match-non-ascii-characters","q":"\n\n<p>On Linux, I have a directory with lots of files. Some of them have non-ASCII characters, but they are all valid <a href=\"http://en.wikipedia.org/wiki/UTF-8\">UTF-8</a>. One program has a bug that prevents it working with non-ASCII filenames, and I have to find out how many are affected. I was going to do this with <code>find</code> and then do a <a href=\"http://en.wikipedia.org/wiki/Grep\">grep</a> to print the non-ASCII characters, and then do a <code>wc -l</code> to find the number. It doesn't have to be grep; I can use any standard Unix <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a>, like <a href=\"http://en.wikipedia.org/wiki/Perl\">Perl</a>, <a href=\"http://en.wikipedia.org/wiki/Sed\">sed</a>, <a href=\"http://en.wikipedia.org/wiki/AWK\">AWK</a>, etc.</p>\n\n<p>However, is there a regular expression for 'any character that's not an ASCII character'?</p>\n    ","a":"\n<p>This will match a single non-ASCII character:</p>\n\n<pre><code>[^\\x00-\\x7F]\n</code></pre>\n\n<p>This is a valid <a href=\"https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions\">PCRE</a> (<em>Perl-Compatible Regular Expression</em>).</p>\n\n<p>You can also use the <a href=\"http://en.wikipedia.org/wiki/POSIX\">POSIX</a> shorthands:</p>\n\n<ul>\n<li><code>[[:ascii:]]</code> - matches a single ASCII char</li>\n<li><code>[^[:ascii:]]</code> - matches a single non-ASCII char</li>\n</ul>\n\n<hr>\n\n<p><code>[^[:print:]]</code> will probably suffice for you.**</p>\n    "},{"t":".NET - How can you split a “caps” delimited string into an array?","l":"http://stackoverflow.com/questions/155303/net-how-can-you-split-a-caps-delimited-string-into-an-array","q":"\n\n<p>How do I go from this string: \"ThisIsMyCapsDelimitedString\"</p>\n\n<p>...to this string: \"This Is My Caps Delimited String\"</p>\n\n<p>Fewest lines of code in VB.net is preferred but C# is also welcome.</p>\n\n<p>Cheers!</p>\n    ","a":"\n<p>I made this a while ago. It matches each component of a CamelCase name.</p>\n\n<pre><code>/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>\"SimpleHTTPServer\" =&gt; [\"Simple\", \"HTTP\", \"Server\"]\n\"camelCase\" =&gt; [\"camel\", \"Case\"]\n</code></pre>\n\n<p>To convert that to just insert spaces between the words:</p>\n\n<pre><code>Regex.Replace(s, \"([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))\", \"$1 \")\n</code></pre>\n\n<p><strong>Edit:</strong> Allowing initial lowercase letters, (i.e. <code>\"lowerCamelCase\"</code>), as Drew Noakes pointed out. The only change is a <code>\"?\"</code> after after the last <code>\"[A-Z]\"</code>.</p>\n    "},{"t":"Why RegExp with global flag in Javascript give wrong results?","l":"http://stackoverflow.com/questions/1520800/why-regexp-with-global-flag-in-javascript-give-wrong-results","q":"\n\n<p>What is the problem with this regular expression when I use the global flag and the case insensitive flag? Query is a user generated input. The result should be [true, true].</p>\n\n<pre><code>var query = 'Foo B';\nvar re = new RegExp(query, 'gi');\nvar result = [];\nresult.push(re.test('Foo Bar'));\nresult.push(re.test('Foo Bar'));\n// result will be [true, false]\n</code></pre>\n    ","a":"\n<p>The <code>RegExp</code> object keeps track of the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> where a match occurred, so on subsequent matches it will start from the last used index, instead of 0. Take a look:</p>\n\n<pre><code>var query = 'Foo B';\nvar re = new RegExp(query, 'gi');\nvar result = [];\nresult.push(re.test('Foo Bar'));\n\nalert(re.lastIndex);\n\nresult.push(re.test('Foo Bar'));\n</code></pre>\n\n<p>If you don't want to manually reset <code>lastIndex</code> to 0 after every test, just remove the <code>g</code> flag.</p>\n\n<p>Here's the algorithm that the specs dictate (section 15.10.6.2):</p>\n\n<blockquote>\n  <p><strong>RegExp.prototype.exec(string)</strong></p>\n  \n  <p>Performs\n  a regular expression match of string\n  against the regular expression and\n  returns an Array object containing the\n  results of the match, or null if the\n  string did not match The string\n  ToString(string) is searched for an\n  occurrence of the regular expression\n  pattern as follows:</p>\n  \n  <ol>\n  <li>Let S be the value of ToString(string).</li>\n  <li>Let length be the length of S.</li>\n  <li><strong>Let lastIndex be the value of the lastIndex property.</strong></li>\n  <li>Let i be the value of ToInteger(lastIndex).</li>\n  <li>If the global property is false, let i = 0.</li>\n  <li>If I &lt; 0 or I &gt; length then set lastIndex to 0 and return null.</li>\n  <li>Call [[Match]], giving it the arguments S and i. If [[Match]]\n  returned failure, go to step 8;\n  otherwise let r be its State result\n  and go to step 10.</li>\n  <li>Let i = i+1.</li>\n  <li>Go to step 6.</li>\n  <li>Let e be r's endIndex value.</li>\n  <li><strong>If the global property is true, set lastIndex to e.</strong></li>\n  <li>Let n be the length of r's captures array. (This is the same\n  value as 15.10.2.1's\n  NCapturingParens.)</li>\n  <li>Return a new array with the following properties:\n  <ul>\n  <li>The index\n  property is set to the position of the\n  matched substring within the complete\n  string S.</li>\n  <li>The input property is set\n  to S.</li>\n  <li>The length property is set to\n  n + 1.</li>\n  <li>The 0 property is set to the\n  matched substring (i.e. the portion of\n  S between offset i inclusive and\n  offset e exclusive).</li>\n  <li>For each\n  integer i such that I &gt; 0 and I ≤ n,\n  set the property named ToString(i) to\n  the ith element of r's captures array.</li>\n  </ul></li>\n  </ol>\n</blockquote>\n    "},{"t":"Regular expression field validation in jQuery","l":"http://stackoverflow.com/questions/345194/regular-expression-field-validation-in-jquery","q":"\n\n<p>In jQuery, is there a function/plugin which I can use to match a given regular expression in a string?</p>\n\n<p>For example, in an email input box, I get an email address, and want to see if it is in the correct format. What jQuery function should I use to see if my validating regular expression matches the input?</p>\n\n<p>I've googled for a solution, but I haven't been able to find anything.</p>\n    ","a":"\n<p>I believe this does it:</p>\n\n<p><a href=\"http://bassistance.de/jquery-plugins/jquery-plugin-validation/\">http://bassistance.de/jquery-plugins/jquery-plugin-validation/</a></p>\n\n<p>It's got built-in patterns for stuff like URLs and e-mail addresses, and I think you can have it use your own as well.</p>\n    "},{"t":"regex backreferences in IntelliJ","l":"http://stackoverflow.com/questions/1421797/regex-backreferences-in-intellij","q":"\n\n<p>I want to use IntelliJ's find-and-replace feature to perform the following transformation:</p>\n\n<pre><code>// Replace this\nmodel.put('foo', 'bar')\n// With this\nmodel['foo'] = bar\n</code></pre>\n\n<p>I've tried the following:</p>\n\n<p>Text to find: <code>model.put\\((.*),(.*)\\)</code>\nReplace with: <code>model\\[\\\\1\\] = \\\\2</code></p>\n\n<p>But Intellij doesn't seem to recognise <code>\\\\1</code> and <code>\\\\2</code> as backreferences. I've also tried a single slash, but that doesn't work either.</p>\n\n<p>Thanks,\nDon</p>\n    ","a":"\n<p>IntelliJ uses \\$1 for backreference.</p>\n\n<p>From IntelliJ's help:</p>\n\n<blockquote>\n  <p>For more information on regular expressions and their syntax, refer to documentation for <a href=\"http://java.sun.com/javase/6/docs/api/java/util/regex/package-summary.html\">java.util.regex</a> Back references should have $n, rather than \\n format.</p>\n</blockquote>\n    "},{"t":"RegEx for Javascript to allow only alphanumeric","l":"http://stackoverflow.com/questions/388996/regex-for-javascript-to-allow-only-alphanumeric","q":"\n\n<p>I need to find a reg ex that only allows alphanumeric. So far, everyone I try only works if the string is alphanumeric, meaning contains both a letter and a number. I just want one what would allow either and not require both.</p>\n    ","a":"\n<pre><code>/^[a-z0-9]+$/i\n\n^         start of string\n[a-z0-9]  a or b or c or ... z or 0 or 1 or ... 9\n+         one or more times (change to * to allow empty string\n$         end of string\n\n/i        case-insensitive\n</code></pre>\n    "},{"t":"How to convert a Title to a URL slug in jQuery?","l":"http://stackoverflow.com/questions/1053902/how-to-convert-a-title-to-a-url-slug-in-jquery","q":"\n\n<p>I'm working on an app in CodeIgniter, and I am trying to make a field on a form dynamically generate the URL slug. What I'd like to do is remove the punctuation, convert it to lowercase, and replace the spaces with hyphens. So for example, Shane's Rib Shack would become shanes-rib-shack.</p>\n\n<p>Here's what I have so far. The lowercase part was easy, but the replace doesn't seem to be working at all, and I have no idea to remove the punctuation:</p>\n\n<pre><code>$(\"#Restaurant_Name\").keyup(function(){\n    var Text = $(this).val();\n    Text = Text.toLowerCase();\n    Text = Text.replace('/\\s/g','-');\n    $(\"#Restaurant_Slug\").val(Text);    \n});\n</code></pre>\n    ","a":"\n<p>I have no idea where the 'slug' term came from, but here we go:</p>\n\n<pre><code>function convertToSlug(Text)\n{\n    return Text\n        .toLowerCase()\n        .replace(/ /g,'-')\n        .replace(/[^\\w-]+/g,'')\n        ;\n}\n</code></pre>\n\n<p>First replace will change spaces to hyphens, second replace removes anything not alphanumeric, underscore, or hyphen.</p>\n\n<p>If you don't want things \"like - this\" turning into \"like---this\" then you can instead use this one:</p>\n\n<pre><code>function convertToSlug(Text)\n{\n    return Text\n        .toLowerCase()\n        .replace(/[^\\w ]+/g,'')\n        .replace(/ +/g,'-')\n        ;\n}\n</code></pre>\n\n<p>That will remove hyphens (but not spaces) on the first replace, and in the second replace it will condense consecutive spaces into a single hyphen.</p>\n\n<p>So \"like - this\" comes out as \"like-this\".</p>\n    "},{"t":"javascript regexp remove all special characters","l":"http://stackoverflow.com/questions/4374822/javascript-regexp-remove-all-special-characters","q":"\n\n<p>I would like one RegExp that will remove all special characters from a string. I am trying something like this but it doesn't work in IE7 (which is what the works intranet uses). Works in Firefox.</p>\n\n<pre><code>var specialChars = \"!@#$^&amp;%*()+=-[]\\/{}|:&lt;&gt;?,.\";\nfor (var i = 0; i &lt; specialChars.length; i++) {\n    stringToReplace = stringToReplace .replace(new RegExp(\"\\\\\" + specialChars[i], 'gi'), '');\n}\n</code></pre>\n\n<p>I suck with RegExp so a detailed description of it would be helpful as well.</p>\n    ","a":"\n<pre><code>var desired = stringToReplace.replace(/[^\\w\\s]/gi, '')\n</code></pre>\n\n<p>As was mentioned in the comments it's easier to do this as a whitelist - replace the characters which <em>aren't</em> in your safelist. </p>\n\n<p>The caret (<code>^</code>) character is the negation of the set <code>[...]</code>, <code>gi</code> say global and case-insensitive (the latter is a bit redundant but I wanted to mention it) and the safelist in this example is digits, word characters, underscores (<code>\\w</code>) and whitespace (<code>\\s</code>).</p>\n    "},{"t":"SQL Server Regular expressions in T-SQL","l":"http://stackoverflow.com/questions/194652/sql-server-regular-expressions-in-t-sql","q":"\n\n<p>Is there any regular expression library written in <em>T-SQL</em> (no CLR, no extended sp, pure t-sql) for SQL Server?</p>\n\n<p>(should work with shared hosting)</p>\n\n<p>Edit:</p>\n\n<ul>\n<li><p>thanks I know about PATINDEX, LIKE, xp_ sps and CLR solutions</p></li>\n<li><p>I also know it is not the best place for regex, the question is theoretical:)</p></li>\n<li><p>reduced functionality is also accepted</p></li>\n</ul>\n    ","a":"\n<p>How about the <a href=\"http://msdn.microsoft.com/en-us/library/ms188395.aspx\">PATINDEX</a> function?</p>\n\n<p>The pattern matching in TSQL is not a complete regex library, but it gives you the basics.</p>\n\n<p>(From Books Online)</p>\n\n<pre><code>Wildcard  Meaning  \n% Any string of zero or more characters.\n\n_ Any single character.\n\n[ ] Any single character within the specified range \n    (for example, [a-f]) or set (for example, [abcdef]).\n\n[^] Any single character not within the specified range \n    (for example, [^a - f]) or set (for example, [^abcdef]).\n</code></pre>\n    "},{"t":"Does lookaround affect which languages can be matched by regular expressions?","l":"http://stackoverflow.com/questions/2974210/does-lookaround-affect-which-languages-can-be-matched-by-regular-expressions","q":"\n\n<p>There are some features in modern regex engines which allow you to match languages that couldn't be matched without that feature. For example the following regex using back references matches the language of all strings that consist of a word that repeats itself: <code>(.+)\\1</code>. This language is not regular and can't be matched by a regex that does not use back references.</p>\n\n<p>Does lookaround also affect which languages can be matched by a regular expression? I.e. are there any languages that can be matched using lookaround that couldn't be matched otherwise? If so, is this true for all flavors of lookaround (negative or positive lookahead or lookbehind) or just for some of them?</p>\n    ","a":"\n<p>As the other answers claim, lookarounds don't add any extra power to regular expressions.</p>\n\n<p>I think we can show this using the following:</p>\n\n<p><a href=\"http://arxiv.org/PS_cache/arxiv/pdf/0907/0907.5127v1.pdf\">One Pebble 2-NFA</a> (see the Introduction section of the paper which refers to it).</p>\n\n<p>The 1-pebble 2NFA does not deal with nested lookaheads, but, we can use a variant of multi-pebble 2NFAs (see section below).</p>\n\n<p><strong>Introduction</strong></p>\n\n<p>A 2-NFA is a non deterministic finite automaton which has the ability to move either left or right on it's input.</p>\n\n<p>A one pebble machine is where the machine can place a pebble on the input tape (i.e. mark a specific input symbol with a pebble) and do possibly different transitions based on whether there is a pebble at the current input position or not.</p>\n\n<p>It is known the One Pebble 2-NFA has the same power as a regular DFA.</p>\n\n<p><strong>Non-nested Lookaheads</strong></p>\n\n<p>The basic idea is as follows:</p>\n\n<p>The 2NFA allows us to backtrack (or 'front track') by moving forward or backward in the input tape. So for a lookahead we can do the match for the lookahead regular expression and then backtrack what we have consumed, in matching the lookahead expression. In order to know exactly when to stop backtracking, we use the pebble! We drop the pebble before we enter the dfa for the lookahead to mark the spot where the backtracking needs to stop.</p>\n\n<p>Thus at the end of running our string through the pebble 2NFA, we know whether we matched the lookahead expression or not and the input left (i.e. what is left to be consumed) is exactly what is required to match the remaining.</p>\n\n<p>So for a lookahead of the form u(?=v)w</p>\n\n<p>We have the DFAs for u, v and w.</p>\n\n<p>From the accepting state (yes, we can assume there is only one) of DFA for u, we make an e-transition to the start state of v, marking the input with a pebble.</p>\n\n<p>From an accepting state for v, we e-transtion to a state which keeps moving the input left, till it finds a pebble, and then transitions to start state of w.</p>\n\n<p>From a rejecting state of v, we e-transition to a state which keeps moving left until it finds the pebble, and transtions to the accepting state of u (i.e where we left off).</p>\n\n<p>The proof used for regular NFAs to show r1 | r2, or r* etc, carry over for these one pebble 2nfas. See <a href=\"http://www.coli.uni-saarland.de/projects/milca/courses/coal/html/node41.html#regularlanguages.sec.regexptofsa\">http://www.coli.uni-saarland.de/projects/milca/courses/coal/html/node41.html#regularlanguages.sec.regexptofsa</a> for more info on how the component machines are put together to give the bigger machine for the r* expression etc.</p>\n\n<p>The reason why the above proofs for r* etc work is that the backtracking ensures that the input pointer is always at the right spot, when we enter the component nfas for repetition. Also, if a pebble is in use, then it is being processed by one of the lookahead component machines. Since there are no transitions from lookahead machine to lookahead machine without completely backtracking and getting back the pebble, a one pebble machine is all that is needed.</p>\n\n<p>For eg consider ([^a] | a(?=...b))*</p>\n\n<p>and the string abbb.</p>\n\n<p>We have abbb which goes through the peb2nfa for a(?=...b), at the end of which we are at the state: (bbb, matched) (i.e in input bbb is remaining, and it has matched 'a' followed by '..b'). Now because of the *, we go back to the beginning (see the construction in the link above), and enter the dfa for [^a]. Match b, go back to beginning, enter [^a] again two times, and then accept.</p>\n\n<p><strong>Dealing with Nested Lookaheads</strong></p>\n\n<p>To handle nested lookaheads we can use a restricted version of k-pebble 2NFA as defined here: <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.56.3984\">Complexity Results for Two-Way and Multi-Pebble Automata and their Logics</a> (see Definition 4.1 and Theorem 4.2).</p>\n\n<p>In general, 2 pebble automata can accept non-regular sets, but with the following restrictions, k-pebble automata can be shown to be regular (Theorem 4.2 in above paper).</p>\n\n<p>If the pebbles are P_1, P_2, ..., P_K</p>\n\n<ul>\n<li><p>P_{i+1} may not be placed unless P_i is already on the tape and P_{i} may not be picked up unless P_{i+1} is not on the tape. Basically the pebbles need to be used in a LIFO fashion.</p></li>\n<li><p>Between the time P_{i+1} is placed and the time that either P_{i} is picked up or P_{i+2} is placed, the automaton can traverse only the subword located between the current location of P_{i} and the end of the input word that lies in the direction of P_{i+1}. Moreover, in this sub-word, the automaton can act only as a 1-pebble automaton with Pebble P_{i+1}. In particular it is not allowed to lift up, place or even sense the presence of another pebble.</p></li>\n</ul>\n\n<p>So if v is a nested lookahead expression of depth k, then (?=v) is a nested lookahead expression of depth k+1. When we enter a lookahead machine within, we know exactly how many pebbles have to have been placed so far and so can exactly determine which pebble to place and when we exit that machine, we know which pebble to lift.  All machines at depth t are entered by placing pebble t and exited (i.e. we return to processing of a depth t-1 machine) by removing pebble t. Any run of the complete machine looks like a recursive dfs call of a tree and the above two restrictions of the multi-pebble machine can be catered to.</p>\n\n<p>Now when you combine expressions, for rr1, since you concat, the pebble numbers of r1 must be incremented by the depth of r. For r* and r|r1 the pebble numbering remains the same.</p>\n\n<p>Thus any expression with lookaheads can be converted to an equivalent multi-pebble machine with the above restrictions in pebble placement and so is regular.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>This basically addresses the drawback in Francis's original proof: being able to prevent the lookahead expressions from consuming anything which are required for future matches.</p>\n\n<p>Since Lookbehinds are just finite string (not really regexs) we can deal with them first, and then deal with the lookaheads.</p>\n\n<p>Sorry for the incomplete writeup, but a complete proof would involve drawing a lot of figures.</p>\n\n<p>It looks right to me, but I will be glad to know of any mistakes (which I seem to be fond of :-)).</p>\n    "},{"t":"Where can I find unit tests for regular expressions in multiple languages?","l":"http://stackoverflow.com/questions/15819919/where-can-i-find-unit-tests-for-regular-expressions-in-multiple-languages","q":"\n\n<p>I'm building a regex helper at <a href=\"http://www.debuggex.com\">http://www.debuggex.com</a>. The amount of detail I want to show requires me to write my own parser and matcher.</p>\n\n<p>To make sure my parser and matcher work correctly, I've written my own unit tests for the Javascript flavor of regexes, but these only cover edge cases I know about. I would like to use a standard test suite, and was recently pointed to <a href=\"http://hg.ecmascript.org/tests/test262/summary\">http://hg.ecmascript.org/tests/test262/summary</a>, which I will be using.</p>\n\n<p>My question is, where can I find such test suites for other regex flavors? I'd like to support other flavors in the future. I have not been able to find anything by googling (\"test\" pollutes the results with regex testers). I am looking for test suites for the languages <strong>python</strong>, <strong>php</strong>, <strong>perl</strong>, <strong>java</strong>, <strong>ruby</strong>, and <strong>.net</strong>.</p>\n    ","a":"\n<p>Most of those languages are open source.  Any decent project should have their test cases in said repo, otherwise I would be pretty concerned.</p>\n\n<ul>\n<li><a href=\"http://hg.python.org/cpython/file/178075fbff3a/Lib/test/re_tests.py\">Python</a>'s regex tests</li>\n<li><a href=\"https://github.com/php/php-src/tree/master/ext/pcre/tests\">Php</a>'s regex tests</li>\n<li><a href=\"http://perl5.git.perl.org/perl.git/tree/HEAD:/t/re\">Perl</a>'s regex tests looks really extensive</li>\n<li><a href=\"http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/test/java/util/regex/\">Open JDK</a>'s unit tests (an open source flavour of Java)</li>\n<li><a href=\"https://github.com/ruby/ruby/blob/trunk/test/ruby/test_regexp.rb\">Ruby</a>'s regex tests</li>\n<li><a href=\"https://github.com/mono/mono/tree/0f2995e95e98e082c7c7039e17175cf2c6a00034/mcs/class/System/Test/System.Text.RegularExpressions\">Mono</a>'s regex tests (open source version of .net)</li>\n<li><a href=\"https://code.google.com/p/re2/source/browse#hg/re2/testing\">RE2</a>'s tests (regex engine developed at Google)</li>\n</ul>\n\n<p>I also found an extensive chart on <a href=\"http://www.regular-expressions.info/refflavors.html\">this page</a> which might be of some help to you.</p>\n    "},{"t":"How to determine if a number is a prime with regex?","l":"http://stackoverflow.com/questions/2795065/how-to-determine-if-a-number-is-a-prime-with-regex","q":"\n\n<p>I found the following code example for Java on <a href=\"http://rosettacode.org/wiki/Primality_by_trial_division#By_Regular_Expression\">RosettaCode</a>:</p>\n\n<pre><code>public static boolean prime(int n) {\n  return !new String(new char[n]).matches(\".?|(..+?)\\\\1+\");\n}\n</code></pre>\n\n<ul>\n<li>I don't know Java in particular but understand all aspects of this snippet except for the regex itself</li>\n<li>I have basic to basic-advanced knowledge of Regex as you find it in the built-in PHP functions</li>\n</ul>\n\n<p>How does <code>.?|(..+?)\\\\1+</code> match prime numbers?</p>\n    ","a":"\n<p>You said you understand this part, but just to emphasize, the String generated has a length equal to the number supplied. So the string has three characters if and only if <code>n == 3</code>.</p>\n\n<pre><code>.?\n</code></pre>\n\n<p>The first part of the regex says, \"any character, zero or one times\". So basically, is there zero or one character-- or, per what I mentioned above, <code>n == 0 || n == 1</code>. If we have the match, then return the negation of that. This corresponds with the fact that zero and one are NOT prime.</p>\n\n<pre><code>(..+?)\\\\1+\n</code></pre>\n\n<p>The second part of the regex is a little trickier, relying on groups and backreferences. A group is anything in parentheses, which will then be captured and stored by the regex engine for later use. A backreference is a matched group that is used later on in the same regex.</p>\n\n<p>The group captures 1 character, then 1 or more of any character. (The + character means one or more, but ONLY of the previous character or group. So this is not \"two or four or six etc. characters\", but rather \"two or three etc.\" The +? is like +, but it tries to match as few characters as possible. + normally tries to gobble the whole string if it can, which is bad in this case because it prevents the backreference part from working.)</p>\n\n<p>The next part is the backreference: That same set of characters (two or more), appearing again. Said backreference appears one or more times.</p>\n\n<p>So. The captured group corresponds to a natural number of characters (from 2 onward) captured. Said group then appears some natural number of times (also from 2 onward). If there IS a match, this implies that it's possible to find a product of two numbers greater than or equal to 2 that match the n-length string... meaning you have a composite n. So again, return the negation of the successful match: n is NOT prime.</p>\n\n<p>If no match can be found, then you can't come up with a your product of two natural numbers greater than or equal to 2... and you have both a non-match and a prime, hence again the returning of the negation of the match result.</p>\n\n<p>Do you see it now? It's unbelievably tricky (and computationally expensive!) but it's also kind of simple at the same time, once you get it. :-)</p>\n\n<p>I can elaborate if you have further questions, like on how regex parsing actually works. But I'm trying to keep this answer simple for now (or as simple as it can ever be).</p>\n    "},{"t":"A regular expression to exclude a word/string","l":"http://stackoverflow.com/questions/2078915/a-regular-expression-to-exclude-a-word-string","q":"\n\n<p>I have a regular expression as follows:</p>\n\n<pre><code>^/[a-z0-9]+$\n</code></pre>\n\n<p>This matches strings such as <code>/hello</code> or <code>/hello123</code>.</p>\n\n<p>However, I would like it to exclude a couple of string values such as <code>/ignoreme</code> and <code>/ignoreme2</code>.</p>\n\n<p>I've tried a few variants but can't seem to get any to work!</p>\n\n<p>My latest feeble attempt was </p>\n\n<pre><code>^/(((?!ignoreme)|(?!ignoreme2))[a-z0-9])+$\n</code></pre>\n\n<p>Any help would be gratefully appreciated :-)</p>\n    ","a":"\n<p>Here's yet another way: (using a <a href=\"http://www.regular-expressions.info/lookaround.html\">negative look-ahead</a>): </p>\n\n<pre><code>^/(?!ignoreme|ignoreme2|ignoremeN)([a-z0-9]+)$ \n</code></pre>\n\n<p>Note: There's only only one capturing expression: <code>([a-z0-9]+)</code>. </p>\n    "},{"t":"leading zeros in rails","l":"http://stackoverflow.com/questions/5810468/leading-zeros-in-rails","q":"\n\n<p>I have fields <code>hr</code> and <code>min</code>, both integers in my application. For <code>hr</code> field, if the user enters \"1\" I would like Rails to automatically pad it to \"01\" before saving it to the database. Also for the <code>min</code> field if the user enter \"0\" it should put in as \"00\".</p>\n\n<p>How can I do this?</p>\n    ","a":"\n<p>It'd be better to store it as an integer and just display it as you described on runtime. Every language has its own way to pad zeros - for Ruby you can use <a href=\"http://www.ruby-doc.org/core-1.9.3/String.html#method-i-rjust\">String#rjust</a>. This method pads a string (right-justified) so that it becomes a given length, using a given padding character.</p>\n\n<blockquote>\n  <p><strong><code>str.rjust(integer, padstr=' ') → new_str</code></strong></p>\n  \n  <p>If <code>integer</code> is greater than the length of <code>str</code>, returns a new <code>String</code> of length <code>integer</code> with <code>str</code> right justified and padded with <code>padstr</code>; otherwise, returns <code>str</code>.</p>\n</blockquote>\n\n<pre><code>some_int = 5\nsome_int.to_s.rjust(2, '0')  # =&gt; '05'\nsome_int.to_s.rjust(5, '0')  # =&gt; '00005'\n\nanother_int = 150\nanother_int.to_s.rjust(2, '0') # =&gt; '150'\nanother_int.to_s.rjust(3, '0') # =&gt; '150'\nanother_int.to_s.rjust(5, '0') # =&gt; '00150'\n</code></pre>\n    "},{"t":"Eclipse, regular expression search and replace","l":"http://stackoverflow.com/questions/1372748/eclipse-regular-expression-search-and-replace","q":"\n\n<p>In eclipse, is it possible to use the matched search string as part of the replace string when performing a regular expression search and replace?</p>\n\n<p>Basically, I want to replace all occurrences of</p>\n\n<pre><code>variableName.someMethod()\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>((TypeName)variableName.someMethod())\n</code></pre>\n\n<p>Where <em>variableName</em> can be any variable name at all.</p>\n\n<p>In <em>sed</em> I could use something like:</p>\n\n<pre><code>s/[a-zA-Z]+\\.someMethod\\(\\)/((TypeName)&amp;)/g\n</code></pre>\n\n<p>That is, <em>&amp;</em> represents the matched search string. Is there something similar in Eclipse?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>Yes, \"( )\" captures a group. you can use it again with $i where i is the i'th capture group.</p>\n\n<p>so:</p>\n\n<pre><code>search: (\\w+\\.someMethod\\(\\))\nreplace: ((TypeName)$1)\n</code></pre>\n\n<p>hint: CTRL + space in the textboxes gives you all kinds of suggestions for regular expression writing. (I'm afraid the down key, to go down the list of suggestions, does delete your input in the textbox. Irritating little bug)</p>\n    "},{"t":"Interpolating a string into a regex","l":"http://stackoverflow.com/questions/150095/interpolating-a-string-into-a-regex","q":"\n\n<p>I need to substitute the value of a string into my regular expression in Ruby. Is there an easy way to do this? For example:</p>\n\n<pre><code>foo = \"0.0.0.0\"\ngoo = \"here is some other stuff 0.0.0.0\" \nif goo =~ /value of foo here dynamically/\n  puts \"success!\"\nend\n</code></pre>\n    ","a":"\n<p>Same as string insertion.</p>\n\n<pre><code>if goo =~ /#{Regexp.quote(foo)}/\n#...\n</code></pre>\n    "},{"t":"The recognizing power of “modern” regexes","l":"http://stackoverflow.com/questions/4840988/the-recognizing-power-of-modern-regexes","q":"\n\n<p>What class of languages do real modern regexes actually recognise?</p>\n\n<p>Whenever there is an unbounded length capturing group with a back-reference (e.g. <code>(.*)_\\1</code>) a regex is now matching a non-regular language. But this, on its own, isn't enough to match something like <code>S ::= '(' S ')' | ε</code> — the context-free language of matching pairs of parens.</p>\n\n<p>Recursive regexes (which are new to me, but I am assured exist in Perl and PCRE) appear to recognize at least most CFLs.</p>\n\n<p>Has anyone done or read any research in this area? What are the limitations of these \"modern\" regexes? Do they recognize strictly more or strictly less than CFGs, of LL or LR grammars? Or do there exist both languages that can be recognized by a regex but not a CFG <em>and</em> the opposite?</p>\n\n<p>Links to relevant papers would be much appreciated.</p>\n    ","a":"\n<h1>Pattern Recursion</h1>\n\n<p>With recursive patterns, you have a form of recursive descent <em>matching</em>. </p>\n\n<p>This is fine for a variety of problems, but once you want to actually do recursive descent <em>parsing</em>, you need to insert capture groups here and there, and it is awkward to recover the full parse structure in this way.  Damian Conway’s <a href=\"http://search.cpan.org/~dconway/Regexp-Grammars-1.012/lib/Regexp/Grammars.pm\">Regexp::Grammars</a> module for Perl transforms the simple pattern into an equivalent one that automatically does all that named capturing into a recursive data structure, making for far easier retrieval of the parsed structure.  I have a sample comparing these two approaches at end of this posting.</p>\n\n<h1>Restrictions on Recursion</h1>\n\n<p>The question was what kinds of grammars that recursive patterns can match. Well, they’re certainly <a href=\"http://en.wikipedia.org/wiki/Recursive_descent_parser\">recursive descent</a> type matchers. The only thing that comes to mind is that <strong>recursive patterns cannot handle <a href=\"http://en.wikipedia.org/wiki/Left_recursion\">left recursion</a>.</strong> This puts a constraint on the sorts of grammars that you can apply them to. Sometimes you can reorder your productions to eliminate left recursion.</p>\n\n<p>BTW, PCRE and Perl differ slightly on how you’re allowed to phrase the recursion. See the sections on “RECURSIVE PATTERNS” and “Recursion difference from Perl” in the <em>pcrepattern</em> manpage. eg: Perl can handle <code>^(.|(.)(?1)\\2)$</code> where PCRE requires <code>^((.)(?1)\\2|.)$</code> instead.</p>\n\n<h1>Recursion Demos</h1>\n\n<p>The need for recursive patterns arises surprisingly frequently.  One well-visited example is when you need to match something that can nest, such as balanced parentheses, quotes, or even HTML/XML tags.  Here’s the match for balenced parens:</p>\n\n<pre><code>\\((?:[^()]*+|(?0))*\\)\n</code></pre>\n\n<p>I find that trickier to read because of its compact nature.  This is easily curable with <code>/x</code> mode to make whitespace no longer significant:</p>\n\n<pre><code>\\( (?: [^()] *+ | (?0) )* \\)\n</code></pre>\n\n<p>Then again, since we’re using parens for our recursion, a clearer example would be matching nested single quotes:</p>\n\n<pre><code>‘ (?: [^‘’] *+ | (?0) )* ’\n</code></pre>\n\n<p>Another recursively defined thing you may wish to match would be a palindrome.  This simple pattern works in Perl:</p>\n\n<pre><code>^((.)(?1)\\2|.?)$\n</code></pre>\n\n<p>which you can test on most systems using something like this:</p>\n\n<pre><code>$ perl -nle 'print if /^((.)(?1)\\2|.?)$/i' /usr/share/dict/words\n</code></pre>\n\n<p>Note that PCRE’s implementation of recursion requires the more elaborate</p>\n\n<pre><code>^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))\n</code></pre>\n\n<p>This is because of restrictions on how PCRE recursion works.</p>\n\n<h1>Proper Parsing</h1>\n\n<p>To me, the examples above are mostly toy matches, not all <em>that</em> interesting, really. When it becomes interesting is when you have a real grammar you’re trying to parse. For example, RFC 5322 defines a mail address rather elaborately.  Here’s a “grammatical” pattern to match it:</p>\n\n<pre><code>$rfc5322 = qr{\n\n   (?(DEFINE)\n\n     (?&lt;address&gt;         (?&amp;mailbox) | (?&amp;group))\n     (?&lt;mailbox&gt;         (?&amp;name_addr) | (?&amp;addr_spec))\n     (?&lt;name_addr&gt;       (?&amp;display_name)? (?&amp;angle_addr))\n     (?&lt;angle_addr&gt;      (?&amp;CFWS)? &lt; (?&amp;addr_spec) &gt; (?&amp;CFWS)?)\n     (?&lt;group&gt;           (?&amp;display_name) : (?:(?&amp;mailbox_list) | (?&amp;CFWS))? ; (?&amp;CFWS)?)\n     (?&lt;display_name&gt;    (?&amp;phrase))\n     (?&lt;mailbox_list&gt;    (?&amp;mailbox) (?: , (?&amp;mailbox))*)\n\n     (?&lt;addr_spec&gt;       (?&amp;local_part) \\@ (?&amp;domain))\n     (?&lt;local_part&gt;      (?&amp;dot_atom) | (?&amp;quoted_string))\n     (?&lt;domain&gt;          (?&amp;dot_atom) | (?&amp;domain_literal))\n     (?&lt;domain_literal&gt;  (?&amp;CFWS)? \\[ (?: (?&amp;FWS)? (?&amp;dcontent))* (?&amp;FWS)?\n                                   \\] (?&amp;CFWS)?)\n     (?&lt;dcontent&gt;        (?&amp;dtext) | (?&amp;quoted_pair))\n     (?&lt;dtext&gt;           (?&amp;NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\n\n     (?&lt;atext&gt;           (?&amp;ALPHA) | (?&amp;DIGIT) | [!#\\$%&amp;'*+-/=?^_`{|}~])\n     (?&lt;atom&gt;            (?&amp;CFWS)? (?&amp;atext)+ (?&amp;CFWS)?)\n     (?&lt;dot_atom&gt;        (?&amp;CFWS)? (?&amp;dot_atom_text) (?&amp;CFWS)?)\n     (?&lt;dot_atom_text&gt;   (?&amp;atext)+ (?: \\. (?&amp;atext)+)*)\n\n     (?&lt;text&gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\n     (?&lt;quoted_pair&gt;     \\\\ (?&amp;text))\n\n     (?&lt;qtext&gt;           (?&amp;NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\n     (?&lt;qcontent&gt;        (?&amp;qtext) | (?&amp;quoted_pair))\n     (?&lt;quoted_string&gt;   (?&amp;CFWS)? (?&amp;DQUOTE) (?:(?&amp;FWS)? (?&amp;qcontent))*\n                          (?&amp;FWS)? (?&amp;DQUOTE) (?&amp;CFWS)?)\n\n     (?&lt;word&gt;            (?&amp;atom) | (?&amp;quoted_string))\n     (?&lt;phrase&gt;          (?&amp;word)+)\n\n     # Folding white space\n     (?&lt;FWS&gt;             (?: (?&amp;WSP)* (?&amp;CRLF))? (?&amp;WSP)+)\n     (?&lt;ctext&gt;           (?&amp;NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\n     (?&lt;ccontent&gt;        (?&amp;ctext) | (?&amp;quoted_pair) | (?&amp;comment))\n     (?&lt;comment&gt;         \\( (?: (?&amp;FWS)? (?&amp;ccontent))* (?&amp;FWS)? \\) )\n     (?&lt;CFWS&gt;            (?: (?&amp;FWS)? (?&amp;comment))*\n                         (?: (?:(?&amp;FWS)? (?&amp;comment)) | (?&amp;FWS)))\n\n     # No whitespace control\n     (?&lt;NO_WS_CTL&gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\n\n     (?&lt;ALPHA&gt;           [A-Za-z])\n     (?&lt;DIGIT&gt;           [0-9])\n     (?&lt;CRLF&gt;            \\x0d \\x0a)\n     (?&lt;DQUOTE&gt;          \")\n     (?&lt;WSP&gt;             [\\x20\\x09])\n   )\n\n   (?&amp;address)\n\n}x;\n</code></pre>\n\n<p>As you see, that’s very BNF-like.  The problem is it is just a match, not a capture. And you really don’t want to just surround the whole thing with capturing parens because that doesn’t tell you which production matched which part.  Using the previously mentioned Regexp::Grammars module, we can.  </p>\n\n<pre><code>#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse 5.010;\nuse Data::Dumper \"Dumper\";\n\nmy $rfc5322 = do {\n    use Regexp::Grammars;    # ...the magic is lexically scoped\n    qr{\n\n    # Keep the big stick handy, just in case...\n    # &lt;debug:on&gt;\n\n    # Match this...\n    &lt;address&gt;\n\n    # As defined by these...\n    &lt;token: address&gt;         &lt;mailbox&gt; | &lt;group&gt;\n    &lt;token: mailbox&gt;         &lt;name_addr&gt; | &lt;addr_spec&gt;\n    &lt;token: name_addr&gt;       &lt;display_name&gt;? &lt;angle_addr&gt;\n    &lt;token: angle_addr&gt;      &lt;CFWS&gt;? \\&lt; &lt;addr_spec&gt; \\&gt; &lt;CFWS&gt;?\n    &lt;token: group&gt;           &lt;display_name&gt; : (?:&lt;mailbox_list&gt; | &lt;CFWS&gt;)? ; &lt;CFWS&gt;?\n    &lt;token: display_name&gt;    &lt;phrase&gt;\n    &lt;token: mailbox_list&gt;    &lt;[mailbox]&gt; ** (,)\n\n    &lt;token: addr_spec&gt;       &lt;local_part&gt; \\@ &lt;domain&gt;\n    &lt;token: local_part&gt;      &lt;dot_atom&gt; | &lt;quoted_string&gt;\n    &lt;token: domain&gt;          &lt;dot_atom&gt; | &lt;domain_literal&gt;\n    &lt;token: domain_literal&gt;  &lt;CFWS&gt;? \\[ (?: &lt;FWS&gt;? &lt;[dcontent]&gt;)* &lt;FWS&gt;?\n\n    &lt;token: dcontent&gt;        &lt;dtext&gt; | &lt;quoted_pair&gt;\n    &lt;token: dtext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21-\\x5a\\x5e-\\x7e]\n\n    &lt;token: atext&gt;           &lt;.ALPHA&gt; | &lt;.DIGIT&gt; | [!#\\$%&amp;'*+-/=?^_`{|}~]\n    &lt;token: atom&gt;            &lt;.CFWS&gt;? &lt;.atext&gt;+ &lt;.CFWS&gt;?\n    &lt;token: dot_atom&gt;        &lt;.CFWS&gt;? &lt;.dot_atom_text&gt; &lt;.CFWS&gt;?\n    &lt;token: dot_atom_text&gt;   &lt;.atext&gt;+ (?: \\. &lt;.atext&gt;+)*\n\n    &lt;token: text&gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f]\n    &lt;token: quoted_pair&gt;     \\\\ &lt;.text&gt;\n\n    &lt;token: qtext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21\\x23-\\x5b\\x5d-\\x7e]\n    &lt;token: qcontent&gt;        &lt;.qtext&gt; | &lt;.quoted_pair&gt;\n    &lt;token: quoted_string&gt;   &lt;.CFWS&gt;? &lt;.DQUOTE&gt; (?:&lt;.FWS&gt;? &lt;.qcontent&gt;)*\n                             &lt;.FWS&gt;? &lt;.DQUOTE&gt; &lt;.CFWS&gt;?\n\n    &lt;token: word&gt;            &lt;.atom&gt; | &lt;.quoted_string&gt;\n    &lt;token: phrase&gt;          &lt;.word&gt;+\n\n    # Folding white space\n    &lt;token: FWS&gt;             (?: &lt;.WSP&gt;* &lt;.CRLF&gt;)? &lt;.WSP&gt;+\n    &lt;token: ctext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e]\n    &lt;token: ccontent&gt;        &lt;.ctext&gt; | &lt;.quoted_pair&gt; | &lt;.comment&gt;\n    &lt;token: comment&gt;         \\( (?: &lt;.FWS&gt;? &lt;.ccontent&gt;)* &lt;.FWS&gt;? \\)\n    &lt;token: CFWS&gt;            (?: &lt;.FWS&gt;? &lt;.comment&gt;)*\n                             (?: (?:&lt;.FWS&gt;? &lt;.comment&gt;) | &lt;.FWS&gt;)\n\n    # No whitespace control\n    &lt;token: NO_WS_CTL&gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]\n    &lt;token: ALPHA&gt;           [A-Za-z]\n    &lt;token: DIGIT&gt;           [0-9]\n    &lt;token: CRLF&gt;            \\x0d \\x0a\n    &lt;token: DQUOTE&gt;          \"\n    &lt;token: WSP&gt;             [\\x20\\x09]\n    }x;\n};\n\nwhile (my $input = &lt;&gt;) {\n    if ($input =~ $rfc5322) {\n        say Dumper \\%/;       # ...the parse tree of any successful match\n                              # appears in this punctuation variable\n    }\n}\n</code></pre>\n\n<p>As you see, by using a very slightly different notation in the pattern, you now get something which stores the entire parse tree away for you in the <code>%/</code> variable, with everything neatly labelled. The result of the transformation is still a pattern, as you can see by the <code>=~</code> operator. It’s just a bit magical.</p>\n    "},{"t":"Is there a version of JavaScript's String.indexOf() that allows for regular expressions?","l":"http://stackoverflow.com/questions/273789/is-there-a-version-of-javascripts-string-indexof-that-allows-for-regular-expr","q":"\n\n<p>In javascript, is there an equivalent of String.indexOf() that takes a regular expression instead of a string for the first first parameter while still allowing a second parameter ?</p>\n\n<p>I need to do something like </p>\n\n<pre><code>str.indexOf(/[abc]/ , i);\n</code></pre>\n\n<p>and</p>\n\n<pre><code>str.lastIndexOf(/[abc]/ , i);\n</code></pre>\n\n<p>While String.search() takes a regexp as a parameter it does not allow me to specify a second argument!</p>\n\n<p>Edit:<br>\nThis turned out to be harder than I originally thought so I wrote a small test function to test all the provided solutions... it assumes regexIndexOf and regexLastIndexOf have been added to the String object.</p>\n\n<pre><code>function test (str) {\n\tvar i = str.length +2;\n\twhile (i--) {\n\t\tif (str.indexOf('a',i) != str.regexIndexOf(/a/,i)) \n\t\t\talert (['failed regexIndexOf ' , str,i , str.indexOf('a',i) , str.regexIndexOf(/a/,i)]) ;\n\t\tif (str.lastIndexOf('a',i) != str.regexLastIndexOf(/a/,i) ) \n\t\t\talert (['failed regexLastIndexOf ' , str,i,str.lastIndexOf('a',i) , str.regexLastIndexOf(/a/,i)]) ;\n\t}\n}\n</code></pre>\n\n<p>and I am testing as follow to make sure that at least for one character regexp, the result is the same as if we used indexOf</p>\n\n<p>//Look for the a among the xes<br>\ntest('xxx');<br>\ntest('axx');<br>\ntest('xax');<br>\ntest('xxa');<br>\ntest('axa');<br>\ntest('xaa');<br>\ntest('aax');<br>\ntest('aaa');  </p>\n    ","a":"\n<p>Combining a few of the approaches already mentioned (the indexOf is obviously rather simple), I think these are the functions that will do the trick:</p>\n\n<pre><code>String.prototype.regexIndexOf = function(regex, startpos) {\n    var indexOf = this.substring(startpos || 0).search(regex);\n    return (indexOf &gt;= 0) ? (indexOf + (startpos || 0)) : indexOf;\n}\n\nString.prototype.regexLastIndexOf = function(regex, startpos) {\n    regex = (regex.global) ? regex : new RegExp(regex.source, \"g\" + (regex.ignoreCase ? \"i\" : \"\") + (regex.multiLine ? \"m\" : \"\"));\n    if(typeof (startpos) == \"undefined\") {\n        startpos = this.length;\n    } else if(startpos &lt; 0) {\n        startpos = 0;\n    }\n    var stringToWorkWith = this.substring(0, startpos + 1);\n    var lastIndexOf = -1;\n    var nextStop = 0;\n    while((result = regex.exec(stringToWorkWith)) != null) {\n        lastIndexOf = result.index;\n        regex.lastIndex = ++nextStop;\n    }\n    return lastIndexOf;\n}\n</code></pre>\n\n<p>Obviously, modifying the built-in String object would send up red flags for most people, but this may be one time when it is not that big of a deal; simply be aware of it.</p>\n\n<p></p><hr><p></p>\n\n<p>UPDATE: Edited <code>regexLastIndexOf()</code> so that is seems to mimic <code>lastIndexOf()</code> now. Please let me know if it still fails and under what circumstances.</p>\n\n<p></p><hr><p></p>\n\n<p>UPDATE: Passes all tests found on in comments on this page, and my own. Of course, that doesn't mean it's bulletproof. Any feedback appreciated.</p>\n    "},{"t":"How to output only captured groups with sed","l":"http://stackoverflow.com/questions/2777579/how-to-output-only-captured-groups-with-sed","q":"\n\n<p>Is there any way to tell <code>sed</code> to output only captured groups? For example given the input:</p>\n\n<pre><code>This is a sample 123 text and some 987 numbers\n</code></pre>\n\n<p>and pattern:</p>\n\n<pre><code>/([\\d]+)/\n</code></pre>\n\n<p>Could I get only 123 and 987 output in the way formatted by back references?</p>\n    ","a":"\n<p>The key to getting this to work is to tell <code>sed</code> to exclude what you don't want to be output as well as specifying what you do want.</p>\n\n<pre><code>string='This is a sample 123 text and some 987 numbers'\necho \"$string\" | sed -rn 's/[^[:digit:]]*([[:digit:]]+)[^[:digit:]]+([[:digit:]]+)[^[:digit:]]*/\\1 \\2/p'\n</code></pre>\n\n<p>This says:</p>\n\n<ul>\n<li>don't default to printing each line (<code>-n</code>)</li>\n<li>exclude zero or more non-digits</li>\n<li>include one or more digits</li>\n<li>exclude one or more non-digits</li>\n<li>include one or more digits</li>\n<li>exclude zero or more non-digits</li>\n<li>print the substitution (<code>p</code>)</li>\n</ul>\n\n<p>If you have GNU <code>grep</code> (it may also work in BSD, including OS X):</p>\n\n<pre><code>echo \"$string\" | grep -Po '\\d+'\n</code></pre>\n\n<p>or variations such as:</p>\n\n<pre><code>echo \"$string\" | grep -Po '(?&lt;=\\D )(\\d+)'\n</code></pre>\n\n<p>The <code>-P</code> option enables Perl Compatible Regular Expressions. See <a href=\"http://linux.die.net/man/3/pcrepattern\"><code>man 3 pcrepattern</code></a> or <a href=\"http://linux.die.net/man/3/pcresyntax\"><code>man \n3 pcresyntax</code></a>.</p>\n    "},{"t":"Why 'ABC'.replace('B', '$`') gives AAC","l":"http://stackoverflow.com/questions/31187452/why-abc-replaceb-gives-aac","q":"\n\n<p>Why this code prints <code>AAC</code> instead of expected <code>A$`C</code>?</p>\n\n<pre><code>console.log('ABC'.replace('B', '$`'));\n</code></pre>\n\n<p>==&gt;</p>\n\n<pre><code>AAC\n</code></pre>\n\n<p>And how to make it give the expected result?</p>\n    ","a":"\n<pre><code>console.log('ABC'.replace('B', \"$$`\"));\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a></p>\n\n<p>To insert $ you have to pass $$, because $` :</p>\n\n<blockquote>\n  <p>Inserts the portion of the string that precedes the matched substring.</p>\n</blockquote>\n\n<p>Other patterns:</p>\n\n<p><img src=\"http://i.stack.imgur.com/cLO6g.png\" alt=\"enter image description here\"></p>\n\n<p>Fiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/8kou1z3q/\">http://jsfiddle.net/8kou1z3q/</a></p>\n\n<p>Also, there are even more things on the reference link I've posted above. If you still have any issue or doubt you probably can find an answer there, the screenshot above was taken from the link posted at the beginning of the answer.</p>\n\n<p>EDIT:</p>\n\n<p>It is worth saying, in my opinion, that <strong>any</strong> pattern that doesn't match the above <strong>doesn't need to be escaped</strong>, hence <code>$</code> doesn't need to be escaped, same story happens with <code>$AAA</code>.</p>\n\n<p>In the comments above a user asked about why you need to \"escape\" $ with another $: despite I'm not truly sure about that, I think it is also worth to point out, from what we said above, that <strong>any invalid pattern won't be interpreted</strong>, hence I think (and suspect, at this point) that $$ is a very special case, because it covers the cases where you need to replace the match with a dollar sign followed by a \"pattern-locked\" character, like the tick ( ` ) as an example (or really the &amp; as another).</p>\n\n<p>In any other case, though, the dollar sign <strong>doesn't need to be escaped</strong>, hence it probably makes sense that they decided to create such a specific rule, else you would've needed to escape the $ everywhere else (and I think this could've had an impact on any string object, because that would mean that even in <code>var a = \"hello, $ hey this one is a dollar\";</code> you would've needed to escape the <code>$</code>).</p>\n\n<p>If you're still interested and want to read more, please check also this:</p>\n\n<p><a href=\"http://www.regular-expressions.info/javascript.html#replace\">http://www.regular-expressions.info/javascript.html#replace</a></p>\n\n<p>Fiddle with more cases:</p>\n\n<p><a href=\"http://jsfiddle.net/8kou1z3q/3/\">http://jsfiddle.net/8kou1z3q/3/</a></p>\n    "},{"t":"regex match non greedy","l":"http://stackoverflow.com/questions/11898998/regex-match-non-greedy","q":"\n\n<p>I need help about regular expression matching with non-greedy option.</p>\n\n<p>Match pattern is:</p>\n\n<pre><code>&lt;img\\s.*&gt;\n</code></pre>\n\n<p>Text to match is:</p>\n\n<pre><code>&lt;html&gt;\n&lt;img src=\"test\"&gt;\nabc\n&lt;img\n  src=\"a\" src='a' a=b&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I test on <a href=\"http://regexpal.com\">http://regexpal.com</a></p>\n\n<p>This expression matches all text from <code>&lt;img</code> to last <code>&gt;</code>. I need it to match with first encountered <code>&gt;</code> after initial <code>&lt;img</code>, so here I'd need to get 2 matches instead of 1 that I get.</p>\n\n<p>I tried all combinations of <em>non-greedy <code>?</code></em>, with no success.</p>\n\n<p>And please no mentoring about parsing html by <code>REGEX</code>, this question is about <em>non-greedy</em> matching that I want to learn.</p>\n    ","a":"\n<p>The non-greedy <code>?</code> works perfectly fine. Its just that you need to select <strong>dot matches all</strong> option in the regex engines( <em>regexpal</em>, the engine you used, also has this option ) you are testing with. This is because, regex engines generally dont match line breaks when you use <code>.</code>. You need to tell them explicitly that you want to match line-breaks too with <code>.</code></p>\n\n<p>ie</p>\n\n<pre><code>&lt;img\\s.*?&gt;\n</code></pre>\n\n<p>works fine!</p>\n\n<p>Check the <a href=\"http://regexr.com?31q13\">results here</a></p>\n\n<p>Also, read about <a href=\"http://www.regular-expressions.info/dot.html\">how <strong>dot</strong> behaves</a> in various regex flavours.</p>\n    "},{"t":"Replacing all occurrences of a string in JavaScript","l":"http://stackoverflow.com/questions/832257/javascript-multiple-replace","q":"\n\n<p>I have this string:</p>\n\n<pre>Test abc test test abc test test\ntest abc test test abc \n</pre>\n\n<p>Doing</p>\n\n<pre><code>str = str.replace('abc', '');\n</code></pre>\n\n<p>seems to only remove the first occurrence of <code>abc</code> in the string above. How can I replace <strong>all</strong> occurrences of it?</p>\n    ","a":"\n<pre><code>str = str.replace(/abc/g, '');\n</code></pre>\n\n<p>In response to comment:</p>\n\n<pre><code>var find = 'abc';\nvar re = new RegExp(find, 'g');\n\nstr = str.replace(re, '');\n</code></pre>\n\n<p>In response to <a href=\"http://stackoverflow.com/users/49153/click-upvote\">Click Upvote</a>'s comment, you could simplify it even more:</p>\n\n<pre><code>function replaceAll(find, replace, str) {\n  return str.replace(new RegExp(find, 'g'), replace);\n}\n</code></pre>\n\n<p><strong>Note:</strong> Regular expressions contain special (meta) characters, and as such it is dangerous to blindly pass an argument in the <code>find</code> function above without pre-processing it to escape those characters.  This is covered in the <a href=\"https://developer.mozilla.org/en-US/\">Mozilla Developer Network</a>'s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\">JavaScript Guide on Regular Expressions</a>, where they present the following utility function:</p>\n\n<pre><code>function escapeRegExp(string) {\n    return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n</code></pre>\n\n<p>So in order to make the <code>replaceAll</code> function above safer, it could be modified to the following if you also include <code>escapeRegExp</code>:</p>\n\n<pre><code>function replaceAll(string, find, replace) {\n  return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n</code></pre>\n    "},{"t":"How do you validate a URL with a regular expression in Python?","l":"http://stackoverflow.com/questions/827557/how-do-you-validate-a-url-with-a-regular-expression-in-python","q":"\n\n<p>I'm building an app on Google App Engine. I'm incredibly new to Python and have been beating my head against the following problem for the past 3 days.</p>\n\n<p>I have a class to represent an RSS Feed and in this class I have a method called setUrl. Input to this method is a URL. </p>\n\n<p>I'm trying to use the re python module to validate off of the RFC 3986 Reg-ex (<a href=\"http://www.ietf.org/rfc/rfc3986.txt\">http://www.ietf.org/rfc/rfc3986.txt</a>)</p>\n\n<p>Below is a snipped which <em>should</em> work? </p>\n\n<pre><code>p = re.compile('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?')\nm = p.match(url)\nif m:\n  self.url = url\n  return url\n</code></pre>\n    ","a":"\n<p>An easy way to parse (and validate) URL's is the <a href=\"http://docs.python.org/library/urlparse.html\">urlparse</a> module.  </p>\n\n<p>A regex is too much work.</p>\n\n<p></p><hr><p></p>\n\n<p>There's no \"validate\" method because almost anything is a valid URL.  There are some punctuation rules for splitting it up.  Absent any punctuation, you still have a valid URL.</p>\n\n<p>Check the RFC carefully and see if you can construct an \"invalid\" URL.  The rules are very flexible.  </p>\n\n<p>For example <code>:::::</code> is a valid URL.  The path is <code>\":::::\"</code>.  A pretty stupid filename, but a valid filename.</p>\n\n<p>Also, <code>/////</code> is a valid URL.  The netloc (\"hostname\") is <code>\"\"</code>.  The path is <code>\"///\"</code>.  Again, stupid.  Also valid.  This URL normalizes to <code>\"///\"</code> which is the equivalent.</p>\n\n<p>Something like <code>\"bad://///worse/////\"</code> is perfectly valid.  Dumb but valid.</p>\n\n<p><strong>Bottom Line</strong>.  Parse it, and look at the pieces to see if they're displeasing in some way.  </p>\n\n<p>Do you want the scheme to always be \"http\"?  Do you want the netloc to always be \"www.somename.somedomain\"?  Do you want the path to look unix-like?  Or windows-like?  Do you want to remove the query string?  Or preserve it?</p>\n\n<p>These are not RFC-specified validations.  These are validations unique to your application.</p>\n    "},{"t":"Regex Pattern to Match, Excluding when… / Except between","l":"http://stackoverflow.com/questions/23589174/regex-pattern-to-match-excluding-when-except-between","q":"\n\n<p><strong>--Edit--</strong> The current answers have some useful ideas but I want something more complete that I can 100% understand and reuse; that's why I set a bounty. Also ideas that work everywhere are better for me than not standard syntax like <code>\\K</code></p>\n\n<p>This question is about how I can match a pattern except some situations s1 s2 s3. I give a specific example to show my meaning but prefer a general answer I can 100% understand so I can reuse it in other situations.</p>\n\n<p><strong>Example</strong></p>\n\n<p>I want to match five digits using <code>\\b\\d{5}\\b</code> but not in three situations s1 s2 s3:</p>\n\n<p><strong>s1:</strong> Not on a line that ends with a period like this sentence.</p>\n\n<p><strong>s2:</strong> Not anywhere inside parens.</p>\n\n<p><strong>s3:</strong> Not inside a block that starts with <code>if(</code> and ends with <code>//endif</code></p>\n\n<p>I know how to solve any one of s1 s2 s3 with a lookahead and lookbehind, especially in C# lookbehind or <code>\\K</code> in PHP.</p>\n\n<p>For instance </p>\n\n<p>s1 <code>(?m)(?!\\d+.*?\\.$)\\d+</code></p>\n\n<p>s3 with C# lookbehind <code>(?&lt;!if\\(\\D*(?=\\d+.*?//endif))\\b\\d+\\b</code></p>\n\n<p>s3 with PHP \\K <code>(?:(?:if\\(.*?//endif)\\D*)*\\K\\d+</code></p>\n\n<p>But the mix of conditions together makes my head explode. Even more bad news is that I may need to add other conditions s4 s5 at another time.</p>\n\n<p>The good news is, I don't care if I process the files using most common languages like PHP, C#, Python or my neighbor's washing machine. :) I'm pretty much a beginner in Python &amp; Java but interested to learn if it has a solution.</p>\n\n<p>So I came here to see if someone think of a flexible recipe.</p>\n\n<p>Hints are okay: you don't need to give me full code. :)</p>\n\n<p>Thank you.</p>\n    ","a":"\n\n\n<p>Hans, I'll take the bait and flesh out my earlier answer. You said you want \"something more complete\" so I hope you won't mind the long answer—just trying to please. Let's start with some background.</p>\n\n<p>First off, this is an excellent question. There are often questions about matching certain patterns except in certain contexts (for instance, within a code block or inside parentheses). These questions often give rise to fairly awkward solutions. So your question about <strong>multiple contexts</strong> is a special challenge.</p>\n\n<p><strong>Surprise</strong></p>\n\n<p>Surprisingly, there is at least one efficient solution that is general, easy to implement and a pleasure to maintain. It <strong>works with all regex flavors</strong> that allow you to inspect capture groups in your code. And it happens to answer a number of common questions that may at first sound different from yours: \"match everything except Donuts\", \"replace all but...\", \"match all words except those on my mom's black list\", \"ignore tags\", \"match temperature unless italicized\"...</p>\n\n<p>Sadly, the technique is not well known: I estimate that in twenty SO questions that could use it, only one has one answer that mentions it—which means maybe one in fifty or sixty answers. See my exchange with Kobi in the comments. The technique is described in some depth in <a href=\"http://www.rexegg.com/regex-best-trick.html\">this article</a> which calls it (optimistically) the \"best regex trick ever\". Without going into as much detail, I'll try to give you a firm grasp of how the technique works. For more detail and code samples in various languages I encourage you to consult that resource.</p>\n\n<p><strong>A Better-Known Variation</strong></p>\n\n<p>There is a variation using syntax specific to Perl and PHP that accomplishes the same. You'll see it on SO in the hands of regex masters such as <a href=\"http://stackoverflow.com/users/2255089/casimir-et-hippolyte\">CasimiretHippolyte</a> and <a href=\"http://stackoverflow.com/users/1401975/hamza\">HamZa</a>. I'll tell you more about this below, but my focus here is on the general solution that works with all regex flavors (as long as you can inspect capture groups in your code).</p>\n\n<blockquote>\n  <p>Thanks for all the background, zx81... But what's the recipe?</p>\n</blockquote>\n\n<p><strong>Key Fact</strong> </p>\n\n<blockquote>\n  <p>The method returns the match in Group 1 capture. It does not care at\n  all about the overall match.</p>\n</blockquote>\n\n<p>In fact, <strong>the trick is to match the various contexts we don't want</strong> (chaining these contexts using the <code>|</code> OR / alternation) <strong>so as to \"neutralize them\".</strong> After matching all the unwanted contexts, the final part of the alternation matches what we <strong>do</strong> want and captures it to Group 1.</p>\n\n<p>The general recipe is</p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>Not_this_context|Not_this_either|StayAway|(WhatYouWant)\n</code></pre>\n\n<p>This will match <code>Not_this_context</code>, but in a sense that match goes into a garbage bin, because we won't look at the overall matches: we only look at Group 1 captures. </p>\n\n<p>In your case, with your digits and your three contexts to ignore, we can do: </p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>s1|s2|s3|(\\b\\d+\\b)\n</code></pre>\n\n<p>Note that because we actually match s1, s2 and s3 instead of trying to avoid them with lookarounds, the individual expressions for s1, s2 and s3 can remain clear as day. (They are the subexpressions on each side of a <code>|</code> )  </p>\n\n<p>The whole expression can be written like this:</p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>(?m)^.*\\.$|\\([^\\)]*\\)|if\\(.*?//endif|(\\b\\d+\\b)\n</code></pre>\n\n<p>See this <a href=\"http://regex101.com/r/tE5mP1\">demo</a> (but focus on the capture groups in the lower right pane.)</p>\n\n<p>If you mentally try to split this regex at each <code>|</code> delimiter, it is actually only a series of four very simple expressions.</p>\n\n<p>For flavors that support free-spacing, this reads particularly well. </p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>(?mx)\n      ### s1: Match line that ends with a period ###\n^.*\\.$  \n|     ### OR s2: Match anything between parentheses ###\n\\([^\\)]*\\)  \n|     ### OR s3: Match any if(...//endif block ###\nif\\(.*?//endif  \n|     ### OR capture digits to Group 1 ###\n(\\b\\d+\\b)\n</code></pre>\n\n<p>This is exceptionally easy to read and maintain. </p>\n\n<p><strong>Extending the regex</strong></p>\n\n<p>When you want to ignore more situations s4 and s5, you add them in more alternations on the left:</p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>s4|s5|s1|s2|s3|(\\b\\d+\\b)\n</code></pre>\n\n<p><strong>How does this work?</strong></p>\n\n<p>The contexts you don't want are added to a list of alternations on the left: they will match, but these overall matches are never examined, so matching them is a way to put them in a \"garbage bin\".</p>\n\n<p>The content you do want, however, is captured to Group 1. You then have to check programmatically that Group 1 is set and not empty. This is a trivial programming task (and we'll later talk about how it's done), especially considering that it leaves you with a simple regex that you can understand at a glance and revise or extend as required.</p>\n\n<p>I'm not always a fan of visualizations, but this one does a good job of showing how simple the method is. Each \"line\" corresponds to a potential match, but only the bottom line is captured into Group 1. </p>\n\n<p><img src=\"https://www.debuggex.com/i/JBtmNJUA3NvZqG3t.png\" alt=\"Regular expression visualization\"></p>\n\n<p><a href=\"https://www.debuggex.com/r/JBtmNJUA3NvZqG3t\">Debuggex Demo</a></p>\n\n<p><strong>Perl/PCRE Variation</strong></p>\n\n<p>In contrast to the general solution above, there exists a variation for Perl and PCRE that is often seen on SO, at least in the hands of regex Gods such as @CasimiretHippolyte and @HamZa. It is:</p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>(?:s1|s2|s3)(*SKIP)(*F)|whatYouWant\n</code></pre>\n\n<p>In your case:</p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>(?m)(?:^.*\\.$|\\([^()]*\\)|if\\(.*?//endif)(*SKIP)(*F)|\\b\\d+\\b\n</code></pre>\n\n<p>This variation is a bit easier to use because the content matched in contexts s1, s2 and s3 is simply skipped, so you don't need to inspect Group 1 captures (notice the parentheses are gone). The matches only contain <code>whatYouWant</code></p>\n\n<p>Note that <code>(*F)</code>, <code>(*FAIL)</code> and <code>(?!)</code> are all the same thing. If you wanted to be more obscure, you could use <code>(*SKIP)(?!)</code></p>\n\n<p><a href=\"http://regex101.com/r/gX5qF3\">demo</a> for this version</p>\n\n<p><strong>Applications</strong></p>\n\n<p>Here are some common problems that this technique can often easily solve. You'll notice that the word choice can make some of these problems sound different while in fact they are virtually identical. </p>\n\n<ol>\n<li>How can I match foo except anywhere in a tag like <code>&lt;a stuff...&gt;...&lt;/a&gt;</code>?</li>\n<li>How can I match foo except in an <code>&lt;i&gt;</code> tag or a javascript snippet (more conditions)?</li>\n<li>How can I match all words that are not on this black list?</li>\n<li>How can I ignore anything inside a SUB... END SUB block?  </li>\n<li>How can I match everything except... s1 s2 s3?</li>\n</ol>\n\n<p><strong>How to Program the Group 1 Captures</strong></p>\n\n<p>You didn't as for code, but, for completion... The code to inspect Group 1 will obviously depend on your language of choice. At any rate it shouldn't add more than a couple of lines to the code you would use to inspect matches.</p>\n\n<p>If in doubt, I recommend you look at the <a href=\"http://www.rexegg.com/regex-best-trick.html#codesamples\">code samples section</a> of the article mentioned earlier, which presents code for quite a few languages. </p>\n\n<p><strong>Alternatives</strong></p>\n\n<p>Depending on the complexity of the question, and on the regex engine used, there are several alternatives. Here are the two that can apply to most situations, indluding multiple conditions. In my view, neither is nearly as attractive as the <code>s1|s2|s3|(whatYouWant)</code> recipe, if only because clarity always wins out.</p>\n\n<p><strong>1. Replace then Match.</strong> </p>\n\n<p>A good solution that sounds hacky but works well in many environments is to work in two steps. A first regex neutralizes the context you want to ignore by replacing potentially conflicting strings. If you only want to match, then you can replace with an empty string, then run your match in the second step. If you want to replace, you can first replace the strings to be ignored with something distinctive, for instance surrounding your digits with a fixed-width chain of <code>@@@</code>. After this replacement, you are free to replace what you really wanted, then you'll have to revert your distinctive <code>@@@</code> strings.   </p>\n\n<p><strong>2. Lookarounds.</strong> </p>\n\n<p>Your original post showed that you understand how to exclude a single condition using lookarounds. You said that C# is great for this, and you are right, but it is not the only option. The .NET regex flavors found in C#, VB.NET and Visual C++ for example, as well as the still-experimental <code>regex</code> module to replace <code>re</code> in Python, are the only two engines I know that support infinite-width lookbehind. With these tools, one condition in one lookbehind can take care of looking not only behind but also at the match and beyond the match, avoiding the need to coordinate with a lookahead. More conditions? More lookarounds. </p>\n\n<p>Recycling the regex you had for s3 in C#, the whole pattern would look like this.</p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>(?!.*\\.)(?&lt;!\\([^()]*(?=\\d+[^)]*\\)))(?&lt;!if\\(\\D*(?=\\d+.*?//endif))\\b\\d+\\b\n</code></pre>\n\n<p>But by now you know I'm not recommending this, right?</p>\n\n<p><strong>Deletions</strong></p>\n\n<p>@HamZa and @Jerry have suggested I mention an additional trick for cases when you seek to just delete <code>WhatYouWant</code>. You remember that the recipe to match <code>WhatYouWant</code> (capturing it into Group 1) was <code>s1|s2|s3|(WhatYouWant)</code>, right? To delete all instance of <code>WhatYouWant</code>, you change the regex to </p>\n\n<pre class=\"lang-regex prettyprint-override\"><code>(s1|s2|s3)|WhatYouWant\n</code></pre>\n\n<p>For the replacement string, you use <code>$1</code>. What happens here is that for each instance of <code>s1|s2|s3</code> that is matched, the replacement <code>$1</code> replaces that instance with itself (referenced by <code>$1</code>). On the other hand, when <code>WhatYouWant</code> is matched, it is replaced by an empty group and nothing else — and therefore deleted. See this <a href=\"http://regex101.com/r/tE5mP1/2\">demo</a>, thank you @HamZa and @Jerry for suggesting this wonderful addition.</p>\n\n<p><strong>Replacements</strong></p>\n\n<p>This brings us to replacements, on which I'll touch briefly. </p>\n\n<ol>\n<li>When replacing with nothing, see the \"Deletions\" trick above.</li>\n<li>When replacing, if using Perl or PCRE, use the <code>(*SKIP)(*F)</code> variation mentioned above to match exactly what you want, and do a straight replacement.</li>\n<li>In other flavors, within the replacement function call, inspect the match using a callback or lambda, and replace if Group 1 is set. If you need help with this, the article already referenced will give you code in various languages.</li>\n</ol>\n\n<p>Have fun!</p>\n\n<p>No, wait, there's more! </p>\n\n<p>Ah, nah, I'll save that for my memoirs in twenty volumes, to be released next Spring.</p>\n    "},{"t":"Regex to match Egyptian Hieroglyphics [closed]","l":"http://stackoverflow.com/questions/28896329/regex-to-match-egyptian-hieroglyphics","q":"\n\n<p>I want to know a regex to match the  Egyptian Hieroglyphics. I am completely clueless and need your help.</p>\n\n<p>I cannot post the letters as stack overflow doesnt seem to recognize it.</p>\n\n<p>So can anyone let me know the unicode range for these characters.</p>\n    ","a":"\n<p>TLDNR: <code>\\p{Egyptian_Hieroglyphs}</code></p>\n\n<h3>Javascript</h3>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Egyptian_Hieroglyphs_(Unicode_block)\">Egyptian_Hieroglyphs</a> belong to the \"astral\" plane that uses more than 16 bits to encode a character. Javascript, as of ES5, doesn't support astral planes (<a href=\"https://mathiasbynens.be/notes/javascript-encoding\">more on that</a>) therefore you have to use surrogate pairs. The first surrogate is</p>\n\n<pre><code>U+13000 = d80c dc00\n</code></pre>\n\n<p>the last one is</p>\n\n<pre><code>U+1342E = d80d dc2e\n</code></pre>\n\n<p>that gives</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>re = /(\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E])+/g\n\nt = document.getElementById(\"pyramid\").innerHTML\ndocument.write(\"&lt;h1&gt;Found&lt;/h1&gt;\" + t.match(re))</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"pyramid\"&gt;\n\n  some     𓀀\treally    𓀁\told    𓐬\tstuff    𓐭\t    𓐮\n  \n  &lt;/div&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>This is what it looks like with <a href=\"https://www.google.com/get/noto/#/family/noto-sans-egyp\">Noto Sans Egyptian Hieroglyphs</a> installed:</p>\n\n<p><img src=\"http://i.stack.imgur.com/pIdr1.png\" alt=\"enter image description here\"></p>\n\n<h3>Other languages</h3>\n\n<p>On platforms that support UCS-4 you can use Egyptian codepoints <code>13000</code> to <code>1342F</code> directly, but the syntax differs from system to system. For example, in Python (3.3 up) it will be <code>[\\U00013000-\\U0001342E]</code>:</p>\n\n<pre><code>&gt;&gt;&gt; s = \"some \\U+13000 really \\U+13001 old \\U+1342C stuff \\U+1342D \\U+1342E\"\n&gt;&gt;&gt; s\n'some 𓀀 really 𓀁 old 𓐬 stuff 𓐭 𓐮'\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall('[\\U00013000-\\U0001342E]', s)\n['𓀀', '𓀁', '𓐬', '𓐭', '𓐮']\n</code></pre>\n\n<p>Finally, if your regex engine supports unicode properties, you can (and should) use these instead of hardcoded ranges. For example in php/pcre:</p>\n\n<pre><code>$str = \" some 𓀀 really 𓀁 old 𓐬 stuff 𓐭  𓐮\";\n\npreg_match_all('~\\p{Egyptian_Hieroglyphs}~u', $str, $m);\nprint_r($m);\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>[0] =&gt; Array\n    (\n        [0] =&gt; 𓀀\n        [1] =&gt; 𓀁\n        [2] =&gt; 𓐬\n        [3] =&gt; 𓐭\n        [4] =&gt; 𓐮\n    )\n</code></pre>\n    "},{"t":"UK Postcode Regex (Comprehensive)","l":"http://stackoverflow.com/questions/164979/uk-postcode-regex-comprehensive","q":"\n\n<p>I'm after a regex that will validate a full complex UK postcode only within an input string. All of the uncommon postcode forms must be covered as well as the usual. For instance:</p>\n\n<p><strong>Matches</strong></p>\n\n<ul>\n<li>CW3 9SS</li>\n<li>SE5 0EG</li>\n<li>SE50EG</li>\n<li>se5 0eg</li>\n<li>WC2H 7LT</li>\n</ul>\n\n<p><strong>No Match</strong></p>\n\n<ul>\n<li>aWC2H 7LT</li>\n<li>WC2H 7LTa</li>\n<li>WC2H</li>\n</ul>\n\n<p>Are there any official or even semi-official regexes in use for this kind of thing? Any other advice as to formatting and storing these in a database?</p>\n    ","a":"\n<p>I'd recommend taking a look at the UK Government Data Standard for postcodes [link now dead; <a href=\"http://webarchive.nationalarchives.gov.uk/+/http://www.cabinetoffice.gov.uk/media/291370/bs7666-v2-0-xsd-PostCodeType.htm\">archive of XML</a>, see <a href=\"http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Validation\">Wikipedia</a> for discussion]. There is a brief description about the data and the attached xml schema provides a regular expression. It may not be exactly what you want but would be a good starting point. The RegEx differs from the XML slightly, as a P character in third position in format A9A 9AA is allowed by the definition given.</p>\n\n<p>The RegEx supplied by the UK Government was:</p>\n\n<pre><code>(GIR 0AA)|((([A-Z-[QVX]][0-9][0-9]?)|(([A-Z-[QVX]][A-Z-[IJZ]][0-9][0-9]?)|(([A-Z-[QVX]][0-9][A-HJKPSTUW])|([A-Z-[QVX]][A-Z-[IJZ]][0-9][ABEHMNPRVWXY])))) [0-9][A-Z-[CIKMOV]]{2})\n</code></pre>\n\n<p>As pointed out on the Wikipedia discussion, this will allow some non-real postcodes (e.g. those starting AA, ZY) and they do provide a more rigorous test that you could try.</p>\n    "},{"t":"What is the simplest way to convert a Java string from all caps (words separated by underscores) to CamelCase (no word separators)?","l":"http://stackoverflow.com/questions/1143951/what-is-the-simplest-way-to-convert-a-java-string-from-all-caps-words-separated","q":"\n\n<p>The title pretty much says it all. What's the simplest/most elegant way that I can convert, in Java, a string from the format <code>\"THIS_IS_AN_EXAMPLE_STRING\"</code> to the format \"<code>ThisIsAnExampleString</code>\"? I figure there must be at least one way to do it using <code>String.replaceAll()</code> and a regex.</p>\n\n<p>My initial thoughts are: prepend the string with an underscore (<code>_</code>), convert the whole string to lower case, and then use replaceAll to convert every character preceded by an underscore with its uppercase version.</p>\n    ","a":"\n<p>Another option is using Google Guava's <code>com.google.common.base.CaseFormat</code></p>\n\n<p><a href=\"http://stackoverflow.com/users/245602/george-hawkins\">George Hawkins</a> left a comment with this example of usage:</p>\n\n<pre><code>CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, \"THIS_IS_AN_EXAMPLE_STRING\");\n</code></pre>\n    "},{"t":"How do I replace the *first instance* of a string in .NET?","l":"http://stackoverflow.com/questions/141045/how-do-i-replace-the-first-instance-of-a-string-in-net","q":"\n\n<p>I want to replace the first occurrence in a given string. </p>\n\n<p>How can I accomplish this in .NET?</p>\n    ","a":"\n<pre><code>string ReplaceFirst(string text, string search, string replace)\n{\n  int pos = text.IndexOf(search);\n  if (pos &lt; 0)\n  {\n    return text;\n  }\n  return text.Substring(0, pos) + replace + text.Substring(pos + search.Length);\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>string str = \"The brown brown fox jumps over the lazy dog\";\n\nstr = ReplaceFirst(str, \"brown\", \"quick\");\n</code></pre>\n\n<p><strong>EDIT</strong>: As @itsmatt <a href=\"http://stackoverflow.com/questions/141045/how-do-i-replace-a-string-in-net#141062\">mentioned</a>, there's also Regex.Replace(String, String, Int32), which can do the same, but is probably more expensive at runtime, since it's utilizing a full featured parser where my method does one find and three string concatenations.</p>\n\n<p><strong>EDIT2</strong>: If this is a common task, you might want to make the method an extension method:</p>\n\n<pre><code>public static class StringExtension\n{\n  public static string ReplaceFirst(this string text, string search, string replace)\n  {\n     // ...same as above...\n  }\n}\n</code></pre>\n\n<p>Using the above example it's now possible to write:</p>\n\n<pre><code>str = str.ReplaceFirst(\"brown\", \"quick\");\n</code></pre>\n    "},{"t":"How can I find all matches to a regular expression in Python?","l":"http://stackoverflow.com/questions/4697882/how-can-i-find-all-matches-to-a-regular-expression-in-python","q":"\n\n<p>In a program I'm writing i have python use the <code>re.search()</code> function to find matches in a block of text and print the results. However, once the program finds the first match in the block of text, it exits. How do i do this repeatedly where the program doesn't stop until ALL matches have been found? Is there a separate function to do this? Thanks in advance!</p>\n    ","a":"\n<p>Use <code>re.findall</code> or <code>re.finditer</code> instead.</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.findall\"><code>re.findall(pattern, string)</code></a> returns a list of matching strings.</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.finditer\"><code>re.finditer(pattern, string)</code></a> returns an iterator over <a href=\"http://docs.python.org/library/re.html#re.MatchObject\"><code>MatchObject</code></a> objects.</p>\n    "},{"t":"How to validate an email address in PHP [duplicate]","l":"http://stackoverflow.com/questions/12026842/how-to-validate-an-email-address-in-php","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/5855811/how-to-validate-an-email-in-php\" dir=\"ltr\">How to validate an Email in PHP?</a>\n                <span class=\"question-originals-answer-count\">\n                    2 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I have this function to validate an email addresses:</p>\n\n<pre><code>function validateEMAIL($EMAIL) {\n    $v = \"/[a-zA-Z0-9_-.+]+@[a-zA-Z0-9-]+.[a-zA-Z]+/\";\n\n    return (bool)preg_match($v, $EMAIL);\n}\n</code></pre>\n\n<p>Is this okay for checking if the email address is valid or not?</p>\n    ","a":"\n<p>The easiest and safest way to check whether an email address is well-formed is to use the <a href=\"http://php.net/manual/en/function.filter-var.php\"><code>filter_var()</code></a> function:</p>\n\n<pre><code>if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    // invalid emailaddress\n}\n</code></pre>\n\n<p>Additionally you can check whether the domain defines an <code>MX</code> record:</p>\n\n<pre><code>if (!checkdnsrr($domain, 'MX')) {\n    // domain is not valid\n}\n</code></pre>\n\n<p>But this still doesn't guarantee that the mail exists. The only way to find that out is by sending a confirmation mail.</p>\n\n<hr>\n\n<p>Now that you have your easy answer feel free to read on about email address validation if you care to learn or otherwise just use the fast answer and move on. No hard feelings. </p>\n\n<p>Trying to validate an email address using a regex is an \"impossible\" task. I would go as far as to say that that regex you have made is useless. There are three rfc's regarding emailaddresses and writing a regex to catch wrong emailadresses and and the same time don't have false positives is something no mortal can do. Check out <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\">this list</a> for tests (both failed and succeeded) of the regex used by PHP's <code>filter_var()</code> function.</p>\n\n<p>Even the built-in PHP functions,  email clients or servers don't get it right. Still in most cases <code>filter_var</code> is the best option.</p>\n\n<p>If you want to know which regex pattern PHP (currently) uses to validate email addresses see <a href=\"http://lxr.php.net/xref/PHP_5_4/ext/filter/logical_filters.c#525\">the PHP source</a>.</p>\n\n<p>If you want to learn more about email addresses I suggest you to start reading the specs, but I have to warn you it is not an easy read by any stretch:</p>\n\n<ul>\n<li><a href=\"http://tools.ietf.org/html/rfc5322\">rfc5322</a></li>\n<li><a href=\"http://tools.ietf.org/html/rfc5321\">rfc5321</a></li>\n<li><a href=\"http://tools.ietf.org/html/rfc3696\">rfc3696</a></li>\n<li><a href=\"http://tools.ietf.org/html/rfc6531\">rfc6531</a> (allows unicode characters, although many clients / servers don't accept it)</li>\n</ul>\n\n<p>Note that <code>filter_var()</code> is as already stated only available as of PHP 5.2. In case you want it to work with earlier versions of PHP you could use the regex used in PHP:</p>\n\n<pre><code>&lt;?php\n\n$pattern = '/^(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){255,})(?!(?:(?:\\\\x22?\\\\x5C[\\\\x00-\\\\x7E]\\\\x22?)|(?:\\\\x22?[^\\\\x5C\\\\x22]\\\\x22?)){65,}@)(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22))(?:\\\\.(?:(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2F-\\\\x39\\\\x3D\\\\x3F\\\\x5E-\\\\x7E]+)|(?:\\\\x22(?:[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7F]|(?:\\\\x5C[\\\\x00-\\\\x7F]))*\\\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\\\]))$/iD';\n\n$emailaddress = 'test@gmail.com';\n\nif (preg_match($pattern, $emailaddress) === 1) {\n    // emailaddress is valid\n}\n</code></pre>\n\n<p><em>P.S. A note on the regex pattern used above (from the PHP source). It looks like there is some copyright on it of <a href=\"http://lxr.php.net/xref/PHP_5_4/ext/filter/logical_filters.c#501\">Michael Rushton</a>. As stated: \"Feel free to use and redistribute this code. But please keep this copyright notice.\"</em></p>\n    "},{"t":"A Regex that will never be matched by anything","l":"http://stackoverflow.com/questions/1723182/a-regex-that-will-never-be-matched-by-anything","q":"\n\n<p>This might sound like a stupid question, but I had a long talk with some of my fellow developers and it sounded like a fun thing to think of.</p>\n\n<p>So; what's your thought - what does a Regex look like, that will never be matched by any string, ever!</p>\n\n<p><strong>Edit</strong>: Why I want this? Well, firstly because I find it interesting to think of such an expression and secondly because I need it for a script.</p>\n\n<p>In that script I define a dictionary as <code>Dictionary&lt;string, Regex&gt;</code>. This contains, as you see, a string and an expression.</p>\n\n<p>Based on that dictionary I create methods that all use this dictionary as only reference on how they should do their work, one of them matches the regexes against a parsed logfile.</p>\n\n<p>If an expression is matched, another <code>Dictionary&lt;string, long&gt;</code> is added a value that is returned by the expression. So, to catch any log-messages that are not matched by an expression in the dictionary I created a new group called \"unknown\".</p>\n\n<p>To this group everything that didn't match anything other is added. But to prevent the \"unknown\"-expression to mismatch (by accident) a log-message, I had to create an expression that is most certainly never matched, no matter what string I give it.</p>\n\n<p>Thus, there you have my reason for this \"not a real question\"...</p>\n    ","a":"\n<p>This is actually quite simple, <s>although it depends on the implementation / flags</s>*:</p>\n\n<pre><code>$a\n</code></pre>\n\n<p>Will match a character <code>a</code> after the end of the string. Good luck.</p>\n\n<p></p><hr><p></p>\n\n<p>*) Originally I did not give much thought on multiline-mode regexp, where <code>$</code> also matches the end of a line. In fact, it would match the empty string <em>right before the newline</em>, so an ordinary character like <code>a</code> can never appear after <code>$</code>.</p>\n    "},{"t":"What's a good way to validate links (urls) in rails?","l":"http://stackoverflow.com/questions/7167895/whats-a-good-way-to-validate-links-urls-in-rails","q":"\n\n<p>I was wondering how I would best validate urls or links in rails. I was thinking of using a regular expression, but am not sure if this is the best practice.</p>\n\n<p>And, if I were to use a regex, could someone suggest one to me? I am still new to regex.</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>Validating an URL is a tricky job. It's also a very broad request.</p>\n\n<p>What do you want to do, exactly? Do you want to validate the format of the URL, the existence, or what? There are several possibilities, depending on what you want to do.</p>\n\n<p>A regular expression can validate the format of the URL. But even a complex regular expression cannot ensure you are dealing with a valid URL.</p>\n\n<p>For instance, if you take a simple regular expression, it will probably reject the following host</p>\n\n<pre><code>http://invalid##host.com\n</code></pre>\n\n<p>but it will allow</p>\n\n<pre><code>http://invalid-host.foo\n</code></pre>\n\n<p>that is a valid host, but not a valid domain if you consider the existing TLDs. Indeed, the solution would work if you want to validate the hostname, not the domain because the following one is a valid hostname</p>\n\n<pre><code>http://host.foo\n</code></pre>\n\n<p>as well the following one</p>\n\n<pre><code>http://localhost\n</code></pre>\n\n<p>Now, let me give you some solutions.</p>\n\n<p>If you want to validate a domain, then you need to forget about regular expressions. The best solution available at the moment is the Public Suffix List, a list maintained by Mozilla. I created a Ruby library to parse and validate domains against the Public Suffix List, and it's called <a href=\"http://www.simonecarletti.com/code/public_suffix_service/\">PublicSuffixService</a>.</p>\n\n<p>If you want to validate the format of an URI/URL, then you might want to use regular expressions. Instead of searching for one, use the built-in Ruby <code>URI.parse</code> method.</p>\n\n<pre><code>require 'uri'\n\ndef valid?(uri)\n  !!URI.parse(uri)\nrescue URI::InvalidURIError\n  false\nend\n</code></pre>\n\n<p>You can even decide to make it more restrictive. For instance, if you want the URL to be an HTTP/HTTPS URL, then you can make the validation more accurate.</p>\n\n<pre><code>require 'uri'\n\ndef valid?(url)\n  uri = URI.parse(url)\n  uri.kind_of?(URI::HTTP)\nrescue URI::InvalidURIError\n  false\nend\n</code></pre>\n\n<p>Of course, there are tons of improvements you can apply to this method, including checking for a path or a scheme.</p>\n    "},{"t":"Getting parts of a URL (Regex)","l":"http://stackoverflow.com/questions/27745/getting-parts-of-a-url-regex","q":"\n\n<p>Given the URL (single line):<br>\n<a href=\"http://test.example.com/dir/subdir/file.html\">http://test.example.com/dir/subdir/file.html</a></p>\n\n<p>How can I extract the following parts using regular expressions:</p>\n\n<ol>\n<li>The Subdomain (test)</li>\n<li>The Domain (example.com)</li>\n<li>The path without the file (/dir/subdir/)</li>\n<li>The file (file.html)</li>\n<li>The path with the file (/dir/subdir/file.html)</li>\n<li>The URL without the path (<a href=\"http://test.example.com\">http://test.example.com</a>)</li>\n<li>(add any other that you think would be useful)</li>\n</ol>\n\n<p>The regex should work correctly even if I enter the following URL:<br>\n<a href=\"http://example.example.com/example/example/example.html\">http://example.example.com/example/example/example.html</a></p>\n\n<p>Thank you.</p>\n    ","a":"\n<blockquote>\n  <p>A single regex to parse and breakup a\n  full URL including query parameters\n  and anchors e.g.</p>\n  \n  <p><a href=\"https://www.google.com/dir/1/2/search.html?arg=0-a&amp;arg1=1-b&amp;arg3-c#hash\">https://www.google.com/dir/1/2/search.html?arg=0-a&amp;arg1=1-b&amp;arg3-c#hash</a> </p>\n  \n  <p><code>^((http[s]?|ftp):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$</code></p>\n  \n  <p>RexEx positions:</p>\n  \n  <p>url: RegExp['$&amp;'], </p>\n  \n  <p>protocol:RegExp.$2,</p>\n  \n  <p>host:RegExp.$3, </p>\n  \n  <p>path:RegExp.$4,</p>\n  \n  <p>file:RegExp.$6, </p>\n  \n  <p>query:RegExp.$7,</p>\n  \n  <p>hash:RegExp.$8</p>\n</blockquote>\n\n<p>you could then further parse the host ('.' delimited) quite easily.</p>\n\n<p>What <strong>I</strong> would do is use something like this:</p>\n\n<pre><code>/*\n    ^(.*:)//([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$\n*/\nproto $1\nhost $2\nport $3\nthe-rest $4\n</code></pre>\n\n<p>the further parse 'the rest' to be as specific as possible. Doing it in one regex is, well, a bit crazy.</p>\n    "},{"t":"How to use JavaScript regex over multiple lines?","l":"http://stackoverflow.com/questions/1979884/how-to-use-javascript-regex-over-multiple-lines","q":"\n\n<pre><code>var ss= \"&lt;pre&gt;aaaa\\nbbb\\nccc&lt;/pre&gt;ddd\";\nvar arr= ss.match( /&lt;pre.*?&lt;\\/pre&gt;/gm );\nalert(arr);     // null\n</code></pre>\n\n<p>I'd want the PRE block be picked up, even though it spans over newline characters. I thought the 'm' flag does it. Does not.</p>\n\n<p>Found the answer <a href=\"http://simonwillison.net/2004/Sep/20/newlines/\">here</a> before posting. SInce I thought I knew JavaScript (read three books, worked hours) and there wasn't an existing solution at SO, I'll dare to post anyways. <strong>throw stones here</strong></p>\n\n<p>So the solution is:</p>\n\n<pre><code>var ss= \"&lt;pre&gt;aaaa\\nbbb\\nccc&lt;/pre&gt;ddd\";\nvar arr= ss.match( /&lt;pre[\\s\\S]*?&lt;\\/pre&gt;/gm );\nalert(arr);     // &lt;pre&gt;...&lt;/pre&gt; :)\n</code></pre>\n\n<p>Does anyone have a less cryptic way?</p>\n\n<p>Edit: <a href=\"http://stackoverflow.com/questions/1387116/matching-multiline-patterns\">this</a> is a duplicate but since it's harder to find than mine, I don't remove.</p>\n\n<p>It proposes <code>[^]</code> as a \"multiline dot\". What I still don't understand is why <code>[.\\n]</code> does not work. Guess this is one of the sad parts of JavaScript..</p>\n    ","a":"\n<p><code>[.\\n]</code> does not work because <code>.</code> has no special meaning inside of <code>[]</code>, it just means a literal <code>.</code>. <code>(.|\\n)</code> is probably the most clear way of expressing \"any character, including a newline\". Of course, if you want to match all newlines, you would need to add <code>\\r</code> as well to include Windows and classic Mac OS style line endings: <code>(.|[\\r\\n])</code>.</p>\n\n<p>In general, you shouldn't try to use a regexp to match the actual HTML tags. See, for instance, <a href=\"http://stackoverflow.com/questions/701166/can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-rege\">these</a> <a href=\"http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454\">questions</a> for more information on why.</p>\n\n<p>Instead, try actually searching the DOM for the tag you need (using jQuery makes this easier, but you can always do <code>document.getElementsByTagName(\"pre\")</code> with the standard DOM), and then  search the text content of those results with a regexp if you need to match against the contents.</p>\n    "},{"t":"Match multiline text using regular expression","l":"http://stackoverflow.com/questions/3651725/match-multiline-text-using-regular-expression","q":"\n\n<p>I am trying to match a multi line text using java. When I use the <code>Pattern</code> class with the <code>Pattern.MULTILINE</code> modifier, I am able to match, but I am not able to do so with <code>(?m).</code></p>\n\n<p>The same pattern with <code>(?m)</code> and using <code>String.matches</code> does not seem to work.</p>\n\n<p>I am sure I am missing something, but no idea what. Am not very good at regular expressions.</p>\n\n<p>This is what I tried</p>\n\n<pre><code>String test = \"User Comments: This is \\t a\\ta \\n test \\n\\n message \\n\";\n\nString pattern1 = \"User Comments: (\\\\W)*(\\\\S)*\";\nPattern p = Pattern.compile(pattern1, Pattern.MULTILINE);\nSystem.out.println(p.matcher(test).find());  //true\n\nString pattern2 = \"(?m)User Comments: (\\\\W)*(\\\\S)*\";\nSystem.out.println(test.matches(pattern2));  //false - why?\n</code></pre>\n    ","a":"\n<p>First, you're using the modifiers under an incorrect assumption.</p>\n\n<p><code>Pattern.MULTILINE</code> or <code>(?m)</code> tells Java to accept the anchors <code>^</code> and <code>$</code> to match at the start and end of each line (otherwise they only match at the start/end of the entire string).</p>\n\n<p><code>Pattern.DOTALL</code> or <code>(?s)</code> tells Java to allow the dot to match newline characters, too.</p>\n\n<p>Second, in your case, the regex fails because you're using the <code>matches()</code> method which expects the regex to match the <em>entire</em> string - which of course doesn't work since there are some characters left after <code>(\\\\W)*(\\\\S)*</code> have matched.</p>\n\n<p>So if you're simply looking for a string that starts with <code>User Comments:</code>, use the regex</p>\n\n<pre><code>^\\s*User Comments:\\s*(.*)\n</code></pre>\n\n<p>with the <code>Pattern.DOTALL</code> option:</p>\n\n<pre><code>Pattern regex = Pattern.compile(\"^\\\\s*User Comments:\\\\s+(.*)\", Pattern.DOTALL);\nMatcher regexMatcher = regex.matcher(subjectString);\nif (regexMatcher.find()) {\n    ResultString = regexMatcher.group(1);\n} \n</code></pre>\n\n<p><code>ResultString</code> will then contain the text after <code>User Comments:</code></p>\n    "},{"t":"What regex will match every character except comma ',' or semi-colon ';'?","l":"http://stackoverflow.com/questions/1409162/what-regex-will-match-every-character-except-comma-or-semi-colon","q":"\n\n<p>Is it possible to define a regex which will match every character except a certain defined character or set of characters?</p>\n\n<p>Basically, I wanted to split a string by either comma (,) or semi-colon (;). So I was thinking of doing it with a regex which would match everything until it encountered a comma or a semi-colon.</p>\n    ","a":"\n<pre><code>[^,;]+\n</code></pre>\n\n<p>You haven't specified the regex implementation you are using. Most of them have a <code>Split</code> method that takes delimiters and split by them. You might want to use that one with a \"normal\" (without <code>^</code>) character class:</p>\n\n<pre><code>[,;]+\n</code></pre>\n    "},{"t":"Regular Expressions and GWT","l":"http://stackoverflow.com/questions/1162240/regular-expressions-and-gwt","q":"\n\n<p>My questions is: Is there a good solution to use regular expression in GWT?</p>\n\n<p>I'm not satisfied with the use of String.split(regex) for example. GWT translates the Code to JS and then uses the regex as a JS regex. But I cannot use something like the Java Matcher or Java Pattern. But I would need these for group matching.</p>\n\n<p>Is there any possibility or library?</p>\n\n<p>I tried Jakarta Regexp, but I had other problems because GWT doesn't emulate all methods of the Java SDK this library uses. </p>\n\n<p>I want to be able to use something like this on the client side:</p>\n\n<pre><code>// Compile and use regular expression\nPattern pattern = Pattern.compile(patternStr);\nMatcher matcher = pattern.matcher(inputStr);\nboolean matchFound = matcher.find();\n\nif (matchFound) {\n    // Get all groups for this match\n    for (int i=0; i&lt;=matcher.groupCount(); i++) {\n        String groupStr = matcher.group(i);\n        System.out.println(groupStr);\n    }\n}\n</code></pre>\n    ","a":"\n<p>The same code using RegExp could be:</p>\n\n<pre><code>// Compile and use regular expression\nRegExp regExp = RegExp.compile(patternStr);\nMatchResult matcher = regExp.exec(inputStr);\nboolean matchFound = matcher != null; // equivalent to regExp.test(inputStr); \n\nif (matchFound) {\n    // Get all groups for this match\n    for (int i = 0; i &lt; matcher.getGroupCount(); i++) {\n        String groupStr = matcher.getGroup(i);\n        System.out.println(groupStr);\n    }\n}\n</code></pre>\n    "},{"t":"How to pattern match using regular expression in Scala?","l":"http://stackoverflow.com/questions/4636610/how-to-pattern-match-using-regular-expression-in-scala","q":"\n\n<p>I would like to be able to find a match between the first letter of a word, and one of the letters in a group such as \"ABC\". In pseudocode, this might look something like:</p>\n\n<pre><code>case Process(word) =&gt;\n   word.firstLetter match {\n      case([a-c][A-C]) =&gt;\n      case _ =&gt;\n   }\n}\n</code></pre>\n\n<p>But how do I grab the first letter in Scala instead of Java? How do I express the regular expression properly? Is it possible to do this within a <a href=\"http://www.scala-lang.org/node/107\">case class</a>?</p>\n    ","a":"\n<p>You can do this because regular expressions define extractors but you need to define the regex pattern first.  I don't have access to a Scala REPL to test this but something like this should work.</p>\n\n<pre>val Pattern = \"([a-cA-C])\".r\nword.firstLetter match {\n   case Pattern(c) =&gt; c bound to capture group here\n   case _ =&gt;\n}\n</pre>\n    "},{"t":"How to replace a set of tokens in a Java String?","l":"http://stackoverflow.com/questions/959731/how-to-replace-a-set-of-tokens-in-a-java-string","q":"\n\n<p>I have the following template String: \"Hello [Name] Please find attached [Invoice Number] which is due on [Due Date]\".</p>\n\n<p>I also have String variables for name, invoice number and due date - what's the best way to replace the tokens in the template with the variables?  </p>\n\n<p>(Note that if a variable happens to contain a token it should NOT be replaced).</p>\n\n<p>---------- EDIT----------------</p>\n\n<p>With thanks to laginimaineb and Alan M here's my solution:</p>\n\n<pre><code>public static String replaceTokens(String text,\n\t\tMap&lt;String, String&gt; replacements) {\n\tPattern pattern = Pattern.compile(\"\\\\[(.+?)\\\\]\");\n\tMatcher matcher = pattern.matcher(text);\n\tStringBuffer buffer = new StringBuffer();\n\twhile (matcher.find()) {\n\t\tString replacement = replacements.get(matcher.group(1));\n\t\tif (replacement != null) {\n//\t\t\tmatcher.appendReplacement(buffer, replacement);\n\t\t\t// see comment \n\t\t\tmatcher.appendReplacement(buffer, \"\");\n\t\t\tbuffer.append(replacement);\n\t\t}\n\t}\n\tmatcher.appendTail(buffer);\n\treturn buffer.toString();\n}\n</code></pre>\n    ","a":"\n<p>The most efficient way would be using a matcher to continually find the expressions and replace them, then append the text to a string builder:</p>\n\n<pre><code>Pattern pattern = Pattern.compile(\"\\\\[(.+?)\\\\]\");\nMatcher matcher = pattern.matcher(text);\nHashMap&lt;String,String&gt; replacements = new HashMap&lt;String,String&gt;();\n//populate the replacements map ...\nStringBuilder builder = new StringBuilder();\nint i = 0;\nwhile (matcher.find()) {\n    String replacement = replacements.get(matcher.group(1));\n    builder.append(text.substring(i, matcher.start()));\n    if (replacement == null)\n        builder.append(matcher.group(0));\n    else\n        builder.append(replacement);\n    i = matcher.end();\n}\nbuilder.append(text.substring(i, text.length()));\nreturn builder.toString();\n</code></pre>\n    "},{"t":"Javascript replace with reference to matched group?","l":"http://stackoverflow.com/questions/1234712/javascript-replace-with-reference-to-matched-group","q":"\n\n<p>I have a string, such as <code>hello _there_</code>. I'd like to replace the two underscores with <code>&lt;div&gt;</code> and <code>&lt;/div&gt;</code> respectively, using <strong>javascript</strong>. The output would (therefore) look like <code>hello &lt;div&gt;there&lt;/div&gt;</code>. The string might contain multiple pairs of underscores.</p>\n\n<p>What I am looking for is a way to <strong>either</strong> run a function on each match, the way ruby does it:</p>\n\n<pre><code>\"hello _there_\".gsub(/_.*?_/) { |m| \"&lt;div&gt;\" + m[1..-2] + \"&lt;/div&gt;\" }\n</code></pre>\n\n<p><strong>Or</strong> be able to reference a matched group, again the way it can be done in ruby:</p>\n\n<pre><code>\"hello _there_\".gsub(/_(.*?)_/, \"&lt;div&gt;\\\\1&lt;/div&gt;\")\n</code></pre>\n\n<p>Any ideas or suggestions?</p>\n    ","a":"\n<pre><code>\"hello _there_\".replace(/_(.*?)_/, function(a, b){\n    return '&lt;div&gt;' + b + '&lt;/div&gt;';\n})\n</code></pre>\n\n<p>Oh, or you could also:</p>\n\n<pre><code>\"hello _there_\".replace(/_(.*?)_/, \"&lt;div&gt;$1&lt;/div&gt;\")\n</code></pre>\n    "},{"t":"How can we match a^n b^n with Java regex?","l":"http://stackoverflow.com/questions/3644266/how-can-we-match-an-bn-with-java-regex","q":"\n\n<blockquote>\n  <p><sub><em>This is the second part of a series of educational regex articles. It shows how lookaheads and nested references can be used to match the non-regular languge a<sup>n</sup>b<sup>n</sup>. Nested references are first introduced in: <a href=\"http://stackoverflow.com/questions/3627681/how-does-this-regex-find-triangular-numbers/\">How does this regex find triangular numbers?</a></em></sub></p>\n</blockquote>\n\n<p>One of the archetypal non-<a href=\"http://en.wikipedia.org/wiki/Regular_language\">regular languages</a> is:</p>\n\n<blockquote>\n  <p><code>L = { a</code><sup>n</sup><code>b</code><sup>n</sup><code>: n &gt; 0 }</code>  </p>\n</blockquote>\n\n<p>This is the language of all non-empty strings consisting of some number of <code>a</code>'s followed by an equal number of <code>b</code>'s. Examples of strings in this language are <code>ab</code>, <code>aabb</code>, <code>aaabbb</code>.</p>\n\n<p>This language can be show to be non-regular by the <a href=\"http://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages\">pumping lemma</a>. It is in fact an archetypal <a href=\"http://en.wikipedia.org/wiki/Context-free_language\">context-free language</a>, which can be generated by the <a href=\"http://en.wikipedia.org/wiki/Context-free_language\">context-free grammar</a> <code>S → aSb | ab</code>.</p>\n\n<p>Nonetheless, modern day regex implementations clearly recognize more than just regular languages. That is, they are not \"regular\" by formal language theory definition. PCRE and Perl supports recursive regex, and .NET supports balancing groups definition. Even less \"fancy\" features, e.g. backreference matching, means that regex is not regular.</p>\n\n<p>But just how powerful is this \"basic\" features? Can we recognize <code>L</code> with Java regex, for example? Can we perhaps combine lookarounds and nested references and have a pattern that works with e.g. <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/String.html#matches%28java.lang.String%29\"><code>String.matches</code></a> to match strings like <code>ab</code>, <code>aabb</code>, <code>aaabbb</code>, etc?</p>\n\n<h3>References</h3>\n\n<ul>\n<li><a href=\"http://perldoc.perl.org/perlfaq6.html#Can-I-use-Perl-regular-expressions-to-match-balanced-text?\">perlfaq6: Can I use Perl regular expressions to match balanced text?</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/bs2twtah.aspx#balancing_group_definition\">MSDN - Regular Expression Language Elements - Balancing Group Definitions</a></li>\n<li><a href=\"http://www.pcre.org/pcre.txt\">pcre.org - PCRE man page</a></li>\n<li><a href=\"http://www.regular-expressions.info/\">regular-expressions.info</a> - <a href=\"http://www.regular-expressions.info/lookaround.html\">Lookarounds</a> and <a href=\"http://www.regular-expressions.info/brackets.html\">Grouping and Backreferences</a></li>\n<li><a href=\"http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html\"><code>java.util.regex.Pattern</code></a></li>\n</ul>\n\n<h3>Linked questions</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2974210/does-lookaround-affect-which-languages-can-be-matched-by-regular-expressions\">Does lookaround affect which languages can be matched by regular expressions?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3349999/net-regex-recursive-patterns\">.NET Regex Balancing Groups vs PCRE Recursive Patterns</a></li>\n</ul>\n    ","a":"\n<p>The answer is, needless to say, <em>YES!</em> You can most certainly write a Java regex pattern to match <em>a<sup>n</sup>b<sup>n</sup></em>. It uses a positive lookahead for assertion, and one nested reference for \"counting\".</p>\n\n<p>Rather than immediately giving out the pattern, this answer will guide readers through <em>the process</em> of deriving it. Various hints are given as the solution is slowly constructed. In this aspect, hopefully this answer will contain much more than just another neat regex pattern. Hopefully readers will also learn how to \"think in regex\", and how to put various constructs harmoniously together, so they can derive more patterns on their own in the future.</p>\n\n<p>The language used to develop the solution will be PHP for its conciseness. The final test once the pattern is finalized will be done in Java.</p>\n\n<hr>\n\n<h3>Step 1: Lookahead for assertion</h3>\n\n<p>Let's start with a simpler problem: we want to match <code>a+</code> at the beginning of a string, but only if it's followed immediately by <code>b+</code>. We can use <code>^</code> to <a href=\"http://www.regular-expressions.info/anchors.html\">anchor</a> our match, and since we only want to match the <code>a+</code> without the <code>b+</code>, we can use <a href=\"http://www.regular-expressions.info/lookaround.html\">lookahead</a> assertion <code>(?=…)</code>.</p>\n\n<p>Here is our pattern with a simple test harness:</p>\n\n<pre><code>function testAll($r, $tests) {\n   foreach ($tests as $test) {\n      $isMatch = preg_match($r, $test, $groups);\n      $groupsJoined = join('|', $groups);\n      print(\"$test $isMatch $groupsJoined\\n\");\n   }\n}\n\n$tests = array('aaa', 'aaab', 'aaaxb', 'xaaab', 'b', 'abbb');\n\n$r1 = '/^a+(?=b+)/';\n#          └────┘\n#         lookahead\n\ntestAll($r1, $tests);\n</code></pre>\n\n<p>The output is (<a href=\"http://ideone.com/wo233\">as seen on ideone.com</a>):</p>\n\n<pre><code>aaa 0\naaab 1 aaa\naaaxb 0\nxaaab 0\nb 0\nabbb 1 a\n</code></pre>\n\n<p>This is exactly the output we want: we match <code>a+</code>, only if it's at the beginning of the string, and only if it's immediately followed by <code>b+</code>.</p>\n\n<p><em><strong>Lesson</strong></em>: You can use patterns in lookarounds to make assertions.</p>\n\n<hr>\n\n<h3>Step 2: Capturing in a lookahead (and f r e e - s p a c i n g mode)</h3>\n\n<p>Now let's say that even though we don't want the <code>b+</code> to be part of the match, we do want to <a href=\"http://www.regular-expressions.info/brackets.html\">capture</a> it anyway into group 1. Also, as we anticipate having a more complicated pattern, let's use <code>x</code> modifier for <a href=\"http://www.regular-expressions.info/freespacing.html\">free-spacing</a> so we can make our regex more readable.</p>\n\n<p>Building on our previous PHP snippet, we now have the following pattern:</p>\n\n<pre><code>$r2 = '/ ^ a+ (?= (b+) ) /x';\n#             │   └──┘ │\n#             │     1  │\n#             └────────┘\n#              lookahead\n\ntestAll($r2, $tests);\n</code></pre>\n\n<p>The output is now (<a href=\"http://ideone.com/7GYCR\">as seen on ideone.com</a>):</p>\n\n<pre><code>aaa 0\naaab 1 aaa|b\naaaxb 0\nxaaab 0\nb 0\nabbb 1 a|bbb\n</code></pre>\n\n<p>Note that e.g. <code>aaa|b</code> is the result of <code>join</code>-ing what each group captured with <code>'|'</code>. In this case, group 0 (i.e. what the pattern matched) captured <code>aaa</code>, and group 1 captured <code>b</code>.</p>\n\n<p><em><strong>Lesson</strong></em>: You can capture inside a lookaround. You can use free-spacing to enhance readability.</p>\n\n<hr>\n\n<h3>Step 3: Refactoring the lookahead into the \"loop\"</h3>\n\n<p>Before we can introduce our counting mechanism, we need to do one modification to our pattern. Currently, the lookahead is outside of the <code>+</code> repetition \"loop\". This is fine so far because we just wanted to assert that there's a <code>b+</code> following our <code>a+</code>, but what we <em>really</em> want to do eventually is assert that for each <code>a</code> that we match inside the \"loop\", there's a corresponding <code>b</code> to go with it.</p>\n\n<p>Let's not worry about the counting mechanism for now and just do the refactoring as follows:</p>\n\n<ul>\n<li>First refactor <code>a+</code> to <code>(?: a )+</code> (note that <code>(?:…)</code> is a non-capturing group)</li>\n<li>Then move the lookahead inside this non-capturing group\n<ul>\n<li>Note that we must now \"skip\" <code>a*</code> before we can \"see\" the <code>b+</code>, so modify the pattern accordingly</li>\n</ul></li>\n</ul>\n\n<p>So we now have the following:</p>\n\n<pre><code>$r3 = '/ ^ (?: a (?= a* (b+) ) )+ /x';\n#          │     │      └──┘ │ │\n#          │     │        1  │ │\n#          │     └───────────┘ │\n#          │       lookahead   │\n#          └───────────────────┘\n#           non-capturing group\n</code></pre>\n\n<p>The output is the same as before (<a href=\"http://ideone.com/Aw431\">as seen on ideone.com</a>), so there's no change in that regard. The important thing is that now we are making the assertion at <em>every iteration</em> of the <code>+</code> \"loop\". With our current pattern, this is not necessary, but next we'll make group 1 \"count\" for us using self-reference.</p>\n\n<p><em><strong>Lesson</strong></em>: You can capture inside a non-capturing group. Lookarounds can be repeated.</p>\n\n<hr>\n\n<h3>Step 4: This is the step where we start counting</h3>\n\n<p>Here's what we're going to do: we'll rewrite group 1 such that:</p>\n\n<ul>\n<li>At the end of the first iteration of the <code>+</code>, when the first <code>a</code> is matched, it should capture <code>b</code></li>\n<li>At the end of the second iteration, when another <code>a</code> is matched, it should capture <code>bb</code></li>\n<li>At the end of the third iteration, it should capture <code>bbb</code></li>\n<li>...</li>\n<li>At the end of the <em>n</em>-th iteration, group 1 should capture <em>b<sup>n</sup></em></li>\n<li>If there aren't enough <code>b</code> to capture into group 1 then the assertion simply fails</li>\n</ul>\n\n<p>So group 1, which is now <code>(b+)</code>, will have to be rewritten to something like <code>(\\1 b)</code>. That is, we try to \"add\" a <code>b</code> to what group 1 captured in the previous iteration.</p>\n\n<p>There's a slight problem here in that this pattern is missing the \"base case\", i.e. the case where it can match without the self-reference. A base case is required because group 1 starts \"uninitialized\"; it hasn't captured anything yet (not even an empty string), so a self-reference attempt will always fail.</p>\n\n<p>There are many ways around this, but for now let's just make the self-reference matching <a href=\"http://www.regular-expressions.info/optional.html\">optional</a>, i.e. <code>\\1?</code>. This may or may not work perfectly, but let's just see what that does, and if there's any problem then we'll cross that bridge when we come to it. Also, we'll add some more test cases while we're at it.</p>\n\n<pre><code>$tests = array(\n  'aaa', 'aaab', 'aaaxb', 'xaaab', 'b', 'abbb', 'aabb', 'aaabbbbb', 'aaaaabbb'\n);\n\n$r4 = '/ ^ (?: a (?= a* (\\1? b) ) )+ /x';\n#          │     │      └─────┘ | │\n#          │     │         1    | │\n#          │     └──────────────┘ │\n#          │         lookahead    │\n#          └──────────────────────┘\n#             non-capturing group\n</code></pre>\n\n<p>The output is now (<a href=\"http://ideone.com/sQHcD\">as seen on ideone.com</a>):</p>\n\n<pre><code>aaa 0\naaab 1 aaa|b        # (*gasp!*)\naaaxb 0\nxaaab 0\nb 0\nabbb 1 a|b          # yes!\naabb 1 aa|bb        # YES!!\naaabbbbb 1 aaa|bbb  # YESS!!!\naaaaabbb 1 aaaaa|bb # NOOOOOoooooo....\n</code></pre>\n\n<p>A-ha! It looks like we're really close to the solution now! We managed to get group 1 to \"count\" using self-reference! But wait... something is wrong with the second and the last test cases!! There aren't enough <code>b</code>s, and somehow it counted wrong! We'll examine why this happened in the next step.</p>\n\n<p><em><strong>Lesson</strong></em>: One way to \"initialize\" a self-referencing group is to make the self-reference matching optional.</p>\n\n<hr>\n\n<h3>Step 4½: Understanding what went wrong</h3>\n\n<p>The problem is that since we made the self-reference matching optional, the \"counter\" can \"reset\" back to 0 when there aren't enough <code>b</code>'s. Let's closely examine what happens at every iteration of our pattern with <code>aaaaabbb</code> as input.</p>\n\n<pre><code> a a a a a b b b\n↑\n# Initial state: Group 1 is \"uninitialized\".\n           _\n a a a a a b b b\n  ↑\n  # 1st iteration: Group 1 couldn't match \\1 since it was \"uninitialized\",\n  #                  so it matched and captured just b\n           ___\n a a a a a b b b\n    ↑\n    # 2nd iteration: Group 1 matched \\1b and captured bb\n           _____\n a a a a a b b b\n      ↑\n      # 3rd iteration: Group 1 matched \\1b and captured bbb\n           _\n a a a a a b b b\n        ↑\n        # 4th iteration: Group 1 could still match \\1, but not \\1b,\n        #  (!!!)           so it matched and captured just b\n           ___\n a a a a a b b b\n          ↑\n          # 5th iteration: Group 1 matched \\1b and captured bb\n          #\n          # No more a, + \"loop\" terminates\n</code></pre>\n\n<p>A-ha! On our 4th iteration, we could still match <code>\\1</code>, but we couldn't match <code>\\1b</code>! Since we allow the self-reference matching to be optional with <code>\\1?</code>, the engine backtracks and took the \"no thanks\" option, which then allows us to match and capture just <code>b</code>!</p>\n\n<p>Do note, however, that except on the very first iteration, you could always match just the self-reference <code>\\1</code>. This is obvious, of course, since it's what we just captured on our previous iteration, and in our setup we can always match it again (e.g. if we captured <code>bbb</code> last time, we're guaranteed that there will still be <code>bbb</code>, but there may or may not be <code>bbbb</code> this time).</p>\n\n<p><em><strong>Lesson</strong></em>: Beware of backtracking. The regex engine will do as much backtracking as you allow until the given pattern matches. This may impact performance (i.e. <a href=\"http://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>) and/or correctness.</p>\n\n<hr>\n\n<h3>Step 5: Self-possession to the rescue!</h3>\n\n<p>The \"fix\" should now be obvious: combine optional repetition with <a href=\"http://www.regular-expressions.info/possessive.html\">possessive</a> quantifier. That is, instead of simply <code>?</code>, use <code>?+</code> instead (remember that a repetition that is quantified as possessive does not backtrack, even if such \"cooperation\" may result in a match of the overall pattern).</p>\n\n<p>In very informal terms, this is what <code>?+</code>, <code>?</code> and <code>??</code> says:</p>\n\n<blockquote>\n  <h2><code>?+</code></h2>\n  \n  <ul>\n  <li>(optional) \"It doesn't have to be there,\"\n  <ul>\n  <li>(possessive) \"but if it is there, you must take it and not let go!\"</li>\n  </ul></li>\n  </ul>\n  \n  <h2><code>?</code></h2>\n  \n  <ul>\n  <li>(optional) \"It doesn't have to be there,\"\n  <ul>\n  <li>(greedy) \"but if it is you can take it for now,\"\n  <ul>\n  <li>(backtracking) \"but you may be asked to let it go later!\"</li>\n  </ul></li>\n  </ul></li>\n  </ul>\n  \n  <h2><code>??</code></h2>\n  \n  <ul>\n  <li>(optional) \"It doesn't have to be there,\"\n  <ul>\n  <li>(reluctant) \"and even if it is you don't have to take it just yet,\"\n  <ul>\n  <li>(backtracking) \"but you may be asked to take it later!\"</li>\n  </ul></li>\n  </ul></li>\n  </ul>\n</blockquote>\n\n<p>In our setup, <code>\\1</code> will not be there the very first time, but it will <em>always</em> be there any time after that, and we <em>always</em> want to match it then. Thus, <code>\\1?+</code> would accomplish exactly what we want.</p>\n\n<pre><code>$r5 = '/ ^ (?: a (?= a* (\\1?+ b) ) )+ /x';\n#          │     │      └──────┘ │ │\n#          │     │          1    │ │\n#          │     └───────────────┘ │\n#          │         lookahead     │\n#          └───────────────────────┘\n#             non-capturing group\n</code></pre>\n\n<p>Now the output is (<a href=\"http://ideone.com/v2MbA\">as seen on ideone.com</a>):</p>\n\n<pre><code>aaa 0\naaab 1 a|b          # Yay! Fixed!\naaaxb 0\nxaaab 0\nb 0\nabbb 1 a|b\naabb 1 aa|bb\naaabbbbb 1 aaa|bbb\naaaaabbb 1 aaa|bbb  # Hurrahh!!!\n</code></pre>\n\n<p>Voilà!!! Problem solved!!! We are now counting properly, exactly the way we want it to!</p>\n\n<p><em><strong>Lesson</strong></em>: Learn the difference between greedy, reluctant, and possessive repetition. Optional-possessive can be a powerful combination.</p>\n\n<hr>\n\n<h3>Step 6: Finishing touches</h3>\n\n<p>So what we have right now is a pattern that matches <code>a</code> repeatedly, and for every <code>a</code> that was matched, there is a corresponding <code>b</code> captured in group 1. The <code>+</code> terminates when there are no more <code>a</code>, or if the assertion failed because there isn't a corresponding <code>b</code> for an <code>a</code>.</p>\n\n<p>To finish the job, we simply need to append to our pattern <code>\\1 $</code>. This is now a back reference to what group 1 matched, followed by the end of the line anchor. The anchor ensures that there aren't any extra <code>b</code>'s in the string; in other words, that in fact we have <em>a<sup>n</sup>b<sup>n</sup></em>.</p>\n\n<p>Here's the finalized pattern, with additional test cases, including one that's 10,000 characters long:</p>\n\n<pre><code>$tests = array(\n  'aaa', 'aaab', 'aaaxb', 'xaaab', 'b', 'abbb', 'aabb', 'aaabbbbb', 'aaaaabbb',\n  '', 'ab', 'abb', 'aab', 'aaaabb', 'aaabbb', 'bbbaaa', 'ababab', 'abc',\n  str_repeat('a', 5000).str_repeat('b', 5000)\n);\n\n$r6 = '/ ^ (?: a (?= a* (\\1?+ b) ) )+ \\1 $ /x';\n#          │     │      └──────┘ │ │\n#          │     │          1    │ │\n#          │     └───────────────┘ │\n#          │         lookahead     │\n#          └───────────────────────┘\n#             non-capturing group\n</code></pre>\n\n<p>It finds 4 matches: <code>ab</code>, <code>aabb</code>, <code>aaabbb</code>, and the <em>a<sup>5000</sup>b<sup>5000</sup></em>. It takes <a href=\"http://ideone.com/Sr8Jd\">only 0.06s to run on ideone.com</a>.</p>\n\n<hr>\n\n<h3>Step 7: The Java test</h3>\n\n<p>So the pattern works in PHP, but the ultimate goal is to write a pattern that works in Java.</p>\n\n<pre><code>public static void main(String[] args) {\n\n        String aNbN = \"(?x) (?:  a  (?= a* (\\\\1?+ b))  )+ \\\\1\";\n        String[] tests = {\n                \"\",      // false\n                \"ab\",    // true\n                \"abb\",   // false\n                \"aab\",   // false\n                \"aabb\",  // true\n                \"abab\",  // false\n                \"abc\",   // false\n                repeat('a', 5000) + repeat('b', 4999), // false\n                repeat('a', 5000) + repeat('b', 5000), // true\n                repeat('a', 5000) + repeat('b', 5001), // false\n        };\n        for (String test : tests) {\n                System.out.printf(\"[%s]%n  %s%n%n\", test, test.matches(aNbN));\n        }\n\n}\n\nstatic String repeat(char ch, int n) {\n        return new String(new char[n]).replace('\\0', ch);\n}\n</code></pre>\n\n<p>The pattern works as expected (<a href=\"http://ideone.com/ga6fn\">as seen on ideone.com</a>).</p>\n\n<hr>\n\n<h3>And now we come to the conclusion...</h3>\n\n<p>It needs to be said that the <code>a*</code> in the lookahead, and indeed the \"main <code>+</code> loop\", both permit backtracking. Readers are encouraged to confirm why this is not a problem in terms of correctness, and why at the same time making both possessive would also work (though perhaps mixing mandatory and non-mandatory possessive quantifier in the same pattern may lead to misperceptions).</p>\n\n<p>It should also be said that while it's neat that there's a regex pattern that will match <em>a<sup>n</sup>b<sup>n</sup></em>, this is in not always the \"best\" solution in practice. A much better solution is to simply match <code>^(a+)(b+)$</code>, and then compare the length of the strings captured by groups 1 and 2 in the hosting programming language.</p>\n\n<p>In PHP, it may look something like this (<a href=\"http://ideone.com/Weiz3\">as seen in ideone.com</a>):</p>\n\n<pre><code>function is_anbn($s) {\n   return (preg_match('/^(a+)(b+)$/', $s, $groups)) &amp;&amp;\n      (strlen($groups[1]) == strlen($groups[2]));\n}\n</code></pre>\n\n<p>The purpose of this article is <em>NOT</em> to convince readers that regex can do almost anything; it clearly can't, and even for the things it can do, at least partial delegation to the hosting language should be considered if it leads to a simpler solution.</p>\n\n<p>As mentioned at the top, while this article is necessarily tagged <code>[regex]</code> for stackoverflow, it is perhaps about more than that. While certainly there's value in learning about assertions, nested references, possessive quantifier, etc, perhaps the bigger lesson here is the creative process by which one can try to solve problems, the determination and hard work that it often requires when you're subjected to various constraints, the systematic composition from various parts to build a working solution, etc.</p>\n\n<hr>\n\n<h3>Bonus material! PCRE recursive pattern!</h3>\n\n<p>Since we did bring up PHP, it needs to be said that PCRE supports recursive pattern and subroutines. Thus, following pattern works for <code>preg_match</code> (<a href=\"http://ideone.com/xZpsJ\">as seen on ideone.com</a>):</p>\n\n<pre><code>$rRecursive = '/ ^ (a (?1)? b) $ /x';\n</code></pre>\n\n<p>Currently Java's regex does not support recursive pattern.</p>\n\n<hr>\n\n<h3>Even more bonus material! Matching <em>a<sup>n</sup>b<sup>n</sup>c<sup>n</sup></em> !!</h3>\n\n<p>So we've seen how to match <em>a<sup>n</sup>b<sup>n</sup></em> which is non-regular, but still context-free, but can we also match <em>a<sup>n</sup>b<sup>n</sup>c<sup>n</sup></em>, which isn't even context-free?</p>\n\n<p>The answer is, of course, <em>YES!</em> Readers are encouraged to try to solve this on their own, but the solution is provided below (with <a href=\"http://ideone.com/5i0ww\">implementation in Java on ideone.com</a>).</p>\n\n<blockquote class=\"spoiler\">\n  <p> <code>^ (?: a (?= a* (\\1?+ b) b* (\\2?+ c) ) )+ \\1 \\2 $</code></p>\n</blockquote>\n    "},{"t":"Regular expressions in C: examples?","l":"http://stackoverflow.com/questions/1085083/regular-expressions-in-c-examples","q":"\n\n<p>I'm after some simple examples and best practices of how to use regular expressions in ANSI C. <code>man regex.h</code> does not provide that much help.</p>\n    ","a":"\n<p>Regular expressions actually aren't part of ANSI C. It sounds like you might be talking about the POSIX regular expression library, which comes with most (all?) *nixes. Here's <a href=\"http://www.peope.net/old/regex.html\">an example of using POSIX regexes in C</a>:</p>\n\n<pre><code>#include &lt;regex.h&gt;        \nregex_t regex;\nint reti;\nchar msgbuf[100];\n\n/* Compile regular expression */\nreti = regcomp(&amp;regex, \"^a[[:alnum:]]\", 0);\nif (reti) {\n    fprintf(stderr, \"Could not compile regex\\n\");\n    exit(1);\n}\n\n/* Execute regular expression */\nreti = regexec(&amp;regex, \"abc\", 0, NULL, 0);\nif (!reti) {\n    puts(\"Match\");\n}\nelse if (reti == REG_NOMATCH) {\n    puts(\"No match\");\n}\nelse {\n    regerror(reti, &amp;regex, msgbuf, sizeof(msgbuf));\n    fprintf(stderr, \"Regex match failed: %s\\n\", msgbuf);\n    exit(1);\n}\n\n/* Free compiled regular expression if you want to use the regex_t again */\nregfree(&amp;regex);\n</code></pre>\n\n<p>Alternatively, you may want to check out <a href=\"http://www.pcre.org/\">PCRE</a>, a library for Perl-compatible regular expressions in C. The Perl syntax is pretty much that same syntax used in Java, Python, and a number of other languages. The POSIX syntax is the syntax used by grep, sed, vi, etc.</p>\n    "},{"t":"How to find all Youtube video ids in a string using a regex?","l":"http://stackoverflow.com/questions/5830387/how-to-find-all-youtube-video-ids-in-a-string-using-a-regex","q":"\n\n<p>I have a textfield where users can write anything.</p>\n\n<p>For example:</p>\n\n<blockquote>\n  <p>Lorem Ipsum is simply dummy text.\n  <a href=\"http://www.youtube.com/watch?v=DUQi_R4SgWo\">http://www.youtube.com/watch?v=DUQi_R4SgWo</a>\n  of the printing and typesetting\n  industry. Lorem Ipsum has been the\n  industry's standard dummy text ever\n  since the 1500s, when an unknown\n  printer took a galley of type and\n  scrambled it to make a type specimen\n  book. It has survived not only five\n  centuries, but also the leap into\n  electronic typesetting, remaining\n  essentially unchanged.\n  <a href=\"http://www.youtube.com/watch?v=A_6gNZCkajU&amp;feature=relmfu\">http://www.youtube.com/watch?v=A_6gNZCkajU&amp;feature=relmfu</a>\n  It was popularised in the 1960s with\n  the release of Letraset sheets\n  containing Lorem Ipsum passages, and\n  more recently with desktop publishing\n  software like Aldus PageMaker\n  including versions of Lorem Ipsum.</p>\n</blockquote>\n\n<p>Now I would like to parse it and find all Youtube video urls and their ids.</p>\n\n<p>Any idea how that works?</p>\n    ","a":"\n<p>A YouTube video URL may be encountered in a variety of formats:</p>\n\n<ul>\n<li>latest short format: <code>http://youtu.be/NLqAF9hrVbY</code></li>\n<li>iframe: <code>http://www.youtube.com/embed/NLqAF9hrVbY</code></li>\n<li>iframe (secure): <code>https://www.youtube.com/embed/NLqAF9hrVbY</code></li>\n<li>object param: <code>http://www.youtube.com/v/NLqAF9hrVbY?fs=1&amp;hl=en_US</code></li>\n<li>object embed: <code>http://www.youtube.com/v/NLqAF9hrVbY?fs=1&amp;hl=en_US</code></li>\n<li>watch: <code>http://www.youtube.com/watch?v=NLqAF9hrVbY</code></li>\n<li>users: <code>http://www.youtube.com/user/Scobleizer#p/u/1/1p3vcRhsYGo</code></li>\n<li>ytscreeningroom: <code>http://www.youtube.com/ytscreeningroom?v=NRHVzbJVx8I</code></li>\n<li>any/thing/goes!: <code>http://www.youtube.com/sandalsResorts#p/c/54B8C800269D7C1B/2/PPS-8DMrAn4</code></li>\n<li>any/subdomain/too: <code>http://gdata.youtube.com/feeds/api/videos/NLqAF9hrVbY</code></li>\n<li>more params: <code>http://www.youtube.com/watch?v=spDj54kf-vY&amp;feature=g-vrec</code></li>\n<li>query may have dot: <code>http://www.youtube.com/watch?v=spDj54kf-vY&amp;feature=youtu.be</code></li>\n<li>nocookie domain: <code>http://www.youtube-nocookie.com</code></li>\n</ul>\n\n<p>Here is a PHP function with a commented regex that matches each of these URL forms and converts them to links (if they are not links already):</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>// Linkify youtube URLs which are not already links.\nfunction linkifyYouTubeURLs($text) {\n    $text = preg_replace('~\n        # Match non-linked youtube URL in the wild. (Rev:20130823)\n        https?://         # Required scheme. Either http or https.\n        (?:[0-9A-Z-]+\\.)? # Optional subdomain.\n        (?:               # Group host alternatives.\n          youtu\\.be/      # Either youtu.be,\n        | youtube         # or youtube.com or\n          (?:-nocookie)?  # youtube-nocookie.com\n          \\.com           # followed by\n          \\S*             # Allow anything up to VIDEO_ID,\n          [^\\w\\s-]       # but char before ID is non-ID char.\n        )                 # End host alternatives.\n        ([\\w-]{11})      # $1: VIDEO_ID is exactly 11 chars.\n        (?=[^\\w-]|$)     # Assert next char is non-ID or EOS.\n        (?!               # Assert URL is not pre-linked.\n          [?=&amp;+%\\w.-]*    # Allow URL (query) remainder.\n          (?:             # Group pre-linked alternatives.\n            [\\'\"][^&lt;&gt;]*&gt;  # Either inside a start tag,\n          | &lt;/a&gt;          # or inside &lt;a&gt; element text contents.\n          )               # End recognized pre-linked alts.\n        )                 # End negative lookahead assertion.\n        [?=&amp;+%\\w.-]*        # Consume any URL (query) remainder.\n        ~ix', \n        '&lt;a href=\"http://www.youtube.com/watch?v=$1\"&gt;YouTube link: $1&lt;/a&gt;',\n        $text);\n    return $text;\n}\n</code></pre>\n\n<p>And Here is a JavaScript version with the exact same regex (with comments removed):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// Linkify youtube URLs which are not already links.\nfunction linkifyYouTubeURLs(text) {\n    var re = /https?:\\/\\/(?:[0-9A-Z-]+\\.)?(?:youtu\\.be\\/|youtube(?:-nocookie)?\\.com\\S*[^\\w\\s-])([\\w-]{11})(?=[^\\w-]|$)(?![?=&amp;+%\\w.-]*(?:['\"][^&lt;&gt;]*&gt;|&lt;\\/a&gt;))[?=&amp;+%\\w.-]*/ig;\n    return text.replace(re,\n        '&lt;a href=\"http://www.youtube.com/watch?v=$1\"&gt;YouTube link: $1&lt;/a&gt;');\n}\n</code></pre>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n<li>The VIDEO_ID portion of the URL is captured in the one and only capture group: <code>$1</code>.</li>\n<li>If you know that your text does not contain any pre-linked URLs, you can safely remove the negative lookahead assertion which tests for this condition (The assertion beginning with the comment: <em>\"Assert URL is not pre-linked.\"</em>) This will speed up the regex somewhat.</li>\n<li>The replace string can be modified to suit. The one provided above simply creates a link to the generic <code>\"http://www.youtube.com/watch?v=VIDEO_ID\"</code> style URL and sets the link text to: <code>\"YouTube link: VIDEO_ID\"</code>.</li>\n</ul>\n\n<hr>\n\n<p><strong>Edit 2011-07-05:</strong> Added <code>-</code> hyphen to ID char class</p>\n\n<p><strong>Edit 2011-07-17:</strong> Fixed regex to consume any remaining part (e.g. <em>query</em>) of URL following YouTube ID. Added <code>'i'</code> <em>ignore-case</em> modifier. Renamed function to camelCase. Improved pre-linked lookahead test.</p>\n\n<p><strong>Edit 2011-07-27:</strong> Added new \"user\" and \"ytscreeningroom\" formats of YouTube URLs.</p>\n\n<p><strong>Edit 2011-08-02:</strong> Simplified/generalized to handle new \"any/thing/goes\" YouTube URLs.</p>\n\n<p><strong>Edit 2011-08-25:</strong> Several modifications:</p>\n\n<ul>\n<li>Added a Javascript version of: <code>linkifyYouTubeURLs()</code> function.</li>\n<li>Previous version had the scheme (HTTP protocol) part optional and thus would match invalid URLs. Made the scheme part required.</li>\n<li>Previous version used the <code>\\b</code> word boundary anchor around the VIDEO_ID. However, this will not work if the VIDEO_ID begins or ends with a <code>-</code> dash. Fixed so that it handles this condition.</li>\n<li>Changed the VIDEO_ID expression so that it must be exactly 11 characters long.</li>\n<li>The previous version failed to exclude pre-linked URLs if they had a query string following the VIDEO_ID. Improved the negative lookahead assertion to fix this.</li>\n<li>Added <code>+</code> and <code>%</code> to character class matching query string.</li>\n<li>Changed PHP version regex delimiter from: <code>%</code> to a: <code>~</code>.</li>\n<li>Added a \"Notes\" section with some handy notes.</li>\n</ul>\n\n<p><strong>Edit 2011-10-12:</strong> Youtube URL host part may now have any subdomain (not just <code>www.</code>).</p>\n\n<p><strong>Edit 2012-05-01:</strong> The consume URL section may now allow for '-'.</p>\n\n<p><strong>Edit 2013-08-23:</strong> Added additional format provided by @Mei. (The query part may have a <code>.</code> dot.</p>\n\n<p><strong>Edit 2013-11-30:</strong> Added additional format provided by @CRONUS: <code>youtube-nocookie.com</code>.</p>\n    "},{"t":"Regular expression for a string that does not start with a sequence","l":"http://stackoverflow.com/questions/899422/regular-expression-for-a-string-that-does-not-start-with-a-sequence","q":"\n\n<p>I'm processing a bunch of tables using <a href=\"http://schemaspy.sourceforge.net/\">this program</a>, but I need to ignore ones that start with the label \"tbd_\". So far I have something like [^tbd_] but that simply not match those characters. </p>\n    ","a":"\n<p>You could use a negative look-ahead assertion:</p>\n\n<pre><code>^(?!tbd_).+\n</code></pre>\n\n<p>Or a negative look-behind assertion:</p>\n\n<pre><code>(^.{1,3}$|^.{4}(?&lt;!tbd_).*)\n</code></pre>\n\n<p>Or just plain old character sets and alternations:</p>\n\n<pre><code>^([^t]|t($|[^b]|b($|[^d]|d($|[^_])))).*\n</code></pre>\n    "},{"t":"php Replacing multiple spaces with a single space","l":"http://stackoverflow.com/questions/2368539/php-replacing-multiple-spaces-with-a-single-space","q":"\n\n<p>I'm trying to replace multiple spaces with a single space. When I use <code>ereg_replace</code>, I get an error about it being deprecated.</p>\n\n<pre><code>ereg_replace(\"[ \\t\\n\\r]+\", \" \", $string);\n</code></pre>\n\n<p>Is there an identical replacement for it. I need to replace multiple <code>\" \"</code> white spaces and multiple <code>nbsp</code> white spaces with a single white space.</p>\n    ","a":"\n<p>Use <a href=\"http://php.net/manual/en/function.preg-replace.php\"><code>preg_replace()</code></a> and instead of <code>[ \\t\\n\\r]</code> use <code>\\s</code>:</p>\n\n<pre><code>$output = preg_replace('!\\s+!', ' ', $input);\n</code></pre>\n\n<p>From <a href=\"http://www.regular-expressions.info/reference.html\">Regular Expression Basic Syntax Reference</a>:</p>\n\n<blockquote>\n  <p>\\d, \\w and \\s</p>\n  \n  <p>Shorthand character classes matching\n  digits, word characters (letters,\n  digits, and underscores), and\n  whitespace (spaces, tabs, and line\n  breaks). Can be used inside and\n  outside character classes.</p>\n</blockquote>\n    "},{"t":"How to validate an Email in PHP?","l":"http://stackoverflow.com/questions/5855811/how-to-validate-an-email-in-php","q":"\n\n<p>How can I validate the input value is a valid email address using php5. Now I am using this code </p>\n\n<pre><code>function isValidEmail($email){ \n     $pattern = \"^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,3})$\"; \n\n     if (eregi($pattern, $email)){ \n        return true; \n     } \n     else { \n        return false; \n     }    \n} \n</code></pre>\n\n<p>but it shows deprecated error. How can I fix this issue. Please help me.</p>\n    ","a":"\n<p>You can use the <code>filter_var()</code> function, which gives you a lot of handy validation and sanitization options.</p>\n\n<pre><code>filter_var($email, FILTER_VALIDATE_EMAIL)\n</code></pre>\n\n<ul>\n<li><p><a href=\"http://php.net/manual/en/function.filter-var.php\">PHP Manual filter_var()</a></p></li>\n<li><p>Available in <strong>PHP &gt;= 5.2.0</strong></p></li>\n</ul>\n\n<p>If you don't want to change your code that relied on your function, just do:</p>\n\n<pre><code>function isValidEmail($email){ \n    return filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n</code></pre>\n\n<p><strong>Note</strong>: For other uses (where you need Regex), the deprecated <code>ereg</code> function family (POSIX Regex Functions) should be replaced by the <code>preg</code> family (<a href=\"http://www.php.net/manual/en/ref.pcre.php\">PCRE Regex Functions</a>). There are a small amount of differences, reading the Manual should suffice.</p>\n\n<p><strong>Update 1</strong>: As pointed out by <a href=\"http://stackoverflow.com/questions/5855811/how-to-validate-an-email-in-php/5855853#comment6729146_5855853\">@binaryLV</a>: </p>\n\n<blockquote>\n  <p>PHP 5.3.3 and 5.2.14 had a <a href=\"http://bugs.php.net/52929\">bug</a> related to\n  FILTER_VALIDATE_EMAIL, which resulted in segfault when validating\n  large values. Simple and safe workaround for this is using <code>strlen()</code>\n  before <code>filter_var()</code>. I'm not sure about 5.3.4 final, but it is\n  written that some 5.3.4-snapshot versions also were affected.</p>\n</blockquote>\n\n<p>This bug has already been fixed.</p>\n\n<p><strong>Update 2</strong>: This method will of course validate <code>bazmega@kapa</code> as a valid email address, because in fact it is a valid email address. But most of the time on the Internet, you also want the email address to have a TLD: <code>bazmega@kapa.com</code>. As suggested in this <a href=\"http://www.electrictoolbox.com/php-email-validation-filter-var-updated/\">blog post</a> (link posted by <a href=\"http://stackoverflow.com/questions/5855811/how-to-validate-an-email-in-php/5855853#comment18460128_5855853\">@Istiaque Ahmed</a>), you can augment <code>filter_var()</code> with a regex that will check for the existence of a dot in the domain part (will not check for a <em>valid</em> TLD though):</p>\n\n<pre><code>function isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) \n        &amp;&amp; preg_match('/@.+\\./', $email);\n}\n</code></pre>\n\n<p>As <a href=\"http://stackoverflow.com/questions/5855811/how-to-validate-an-email-in-php/5855853#comment30608940_5855853\">@Eliseo Ocampos</a> pointed out, this problem only exists before PHP 5.3, <a href=\"http://svn.php.net/viewvc/php/php-src/branches/PHP_5_3/ext/filter/logical_filters.c?r1=297250&amp;r2=297350&amp;pathrev=303779\">in that version they changed the regex</a> and now it does this check, so you do not have to.</p>\n    "},{"t":"Replacing all non-alphanumeric characters with empty strings","l":"http://stackoverflow.com/questions/1805518/replacing-all-non-alphanumeric-characters-with-empty-strings","q":"\n\n<p>I tried using this but didn't work-</p>\n\n<pre><code>return value.replaceAll(\"/[^A-Za-z0-9 ]/\", \"\");\n</code></pre>\n    ","a":"\n<p>Why did you put those <code>/</code>? Just use <code>[^A-Za-z0-9 ]</code>.</p>\n    "},{"t":"Splitting a Java String by the pipe symbol using split(“|”)","l":"http://stackoverflow.com/questions/10796160/splitting-a-java-string-by-the-pipe-symbol-using-split","q":"\n\n<p>The Java official documentation states:</p>\n\n<p>The string <code>\"boo:and:foo\"</code>, for example, yields the following results with these expressions \nRegex   Result\n:   </p>\n\n<pre><code>{ \"boo\", \"and\", \"foo\" }\"\n</code></pre>\n\n<p>And that's the way I need it to work. However, if I run this:</p>\n\n<pre><code>public static void main(String[] args){\n        String test = \"A|B|C||D\";\n\n        String[] result = test.split(\"|\");\n\n        for(String s : result){\n            System.out.println(\"&gt;\"+s+\"&lt;\");\n        }\n    }\n</code></pre>\n\n<p>it prints:</p>\n\n<pre><code>&gt;&lt;\n&gt;A&lt;\n&gt;|&lt;\n&gt;B&lt;\n&gt;|&lt;\n&gt;C&lt;\n&gt;|&lt;\n&gt;|&lt;\n&gt;D&lt;\n</code></pre>\n\n<p>Which is far from what I would expect:</p>\n\n<pre><code>&gt;A&lt;\n&gt;B&lt;\n&gt;C&lt;\n&gt;&lt;\n&gt;D&lt;\n</code></pre>\n\n<p>Why is this happening?</p>\n\n<p>Thanks in advance</p>\n    ","a":"\n<p>You need to escape that special character using <code>\\\\</code></p>\n\n<pre><code>test.split(\"\\\\|\");\n</code></pre>\n    "},{"t":"Regex (grep) for multi-line search needed [duplicate]","l":"http://stackoverflow.com/questions/3717772/regex-grep-for-multi-line-search-needed","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/152708/how-can-i-search-for-a-multiline-pattern-in-a-file-use-pcregrep\">How can I search for a multiline pattern in a file ? Use pcregrep</a>  </p>\n</blockquote>\n\n\n\n<p>I'm running a <code>grep</code> to find any *.sql file that has the word <code>select</code> followed by the word <code>customerName</code> followed by the word <code>from</code>. This select statement can span many lines and can contain tabs and newlines. </p>\n\n<p>I've tried a few variations on the following: </p>\n\n<pre><code>$ grep -liIr --include=\"*.sql\" --exclude-dir=\"\\.svn*\" --regexp=\"select[a-zA-Z0-\n9+\\n\\r]*customerName[a-zA-Z0-9+\\n\\r]*from\"\n</code></pre>\n\n<p>This, however, just runs forever. Can anyone help me with the correct syntax please? </p>\n    ","a":"\n<p>Without the need to install the grep variant pcregrep, you can do multiline search with grep.</p>\n\n<pre><code>$ grep -Pzo \"(?s)^(\\s*)\\N*main.*?{.*?^\\1}\" *.c\n</code></pre>\n\n<p>Explanation:</p>\n\n<p><code>-P</code> activate perl-regexp for grep (a powerful extension of regular extensions)</p>\n\n<p><code>-z</code> suppress newline at the end of line, subtituting it for null character. That is, grep knows where end of line is, but sees the input as one big line.</p>\n\n<p><code>-o</code> print only matching. Because we're using <code>-z</code>, the whole file is like a single big line, so if there is a match, the entire file would be printed; this way it won't do that.</p>\n\n<p>In regexp:</p>\n\n<p><code>(?s)</code> activate <code>PCRE_DOTALL</code>, which means that <code>.</code> finds any character or newline</p>\n\n<p><code>\\N</code> find anything except newline, even with <code>PCRE_DOTALL</code> activated</p>\n\n<p><code>.*?</code> find <code>.</code> in nongreedy mode, that is, stops as soon as possible.</p>\n\n<p><code>^</code> find start of line</p>\n\n<p><code>\\1</code> backreference to first group (<code>\\s*</code>) This is a try to find same indentation of method</p>\n\n<p>As you can imagine, this search prints the main method in a C (<code>*.c</code>) source file.</p>\n    "},{"t":"Regular expression that matches valid IPv6 addresses","l":"http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses","q":"\n\n<p>I'm having trouble writing a regular expression that matches valid IPv6 addresses, including those in their compressed form (with <code>::</code> or leading zeros omitted from each byte pair).  </p>\n\n<p>Can someone suggest a regular expression that would fulfill the requirement?</p>\n\n<p>I'm considering expanding each byte pair and matching the result with a simpler regex.</p>\n    ","a":"\n<p>If I may skirt your question, do consider using your networking library's notion of Address to parse and check for errors.</p>\n\n<p>I imagine that at some point you'll want to do something with these addresses, so why not just go straight to the source and make sure that your networking library will understand the address? This is better than just hoping whatever regex is about to be posted here will match your implementation's concept of the address.</p>\n\n<p>In Java we have <code>InetAddress</code>. In .NET we have <code>IPAddress</code>. In .NET, you even have <a href=\"http://msdn.microsoft.com/en-us/library/system.net.ipaddress.tryparse.aspx\"><code>TryParse</code> on the <code>IPAddress</code> class</a> to do this test for you!</p>\n\n<pre><code>bool IsIP6(string addr) {\n    IPAddress ip;\n    if (IPAddress.TryParse(addr, out ip)) {\n        return ip.AddressFamily == AddressFamily.InterNetworkV6;\n    }\n    else {\n        return false;\n    }\n}\n</code></pre>\n    "},{"t":"difference between \\w and \\b regular expression meta characters","l":"http://stackoverflow.com/questions/11874234/difference-between-w-and-b-regular-expression-meta-characters","q":"\n\n<p>Can anyone explain the difference between \\w and \\b regular expression meta characters?\nBoth these metacharacters are used for word boundaries. Apart from this, which meta character is efficient for multi lingual content?</p>\n    ","a":"\n<p>The metacharacter <code>\\b</code> is an anchor like the caret and the dollar sign. It matches at a position that is called a <strong>\"word boundary\"</strong>. This match is zero-length.</p>\n\n<p>There are three different positions that qualify as word boundaries:</p>\n\n<ul>\n<li>Before the first character in the string, if the first character is\na word character.</li>\n<li>After the last character in the string, if the\nlast character is a word character.</li>\n<li>Between two characters in the\nstring, where one is a word character and the other is not a word character. </li>\n</ul>\n\n<p>Simply put: <code>\\b</code> allows you to perform a <strong>\"whole words only\"</strong> search using a regular expression in the form of <code>\\bword\\b</code>. A <strong>\"word character\"</strong> is a character that can be used to form words. All characters that are not <strong>\"word characters\"</strong> are <strong>\"non-word characters\"</strong>.</p>\n\n<p>In all flavors, the characters <code>[a-zA-Z0-9_]</code> are word characters. These are also matched by the short-hand character class <code>\\w</code>. Flavors showing <strong>\"ascii\"</strong> for word boundaries in the flavor comparison recognize only these as word characters.</p>\n\n<p><code>\\w</code> stands for <strong>\"word character\"</strong>, usually <code>[A-Za-z0-9_]</code>. Notice the inclusion of the underscore and digits.</p>\n\n<p><code>\\B</code> is the negated version of <code>\\b</code>. <code>\\B</code> matches at every position where <code>\\b</code> does not. Effectively, <code>\\B</code> matches at any position between two word characters as well as at any position between two non-word characters.</p>\n\n<p><code>\\W</code> is short for <code>[^\\w]</code>, the negated version of <code>\\w</code>.</p>\n    "},{"t":"Replace only some groups with Regex","l":"http://stackoverflow.com/questions/6005609/replace-only-some-groups-with-regex","q":"\n\n<p>Let's suppose I have the following regex:</p>\n\n<pre><code>-(\\d+)-\n</code></pre>\n\n<p>and I want to replace, using C#, the Group 1 <code>(\\d+)</code> with <code>AA</code>, to obtain:</p>\n\n<pre><code>-AA-\n</code></pre>\n\n<p>Now I'm replacing it using:</p>\n\n<pre><code>var text = \"example-123-example\";\nvar pattern = @\"-(\\d+)-\";\nvar replaced = Regex.Replace(text, pattern, \"-AA-\"); \n</code></pre>\n\n<p>But I don't really like this, because if I change the pattern to match <code>_(\\d+)_</code> instead, I will have to change the replacement string by <code>_AA_</code> too, and this is against the DRY principle.</p>\n\n<p><strong>I'm looking for something like:</strong></p>\n\n<p>Keep the matched text exactly how it is, but change Group 1 by <code>this text</code> and Group 2 by <code>another text</code>...</p>\n\n<p><strong>Edit:</strong><br>\nThat was just an example. I'm just looking for a generic way of doing what I said above.</p>\n\n<p>It should work for:</p>\n\n<p><code>anything(\\d+)more_text</code> and any pattern you can imagine.</p>\n\n<p>All I want to do is replace only groups, and keep the rest of the match.</p>\n    ","a":"\n<p>A good idea could be to encapsulate everything inside groups, no matter if need to identify them or not. That way you can use them in your replacement string. For example:</p>\n\n<pre><code>var pattern = @\"(-)(\\d+)(-)\";\nvar replaced = Regex.Replace(text, pattern, \"$1AA$3\"); \n</code></pre>\n\n<p>or using a MatchEvaluator:</p>\n\n<pre><code>var replaced = Regex.Replace(text, pattern, m =&gt; m.Groups[1].Value + \"AA\" + m.Groups[3].Value);\n</code></pre>\n\n<hr>\n\n<p>Another way, slightly messy, could be using a lookbehind/lookahead:</p>\n\n<p><code>(?&lt;=-)(\\d+)(?=-)</code></p>\n    "},{"t":"Remove all special characters from a string [duplicate]","l":"http://stackoverflow.com/questions/14114411/remove-all-special-characters-from-a-string","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3022185/regular-expression-sanitize-php\">Regular Expression Sanitize (PHP)</a>  </p>\n</blockquote>\n\n\n\n<p>I am facing an issue with URLs, I want to be able to convert titles that could contain anything and have them stripped of all special characters so they only have letters and numbers and of course I would like to replace spaces with hyphens.</p>\n\n<p>How would this be done? I've heard a lot about regular expressions (regex) being used...</p>\n    ","a":"\n<p>Easy peasy:</p>\n\n<pre><code>function clean($string) {\n   $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.\n\n   return preg_replace('/[^A-Za-z0-9\\-]/', '', $string); // Removes special chars.\n}\n</code></pre>\n\n<p><b>Usage:</b></p>\n\n<pre><code>echo clean('a|\"bc!@£de^&amp;$f g');\n</code></pre>\n\n<p>Will output: <code>abcdef-g</code></p>\n\n<p><b>Edit:</b></p>\n\n<blockquote>\n  <p>Hey, just a quick question, how can I prevent multiple hyphens from being next to each other? and have them replaced with just 1? Thanks in advance!</p>\n</blockquote>\n\n<pre><code>function clean($string) {\n   $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.\n   $string = preg_replace('/[^A-Za-z0-9\\-]/', '', $string); // Removes special chars.\n\n   return preg_replace('/-+/', '-', $string); // Replaces multiple hyphens with single one.\n}\n</code></pre>\n    "},{"t":"RegEx: Grabbing values between quotation marks","l":"http://stackoverflow.com/questions/171480/regex-grabbing-values-between-quotation-marks","q":"\n\n<p>I have a value like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\"Foo Bar\" \"Another Value\" something else\n</code></pre>\n\n<p>What regex will return the values enclosed in the quotation marks (e.g. <code>Foo Bar</code> and <code>Another Value</code>)?</p>\n    ","a":"\n<p>I've been using the following with great success:</p>\n\n<pre><code>([\"'])(?:(?=(\\\\?))\\2.)*?\\1\n</code></pre>\n\n<p>It supports nested quotes as well.</p>\n\n<p>For those who want a deeper explanation of how this works, here's an explanation from user <a href=\"http://stackoverflow.com/users/20713/ephemient\">ephemient</a>:</p>\n\n<blockquote>\n  <p>([\"\"']) match a quote; ((?=(\\?))\\2.) if backslash exists, gobble it, and whether or not that happens, match a character; *? match many times (non-greedily, as to not eat the closing quote); \\1 match the same quote that was use for opening.</p>\n</blockquote>\n    "},{"t":"How to remove all line breaks from a string?","l":"http://stackoverflow.com/questions/10805125/how-to-remove-all-line-breaks-from-a-string","q":"\n\n<p>I have a text in a textarea and I read it out using the .value attribute.\nNow I would like to remove all linebreaks(the character that is produced when you press enter) from my text now using .replace with a regular expression, but how do I indicate a linebreak in a regex?\nIf that is not possible, is there any other way?</p>\n    ","a":"\n<p>This is probably a FAQ.  Anyhow, line breaks (better: newlines) can be one of Carriage Return (CR, <code>\\r</code>, on older Macs), Line Feed (LF, <code>\\n</code>, on Unices incl. Linux) or CR followed by LF (<code>\\r\\n</code>, on WinDOS). (Contrary to another answer, this has <em>nothing</em> to do with character encoding.)</p>\n\n<p>Therefore, the most efficient <code>RegExp</code> literal to match all variants is</p>\n\n<pre><code>/\\r?\\n|\\r/\n</code></pre>\n\n<p>If you want to match all newlines in a string, use a global match,</p>\n\n<pre><code>/\\r?\\n|\\r/g\n</code></pre>\n\n<p>respectively.  Then proceed with the <code>replace</code> method as suggested in several other answers. (Probably you do <em>not</em> want to remove the newlines, but replace them with other whitespace, for example the space character, so that words remain intact.)</p>\n    "},{"t":"How to escape regular expression in javascript?","l":"http://stackoverflow.com/questions/2593637/how-to-escape-regular-expression-in-javascript","q":"\n\n<p>I have code like:</p>\n\n<pre><code>pattern = 'arrayname[1]'; // fetch from dom, make literal here just for example\nreg = new RegExp(RegExp.quote(pattern), 'g');\nmystring.replace(reg, 'arrayname[2]');\n</code></pre>\n\n<p>but it fails with an error message saying: \"RegExp.quote is not a function\".</p>\n\n<p>Am I missing something simple?</p>\n    ","a":"\n<p>This question got me searching on Google for a <code>RegEx.quote</code> function in JavaScript, which I was not aware of. It turns out that the function exists in only one place, namely in an <a href=\"http://stackoverflow.com/questions/494035/how-do-you-pass-a-variable-to-a-regular-expression-javascript/494122#494122\">answer by Gracenote here on StackOverflow</a>. The function is defined like this:</p>\n\n<pre><code>RegExp.quote = function(str) {\n    return (str+'').replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&amp;\");\n};\n</code></pre>\n\n<p>If you wish to use this function, you will need to include the above definition somewhere above the point where you use the function in your script.</p>\n    "},{"t":"Using String Format to show decimal upto 2 places or simple integer","l":"http://stackoverflow.com/questions/6951335/using-string-format-to-show-decimal-upto-2-places-or-simple-integer","q":"\n\n<p>I have got a price field to display which sometimes can be either 100 or 100.99 or 100.9, What I want is to display the price in 2 decimal places only if the decimals are entered for that price , for instance if its 100 so it shold only show 100 not 100.00 and if the price is 100.2 it should display 100.20 similarly for 100.22 should be same .\nI googled and came across some examples but they didnt match exactly what i wanted :</p>\n\n<pre><code>// just two decimal places\nString.Format(\"{0:0.00}\", 123.4567);      // \"123.46\"\nString.Format(\"{0:0.00}\", 123.4);         // \"123.40\"\nString.Format(\"{0:0.00}\", 123.0);         // \"123.00\"\n</code></pre>\n    ","a":"\n<p>An inelegant way would be:</p>\n\n<pre><code>var my = DoFormat(123.0);\n</code></pre>\n\n<p>With <code>DoFormat</code> being something like:</p>\n\n<pre><code>public static string DoFormat( double myNumber )\n{\n    var s = string.Format(\"{0:0.00}\", myNumber);\n\n    if ( s.EndsWith(\"00\") )\n    {\n        return ((int)myNumber).ToString();\n    }\n    else\n    {\n        return s;\n    }\n}\n</code></pre>\n\n<p>Not elegant but working for me in similar situations in some projects.</p>\n    "},{"t":"Does Flask support regular expressions in its URL routing?","l":"http://stackoverflow.com/questions/5870188/does-flask-support-regular-expressions-in-its-url-routing","q":"\n\n<p>I understand that Flask has the int, float and path converters, but the application we're developing has more complex patterns in its URLs.</p>\n\n<p>Is there a way we can use regular expressions, as in Django?</p>\n    ","a":"\n<p>Even though Armin beat me to the punch with an accepted answer I thought I'd show an abbreviated example of how I implemented a regex matcher in Flask just in case anyone wants a working example of how this could be done.</p>\n\n<pre><code>from flask import Flask\nfrom werkzeug.routing import BaseConverter\n\napp = Flask(__name__)\n\nclass RegexConverter(BaseConverter):\n    def __init__(self, url_map, *items):\n        super(RegexConverter, self).__init__(url_map)\n        self.regex = items[0]\n\n\napp.url_map.converters['regex'] = RegexConverter\n\n@app.route('/&lt;regex(\"[abcABC0-9]{4,6}\"):uid&gt;-&lt;slug&gt;/')\ndef example(uid, slug):\n    return \"uid: %s, slug: %s\" % (uid, slug)\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)\n</code></pre>\n\n<p>this URL should return with 200: <a href=\"http://localhost:5000/abc0-foo/\">http://localhost:5000/abc0-foo/</a></p>\n\n<p>this URL should will return with 404: <a href=\"http://localhost:5000/abcd-foo/\">http://localhost:5000/abcd-foo/</a></p>\n    "},{"t":"How do I use regular expressions in bash scripts?","l":"http://stackoverflow.com/questions/304864/how-do-i-use-regular-expressions-in-bash-scripts","q":"\n\n<p>I want to check if a variable has a valid year using a regular expression. Reading the <a href=\"http://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html\">bash manual</a> I understand I could use the operator =~</p>\n\n<p>Looking at the example below, I would expect to see \"not OK\" but I see \"OK\". What am I doing wrong?</p>\n\n<pre><code>i=\"test\"\nif [ $i=~\"200[78]\" ]\nthen\n  echo \"OK\"\nelse\n  echo \"not OK\"\nfi\n</code></pre>\n    ","a":"\n<p>It was changed between 3.1 and 3.2:</p>\n\n<blockquote>\n  <p>This is a terse description of the new features added to bash-3.2 since the release of bash-3.1.</p>\n  \n  <p>Quoting the string argument to the [[ command's  =~ operator now forces string matching, as with the other pattern-matching operators.</p>\n</blockquote>\n\n<p>So use it without the quotes thus:</p>\n\n<pre><code>i=\"test\"\nif [[ $i =~ 200[78] ]] ; then\n    echo \"OK\"\nelse\n    echo \"not OK\"\nfi\n</code></pre>\n    "},{"t":"Replace non-numeric with empty string","l":"http://stackoverflow.com/questions/262448/replace-non-numeric-with-empty-string","q":"\n\n<p>Quick add on requirement in our project.  A field in our DB to hold a phone number is set to only allow 10 characters.  So, if I get passed \"(913)-444-5555\" or anything else, is there a quick way to run a string through some kind of special replace function that I can pass it a set of characters to allow?</p>\n\n<p>Regex?</p>\n    ","a":"\n<p>Definitely regex:</p>\n\n<pre><code>string CleanPhone(string phone)\n{\n    Regex digitsOnly = new Regex(@\"[^\\d]\");   \n    return digitsOnly.Replace(phone, \"\");\n}\n</code></pre>\n\n<p>or within a class to avoid re-creating the regex all the time:</p>\n\n<pre><code>private static Regex digitsOnly = new Regex(@\"[^\\d]\");   \n\npublic static string CleanPhone(string phone)\n{\n    return digitsOnly.Replace(phone, \"\");\n}\n</code></pre>\n\n<p>Depending on your real-world inputs, you may want some additional logic there to do things like strip out leading 1's (for long distance) or anything trailing an x or X (for extensions).</p>\n    "},{"t":"Regular Expression to split on spaces unless in quotes","l":"http://stackoverflow.com/questions/554013/regular-expression-to-split-on-spaces-unless-in-quotes","q":"\n\n<p>I would like to use the .Net Regex.Split method to split this input string into an array. <strong>It must split on whitespace unless it is enclosed in a quote.</strong></p>\n\n<p>Input: \nHere is \"my string\"&nbsp;&nbsp;&nbsp;&nbsp;it has \"six&nbsp;&nbsp;matches\"</p>\n\n<p>Expected output:</p>\n\n<ol>\n<li>Here</li>\n<li>is</li>\n<li>my string</li>\n<li>it</li>\n<li>has</li>\n<li>six&nbsp;&nbsp;matches</li>\n</ol>\n\n<p>What pattern do I need? Also do I need to specify any RegexOptions?</p>\n    ","a":"\n<p>No options required</p>\n\n<p>Regex:</p>\n\n<pre><code>\\w+|\"[\\w\\s]*\"\n</code></pre>\n\n<p>C#:</p>\n\n<pre><code>Regex regex = new Regex(@\"\\w+|\"\"[\\w\\s]*\"\"\");\n</code></pre>\n\n<p><strong>Or if you need to exclude \" characters:</strong></p>\n\n<pre><code>    Regex\n        .Matches(input, @\"(?&lt;match&gt;\\w+)|\\\"\"(?&lt;match&gt;[\\w\\s]*)\"\"\")\n        .Cast&lt;Match&gt;()\n        .Select(m =&gt; m.Groups[\"match\"].Value)\n        .ToList()\n        .ForEach(s =&gt; Console.WriteLine(s));\n</code></pre>\n    "},{"t":"Regex: get the name of captured groups in C#","l":"http://stackoverflow.com/questions/1381097/regex-get-the-name-of-captured-groups-in-c-sharp","q":"\n\n<p>Is there a way to get the name of a captured group in C#?</p>\n\n<pre><code>string line = \"No.123456789  04/09/2009  999\";\nRegex regex = new Regex(@\"(?&lt;number&gt;[\\d]{9})  (?&lt;date&gt;[\\d]{2}/[\\d]{2}/[\\d]{4})  (?&lt;code&gt;.*)\");\n\nGroupCollection groups = regex.Match(line).Groups;\n\nforeach (Group group in groups)\n{\n    Console.WriteLine(\"Group: {0}, Value: {1}\", ???, group.Value);\n}\n</code></pre>\n\n<p>I want to get this result:</p>\n\n<pre>Group: [I don´t know what should go here], Value: 123456789  04/09/2009  999\nGroup: number, Value: 123456789\nGroup: date,   Value: 04/09/2009\nGroup: code,   Value: 999\n</pre>\n    ","a":"\n<p>Use <a href=\"http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.getgroupnames.aspx\">GetGroupNames</a> to get the list of groups in an expression and then iterate over those, using the names as keys into the groups collection.</p>\n\n<p>For example,</p>\n\n<pre><code>GroupCollection groups = regex.Match(line).Groups;\n\nforeach (string groupName in regex.GetGroupNames())\n{\n    Console.WriteLine(\n       \"Group: {0}, Value: {1}\",\n       groupName,\n       groups[groupName].Value);\n}\n</code></pre>\n    "},{"t":"Can you make just part of a regex case-insensitive?","l":"http://stackoverflow.com/questions/43632/can-you-make-just-part-of-a-regex-case-insensitive","q":"\n\n<p>I've seen lots of examples of making an entire regular expression case-insensitive.  What I'm wondering about is having just part of the expression be case-insensitive.</p>\n\n<p>For example, let's say I have a string like this:</p>\n\n<pre><code>fooFOOfOoFoOBARBARbarbarbAr\n</code></pre>\n\n<p>What if I want to match all occurrences of \"foo\" regardless of case but I only want to match the upper-case \"BAR\"s?</p>\n\n<p>The ideal solution would be something that works across regex flavors but I'm interested in hearing language-specific ones as well (Thanks <a href=\"http://stackoverflow.com/questions/43632/can-you-make-just-part-of-a-regex-case-insensitive#43636\">Espo</a>)</p>\n\n<p><em><strong>Edit</strong></em></p>\n\n<p>The link Espo provided was very helpful.  There's a good example in there about turning modifiers on and off within the expression.</p>\n\n<p>For my contrived example, I can do something like this:</p>\n\n<pre><code>(?i)foo*(?-i)|BAR\n</code></pre>\n\n<p>which makes the match case-insensitive for just the foo portion of the match.</p>\n\n<p>That seemed to work in most regex implementations except Javascript, Python, and a few others (as Espo mentioned).  </p>\n\n<p>The big ones that I was wondering about (Perl, PHP, .NET) all support inline mode changes.</p>\n    ","a":"\n<p>Perl lets you make part of your regular expression case-insensitive by using the (?i:) pattern modifier.</p>\n\n<p>Modern regex flavors allow you to apply modifiers to only part of the regular expression. If you insert the modifier (?ism) in the middle of the regex, the modifier only applies to the part of the regex to the right of the modifier. You can turn off modes by preceding them with a minus sign. All modes after the minus sign will be turned off. E.g. (?i-sm) turns on case insensitivity, and turns off both single-line mode and multi-line mode.</p>\n\n<p>Not all regex flavors support this. JavaScript and Python apply all mode modifiers to the entire regular expression. They don't support the (?-ismx) syntax, since turning off an option is pointless when mode modifiers apply to the whole regular expressions. All options are off by default.</p>\n\n<p>You can quickly test how the regex flavor you're using handles mode modifiers. The regex (?i)te(?-i)st should match test and TEst, but not teST or TEST.</p>\n\n<p><a href=\"http://www.regular-expressions.info/modifiers.html\">Source</a></p>\n    "},{"t":"How do you parse and process HTML/XML in PHP?","l":"http://stackoverflow.com/questions/3650125/how-to-parse-html-with-php","q":"\n\n<p>How can one parse HTML/XML and extract information from it?</p>\n\n<blockquote>\n  <p><strong>This is a <a href=\"http://stackoverflow.com/tags/php/info\">General Reference</a> question for the <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> tag</strong></p>\n</blockquote>\n    ","a":"\n<h2>Native XML Extensions</h2>\n\n<p>I prefer using one of the <a href=\"http://php.net/manual/en/refs.xml.php\">native XML extensions</a> since they come bundled with PHP, are usually faster than all the 3rd party libs and give me all the control I need over the markup. </p>\n\n<h3><a href=\"http://php.net/manual/en/book.dom.php\">DOM</a></h3>\n\n<blockquote>\n  <p>The DOM extension allows you to operate on XML documents through the DOM API with PHP 5. It is an implementation of the W3C's Document Object Model Core Level 3, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents.</p>\n</blockquote>\n\n<p>DOM is capable of parsing and modifying real world (broken) HTML and it can do <a href=\"http://schlitt.info/opensource/blog/0704_xpath.html\">XPath queries</a>. It is based on <a href=\"http://xmlsoft.org/html/libxml-HTMLparser.html\">libxml</a>. </p>\n\n<p>It takes some time to get productive with DOM, but that time is well worth it IMO. Since DOM is a language-agnostic interface, you'll find implementations in many languages, so if you need to change your programming language, chances are you will already know how to use that language's DOM API then.</p>\n\n<p>A basic usage example can be found in <a href=\"http://stackoverflow.com/questions/3820666/regular-expression-for-grabbing-the-href-attribute-of-an-a-element/3820783#3820783\">Grabbing the href attribute of an A element</a> and a general conceptual overview can be found at <a href=\"http://stackoverflow.com/questions/4979836/noob-question-about-domdocument-in-php/4983721#4983721\">DOMDocument in php</a></p>\n\n<p><a href=\"http://stackoverflow.com/search?q=DOM+HTML+[PHP]&amp;submit=search\">How to use the DOM extension has been covered extensively on StackOverflow</a>, so if you choose to use it, you can be sure most of the issues you run into can be solved by searching/browsing Stack Overflow.</p>\n\n<h3><a href=\"http://php.net/manual/en/book.xmlreader.php\">XMLReader</a></h3>\n\n<blockquote>\n  <p>The XMLReader extension is an XML pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way. </p>\n</blockquote>\n\n<p>XMLReader, like DOM, is based on libxml. I am not aware of how to trigger the HTML Parser Module, so chances are using XMLReader for parsing broken HTML might be less robust than using DOM where you can explicitly tell it to use libxml's HTML Parser Module.</p>\n\n<p>A basic usage example can be found at <a href=\"http://stackoverflow.com/questions/3299033/getting-all-values-from-h1-tags-using-php/3299140#3299140\">getting all values from h1 tags using php</a></p>\n\n<h3><a href=\"http://php.net/manual/en/book.xml.php\">XML Parser</a></h3>\n\n<blockquote>\n  <p>This extension lets you create XML parsers and then define handlers for different XML events. Each XML parser also has a few parameters you can adjust.</p>\n</blockquote>\n\n<p>The XML Parser library is also based on libxml, and implements a <a href=\"http://en.wikipedia.org/wiki/Simple_API_for_XML\">SAX</a> style XML push parser. It may be a better choice for memory management than DOM or SimpleXML, but will be more difficult to work with than the pull parser implemented by XMLReader.</p>\n\n<h3><a href=\"http://php.net/manual/en/book.simplexml.php\">SimpleXml</a></h3>\n\n<blockquote>\n  <p>The SimpleXML extension provides a very simple and easily usable toolset to convert XML to an object that can be processed with normal property selectors and array iterators. </p>\n</blockquote>\n\n<p>SimpleXML is an option when you know the HTML is valid XHTML. If you need to parse broken HTML, don't even consider SimpleXml because it will choke.</p>\n\n<p>A basic usage example can be found at <a href=\"http://stackoverflow.com/questions/4906073/a-simple-program-to-crud-node-and-node-values-of-xml-file\">A simple program to CRUD node and node values of xml file</a> and there is <a href=\"http://php.net/manual/en/simplexml.examples-basic.php\">lots of additional examples in the PHP Manual</a>.</p>\n\n<hr>\n\n<h2>3rd Party Libraries (libxml based)</h2>\n\n<p>If you prefer to use a 3rd-party lib, I'd suggest using a lib that actually uses <a href=\"http://php.net/manual/en/book.dom.php\">DOM</a>/<a href=\"http://xmlsoft.org/\">libxml</a> underneath instead of string parsing.</p>\n\n<h3><a href=\"http://code.google.com/p/phpquery/\">phpQuery</a></h3>\n\n<blockquote>\n  <p>phpQuery is a server-side, chainable, CSS3 selector driven Document Object Model (DOM) API based on jQuery JavaScript Library written in PHP5 and provides additional Command Line Interface (CLI). </p>\n</blockquote>\n\n<h3><a href=\"http://framework.zend.com/manual/current/en/modules/zend.dom.intro.html\">Zend_Dom</a></h3>\n\n<blockquote>\n  <p>Zend_Dom provides tools for working with DOM documents and structures. Currently, we offer Zend_Dom_Query, which provides a unified interface for querying DOM documents utilizing both XPath and CSS selectors. </p>\n</blockquote>\n\n<h3><a href=\"http://querypath.org/\">QueryPath</a></h3>\n\n<blockquote>\n  <p>QueryPath is a PHP library for manipulating XML and HTML. It is designed to work not only with local files, but also with web services and database resources. It implements much of the jQuery interface (including CSS-style selectors), but it is heavily tuned for server-side use.  Can be installed via Composer.</p>\n</blockquote>\n\n<h3><a href=\"http://www.fluentdom.org\">FluentDom</a></h3>\n\n<blockquote>\n  <p>FluentDOM provides a jQuery-like fluent XML interface for the DOMDocument in PHP. Selectors are written in XPath or CSS (using a CSS to XPath converter). Current versions extend the DOM implementing standard interfaces and add features from the DOM Living Standard. FluentDOM can load formats like JSON, CSV, JsonML, RabbitFish and others. Can be installed via Composer.</p>\n</blockquote>\n\n<h3><a href=\"http://github.com/theseer/fDOMDocument\">fDOMDocument</a></h3>\n\n<blockquote>\n  <p>fDOMDocument extends the standard DOM to use exceptions at all occasions of errors instead of PHP warnings or notices. They also add various custom methods and shortcuts for convenience and to simplify the usage of DOM.</p>\n</blockquote>\n\n<hr>\n\n<h2>3rd-Party (not libxml-based)</h2>\n\n<p>The benefit of building upon DOM/libxml is that you get good performance out of the box because you are based on a native extension. However, not all 3rd-party libs go down this route.  Some of them listed below</p>\n\n<h3><a href=\"http://simplehtmldom.sourceforge.net/manual.htm#section_traverse\">SimpleHtmlDom</a></h3>\n\n<blockquote>\n  <ul>\n  <li>An HTML DOM parser written in PHP5+ lets you manipulate HTML in a very easy way!</li>\n  <li>Require PHP 5+.</li>\n  <li>Supports invalid HTML.</li>\n  <li>Find tags on an HTML page with selectors just like jQuery.</li>\n  <li>Extract contents from HTML in a single line.</li>\n  </ul>\n</blockquote>\n\n<p>I generally do not recommend this parser. The codebase is horrible and the parser itself is rather slow and memory hungry. Any of the libxml based libraries should outperform this easily.</p>\n\n<h3><a href=\"https://code.google.com/p/ganon/\">Ganon</a></h3>\n\n<blockquote>\n  <ul>\n  <li>A universal tokenizer and HTML/XML/RSS DOM Parser\n  <ul>\n  <li>Ability to manipulate elements and their attributes</li>\n  <li>Supports invalid HTML and UTF8</li>\n  </ul></li>\n  <li>Can perform advanced CSS3-like queries on elements (like jQuery -- namespaces supported) </li>\n  <li>A HTML beautifier (like HTML Tidy)\n  <ul>\n  <li>Minify CSS and Javascript</li>\n  <li>Sort attributes, change character case, correct indentation, etc. </li>\n  </ul></li>\n  <li>Extensible\n  <ul>\n  <li>Parsing documents using callbacks based on current character/token</li>\n  <li>Operations separated in smaller functions for easy overriding </li>\n  </ul></li>\n  <li>Fast and Easy </li>\n  </ul>\n</blockquote>\n\n<p>Never used it. Can't tell if it's any good.</p>\n\n<hr>\n\n<h2>HTML 5</h2>\n\n<p>You can use the above for parsing HTML5, but <a href=\"http://stackoverflow.com/questions/4029341/dom-parser-that-allows-html5-style-in-script-tag/4029412\">there can be quirks</a> due to the markup HTML5 allows. So for HTML5 you want to consider using a dedicated parser, like</p>\n\n<p><a href=\"https://github.com/html5lib/html5lib-php\">html5lib</a></p>\n\n<blockquote>\n  <p>A Python and PHP implementations of a HTML parser based on the WHATWG HTML5 specification for maximum compatibility with major desktop web browsers. </p>\n</blockquote>\n\n<p>We might see more dedicated parsers once HTML5 is finalized. There is also a blogpost by the W3's titled <a href=\"http://www.w3.org/QA/2008/07/html5-parsing-howto.html\">How-To for html 5 parsing</a> that is worth checking out.</p>\n\n<hr>\n\n<h2>WebServices</h2>\n\n<p>If you don't feel like programming PHP, you can also use web services. In general, I found very little utility for these, but that's just me and my use cases.</p>\n\n<h3><a href=\"http://developer.yahoo.com/yql/guide/running-chapt.html\">YQL</a></h3>\n\n<blockquote>\n  <p>The YQL Web Service enables applications to query, filter, and combine data from different sources across the Internet. YQL statements have a SQL-like syntax, familiar to any developer with database experience.</p>\n</blockquote>\n\n<h3><a href=\"http://scraperwiki.com/api/1.0\">ScraperWiki</a>.</h3>\n\n<blockquote>\n  <p>ScraperWiki's external interface allows you to extract data in the form you want for use on the web or in your own applications. You can also extract information about the state of any scraper.</p>\n</blockquote>\n\n<hr>\n\n<h2>Regular Expressions</h2>\n\n<p>Last and <strong>least recommended</strong>, you can extract data from HTML with <a href=\"http://stackoverflow.com/search?q=regular%20expression%20tutorials\">regular expressions</a>. In general using Regular Expressions on HTML is discouraged. </p>\n\n<p>Most of the snippets you will find on the web to match markup are brittle. In most cases they are only working for a very particular piece of HTML. Tiny markup changes, like adding whitespace somewhere, or adding or changing attributes in a tag, can make the regex fails when it's not properly written. You should know what you are doing before using regex on HTML.</p>\n\n<p>HTML parsers already know the syntactical rules of HTML. Regular expressions have to be taught for each new regex you write. Regex are fine in some cases, but it really depends on your use-case.</p>\n\n<p>You <a href=\"http://stackoverflow.com/questions/4231382/regular-expression-pattern-not-matching-anywhere-in-string/4234491#4234491\">can write more reliable parsers</a>, but writing a <em>complete and reliable</em> custom parser with regular expressions is a waste of time when the aforementioned libraries already exist and do a much better job on this.</p>\n\n<p>Also see <a href=\"http://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html\">Parsing Html The Cthulhu Way</a></p>\n\n<hr>\n\n<h2>Books</h2>\n\n<p>If you want to spend some money, have a look at</p>\n\n<ul>\n<li><a href=\"http://www.phparch.com/books/phparchitects-guide-to-web-scraping-with-php\">PHP Architect's Guide to Webscraping with PHP</a></li>\n</ul>\n\n<p>I am not affiliated with PHP Architect or the authors.</p>\n    "},{"t":"Does “\\d” in regex mean a digit?","l":"http://stackoverflow.com/questions/6479423/does-d-in-regex-mean-a-digit","q":"\n\n<p>I found that in <code>123</code>, <code>\\d</code> matches <code>1</code> and <code>3</code> but not <code>2</code>. I was wondering if <code>\\d</code> matches a digit satisfying what kind of requirement? I am talking about Python style regex. </p>\n\n<p>Regular expression plugin in Gedit is using Python style regex. I created a text file with its content being </p>\n\n<pre><code>123\n</code></pre>\n\n<p>Only <code>1</code> and <code>3</code> are matched by the regex <code>\\d</code>; <code>2</code> is not.</p>\n\n<p>Generally for a sequence of digit numbers without other characters in between, only the odd order digits are matches, and the even order digits are not. For example in <code>12345</code>, the matches are <code>1</code>, <code>3</code> and <code>5</code>. </p>\n    ","a":"\n<p><code>[0-9]</code> <strong>isn't equivalent</strong> to <code>\\d</code>. <code>[0-9]</code> matches only <code>0123456789</code> characters, while <code>\\d</code> matches <code>[0-9]</code> and other digit characters, for example Eastern Arabic numerals <code>٠١٢٣٤٥٦٧٨٩</code></p>\n    "},{"t":"javascript: Split large string in n-size chunks","l":"http://stackoverflow.com/questions/7033639/javascript-split-large-string-in-n-size-chunks","q":"\n\n<p>I would like to split a very large string (lets say, 10,000 characters) into N-size chunks.</p>\n\n<p>What would be the best way in terms of performance to do this? </p>\n\n<p>For instance:\n<code>\"1234567890\"</code> split by 2 would become <code>[\"12\", \"34\", \"56\", \"78\", \"90\"]</code>.</p>\n\n<p>Would something like this be possible using <code>string.match</code> and if so, would that be the best way to do it in terms of performance?</p>\n    ","a":"\n<p>You can do something like this:</p>\n\n<pre><code>\"1234567890\".match(/.{1,2}/g);\n// Results in:\n[\"12\", \"34\", \"56\", \"78\", \"90\"]\n</code></pre>\n\n<p>The method will still work with strings whose size is not an exact multiple of the chunk-size:</p>\n\n<pre><code>\"123456789\".match(/.{1,2}/g);\n// Results in:\n[\"12\", \"34\", \"56\", \"78\", \"9\"]\n</code></pre>\n\n<p>In general, for any string out of which you want to extract at-most <em>n</em>-sized substrings, you would do:</p>\n\n<pre><code>str.match(/.{1,n}/g); // Replace n with the size of the substring\n</code></pre>\n\n<p>If your string can contain newlines or carriage returns, you would do:</p>\n\n<pre><code>str.match(/(.|[\\r\\n]){1,n}/g); // Replace n with the size of the substring\n</code></pre>\n\n<p>As far as performance, I tried this out with approximately 10k characters and it took a little over a second on Chrome. YMMV.</p>\n\n<p>This can also be used in a reusable function:</p>\n\n<pre><code>function chunkString(str, length) {\n  return str.match(new RegExp('.{1,' + length + '}', 'g'));\n}\n</code></pre>\n    "},{"t":"Regex for splitting a string using space when not surrounded by single or double quotes","l":"http://stackoverflow.com/questions/366202/regex-for-splitting-a-string-using-space-when-not-surrounded-by-single-or-double","q":"\n\n<p>I'm new to regular expressions and would appreciate your help.  I'm trying to put together an expression that will split the example string using all spaces that are not surrounded by single or double quotes. My last attempt looks like this: <code>(?!\")</code> and isn't quite working. It's splitting on the space before the quote.</p>\n\n<p>Example input: </p>\n\n<pre><code>This is a string that \"will be\" highlighted when your 'regular expression' matches something.\n</code></pre>\n\n<p>Desired output:</p>\n\n<pre><code>This\nis\na\nstring\nthat\nwill be\nhighlighted\nwhen\nyour\nregular expression\nmatches\nsomething.\n</code></pre>\n\n<p>Note that <code>\"will be\"</code> and <code>'regular expression'</code> retain the space between the words.</p>\n    ","a":"\n<p>I don't understand why all the others are proposing such complex regular expressions or such long code.  Essentially, you want to grab two kinds of things from your string: sequences of characters that aren't spaces or quotes, and sequences of characters that begin and end with a quote, with no quotes in between, for two kinds of quotes.  You can easily match those things with this regular expression:</p>\n\n<pre><code>[^\\s\"']+|\"([^\"]*)\"|'([^']*)'\n</code></pre>\n\n<p>I added the capturing groups because you don't want the quotes in the list.</p>\n\n<p>This Java code builds the list, adding the capturing group if it matched to exclude the quotes, and adding the overall regex match if the capturing group didn't match (an unquoted word was matched).</p>\n\n<pre><code>List&lt;String&gt; matchList = new ArrayList&lt;String&gt;();\nPattern regex = Pattern.compile(\"[^\\\\s\\\"']+|\\\"([^\\\"]*)\\\"|'([^']*)'\");\nMatcher regexMatcher = regex.matcher(subjectString);\nwhile (regexMatcher.find()) {\n    if (regexMatcher.group(1) != null) {\n        // Add double-quoted string without the quotes\n        matchList.add(regexMatcher.group(1));\n    } else if (regexMatcher.group(2) != null) {\n        // Add single-quoted string without the quotes\n        matchList.add(regexMatcher.group(2));\n    } else {\n        // Add unquoted word\n        matchList.add(regexMatcher.group());\n    }\n} \n</code></pre>\n\n<p>If you don't mind having the quotes in the returned list, you can use much simpler code:</p>\n\n<pre><code>List&lt;String&gt; matchList = new ArrayList&lt;String&gt;();\nPattern regex = Pattern.compile(\"[^\\\\s\\\"']+|\\\"[^\\\"]*\\\"|'[^']*'\");\nMatcher regexMatcher = regex.matcher(subjectString);\nwhile (regexMatcher.find()) {\n    matchList.add(regexMatcher.group());\n} \n</code></pre>\n    "},{"t":"RE error: illegal byte sequence on Mac OS X","l":"http://stackoverflow.com/questions/19242275/re-error-illegal-byte-sequence-on-mac-os-x","q":"\n\n<p>I'm trying to replace a string on Mac OS X. The string has embedded double quotes. The command is:</p>\n\n<pre><code>sed -i \"\" 's|\"iphoneos-cross\",\"llvm-gcc:-O3|\"iphoneos-cross\",\"clang:-Os|g' Configure\n</code></pre>\n\n<p>And the error is:</p>\n\n<pre><code>sed: RE error: illegal byte sequence\n</code></pre>\n\n<p>I've tried escaping the double quotes, commas, dashes, and colons with no joy. For example:</p>\n\n<pre><code>sed -i \"\" 's|\\\"iphoneos-cross\\\"\\,\\\"llvm-gcc\\:\\-O3|\\\"iphoneos-cross\\\"\\,\\\"clang\\:\\-Os|g' Configure\n</code></pre>\n\n<p>Does anyone know how to get <code>sed</code> to print the position of the illegal byte sequence? Or does anyone know what the illegal byte sequence is?</p>\n    ","a":"\n<p>Using the <strong><a href=\"http://stackoverflow.com/a/19770395/45375\">formerly accepted answer</a> is an option if you don't mind losing support for your true locale</strong> (if you're on a US system and you never need to deal with foreign characters, that may be fine.)</p>\n\n<p>However, the <strong>same effect can be had <em>ad-hoc</em> for a <em>single command</em> only</strong>:</p>\n\n<pre><code>LC_ALL=C sed -i \"\" 's|\"iphoneos-cross\",\"llvm-gcc:-O3|\"iphoneos-cross\",\"clang:-Os|g' Configure\n</code></pre>\n\n<p>Note: What matters is an <em>effective</em> <code>LC_CTYPE</code> setting of <code>C</code>, so <code>LC_CTYPE=C sed ...</code> would <em>normally</em> also work, but if <code>LC_ALL</code> happens to be set (to something other than <code>C</code>), it will override individual <code>LC_*</code>-category variables such as <code>LC_CTYPE</code>. Thus, the most robust approach is to set <code>LC_ALL</code>.</p>\n\n<p>However, (effectively) setting <code>LC_CTYPE</code> to <code>C</code> treats strings <strong>as if each byte were its own character</strong> (<em>no</em> interpretation based on encoding rules is performed), with <strong>no regard</strong> for the - multibyte-on-demand - <strong>UTF-8 encoding</strong> that OS X employs by default, where <strong>foreign characters</strong> have <strong>multibyte encodings</strong>.</p>\n\n<p>In a nutshell: <strong>setting <code>LC_CTYPE</code> to <code>C</code></strong> causes the shell and utilities to only recognize basic English letters as letters (the ones in the 7-bit ASCII range), so that <strong>foreign chars. will not be treated as letters</strong>, causing, for instance, upper-/lowercase conversions to fail.</p>\n\n<p>Again, this may be fine if you needn't <em>match</em> multibyte-encoded characters such as <code>é</code>, and simply want to <em>pass such characters through</em>.</p>\n\n<p>If this is insufficient and/or you want to <strong>understand the cause</strong> of the original error (including determining what input bytes caused the problem) and <strong>perform encoding conversions</strong> on demand, <strong>read on</strong> below.</p>\n\n<hr>\n\n<p>The problem is that the input file's encoding does not match the shell's.<br>\nMore specifically, <strong>the input file contains characters encoded in a way that is not valid in UTF-8</strong> (as @Klas Lindbäck stated in a comment) - that's what the <code>sed</code> error message is trying to say by <code>invalid byte sequence</code>.</p>\n\n<p>Most likely, your input file uses a <strong>single-byte 8-bit encoding</strong> such as <code>ISO-8859-1</code>, frequently used to encode \"Western European\" languages.</p>\n\n<p><strong>Example:</strong> </p>\n\n<p>The accented letter <code>à</code> has Unicode codepoint <code>0xE0</code> (224) - the same as in <code>ISO-8859-1</code>. However, due to the nature of <em>UTF-8</em> encoding, this single codepoint is represented as <em>2</em> bytes - <code>0xC3 0xA0</code>, whereas trying to pass the <em>single byte</em> <code>0xE0</code> is <em>invalid</em> under UTF-8.</p>\n\n<p>Here's a <strong>demonstration of the problem</strong> using the string <code>voilà</code> encoded as <code>ISO-8859-1</code>, with the <code>à</code> represented as <em>one</em> byte (via an ANSI-C-quoted bash string (<code>$'...'</code>) that uses <code>\\x{e0}</code> to create the byte):</p>\n\n<p>Note that the <code>sed</code> command is effectively a no-op that simply passes the input through, but we need it to provoke the error:</p>\n\n<pre><code>  # -&gt; 'illegal byte sequence': byte 0xE0 is not a valid char.\nsed 's/.*/&amp;/' &lt;&lt;&lt;$'voil\\x{e0}'\n</code></pre>\n\n<p>To simply <strong><em>ignore</em> the problem</strong>, the above <code>LCTYPE=C</code> approach can be used:</p>\n\n<pre><code>  # No error, bytes are passed through ('á' will render as '?', though).\nLC_CTYPE=C sed 's/.*/&amp;/' &lt;&lt;&lt;$'voil\\x{e0}'\n</code></pre>\n\n<p>If you want to <strong>determine which parts of the input cause the problem</strong>, try the following:</p>\n\n<pre><code>  # Convert bytes in the 8-bit range (high bit set) to hex. representation.\n  # -&gt; 'voil\\x{e0}'\niconv -f ASCII --byte-subst='\\x{%02x}' &lt;&lt;&lt;$'voil\\x{e0}'\n</code></pre>\n\n<p>The output will show you all bytes that have the high bit set (bytes that exceed the 7-bit ASCII range) in hexadecimal form. (Note, however, that that also includes correctly encoded UTF-8 multibyte sequences - a more sophisticated approach would be needed to specifically identify invalid-in-UTF-8 bytes.)</p>\n\n<hr>\n\n<p><strong>Performing encoding conversions on demand</strong>:</p>\n\n<p>Standard utility <code>iconv</code> can be used to convert to (<code>-t</code>) and/or from (<code>-f</code>) encodings; <code>iconv -l</code> lists all supported ones.</p>\n\n<p><strong>Examples:</strong></p>\n\n<p>Convert FROM <code>ISO-8859-1</code> to the encoding in effect in the shell (based on <code>LC_CTYPE</code>, which is <code>UTF-8</code>-based by default), building on the above example:</p>\n\n<pre><code>  # Converts to UTF-8; output renders correctly as 'voilà'\nsed 's/.*/&amp;/' &lt;&lt;&lt;\"$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\\x{e0}')\"\n</code></pre>\n\n<p>Note that this <em>conversion allows you to properly match foreign characters</em>:</p>\n\n<pre><code>  # Correctly matches 'à' and replaces it with 'ü': -&gt; 'voilü'\nsed 's/à/ü/' &lt;&lt;&lt;\"$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\\x{e0}')\"\n</code></pre>\n\n<p>To convert the input BACK to <code>ISO-8859-1</code> after processing, simply pipe the result to another <code>iconv</code> command:</p>\n\n<pre><code>sed 's/à/ü/' &lt;&lt;&lt;\"$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\\x{e0}')\" | iconv -t ISO-8859-1\n</code></pre>\n    "},{"t":"Python check for valid email address?","l":"http://stackoverflow.com/questions/8022530/python-check-for-valid-email-address","q":"\n\n<p>Is there a good way to check a form input using regex to make sure it is a proper style email address? Been searching since last night and everybody that has answered peoples questions regarding this topic also seems to have problems with it if it is a subdomained email address.</p>\n    ","a":"\n<p>There is no point. Even if you can verify that the email address is syntactically valid, you'll still need to check that it was not mistyped, and that it actually goes to the person you think it does. The only way to do that is to send them an email and have them click a link to verify.</p>\n\n<p>Therefore, a most basic check (e.g. that they didn't accidentally entered their street address) is usually enough. Something like: it has exactly one <code>@</code> sign, and at least one <code>.</code> in the part after the <code>@</code>:</p>\n\n<pre><code>[^@]+@[^@]+\\.[^@]+\n</code></pre>\n\n<p>You'd probably also want to disallow whitespace -- there are probably valid email addresses with whitespace in them, but I've never seen one, so the odds of this being a user error are on your side.</p>\n\n<p>If you want the full check, have a look at <a href=\"http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address\">this question</a>.</p>\n\n<hr>\n\n<p>Update: Here's how you could use any such regex:</p>\n\n<pre><code>import re\n\nif not re.match(r\"... regex here ...\", email):\n  # whatever\n</code></pre>\n\n<p>Note the <code>r</code> in front of the string; this way, you won't need to escape things twice.</p>\n\n<p>If you have a large number of regexes to check, it might be faster to compile the regex first:</p>\n\n<pre><code>import re\n\nEMAIL_REGEX = re.compile(r\"... regex here ...\")\n\nif not EMAIL_REGEX.match(email):\n  # whatever\n</code></pre>\n    "},{"t":"Java: use split() with multiple delimiters","l":"http://stackoverflow.com/questions/5993779/java-use-split-with-multiple-delimiters","q":"\n\n<p>I need to split a string base on delimiter <code>-</code> and <code>.</code>. Below are my desired output. </p>\n\n<p><code>AA.BB-CC-DD.zip</code> -&gt; </p>\n\n<pre><code>AA\nBB\nCC\nDD\nzip \n</code></pre>\n\n<p>but my following code does not work.</p>\n\n<pre><code>private void getId(String pdfName){\n    String[]tokens = pdfName.split(\"-\\\\.\");\n}\n</code></pre>\n    ","a":"\n<p>I think you need to include the regex OR operator:</p>\n\n<pre><code> String[]tokens = pdfName.split(\"-|\\\\.\");\n</code></pre>\n\n<p>What you have will match \"-.\" not a \"-\" <b>or</b> a \".\"</p>\n    "},{"t":"grunt (minimatch/glob) folder exclusion","l":"http://stackoverflow.com/questions/12632029/grunt-minimatch-glob-folder-exclusion","q":"\n\n<p>I have a situation where I'm trying to use grunt to lint a codebase, excluding specific folders.</p>\n\n<p>grunt uses minimatch (similar to bsdglob) under the hood to match files, but I can't seem to figure out how to do a .gitignore style exclude of a folder.</p>\n\n<p>I'd like to ingest this:</p>\n\n<p><code>ignoreme</code></p>\n\n<p>and match these:</p>\n\n<pre><code>/folder/path/here/to/something/ok.js\n/another/folder/path.js\n/test.js\n</code></pre>\n\n<p>but not match these:</p>\n\n<pre><code>/folder/ignoreme/something.js\n/folder/path/here/to/ignoreme/metoo/file.js\n</code></pre>\n\n<p>This will match everything, including ignoreme:</p>\n\n<pre><code>/**/*.js\n</code></pre>\n\n<p>So I figured I could do something like:</p>\n\n<pre><code>/**/!(ignoreme)/**/*.js\n</code></pre>\n\n<p>but that matches files in the ignoreme folder.</p>\n\n<p>I'm used to regexes, but can't seem to figure out how to repeat a pattern or something here - I also tried stuff like:</p>\n\n<pre><code>/(!(ignoreme)|*)*/*.js\n</code></pre>\n\n<p>hoping the container would repeat, but that doesn't work, it just fails to match everything.</p>\n\n<p>Any way to either pass a regex to grunt file paths, or make this work for me?</p>\n\n<h1>Update:</h1>\n\n<p>Here's how I'm currently dealing with this issue:</p>\n\n<pre><code>var pattern = /\\/ignoreme\\//\nvar files = grunt.file.expandFiles(arrayOfFilesPassedToMinimatch).filter(function(f){\n  return !pattern.test(f)\n})\n</code></pre>\n\n<p>I'd still be interested if folder excludes are possible in minimatch.</p>\n    ","a":"\n<p>In the currently-in-development version 0.4.0a, the <code>grunt.file.expand</code> method now supports exclusions, and does so in an arguably less complex way than the underlying minimatch matching library. This is possible because <code>grunt.file.expand</code> accepts <em>multiple</em> patterns (whereas minimatch only accepts one).</p>\n\n<p>From <a href=\"http://gruntjs.com/api/grunt.file#grunt.file.expand\">the grunt.file.expand documentation</a>:</p>\n\n<blockquote>\n  <p>This method accepts either comma separated wildcard patterns or an array of wildcard patterns. Paths matching patterns that begin with ! will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.</p>\n</blockquote>\n\n<p>That means you could specify <code>['/**/*.js', '!**/ignoreme/**']</code> and while the first pattern would add all <code>.js</code> files to the result set, the second pattern would then remove all <code>/ignoreme/</code> files from the result set.</p>\n\n<p>Take a look at the <a href=\"https://github.com/cowboy/grunt/blob/8501765fb7addd073754fabf7a0e779a1a54b122/test/grunt/file_test.js#L60-68\">grunt.file.match unit tests</a> if you're really curious.</p>\n\n<p>Note that the version of grunt offering this functionality hasn't officially been released, but if you're interested in using it in a project, see the <a href=\"https://github.com/gruntjs/grunt/wiki/Frequently-Asked-Questions\">When will I be able to use in-development feature 'X'?</a> FAQ entry.</p>\n    "},{"t":"Extract root domain name from string","l":"http://stackoverflow.com/questions/8498592/extract-root-domain-name-from-string","q":"\n\n<p>I would like to match just the root of a URL and not the whole URL from a text string. Given: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>http://www.youtube.com/watch?v=ClkQA2Lb_iE\nhttp://youtu.be/ClkQA2Lb_iE\nhttp://www.example.com/12xy45\nhttp://example.com/random\n</code></pre>\n\n<p>I want to get the 2 last instances resolving to the <code>www.example.com</code> or <code>example.com</code> domain. </p>\n\n<p>I heard regex is slow and this would be my second regex expression on the page so If there is anyway to do it without regex let me know.</p>\n\n<p>I'm seeking a JS/jQuery version of this solution.</p>\n    ","a":"\n<p>Try:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction extractDomain(url) {\n    var domain;\n    //find &amp; remove protocol (http, ftp, etc.) and get domain\n    if (url.indexOf(\"://\") &gt; -1) {\n        domain = url.split('/')[2];\n    }\n    else {\n        domain = url.split('/')[0];\n    }\n\n    //find &amp; remove port number\n    domain = domain.split(':')[0];\n\n    return domain;\n}\n\ndocument.write(extractDomain(\"http://www.youtube.com/watch?v=ClkQA2Lb_iE\") + \"&lt;br/&gt;\");\ndocument.write(extractDomain(\"https://www.youtube.com/watch?v=ClkQA2Lb_iE\") + \"&lt;br/&gt;\");\ndocument.write(extractDomain(\"www.youtube.com/watch?v=ClkQA2Lb_iE\") + \"&lt;br/&gt;\");\ndocument.write(extractDomain(\"ftps://ftp.websitename.com/dir/file.txt\") + \"&lt;br/&gt;\");\ndocument.write(extractDomain(\"websitename.com:1234/dir/file.txt\") + \"&lt;br/&gt;\");\ndocument.write(extractDomain(\"ftps://websitename.com:1234/dir/file.txt\") + \"&lt;br/&gt;\");\n&lt;/script&gt;\n</code></pre>\n\n<p>Regardless having the protocol or even port number, you can extract the domain. This is a very simplified, non-regex solution, so I think this will do.</p>\n\n<p>*Thank you Timmerz, renoirb, rineez, and BigDong for your suggestions!</p>\n    "},{"t":"Javascript: negative lookbehind equivalent?","l":"http://stackoverflow.com/questions/641407/javascript-negative-lookbehind-equivalent","q":"\n\n<p>Is there a way to achieve the equivalent of a <a href=\"http://www.regular-expressions.info/lookaround.html#lookbehind\">negative lookbehind</a> in javascript regular expressions?  I need to match a string that does not start with a specific set of characters.</p>\n\n<p>It seems I am unable to find a regex that does this without failing if the matched part is found at the beginning of the string.  Negative lookbehinds seem to be the only answer, but javascript doesn't have one.</p>\n\n<p>EDIT:\nThis is the regex that I would like to work, but it doesn't:</p>\n\n<p><code>(?&lt;!([abcdefg]))m</code></p>\n\n<p>So it would match the 'm' in 'jim' or 'm', but not 'jam'</p>\n    ","a":"\n<p>Use</p>\n\n<pre><code>newString = string.replace(/([abcdefg])?m/, function($0,$1){ return $1?$0:'m';});\n</code></pre>\n    "},{"t":"How to invert a grep expression","l":"http://stackoverflow.com/questions/4373675/how-to-invert-a-grep-expression","q":"\n\n<p>The following grep expression successfully lists all the .exe and .html files in the current directory and sub directories.  </p>\n\n<pre><code>ls -R |grep -E .*[\\.exe]$\\|.*[\\.html]$  \n</code></pre>\n\n<p>How do I invert this result to list those that aren't a .html or .exe instead. (That is, <code>!=</code>.)</p>\n    ","a":"\n<p>Use command-line option <code>-v</code> or <code>--invert-match</code>,</p>\n\n<pre><code>ls -R |grep -v -E .*[\\.exe]$\\|.*[\\.html]$\n</code></pre>\n    "},{"t":"Using Regex to generate Strings rather than match them","l":"http://stackoverflow.com/questions/22115/using-regex-to-generate-strings-rather-than-match-them","q":"\n\n<p>I am writing a Java utility which helps me to generate loads of data for performance testing.  It would be <em>really</em> cool to be able to specify a regex for Strings so that my generator spits out things which match this.  Is there something out there already baked which I can use to do this?  Or is there a library which gets me most of the way there?</p>\n\n<p>Thanks</p>\n    ","a":"\n<p><strong>Edit:</strong> </p>\n\n<p>As mentioned in the comments, there is a library available at Google Code to acheive this:\n<a href=\"http://code.google.com/p/xeger\" rel=\"nofollow\">http://code.google.com/p/xeger</a></p>\n\n<p>See also <a href=\"https://github.com/mifmif/Generex\" rel=\"nofollow\">https://github.com/mifmif/Generex</a> as suggested by <a href=\"http://stackoverflow.com/a/24659605/1820\">Mifmif</a></p>\n\n<p><strong>Original message:</strong></p>\n\n<p>Firstly, with a complex enough regexp, i believe this can be impossible. But you should be able to put something together for simple regexps.</p>\n\n<p>If you take a look at the source code of the class java.util.regex.Pattern, you'll see that it uses an internal representation of Node instances. Each of the different pattern components have their own implementation of a Node subclass. These Nodes are organised into a tree.</p>\n\n<p>By producing a visitor that traverses this tree, you should be able to call an overloaded generator method or some kind of Builder that cobbles something together.</p>\n    "},{"t":"Which is the correct shorthand - “regex” or “regexp” [closed]","l":"http://stackoverflow.com/questions/3058246/which-is-the-correct-shorthand-regex-or-regexp","q":"\n\n<p>Most of us computer programmers are pretty obsessed about correct terminology. I certainly am, especially because sometimes changing just one character in a word can drastically change its meaning.</p>\n\n<p>So... what is the correct shorthand for \"regular expression\"? Is it \"regex\" or \"regexp\"? On the internet I see both uses, although \"regex\" seems to be more popular, and the tag list here on SO also includes just \"regex\". But plenty of people also use \"regexp\" in their questions.</p>\n    ","a":"\n<pre><code>/regexp?/    \n</code></pre>\n\n<p></p>\n    "},{"t":"Reference - What does this regex mean?","l":"http://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean","q":"\n\n<h2>What is this?</h2>\n\n<p>This is a collection of common Q&amp;A. This is also a Community Wiki, so everyone is invited to participate in maintaining it.</p>\n\n<h2>Why is this?</h2>\n\n<p><a href=\"/questions/tagged/regex\" class=\"post-tag\" title=\"show questions tagged 'regex'\" rel=\"tag\">regex</a> is suffering from <code>give me ze code</code> type of questions and poor answers with no explanation. This reference is meant to provide links to quality Q&amp;A.</p>\n\n<h2>What's the scope?</h2>\n\n<p>This reference is meant for the following languages: <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>, <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a>, <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a>, <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a>, <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a>.</p>\n\n<p>This might be too broad, but these languages share the same syntax. For specific features there's the tag of the language behind it, example:</p>\n\n<ul>\n<li>What are regular expression Balancing Groups? <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n</ul>\n    ","a":"\n<h2>The Stack Overflow Regular Expressions FAQ</h2>\n\n<hr>\n\n<p>If you want to truly learn regular expressions, then read Jeffrey Friedl's \"<a href=\"http://regex.info/book.html\">Mastering Regular Expressions</a>\" from beginning to end  (<a href=\"http://rads.stackoverflow.com/amzn/click/0596528124\">3rd edition</a>, on Amazon)</p>\n\n<hr>\n\n<p><strong>Quantifiers</strong></p>\n\n<ul>\n<li>Zero-or-more: <a href=\"http://stackoverflow.com/a/10764399\"><code>*</code>:greedy</a>, [<code>*?</code>:reluctant] <sup>[Link needed]</sup>, <a href=\"http://stackoverflow.com/a/17064242\"><code>*+</code>:possessive</a>, <a href=\"http://stackoverflow.com/questions/5319840/greedy-vs-reluctant-vs-possessive-quantifiers\"><em>Greedy v reluctant v possessive</em></a></li>\n<li>One-or-more: <a href=\"http://stackoverflow.com/a/10764399\"><code>+</code>:greedy</a>, [<code>+?</code>:reluctant] <sup>[Link needed]</sup>, <a href=\"http://stackoverflow.com/q/4489551\"><code>++</code>:possessive</a></li>\n<li><a href=\"http://stackoverflow.com/a/17400486\"><code>?</code>:optional (zero-or-one)</a></li>\n<li>Min/max ranges (all inclusive): <a href=\"http://stackoverflow.com/a/17032985\"><code>{n,m}</code>:between n &amp; m</a>, <a href=\"http://stackoverflow.com/a/17120435\"><code>{n,}</code>:n-or-more</a>, <a href=\"http://stackoverflow.com/a/17829727\"><code>{n}</code>:exactly n</a></li>\n<li>More on the differences between greedy, possessive, and reluctant:\n<ul>\n<li>(Greedy vs non-greedy, non-greedy also known as \"lazy\", \"ungreedy\" or \"reluctant\")</li>\n<li><a href=\"http://stackoverflow.com/q/5319840\">Greedy vs. Reluctant vs. Possessive Quantifiers</a></li>\n<li><a href=\"http://stackoverflow.com/a/3075532\">In-depth discussion on the differences between greedy versus non-greedy</a></li>\n<li><a href=\"http://stackoverflow.com/q/18006093\">What's the difference between <code>{n}</code> and <code>{n}?</code></a></li>\n<li><a href=\"http://stackoverflow.com/q/1117467\">Can someone explain Possessive Quantifiers to me?</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>, <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a>, <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a></li>\n<li><a href=\"http://stackoverflow.com/q/5537513\">Emulating possessive quantifiers</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n<li>Non-stackoverflow references: From <a href=\"http://docs.oracle.com/javase/tutorial/essential/regex/quant.html\">Sun</a>, <a href=\"http://www.regular-expressions.info/possessive.html\">regular-expressions.info</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Character Classes</strong></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/9801630\">What is the difference between square brackets and parentheses?</a></li>\n<li><a href=\"http://stackoverflow.com/a/1553171\"><code>[...]</code></a>:any one character, <a href=\"http://stackoverflow.com/a/20802463\"><code>[^...]</code></a>:negated/any character but</li>\n<li><a href=\"http://stackoverflow.com/a/25950433\"><code>[^]</code> matches anything <em>including</em> newlines</a> <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a></li>\n<li><a href=\"http://stackoverflow.com/a/10738860\"><code>[\\w-[\\d]]</code> / <code>[a-z-[qz]]</code></a>: set subtraction <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a>, <a href=\"/questions/tagged/xml-schema\" class=\"post-tag\" title=\"show questions tagged 'xml-schema'\" rel=\"tag\">xml-schema</a>, <a href=\"/questions/tagged/xpath\" class=\"post-tag\" title=\"show questions tagged 'xpath'\" rel=\"tag\">xpath</a>, JGSoft</li>\n<li><a href=\"http://stackoverflow.com/a/15935168\"><code>[\\w&amp;&amp;[^\\d]]</code>: set intersection</a> <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a>, <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a> 1.9+</li>\n<li><a href=\"http://stackoverflow.com/a/12276342\"><code>[[:alpha:]]</code></a>:POSIX character classes</li>\n<li><a href=\"http://stackoverflow.com/q/21934168\">Why do <code>[^\\\\D2]</code>, <code>[^[^0-9]2]</code>, <code>[^2[^0-9]]</code> get different results in Java?</a> <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a></li>\n<li>Short-Hand:\n<ul>\n<li>Digit: <a href=\"http://stackoverflow.com/a/16621778\"><code>\\d</code>:digit</a>, <a href=\"http://stackoverflow.com/a/19011185\"><code>\\D</code>:non-digit</a></li>\n<li>Word character (Letter, digit, underscore): <a href=\"http://stackoverflow.com/a/11874899\"><code>\\w</code>:word character</a>, <a href=\"http://stackoverflow.com/a/19011185\"><code>\\W</code>:non-word character</a></li>\n<li>Whitespace: <a href=\"http://stackoverflow.com/a/21067350\"><code>\\s</code>:whitespace</a>, <a href=\"http://stackoverflow.com/a/19011185\"><code>\\S</code>:non-whitespace</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Escape Sequences</strong></p>\n\n<ul>\n<li>Horizontal whitespace: <a href=\"http://stackoverflow.com/a/4910093\"><code>\\h</code>:space-or-tab</a>, <a href=\"http://stackoverflow.com/a/17950891\"><code>\\t</code>:tab</a></li>\n<li>Newlines:\n<ul>\n<li><a href=\"http://stackoverflow.com/a/3451192\"><code>\\r</code>, <code>\\n</code>:carriage return and line feed</a></li>\n<li><a href=\"http://stackoverflow.com/a/18992691\"><code>\\R</code>:generic newline</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a></li>\n</ul></li>\n<li>Negated whitespace sequences: <a href=\"http://stackoverflow.com/q/26972688\"><code>\\H</code>:Non horizontal whitespace character, <code>\\V</code>:Non vertical whitespace character, <code>\\N</code>:Non line feed character</a> <a href=\"/questions/tagged/pcre\" class=\"post-tag\" title=\"show questions tagged 'pcre'\" rel=\"tag\">pcre</a> <a href=\"/questions/tagged/php5\" class=\"post-tag\" title=\"show questions tagged 'php5'\" rel=\"tag\">php5</a> <a href=\"/questions/tagged/java-8\" class=\"post-tag\" title=\"show questions tagged 'java-8'\" rel=\"tag\">java-8</a></li>\n<li>Other: <a href=\"http://stackoverflow.com/q/12290224\"><code>\\v</code>:vertical tab</a>, <a href=\"http://stackoverflow.com/a/4275788\"><code>\\e</code>:the escape character</a></li>\n</ul>\n\n<p><strong>Anchors</strong> </p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/22759143\"><code>^</code>:start of line/input</a>, <a href=\"http://stackoverflow.com/a/6664167\"><code>\\b</code>:word boundary, and <code>\\B</code>:non-word boundary</a>, <a href=\"http://stackoverflow.com/a/22759143\"><code>$</code>:end of line/input</a></li>\n<li><a href=\"http://stackoverflow.com/a/4020821\"><code>\\A</code>:start of input, <code>\\Z</code>:end of input</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>, <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a></li>\n<li><a href=\"http://stackoverflow.com/q/21971701\"><code>\\G</code>:start of match</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>, <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a></li>\n</ul>\n\n<p><em>(Also see \"Flavor-Specific Information &gt; Java &gt; The functions in <code>Matcher</code>\")</em></p>\n\n<p><strong>Groups</strong></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/21880127\"><code>(...)</code>:capture group</a>, <a href=\"http://stackoverflow.com/q/3512471\"><code>(?:)</code>:non-capture group</a>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/23062553\">Why is my repeating capturing group only capturing the last match?</a></li>\n</ul></li>\n<li><a href=\"http://stackoverflow.com/q/21880127\"><code>\\1</code>:backreference and capture-group reference, <code>$1</code>:capture group reference</a>\n<ul>\n<li><a href=\"http://stackoverflow.com/q/5984633\"><code>\\g&lt;1&gt;123</code>:How to follow a numbered capture group, such as <code>\\1</code>, with a number?:</a> <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a></li>\n</ul></li>\n<li><a href=\"http://stackoverflow.com/a/3812728\">What does a subpattern <code>(?i:regex)</code> mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10059673/named-regular-expression-group-pgroup-nameregexp-what-does-p-stand-for\">What does the 'P' in <code>(?P&lt;group_name&gt;regexp)</code> mean?</a></li>\n<li><a href=\"http://stackoverflow.com/q/14411818\"><code>(?&gt;)</code>:atomic group</a>, <a href=\"http://stackoverflow.com/a/5333645\"><code>(?|)</code>:branch reset</a>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/5378077\">Equivalent of branch reset in .NET/C#</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n</ul></li>\n<li>Named capture groups:\n<ul>\n<li><a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a>: <code>(?&lt;groupname&gt;regex)</code>: <a href=\"https://blogs.oracle.com/xuemingshen/entry/named_capturing_group_in_jdk7\">Overview</a> and <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#groupname\">naming rules</a> <em>(Non stackoverflow links)</em></li>\n<li>Other languages: <a href=\"http://stackoverflow.com/q/10059673\"><code>(?P&lt;groupname&gt;regex)</code></a> <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"http://stackoverflow.com/a/20355718\"><code>(?&lt;groupname&gt;regex)</code></a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a>, <a href=\"http://stackoverflow.com/a/288989\"><code>(?&lt;groupname&gt;regex)</code></a> <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>, <code>(?P&lt;groupname&gt;regex)</code> and <code>(?&lt;groupname&gt;regex)</code> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Lookarounds</strong></p>\n\n<ul>\n<li>Lookaheads: <a href=\"http://stackoverflow.com/a/1570916\"><code>(?=...)</code>:positive</a>, <a href=\"http://stackoverflow.com/a/12210820\"><code>(?!...)</code>:negative</a></li>\n<li>Lookbehinds: <a href=\"http://stackoverflow.com/a/11197672\"><code>(?&lt;=...)</code>:positive</a>, <a href=\"http://stackoverflow.com/a/11197672\"><code>(?&lt;!...)</code>:negative</a> (not supported by <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a>)</li>\n<li>Lookbehind limits in:\n<ul>\n<li><a href=\"http://stackoverflow.com/a/22821726\">Lookbehinds need to be constant-length</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>, <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a></li>\n<li><a href=\"http://stackoverflow.com/a/20994257\">Lookarounds of limited length <code>{0,n}</code></a> <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a></li>\n<li><a href=\"http://stackoverflow.com/a/20994257\">Variable length lookbehinds are allowed</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n</ul></li>\n<li>Lookbehind alternatives:\n<ul>\n<li><a href=\"http://stackoverflow.com/a/11640500\">Using <code>\\K</code></a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a> (<a href=\"http://stackoverflow.com/a/13543042\">Flavors that support <code>\\K</code></a>)</li>\n<li><a href=\"http://stackoverflow.com/a/11641102\">Alternative regex module for python</a> <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/11640862\">The hacky way</a></li>\n<li><a href=\"http://stackoverflow.com/q/641407\">Javascript negative lookbehind equivalent</a> <sup><a href=\"http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript\">External link</a></sup></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Modifiers</strong></p>\n\n<ul>\n<li>Most flavors: <a href=\"http://stackoverflow.com/a/9622110\"><code>g</code></a>, <a href=\"http://stackoverflow.com/a/12411066\"><code>i</code></a>, <a href=\"http://stackoverflow.com/a/2553239\"><code>u</code></a>, <a href=\"http://stackoverflow.com/a/5978385\"><code>U</code></a>, <a href=\"http://stackoverflow.com/a/2710390\"><code>x</code></a></li>\n<li><a href=\"http://stackoverflow.com/a/11395687\"><code>c</code></a> <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a> <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://stackoverflow.com/a/2468483\"><code>e</code></a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a> <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://stackoverflow.com/a/13334823\"><code>o</code></a> <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a></li>\n<li><a href=\"http://stackoverflow.com/a/4257912\"><code>m</code></a> <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a>, <a href=\"http://stackoverflow.com/a/22438123\"><code>m</code></a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a> <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a> <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a> <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a></li>\n<li><a href=\"http://stackoverflow.com/a/210027\"><code>S</code></a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"http://stackoverflow.com/a/13594017\"><code>s</code></a> (not supported by <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a> or <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a>), <a href=\"http://stackoverflow.com/a/1068308\">An <code>s</code> workaround</a> <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a></li>\n<li><a href=\"http://stackoverflow.com/q/16367404\">How to convert preg_replace e to preg_replace_callback?</a></li>\n<li><a href=\"http://stackoverflow.com/a/43636\">What are inline modifiers?</a></li>\n</ul>\n\n<p><strong>Other:</strong></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/22187948\"><code>|</code>:or operator</a>, <a href=\"http://stackoverflow.com/a/13594017\"><code>.</code>:any character</a>, <a href=\"http://stackoverflow.com/a/21929764\"><code>[.]</code>:literal dot character</a></li>\n<li><a href=\"http://stackoverflow.com/q/399078\">What special characters must be escaped?</a></li>\n<li>Control verbs (<a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> and <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>): <a href=\"http://stackoverflow.com/a/20008790\"><code>(*PRUNE)</code></a>, <a href=\"http://stackoverflow.com/a/20008790\"><code>(*SKIP)</code></a>, <a href=\"http://stackoverflow.com/a/20008790\"><code>(*FAIL)</code> and <code>(*F)</code></a>\n<ul>\n<li><a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> only: <a href=\"http://stackoverflow.com/a/7374702\"><code>(*BSR_ANYCRLF)</code></a></li>\n</ul></li>\n<li>Recursion (<a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> and <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a>): <a href=\"http://stackoverflow.com/q/8440911\"><code>(?R)</code></a>, <a href=\"http://stackoverflow.com/a/20569361\"><code>(?0)</code> and <code>(?1)</code></a>, <a href=\"http://stackoverflow.com/a/17845034\"><code>(?-1)</code></a>, <a href=\"http://stackoverflow.com/a/18151617\"><code>(?&amp;groupname)</code></a></li>\n</ul>\n\n<p><strong>Common Tasks</strong></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/413071\">Get a string between two curly braces: <code>{...}</code></a></li>\n<li><a href=\"http://stackoverflow.com/q/23589174\">Match (or replace) a pattern except in situations s1, s2, s3...</a></li>\n<li><a href=\"http://stackoverflow.com/q/5830387\">How to find all Youtube video ids in a string using a regex?</a></li>\n<li>Validation:\n<ul>\n<li>Internet: <a href=\"http://stackoverflow.com/q/201323\">email addresses</a>, <a href=\"http://stackoverflow.com/a/190405\">urls</a> (host/port: <a href=\"http://stackoverflow.com/a/22697740\">regex</a> and <a href=\"http://stackoverflow.com/a/24399003\">non-regex</a> alternatives), <a href=\"http://stackoverflow.com/a/3802238\">passwords</a></li>\n<li>Numeric: <a href=\"http://stackoverflow.com/a/4247184\">a number</a>, <a href=\"http://stackoverflow.com/a/22131040\">min-max ranges (such as 1-31)</a>, <a href=\"http://stackoverflow.com/q/123559\">phone numbers</a>, <a href=\"http://stackoverflow.com/q/15491894\">date</a></li>\n<li><em>Parsing HTML with regex: See \"General Information &gt; When not to use Regex\"</em></li>\n</ul></li>\n</ul>\n\n<p><strong>Advanced Regex-Fu</strong></p>\n\n<ul>\n<li>Strings and numbers:\n<ul>\n<li><a href=\"http://stackoverflow.com/q/406230\">Regular expression to match text that *doesn't* contain a word?</a></li>\n<li><a href=\"http://stackoverflow.com/q/3746487\">How does this PCRE pattern detect palindromes?</a></li>\n<li><a href=\"http://codegolf.stackexchange.com/q/19262/21830\">Match strings whose length is a fourth power</a></li>\n<li><a href=\"http://stackoverflow.com/q/3627681\">How does this regex find triangular numbers?</a></li>\n<li><a href=\"http://stackoverflow.com/q/2795065\">How to determine if a number is a prime with regex?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/28051651\">How to match the middle character in a string with regex?</a></li>\n</ul></li>\n<li>Other:\n<ul>\n<li><a href=\"http://stackoverflow.com/q/3644266\">How can we match a^n b^n with Java regex?</a></li>\n<li>Match nested brackets\n<ul>\n<li><a href=\"http://stackoverflow.com/a/17845034\">Using a recursive pattern</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a></li>\n<li><a href=\"http://stackoverflow.com/a/17004406\">Using balancing groups</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n</ul></li>\n<li><a href=\"http://stackoverflow.com/q/17039670\">\"vertical\" regex matching in an ASCII \"image\"</a></li>\n<li><a href=\"http://stackoverflow.com/q/19992984\">Verbs that act after backtracking and failure</a></li>\n<li><a href=\"http://codegolf.stackexchange.com/questions/tagged/regular-expression?sort=votes&amp;pageSize=50\">The most up-voted regex questions on Code Golf</a></li>\n<li><a href=\"http://stackoverflow.com/q/23001137\">Capturing Quantifiers and Quantifier Arithmetic</a></li>\n<li><a href=\"http://stackoverflow.com/q/1723182\">An impossible-to-match regular expression: <code>(?!a)a</code></a></li>\n<li><a href=\"http://stackoverflow.com/q/23589174\">Match/delete/replace <code>this</code> except in contexts A, B and C</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Flavor-Specific Information</strong></p>\n\n<p><em>(Except for those marked with <code>*</code>, this section contains non-Stack Overflow links.)</em></p>\n\n<ul>\n<li>Java\n<ul>\n<li>Official docs: <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\">Pattern JavaDoc</a>, <a href=\"http://docs.oracle.com/javase/tutorial/essential/regex/index.html\">Sun's Regular expressions tutorial</a></li>\n<li>The differences between functions in <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html\"><code>java.util.regex.Matcher</code></a>:\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#matches--\"><code>matches()</code></a>): The match must be anchored to both input-start and -end</li>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#find--\"><code>find()</code></a>): A match may be anywhere in the input string (substrings)</li>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#lookingAt--\"><code>lookingAt()</code></a>: The match must be anchored to input-start only</li>\n<li><em>(For anchors in general, see the section \"Anchors\")</em></li>\n</ul></li>\n<li>The only <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html\"><code>java.lang.String</code></a> functions that accept regular expressions: <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#matches-java.lang.String-\"><code>matches(s)</code></a>, <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceAll-java.lang.String-java.lang.String-\"><code>replaceAll(s,s)</code></a>, <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceFirst-java.lang.String-java.lang.String-\"><code>replaceFirst(s,s)</code></a>, <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\"><code>split(s)</code></a>, <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-\"><code>split(s,i)</code></a></li>\n<li>*<a href=\"http://stackoverflow.com/a/5771326\">An (opinionated and) detailed discussion of the disadvantages of and missing features in <code>java.util.regex</code></a></li>\n</ul></li>\n<li>Official documentation:\n<ul>\n<li>Boost regex engine: <a href=\"http://stackoverflow.com/a/5771326\">General syntax</a>, <a href=\"http://www.boost.org/doc/libs/1_55_0/libs/regex/doc/html/boost_regex/syntax.html\">Perl syntax</a> <em>(used by TextPad, Sublime Text, UltraEdit, ...???)</em></li>\n<li>JavaScript 1.5 <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Regular_Expressions\">general info</a> and <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp\">RegExp object</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/hs600312.aspx\">.NET</a> <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"https://dev.mysql.com/doc/refman/5.1/en/regexp.html\">MySQL</a> <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://docs.oracle.com/cd/B19306_01/appdev.102/b14251/adfns_regexp.htm\">Oracle</a> <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://perldoc.perl.org/perlre.html\">Perl5 version 18.2</a> </li>\n<li>PHP: <a href=\"http://www.php.net/manual/en/reference.pcre.pattern.syntax.php\">pattern syntax</a>, <a href=\"http://us2.php.net/preg_match\"><code>preg_match</code></a></li>\n<li>Python: <a href=\"https://docs.python.org/3/library/re.html\">Regular expression operations</a>, <a href=\"https://docs.python.org/3/library/re.html#search-vs-match\"><code>search</code> vs <code>match</code></a>, <a href=\"https://docs.python.org/2/howto/regex.html\">how-to</a></li>\n<li>Splunk: <a href=\"http://docs.splunk.com/Documentation/Splunk/6.0.2/Knowledge/AboutSplunkregularexpressions#Terminology_and_syntax\">regex terminology and syntax</a> and <a href=\"http://docs.splunk.com/Documentation/Splunk/6.0.2/SearchReference/Regex\">regex command</a></li>\n<li>Tcl: <a href=\"http://www.tcl.tk/man/tcl8.4/TclCmd/regexp.htm\">manpage</a>, <a href=\"http://wiki.tcl.tk/986\"><code>regexp</code> command</a></li>\n</ul></li>\n</ul>\n\n<p><strong>General information</strong></p>\n\n<p><em>(Links marked with <code>*</code> are non-Stack Overflow links.)</em></p>\n\n<ul>\n<li>Other general documentation resources: <a href=\"http://stackoverflow.com/q/4736\">Learning Regular Expressions</a>, *<a href=\"http://www.regular-expressions.info\">Regular-expressions.info</a>, *<a href=\"http://en.wikipedia.org/wiki/Regular_expression\">Wikipedia entry</a>, *<a href=\"http://www.rexegg.com/\">RexEgg</a>, <a href=\"http://www.dmoz.org/Computers/Programming/Languages/Regular_Expressions\">Open-Directory Project</a> </li>\n<li><a href=\"http://stackoverflow.com/q/3978438\">DFA versus NFA</a></li>\n<li>Books: Jeffrey Friedl's *<a href=\"http://regex.info/book.html\">Mastering Regular Expressions</a></li>\n<li>When to <em>not</em> use regular expressions:\n<ul>\n<li>*<a href=\"http://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/\">Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.</a> <em>(blog post written by <a href=\"http://stackoverflow.com/\">Stack Overflow</a>'s founder)</em></li>\n<li>Do not use regex to parse HTML:\n<ul>\n<li><a href=\"http://stackoverflow.com/q/590747\">Don't</a>. <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://stackoverflow.com/a/1732454\">Please, just don't</a></li>\n<li><a href=\"http://stackoverflow.com/a/4234491\">Well, maybe...if you're <em>really</em> determined</a> (other answers in this question are also good)</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Tools: Testers and Explainers</strong> </p>\n\n<p><em>(This section contains non-Stack Overflow links.)</em></p>\n\n<ul>\n<li><p>Online <i>(* includes replacement tester, + includes split tester)</i>: </p>\n\n<ul>\n<li><a href=\"http://debuggex.com\">Debuggex</a> (Also has a repository of useful regexes) <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a>, <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"/questions/tagged/pcre\" class=\"post-tag\" title=\"show questions tagged 'pcre'\" rel=\"tag\">pcre</a></li>\n<li>*<a href=\"http://regex101.com\">Regular Expressions 101</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"/questions/tagged/pcre\" class=\"post-tag\" title=\"show questions tagged 'pcre'\" rel=\"tag\">pcre</a>, <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a></li>\n<li><a href=\"http://regexpal.com\">Regex Pal</a>, *<a href=\"http://www.regular-expressions.info/javascriptexample.html\">regular-expressions.info</a> <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a></li>\n<li><a href=\"http://rubular.com/\">Rubular</a> <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a> <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://www.regexr.com/\">RegExr</a>  <img src=\"http://i.stack.imgur.com/ApTZX.jpg\" alt=\"\"> <a href=\"http://regexhero.net/tester\">Regex Hero</a> <a href=\"/questions/tagged/dotnet\" class=\"post-tag\" title=\"show questions tagged 'dotnet'\" rel=\"tag\">dotnet</a></li>\n<li>*+ <a href=\"http://regexstorm.net/tester\">regexstorm.net</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n<li>*RegexPlanet: <a href=\"http://www.regexplanet.com/advanced/java/index.html\">Java</a> <a href=\"/questions/tagged/java\" class=\"post-tag\" title=\"show questions tagged 'java'\" rel=\"tag\">java</a>, <a href=\"http://www.regexplanet.com/advanced/golang/index.html\">Go</a> <a href=\"/questions/tagged/go\" class=\"post-tag\" title=\"show questions tagged 'go'\" rel=\"tag\"><img src=\"//i.stack.imgur.com/sawHl.png\" height=\"16\" width=\"18\" alt=\"\" class=\"sponsor-tag-img\">go</a>, <a href=\"http://www.regexplanet.com/advanced/haskell/index.html\">Haskell</a> <a href=\"/questions/tagged/haskell\" class=\"post-tag\" title=\"show questions tagged 'haskell'\" rel=\"tag\">haskell</a>, <a href=\"http://www.regexplanet.com/advanced/javascript/index.html\">JavaScript</a> <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a>, <a href=\"http://www.regexplanet.com/advanced/dotnet/index.html\">.NET</a> <a href=\"/questions/tagged/dotnet\" class=\"post-tag\" title=\"show questions tagged 'dotnet'\" rel=\"tag\">dotnet</a>, <a href=\"http://www.regexplanet.com/advanced/perl/index.html\">Perl</a> <a href=\"/questions/tagged/perl\" class=\"post-tag\" title=\"show questions tagged 'perl'\" rel=\"tag\">perl</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> <a href=\"http://www.regexplanet.com/advanced/php/index.html\">PCRE</a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a>, <a href=\"http://www.regexplanet.com/advanced/python/index.html\">Python</a> <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged 'python'\" rel=\"tag\">python</a>, <a href=\"http://www.regexplanet.com/advanced/ruby/index.html\">Ruby</a> <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a>, <a href=\"http://www.regexplanet.com/advanced/xregexp/index.html\">XRegExp</a> <a href=\"/questions/tagged/xregexp\" class=\"post-tag\" title=\"show questions tagged 'xregexp'\" rel=\"tag\">xregexp</a></li>\n<li><a href=\"http://www.freeformatter.com/regex-tester.html\"><code>freeformatter.com</code></a> <a href=\"/questions/tagged/xregexp\" class=\"post-tag\" title=\"show questions tagged 'xregexp'\" rel=\"tag\">xregexp</a></li>\n<li>*+<a href=\"http://regex.larsolavtorvik.com/\"><code>regex.larsolavtorvik.com</code></a> <a href=\"/questions/tagged/php\" class=\"post-tag\" title=\"show questions tagged 'php'\" rel=\"tag\">php</a> PCRE and POSIX, <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a></li>\n<li><a href=\"http://refiddle.com/\">Refiddle</a> <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a> <a href=\"/questions/tagged/ruby\" class=\"post-tag\" title=\"show questions tagged 'ruby'\" rel=\"tag\">ruby</a> <a href=\"/questions/tagged/.net\" class=\"post-tag\" title=\"show questions tagged '.net'\" rel=\"tag\">.net</a></li>\n</ul></li>\n<li><p>Offline: </p>\n\n<ul>\n<li>Microsoft Windows: <a href=\"http://regexbuddy.com\">RegexBuddy</a> (analysis), <a href=\"http://regexmagic.com\">RegexMagic</a> (creation), <a href=\"http://www.ultrapico.com/expresso.htm\">Expresso</a> (analysis, creation, free)</li>\n</ul></li>\n</ul>\n\n<p></p>\n    "},{"t":"How to add http:// if it's not exists in the URL?","l":"http://stackoverflow.com/questions/2762061/how-to-add-http-if-its-not-exists-in-the-url","q":"\n\n<p>How to add http:// to the url if there isn't a <code>http://</code> or <code>https://</code> or <code>ftp://</code> ?</p>\n\n<p>Example:</p>\n\n<pre><code>addhttp(\"google.com\"); // http://google.com\naddhttp(\"www.google.com\"); // http://www.google.com\naddhttp(\"google.com\"); // http://google.com\naddhttp(\"ftp://google.com\"); // ftp://google.com\naddhttp(\"https://google.com\"); // https://google.com\naddhttp(\"http://google.com\"); // http://google.com\naddhttp(\"rubbish\"); // http://rubbish\n</code></pre>\n    ","a":"\n<p>A modified version of @nickf code:</p>\n\n<pre><code>function addhttp($url) {\n    if (!preg_match(\"~^(?:f|ht)tps?://~i\", $url)) {\n        $url = \"http://\" . $url;\n    }\n    return $url;\n}\n</code></pre>\n\n<p>Recognizes <code>ftp://</code>, <code>ftps://</code>, <code>http://</code> and <code>https://</code> in a case insensitive way.</p>\n    "},{"t":"How can I validate a string to only allow alphanumeric characters in it?","l":"http://stackoverflow.com/questions/1046740/how-can-i-validate-a-string-to-only-allow-alphanumeric-characters-in-it","q":"\n\n<p>How can I validate a string using Regular Expressions to only allow alphanumeric characters in it?</p>\n\n<p>(I don't want to allow for any spaces either).</p>\n    ","a":"\n<p>Use the expression:</p>\n\n<pre><code>^[a-zA-Z0-9]*$\n</code></pre>\n\n<p>ie:</p>\n\n<pre><code>Regex r = new Regex(\"^[a-zA-Z0-9]*$\");\nif (r.IsMatch(SomeString)) {\n  ...\n}\n</code></pre>\n    "},{"t":"How to extract numbers from a string and get an array of ints?","l":"http://stackoverflow.com/questions/2367381/how-to-extract-numbers-from-a-string-and-get-an-array-of-ints","q":"\n\n<p>I have a String variable (basically an English sentence with an unspecified number of numbers) and I'd like to extract all the numbers into an array of integers. I was wondering whether there was a quick solution with regular expressions?</p>\n\n<hr>\n\n<p>I used Sean's solution and changed it slightly:</p>\n\n<pre><code>LinkedList&lt;String&gt; numbers = new LinkedList&lt;String&gt;();\n\nPattern p = Pattern.compile(\"\\\\d+\");\nMatcher m = p.matcher(line); \nwhile (m.find()) {\n   numbers.add(m.group());\n}\n</code></pre>\n    ","a":"\n<pre><code>Pattern p = Pattern.compile(\"-?\\\\d+\");\nMatcher m = p.matcher(\"There are more than -2 and less than 12 numbers here\");\nwhile (m.find()) {\n  System.out.println(m.group());\n}\n</code></pre>\n\n<p>... prints -2 and 12.</p>\n    "},{"t":"java.util.regex - importance of Pattern.compile()?","l":"http://stackoverflow.com/questions/1720191/java-util-regex-importance-of-pattern-compile","q":"\n\n<p>What is the importance of <code>Pattern.compile()</code> method?<br>\nWhy do I need to compile the regex string before getting the <code>Matcher</code> object?</p>\n\n<p>for example :</p>\n\n<pre><code>String regex = \"((\\\\S+)\\\\s*some\\\\s*\";\n\nPattern pattern = Pattern.compile(regex); // why i need to compile\nMatcher matcher = pattern.matcher(text); //\n</code></pre>\n    ","a":"\n<p>The <code>compile()</code> method is always called at some point; it's the only way to create a Pattern object.  So the question is really, why should you call it <strong>explicitly</strong>?  One reason is that you need a reference to the Matcher object so you can use its methods, like <code>group(int)</code> to retrieve the contents of capturing groups.  The only way to get ahold of the Matcher object is through the Pattern object's <code>matcher()</code> method, and the only way to get ahold of the Pattern object is through the <code>compile()</code> method.  Then there's the <code>find()</code> method which, unlike <code>matches()</code>, is not duplicated in the String or Pattern classes. </p>\n\n<p>The other reason is to avoid creating the same Pattern object over and over.  Every time you use one of the regex-powered methods in String (or the static <code>matches()</code> method in Pattern), it creates a new Pattern and a new Matcher.  So this code snippet:</p>\n\n<pre><code>for (String s : myStringList) {\n    if ( s.matches(\"\\\\d+\") ) {\n        doSomething();\n    }\n}\n</code></pre>\n\n<p>...is exactly equivalent to this:</p>\n\n<pre><code>for (String s : myStringList) {\n    if ( Pattern.compile(\"\\\\d+\").matcher(s).matches() ) {\n        doSomething();\n    }\n}\n</code></pre>\n\n<p>Obviously, that's doing a lot of unnecessary work.  In fact, it can easily take longer to compile the regex and instantiate the Pattern object, than it does to perform an actual match.  So it usually makes sense to pull that step out of the loop.  You can create the Matcher ahead of time as well, though they're not nearly so expensive:</p>\n\n<pre><code>Pattern p = Pattern.compile(\"\\\\d+\");\nMatcher m = p.matcher(\"\");\nfor (String s : myStringList) {\n    if ( m.reset(s).matches() ) {\n        doSomething();\n    }\n}\n</code></pre>\n\n<p>If you're familiar with .NET regexes, you may be wondering if Java's <code>compile()</code> method is related to .NET's <code>RegexOptions.Compiled</code> modifier; the answer is no.  Java's <code>Pattern.compile()</code> method is merely equivalent to .NET's Regex constructor.  When you specify the <code>Compiled</code> option:</p>\n\n<pre><code>Regex r = new Regex(@\"\\d+\", RegexOptions.Compiled); \n</code></pre>\n\n<p>...it compiles the regex directly to CIL byte code, allowing it to perform much faster, but at a significant cost in up-front processing and memory use--think of it as steroids for regexes.  Java has no equivalent; there's no difference between a Pattern that's created behind the scenes by <code>String#matches(String)</code> and one you create explicitly with <code>Pattern#compile(String)</code>.</p>\n\n<p>(EDIT: I originally said that all .NET Regex objects are cached, which is incorrect.  Since .NET 2.0, automatic caching occurs only with static methods like <code>Regex.Matches()</code>, not when you call a Regex constructor directly. <a href=\"http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.aspx\">ref</a>)</p>\n    "},{"t":"How do I remove carriage returns with Ruby?","l":"http://stackoverflow.com/questions/287713/how-do-i-remove-carriage-returns-with-ruby","q":"\n\n<p>I thought this code would work, but the regular expression doesn't ever match the \\r\\n. I have viewed the data I am reading in a hex editor and verified there really is a hex D and hex A pattern in the file.</p>\n\n<p>I have also tried the regular expressions /\\xD\\xA/m and /\\x0D\\x0A/m but they also didn't match.</p>\n\n<p>This is my code right now:</p>\n\n<pre><code>   lines2 = lines.gsub( /\\r\\n/m, \"\\n\" )\n   if ( lines == lines2 )\n       print \"still the same\\n\"\n   else\n       print \"made the change\\n\"\n   end\n</code></pre>\n\n<p>In addition to alternatives, it would be nice to know what I'm doing wrong (to facilitate some learning on my part).  :)</p>\n    ","a":"\n<p>What do you get when you do <code>puts lines</code>? That will give you a clue.</p>\n\n<p>By default <code>File.open</code> opens the file in text mode, so your <code>\\r\\n</code> characters will be automatically converted to <code>\\n</code>. Maybe that's the reason <code>lines</code> are always equal to <code>lines2</code>. To prevent Ruby from parsing the line ends use the <code>rb</code> mode:</p>\n\n<pre>C:\\&gt; copy con lala.txt\na\nfile\nwith\nmany\nlines\n^Z\n\nC:\\&gt; irb\nirb(main):001:0&gt; text = File.open('lala.txt').read\n=&gt; \"a\\nfile\\nwith\\nmany\\nlines\\n\"\nirb(main):002:0&gt; bin = File.open('lala.txt', 'rb').read\n=&gt; \"a\\r\\nfile\\r\\nwith\\r\\nmany\\r\\nlines\\r\\n\"\nirb(main):003:0&gt;\n</pre>\n\n<p>But from your question and code I see you simply need to open the file with the default modifier. You don't need any conversion and may use the shorter <code>File.read</code>.</p>\n    "},{"t":"Using grep to match multiple strings","l":"http://stackoverflow.com/questions/4487328/using-grep-to-match-multiple-strings","q":"\n\n<p>I am trying to use grep to match 2 different strings. I am doing this</p>\n\n<pre><code>grep 'string1\\|string2' filename\n</code></pre>\n\n<p>But that's matching lines that contains string1 OR string2.</p>\n\n<p>How do I match lines that contains both strings?</p>\n    ","a":"\n<p>You can use <code>grep 'string1' filename | grep 'string2'</code></p>\n\n<p>Or, <code>grep 'string1.*string2\\|string2.*string1' filename</code></p>\n    "},{"t":"Can I use a Regex in an XPath expression?","l":"http://stackoverflow.com/questions/405060/can-i-use-a-regex-in-an-xpath-expression","q":"\n\n<p>Something like <code>.//div[@id='foo\\d+]</code> to capture div tags with <code>id='foo123'</code>.</p>\n\n<p>I'm using .NET, if that matters.</p>\n    ","a":"\n<p>As other answers have noted, <strong><a href=\"http://www.w3.org/TR/xpath\">XPath 1.0</a> does not support regular expressions</strong>.</p>\n\n<p><strong>Nonetheless, you have the following options</strong>:</p>\n\n<ul>\n<li><strong>Use an XPath 1.0 expression</strong> (note the <a href=\"http://www.w3.org/TR/xpath#function-starts-with\"><strong><code>starts-with()</code></strong></a> and <a href=\"http://www.w3.org/TR/xpath#function-translate\"><strong><code>translate()</code></strong></a> functions) like this:</li>\n</ul>\n\n<pre>.//div\n   [starts-with(@id, 'foo') \n  and \n   'foo' = translate(@id, '0123456789', '')\n  and\n   string-length(@id) &gt; 3   \n   ]\n</pre>\n\n<ul>\n<li><p><strong>Use <a href=\"http://www.codeplex.com/MVPXML/Wiki/View.aspx?title=EXSLT.NET&amp;referringTitle=Home\">EXSLT.NET</a></strong> -- there is a way to <a href=\"http://msdn.microsoft.com/en-us/library/ms950808.aspx\"><strong>use its functions directly in XPath expressions without having to use XSLT</strong></a>. The EXSLT extension functions that allow RegEx-es to be used are: <a href=\"http://exslt.org/regexp/functions/match/index.html\"><strong><code>regexp:match()</code></strong></a>, <a href=\"http://exslt.org/regexp/functions/replace/index.html\"><strong><code>regexp:replace()</code></strong></a> and <a href=\"http://exslt.org/regexp/functions/test/index.html\"><strong><code>regexp:test()</code></strong></a></p></li>\n<li><p><strong>Use</strong> <a href=\"http://www.w3.org/TR/xpath20/\"><strong>XPath 2.0</strong></a>/<a href=\"http://www.w3.org/TR/xslt20/\">XSLT 2.0</a> and its <a href=\"http://www.w3.org/TR/xpath-functions/#regex-syntax\"><strong>inbuilt support for regular expressions</strong></a> (the functions <a href=\"http://www.w3.org/TR/xpath-functions/#func-matches\"><strong>matches()</strong></a>, <a href=\"http://www.w3.org/TR/xpath-functions/#func-replace\"><strong>replace()</strong></a> and <a href=\"http://www.w3.org/TR/xpath-functions/#func-tokenize\"><strong>tokenize()</strong></a>)</p></li>\n</ul>\n    "},{"t":"Fastest method to escape HTML tags as HTML entities?","l":"http://stackoverflow.com/questions/5499078/fastest-method-to-escape-html-tags-as-html-entities","q":"\n\n<p>I'm writing a Chrome extension that involves doing a <strong>lot</strong> of the following job: sanitizing strings that <em>might</em> contain HTML tags, by converting <code>&lt;</code>, <code>&gt;</code> and <code>&amp;</code> to <code>&amp;lt;</code>, <code>&amp;gt;</code> and <code>&amp;amp;</code>, respectively.</p>\n\n<p>(In other words, the same as PHP's <code>htmlspecialchars(str, ENT_NOQUOTES)</code> – I don't think there's any real need to convert double-quote characters.)</p>\n\n<p>This is the fastest function I have found so far:</p>\n\n<pre><code>function safe_tags(str) {\n    return str.replace(/&amp;/g,'&amp;amp;').replace(/&lt;/g,'&amp;lt;').replace(/&gt;/g,'&amp;gt;') ;\n}\n</code></pre>\n\n<p>But there's still a big lag when I have to run a few thousand strings through it in one go. </p>\n\n<p>Can anyone improve on this? It's mostly for strings between 10 and 150 characters, if that makes a difference. </p>\n\n<p>(One idea I had was not to bother encoding the greater-than sign – would there be any real danger with that?)</p>\n    ","a":"\n<p>You could try passing a callback function to perform the replacement:</p>\n\n<pre><code>var tagsToReplace = {\n    '&amp;': '&amp;amp;',\n    '&lt;': '&amp;lt;',\n    '&gt;': '&amp;gt;'\n};\n\nfunction replaceTag(tag) {\n    return tagsToReplace[tag] || tag;\n}\n\nfunction safe_tags_replace(str) {\n    return str.replace(/[&amp;&lt;&gt;]/g, replaceTag);\n}\n</code></pre>\n\n<p>Here is a performance test: <a href=\"http://jsperf.com/encode-html-entities\">http://jsperf.com/encode-html-entities</a> to compare with calling the <code>replace</code> function repeatedly, and using the DOM method proposed by Dmitrij.</p>\n\n<p>Your way seems to be faster...</p>\n\n<p>Why do you need it, though?</p>\n    "},{"t":"How to get Vim to highlight non-ascii characters?","l":"http://stackoverflow.com/questions/16987362/how-to-get-vim-to-highlight-non-ascii-characters","q":"\n\n<p>I'm trying to get Vim to highlight non-ASCII characters. Is there an available setting, regex search pattern, or plugin to do so?</p>\n    ","a":"\n<p>Using range in a <code>[]</code> character class in your search, you ought to be able to <em>exclude</em> the ASCII hexadecimal character range, therefore highlighting (assuming you have <code>hlsearch</code> enabled) all other characters lying <em>outside</em> the ASCII range:</p>\n\n<pre><code>/[^\\x00-\\x7F]\n</code></pre>\n\n<p>This will do a <em>negative</em> match (via <code>[^]</code>) for characters between ASCII <code>0x00</code> and ASCII <code>0x7F</code> (0-127), and appears to work in my simple test. For extended ASCII, of course, extend the range up to <code>\\xFF</code> instead of <code>\\x7F</code> using <code>/[^\\x00-\\xFF]</code>.</p>\n\n<p>You may also express it in decimal via <code>\\d</code>:</p>\n\n<pre><code>/[^\\d0-\\d127]\n</code></pre>\n\n<p>If you need something more specific, like exclusion of non-printable characters, you will need to add those ranges into the character class <code>[]</code>.</p>\n    "},{"t":"JavaScript - string regex backreferences","l":"http://stackoverflow.com/questions/2447915/javascript-string-regex-backreferences","q":"\n\n<p>You can backreference like this in JavaScript:</p>\n\n<pre><code>var str = \"123 $test 123\";\nstr = str.replace(/(\\$)([a-z]+)/gi, \"$2\");\n</code></pre>\n\n<p>This would (quite silly) replace \"$test\" with \"test\". But imagine I'd like to pass the resulting string of $2 into a function, which returns another value. I tried doing this, but instead of getting the string \"test\", I get \"$2\". Is there a way to achieve this?</p>\n\n<pre><code>// Instead of getting \"$2\" passed into somefunc, I want \"test\"\n// (i.e. the result of the regex)\nstr = str.replace(/(\\$)([a-z]+)/gi, somefunc(\"$2\"));\n</code></pre>\n    ","a":"\n<p>Like this:</p>\n\n<pre><code>str.replace(regex, function(match, $1, $2, offset, original) { return someFunc($2); })\n</code></pre>\n    "},{"t":"Fastest way to check a string contain another substring in Javascript?","l":"http://stackoverflow.com/questions/5296268/fastest-way-to-check-a-string-contain-another-substring-in-javascript","q":"\n\n<p>I'm working with a performance issue on Javascript. So I just want to ask: what is the fastest way to check whether a string contain another substring (I just need the boolean value)? Could you please suggest your idea and sample snippet code?! Thank you so much!</p>\n    ","a":"\n<p>You have two possibilites:</p>\n\n<ol>\n<li><p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Regular_Expressions\">Regular expression</a>:</p>\n\n<pre><code>(new RegExp('word')).test(str)\n// or\n/word/.test(str)\n</code></pre></li>\n<li><p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/indexOf\"><code>indexOf</code></a>:</p>\n\n<pre><code>str.indexOf('word') !== -1\n</code></pre></li>\n</ol>\n\n<p><del><a href=\"http://jsperf.com/substring-test\">Regular expressions seem to be faster</a> (at least in Chrome 10).</del></p>\n\n<p><a href=\"http://jsperf.com/substring-test\"><strong>Performance test - short haystack</strong></a><br>\n<a href=\"http://jsperf.com/substring-test/3\"><strong>Performance test - long haystack</strong></a></p>\n\n<p><strong>Update:</strong></p>\n\n<p>It cannot be said with certainty which method is faster. The differences between the browsers is enormous. While in Chrome 10 <code>indexOf</code> seems to be faster, in Safari 5, <code>indexOf</code> is clearly slower than any other method.</p>\n\n<p>You have to see and try for your self. It depends on your needs. For example a <em>case-insensitive</em> search is way faster with regular expressions.</p>\n    "},{"t":"how to make Regular expression into non-greedy?","l":"http://stackoverflow.com/questions/2824302/how-to-make-regular-expression-into-non-greedy","q":"\n\n<p>I have made a Work with JQ. My Work is a string width a special character block begin and end of string. I want take the text in that special characters, i used regular expression for find in string, but how to make JQ find multi result when have two special character or more.</p>\n\n<p>My html here;</p>\n\n<pre><code>&lt;div id=\"container\"&gt;\n    &lt;div id=\"textcontainer\"&gt;\n     Cuộc chiến pháp lý giữa [|cơ thử|nghiệm|] thị trường [|test2|đây là test lần 2|] chứng khoán [|Mỹ|day la nuoc my|] và ngân hàng đầu tư quyền lực nhất Phố Wall mới chỉ bắt đầu.\n &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>and my JQ</p>\n\n<pre><code>$(document).ready(function() {\n\n var takedata = $(\"#textcontainer\").text();\n var test = 'abcd adddb';\n var filterdata = takedata.match(/(\\[.+\\])/);\n\n alert(filterdata); \n\n//end write js \n});\n</code></pre>\n\n<p>my result is: <strong>[|cơ thử|nghiệm|] thị trường [|test2|đây là test lần 2|] chứng khoán [|Mỹ|day la nuoc my|]</strong> . but this is'nt the result i want :(. How to get [text] for times 1 and [demo] for times 2 ?. pls help me !. thankyou :)</p>\n\n<hr>\n\n<p>hi everyone!\ni've just done my work after searching info on internet ^^. i make code like this:</p>\n\n<pre><code>var filterdata = takedata.match(/(\\[.*?\\])/g);\n</code></pre>\n\n<ul>\n<li>my result is : <strong>[|cơ thử|nghiệm|],[|test2|đây là test lần 2|]</strong>\nthis is right!. but i don't realy understand this. Can you answer my why?</li>\n</ul>\n    ","a":"\n<p>The non-greedy regex modifiers are like their greedy counter-parts but with a <code>?</code> immediately following them:</p>\n\n<pre><code>*  - zero or more\n*? - zero or more (non-greedy)\n+  - one or more\n+? - one or more (non-greedy)\n?  - zero or one\n?? - zero or one (non-greedy)\n</code></pre>\n    "},{"t":"Whitespace Matching Regex - Java","l":"http://stackoverflow.com/questions/4731055/whitespace-matching-regex-java","q":"\n\n<p>The Java API for <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\">regular expressions</a> states that <code>\\s</code> will match whitespace. So the regex <code>\\\\s\\\\s</code> should match two spaces.</p>\n\n<pre><code>Pattern whitespace = Pattern.compile(\"\\\\s\\\\s\");\nmatcher = whitespace.matcher(modLine);\nwhile (matcher.find()) matcher.replaceAll(\" \");\n</code></pre>\n\n<p>The aim of this is to replace all instances of two consecutive whitespace with a single space. However this does not actually work.</p>\n\n<p>Am I having a grave misunderstanding of regexes or the term \"whitespace\"?</p>\n    ","a":"\n<p>Yeah, you need to grab the result of matcher.replaceAll():</p>\n\n<pre><code>String result = matcher.replaceAll(\" \");\nSystem.out.println(result);\n</code></pre>\n    "},{"t":"How do I strip non alphanumeric characters from a string and keep spaces?","l":"http://stackoverflow.com/questions/6104240/how-do-i-strip-non-alphanumeric-characters-from-a-string-and-keep-spaces","q":"\n\n<p>I want to create a regex that removes all non-alphanumber characters but keeps spaces. This is to clean search input before it hits the db. Here's what I have so far:</p>\n\n<pre><code>@search_query = @search_query.gsub(/[^0-9a-z]/i, '')\n</code></pre>\n\n<p>Problem here is it removes all the spaces. Solutions on how to retain spaces?</p>\n    ","a":"\n<p>Add spaces to the negated character group:</p>\n\n<pre><code>@search_query = @search_query.gsub(/[^0-9a-z ]/i, '')\n</code></pre>\n    "},{"t":"Is Java Regex Thread Safe?","l":"http://stackoverflow.com/questions/1360113/is-java-regex-thread-safe","q":"\n\n<p>I have a function that uses Pattern.compile and a Matcher to search a list of strings for a pattern.  This function is used in multiple threads.  Each thread will have a unique pattern passed to the Pattern.compile when the thread is created.  The number of threads and patterns are dynamic, meaning that I can add more patterns and threads during configuration.</p>\n\n<p>Do I need to put a \"synchronize\" on this function if it uses regex?  Is regex in java thread safe?</p>\n\n<p>TIA</p>\n    ","a":"\n<p><strong>Yes</strong>, from the Java API documentation for the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\">Pattern class</a></p>\n\n<blockquote>\nInstances of this (Pattern) class are immutable and are safe for use by multiple concurrent threads. Instances of the Matcher class are not safe for such use.\n</blockquote>\n\n<p>If you are looking at performance centric code, attempt to reset the Matcher instance using the reset() method, instead of creating new instances. This would reset the state of the Matcher instance, making it usable for the next regex operation. In fact, it is the state maintained in the Matcher instance that is responsible for it to be unsafe for concurrent access.</p>\n    "},{"t":"Regex to get string between curly braces “{I want what's between the curly braces}”","l":"http://stackoverflow.com/questions/413071/regex-to-get-string-between-curly-braces-i-want-whats-between-the-curly-brace","q":"\n\n<p>Unfortunately, despite having tried to learn regex at least one time a year for as many years as I can remember, I always forget as I use them so infrequently. This year my new year's resolution is to not try and learn regex again - <em>So this year to save me from tears I'll give it to Stack Overflow</em>. (Last Christmas remix).</p>\n\n<p>I want to pass in a string in this format <code>{getThis}</code>, and be returned the string <code>getThis</code>. Could anyone be of assistance in helping to stick to my new year's resolution?</p>\n\n<hr>\n\n<p>Related questions on Stack Overflow:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/346567/how-can-one-turn-regular-quotes-i-e-into-latex-tex-quotes-i-e\">How can one turn regular quotes (i.e. ', \") into LaTeX/TeX quotes (i.e. `', ``'')</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1237/regex-to-pull-out-a-section-a-substing-from-a-string-between-two-tags\">Regex: To pull out a sub-string between two tags in a string</a></li>\n<li><a href=\"http://stackoverflow.com/questions/328387/regex-to-replace-all-n-in-a-string-but-no-those-inside-code-code-tag\">Regex to replace all \\n in a String, but no those inside [code] [/code] tag</a></li>\n</ul>\n    ","a":"\n<p>If your string will always be of that format, a regex is overkill:</p>\n\n<pre><code>&gt;&gt;&gt; var g='{getThis}';\n&gt;&gt;&gt; g.substring(1,g.length-1)\n\"getThis\"\n</code></pre>\n    "},{"t":"split string only on first instance of specified character","l":"http://stackoverflow.com/questions/4607745/split-string-only-on-first-instance-of-specified-character","q":"\n\n<p>In my code I split a string based on <code>_</code> and grab the second item in the array.</p>\n\n<pre><code>var element = $(this).attr('class');\nvar field = element.split('_')[1];\n</code></pre>\n\n<p>Takes <code>good_luck</code> and provides me with <code>luck</code>. Works great!</p>\n\n<p>But, now I have a class that looks like <code>good_luck_buddy</code>. How do I get my javascript to ignore the second <code>_</code> and give me <code>luck_buddy</code>?</p>\n\n<p>I found this <code>var field = element.split(new char [] {'_'}, 2);</code> in a c# stackoverflow answer but it doesn't work. I tried it over at jsFiddle...</p>\n    ","a":"\n<p>Use the greedy operator (?)</p>\n\n<pre><code>\"good_luck_buddy\".split(/_(.+)?/)[1]\n\"luck_buddy\"\n</code></pre>\n    "},{"t":"[A-z0-9]+ regexp matching square brackets [duplicate]","l":"http://stackoverflow.com/questions/28449927/a-z0-9-regexp-matching-square-brackets","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/4923380/difference-between-regex-a-z-and-a-za-z\" dir=\"ltr\">Difference between regex [A-z] and [a-zA-Z]</a>\n                <span class=\"question-originals-answer-count\">\n                    6 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I'm struggling with the following regexp</p>\n\n<pre><code>[A-z0-9]+\n</code></pre>\n\n<p>If tested against this string:</p>\n\n<pre><code>||a919238[.--a]asd|\n</code></pre>\n\n<p>it returns <code>a919238[</code>, including the square bracket.. I tried to input <a href=\"https://www.regex101.com/r/lE6cR8/2\">my test case on regex101</a> to understand what's wrong, but the site regex explanation is not helping, probably I'm not able to see my mistake.</p>\n\n<p>Why is the square bracket included in the result?</p>\n    ","a":"\n<p>Because </p>\n\n<pre><code>[A-z0-9]+ \n ↑ ↑ \n</code></pre>\n\n<p>is from <code>A</code> to <code>z</code>, see the ASCII table, <code>]</code> appears between the two characters:</p>\n\n<p><img src=\"http://i.stack.imgur.com/zgRxj.png\" alt=\"enter image description here\"></p>\n    "},{"t":"Regular expression to limit number of characters to 10","l":"http://stackoverflow.com/questions/1649435/regular-expression-to-limit-number-of-characters-to-10","q":"\n\n<p>I am trying to write a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> that will only allow lowercase letters and up to 10 characters. What I have so far looks like this:</p>\n\n<pre><code>pattern: /^[a-z]{0,10}+$/ \n</code></pre>\n\n<p>This does not work or compile. I had a working one that would just allow lowercase letters which was this:</p>\n\n<pre><code>pattern: /^[a-z]+$/ \n</code></pre>\n\n<p>But I need to limit the number of characters to 10.</p>\n    ","a":"\n<p>You can use curly braces to control the number of occurrences. For example, this means 0 to 10:</p>\n\n<pre><code>/^[a-z]{0,10}$/\n</code></pre>\n\n<p>The options are:</p>\n\n<ul>\n<li>{3} Exactly 3 occurrences;</li>\n<li>{6,} At least 6 occurrences;</li>\n<li>{2,5} 2 to 5 occurrences.</li>\n</ul>\n\n<p>See the <a href=\"http://www.regular-expressions.info/reference.html\">regular expression reference</a>.</p>\n\n<p>Your expression had a + after the closing curly brace, hence the error.</p>\n    "},{"t":"Using RegEX To Prefix And Append In Notepad++","l":"http://stackoverflow.com/questions/283608/using-regex-to-prefix-and-append-in-notepad","q":"\n\n<p>I have quite a large list of words in a txt file and I'm trying to do a regex find and replace in Notepad++. I need to add a string before each line and after each line.. So that:</p>\n\n<pre>wordone\nwordtwo\nwordthree\n</pre>\n\n<p>become</p>\n\n<pre>able:\"wordone\"\nable:\"wordtwo\"\nable:\"wordthree\"\n</pre>\n\n<p>How can I do this?</p>\n    ","a":"\n<p>Assuming alphanumeric words, you can use:</p>\n\n<pre><code>Search  = ^([A-Za-z0-9]+)$\nReplace = able:\"\\1\"\n</code></pre>\n\n<p>Or, if you just want to highlight the lines and use \"Replace All\" &amp; \"In Selection\" (with the same replace):</p>\n\n<pre><code>Search = ^(.+)$\n</code></pre>\n\n<p><code>^</code> points to the start of the line.<br>\n<code>$</code> points to the end of the line.</p>\n\n<p><code>\\1</code> will be the source match within the parentheses.</p>\n    "},{"t":"What are regular expression Balancing Groups?","l":"http://stackoverflow.com/questions/17003799/what-are-regular-expression-balancing-groups","q":"\n\n<p>I was just reading a question about how to get data inside double curly braces (<a href=\"http://stackoverflow.com/questions/17003667/match-text-surrounded-by-and\">this question</a>), and then someone brought up balancing groups. I'm still not quite sure what they are and how to use them.</p>\n\n<p>I read through <a href=\"http://msdn.microsoft.com/en-us/library/bs2twtah.aspx#balancing_group_definition\">Balancing Group Definition</a>, but the explanation is hard to follow, and I'm still quite confused on the questions that I mentioned.</p>\n\n<p>Could someone simply explain what balancing groups are and how they are useful?</p>\n    ","a":"\n<p>As far as I know, balancing groups are unique to .NET's regex flavor.</p>\n\n<h2>Aside: Repeated Groups</h2>\n\n<p>First, you need to know that .NET is (again, as far as I know) the only regex flavor that lets you access multiple captures of a single capturing group (not in backreferences but after the match has completed).</p>\n\n<p>To illustrate this with an example, consider the pattern</p>\n\n<pre><code>(.)+\n</code></pre>\n\n<p>and the string <code>\"abcd\"</code>.</p>\n\n<p>in all other regex flavors, capturing group <code>1</code> will simply yield one result: <code>d</code> (note, the full match will of course be <code>abcd</code> as expected). This is because every new use of the capturing group overwrites the previous capture.</p>\n\n<p>.NET on the other hand remembers them all. And it does so in a stack. After matching the above regex like</p>\n\n<pre><code>Match m = new Regex(@\"(.)+\").Match(\"abcd\");\n</code></pre>\n\n<p>you will find that</p>\n\n<pre><code>m.Groups[1].Captures\n</code></pre>\n\n<p>Is a <code>CaptureCollection</code> whose elements correspond to the four captures</p>\n\n<pre><code>0: \"a\"\n1: \"b\"\n2: \"c\"\n3: \"d\"\n</code></pre>\n\n<p>where the number is the index into the <code>CaptureCollection</code>. So basically every time the group is used again, a new capture is pushed onto the stack.</p>\n\n<p>It gets more interesting if we are using named capturing groups. Because .NET allows repeated use of the same name we could write a regex like</p>\n\n<pre><code>(?&lt;word&gt;\\w+)\\W+(?&lt;word&gt;\\w+)\n</code></pre>\n\n<p>to capture two words into the same group. Again, every time a group with a certain name is encountered, a capture is pushed onto its stack. So applying this regex to the input <code>\"foo bar\"</code> and inspecting</p>\n\n<pre><code>m.Groups[\"word\"].Captures\n</code></pre>\n\n<p>we find two captures</p>\n\n<pre><code>0: \"foo\"\n1: \"bar\"\n</code></pre>\n\n<p>This allows us to even push things onto a single stack from different parts of the expression. But still, this is just .NET's feature of being able to track multiple captures which are listed in this <code>CaptureCollection</code>. But I said, this collection is a <strong>stack</strong>. So can we <em>pop</em>  things from it?</p>\n\n<h2>Enter: Balancing Groups</h2>\n\n<p>It turns out we can. If we use a group like <code>(?&lt;-word&gt;...)</code>, then the last capture is popped from the stack <code>word</code> if the subexpression <code>...</code> matches. So if we change our previous expression to</p>\n\n<pre><code>(?&lt;word&gt;\\w+)\\W+(?&lt;-word&gt;\\w+)\n</code></pre>\n\n<p>Then the second group will pop the first group's capture, and we will receive an empty <code>CaptureCollection</code> in the end. Of course, this example is pretty useless.</p>\n\n<p>But there's one more detail to the minus-syntax: if the stack is already empty, the group fails (regardless of its subpattern). We can leverage this behavior to count nesting levels - and this is where the name balancing group comes from (and where it gets interesting). Say we want to match strings that are correctly parenthesized. We push each opening parenthesis on the stack, and pop one capture for each closing parenthesis. If we encounter one closing parenthesis too many, it will try to pop an empty stack and cause the pattern to fail:</p>\n\n<pre><code>^(?:[^()]|(?&lt;Open&gt;[(])|(?&lt;-Open&gt;[)]))*$\n</code></pre>\n\n<p>So we have three alternatives in a repetition. The first alternative consumes everything that is not a parenthesis. The second alternative matches <code>(</code>s while pushing them onto the stack. The third alternative matches <code>)</code>s while popping elements from the stack (if possible!). </p>\n\n<p><sub><strong>Note:</strong> Just to clarify, we're only checking that there are no unmatched parentheses! This means that string containing no parentheses at all <em>will</em> match, because they are still syntactically valid (in some syntax where you need your parentheses to match). If you want to ensure at least one set of parentheses, simply add a lookahead <code>(?=.*[(])</code> right after the <code>^</code>.</sub></p>\n\n<p>This pattern is not perfect (or entirely correct) though.</p>\n\n<h2>Finale: Conditional Patterns</h2>\n\n<p>There is one more catch: this does not ensure that the stack is empty at the end of the string (hence <code>(foo(bar)</code> would be valid). .NET (and many other flavors) have one more construct that helps us out here: conditional patterns. The general syntax is </p>\n\n<pre><code>(?(condition)truePattern|falsePattern)\n</code></pre>\n\n<p>where the <code>falsePattern</code> is optional - if it is omitted the false-case will always match. The condition can either be a pattern, or the name of a capturing group. I'll focus on the latter case here. If it's the name of a capturing group, then <code>truePattern</code> is used if and only if the capture stack for that particular group is not empty. That is, a conditional pattern like <code>(?(name)yes|no)</code> reads \"if <code>name</code> has matched and captured something (that is still on the stack), use pattern <code>yes</code> otherwise use pattern <code>no</code>\".</p>\n\n<p>So at the end of our above pattern we could add something like <code>(?(Open)failPattern)</code> which causes the entire pattern to fail, if the <code>Open</code>-stack is not empty. The simplest thing to make the pattern unconditionally fail is <code>(?!)</code> (an empty negative lookahead). So we have our final pattern:</p>\n\n<pre><code>^(?:[^()]|(?&lt;Open&gt;[(])|(?&lt;-Open&gt;[)]))*(?(Open)(?!))$\n</code></pre>\n\n<p>Note that this conditional syntax has nothing per se to do with balancing groups but it's necessary to harness their full power.</p>\n\n<p>From here, the sky is the limit. Many very sophisticated uses are possible and there are some gotchas when used in combination with other .NET-Regex features like variable-length lookbehinds (<a href=\"http://stackoverflow.com/questions/13389560/balancing-groups-in-variable-length-lookbehind\">which I had to learn the hard way myself</a>). The main question however is always: is your code still maintainable when using these features? You need to document it really well, and be sure that everyone who works on it is also aware of these features. Otherwise you might be better off, just walking the string manually character-by-character and counting nesting levels in an integer.</p>\n\n<h2>Addendum: What's with the <code>(?&lt;A-B&gt;...)</code> syntax?</h2>\n\n<p>Credits for this part go to Kobi (see his answer below for more details).</p>\n\n<p>Now with all of the above, we can validate that a string is correctly parenthesized. But it would be a lot more useful, if we could actually get (nested) captures for all those parentheses' contents. Of course, we could remember opening and closing parentheses in a separate capture stack that is not emptied, and then do some substring extraction based on their positions in a separate step.</p>\n\n<p>But .NET provides one more convenience feature here: if we use <code>(?&lt;A-B&gt;subPattern)</code>, not only is a capture popped from stack <code>B</code>, but also everything between that popped capture of <code>B</code> and this current group is pushed onto stack <code>A</code>. So if we use a group like this for the closing parentheses, while popping nesting levels from our stack, we can also push the pair's content onto another stack:</p>\n\n<pre><code>^(?:[^()]|(?&lt;Open&gt;[(])|(?&lt;Content-Open&gt;[)]))*(?(Open)(?!))$\n</code></pre>\n\n<p><sub>Kobi provided this <a href=\"http://regexstorm.net/tester?p=%28?%3a%5B%5E%7B%7D%5D%7C%28?%3COpen%3E%7B%29%7C%28?%3CContent-Open%3E%7D%29%29%2b%28?%28Open%29%28?!%29%29&amp;i=0%20%7B1%202%20%7B3%7D%20%7B4%205%20%7B6%7D%7D%207%7D%208\">Live-Demo</a> in his answer</sub></p>\n\n<p>So taking all of these things together we can:</p>\n\n<ul>\n<li>Remember arbitrarily many captures</li>\n<li>Validate nested structures</li>\n<li>Capture each nesting level</li>\n</ul>\n\n<p>All in a single regular expression. If that's not exciting... ;)</p>\n\n<p>Some resources that I found helpful when I first learned about them:</p>\n\n<ul>\n<li><a href=\"http://blog.stevenlevithan.com/archives/balancing-groups\">http://blog.stevenlevithan.com/archives/balancing-groups</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/bs2twtah.aspx#balancing_group_definition\">MSDN on balancing groups</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/36xybswe.aspx#Conditional_Expr\">MSDN on conditional patterns</a></li>\n<li><a href=\"http://kobikobi.wordpress.com/tag/balancing-group/\">http://kobikobi.wordpress.com/tag/balancing-group/</a> (slightly academic, but has some interesting applications)</li>\n</ul>\n    "},{"t":"In Python, how do I split a string and keep the separators?","l":"http://stackoverflow.com/questions/2136556/in-python-how-do-i-split-a-string-and-keep-the-separators","q":"\n\n<p>Here's the simplest way to explain this. Here's what I'm using:</p>\n\n<pre><code>re.split('\\W', 'foo/bar spam\\neggs')\n-&gt; ['foo', 'bar', 'spam', 'eggs']\n</code></pre>\n\n<p>Here's what I want:</p>\n\n<pre><code>someMethod('\\W', 'foo/bar spam\\neggs')\n-&gt; ['foo', '/', 'bar', ' ', 'spam', '\\n', 'eggs']\n</code></pre>\n\n<p>The reason is that I want to split a string into tokens, manipulate it, then put it back together again.</p>\n    ","a":"\n<pre><code>&gt;&gt;&gt; re.split('(\\W)', 'foo/bar spam\\neggs')\n['foo', '/', 'bar', ' ', 'spam', '\\n', 'eggs']\n</code></pre>\n    "},{"t":"PHP function to make slug (URL string)","l":"http://stackoverflow.com/questions/2955251/php-function-to-make-slug-url-string","q":"\n\n<pre><code>function gen_slug($str){\n    # special accents\n    $a = array('À','Á','Â','Ã','Ä','Å','Æ','Ç','È','É','Ê','Ë','Ì','Í','Î','Ï','Ð','Ñ','Ò','Ó','Ô','Õ','Ö','Ø','Ù','Ú','Û','Ü','Ý','ß','à','á','â','ã','ä','å','æ','ç','è','é','ê','ë','ì','í','î','ï','ñ','ò','ó','ô','õ','ö','ø','ù','ú','û','ü','ý','ÿ','A','a','A','a','A','a','C','c','C','c','C','c','C','c','D','d','Ð','d','E','e','E','e','E','e','E','e','E','e','G','g','G','g','G','g','G','g','H','h','H','h','I','i','I','i','I','i','I','i','I','i','?','?','J','j','K','k','L','l','L','l','L','l','?','?','L','l','N','n','N','n','N','n','?','O','o','O','o','O','o','Œ','œ','R','r','R','r','R','r','S','s','S','s','S','s','Š','š','T','t','T','t','T','t','U','u','U','u','U','u','U','u','U','u','U','u','W','w','Y','y','Ÿ','Z','z','Z','z','Ž','ž','?','ƒ','O','o','U','u','A','a','I','i','O','o','U','u','U','u','U','u','U','u','U','u','?','?','?','?','?','?');\n    $b = array('A','A','A','A','A','A','AE','C','E','E','E','E','I','I','I','I','D','N','O','O','O','O','O','O','U','U','U','U','Y','s','a','a','a','a','a','a','ae','c','e','e','e','e','i','i','i','i','n','o','o','o','o','o','o','u','u','u','u','y','y','A','a','A','a','A','a','C','c','C','c','C','c','C','c','D','d','D','d','E','e','E','e','E','e','E','e','E','e','G','g','G','g','G','g','G','g','H','h','H','h','I','i','I','i','I','i','I','i','I','i','IJ','ij','J','j','K','k','L','l','L','l','L','l','L','l','l','l','N','n','N','n','N','n','n','O','o','O','o','O','o','OE','oe','R','r','R','r','R','r','S','s','S','s','S','s','S','s','T','t','T','t','T','t','U','u','U','u','U','u','U','u','U','u','U','u','W','w','Y','y','Y','Z','z','Z','z','Z','z','s','f','O','o','U','u','A','a','I','i','O','o','U','u','U','u','U','u','U','u','U','u','A','a','AE','ae','O','o');\n    return strtolower(preg_replace(array('/[^a-zA-Z0-9 -]/','/[ -]+/','/^-|-$/'),array('','-',''),str_replace($a,$b,$str)));\n}\n</code></pre>\n\n<p>Works great, but I've found some cases in which it fails:</p>\n\n<p><code>gen_slug('andrés')</code> returns <code>andras</code> instead of <code>andres</code></p>\n\n<p>Why? Any ideas on the <code>preg_replace</code> parameters?</p>\n    ","a":"\n<p>Instead of a lengthy replace, try this one:</p>\n\n<pre><code>static public function slugify($text)\n{ \n  // replace non letter or digits by -\n  $text = preg_replace('~[^\\\\pL\\d]+~u', '-', $text);\n\n  // trim\n  $text = trim($text, '-');\n\n  // transliterate\n  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);\n\n  // lowercase\n  $text = strtolower($text);\n\n  // remove unwanted characters\n  $text = preg_replace('~[^-\\w]+~', '', $text);\n\n  if (empty($text))\n  {\n    return 'n-a';\n  }\n\n  return $text;\n}\n</code></pre>\n\n<p>It was taken from symfony's jobeet tutorial.</p>\n    "},{"t":"Remove all special characters, punctuation and spaces from string","l":"http://stackoverflow.com/questions/5843518/remove-all-special-characters-punctuation-and-spaces-from-string","q":"\n\n<p>I need to remove all special characters, punctuation and spaces from a string so that I only have letters and numbers.</p>\n    ","a":"\n<p>This can be done without <code>regex</code>:</p>\n\n<pre><code>&gt;&gt;&gt; string = \"Special $#! characters   spaces 888323\"\n&gt;&gt;&gt; ''.join(e for e in string if e.isalnum())\n'Specialcharactersspaces888323'\n</code></pre>\n\n<p>You can use <code>str.isalnum</code>:</p>\n\n<blockquote>\n<pre><code>S.isalnum() -&gt; bool\n\nReturn True if all characters in S are alphanumeric\nand there is at least one character in S, False otherwise.\n</code></pre>\n</blockquote>\n\n<p>If you insist on using <code>regex</code>, other solutions will do fine. However note that if it can be done without using a regular expression, that's the best way to go about it.</p>\n    "},{"t":"Java RegEx meta character (.) and ordinary dot?","l":"http://stackoverflow.com/questions/3674930/java-regex-meta-character-and-ordinary-dot","q":"\n\n<p>In Java RegEx, how to find out the difference between <code>.</code>(dot) the meta character and the normal dot as we using in any sentence. How to handle this kind of situation for other meta characters too like (<code>*</code>,<code>+</code>,<code>/d</code>,...)</p>\n    ","a":"\n<p>If you want the dot or other characters with a special meaning in regexes to be a normal character, you have to escape it with a backslash. Since regexes in Java are normal Java strings, you need to escape the backslash itself, so you need two backslashes e.g. <code>\\\\.</code> </p>\n    "},{"t":"Confusing output from String.split","l":"http://stackoverflow.com/questions/25056607/confusing-output-from-string-split","q":"\n\n<p>I do not understand the output of this code:</p>\n\n<pre><code>public class StringDemo{              \n    public static void main(String args[]) {\n        String blank = \"\";                    \n        String comma = \",\";                   \n        System.out.println(\"Output1: \"+blank.split(\",\").length);  \n        System.out.println(\"Output2: \"+comma.split(\",\").length);  \n    }\n}\n</code></pre>\n\n<p>And got the following output:</p>\n\n<pre><code>Output1: 1 \nOutput2: 0\n</code></pre>\n    ","a":"\n<p>Documentation:</p>\n\n<p>For: <code>System.out.println(\"Output1: \"+blank.split(\",\").length);</code></p>\n\n<blockquote>\n  <p>The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. <strong>If the expression does not match any part of the input then the resulting array has just one element, namely this string</strong>.</p>\n</blockquote>\n\n<p>It will simply return the entire string that's why it returns 1.</p>\n\n<hr>\n\n<p>For the second case, <code>String.split</code> will discard the <code>,</code> so the result will be empty.</p>\n\n<pre><code>String.split silently discards trailing separators\n</code></pre>\n\n<p>see <a href=\"https://code.google.com/p/guava-libraries/wiki/StringsExplained#Splitter\">guava StringsExplained</a> too</p>\n    "},{"t":"What does the regular expression /_/g mean?","l":"http://stackoverflow.com/questions/6052616/what-does-the-regular-expression-g-mean","q":"\n\n<p>javascript:</p>\n\n<pre><code>.replace(/_/g,\" \");\n</code></pre>\n\n<p>I have it in my code but can't remember why or what it does! Can one of you regular expression gurus help? I know this may seem basic, but regular expressions are not my cup of tea, and googling for /g won't help much...</p>\n    ","a":"\n<p>The regex matches the <code>_</code> character.</p>\n\n<p>The <code>g</code> means <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Regular_Expressions#Advanced_Searching_With_Flags\">Global</a>, and causes the <code>replace</code> call to replace all matches, not just the first one.</p>\n    "},{"t":"typeof for RegExp","l":"http://stackoverflow.com/questions/4339288/typeof-for-regexp","q":"\n\n<p>Is there anyway to detect if a JavaScript object is a regex?</p>\n\n<p>For example, I would like to do something like this:</p>\n\n<pre><code>var t = /^foo(bar)?$/i;\nalert(typeof t); //I want this to return \"regexp\"\n</code></pre>\n\n<p>Is this possible?</p>\n\n<p>Thanks!</p>\n\n<p>EDIT: Thanks for all the answers. It seems I have two very good choices:</p>\n\n<pre><code>obj.constructor.name === \"RegExp\"\n</code></pre>\n\n<p>or</p>\n\n<pre><code>obj instanceof RegExp\n</code></pre>\n\n<p>Any major pros/cons to either method?</p>\n\n<p>Thanks again!</p>\n    ","a":"\n<p>you can use <strong>instanceof</strong> operator:</p>\n\n<pre><code>var t = /^foo(bar)?$/i;\nalert(t instanceof RegExp);//returns true\n</code></pre>\n\n<p>In fact, that is the same as:</p>\n\n<pre><code>var t = /^foo(bar)?$/i;\nalert(t.constructor == RegExp);//returns true\n</code></pre>\n    "},{"t":"How can I concatenate regex literals in JavaScript?","l":"http://stackoverflow.com/questions/185510/how-can-i-concatenate-regex-literals-in-javascript","q":"\n\n<p>Is it possible to do something like this?</p>\n\n<pre><code>var pattern = /some regex segment/ + /* comment here */\n    /another segment/;\n</code></pre>\n\n<p>Or do I have to use new <code>RegExp()</code> syntax and concatenate a string? I'd prefer to use the literal as the code is both more self-evident and concise.</p>\n    ","a":"\n<p>Here is how to create a regular expression without using the regular expression literal syntax. This lets you do arbitary string manipulation before it becomes a regular expression object:</p>\n\n<pre><code>var segment_part = \"some bit of the regexp\";\nvar pattern = new RegExp(\"some regex segment\" + /*comment here */\n              segment_part + /* that was defined just now */\n              \"another segment\");\n</code></pre>\n\n<p>If you have two regular expression literals, you can in fact concatenate them using this technique:</p>\n\n<pre><code>var expression_one = /foo/;\nvar expression_two = /bar/;\nvar expression_three = new RegExp(expression_one.source + expression_two.source);\n</code></pre>\n\n<p>It's not entirely a good solution, as you lose the flags that were set on expression_one and expression_two, and is more wordy than just having expression one and two being literal strings instead of literal regular expressions.</p>\n    "},{"t":"Regex for quoted string with escaping quotes","l":"http://stackoverflow.com/questions/249791/regex-for-quoted-string-with-escaping-quotes","q":"\n\n<p>How do I get the substring <code>\" It's big \\\"problem  \"</code> using a regular expression?</p>\n\n<pre><code>s = ' function(){  return \" It\\'s big \\\"problem  \";  }';     \n</code></pre>\n    ","a":"\n<pre><code>/\"(?:[^\"\\\\]|\\\\.)*\"/\n</code></pre>\n\n<p>Works in The Regex Coach and PCRE Workbench.</p>\n\n<p>Example of test in JavaScript:</p>\n\n<pre><code>var s = ' function(){ return \" Is big \\\\\"problem\\\\\", \\\\no? \"; }';\nvar m = s.match(/\"(?:[^\"\\\\]|\\\\.)*\"/);\nif (m != null)\n    alert(m);\n</code></pre>\n    "},{"t":"How to create Gmail filter searching for text only at start of subject line?","l":"http://stackoverflow.com/questions/12246547/how-to-create-gmail-filter-searching-for-text-only-at-start-of-subject-line","q":"\n\n<p>We receive regular automated build messages from Jenkins build servers at work.</p>\n\n<p>It'd be nice to ferret these away into a label, skipping the inbox.</p>\n\n<p>Using a filter is of course the right choice.</p>\n\n<p>The desired identifier is the string <code>[RELEASE]</code> at the beginning of a subject line.</p>\n\n<p>Attempting to specify any of the following regexes causes emails with the string <code>release</code> in any case anywhere in the subject line to be matched:</p>\n\n<pre><code>\\[RELEASE\\]*\n^\\[RELEASE\\]\n^\\[RELEASE\\]*\n^\\[RELEASE\\].*\n</code></pre>\n\n<p>From what I've read subsequently, Gmail doesn't have standard regex support, and from experimentation it seems, as with google search, special characters are simply ignored. </p>\n\n<p>I'm therefore looking for a search parameter which can be used, maybe something like <code>atstart:mystring</code> in keeping with their <code>has:</code>, <code>in:</code> notations.</p>\n\n<p>Is there a way to force the match only if it occurs at the start of the line, and only in the case where square brackets are included?</p>\n\n<p>Sincere thanks.</p>\n    ","a":"\n<p>Regex is not on the <a href=\"http://support.google.com/mail/bin/answer.py?hl=en&amp;answer=7190\">list of features</a>, and it is on (more or less, as <em>Better message search functionality (i.e. Wildcard and partial word search)</em>) the list of pre-canned <a href=\"http://support.google.com/mail/bin/static.py?hl=en&amp;page=suggestions.cs\">feature requests</a>, so the answer is \"you cannot do this via the Gmail web UI\" :-( </p>\n\n<p>There are no current <em>Labs</em> features which offer this. SIEVE filters would be another way to do this, that too is <a href=\"http://support.google.com/mail/bin/answer.py?hl=en&amp;answer=78761\">not supported</a>.</p>\n\n<p>With the current search facility brackets of any form <code>() {} []</code> are used for grouping, they have no observable effect if there's just one term within. Using  <code>(aaa|bbb)</code> and <code>[aaa|bbb]</code> are equivalent and will both find terms <code>aaa</code> or <code>bbb</code>. As far as I can tell most other punctuation characters, including \"\\\", are treated as a space or a word-separator.</p>\n\n<p>You <em>can</em> do regex searches on your mailbox (within limits) programmatically via Google docs: <a href=\"http://www.labnol.org/internet/advanced-gmail-search/21623/\">http://www.labnol.org/internet/advanced-gmail-search/21623/</a> has source showing how it can be done (copy the document, then <code>Tools &gt; Script Editor</code> to get the complete source).</p>\n\n<p>You could also do this via IMAP as described here: \n  <a href=\"http://stackoverflow.com/questions/13403790/python-imap-search-for-partial-subject\">Python IMAP search for partial subject</a>\nand script something to move messages to different folder. The IMAP SEARCH verb only supports substrings (limited to complete words in Gmail), further processing of the matches to apply a regex would be needed. </p>\n\n<p>For completeness, one last workaround is: Gmail supports <em>plus addressing</em>, if you can change the destination address to <code>youraddress+jenkinsrelease@gmail.com</code> it will still be sent to your mailbox where you can filter by recipient. Make sure to filter using the full email address <code>to:youraddress+jenkinsrelease@gmail.com</code>. This is of course more or less the same thing as setting up a dedicated Gmail address for this purpose :-)</p>\n    "},{"t":"JavaScript regular expressions and sub-matches","l":"http://stackoverflow.com/questions/844001/javascript-regular-expressions-and-sub-matches","q":"\n\n<p>Why do Javascript sub-matches stop working when the <code>g</code> modifier is set?</p>\n\n<pre><code>var text = 'test test test test';\n\nvar result = text.match(/t(e)(s)t/);\n// Result: [\"test\", \"e\", \"s\"]\n</code></pre>\n\n<p>The above works fine, <code>result[1]</code> is <code>\"e\"</code> and <code>result[2]</code> is <code>\"s\"</code>.</p>\n\n<pre><code>var result = text.match(/t(e)(s)t/g);\n// Result: [\"test\", \"test\", \"test\", \"test\"]\n</code></pre>\n\n<p>The above ignores my capturing groups. Is the following the only valid solution?</p>\n\n<pre><code>var result = text.match(/test/g);\nfor (var i in result) {\n    console.log(result[i].match(/t(e)(s)t/));\n}\n/* Result:\n[\"test\", \"e\", \"s\"]\n[\"test\", \"e\", \"s\"]\n[\"test\", \"e\", \"s\"]\n[\"test\", \"e\", \"s\"]\n*/\n</code></pre>\n    ","a":"\n<p>Using <code>String</code>'s <code>match()</code> function won't return captured groups if the global modifier is set, as you found out.</p>\n\n<p>In this case, you would want to use a <code>RegExp</code> object and call its <code>exec()</code> function. <code>String</code>'s <code>match()</code> is almost identical to <code>RegExp</code>'s <code>exec()</code> function…except in cases like these. If the global modifier is set, the normal <code>match()</code> function won't return captured groups, while <code>RegExp</code>'s <code>exec()</code> function will. (Noted <a href=\"http://james.padolsey.com/javascript/regular-expressions-in-javascript-part-2/\" rel=\"nofollow\">here</a>, among other places.)</p>\n\n<p>Another catch to remember is that <code>exec()</code> doesn't return the matches in one big array—it keeps returning matches until it runs out, in which case it returns <code>null</code>.</p>\n\n<p>So, for example, you could do something like this:</p>\n\n<pre><code>var pattern = /t(e)(s)t/g;  // Alternatively, \"new RegExp('t(e)(s)t', 'g');\"\nvar match;    \n\nwhile (match = pattern.exec(text)) {\n    // Do something with the match ([\"test\", \"e\", \"s\"]) here...\n}\n</code></pre>\n\n<p>Another thing to note is that <code>RegExp.prototype.exec()</code> and <code>RegExp.prototype.test()</code> execute the regular expression on the provided string and return the first result. Every sequential call will step through the result set updating <code>RegExp.prototype.lastIndex</code> based on the current position in the string.</p>\n\n<p>Here's an example:\n    // remember there are 4 matches in the example and pattern. lastIndex starts at 0</p>\n\n<pre><code>pattern.test(text); // pattern.lastIndex = 4\npattern.test(text); // pattern.lastIndex = 9\npattern.exec(text); // pattern.lastIndex = 14\npattern.exec(text); // pattern.lastIndex = 19\n\n// if we were to call pattern.exec(text) again it would return null and reset the pattern.lastIndex to 0\nwhile (var match = pattern.exec(text)) {\n    // never gets run because we already traversed the string\n    console.log(match);\n}\n\npattern.test(text); // pattern.lastIndex = 4\npattern.test(text); // pattern.lastIndex = 9\n\n// however we can reset the lastIndex and it will give us the ability to traverse the string from the start again or any specific position in the string\npattern.lastIndex = 0;\n\nwhile (var match = pattern.exec(text)) {\n    // outputs all matches\n    console.log(match);\n}\n</code></pre>\n\n<p>You can find information on how to use <code>RegExp</code> objects <a href=\"http://www.w3schools.com/jsref/jsref_obj_regexp.asp\" rel=\"nofollow\">on W3Schools</a> (specifically, here's the documentation for <a href=\"http://www.w3schools.com/jsref/jsref_exec_regexp.asp\" rel=\"nofollow\">the <code>exec()</code> function</a>).</p>\n    "},{"t":"RegEx to exclude a specific string constant [duplicate]","l":"http://stackoverflow.com/questions/1395177/regex-to-exclude-a-specific-string-constant","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/2078915/a-regular-expression-to-exclude-a-word-string\" dir=\"ltr\">A regular expression to exclude a word/string</a>\n                <span class=\"question-originals-answer-count\">\n                    3 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>Can regular expression be utilized to match any string except a specific string constant let us say \"ABC\" ? Is this possible to exclude just one specific string constant? Thanks your help in advance.</p>\n    ","a":"\n<p>You have to use a negative lookahead assertion.</p>\n\n<pre><code>(?!^ABC$)\n</code></pre>\n\n<p>You could for example use the following.</p>\n\n<pre><code>(?!^ABC$)(^.*$)\n</code></pre>\n\n<p>If this does not work in your editor, try this. It is tested to work in ruby and javascript:</p>\n\n<pre><code>^((?!ABC).)*$\n</code></pre>\n    "},{"t":"Convert all first letter to upper case, rest lower for each word","l":"http://stackoverflow.com/questions/1943273/convert-all-first-letter-to-upper-case-rest-lower-for-each-word","q":"\n\n<p>I have a string of text (about 5-6 words mostly) that I need to convert.</p>\n\n<p>Currently the text looks like:</p>\n\n<pre><code>THIS IS MY TEXT RIGHT NOW\n</code></pre>\n\n<p>I want to convert it to:</p>\n\n<pre><code>This Is My Text Right Now\n</code></pre>\n\n<p>I can loop through my collection of strings, but not sure how to go about performing this text modification.</p>\n    ","a":"\n<pre><code>string s = \"THIS IS MY TEXT RIGHT NOW\";\n\ns = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(s.toLower());\n</code></pre>\n    "},{"t":"How to do a non-greedy match in grep?","l":"http://stackoverflow.com/questions/3027518/how-to-do-a-non-greedy-match-in-grep","q":"\n\n<p>I want to grep the shortest match and the pattern should be something like:</p>\n\n<pre><code>&lt;car ... model=BMW ...&gt;\n...\n...\n...\n&lt;/car&gt;\n</code></pre>\n\n<p>... means any character and the input is multiple lines. </p>\n    ","a":"\n<p>You're looking for a non-greedy (or lazy) match. To get a non-greedy match in regular expressions you need to use the modifier <code>?</code> after the quantifier. For example you can change <code>.*</code> to <code>.*?</code>.</p>\n\n<p>By default <code>grep</code> doesn't support non-greedy modifiers, but you can use <code>grep -P</code> to use the Perl syntax.</p>\n    "},{"t":"Python regex help: remove the file extension","l":"http://stackoverflow.com/questions/4444923/python-regex-help-remove-the-file-extension","q":"\n\n<p>a file name could be</p>\n\n<pre><code>1.1.1.1.1.jpg\n\n1.1.jpg\n\n1.jpg\n</code></pre>\n\n<p>What I want to do is only get the file name.</p>\n    ","a":"\n<p>In most cases, you shouldn't use a regex for that.</p>\n\n<pre><code>os.path.splitext(filename)[0]\n</code></pre>\n\n<p>This will also handle a filename like <code>.bashrc</code> correctly by keeping the whole name.</p>\n    "},{"t":"How to match “anything up until this sequence of characters” in a regular expression?","l":"http://stackoverflow.com/questions/7124778/how-to-match-anything-up-until-this-sequence-of-characters-in-a-regular-expres","q":"\n\n<p>Take this regular expression: <code>/^[^abc]/</code>. This will match any single character at the beginning of a string, except a, b, or c.</p>\n\n<p>If you add a <code>*</code> after it – <code>/^[^abc]*/</code> – the regular expression will continue to add each subsequent character to the result, until it meets either an <code>a</code>, <strong>or</strong> <code>b</code>, <strong>or</strong> <code>c</code>.</p>\n\n<p>For example, with the source string <code>\"qwerty qwerty whatever abc hello\"</code>, the expression will match up to <code>\"qwerty qwerty wh\"</code>. </p>\n\n<p>But what if I wanted the matching string to be <code>\"qwerty qwerty whatever \"</code> </p>\n\n<p>...In other words, how can I match everything up to (but not including) the <em>exact sequence</em> <code>\"abc\"</code>?</p>\n    ","a":"\n<p>You didn't specify which flavor or regex you're using, but this will work in any of the most popular ones that can be considered \"complete\".</p>\n\n<pre><code>/.+?(?=abc)/\n</code></pre>\n    "},{"t":"Why does this take so long to match? Is it a bug?","l":"http://stackoverflow.com/questions/25982466/why-does-this-take-so-long-to-match-is-it-a-bug","q":"\n\n<p>I need to match certain URLs in web application, i.e. <code>/123,456,789</code>, and wrote this regex to match the pattern:</p>\n\n<pre><code>r'(\\d+(,)?)+/$'\n</code></pre>\n\n<p>I noticed that it does not seem to evaluate, even after several minutes when testing the pattern:</p>\n\n<pre><code>re.findall(r'(\\d+(,)?)+/$', '12345121,223456,123123,3234,4523,523523')\n</code></pre>\n\n<p>The expected result would be that there were no matches.</p>\n\n<p>This expression, however, executes almost immediately (note the trailing slash):</p>\n\n<pre><code>re.findall(r'(\\d+(,)?)+/$', '12345121,223456,123123,3234,4523,523523/')\n</code></pre>\n\n<p>Is this a bug?</p>\n    ","a":"\n<p>There is some <a href=\"http://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a> going on that will cause an exponential amount of processing depending on how long the non-match string is. This has to do with your nested repetitions and optional comma (even though some regex engines can determine that this wouldn't be a match with attempting all of the extraneous repetition). This is solved by optimizing the expression.</p>\n\n<hr>\n\n<p>The easiest way to accomplish this is to just look for 1+ digits or commas followed by a slash and the end of the string: <a href=\"http://regex101.com/r/iA4oF7/1\"><code>[\\d,]+/$</code></a>. However, that is not perfect since it would allow for something like <code>,123,,4,5/</code>.</p>\n\n<p>For this you can use a slightly optimized version of your initial try: <a href=\"http://regex101.com/r/iA4oF7/2\"><code>(?:\\d,?)+/$</code></a>. First, I made your repeating group <a href=\"http://www.regular-expressions.info/brackets.html#\">non-capturing</a> (<code>(?:...)</code>) which isn't necessary but it provides for a \"cleaner match\". <strong><em>Next, and the only crucial step, I stopped repeating the <code>\\d</code> inside of the group since the group is already repeating.</em></strong> Finally, I removed the unnecessary group around the optional <code>,</code> since <code>?</code> only affects the last character. Pretty much this will look for one digit, maybe a comma, then repeat, and finally followed by a trailing <code>/</code>.</p>\n\n<hr>\n\n<p>This can still match an odd string <code>1,2,3,/</code>, so for the heck of it I improved your original regex with a <a href=\"http://www.regular-expressions.info/lookaround.html\">negative lookbehind</a>: <a href=\"http://regex101.com/r/iA4oF7/3\"><code>(?:\\d,?)+(?&lt;!,)/$</code></a>. This will assert that there is no comma directly before the trailing <code>/</code>.</p>\n    "},{"t":"Ruby regular expression using variable name","l":"http://stackoverflow.com/questions/2268421/ruby-regular-expression-using-variable-name","q":"\n\n<p>Is is possible to create/use a regular expression pattern in ruby that is based on the value of a variable name?</p>\n\n<p>For instance, we all know we can do the following with Ruby strings:</p>\n\n<pre><code>str = \"my string\"\nstr2 = \"This is #{str}\" # =&gt; \"This is my string\"\n</code></pre>\n\n<p>I'd like to do the same thing with regular expressions:</p>\n\n<pre><code>var = \"Value\"\nstr = \"a test Value\"\nstr.gsub( /#{var}/, 'foo' ) # =&gt; \"a test foo\"\n</code></pre>\n\n<p>Obviously that doesn't work as listed, I only put it there as an example to show what I'd like to do.  I need to regexp match based on the value of a variable's content.</p>\n    ","a":"\n<p>The code you think doesn't work, does:</p>\n\n<pre><code>var = \"Value\"\nstr = \"a test Value\"\np str.gsub( /#{var}/, 'foo' )   # =&gt; \"a test foo\"\n</code></pre>\n\n<p>Things get more interesting if var can contain regular expression meta-characters.  If it does and you want those matacharacters to do what they usually do in a regular expression, then the same gsub will work:</p>\n\n<pre><code>var = \"Value|a|test\"\nstr = \"a test Value\"\nstr.gsub( /#{var}/, 'foo' ) # =&gt; \"foo foo foo\"\n</code></pre>\n\n<p>However, if your search string contains metacharacters and you do <em>not</em> want them interpreted as metacharacters, then use Regexp.escape like this:</p>\n\n<pre><code>var = \"*This*\"\nstr = \"*This* is a string\"\np str.gsub( /#{Regexp.escape(var)}/, 'foo' )\n# =&gt; \"foo is a string\"\n</code></pre>\n\n<p>Or just give gsub a string instead of a regular expression.  In MRI &gt;= 1.8.7, gsub will treat a string replacement argument as a plain string, not a regular expression:</p>\n\n<pre><code>var = \"*This*\"\nstr = \"*This* is a string\"\np str.gsub(var, 'foo' ) # =&gt; \"foo is a string\"\n</code></pre>\n\n<p>(It used to be that a string replacement argument to gsub was automatically converted to a regular expression.  I know it was that way in 1.6.  I don't recall which version introduced the change).</p>\n\n<p>As noted in other answers, you can use Regexp.new as an alternative to interpolation:</p>\n\n<pre><code>var = \"*This*\"\nstr = \"*This* is a string\"\np str.gsub(Regexp.new(Regexp.escape(var)), 'foo' )\n# =&gt; \"foo is a string\"\n</code></pre>\n    "},{"t":"“vertical” regex matching in an ASCII “image”","l":"http://stackoverflow.com/questions/17039670/vertical-regex-matching-in-an-ascii-image","q":"\n\n<p><em>Note: This is a question about possibilities of modern regex flavors. It's not about the best way to solve this using other methods. It's inspired by <a href=\"http://stackoverflow.com/questions/17026462/php-vertical-regular-expression-search\">an earlier question</a>, but that one is not restricted to regex.</em></p>\n\n<h2>The Problem</h2>\n\n<p>In an ASCII \"image\"/art/map/string like:</p>\n\n<pre><code>....X.......\n..X..X...X....\nX.X...X..X.....\nX....XXXXXX.....\nX..XXX...........\n.....X..........\n..............X\n..X...........X....\n..X...........X....X...\n....X.....\n</code></pre>\n\n<p>I'd like to find a simple vertical line formation of three <code>X</code>s:</p>\n\n<pre><code>X\nX\nX\n</code></pre>\n\n<p>The number of lines is variable in the image, and the width of <em>each</em> line is variable too.</p>\n\n<h2>The Question(s)</h2>\n\n<p>With regex (PCRE/PHP, Perl, .NET or similar) is it possible to:</p>\n\n<ol>\n<li>Determine if such a formation exists</li>\n<li>Count the number of such formations/match the starting point of them all (4 in the above example)</li>\n</ol>\n    ","a":"\n<h1>Answer to question 1</h1>\n\n<p>To answer the first question one could use:</p>\n\n<pre><code>(?xm)                    # ignore comments and whitespace, ^ matches beginning of line\n^                        # beginning of line\n(?:\n    .                    # any character except \\n\n    (?=                  # lookahead\n        .*+\\n            # go to next line\n        ( \\1?+ . )       # add a character to the 1st capturing group\n        .*+\\n            # next line\n        ( \\2?+ . )       # add a character to the 2nd capturing group\n    )\n)*?                      # repeat as few times as needed\nX .*+\\n                  # X on the first line and advance to next line\n\\1?+                     # if 1st capturing group is defined, use it, consuming exactly the same number of characters as on the first line\nX .*+\\n                  # X on the 2nd line and advance to next line\n\\2?+                     # if 2st capturing group is defined, use it, consuming exactly the same number of characters as on the first line\nX                        # X on the 3rd line\n</code></pre>\n\n<p><kbd><a href=\"http://ideone.com/iUFxBw\"><strong>Online demo</strong></a></kbd></p>\n\n<p>This expression works in Perl, PCRE, Java and should work in .NET.</p>\n\n<p>The expression uses lookaheads with self referencing capturing groups to add a character for every repetition of the lookahead (this is used to \"count\").</p>\n\n<p><code>\\1?+</code> means if <code>\\1</code> matches (or is defined) consume it, and don't give it back (don't backtrack). In this case it's equivalent to <code>(?(1) \\1 )</code>. Which means match <code>\\1</code> if <code>\\1</code> is defined.</p>\n\n<p><a href=\"http://stackoverflow.com/users/276101/polygenelubricants\">polygenelubricants</a> explains this kinds of lookaheads with backreferences very nicely in <a href=\"http://stackoverflow.com/questions/3644266/how-can-we-match-an-bn-with-java-regex/\">his answer for <em>How can we match a^n b^n with Java regex?</em></a>. (He has also written about other impressive tricks for Java regex involving backreferences and lookarounds.)</p>\n\n<h1>Answer to question 2</h1>\n\n<h2>Plain matching</h2>\n\n<p>When just using matching and requiring the answer (count) in the number of matches, then the question 2 answer would be:</p>\n\n<p>It can <strong>not</strong> be directly solved in regex flavors that have a limited lookbehind. While other flavors like Java and .NET could (as for example in <a href=\"http://stackoverflow.com/a/17176756/107152\">m.buettner's .NET solution</a>).</p>\n\n<p>Thus plain regex matches in Perl and PCRE (PHP, etc) cannot directly answer this question in this case.</p>\n\n<h3>(Semi?)proof</h3>\n\n<p>Assume that no variable length lookbehinds are available.</p>\n\n<p>You have to in some way count the number of characters on a line before an <code>X</code>.<br>\nOnly way to do that is to match them, and since no variable length lookbehinds are available you have to start the match (at least) at the beginning of the line.<br>\nIf you start the match at the beginning of a line you can only get at most one match per line.</p>\n\n<p>Since there can be multiple occurrences per line, this would not count them all and would not give a correct answer.</p>\n\n<h2>Length/indirect solution</h2>\n\n<p>On the other hand if we accept the answer as the length of a match or substitution result, then the 2nd question <strong>can be answered</strong> in PCRE and Perl (and other flavors).</p>\n\n<p>This solution is based on/inspired by <a href=\"http://stackoverflow.com/a/17176756/107152\">m.buettner's nice \"partial PCRE solution\"</a>.</p>\n\n<p>One could simply replace all matches of the following expression with <code>$3</code>, getting the answer to question two (the number of patterns of interests) as the length of the resulting string.</p>\n\n<pre><code>^\n(?:\n    (?:                   # match .+? characters\n        .\n        (?=               # counting the same number on the following two lines\n            .*+\\n\n            ( \\1?+ . )\n            .*+\\n\n            ( \\2?+ . )\n        )\n    )+?\n    (?&lt;= X )              # till the above consumes an X\n    (?=                   # that matches the following conditions\n        .*+\\n\n        \\1?+\n        (?&lt;= X )\n        .*+\\n\n        \\2?+\n        (?&lt;= X )\n    )\n    (?=                   # count the number of matches\n        .*+\\n\n        ( \\3?+ . )        # the number of matches = length of $3\n    )\n)*                        # repeat as long as there are matches on this line\n.*\\n?                     # remove the rest of the line\n</code></pre>\n\n<p>Which in Perl could be written as:</p>\n\n<pre><code>$in =~ s/regex/$3/gmx;\n$count = length $in;\n</code></pre>\n\n<p><kbd><a href=\"http://ideone.com/FLfOLX\"><strong>Online demo</strong></a></kbd></p>\n\n<p>This expression is similar to the solution to question 1 above, with some modifications to include <code>X</code> in the characters matched in the first lookahead, wrapped with a quantifier and counting number of matches of the quantifier.</p>\n\n<p>Except for direct matches this is as close as it gets (extra code wise besides regex), and could be an acceptable answer to question 2.</p>\n\n<h3>Test cases</h3>\n\n<p>Some test cases and results for the above solution. Result showing the numerical answer (length of the resulting string) and in parenthesis the resulting string after the the substitution(s).</p>\n\n<pre><code>Test #0:\n--------------------\nX\nX\nX\n\nresult: 1 (X)\n\n\nTest #1:\n--------------------\n..X....\n..X....\n..X....\n\nresult: 1 (.)\n\n\nTest #2:\n--------------------\n..X.X..\n..X.X..\n....X..\n\nresult: 1 (.)\n\n\nTest #3:\n--------------------\n..X....\n..X....\n...X...\n\nresult: 0 ()\n\n\nTest #4:\n--------------------\n..X....\n...X...\n..X....\n\nresult: 0 ()\n\n\nTest #5:\n--------------------\n....X..\n.X..X..\n.X.....\n\nresult: 0 ()\n\n\nTest #6:\n--------------------\n.X..X..\n.X.X...\n.X.X...\n\nresult: 1 (.)\n\n\nTest #7:\n--------------------\n.X..X..\n.X..X..\n.X..X..\n\nresult: 2 (.X)\n\n\nTest #8:\n--------------------\nXXX\nXXX\nXXX\n\nresult: 3 (XXX)\n\n\nTest #9:\n--------------------\nX.X.X\nXXXXX\nXXXXX\n.X.X.\n\nresult: 5 (XXXXX)\n\n\nTest #10:\n--------------------\n1....X.......\n2..X..X...X....\n3X.X...X..X.....\n4X....XXXXXX.....\n5X..XXX...........\n6.....X..........\n7.........X....X\n8..X......X....X....\n9..X......X....X....X...\nA....X.....\nB.X..X..\nC.....\nXXX\nXXX\nXXX\n.\n\nresult: 8 (3458.XXX)\n</code></pre>\n    "},{"t":"Regex match one of two words","l":"http://stackoverflow.com/questions/6863518/regex-match-one-of-two-words","q":"\n\n<p>I have an input that can have only 2 values <code>apple</code> or <code>banana</code>. What regular expression can I use to ensure that either of the two words was submitted?</p>\n    ","a":"\n<p>This will do:</p>\n\n<pre><code>/^(apple|banana)$/\n</code></pre>\n\n<p>to <em>exclude</em> from captured strings (e.g. <code>$1</code>,<code>$2</code>):</p>\n\n<pre><code>(?:apple|banna)\n</code></pre>\n    "},{"t":"Extracting pairs of words using String.split()","l":"http://stackoverflow.com/questions/16485687/extracting-pairs-of-words-using-string-split","q":"\n\n<p>Given a String such as</p>\n\n<pre><code>String input = \"one two three four five six seven\";\n</code></pre>\n\n<p>Is there a regex that works with <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split%28java.lang.String%29\"><code>String.split()</code></a> to grab (up to) two words at a time, such that:</p>\n\n<pre><code>String[] pairs = input.split(\"some regex\");\nSystem.out.println(Arrays.toString(pairs));\n</code></pre>\n\n<p>results in this:</p>\n\n<pre><code>[one two, three four, five six, seven]\n</code></pre>\n\n<p><strong>Note:</strong> This question is about <strong>the split regex</strong>. It is <em>not</em> about \"finding a work-around\" or other \"making it work another way\" solutions.</p>\n    ","a":"\n<p><strong>Currently it is possible to do it with <code>split()</code>, but in real world don't use this approach. Instead use <code>Pattern</code> and <code>Matcher</code> classes to avoid overcomplicating thins and maintenance hell since this behaviour may change in next versions or Java-like environments like Android.</strong></p>\n\n<hr>\n\n<p>Is this what you are looking for? \n<br><sub>(you can replace <code>\\\\w</code> with <code>\\\\S</code> to include all non-space characters but for this example I will leave <code>\\\\w</code> since it is easier to analyze regex with <code>\\\\w\\\\s</code> then <code>\\\\S\\\\s</code>)</sub></p>\n\n<pre><code>String input = \"one two three four five six seven\";\nString[] pairs = input.split(\"(?&lt;!\\\\G\\\\w+)\\\\s\");\nSystem.out.println(Arrays.toString(pairs));\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>[one two, three four, five six, seven]\n</code></pre>\n\n<hr>\n\n<p><code>\\G</code> is previous match, <code>(?&lt;!regex)</code> is negative lookbehind.</p>\n\n<p>In <code>split</code> we are trying to </p>\n\n<ol>\n<li>find spaces -&gt; <code>\\\\s</code></li>\n<li>that are not predicted -&gt; <code>(?&lt;!negativeLookBehind)</code> </li>\n<li>by some word -&gt; <code>\\\\w+</code> </li>\n<li>with previously matched (space) -&gt; <code>\\\\G</code> </li>\n<li>before it -&gt;<code>\\\\G\\\\w+</code>.</li>\n</ol>\n\n<p>Only confusion that I had at start was how would it work for first space since we want that space to be ignored. <em>Important information is that <code>\\\\G</code> at start matches start of the String <code>^</code></em>. </p>\n\n<p>So before first iteration regex in negative look-behind will look like <code>(?&lt;!^\\\\w+)</code> and since first space <strong>do</strong> have <code>^\\\\w+</code> before, it can't be match for split. Next space will not have this problem, so it will be matched and informations about it (like its <strong><em>position</em></strong> in <code>input</code> String) will be stored in <code>\\\\G</code> and used later in next negative look-behind.</p>\n\n<p>So for 3rd space regex will check if there is previously matched space <code>\\\\G</code> and word <code>\\\\w+</code> before it. Since result of this test will be positive, negative look-behind wont accept it so this space wont be matched, but 4th space wont have this problem because space before it wont be the same as stored in <code>\\\\G</code> (it will have different position in <code>input</code> String).</p>\n\n<hr>\n\n<p>Also if someone would like to separate on lets say every 3rd space you can use this form (based on <a href=\"http://stackoverflow.com/users/1284661/maybewecouldstealavan\">@maybeWeCouldStealAVan</a>'s <a href=\"http://stackoverflow.com/a/16486384/1393766\">answer</a> which was deleted when I posted this fragment of answer) </p>\n\n<pre><code>input.split(\"(?&lt;=\\\\G\\\\w{1,100}\\\\s\\\\w{1,100}\\\\s\\\\w{1,100})\\\\s\")\n</code></pre>\n\n<p>Instead of 100 you can use some bigger value that will be at least the size of length of longest word in String.</p>\n\n<hr>\n\n<p>I just noticed that we can also use <code>+</code> instead of <code>{1,maxWordLength}</code> if we want to split with every odd number like every 3rd, 5th, 7th for example</p>\n\n<pre><code>String data = \"0,0,1,2,4,5,3,4,6,1,3,3,4,5,1,1\";\nString[] array = data.split(\"(?&lt;=\\\\G\\\\d+,\\\\d+,\\\\d+,\\\\d+,\\\\d+),\");//every 5th comma \n</code></pre>\n    "},{"t":"Visual Studio, Find and replace, regex","l":"http://stackoverflow.com/questions/3147096/visual-studio-find-and-replace-regex","q":"\n\n<p>I am trying to replace all the <code>#include \"whatever.h\"</code> with <code>#include &lt;whatever.h&gt;</code> using find and replace functionality in Visual Studio 2005. I used the regex <code>\\#include \\\"[a-z\\.h]+\\\"</code> to find the include statement. But I am wondering how frame the replace regex.</p>\n\n<p><code>\\#include \\&lt;[a-z\\.h]+\\&gt;</code> did not work and won't; it replaces the statement <code>#include \"whatever.h\"</code> with <code>#include &lt;[a-z.h]+&gt;</code>. How shall I frame the replace regex to retain <code>whatever.h</code> as it is?</p>\n    ","a":"\n<p><strong>For versions <em>before</em> Visual studio 2012:</strong><br>\nIt works when I do this:<br>\nfind <code>include \"{[a-zA-Z]+\\.h}\"</code>,<br>\nreplace with <code>include &lt;\\1&gt;</code>.<br>\nThe most relevant parts for your question are the curly braces <code>{}</code> and the back reference <code>\\1</code>: <code>\\n</code> references to the n'th group indicated by curly braces in the search expression.</p>\n\n<p><strong>For versions Visual studio 2012 &amp; up:</strong><br>\nStarting with VS2012 .NET Framework regular expressions are used. So there it should be:<br>\nfind <code>include \"([a-zA-Z]+\\.h)\"</code>,<br>\nreplace with <code>include &lt;$1&gt;</code>.</p>\n    "},{"t":"Compile regex in PHP","l":"http://stackoverflow.com/questions/209906/compile-regex-in-php","q":"\n\n<p>Is there a way in PHP to compile a regular expression, so that it can then be compared to multiple strings without repeating the compilation process?  Other major languages can do this -- Java, C#, Python, Javascript, etc.</p>\n    ","a":"\n<p>The Perl-Compatible Regular Expressions library may have already be optimized for your use case without providing a Regex class like other languages do: </p>\n\n<blockquote>\n  <p>This extension maintains a global per-thread cache of compiled regular expressions (up to 4096).</p>\n  \n  <p><a href=\"http://www.php.net/manual/en/intro.pcre.php\">PCRE Introduction</a></p>\n</blockquote>\n\n<p>This is how the study modifier which <a href=\"http://stackoverflow.com/questions/209906/compile-regex-in-php#210027\">Imran</a> described can store the compiled expression between calls.</p>\n    "},{"t":"Explode string by one or more spaces or tabs","l":"http://stackoverflow.com/questions/1792950/explode-string-by-one-or-more-spaces-or-tabs","q":"\n\n<p>How can I explode a string by one or more spaces or tabs?</p>\n\n<p>Example: </p>\n\n<pre><code>A      B      C      D\n</code></pre>\n\n<p>I want to make this an array.</p>\n    ","a":"\n<pre><code>$parts = preg_split('/\\s+/', $str);\n</code></pre>\n    "},{"t":"How can I remove the string “\\n” from a Ruby string?","l":"http://stackoverflow.com/questions/4190797/how-can-i-remove-the-string-n-from-a-ruby-string","q":"\n\n<p>I have this string:</p>\n\n<pre><code>\"some text\\nandsomemore\"\n</code></pre>\n\n<p>I need to remove the \"\\n\" from it. I've tried</p>\n\n<pre><code>\"some text\\nandsomemore\".gsub('\\n','')\n</code></pre>\n\n<p>but it doesn't work. How do I do it? Thanks for reading.</p>\n    ","a":"\n<p>You need to use <code>\"\\n\"</code> not <code>'\\n'</code> in your gsub. The different quote marks behave differently.</p>\n\n<p>Double quotes <code>\"</code> allow character expansion and expression interpolation ie. they let you use escaped control chars like <code>\\n</code> to represent their true value, in this case, <em>newline</em>, and allow the use of <code>#{expression}</code> so you can weave variables and, well, pretty much any ruby expression you like into the text.</p>\n\n<p>While on the other hand, single quotes <code>'</code> treat the string literally, so there's no expansion, replacement, interpolation or what have you.</p>\n\n<p>In this particular case, it's better to use either the <code>.delete</code> or <code>.tr</code> String method to delete the <em>newlines</em>.</p>\n\n<p><a href=\"http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Strings\">See here for more info</a></p>\n    "},{"t":"How to input a regex in string.replace in python?","l":"http://stackoverflow.com/questions/5658369/how-to-input-a-regex-in-string-replace-in-python","q":"\n\n<p>I need some help on declaring a regex. My inputs are like the following:</p>\n\n<pre><code>this is a paragraph with&lt;[1&gt; in between&lt;/[1&gt; and then there are cases ... where the&lt;[99&gt; number ranges from 1-100&lt;/[99&gt;. \nand there are many other lines in the txt files\nwith&lt;[3&gt; such tags &lt;/[3&gt;\n</code></pre>\n\n<p>The required output is:</p>\n\n<pre><code>this is a paragraph with in between and then there are cases ... where the number ranges from 1-100. \nand there are many other lines in the txt files\nwith such tags\n</code></pre>\n\n<p>I've tried this:</p>\n\n<pre><code>#!/usr/bin/python\nimport os, sys, re, glob\nfor infile in glob.glob(os.path.join(os.getcwd(), '*.txt')):\n    for line in reader: \n        line2 = line.replace('&lt;[1&gt; ', '')\n        line = line2.replace('&lt;/[1&gt; ', '')\n        line2 = line.replace('&lt;[1&gt;', '')\n        line = line2.replace('&lt;/[1&gt;', '')\n\n        print line\n</code></pre>\n\n<p>I've also tried this (but it seems like I'm using the wrong regex syntax):</p>\n\n<pre><code>    line2 = line.replace('&lt;[*&gt; ', '')\n    line = line2.replace('&lt;/[*&gt; ', '')\n    line2 = line.replace('&lt;[*&gt;', '')\n    line = line2.replace('&lt;/[*&gt;', '')\n</code></pre>\n\n<p>I dont want to hard-code the <code>replace</code> from 1 to 99 . . .</p>\n    ","a":"\n<p>This tested snippet should do it:</p>\n\n\n\n<pre class=\"lang-py prettyprint-override\"><code>import re\nline = re.sub(r\"&lt;/?\\[\\d+&gt;\", \"\", line)\n</code></pre>\n\n<p><strong>Edit:</strong> Here's a commented version explaining how it works:</p>\n\n<pre><code>line = re.sub(r\"\"\"\n  (?x) # Use free-spacing mode.\n  &lt;    # Match a literal '&lt;'\n  /?   # Optionally match a '/'\n  \\[   # Match a literal '['\n  \\d+  # Match one or more digits\n  &gt;    # Match a literal '&gt;'\n  \"\"\", \"\", line)\n</code></pre>\n\n<p>Regexes are <em>fun!</em> But I would strongly recommend spending an hour or two studying the basics. For starters, you need to learn which characters are special: <em>\"metacharacters\"</em> which need to be escaped (i.e. with a backslash placed in front - and the rules are different inside and outside character classes.) There is an excellent online tutorial at: <a href=\"http://www.regular-expressions.info/\">www.regular-expressions.info</a>. The time you spend there will pay for itself many times over. Happy regexing!</p>\n    "},{"t":"Regex to match any character including new lines","l":"http://stackoverflow.com/questions/8303488/regex-to-match-any-character-including-new-lines","q":"\n\n<p>Is there a regex to match \"all characters including newlines\"? </p>\n\n<p>For example, in the regex below, there is no output from <code>$2</code> because <code>(.+?)</code> doesn't include new lines when matching.</p>\n\n<pre><code>$string = \"START Curabitur mollis, dolor ut rutrum consequat, arcu nisl ultrices diam, adipiscing aliquam ipsum metus id velit. Aenean vestibulum gravida felis, quis bibendum nisl euismod ut. \n\nNunc at orci sed quam pharetra congue. Nulla a justo vitae diam eleifend dictum. Maecenas egestas ipsum elementum dui sollicitudin tempus. Donec bibendum cursus nisi, vitae convallis ante ornare a. Curabitur libero lorem, semper sit amet cursus at, cursus id purus. Cras varius metus eu diam vulputate vel elementum mauris tempor. \n\nMorbi tristique interdum libero, eu pulvinar elit fringilla vel. Curabitur fringilla bibendum urna, ullamcorper placerat quam fermentum id. Nunc aliquam, nunc sit amet bibendum lacinia, magna massa auctor enim, nec dictum sapien eros in arcu. \n\nPellentesque viverra ullamcorper lectus, a facilisis ipsum tempus et. Nulla mi enim, interdum at imperdiet eget, bibendum nec END\";\n\n$string =~ /(START)(.+?)(END)/;\n\nprint $2;\n</code></pre>\n    ","a":"\n<p>Add the <a href=\"http://perldoc.perl.org/perlre.html#Modifiers\"><code>s</code> modifier</a> to your regex to cause <code>.</code> to match newlines:</p>\n\n<pre><code>$string =~ /(START)(.+?)(END)/s;\n</code></pre>\n    "},{"t":"Split string to equal length substrings in Java","l":"http://stackoverflow.com/questions/3760152/split-string-to-equal-length-substrings-in-java","q":"\n\n<p>How to split the string <code>\"Thequickbrownfoxjumps\"</code> to substrings of equal size in Java.\nEg. <code>\"Thequickbrownfoxjumps\"</code> of 4 equal size should give the output.</p>\n\n<pre><code>[\"Theq\",\"uick\",\"brow\",\"nfox\",\"jump\",\"s\"]\n</code></pre>\n\n<p><strong>Similar Question:</strong></p>\n\n<p><a href=\"http://stackoverflow.com/questions/3699725/split-string-into-equal-length-substrings-in-scala\">Split string into equal-length substrings in Scala</a></p>\n    ","a":"\n<p>Here's the regex one-liner version:</p>\n\n<pre><code>System.out.println(Arrays.toString(\n    \"Thequickbrownfoxjumps\".split(\"(?&lt;=\\\\G.{4})\")\n));\n</code></pre>\n\n<p><code>\\G</code> is a zero-width assertion that matches the position where the previous match ended.  If there <em>was</em> no previous match, it matches the beginning of the input, the same as <code>\\A</code>.  The enclosing lookbehind matches the position that's four characters along from the end of the last match.</p>\n\n<p>Both lookbehind and <code>\\G</code> are advanced regex features, not supported by all flavors.  Furthermore, <code>\\G</code> is not implemented consistently across the flavors that do support it.  This trick will work (for example) in <a href=\"http://ideone.com/oInXz\">Java</a>, Perl, .NET and JGSoft, but not in <a href=\"http://ideone.com/9ZVhK\">PHP</a> (PCRE), Ruby 1.9+ or TextMate (both Oniguruma).</p>\n\n<p>EDIT: I should mention that I don't necessarily <em>recommend</em> this solution if you have other options.  The non-regex solutions in the other answers may be longer, but they're also self-documenting; this one's just about the <em>opposite</em> of that. ;)</p>\n    "},{"t":"deny direct access to a folder and file by htaccess","l":"http://stackoverflow.com/questions/9282124/deny-direct-access-to-a-folder-and-file-by-htaccess","q":"\n\n<p>Here is the scenario:</p>\n\n<ul>\n<li>There is a <code>index.php</code> file in root folder</li>\n<li>some files are included in <code>index.php</code> which are in the <code>includes</code> folder.</li>\n<li>1 other file (<code>submit.php</code>) is in the root folder for form submit action.</li>\n</ul>\n\n<p>I want to restrict direct user access to the files in <code>includes</code> folder by htaccess. also for <code>submit.php</code>. But include will work for <code>index.php</code> file. \nLike, if user types <code>www.domain.com/includes/somepage.php</code>, it will restrict it (may be redirect to a error page).</p>\n    ","a":"\n<p>I would just move the <code>includes</code> folder out of the web-root, but if you want to block direct access to the whole <code>includes</code> folder, you can put a <code>.htaccess</code> file in that folder that contains just:</p>\n\n<pre><code>deny from all\n</code></pre>\n\n<p>That way you cannot open any file from that folder, but you can include them in php without any problems.</p>\n    "},{"t":"Validate a file name on Windows","l":"http://stackoverflow.com/questions/6730009/validate-a-file-name-on-windows","q":"\n\n<pre><code>public static boolean isValidName(String text)\n{\n    Pattern pattern = Pattern.compile(\"^[^/./\\\\:*?\\\"&lt;&gt;|]+$\");\n    Matcher matcher = pattern.matcher(text);\n    boolean isMatch = matcher.matches();\n    return isMatch;\n}\n</code></pre>\n\n<p>Does this method guarantee a valid filename on Windows?</p>\n    ","a":"\n<p>Given the requirements specified in the previously <a href=\"http://msdn.microsoft.com/en-us/library/aa365247%28v=vs.85%29.aspx#file_and_directory_names\">cited MSDN documentation</a>, the following regex should do a pretty good job:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static boolean isValidName(String text)\n{\n    Pattern pattern = Pattern.compile(\n        \"# Match a valid Windows filename (unspecified file system).          \\n\" +\n        \"^                                # Anchor to start of string.        \\n\" +\n        \"(?!                              # Assert filename is not: CON, PRN, \\n\" +\n        \"  (?:                            # AUX, NUL, COM1, COM2, COM3, COM4, \\n\" +\n        \"    CON|PRN|AUX|NUL|             # COM5, COM6, COM7, COM8, COM9,     \\n\" +\n        \"    COM[1-9]|LPT[1-9]            # LPT1, LPT2, LPT3, LPT4, LPT5,     \\n\" +\n        \"  )                              # LPT6, LPT7, LPT8, and LPT9...     \\n\" +\n        \"  (?:\\\\.[^.]*)?                  # followed by optional extension    \\n\" +\n        \"  $                              # and end of string                 \\n\" +\n        \")                                # End negative lookahead assertion. \\n\" +\n        \"[^&lt;&gt;:\\\"/\\\\\\\\|?*\\\\x00-\\\\x1F]*     # Zero or more valid filename chars.\\n\" +\n        \"[^&lt;&gt;:\\\"/\\\\\\\\|?*\\\\x00-\\\\x1F\\\\ .]  # Last char is not a space or dot.  \\n\" +\n        \"$                                # Anchor to end of string.            \", \n        Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE | Pattern.COMMENTS);\n    Matcher matcher = pattern.matcher(text);\n    boolean isMatch = matcher.matches();\n    return isMatch;\n}\n</code></pre>\n\n<p>Note that this regex does not impose any limit on the length of the filename, but a real filename may be limited to 260 or 32767 chars depending on the platform.</p>\n    "},{"t":"Can you create JavaScript regexes on the fly using string variables?","l":"http://stackoverflow.com/questions/4371565/can-you-create-javascript-regexes-on-the-fly-using-string-variables","q":"\n\n<p>Say I wanted to make the following re-usable:</p>\n\n<pre><code>function replace_foo(target, replacement) {\n   return target.replace(\"string_to_replace\",replacement);\n}\n</code></pre>\n\n<p>I might do something like this:</p>\n\n<pre><code>function replace_foo(target, string_to_replace, replacement) {\n   return target.replace(string_to_replace,replacement);\n}\n</code></pre>\n\n<p>With string literals this is easy enough. But what if I want to get a little more tricky with the regex? For example, say I want to replace everything <em>but</em> <code>string_to_replace</code>. Instinctually I would try to extend the above by doing something like:</p>\n\n<pre><code>function replace_foo(target, string_to_replace, replacement) {\n   return target.replace(/^string_to_replace/,replacement);\n}\n</code></pre>\n\n<p>This doesn't seem to work. My guess is that it thinks <code>string_to_replace</code> is a string literal, rather than a variable representing a string. Is it possible to create JavaScript regexes on the fly using string variables? Something like this would be great if at all possible:</p>\n\n<pre><code>function replace_foo(target, string_to_replace, replacement) {\n   var regex = \"/^\" + string_to_replace + \"/\";\n   return target.replace(regex,replacement);\n}\n</code></pre>\n    ","a":"\n<p>There's <code>new RegExp(string, flags)</code> where <code>flags</code> are <code>g</code> or <code>i</code>. So</p>\n\n<pre><code>'GODzilla'.replace( new RegExp('god', 'i'), '' )\n</code></pre>\n\n<p>evaluates to</p>\n\n<pre><code>zilla\n</code></pre>\n    "},{"t":"Remove empty lines in text using Visual Studio","l":"http://stackoverflow.com/questions/12453160/remove-empty-lines-in-text-using-visual-studio","q":"\n\n<p>How to Remove empty lines in Visual Studio?</p>\n    ","a":"\n<p>It's very useful especially if you want to arrange or compare codes, thanks for the people who answer this question, I've got the answer from <a href=\"http://wblo.gs/VGx\" rel=\"nofollow\">here</a> and would like to share it with Stackoverflow:</p>\n\n<p>Visual Studio has ability to delete empty lines in replace operation using regular expressions.</p>\n\n<ul>\n<li><p>Click Ctrl-H (quick replace)</p></li>\n<li><p>Tick \"Use Regular Expressions\"</p></li>\n<li><p>In Find specify <code>^$\\n</code></p></li>\n<li><p>In Replace box delete everything.</p></li>\n<li><p>Click \"Replace All\"</p></li>\n</ul>\n\n<p>All empty lines will be deleted.</p>\n\n<p>Regular expression for empty line consist of   </p>\n\n<p>Beginning of line <code>^</code></p>\n\n<p>End of line <code>$</code></p>\n\n<p>Line break <code>\\n</code></p>\n\n<p>Note that normally in Windows an end of line  indicated by 2 characters <a href=\"/questions/tagged/crlf\" class=\"post-tag\" title=\"show questions tagged 'crlf'\" rel=\"tag\">crlf</a> - Carriage Return (CR, ASCII 13, <code>\\r</code>) Line Feed (LF, ASCII 10, <code>\\n</code>).</p>\n\n<p>A regex to remove blank lines that are/aren't <em>really</em> blank (i.e. they do/don't have spaces):   <code>^:b*$\\n</code></p>\n\n<p>To remove double lines:  <code>^:b*\\n:b*\\n</code> replace with: <code>\\n</code></p>\n\n<blockquote>\n  <p>for Visual Studio 2012, See the regular expression syntax updates in @lennart's answer</p>\n</blockquote>\n    "},{"t":"Is there a Perl shortcut to count the number of matches in a string?","l":"http://stackoverflow.com/questions/1849329/is-there-a-perl-shortcut-to-count-the-number-of-matches-in-a-string","q":"\n\n<p>Suppose I have:</p>\n\n<pre><code>my $string = \"one.two.three.four\";\n</code></pre>\n\n<p>How should I play with context to get the number of times the pattern found a match (3)?  Can this be done using a one-liner?</p>\n\n<p>I tried this:</p>\n\n<pre><code>my ($number) = scalar($string=~/\\./gi);\n</code></pre>\n\n<p>I thought that by putting parentheses around <code>$number</code>, I'd force array context, and by the use of <code>scalar</code>, I'd get the count. However, all I get is <code>1</code>.</p>\n    ","a":"\n<p>That puts the regex itself in scalar context, which isn't what you want. Instead, put the regex in list context (to get the number of matches) and put <em>that</em> into scalar context.</p>\n\n<pre><code> my $number = () = $string =~ /\\./gi;\n</code></pre>\n    "},{"t":"What is a regular expression for a MAC Address?","l":"http://stackoverflow.com/questions/4260467/what-is-a-regular-expression-for-a-mac-address","q":"\n\n<p>In this format:</p>\n\n<p>3D:F2:C9:A6:B3:4F</p>\n\n<p>or</p>\n\n<p>3D-F2-C9-A6-B3-4F</p>\n    ","a":"\n<blockquote>\n  <p>The standard (IEEE 802) format for\n  printing MAC-48 addresses in\n  human-friendly form is six groups of\n  two hexadecimal digits, separated by\n  hyphens <code>-</code> or colons <code>:</code>.</p>\n</blockquote>\n\n<p>So:</p>\n\n<pre><code>^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$\n</code></pre>\n    "},{"t":"How do I verify that a string only contains letters, numbers, underscores and dashes?","l":"http://stackoverflow.com/questions/89909/how-do-i-verify-that-a-string-only-contains-letters-numbers-underscores-and-da","q":"\n\n<p>I know how to do this if I iterate through all of the characters in the string but I am looking for a more elegant method.</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>A regular expression will do the trick with very little code:</p>\n\n<pre><code>import re\n\n...\n\nif re.match(\"^[A-Za-z0-9_-]*$\", my_little_string):\n    # do something here\n</code></pre>\n    "},{"t":"Regex to test if string begins with http:// or https://","l":"http://stackoverflow.com/questions/4643142/regex-to-test-if-string-begins-with-http-or-https","q":"\n\n<p>I'm trying to set a regexp which will check the start of a string, and if it contains either <code>http://</code> or <code>https://</code> it should match it.</p>\n\n<p>How can I do that? I'm trying the following which isn't working:</p>\n\n<pre><code>^[(http)(https)]://\n</code></pre>\n    ","a":"\n<p>Your use of <code>[]</code> is incorrect -- note that <code>[]</code> denotes a <em>character class</em> and will therefore only ever match one character.  The expression <code>[(http)(https)]</code> translates to \"match a <code>(</code>, an <code>h</code>, a <code>t</code>, a <code>p</code>, a <code>)</code>, or an <code>s</code>.\"  (Duplicate characters are ignored.)</p>\n\n<p>Try this:</p>\n\n<pre><code>^https?://\n</code></pre>\n\n<p>If you really want to use alternation, use this syntax instead:</p>\n\n<pre><code>^(http|https)://\n</code></pre>\n    "},{"t":"What is the difference between RegExp’s exec() function and String’s match() function?","l":"http://stackoverflow.com/questions/9214754/what-is-the-difference-between-regexp-s-exec-function-and-string-s-match-fun","q":"\n\n<p>If I run this:</p>\n\n<pre><code>/([^\\/]+)+/g.exec('/a/b/c/d');\n</code></pre>\n\n<p>I get this:</p>\n\n<pre><code>[\"a\", \"a\"]\n</code></pre>\n\n<p>But if I run this:</p>\n\n<pre><code>'/a/b/c/d'.match(/([^\\/]+)+/g);\n</code></pre>\n\n<p>Then I get the expected result of this:</p>\n\n<pre><code>[\"a\", \"b\", \"c\", \"d\"]\n</code></pre>\n\n<p>What's the difference?</p>\n    ","a":"\n<p><code>exec</code> with a global regular expression is meant to be used in a loop, as it will still retrieve all matched subexpressions. So:</p>\n\n<pre><code>var re = /[^\\/]+/g;\nvar match;\n\nwhile (match = re.exec('/a/b/c/d')) {\n    // match is now the next match, in array form.\n}\n\n// No more matches.\n</code></pre>\n\n<p><code>String.match</code> does this for you and discards the subexpressions' results.</p>\n    "},{"t":"Regex - Should hyphens be escaped? [duplicate]","l":"http://stackoverflow.com/questions/9589074/regex-should-hyphens-be-escaped","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/4068629/how-to-match-hyphens-with-regular-expression\">How to match hyphens with Regular Expression?</a>  </p>\n</blockquote>\n\n\n\n<p>Hyphen is a special character in regex, for instance, to select a range, I could do something like: </p>\n\n<pre><code>[0-9A-F]\n</code></pre>\n\n<p>But outside of square brackets it's just a regular character right? I've tested this on a couple of online regex testers, and hyphens seem to function as a normal character outside of square brackets (or even inside of square brackets if it's not in-between two characters - eg [-g] seems to match - or g) whether it's escaped or not. I couldn't find the answer to this, but I'm wondering whether or not it is conventional to escape hyphens.</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>Correct on all fronts. Outside of a character class (that's what the \"square brackets\" are called) the hyphen has no special meaning, and within a character class, you can place a hyphen as the first or last character in the range (e.g. <code>[-a-z]</code> or <code>[0-9-]</code>), <strong>OR</strong> escape it (e.g. <code>[a-z\\-0-9]</code>) in order to add \"hyphen\" to your class.</p>\n\n<p>It's more common to find a hyphen placed first or last within a character class, but by no means will you be lynched by hordes of furious neckbeards for choosing to escape it instead.</p>\n\n<p>(Actually... my experience has been that a lot of regex is employed by folks who don't fully grok the sytax. In these cases, you'll typically see everything escaped (e.g. <code>[a-z\\%\\$\\#\\@\\!\\-\\_]</code>) simply because the engineer doesn't know what's \"special\" and what's not... so they \"play it safe\" and obfuscate the expression with loads of excessive backslashes. You'll be doing yourself, your contemporaries, and your posterity a huge favor by taking the time to really understand regex syntax before using it.)</p>\n\n<p>Great question!</p>\n    "},{"t":"Worst Case Analysis for Regular Expressions","l":"http://stackoverflow.com/questions/4731104/worst-case-analysis-for-regular-expressions","q":"\n\n<p>Are there any tools that will take a particular regular expression and return the worst case scenario in terms of the number of operations required for a certain number of characters that the regular expression is matched against?</p>\n\n<p>So for example, given a <code>(f|a)oo.*[ ]baz</code>, how many steps might the engine possibly go though through to match 100 characters?</p>\n\n<p>I would also be interested if there is a tool that can take a bunch of text samples and show the average operations for each run.</p>\n\n<p>I realize this will depend a lot on the engine used and the implementation -- but I am ignorant as to how common this is. So if it is common for many languages (making my question too vague) I would be particularly interested in Perl and Python.</p>\n    ","a":"\n<p><a href=\"http://www.regexbuddy.com/\" rel=\"nofollow\">Regexbuddy's</a> debugger shows how many steps engine would take to conclude match or not on a given sample. More information on <a href=\"http://www.regular-expressions.info/catastrophic.html\" rel=\"nofollow\">catastrophic backtracking</a> and <a href=\"http://www.regexbuddy.com/debug.html\" rel=\"nofollow\">debugging regular expressions</a>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/5nGMC.png\" alt=\"catastrophic backtracking shown in RegexBuddy\"></p>\n\n<p>PS: It is not free but they offer a 3-month money-back guarantee.</p>\n    "},{"t":"Searching for UUIDs in text with regex","l":"http://stackoverflow.com/questions/136505/searching-for-uuids-in-text-with-regex","q":"\n\n<p>I'm searching for UUIDs in blocks of text using a regex. Currently I'm relying on the assumption that all UUIDs will follow a patttern of 8-4-4-4-12 hexadecimal digits.</p>\n\n<p>Can anyone think of a use case where this assumption would be invalid and would cause me to miss some UUIDs?</p>\n    ","a":"\n<p>I agree that by definition your regex does not miss any UUID. However it may be useful to note that if you are searching especially for Microsoft's Globally Unique Identifiers (GUIDs), there are five equivalent string representations for a GUID:</p>\n\n<pre><code>\"ca761232ed4211cebacd00aa0057b223\" \n\n\"CA761232-ED42-11CE-BACD-00AA0057B223\" \n\n\"{CA761232-ED42-11CE-BACD-00AA0057B223}\" \n\n\"(CA761232-ED42-11CE-BACD-00AA0057B223)\" \n\n\"{0xCA761232, 0xED42, 0x11CE, {0xBA, 0xCD, 0x00, 0xAA, 0x00, 0x57, 0xB2, 0x23}}\"\n</code></pre>\n    "},{"t":"Regexp recognition of email address hard?","l":"http://stackoverflow.com/questions/156430/regexp-recognition-of-email-address-hard","q":"\n\n<p>I recently read somewhere that writing a regexp to match an email address, taking into account all the variations and possibilities of the standard is extremely hard and is significantly more complicated than what one would initially assume.</p>\n\n<p>Can anyone provide some insight as to why that is?  </p>\n\n<p>Are there any known and proven regexps that actually do this fully?</p>\n\n<p>What are some good alternatives to using regexps for matching email addresses?</p>\n    ","a":"\n<p>For the <em>formal</em> e-mail spec, yes, it is technically impossible via Regex due to the recursion of things like comments (especially if you don't remove comments to whitespace first), and the various different formats (an e-mail address isn't always someone@somewhere.tld). You can get close (with some massive and incomprehensible Regex patterns), but a far better way of checking an e-mail is to do the very familiar handshake:</p>\n\n<ul>\n<li>they tell you their e-mail</li>\n<li>you e-mail them a confimation link with a Guid</li>\n<li><p>when they click on the link you know that:</p>\n\n<ol>\n<li>the e-mail is correct</li>\n<li>it exists</li>\n<li>they own it</li>\n</ol></li>\n</ul>\n\n<p>Far better than blindly accepting an e-mail address.</p>\n    "},{"t":"Use regular expression to find/replace substring in NSString","l":"http://stackoverflow.com/questions/9661690/use-regular-expression-to-find-replace-substring-in-nsstring","q":"\n\n<p>I would like to use regular expression to find every instances of a regular expression pattern I.e. <code>&amp;*;</code> in my string and remove that from  so the return value is the original string without any of the matches. Also would like to use the same function to match multiple spaces between words and have a single space instead. Could not find such a function. </p>\n\n<p>Sample input string <code>NSString *str = @\"123 &amp;1245; Ross Test  12\";</code>\nReturn value should be <code>@\"123 Ross Test 12\";</code> \nIf anything matching this pattern \"&amp;* or multiple  white spaces and replaces it with <code>@\"\";</code></p>\n    ","a":"\n<pre><code>NSString *string = @\"123 &amp;1245; Ross Test 12\";\nNSError *error = nil;\nNSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@\"&amp;[^;]*;\" options:NSRegularExpressionCaseInsensitive error:&amp;error];\nNSString *modifiedString = [regex stringByReplacingMatchesInString:string options:0 range:NSMakeRange(0, [string length]) withTemplate:@\"\"];\nNSLog(@\"%@\", modifiedString);\n</code></pre>\n    "},{"t":"Split string into array of character strings","l":"http://stackoverflow.com/questions/5235401/split-string-into-array-of-character-strings","q":"\n\n<p>I need to split a String into an array of single character Strings.</p>\n\n<p>Eg, splitting \"cat\" would give the array \"c\", \"a\", \"t\"</p>\n    ","a":"\n<pre><code>\"cat\".split(\"(?!^)\")\n</code></pre>\n\n<p>This will produce</p>\n\n<blockquote>\n  <p>array [\"c\", \"a\", \"t\"]</p>\n</blockquote>\n    "},{"t":"bash regex with quotes?","l":"http://stackoverflow.com/questions/218156/bash-regex-with-quotes","q":"\n\n<p>The following code</p>\n\n<pre><code>number=1\nif [[ $number =~ [0-9] ]]\nthen\n  echo matched\nfi\n</code></pre>\n\n<p>works. If I try to use quotes in the regex, however, it stops:</p>\n\n<pre><code>number=1\nif [[ $number =~ \"[0-9]\" ]]\nthen\n  echo matched\nfi\n</code></pre>\n\n<p>I tried <code>\"\\[0-9\\]\"</code>, too. What am I missing?</p>\n\n<p>Funnily enough, <a href=\"http://www.tldp.org/LDP/abs/html/abs-guide.html#REGEXMATCHREF\" rel=\"nofollow\">bash advanced scripting guide</a> suggests this should work.</p>\n\n<p>Bash version 3.2.39.</p>\n    ","a":"\n<p>It was changed <a href=\"http://tiswww.case.edu/php/chet/bash/NEWS\">between 3.1 and 3.2</a>. Guess the advanced guide needs an update.</p>\n\n<blockquote>\n  <p>This is a terse description of the new\n  features added to bash-3.2 since the\n  release of bash-3.1.  As always, the\n  manual page (doc/bash.1) is the place\n  to look for complete descriptions.</p>\n  \n  <ol>\n  <li>New Features in Bash</li>\n  </ol>\n  \n  <p>snip</p>\n  \n  <p>f.  Quoting the string argument to the\n  [[ command's  =~ operator now forces\n      string matching, as with the other pattern-matching operators.</p>\n</blockquote>\n\n<p>Sadly this'll break existing quote using scripts unless you had the insight to store patterns in variables and use them instead of the regexes directly. Example below.</p>\n\n<pre><code>$ bash --version\nGNU bash, version 3.2.39(1)-release (i486-pc-linux-gnu)\nCopyright (C) 2007 Free Software Foundation, Inc.\n$ number=2\n$ if [[ $number =~ \"[0-9]\" ]]; then echo match; fi\n$ if [[ $number =~ [0-9] ]]; then echo match; fi\nmatch\n$ re=\"[0-9]\"\n$ if [[ $number =~ $re ]]; then echo MATCH; fi\nMATCH\n\n$ bash --version\nGNU bash, version 3.00.0(1)-release (i586-suse-linux)\nCopyright (C) 2004 Free Software Foundation, Inc.\n$ number=2\n$ if [[ $number =~ \"[0-9]\" ]]; then echo match; fi\nmatch\n$ if [[ \"$number\" =~ [0-9] ]]; then echo match; fi\nmatch\n</code></pre>\n    "},{"t":"Why does split in Java 8 sometimes remove empty strings at start of result array?","l":"http://stackoverflow.com/questions/22718744/why-does-split-in-java-8-sometimes-remove-empty-strings-at-start-of-result-array","q":"\n\n<p>In Java 7 (and earlier) when we split on empty string like </p>\n\n<pre><code>String[] tokens = \"abc\".split(\"\");\n</code></pre>\n\n<p>split mechanism would split in places marked with <code>|</code></p>\n\n<pre><code>|a|b|c|\n</code></pre>\n\n<p>because empty space <code>\"\"</code> exists before and after each character. So as result it would generate at first this array</p>\n\n<pre><code>[\"\", \"a\", \"b\", \"c\", \"\"]\n</code></pre>\n\n<p>and later will remove trailing empty strings (because we didn't explicitly provide negative value to <code>limit</code> argument) so it will finally return </p>\n\n<pre><code>[\"\", \"a\", \"b\", \"c\"]\n</code></pre>\n\n<hr>\n\n<p>Now in JDK 8 split mechanism seems to have changed. Now when we use </p>\n\n<pre><code>\"abc\".split(\"\")\n</code></pre>\n\n<p>we will get <code>[\"a\", \"b\", \"c\"]</code> array instead of <code>[\"\", \"a\", \"b\", \"c\"]</code> so it looks like empty strings at start are also removed, but this theory fails because for instance</p>\n\n<pre><code>\"abc\".split(\"a\")\n</code></pre>\n\n<p>is returning array with empty string at start <code>[\"\", \"bc\"]</code>. </p>\n\n<p>Can someone explain what is going on here and how rules of split for this cases have changed in Java&nbsp;8?</p>\n    ","a":"\n<p>The behavior of <code>String.split</code> (which calls <code>Pattern.split</code>) changes between Java 7 and Java 8.</p>\n\n<h1>Documentation</h1>\n\n<p>Comparing between the documentation of <code>Pattern.split</code> in <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#split%28java.lang.CharSequence,%20int%29\">Java 7</a> and <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#split-java.lang.CharSequence-int-\">Java 8</a>, we observe the following clause being added:</p>\n\n<blockquote>\n  <p>When there is a positive-width match at the beginning of the input sequence then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring.</p>\n</blockquote>\n\n<p>The same clause is also added to <code>String.split</code> in <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-\">Java 8</a>, compared to <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#split%28java.lang.CharSequence,%20int%29\">Java 7</a>.</p>\n\n<h1>Reference implementation</h1>\n\n<p>Let us compare the code of <code>Pattern.split</code> of the reference implemetation in Java 7 and Java 8. The code is retrieved from grepcode, for version 7u40-b43 and 8-b132.</p>\n\n<h2>Java 7</h2>\n\n<pre><code>public String[] split(CharSequence input, int limit) {\n    int index = 0;\n    boolean matchLimited = limit &gt; 0;\n    ArrayList&lt;String&gt; matchList = new ArrayList&lt;&gt;();\n    Matcher m = matcher(input);\n\n    // Add segments before each match found\n    while(m.find()) {\n        if (!matchLimited || matchList.size() &lt; limit - 1) {\n            String match = input.subSequence(index, m.start()).toString();\n            matchList.add(match);\n            index = m.end();\n        } else if (matchList.size() == limit - 1) { // last one\n            String match = input.subSequence(index,\n                                             input.length()).toString();\n            matchList.add(match);\n            index = m.end();\n        }\n    }\n\n    // If no match was found, return this\n    if (index == 0)\n        return new String[] {input.toString()};\n\n    // Add remaining segment\n    if (!matchLimited || matchList.size() &lt; limit)\n        matchList.add(input.subSequence(index, input.length()).toString());\n\n    // Construct result\n    int resultSize = matchList.size();\n    if (limit == 0)\n        while (resultSize &gt; 0 &amp;&amp; matchList.get(resultSize-1).equals(\"\"))\n            resultSize--;\n    String[] result = new String[resultSize];\n    return matchList.subList(0, resultSize).toArray(result);\n}\n</code></pre>\n\n<h2>Java 8</h2>\n\n<pre><code>public String[] split(CharSequence input, int limit) {\n    int index = 0;\n    boolean matchLimited = limit &gt; 0;\n    ArrayList&lt;String&gt; matchList = new ArrayList&lt;&gt;();\n    Matcher m = matcher(input);\n\n    // Add segments before each match found\n    while(m.find()) {\n        if (!matchLimited || matchList.size() &lt; limit - 1) {\n            if (index == 0 &amp;&amp; index == m.start() &amp;&amp; m.start() == m.end()) {\n                // no empty leading substring included for zero-width match\n                // at the beginning of the input char sequence.\n                continue;\n            }\n            String match = input.subSequence(index, m.start()).toString();\n            matchList.add(match);\n            index = m.end();\n        } else if (matchList.size() == limit - 1) { // last one\n            String match = input.subSequence(index,\n                                             input.length()).toString();\n            matchList.add(match);\n            index = m.end();\n        }\n    }\n\n    // If no match was found, return this\n    if (index == 0)\n        return new String[] {input.toString()};\n\n    // Add remaining segment\n    if (!matchLimited || matchList.size() &lt; limit)\n        matchList.add(input.subSequence(index, input.length()).toString());\n\n    // Construct result\n    int resultSize = matchList.size();\n    if (limit == 0)\n        while (resultSize &gt; 0 &amp;&amp; matchList.get(resultSize-1).equals(\"\"))\n            resultSize--;\n    String[] result = new String[resultSize];\n    return matchList.subList(0, resultSize).toArray(result);\n}\n</code></pre>\n\n<p>The addition of the following code in Java 8 excludes the zero-length match at the beginning of the input string, which explains the behavior above.</p>\n\n<pre><code>            if (index == 0 &amp;&amp; index == m.start() &amp;&amp; m.start() == m.end()) {\n                // no empty leading substring included for zero-width match\n                // at the beginning of the input char sequence.\n                continue;\n            }\n</code></pre>\n    "},{"t":"How do I remove letters and dashes and dollar signs in a string using a regular expression?","l":"http://stackoverflow.com/questions/1173612/how-do-i-remove-letters-and-dashes-and-dollar-signs-in-a-string-using-a-regular","q":"\n\n<p>I'm trying to find all letters and dashes and dollar signs and remove them from a text box. </p>\n\n<pre><code>function numbersOnly()\n{\n    if ($('.sumit').val().indexOf([A-Za-z-$])) {\n        $('.sumit').val().replace([A-Za-z-$], \"\");\n    }\n}\n</code></pre>\n\n<p>That's what I've got and I'm pretty sure it's wrong. I'm not too great with regular expressions, but I'm trying to learn them. Does anyone want to help me out and get me started with completing this function?</p>\n\n<p>So.. You've got the inputs.</p>\n\n<pre><code>&lt;div class=\"numInputRight\"&gt;&lt;input type=\"text\" class=\"sumit\" name=\"sumAmount1\"&gt;&lt;/div&gt;\n&lt;div class=\"numInputRight\"&gt;&lt;input type=\"text\" class=\"sumit\" name=\"sumAmount2\"&gt;&lt;/div&gt;\n&lt;div class=\"numInputRight\"&gt;&lt;input type=\"text\" class=\"sumit\" name=\"sumAmount3\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Then you've got the function:</p>\n\n<pre><code>numbersOnly = function()\n{\n  $('.sumit').val().replace(/[A-Za-z$-]/g, \"\");\n  alert($('.sumit').val());\n  return false;\n}   \n</code></pre>\n\n<p>I'm alerting to determine if the replace is working. It's not.</p>\n    ","a":"\n<p>Mark's does it for all non-digits.  If you want to only take out letters, dashes and $, (but leaving decimals, for example), this modification to your original should do it:</p>\n\n<pre><code>$('.sumit').val().replace(/[A-Za-z$-]/g, \"\");\n</code></pre>\n\n<p>(And I personally prefer Mark's updated answer for the same reason he does; you catch everything you can't predict that way.)</p>\n\n<p>For your updated question, the reason the values aren't changing is because val() returns a new string.  It will not change the actual value.  To do that, try:</p>\n\n<pre><code>$('.sumit').each(function() { \n    $(this).val($(this).val().replace(/[A-Za-z$-]/g, \"\")); \n});\nalert($('.sumit').val());\n</code></pre>\n\n<p>I also made it into an each() call so that every element would be done individually.</p>\n    "},{"t":"Javascript regexp number only check","l":"http://stackoverflow.com/questions/9011524/javascript-regexp-number-only-check","q":"\n\n<pre><code>hash = window.location.hash.substr(1);\nvar reg = new RegExp('^[0-9]$');\nconsole.log(reg.test(hash));\n</code></pre>\n\n<p>I get false on both \"123\" and \"123f\". I would like to check if the hash only contains numbers. Did I miss something?</p>\n    ","a":"\n<pre><code>var reg = /^\\d+$/;\n</code></pre>\n\n<p>should do it.  The original matches anything that consists of exactly one digit.</p>\n    "},{"t":"Regex case sensitive","l":"http://stackoverflow.com/questions/9655164/regex-case-sensitive","q":"\n\n<p>How can i make the following regex ignore case sensitive, and match all with the correct chars, but ignore wheter it is lower or uppercase?</p>\n\n<pre><code>G[a-b].*\n</code></pre>\n    ","a":"\n<p>Assuming you want the <strong>whole</strong> regex to ignore case, you should look for the <a href=\"http://www.regular-expressions.info/modifiers.html\"><code>i</code> flag</a>. Nearly all regex engines support it:</p>\n\n<pre><code>/G[a-b].*/i\n\nstring.match(\"G[a-b].*\", \"i\")\n</code></pre>\n\n<p>Check the documentation for your language/platform/tool to find how the matching modes are specified.</p>\n\n<p>If you want only <strong>part</strong> of the regex to be case insensitive (as my original answer presumed), then you have two options:</p>\n\n<ol>\n<li><p>Use the <code>(?i)</code> and [optionally] <code>(?-i)</code> mode modifiers:</p>\n\n<pre><code>(?i)G[a-b](?-i).*\n</code></pre></li>\n<li><p>Put all the variations (i.e. lowercase and uppercase) in the regex - useful if mode modifiers are not supported:</p>\n\n<pre><code>[gG][a-bA-B].*\n</code></pre></li>\n</ol>\n\n<p>One last note: if you're dealing with Unicode characters besides ASCII, check whether or not your regex engine properly supports them.</p>\n    "},{"t":"Replace first occurrence of pattern in a string [duplicate]","l":"http://stackoverflow.com/questions/8809354/replace-first-occurrence-of-pattern-in-a-string","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/141045/how-do-i-replace-the-first-instance-of-a-string-in-net\">How do I replace the <em>first instance</em> of a string in .NET?</a>  </p>\n</blockquote>\n\n\n\n<p>Let's say I have the string:</p>\n\n<pre><code>string s = \"Hello world.\";\n</code></pre>\n\n<p>how can I replace the first <code>o</code> in the word <code>Hello</code> for let's say <code>Foo</code>?</p>\n\n<p>In other words I want to end up with:</p>\n\n<pre><code>\"HellFoo world.\"\n</code></pre>\n\n<p>I know how to replace all the o's but I want to replace just the first one</p>\n    ","a":"\n<p>I think you can use the overload of <a href=\"http://msdn.microsoft.com/en-us/library/haekbhys.aspx\">Regex.Replace</a> to specify the maximum number of times to replace...</p>\n\n<pre><code>var regex = new Regex(Regex.Escape(\"o\"));\nvar newText = regex.Replace(\"Hello World\", \"Foo\", 1);\n</code></pre>\n    "},{"t":"Create array of regex matches","l":"http://stackoverflow.com/questions/6020384/create-array-of-regex-matches","q":"\n\n<p>In Java I am trying to return all regex matches to an array but it seems that you can only check whether the pattern matches something or not (boolean). Can someone help me use a regex match to form an array of all string matching a regex expression in a given string?\nThanks!</p>\n    ","a":"\n<p>You need to create a matcher and use that to iteratively find matches.</p>\n\n<pre><code> import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n\n ...\n\n List&lt;String&gt; allMatches = new ArrayList&lt;String&gt;();\n Matcher m = Pattern.compile(\"your regular expression here\")\n     .matcher(yourStringHere);\n while (m.find()) {\n   allMatches.add(m.group());\n }\n</code></pre>\n\n<p>After this, <code>allMatches</code> contains the matches, and you can use <code>allMatches.toArray(new String[0])</code> to get an array if you really need one.</p>\n\n<hr>\n\n<p>You can also use <code>MatchResult</code> to write helper functions to loop over matches\nsince <code>Matcher.toMatchResult()</code> returns a snapshot of the current group state.</p>\n\n<p>For example you can write a lazy iterator to let you do</p>\n\n<pre><code>for (MatchResult match : allMatches(pattern, input)) {\n  // Use match, and maybe break without doing the work to find all possible matches.\n}\n</code></pre>\n\n<p>by doing something like this:</p>\n\n<pre><code>public static Iterable&lt;MatchResult&gt; allMatches(\n      final Pattern p, final CharSequence input) {\n  return new Iterable&lt;MatchResult&gt;() {\n    public Iterator&lt;MatchResult&gt; iterator() {\n      return new Iterator&lt;MatchResult&gt;() {\n        // Use a matcher internally.\n        final Matcher matcher = p.matcher(input);\n        // Keep a match around that supports any interleaving of hasNext/next calls.\n        MatchResult pending;\n\n        public boolean hasNext() {\n          // Lazily fill pending, and avoid calling find() multiple times if the\n          // clients call hasNext() repeatedly before sampling via next().\n          if (pending == null &amp;&amp; matcher.find()) {\n            pending = matcher.toMatchResult();\n          }\n          return pending != null;\n        }\n\n        public MatchResult next() {\n          // Fill pending if necessary (as when clients call next() without\n          // checking hasNext()), throw if not possible.\n          if (!hasNext()) { throw new NoSuchElementException(); }\n          // Consume pending so next call to hasNext() does a find().\n          MatchResult next = pending;\n          pending = null;\n          return next;\n        }\n\n        /** Required to satisfy the interface, but unsupported. */\n        public void remove() { throw new UnsupportedOperationException(); }\n      };\n    }\n  };\n}\n</code></pre>\n\n<p>With this,</p>\n\n<pre><code>for (MatchResult match : allMatches(Pattern.compile(\"[abc]\"), \"abracadabra\")) {\n  System.out.println(match.group() + \" at \" + match.start());\n}\n</code></pre>\n\n<p>yields</p>\n\n<blockquote>\n<pre><code>a at 0\nb at 1\na at 3\nc at 4\na at 5\na at 7\nb at 8\na at 10\n</code></pre>\n</blockquote>\n    "},{"t":"Replace URLs in text with HTML links","l":"http://stackoverflow.com/questions/1188129/replace-urls-in-text-with-html-links","q":"\n\n<p>Here is a design though: For example is I put a link such as</p>\n\n<blockquote>\n  <p><a href=\"http://example.com\">http://example.com</a></p>\n</blockquote>\n\n<p>in <strong>textarea</strong>. How do I get PHP to detect it’s a <code>http://</code> link and then print it as</p>\n\n<pre><code>print \"&lt;a href='http://www.example.com'&gt;http://www.example.com&lt;/a&gt;\";\n</code></pre>\n\n<p><em>I remember doing something like this before however, it was not fool proof it kept breaking for complex links.</em></p>\n\n<p>Another good idea would be if you have a link such as</p>\n\n<blockquote>\n  <p><a href=\"http://example.com/test.php?val1=bla&amp;val2blablabla%20bla%20bla.bl\">http://example.com/test.php?val1=bla&amp;val2blablabla%20bla%20bla.bl</a></p>\n</blockquote>\n\n<p>fix it so it does</p>\n\n<pre><code>print \"&lt;a href='http://example.com/test.php?val1=bla&amp;val2=bla%20bla%20bla.bla'&gt;\";\nprint \"http://example.com/test.php\";\nprint \"&lt;/a&gt;\";\n</code></pre>\n\n<p>This one is just an after thought.. stackoverflow could also probably use this as well :D</p>\n\n<p>Any Ideas</p>\n    ","a":"\n<p>Let's look at the requirements. You have some user-supplied plain text, which you want to display with hyperlinked URLs.</p>\n\n<ol>\n<li>The \"http://\" protocol prefix should be optional.</li>\n<li>Both domains and IP addresses should be accepted.</li>\n<li>Any valid top-level domain should be accepted, e.g. .aero and .xn--jxalpdlp.</li>\n<li>Port numbers should be allowed.</li>\n<li>URLs must be allowed in normal sentence contexts. For instance, in \"Visit stackoverflow.com.\", the final period is not part of the URL.</li>\n<li>You probably want to allow \"https://\" URLs as well, and perhaps others as well.</li>\n<li>As always when displaying user supplied text in HTML, you want to prevent <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting</a> (XSS). Also, you'll want ampersands in URLs to be <a href=\"http://www.htmlhelp.com/tools/validator/problems.html#amp\">correctly escaped</a> as &amp;amp;.</li>\n<li>You probably don't need support for IPv6 addresses.</li>\n<li><strong>Edit</strong>: As noted in the comments, support for email-adresses is definitely a plus.</li>\n<li><strong>Edit</strong>: Only plain text input is to be supported – HTML tags in the input should not be honoured. (The Bitbucket version supports HTML input.)</li>\n</ol>\n\n<p><strong>Edit</strong>: Check out <a href=\"https://bitbucket.org/kwi/urllinker/\">Bitbucket</a> for the latest version, with support for email addresses, authenticated URLs, URLs in quotes and parentheses, HTML input, as well as an updated TLD list.</p>\n\n<p><em>Please report bugs and enhancement requests using the <a href=\"https://bitbucket.org/kwi/urllinker/issues\">Bitbucket issue tracker</a>. They're easier to keep track of that way (and don't clutter the comment area).</em></p>\n\n<p>Here's my take:</p>\n\n<pre><code>&lt;?php\n$text = &lt;&lt;&lt;EOD\nHere are some URLs:\nstackoverflow.com/questions/1188129/pregreplace-to-detect-html-php\nHere's the answer: http://www.google.com/search?rls=en&amp;q=42&amp;ie=utf-8&amp;oe=utf-8&amp;hl=en. What was the question?\nA quick look at http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax is helpful.\nThere is no place like 127.0.0.1! Except maybe http://news.bbc.co.uk/1/hi/england/surrey/8168892.stm?\nPorts: 192.168.0.1:8080, https://example.net:1234/.\nBeware of Greeks bringing internationalized top-level domains: xn--hxajbheg2az3al.xn--jxalpdlp.\nAnd remember.Nobody is perfect.\n\n&lt;script&gt;alert('Remember kids: Say no to XSS-attacks! Always HTML escape untrusted input!');&lt;/script&gt;\nEOD;\n\n$rexProtocol = '(https?://)?';\n$rexDomain   = '((?:[-a-zA-Z0-9]{1,63}\\.)+[-a-zA-Z0-9]{2,63}|(?:[0-9]{1,3}\\.){3}[0-9]{1,3})';\n$rexPort     = '(:[0-9]{1,5})?';\n$rexPath     = '(/[!$-/0-9:;=@_\\':;!a-zA-Z\\x7f-\\xff]*?)?';\n$rexQuery    = '(\\?[!$-/0-9:;=@_\\':;!a-zA-Z\\x7f-\\xff]+?)?';\n$rexFragment = '(#[!$-/0-9:;=@_\\':;!a-zA-Z\\x7f-\\xff]+?)?';\n\n// Solution 1:\n\nfunction callback($match)\n{\n    // Prepend http:// if no protocol specified\n    $completeUrl = $match[1] ? $match[0] : \"http://{$match[0]}\";\n\n    return '&lt;a href=\"' . $completeUrl . '\"&gt;'\n        . $match[2] . $match[3] . $match[4] . '&lt;/a&gt;';\n}\n\nprint \"&lt;pre&gt;\";\nprint preg_replace_callback(\"&amp;\\\\b$rexProtocol$rexDomain$rexPort$rexPath$rexQuery$rexFragment(?=[?.!,;:\\\"]?(\\s|$))&amp;\",\n    'callback', htmlspecialchars($text));\nprint \"&lt;/pre&gt;\";\n</code></pre>\n\n<ul>\n<li>To properly escape &lt; and &amp; characters, I throw the whole text through htmlspecialchars before processing. This is not ideal, as the html escaping can cause misdetection of URL boundaries.</li>\n<li>As demonstrated by the \"And remember.Nobody is perfect.\" line (in which remember.Nobody is treated as an URL, because of the missing space), further checking on valid top-level domains might be in order.</li>\n</ul>\n\n<p><strong>Edit</strong>: The following code fixes the above two problems, but is quite a bit more verbose since I'm more or less re-implementing <code>preg_replace_callback</code> using <code>preg_match</code>.</p>\n\n<pre><code>// Solution 2:\n\n$validTlds = array_fill_keys(explode(\" \", \".aero .asia .biz .cat .com .coop .edu .gov .info .int .jobs .mil .mobi .museum .name .net .org .pro .tel .travel .ac .ad .ae .af .ag .ai .al .am .an .ao .aq .ar .as .at .au .aw .ax .az .ba .bb .bd .be .bf .bg .bh .bi .bj .bm .bn .bo .br .bs .bt .bv .bw .by .bz .ca .cc .cd .cf .cg .ch .ci .ck .cl .cm .cn .co .cr .cu .cv .cx .cy .cz .de .dj .dk .dm .do .dz .ec .ee .eg .er .es .et .eu .fi .fj .fk .fm .fo .fr .ga .gb .gd .ge .gf .gg .gh .gi .gl .gm .gn .gp .gq .gr .gs .gt .gu .gw .gy .hk .hm .hn .hr .ht .hu .id .ie .il .im .in .io .iq .ir .is .it .je .jm .jo .jp .ke .kg .kh .ki .km .kn .kp .kr .kw .ky .kz .la .lb .lc .li .lk .lr .ls .lt .lu .lv .ly .ma .mc .md .me .mg .mh .mk .ml .mm .mn .mo .mp .mq .mr .ms .mt .mu .mv .mw .mx .my .mz .na .nc .ne .nf .ng .ni .nl .no .np .nr .nu .nz .om .pa .pe .pf .pg .ph .pk .pl .pm .pn .pr .ps .pt .pw .py .qa .re .ro .rs .ru .rw .sa .sb .sc .sd .se .sg .sh .si .sj .sk .sl .sm .sn .so .sr .st .su .sv .sy .sz .tc .td .tf .tg .th .tj .tk .tl .tm .tn .to .tp .tr .tt .tv .tw .tz .ua .ug .uk .us .uy .uz .va .vc .ve .vg .vi .vn .vu .wf .ws .ye .yt .yu .za .zm .zw .xn--0zwm56d .xn--11b5bs3a9aj6g .xn--80akhbyknj4f .xn--9t4b11yi5a .xn--deba0ad .xn--g6w251d .xn--hgbk6aj7f53bba .xn--hlcj6aya9esc7a .xn--jxalpdlp .xn--kgbechtv .xn--zckzah .arpa\"), true);\n\n$position = 0;\nwhile (preg_match(\"{\\\\b$rexProtocol$rexDomain$rexPort$rexPath$rexQuery$rexFragment(?=[?.!,;:\\\"]?(\\s|$))}\", $text, &amp;$match, PREG_OFFSET_CAPTURE, $position))\n{\n    list($url, $urlPosition) = $match[0];\n\n    // Print the text leading up to the URL.\n    print(htmlspecialchars(substr($text, $position, $urlPosition - $position)));\n\n    $domain = $match[2][0];\n    $port   = $match[3][0];\n    $path   = $match[4][0];\n\n    // Check if the TLD is valid - or that $domain is an IP address.\n    $tld = strtolower(strrchr($domain, '.'));\n    if (preg_match('{\\.[0-9]{1,3}}', $tld) || isset($validTlds[$tld]))\n    {\n        // Prepend http:// if no protocol specified\n        $completeUrl = $match[1][0] ? $url : \"http://$url\";\n\n        // Print the hyperlink.\n        printf('&lt;a href=\"%s\"&gt;%s&lt;/a&gt;', htmlspecialchars($completeUrl), htmlspecialchars(\"$domain$port$path\"));\n    }\n    else\n    {\n        // Not a valid URL.\n        print(htmlspecialchars($url));\n    }\n\n    // Continue text parsing from after the URL.\n    $position = $urlPosition + strlen($url);\n}\n\n// Print the remainder of the text.\nprint(htmlspecialchars(substr($text, $position)));\n</code></pre>\n    "},{"t":"Regular expression for matching HH:MM time format","l":"http://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format","q":"\n\n<p>I want a regexp for matching time in HH:MM format. Here's what I have, and it works:</p>\n\n<pre><code>^[0-2][0-3]:[0-5][0-9]$\n</code></pre>\n\n<p>This matches everything from 00:00 to 23:59.</p>\n\n<p>However, I want to change it so 0:00 and 1:00, etc are also matched as well as 00:00 and 01:30. I.e to make the leftmost digit optional, to match HH:MM as well as H:MM.</p>\n\n<p>Any ideas how to make that change? I need this to work in javascript as well as php.</p>\n    ","a":"\n<p>Your original regular expression has flaws: it wouldn't match <code>04:00</code> for example.</p>\n\n<p>This may work better:</p>\n\n<pre><code>^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\n</code></pre>\n    "},{"t":"How can I store regex captures in an array in Perl?","l":"http://stackoverflow.com/questions/2304577/how-can-i-store-regex-captures-in-an-array-in-perl","q":"\n\n<p>I'm trying to use regex in Perl.  What I was wonder was if it is possible to store all matches to the expression into an array?  I know I can use the following: <code>($1,...,$n) = m/expr/g;</code> but it seems as though that can only be used if you know the number of matches you are looking for. I have tried <code>my @array = m/expr/g;</code> but that doesn't seem to work.</p>\n\n<p>Thanks for your help!</p>\n    ","a":"\n<p>If you're doing a global match (<code>/g</code>) then the regex in list context will return all of the captured matches. Simply do:</p>\n\n<pre><code>my @matches = ( $str =~ /pa(tt)ern/g )\n</code></pre>\n\n<p>This command for example:</p>\n\n<pre><code>perl -le '@m = ( \"foo12gfd2bgbg654\" =~ /(\\d+)/g ); print for @m'\n</code></pre>\n\n<p>Gives the output: </p>\n\n<pre><code>12\n2\n654\n</code></pre>\n    "},{"t":"Is there a good, online, interactive regex tutorial? [closed]","l":"http://stackoverflow.com/questions/476714/is-there-a-good-online-interactive-regex-tutorial","q":"\n\n<p>Now, I know both SQL and regexes just fine, but a few times on this site, I came across someone working through the exercises on <a href=\"http://sqlzoo.net/\">SQLzoo.net</a>.  As far as I could tell, this was a wonderful online resource where someone can pretty easily learn SQL by example, writing many toy queries against several toy databases.  I will likely redirect people wanting to learn SQL to that site.</p>\n\n<p>These SQLzoo people also run some other tutorials, including some on a few programming languages.  However, the section on regular expressions is pretty small (<em>e.g.</em>, see <a href=\"http://progzoo.net/wiki/Strings_Tutorial%2C_Pattern_Matching\">Java</a>'s page), and I don't think you can actually <em>learn</em> regexes from it.  I think a good, online tutorial <em>might</em> help with the onslaught of basic regex questions we have here.  (Maybe after the answer, we could suggest that they take a look at the tutorial.)</p>\n\n<p>So, <strong>is there a good, online, interactive regex tutorial</strong> along the lines of that SQL tutorial?  I looked online briefly, but all I could find were non-interactive tutorials or simple pages (still useful, though!) that let you match a string against a pattern so that you could see what it matches/captures/etc.</p>\n    ","a":"\n<p>The site written by @wchung, RegexOne seems to be a perfect answer to the original question. Check that out first ;)</p>\n\n<p>The tool txt2re is, as commenters have rightly mentioned, very ugly. <a href=\"http://gskinner.com/RegExr/\">RegExr</a> (ht @runrunraygun) is a much prettier tool for editing regular expressions, although has completely different functionality and still no tutorial.</p>\n\n<p>The main reason it might be useful for learning regexes is the ability to see the effect each edit is having on the matching.</p>\n\n<p><strong>Original answer:</strong></p>\n\n<p>I always thought <a href=\"http://www.txt2re.com/\">txt2re</a> was a very clever tool. You just type an example of some text you want to match, and then it lets you pick bits out to match against. I'd consider it to be a fairly useful tool for learning regular expressions.</p>\n    "},{"t":"RegEx in Sublime Text: Match any character, including newlines?","l":"http://stackoverflow.com/questions/11992596/regex-in-sublime-text-match-any-character-including-newlines","q":"\n\n<p>Is there a way to match any character in Sublime Text, including newlines? I saw that Sublime uses Boost's syntax but that the <code>.</code> character won't match newlines without a specific flag set. </p>\n    ","a":"\n<p>Try adding the <code>(?s)</code> inline flag start the start of the pattern. That will make <code>.</code> match <em>any</em> character.</p>\n    "},{"t":"How to remove all whitespace from a string?","l":"http://stackoverflow.com/questions/5992082/how-to-remove-all-whitespace-from-a-string","q":"\n\n<p>So <code>\" xx yy 11 22  33 \"</code> will become <code>\"xxyy112233\"</code>. How can I achieve this?</p>\n    ","a":"\n<p>In general, we want a solution that is vectorised, so here's a better test example:</p>\n\n<pre><code>whitespace &lt;- \" \\t\\n\\r\\v\\f\" # space, tab, newline, \n                            # carriage return, vertical tab, form feed\nx &lt;- c(\n  \" x y \",           # spaces before, after and in between\n  \" \\u2190 \\u2192 \", # contains unicode chars\n  paste0(            # varied whitespace     \n    whitespace, \n    \"x\", \n    whitespace, \n    \"y\", \n    whitespace, \n    collapse = \"\"\n  ),   \n  NA                 # missing\n)\n## [1] \" x y \"                           \n## [2] \" ← → \"                           \n## [3] \" \\t\\n\\r\\v\\fx \\t\\n\\r\\v\\fy \\t\\n\\r\\v\\f\"\n## [4] NA\n</code></pre>\n\n<hr>\n\n<h3>The base R approach: <code>gsub</code></h3>\n\n<p><a href=\"http://www.inside-r.org/r-doc/base/gsub\"><code>gsub</code></a> replaces all instances of a string (<code>fixed = TRUE</code>) or regular expression (<code>fixed = FALSE</code>, the default) with another string.  To remove all spaces, use:</p>\n\n<pre><code>gsub(\" \", \"\", x, fixed = TRUE)\n## [1] \"xy\"                            \"←→\"             \n## [3] \"\\t\\n\\r\\v\\fx\\t\\n\\r\\v\\fy\\t\\n\\r\\v\\f\" NA \n</code></pre>\n\n<p>As DWin noted, in this case <code>fixed = TRUE</code> isn't necessary but provides slightly better performance since matching a fixed string is faster than matching a regular expression.</p>\n\n<p>If you want to remove all types of whitespace, use:</p>\n\n<pre><code>gsub(\"[[:space:]]\", \"\", x) # note the double square brackets\n## [1] \"xy\" \"←→\" \"xy\" NA \n\ngsub(\"\\\\s\", \"\", x)         # same; note the double backslash\n\nlibrary(regex)\ngsub(space(), \"\", x)       # same\n</code></pre>\n\n<p><a href=\"http://www.inside-r.org/r-doc/base/Regex\"><code>\"[:space:]\"</code></a> is an R-specific regular expression group matching all space characters.  <code>\\s</code> is a language-independent regular-expression that does the same thing.</p>\n\n<hr>\n\n<h3>The <code>stringr</code> approach: <code>str_replace_all</code> and <code>str_trim</code></h3>\n\n<p><code>stringr</code> provides more human-readable wrappers around the base R functions (though as of Dec 2014, the development version has a branch built on top of <code>stringi</code>, mentioned below).  The equivalents of the above commands, using [<code>str_replace_all][3]</code>, are:</p>\n\n<pre><code>library(stringr)\nstr_replace_all(x, fixed(\" \"), \"\")\nstr_replace_all(x, space(), \"\")\n</code></pre>\n\n<p><code>stringr</code> also has a <a href=\"http://www.inside-r.org/packages/CRAN/stringr/docs/str_trim\"><code>str_trim</code></a> function which removes only leading and trailing whitespace.</p>\n\n<pre><code>str_trim(x) \n## [1] \"x y\"          \"← →\"          \"x \\t\\n\\r\\v\\fy\" NA    \nstr_trim(x, \"left\")    \n## [1] \"x y \"                   \"← → \"    \n## [3] \"x \\t\\n\\r\\v\\fy \\t\\n\\r\\v\\f\" NA     \nstr_trim(x, \"right\")    \n## [1] \" x y\"                   \" ← →\"    \n## [3] \" \\t\\n\\r\\v\\fx \\t\\n\\r\\v\\fy\" NA      \n</code></pre>\n\n<hr>\n\n<h3>The <code>stringi</code> approach: <code>stri_replace_all_charclass</code> and <code>stri_trim</code></h3>\n\n<p><code>stringi</code> is built upon the platform-independent <a href=\"http://site.icu-project.org/\">ICU library</a>, and has an extensive set of string manipulation functions.  The <a href=\"http://docs.rexamine.com/R-man/stringi/stri_replace.html\">equivalents</a> of the above are:</p>\n\n<pre><code>library(stringi)\nstri_replace_all_fixed(x, \" \", \"\")\nstri_replace_all_charclass(x, \"\\\\p{WHITE_SPACE}\", \"\")\n</code></pre>\n\n<p>Here <a href=\"http://docs.rexamine.com/R-man/stringi/stringi-search-charclass.html\"><code>\"\\\\p{WHITE_SPACE}\"</code></a> is an alternate syntax for the set of Unicode code points considered to be whitespace, equivalent to <code>\"[[:space:]]\"</code>, <code>\"\\\\s\"</code> and <code>space()</code>.  For more complex regular expression replacements, there is also <code>stri_replace_all_regex</code>.</p>\n\n<p><code>stringi</code> also has <a href=\"http://docs.rexamine.com/R-man/stringi/stri_trim.html\">trim functions</a>.</p>\n\n<pre><code>stri_trim(x)\nstri_trim_both(x)    # same\nstri_trim(x, \"left\")\nstri_trim_left(x)    # same\nstri_trim(x, \"right\")  \nstri_trim_right(x)   # same\n</code></pre>\n    "},{"t":"javascript regex - look behind alternative?","l":"http://stackoverflow.com/questions/7376238/javascript-regex-look-behind-alternative","q":"\n\n<p>Here is a regex that works fine in most regex implementations:</p>\n\n<pre><code>(?&lt;!filename)\\.js$\n</code></pre>\n\n<p>This matchs .js for a string which ends with .js except for filename.js</p>\n\n<p>Javascript doesn't have regex lookbehind. Is anyone able put together an alternative regex which achieve the same result and works in javascript?</p>\n\n<p>Here are some thoughts, but needs helper functions. I was hoping to achieve it just with a regex:\n<a href=\"http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript\">http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript</a></p>\n    ","a":"\n<p><code>^(?!filename).+\\.js</code> works for me</p>\n\n<p>tested against:</p>\n\n<ul>\n<li>test.js match</li>\n<li>blabla.js match</li>\n<li>filename.js no match</li>\n</ul>\n\n<p>A proper explanation for this regex can be found at <a href=\"http://stackoverflow.com/questions/406230/regular-expression-to-match-string-not-containing-a-word\">Regular expression to match string not containing a word?</a></p>\n\n<p>Look ahead is available since <a href=\"http://en.wikipedia.org/wiki/JavaScript#Versions\">version 1.5 of javascript</a> and is supported by all major browsers</p>\n\n<p><strong>Updated</strong> to match filename2.js and 2filename.js but not filename.js</p>\n\n<p><code>(^(?!filename\\.js$).).+\\.js</code></p>\n    "},{"t":"Java Regex Replace with Capturing Group","l":"http://stackoverflow.com/questions/1277157/java-regex-replace-with-capturing-group","q":"\n\n<p>Is there any way to replace a regexp with modified content of capture group?</p>\n\n<p>Example:</p>\n\n<pre><code>Pattern regex = Pattern.compile(\"(\\\\d{1,2})\");\nMatcher regexMatcher = regex.matcher(text);\nresultString = regexMatcher.replaceAll(\"$1\"); // *3 ??\n</code></pre>\n\n<p>And I'd like to replace all occurrence with $1 multiplied by 3.</p>\n\n<p><strong>edit:</strong></p>\n\n<p>Looks like, something's wrong :(</p>\n\n<p>If I use</p>\n\n<pre><code>Pattern regex = Pattern.compile(\"(\\\\d{1,2})\");\nMatcher regexMatcher = regex.matcher(\"12 54 1 65\");\ntry {\n    String resultString = regexMatcher.replaceAll(regexMatcher.group(1));\n} catch (Exception e) {\n    e.printStackTrace();\n}\n</code></pre>\n\n<p>It throws an IllegalStateException: No match found</p>\n\n<p>But</p>\n\n<pre><code>Pattern regex = Pattern.compile(\"(\\\\d{1,2})\");\nMatcher regexMatcher = regex.matcher(\"12 54 1 65\");\ntry {\n    String resultString = regexMatcher.replaceAll(\"$1\");\n} catch (Exception e) {\n    e.printStackTrace();\n}\n</code></pre>\n\n<p>works fine, but I can't change the $1 :(</p>\n\n<p><strong>edit:</strong></p>\n\n<p>Now, it's working :)</p>\n    ","a":"\n<p>How about:    </p>\n\n<pre><code>if (regexMatcher.find()) {\n    resultString = regexMatcher.replaceAll(\n            String.valueOf(3 * Integer.parseInt(regexMatcher.group(1))));\n}\n</code></pre>\n\n<p>To get the first match, use <code>#find()</code>. After that, you can use <code>#group(1)</code> to refer to this first match, and replace all matches by the first maches value multiplied by 3.</p>\n\n<p>And in case you want to replace each match with that match's value multiplied by 3:</p>\n\n<pre><code>    Pattern p = Pattern.compile(\"(\\\\d{1,2})\");\n    Matcher m = p.matcher(\"12 54 1 65\");\n    StringBuffer s = new StringBuffer();\n    while (m.find())\n        m.appendReplacement(s, String.valueOf(3 * Integer.parseInt(m.group(1))));\n    System.out.println(s.toString());\n</code></pre>\n\n<p>You may want to look through <a href=\"http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html\"><code>Matcher</code>'s documentation</a>, where this and a lot more stuff is covered in detail.</p>\n    "},{"t":"Writing a parser for regular expressions","l":"http://stackoverflow.com/questions/3639574/writing-a-parser-for-regular-expressions","q":"\n\n<p>Even after years of programming, I'm ashamed to say that I've never really fully grasped regular expressions. In general, when a problem calls for a regex, I can usually (after a bunch of referring to syntax) come up with an appropriate one, but it's a technique that I find myself using increasingly often. </p>\n\n<p>So, to teach myself and understand regular expressions <em>properly</em>, I've decided to do what I always do when trying to learn something; i.e., try to write something ambitious that I'll probably abandon as soon as I feel I've learnt enough.</p>\n\n<p>To this end, I want to write a regular expression parser in Python. In this case, \"learn enough\" means that I want to implement a parser that can understand Perl's extended regex syntax completely. However, it doesn't have to be the most efficient parser or even necessarily usable in the real-world. It merely has to correctly match or fail to match a pattern in a string.</p>\n\n<p>The question is, where do I start? I know almost nothing about how regexes are parsed and interpreted apart from the fact that it involves a finite state automaton in some way. Any suggestions for how to approach this rather daunting problem would be much appreciated.</p>\n\n<p><strong>EDIT:</strong> I should clarify that while I'm going to <em>implement</em> the regex parser in Python, I'm not overly fussed about what programming language the examples or articles are written in. As long as it's not in Brainfuck, I will probably understand enough of it to make it worth my while.</p>\n    ","a":"\n<p>Writing an implementation of a regular expression engine is indeed a quite complex task.</p>\n\n<p>But if you are interested in how to do it, even if you can't understand enough of the details to actually implement it, I would recommend that you at least look at this article:</p>\n\n<p><a href=\"http://swtch.com/~rsc/regexp/regexp1.html\"><strong>Regular Expression Matching Can Be Simple And Fast</strong>\n(but is slow in Java, Perl, PHP, Python, Ruby, ...) </a></p>\n\n<p>It explains how many of the popular programming languages implement regular expressions in a way that can be very slow for some regular expressions, and explains a slightly different method that is faster. The article includes some details of how the proposed implementation works, including some source code in C. It may be a bit heavy reading if you are just starting to learn regular expressions, but I think it is well worth knowing about the difference between the two approaches.</p>\n    "},{"t":"c++11 regex slower than python","l":"http://stackoverflow.com/questions/14205096/c11-regex-slower-than-python","q":"\n\n<p>hi i would like to understand why the following code which does a split string split using regex</p>\n\n<pre><code>#include&lt;regex&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\n\nstd::vector&lt;std::string&gt; split(const std::string &amp;s){\n    static const std::regex rsplit(\" +\");\n    auto rit = std::sregex_token_iterator(s.begin(), s.end(), rsplit, -1);\n    auto rend = std::sregex_token_iterator();\n    auto res = std::vector&lt;std::string&gt;(rit, rend);\n    return res;\n}\n\nint main(){\n    for(auto i=0; i&lt; 10000; ++i)\n       split(\"a b c\", \" \");\n    return 0;\n}\n</code></pre>\n\n<p>is slower then the following python code</p>\n\n<pre><code>import re\nfor i in range(10000):\n    re.split(' +', 'a b c')\n</code></pre>\n\n<p>here's </p>\n\n<pre><code>&gt; python test.py  0.05s user 0.01s system 94% cpu 0.070 total\n./test  0.26s user 0.00s system 99% cpu 0.296 total\n</code></pre>\n\n<p>Im using clang++ on osx.</p>\n\n<p>compiling with -O3 brings it to  down to <code>0.09s user 0.00s system 99% cpu 0.109 total</code></p>\n    ","a":"\n<h2>Notice</h2>\n\n<p>See also this answer: <a href=\"http://stackoverflow.com/a/21708215\">http://stackoverflow.com/a/21708215</a> which was the base for the <strong>EDIT 2</strong> at the bottom here.</p>\n\n<hr>\n\n<p>I've augmented the loop to 1000000 to get a better timing measure.</p>\n\n<p>This is my Python timing:</p>\n\n<pre><code>real    0m2.038s\nuser    0m2.009s\nsys     0m0.024s\n</code></pre>\n\n<p>Here's an equivalent of your code, just a bit prettier:</p>\n\n<pre><code>#include &lt;regex&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nstd::vector&lt;std::string&gt; split(const std::string &amp;s, const std::regex &amp;r)\n{\n    return {\n        std::sregex_token_iterator(s.begin(), s.end(), r, -1),\n        std::sregex_token_iterator()\n    };\n}\n\nint main()\n{\n    const std::regex r(\" +\");\n    for(auto i=0; i &lt; 1000000; ++i)\n       split(\"a b c\", r);\n    return 0;\n}\n</code></pre>\n\n<p>Timing:</p>\n\n<pre><code>real    0m5.786s\nuser    0m5.779s\nsys     0m0.005s\n</code></pre>\n\n<hr>\n\n<p>This is an optimization to avoid construction/allocation of vector and string objects:</p>\n\n<pre><code>#include &lt;regex&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nvoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)\n{\n    auto rit = std::sregex_token_iterator(s.begin(), s.end(), r, -1);\n    auto rend = std::sregex_token_iterator();\n    v.clear();\n    while(rit != rend)\n    {\n        v.push_back(*rit);\n        ++rit;\n    }\n}\n\nint main()\n{\n    const std::regex r(\" +\");\n    std::vector&lt;std::string&gt; v;\n    for(auto i=0; i &lt; 1000000; ++i)\n       split(\"a b c\", r, v);\n    return 0;\n}\n</code></pre>\n\n<p>Timing:</p>\n\n<pre><code>real    0m3.034s\nuser    0m3.029s\nsys     0m0.004s\n</code></pre>\n\n<p>This is near a 100% performance improvement.</p>\n\n<p>The vector is created before the loop, and can grow its memory in the first iteration. Afterwards there's no memory deallocation by <code>clear()</code>, the vector maintains the memory and construct strings <em>in-place</em>.</p>\n\n<hr>\n\n<p>Another performance increase would be to avoid construction/destruction <code>std::string</code> completely, and hence, allocation/deallocation of its objects.</p>\n\n<p>This is a tentative in this direction:</p>\n\n<pre><code>#include &lt;regex&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nvoid split(const char *s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)\n{\n    auto rit = std::cregex_token_iterator(s, s + std::strlen(s), r, -1);\n    auto rend = std::cregex_token_iterator();\n    v.clear();\n    while(rit != rend)\n    {\n        v.push_back(*rit);\n        ++rit;\n    }\n}\n</code></pre>\n\n<p>Timing:</p>\n\n<pre><code>real    0m2.509s\nuser    0m2.503s\nsys     0m0.004s\n</code></pre>\n\n<p>An ultimate improvement would be to have a <code>std::vector</code> of <code>const char *</code> as return, where each char pointer would point to a substring inside the original <code>s</code> <em>c string</em> itself. The problem is that, you can't do that because each of them would not be null terminated (for this, see usage of C++1y <code>string_ref</code> in a later sample).</p>\n\n<hr>\n\n<p>This last improvement could also be achieved with this:</p>\n\n<pre><code>#include &lt;regex&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nvoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)\n{\n    auto rit = std::cregex_token_iterator(s.data(), s.data() + s.length(), r, -1);\n    auto rend = std::cregex_token_iterator();\n    v.clear();\n    while(rit != rend)\n    {\n        v.push_back(*rit);\n        ++rit;\n    }\n}\n\nint main()\n{\n    const std::regex r(\" +\");\n    std::vector&lt;std::string&gt; v;\n    for(auto i=0; i &lt; 1000000; ++i)\n       split(\"a b c\", r, v); // the constant string(\"a b c\") should be optimized\n                             // by the compiler. I got the same performance as\n                             // if it was an object outside the loop\n    return 0;\n}\n</code></pre>\n\n<hr>\n\n<p>I've built the samples with clang 3.3 (from trunk) with -O3. Maybe other regex libraries are able to perform better, but in any case, allocations/deallocations are frequently a performance hit.</p>\n\n<hr>\n\n<h1>Boost.Regex</h1>\n\n<p>This is the <code>boost::regex</code> timing for the <em>c string</em> arguments sample:</p>\n\n<pre><code>real    0m1.284s\nuser    0m1.278s\nsys     0m0.005s\n</code></pre>\n\n<p>Same code, <code>boost::regex</code> and <code>std::regex</code> interface in this sample are identical, just needed to change the namespace and include.</p>\n\n<p>Best wishes for it to get better over time, C++ stdlib regex implementations are in their infancy.</p>\n\n<h2>EDIT</h2>\n\n<p>For sake of completion, I've tried this (the above mentioned \"ultimate improvement\" suggestion) and it didn't improved performance of the equivalent <code>std::vector&lt;std::string&gt; &amp;v</code> version in anything:</p>\n\n<pre><code>#include &lt;regex&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\ntemplate&lt;typename Iterator&gt; class intrusive_substring\n{\nprivate:\n    Iterator begin_, end_;\n\npublic:\n    intrusive_substring(Iterator begin, Iterator end) : begin_(begin), end_(end) {}\n\n    Iterator begin() {return begin_;}\n    Iterator end() {return end_;}\n};\n\nusing intrusive_char_substring = intrusive_substring&lt;const char *&gt;;\n\nvoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;intrusive_char_substring&gt; &amp;v)\n{\n    auto rit = std::cregex_token_iterator(s.data(), s.data() + s.length(), r, -1);\n    auto rend = std::cregex_token_iterator();\n    v.clear(); // This can potentially be optimized away by the compiler because\n               // the intrusive_char_substring destructor does nothing, so\n               // resetting the internal size is the only thing to be done.\n               // Formerly allocated memory is maintained.\n    while(rit != rend)\n    {\n        v.emplace_back(rit-&gt;first, rit-&gt;second);\n        ++rit;\n    }\n}\n\nint main()\n{\n    const std::regex r(\" +\");\n    std::vector&lt;intrusive_char_substring&gt; v;\n    for(auto i=0; i &lt; 1000000; ++i)\n       split(\"a b c\", r, v);\n\n    return 0;\n}\n</code></pre>\n\n<p>This has to do with the <a href=\"http://cxx1y-array-string-ref.googlecode.com/git/paper.html\">array_ref and string_ref proposal</a>. Here's a sample code using it:</p>\n\n<pre><code>#include &lt;regex&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;string_ref&gt;\n\nvoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string_ref&gt; &amp;v)\n{\n    auto rit = std::cregex_token_iterator(s.data(), s.data() + s.length(), r, -1);\n    auto rend = std::cregex_token_iterator();\n    v.clear();\n    while(rit != rend)\n    {\n        v.emplace_back(rit-&gt;first, rit-&gt;length());\n        ++rit;\n    }\n}\n\nint main()\n{\n    const std::regex r(\" +\");\n    std::vector&lt;std::string_ref&gt; v;\n    for(auto i=0; i &lt; 1000000; ++i)\n       split(\"a b c\", r, v);\n\n    return 0;\n}\n</code></pre>\n\n<p>It will also be cheaper to return a vector of <code>string_ref</code> rather than <code>string</code> copies for the case of <code>split</code> with vector return.</p>\n\n<h1>EDIT 2</h1>\n\n<p>This new solution is able to get output by return. I have used Marshall Clow's <code>string_view</code> (<code>string_ref</code> got renamed) libc++ implementation found at <a href=\"https://github.com/mclow/string_view\">https://github.com/mclow/string_view</a>.</p>\n\n<pre><code>#include &lt;string&gt;\n#include &lt;string_view&gt;\n#include &lt;boost/regex.hpp&gt;\n#include &lt;boost/range/iterator_range.hpp&gt;\n#include &lt;boost/iterator/transform_iterator.hpp&gt;\n\nusing namespace std;\nusing namespace std::experimental;\nusing namespace boost;\n\nstring_view stringfier(const cregex_token_iterator::value_type &amp;match) {\n    return {match.first, static_cast&lt;size_t&gt;(match.length())};\n}\n\nusing string_view_iterator =\n    transform_iterator&lt;decltype(&amp;stringfier), cregex_token_iterator&gt;;\n\niterator_range&lt;string_view_iterator&gt; split(string_view s, const regex &amp;r) {\n    return {\n        string_view_iterator(\n            cregex_token_iterator(s.begin(), s.end(), r, -1),\n            stringfier\n        ),\n        string_view_iterator()\n    };\n}\n\nint main() {\n    const regex r(\" +\");\n    for (size_t i = 0; i &lt; 1000000; ++i) {\n        split(\"a b c\", r);\n    }\n}\n</code></pre>\n\n<p>Timing:</p>\n\n<pre><code>real    0m0.385s\nuser    0m0.385s\nsys     0m0.000s\n</code></pre>\n\n<p>Note how faster this is compared to previous results. Of course, it's not filling a <code>vector</code> inside the loop (nor matching anything in advance probably too), but you get a range anyway, which you can range over with range-based <code>for</code>, or even use it to fill a <code>vector</code>.</p>\n\n<p>As ranging over the <code>iterator_range</code> creates <code>string_view</code>s over an original <code>string</code>(or a <em>null terminated string</em>), this gets very lightweight, never generating unnecessary string allocations.</p>\n\n<p>Just to compare using this <code>split</code> implementation but actually filling a <code>vector</code> we could do this:</p>\n\n<pre><code>int main() {\n    const regex r(\" +\");\n    vector&lt;string_view&gt; v;\n    v.reserve(10);\n    for (size_t i = 0; i &lt; 1000000; ++i) {\n        copy(split(\"a b c\", r), back_inserter(v));\n        v.clear();\n    }\n}\n</code></pre>\n\n<p>This uses boost range copy algorithm to fill the vector in each iteration, the timing is:</p>\n\n<pre><code>real    0m1.002s\nuser    0m0.997s\nsys     0m0.004s\n</code></pre>\n\n<p>As can be seen, no much difference in comparison with the optimized <code>string_view</code> output param version.</p>\n\n<p>Note also there's <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3593.html\">a proposal for a <code>std::split</code></a> that would work like this.</p>\n    "},{"t":"Convert a string to regular expression ruby","l":"http://stackoverflow.com/questions/8652715/convert-a-string-to-regular-expression-ruby","q":"\n\n<p>I need to convert string like \"/[\\w\\s]+/\" to regular expression.</p>\n\n<p><code>\"/[\\w\\s]+/\" =&gt; /[\\w\\s]+/</code></p>\n\n<p>I tried using different Regexp methods like:</p>\n\n<p><code>Regexp.new(\"/[\\w\\s]+/\") =&gt; /\\/[w ]+\\//</code>, Similarly <code>Regexp.compile</code> and <code>Regexp.escape</code>. But none of them returns as I expected.</p>\n\n<p>Further more I tried removing backslashes</p>\n\n<p><code>Regexp.new(\"[\\w\\s]+\") =&gt; /[w ]+/</code> But not have a luck.</p>\n\n<p>Then I tried to doing simply </p>\n\n<pre><code>str = \"[\\w\\s]+\"\n=&gt; \"[w ]+\"\n</code></pre>\n\n<p>It escapes. Now how could string remains as it is and convert to a regexp object?</p>\n    ","a":"\n<p>Looks like here you need the initial string to be in single quotes (refer <a href=\"http://en.wikibooks.org/wiki/Ruby_Programming/Strings#Single_quotes\">this page</a>)</p>\n\n<pre><code>&gt;&gt; str = '[\\w\\s]+'\n =&gt; \"[\\\\w\\\\s]+\" \n&gt;&gt; Regexp.new str\n =&gt; /[\\w\\s]+/ \n</code></pre>\n    "},{"t":"Regular Expression to get a string between parentheses in Javascript","l":"http://stackoverflow.com/questions/17779744/regular-expression-to-get-a-string-between-parentheses-in-javascript","q":"\n\n<p>I am trying to write a regular expression which returns a string which is between parentheses. For example: I want to get the string which resides between the strings \"(\" and \")\"</p>\n\n<pre><code>I expect five hundred dollars ($500).\n</code></pre>\n\n<p>would return</p>\n\n<pre><code>$500\n</code></pre>\n\n<p>Found <a href=\"http://stackoverflow.com/questions/5642315/regular-expression-to-get-a-string-between-two-strings-in-javascript\">Regular Expression to get a string between two strings in Javascript</a></p>\n\n<p>But I'm new with regex. I don't know how to use '(', ')' in regexp</p>\n    ","a":"\n<p>You need to create a set of escaped (with <code>\\</code>) parentheses (that match the parentheses) and a group of regular parentheses that create your capturing group:</p>\n\n<pre><code>var regExp = /\\(([^)]+)\\)/;\nvar matches = regExp.exec(\"I expect five hundred dollars ($500).\");\n\n//matches[1] contains the value between the parentheses\nconsole.log(matches[1]);\n</code></pre>\n\n<p>Breakdown:</p>\n\n<ul>\n<li><code>\\(</code> : match an opening parentheses</li>\n<li><code>(</code> : begin capturing group</li>\n<li><code>[^)]+</code>: match one or more non <code>)</code> characters</li>\n<li><code>)</code> : end capturing group</li>\n<li><code>\\)</code> : match closing parentheses</li>\n</ul>\n\n<p>Here is a visual explanation: <a href=\"http://tinyurl.com/mog7lr3\">tinyurl.com/mog7lr3</a>.</p>\n    "},{"t":"Regex to validate JSON","l":"http://stackoverflow.com/questions/2583472/regex-to-validate-json","q":"\n\n<p>I am looking for a Regex that allows me to validate json. </p>\n\n<p>I am very new to Regex's and i know enough that parsing with Regex is bad but can it be used to validate?</p>\n    ","a":"\n<p>(This regex was brought to you from the proving-the-naysayers-wrong department.)</p>\n\n<h2>Yes, a complete regex validation is possible.</h2>\n\n<p>Most modern regex implementations allow for recursive regexpressions, which can verify a complete JSON serialized structure. The <a href=\"http://json.org/\">json.org specification</a> makes it quite straightforward.</p>\n\n<pre><code>$pcre_regex = '\n  /\n  (?(DEFINE)\n     (?&lt;number&gt;   -? (?= [1-9]|0(?!\\d) ) \\d+ (\\.\\d+)? ([eE] [+-]? \\d+)? )    \n     (?&lt;boolean&gt;   true | false | null )\n     (?&lt;string&gt;    \" ([^\"\\\\\\\\]* | \\\\\\\\ [\"\\\\\\\\bfnrt\\/] | \\\\\\\\ u [0-9a-f]{4} )* \" )\n     (?&lt;array&gt;     \\[  (?:  (?&amp;json)  (?: , (?&amp;json)  )*  )?  \\s* \\] )\n     (?&lt;pair&gt;      \\s* (?&amp;string) \\s* : (?&amp;json)  )\n     (?&lt;object&gt;    \\{  (?:  (?&amp;pair)  (?: , (?&amp;pair)  )*  )?  \\s* \\} )\n     (?&lt;json&gt;   \\s* (?: (?&amp;number) | (?&amp;boolean) | (?&amp;string) | (?&amp;array) | (?&amp;object) ) \\s* )\n  )\n  \\A (?&amp;json) \\Z\n  /six   \n';\n</code></pre>\n\n<p>It works quite well in PHP with the <a href=\"http://php.net/preg_match\">PCRE functions </a>. Should work unmodified in Perl; and can certainly be adapted for other languages. Also it succeeds with the <a href=\"http://www.json.org/JSON_checker/test/pass1.json\">JSON test cases</a>.</p>\n\n<h3>Simpler RFC4627 verification</h3>\n\n<p>A simpler approach is the minimal consistency check as specified in <a href=\"http://tools.ietf.org/html/rfc4627\">RFC4627, section 6</a>. It's however just intended as security test and basic non-validity precaution:</p>\n\n<pre><code>  var my_JSON_object = !(/[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]/.test(\n         text.replace(/\"(\\\\.|[^\"\\\\])*\"/g, ''))) &amp;&amp;\n     eval('(' + text + ')');\n</code></pre>\n    "},{"t":"How can I strip all punctuation from a string in JavaScript using regex?","l":"http://stackoverflow.com/questions/4328500/how-can-i-strip-all-punctuation-from-a-string-in-javascript-using-regex","q":"\n\n<p>If I have a string with any type of non-alphanumeric character in it: </p>\n\n<pre><code>\"This., -/ is #! an $ % ^ &amp; * example ;: {} of a = -_ string with `~)() punctuation\"\n</code></pre>\n\n<p>How would I get a no-punctuation version of it in JavaScript:</p>\n\n<pre><code>This is an example of a string with punctuation\n</code></pre>\n    ","a":"\n<p>If you want to remove specific punctuation from a string, it will probably be best to explicitly remove exactly what you want like</p>\n\n<pre><code>replace(/[.,-\\/#!$%\\^&amp;\\*;:{}=\\-_`~()]/g,\"\")\n</code></pre>\n\n<p>Doing the above still doesn't return the string as you have specified it. If you want to remove any extra spaces that were left over from removing crazy punctuation, then you are going to want to do something like</p>\n\n<pre><code>replace(/\\s{2,}/g,\" \");\n</code></pre>\n\n<p><strong>My full example:</strong></p>\n\n<pre><code>var s = \"This., -/ is #! an $ % ^ &amp; * example ;: {} of a = -_ string with `~)() punctuation\";\nvar punctuationless = s.replace(/[.,-\\/#!$%\\^&amp;\\*;:{}=\\-_`~()]/g,\"\");\nvar finalString = punctuationless.replace(/\\s{2,}/g,\" \");\n</code></pre>\n\n<p><strong>Results of running code in firebug console:</strong></p>\n\n<p><img src=\"http://i.stack.imgur.com/2rmdW.png\" alt=\"alt text\"></p>\n    "},{"t":"Split string by delimiter, but not if it is escaped","l":"http://stackoverflow.com/questions/6243778/split-string-by-delimiter-but-not-if-it-is-escaped","q":"\n\n<p>How can I split a string by a delimiter, but not if it is escaped? For example, I have a string:</p>\n\n<pre><code>1|2\\|2|3\\\\|4\\\\\\|4\n</code></pre>\n\n<p>The delimiter is <code>|</code> and an escaped delimiter is <code>\\|</code>. Furthermore I want to ignore escaped backslashes, so in <code>\\\\|</code> the <code>|</code> would still be a delimiter.</p>\n\n<p>So with the above string the result should be:</p>\n\n<pre><code>[0] =&gt; 1\n[1] =&gt; 2\\|2\n[2] =&gt; 3\\\\\n[3] =&gt; 4\\\\\\|4\n</code></pre>\n    ","a":"\n<p>Use dark magic:</p>\n\n<pre><code>$array = preg_split('~\\\\\\\\.(*SKIP)(*FAIL)|\\|~s', $string);\n</code></pre>\n\n<p><code>\\\\\\\\.</code> matches a backslash followed by a character, <code>(*SKIP)(*FAIL)</code> skips it and <code>\\|</code> matches your delimiter.</p>\n    "}]