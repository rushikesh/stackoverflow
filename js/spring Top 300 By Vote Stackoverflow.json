[{"t":"What's the difference between @Component, @Repository & @Service annotations in Spring?","l":"http://stackoverflow.com/questions/6827752/whats-the-difference-between-component-repository-service-annotations-in","q":"\n\n<p>Can <code>@Component</code>, <code>@Repository</code> &amp; <code>@Service</code> annotations be used interchangeably in Spring or do they provide any particular functionality besides acting as a notation device?</p>\n\n<p>In other words, if I have a Service class and I change the annotation from <code>@Service</code> to <code>@Component</code>, will it still behave the same way? </p>\n\n<p>Or does the annotation also influence the behavior and functionality of the class?</p>\n    ","a":"\n<p>1.Major difference between these <strong>stereotypes</strong> is they are used for different classification. </p>\n\n<p>2.In a multitier application, we will have different layers like presentation, service, business, data access etc. When a class is to be annotated for auto-detection by Spring, then we should use the respective stereotype as below. </p>\n\n<ul>\n<li><code>@Component</code> – generic and can be used across application.</li>\n<li><code>@Service</code> – annotate classes at service layer level. </li>\n<li><code>@Controller</code> – annotate classes at presentation layers level, mainly used in Spring MVC.</li>\n<li><code>@Repository</code> – annotate classes at persistence layer, which will act as database repository. If technically they are going to be same then why do we need to use these at different layers level. Why not use the same at all layers. For example, if we use @Service in all layers, all the beans will get instantiated and no issues. There is a minor difference, for example consider @Repository.</li>\n</ul>\n\n<blockquote>\n  <p>The postprocessor automatically looks for all exception translators\n  (implementations of the PersistenceExceptionTranslator interface) and\n  advises all beans marked with the @Repository annotation so that the\n  discovered translators can intercept and apply the appropriate\n  translation on the thrown exceptions.</p>\n</blockquote>\n\n<ol start=\"3\">\n<li>Similar to the above, in future Spring may choose to add value for\n<code>@Service</code>, <code>@Controller</code> and <code>@Repository</code> based on their layering\nconventions. To that additional feature advantage it's better to\nrespect the convention and use them in line with layers.</li>\n<li>Other than the above, with respect to <strong><em>scan-auto-detection</em></strong>, dependency\ninjection for BeanDefinition <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>,\n<code>@Controller</code> are same.</li>\n<li><a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/\" rel=\"nofollow noreferrer\">As per Spring documentation :</a>\nThe <strong>@Repository</strong> annotation is a marker for any class that fulfills the role or <strong>stereotype</strong> of a <strong>repository</strong> (also known as Data Access Object or <strong><em>DAO</em></strong>). <em>Among the uses of this marker is the automatic translation of exceptions as described in Section 20.2.2, “Exception translation”.</em>\nSpring provides further stereotype annotations: <strong>@Component, @Service,</strong> and <strong>@Controller</strong>. <strong>@Component</strong> is a <em>generic stereotype for any Spring-managed component</em>. <strong>@Repository, @Service, and @Controller</strong> are s<em>pecializations of @Component for more specific use cases</em>, for example, in the persistence, service, and presentation layers, respectively. Therefore, you can annotate your component classes with @Component, but by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects. For example, these stereotype annotations make ideal targets for pointcuts. It is also possible that @Repository, @Service, and @Controller may carry additional semantics in future releases of the Spring Framework. Thus, if you are choosing between using @Component or @Service for your service layer, @Service is clearly the better choice. Similarly, as stated above, @Repository is already supported as a marker for automatic exception translation in your persistence layer.</li>\n</ol>\n    "},{"t":"Difference between <context:annotation-config> vs <context:component-scan>","l":"http://stackoverflow.com/questions/7414794/difference-between-contextannotation-config-vs-contextcomponent-scan","q":"\n\n<p>I'm learning Spring 3 and I don't seem to grasp the functionality behind <code>&lt;context:annotation-config&gt;</code> and <code>&lt;context:component-scan&gt;</code>.</p>\n\n<p>From what I've read they seem to handle different annotations (@Required, @Autowired etc vs @Component, @Repository, @Service etc) but also from what I've read they register the same bean post processor classes.</p>\n\n<p>To confuse me even more, there is an <code>annotation-config</code> attribute on <code>&lt;context:component-scan&gt;</code>.</p>\n\n<p>Can someone shed some light on these tags? What's similar, what's different, is one superseded by the other, they complete each other, do I need one of them, both?</p>\n    ","a":"\n<p><strong>tl;dr</strong><br>\n<code>&lt;context:annotation-config&gt;</code>  Scanning and activating annotations for already registered beans in spring config xml.</p>\n\n<p><code>&lt;context:component-scan&gt;</code> Bean Registration + i.e. <code>&lt;context:annotation-config&gt;</code></p>\n\n<hr>\n\n<p><strong>@Autowired and @Required</strong> are targets property level so bean should register in spring IOC before use these annotations. To enable these annotations either have to register respective beans or include <code>&lt;context:annotation-config /&gt;</code>. i.e. <code>&lt;context:annotation-config /&gt;</code> works with registered beans only.</p>\n\n<p><strong>@Required</strong> enables  <code>RequiredAnnotationBeanPostProcessor</code>  processing tool<br>\n  <strong>@Autowired</strong> enables  <code>AutowiredAnnotationBeanPostProcessor</code> processing tool</p>\n\n<p><strong>Note:</strong> Annotation itself nothing to do, we need a <strong>Processing Tool</strong>, which is a class underneath, responsible for the core process.</p>\n\n<hr>\n\n<p><strong>@Repository, @Service and @Controller  are @Component</strong>, and they targets class level.</p>\n\n<p><code>&lt;context:component-scan&gt;</code> it scans the package and find and register the beans, and it includes the work done by <code>&lt;context:annotation-config /&gt;</code>.</p>\n    "},{"t":"What is the difference between @Inject and @Autowired in Spring Framework? Which one to use under what condition?","l":"http://stackoverflow.com/questions/7142622/what-is-the-difference-between-inject-and-autowired-in-spring-framework-which","q":"\n\n<p>I am going through some blogs on SpringSource and in one of the blog author is using <code>@Inject</code> and I suppose he can also use <code>@Autowired</code></p>\n\n<p>Here is the piece of code:</p>\n\n<p><code>@Inject private CustomerOrderService customerOrderService;</code></p>\n\n<p>I am not sure about the difference between <code>@Inject</code> and <code>@Autowired</code> and would appreciate if someone can explain the difference and which one to use under what situation?</p>\n    ","a":"\n<p>Assuming here you're referring to the <a href=\"http://download.oracle.com/javaee/6/api/javax/inject/Inject.html\"><code>javax.inject.Inject</code></a> annotations. <code>@Inject</code> is part of the Java CDI (<a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/giwhb.html\">Contexts and Dependency Injection</a>) standard introduced in Java EE 6 (JSR-299), <a href=\"http://www.oracle.com/technetwork/articles/javaee/javaee6overview-141808.html\">read more</a>. Spring has chosen to support using <code>@Inject</code> synonymously with their own <code>@Autowired</code> annotation.</p>\n\n<p>So, to answer your question, <code>@Autowired</code> is Spring's own (legacy) annotation. <code>@Inject</code> is part of a new Java technology called CDI that defines a standard for dependency injection similar to Spring. In a Spring application, the two annotations works the same way as Spring has decided to support some JSR-299 annotations in addition to their own.</p>\n    "},{"t":"Where does the @Transactional annotation belong?","l":"http://stackoverflow.com/questions/1079114/where-does-the-transactional-annotation-belong","q":"\n\n<p>Should you place the <code>@Transactional</code> in the <code>DAO</code> classes and/or their methods or is it better to annotate the Service classes which are calling using the DAO objects? Or does it make sense to annotate both \"layers\"?</p>\n    ","a":"\n<p>I think transactions belong on the Service layer.  It's the one that knows about units of work and use cases.  It's the right answer if you have several DAOs injected into a Service that need to work together in a single transaction.</p>\n    "},{"t":"What exactly is Spring Framework for?","l":"http://stackoverflow.com/questions/1061717/what-exactly-is-spring-framework-for","q":"\n\n<p>I hear a lot about spring, people are saying all over the web that Spring is a good framework for web development. But what exactly is it for? How can I use it for my Web-Java application development? any examples ?.</p>\n    ","a":"\n<p>Basically Spring is a framework for <a href=\"/questions/tagged/dependency-injection\" class=\"post-tag\" title=\"show questions tagged 'dependency-injection'\" rel=\"tag\">dependency-injection</a> which is a pattern that allows to build very decoupled systems. I'll try to explain you the simplest I can (this isn't a short answer).</p>\n\n<h2>The problem</h2>\n\n<p>For example, suppose you need to list the users of the system and thus declare an interface called <code>UserLister</code>:</p>\n\n<pre><code>public interface UserLister {\n    List&lt;User&gt; getUsers();\n}\n</code></pre>\n\n<p>And maybe an implementation accessing a database to get all the users:</p>\n\n<pre><code>public class UserListerDB implements UserLister {\n    public List&lt;User&gt; getUsers() {\n        // DB access code here\n    }\n}\n</code></pre>\n\n<p>In your view you'll need to access an instance (just an example, remember):</p>\n\n<pre><code>public class SomeView {\n    private UserLister userLister;\n\n    public void render() {\n        List&lt;User&gt; users = userLister.getUsers();\n        view.render(users);\n    }\n}\n</code></pre>\n\n<p>Note that the code above doesn't have initialized the variable <code>userLister</code>. What should we do? If I explicitly instantiate the object like this:</p>\n\n<pre><code>UserLister userLister = new UserListerDB();\n</code></pre>\n\n<p>...I'd couple the view with my implementation of the class that access the DB. What if I want to switch from the DB implementation to another that gets the user list from a comma-separated file (remember, it's an example)? In that case I would go to my code again and change the last line by:</p>\n\n<pre><code>UserLister userLister = new UserListerCommaSeparatedFile();\n</code></pre>\n\n<p>This has no problem with a small program like this but... What happens in a program that has hundreds of views and a similar number of business classes. The maintenance becomes a nightmare!</p>\n\n<h2>Spring (Dependency Injection) approach</h2>\n\n<p>What Spring does is to <em>wire</em> the classes up by using a XML file, this way all the objects are instantiated and initialized by Spring and <em>injected</em> in the right places (Servlets, Web Frameworks, Business classes, DAOs, etc, etc, etc...).</p>\n\n<p>Going back to the example in Spring we just need to have a setter for the <code>userLister</code> field and have an XML like this:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"userLister\" class=\"UserListerDB\" /&gt;\n\n&lt;bean class=\"SomeView\"&gt;\n    &lt;property name=\"userLister\" ref=\"userLister\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>This way when the view is created it <em>magically</em> will have a <code>UserLister</code> ready to work. </p>\n\n<pre><code>List&lt;User&gt; users = userLister.getUsers();  // This will actually work\n                                           // without adding any line of code\n</code></pre>\n\n<p>It is great! Isn't it?</p>\n\n<ul>\n<li><em>What if you want to use another implementation of your <code>UserLister</code> interface?</em> Just change the XML</li>\n<li><em>What if don't have a <code>UserLister</code> implementation ready?</em> Program a temporal mock implementation of <code>UserLister</code> and ease the development of the view</li>\n<li><em>What if I don't want to use Spring anymore?</em> Just don't use it! Your application isn't coupled to it. <a href=\"http://en.wikipedia.org/wiki/Inversion_of_control\" rel=\"nofollow noreferrer\">Inversion of Control</a> states: \"The application controls the framework, not the framework controls the application\".</li>\n</ul>\n\n<p>There are some other options for Dependency Injection around there, what in my opinion has made Spring so famous besides its simplicity, elegance and stability is that the guys of SpringSource have programmed many many POJOs that help to integrate Spring with many other common frameworks without being intrusive in your application. Also Spring has several good subprojects like Spring MVC, Spring WebFlow, Spring Security and again a loooong list of etceteras.</p>\n\n<p>Hope this helps. Anyway, I encourage you to read <a href=\"http://martinfowler.com/articles/injection.html\" rel=\"nofollow noreferrer\">Martin Fowler's article</a> about Dependency Injection and Inversion of Control because he does it better than me. <strike>After understanding the basics take a look to <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/index.html\" rel=\"nofollow noreferrer\">Spring Documentation</a></strike>, in my opinion <strike>is</strike> <strong>used to be</strong> the best Spring book ever.</p>\n    "},{"t":"How does autowiring work in Spring?","l":"http://stackoverflow.com/questions/3153546/how-does-autowiring-work-in-spring","q":"\n\n<p>I'm a little confused as to how the <a href=\"http://en.wikipedia.org/wiki/Inversion_of_control\" rel=\"nofollow noreferrer\">inversion of control</a> (<code>IoC</code>) works in <code>Spring</code>.</p>\n\n<p><strong>Say I have a service class called <code>UserServiceImpl</code> that implements <code>UserService</code> interface.</strong></p>\n\n<p>How would this be <code>@Autowired</code>?</p>\n\n<p>And in my <code>Controllers</code> action, how would I <code>instantiate</code> an <code>instance</code> of this service?</p>\n\n<p>Would I just do the following?</p>\n\n<pre><code>UserService userService = new UserServiceImpl();\n</code></pre>\n    ","a":"\n<p>First, and most important - all Spring beans are managed - they \"live\" inside a container, called \"application context\".</p>\n\n<p>Second, each application has an entry point to that context. Web applications have a Servlet, <a href=\"http://en.wikipedia.org/wiki/JavaServer_Faces\" rel=\"nofollow noreferrer\">JSF</a> uses a el-resolver, etc. Also, there is a place where the application context is bootstrapped and all beans - autowired. In web applications this can be a startup listener.</p>\n\n<p>Autowiring happens by placing an instance of one bean into the desired field in an instance of another bean. Both classes should be beans, i.e. they should be defined to live in the application context.</p>\n\n<p>What is \"living\" in the application context? This means that the context <em>instantiates</em> the objects, not you. I.e. - you never make <code>new UserServiceImpl()</code> - the container finds each injection point and sets an instance there.</p>\n\n<p>In your controllers, you just have the following:</p>\n\n<pre><code>@Controller // Defines that this class is a spring bean\n@RequestMapping(\"/users\")\npublic class SomeController {\n\n    // Tells the application context to inject an instance of UserService here\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(\"/login\")\n    public void login(@RequestParam(\"username\") String username,\n           @RequestParam(\"password\") String password) {\n\n        // The UserServiceImpl is already injected and you can use it\n        userService.login(username, password);\n\n    }\n}\n</code></pre>\n\n<p>A few notes:</p>\n\n<ul>\n<li>In your <code>applicationContext.xml</code> you should enable the <code>&lt;context:component-scan&gt;</code> so that classes are scanned for the <code>@Controller</code>, <code>@Service</code>, etc. annotations.</li>\n<li>The entry point for a Spring-MVC application is the DispatcherServlet, but it is hidden from you, and hence the direct interaction and bootstrapping of the application context happens behind the scene.</li>\n<li><code>UserServiceImpl</code> should also be defined as bean - either using <code>&lt;bean id=\"..\" class=\"..\"&gt;</code> or using the <code>@Service</code> annotation. Since it will be the only implementor of <code>UserService</code>, it will be injected.</li>\n<li>Apart from the <code>@Autowired</code> annotation, Spring can use XML-configurable autowiring. In that case all fields that have a name or type that matches with an existing bean automatically get a bean injected. In fact, that was the initial idea of autowiring - to have fields injected with dependencies without any configuration. Other annotations like <code>@Inject</code>, <code>@Resource</code> can also be used.</li>\n</ul>\n    "},{"t":"Difference between applicationContext.xml and spring-servlet.xml in Spring Framework","l":"http://stackoverflow.com/questions/3652090/difference-between-applicationcontext-xml-and-spring-servlet-xml-in-spring-frame","q":"\n\n<ul>\n<li>Are <code>applicationContext.xml</code> and <code>spring-servlet.xml</code> related anyhow in Spring Framework?<br></li>\n<li>Will the properties files declared in <code>applicationContext.xml</code> be available to <code>DispatcherServlet</code>?<br></li>\n<li>On a related note, why do I need a <code>*-servlet.xml</code> at all? Why is <code>applicationContext.xml</code> alone insufficient? </li>\n</ul>\n    ","a":"\n<p>Spring lets you define multiple contexts in a parent-child hierarchy.</p>\n\n<p>The <code>applicationContext.xml</code> defines the beans for the \"root webapp context\", i.e. the context associated with the webapp.</p>\n\n<p>The <code>spring-servlet.xml</code> (or whatever else you call it) defines the beans for one servlet's app context.  There can be many of these in a webapp, one per Spring servlet (e.g. <code>spring1-servlet.xml</code> for servlet <code>spring1</code>, <code>spring2-servlet.xml</code> for servlet <code>spring2</code>).</p>\n\n<p>Beans in <code>spring-servlet.xml</code> can reference beans in <code>applicationContext.xml</code>, but not vice versa.</p>\n\n<p>All Spring MVC controllers must go in the <code>spring-servlet.xml</code> context.</p>\n\n<p>In most simple cases, the <code>applicationContext.xml</code> context is unnecessary. It is generally used to contain beans that are shared between all servlets in a webapp. If you only have one servlet, then there's not really much point, unless you have a specific use for it.</p>\n    "},{"t":"Why is my Spring @Autowired field null?","l":"http://stackoverflow.com/questions/19896870/why-is-my-spring-autowired-field-null","q":"\n\n<p><em>Note: This is intended to be a canonical answer for a common problem.</em></p>\n\n<p>I have a Spring <code>@Service</code> class (<code>MileageFeeCalculator</code>) that has an <code>@Autowired</code> field (<code>rateService</code>), but the field is <code>null</code> when I try to use it. The logs show that both the <code>MileageFeeCalculator</code> bean and the <code>MileageRateService</code> bean are being created, but I get a <code>NullPointerException</code> whenever I try to call the <code>mileageCharge</code> method on my service bean. Why isn't Spring autowiring the field?</p>\n\n<p>Controller class:</p>\n\n<pre><code>@Controller\npublic class MileageFeeController {    \n    @RequestMapping(\"/mileage/{miles}\")\n    @ResponseBody\n    public float mileageFee(@PathVariable int miles) {\n        MileageFeeCalculator calc = new MileageFeeCalculator();\n        return calc.mileageCharge(miles);\n    }\n}\n</code></pre>\n\n<p>Service class:</p>\n\n<pre><code>@Service\npublic class MileageFeeCalculator {\n\n    @Autowired\n    private MileageRateService rateService; // &lt;--- should be autowired, is null\n\n    public float mileageCharge(final int miles) {\n        return (miles * rateService.ratePerMile()); // &lt;--- throws NPE\n    }\n}\n</code></pre>\n\n<p>Service bean that should be autowired in <code>MileageFeeCalculator</code> but it isn't:</p>\n\n<pre><code>@Service\npublic class MileageRateService {\n    public float ratePerMile() {\n        return 0.565f;\n    }\n}\n</code></pre>\n\n<p>When I try to <code>GET /mileage/3</code>, I get this exception:</p>\n\n<pre><code>java.lang.NullPointerException: null\n    at com.chrylis.example.spring_autowired_npe.MileageFeeCalculator.mileageCharge(MileageFeeCalculator.java:13)\n    at com.chrylis.example.spring_autowired_npe.MileageFeeController.mileageFee(MileageFeeController.java:14)\n    ...\n</code></pre>\n    ","a":"\n<p>The field annotated <code>@Autowired</code> is <code>null</code> because Spring doesn't know about the copy of <code>MileageFeeCalculator</code> that you created with <code>new</code> and didn't know to autowire it.</p>\n\n<p><a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html\">The Spring Inversion of Control (IoC) container</a> has three main logical components: a registry (called the <code>ApplicationContext</code>) of components (beans) that are available to be used by the application, a configurer system that injects objects' dependencies into them by matching up the dependencies with beans in the context, and a dependency solver that can look at a configuration of many different beans and determine how to instantiate and configure them in the necessary order.</p>\n\n<p>The IoC container isn't magic, and it has no way of knowing about Java objects unless you somehow inform it of them. When you call <code>new</code>, the JVM instantiates a copy of the new object and hands it straight to you--it never goes through the configuration process. There are three ways that you can get your beans configured.</p>\n\n<p>I have posted all of this code, using Spring Boot to launch, at <a href=\"https://github.com/chrylis/spring_autowired_npe_example\">this GitHub project</a>; you can look at a full running project for each approach to see everything you need to make it work. <strong>Tag with the <code>NullPointerException</code>: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/nonworking\"><code>nonworking</code></a></strong></p>\n\n<h2>Inject your beans</h2>\n\n<p>The most preferable option is to let Spring autowire all of your beans; this requires the least amount of code and is the most maintainable. To make the autowiring work like you wanted, also autowire the <code>MileageFeeCalculator</code> like this:</p>\n\n<pre><code>@Controller\npublic class MileageFeeController {\n\n    @Autowired\n    private MileageFeeCalculator calc;\n\n    @RequestMapping(\"/mileage/{miles}\")\n    @ResponseBody\n    public float mileageFee(@PathVariable int miles) {\n        return calc.mileageCharge(miles);\n    }\n}\n</code></pre>\n\n<p>If you need to create a new instance of your service object for different requests, you can still use injection by using <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes\">the Spring bean scopes</a>.</p>\n\n<p><strong>Tag that works by injecting the <code>@MileageFeeCalculator</code> service object: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/working-inject-bean\"><code>working-inject-bean</code></a></strong></p>\n\n<h2>Use @Configurable</h2>\n\n<p>If you really need objects created with <code>new</code> to be autowired, you can <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-atconfigurable\">use the Spring <code>@Configurable</code> annotation along with AspectJ compile-time weaving</a> to inject your objects. This approach inserts code into your object's constructor that alerts Spring that it's being created so that Spring can configure the new instance. This requires a bit of configuration in your build (such as compiling with <code>ajc</code>) and turning on Spring's runtime configuration handlers (<code>@EnableSpringConfigured</code> with the JavaConfig syntax). This approach is used by the Roo Active Record system to allow <code>new</code> instances of your entities to get the necessary persistence information injected.</p>\n\n<pre><code>@Service\n@Configurable\npublic class MileageFeeCalculator {\n\n    @Autowired\n    private MileageRateService rateService;\n\n    public float mileageCharge(final int miles) {\n        return (miles * rateService.ratePerMile());\n    }\n}\n</code></pre>\n\n<p><strong>Tag that works by using <code>@Configurable</code> on the service object: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/working-configurable\"><code>working-configurable</code></a></strong></p>\n\n<h2>Manual bean lookup: not recommended</h2>\n\n<p>This approach is suitable only for interfacing with legacy code in special situations. It is nearly always preferable to create a singleton adapter class that Spring can autowire and the legacy code can call, but it is possible to directly ask the Spring application context for a bean.</p>\n\n<p>To do this, you need a class to which Spring can give a reference to the <code>ApplicationContext</code> object:</p>\n\n<pre><code>@Component\npublic class ApplicationContextHolder implements ApplicationContextAware {\n    private static ApplicationContext context;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        context = applicationContext;   \n    }\n\n    public static ApplicationContext getContext() {\n        return context;\n    }\n}\n</code></pre>\n\n<p>Then your legacy code can call <code>getContext()</code> and retrieve the beans it needs:</p>\n\n<pre><code>@Controller\npublic class MileageFeeController {    \n    @RequestMapping(\"/mileage/{miles}\")\n    @ResponseBody\n    public float mileageFee(@PathVariable int miles) {\n        MileageFeeCalculator calc = ApplicationContextHolder.getContext().getBean(MileageFeeCalculator.class);\n        return calc.mileageCharge(miles);\n    }\n}\n</code></pre>\n\n<p><strong>Tag that works by manually looking up the service object in the Spring context: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/working-manual-lookup\"><code>working-manual-lookup</code></a></strong></p>\n    "},{"t":"JsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object","l":"http://stackoverflow.com/questions/7625783/jsonmappingexception-no-suitable-constructor-found-for-type-simple-type-class","q":"\n\n<p>I am getting the following error when trying to get a JSON request and process it:</p>\n\n<blockquote>\n  <p>org.codehaus.jackson.map.JsonMappingException: No suitable constructor found for type [simple type, class com.myweb.ApplesDO]: can not instantiate from JSON object (need to add/enable type information?)</p>\n</blockquote>\n\n<p>Here is the JSON I am trying to send:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n  \"applesDO\" : [\n    {\n      \"apple\" : \"Green Apple\"\n    },\n    {\n      \"apple\" : \"Red Apple\"\n    }\n  ]\n}\n</code></pre>\n\n<p>In Controller, I have the following method signature:</p>\n\n<pre><code>@RequestMapping(\"showApples.do\")\npublic String getApples(@RequestBody final AllApplesDO applesRequest){\n    // Method Code\n}\n</code></pre>\n\n<p>AllApplesDO is a wrapper of ApplesDO :</p>\n\n<pre><code>public class AllApplesDO {\n\n    private List&lt;ApplesDO&gt; applesDO;\n\n    public List&lt;ApplesDO&gt; getApplesDO() {\n        return applesDO;\n    }\n\n    public void setApplesDO(List&lt;ApplesDO&gt; applesDO) {\n        this.applesDO = applesDO;\n    }\n}\n</code></pre>\n\n<p>ApplesDO:</p>\n\n<pre><code>public class ApplesDO {\n\n    private String apple;\n\n    public String getApple() {\n        return apple;\n    }\n\n    public void setApple(String appl) {\n        this.apple = apple;\n    }\n\n    public ApplesDO(CustomType custom){\n        //constructor Code\n    }\n}\n</code></pre>\n\n<p>I think that Jackson is unable to convert JSON into Java objects for subclasses. Please help with the configuration parameters for Jackson to convert JSON into Java Objects. I am using Spring Framework.</p>\n\n<p>EDIT: Included the major bug that is causing this problem in the above sample class - Please look accepted answer for solution.</p>\n    ","a":"\n<p>So, finally I realized what the problem is. It is not a Jackson configuration issue as I doubted.</p>\n\n<p>Actually the problem was in <strong>ApplesDO</strong> Class:</p>\n\n<pre><code>public class ApplesDO {\n\n    private String apple;\n\n    public String getApple() {\n        return apple;\n    }\n\n    public void setApple(String apple) {\n        this.apple = apple;\n    }\n\n    public ApplesDO(CustomType custom) {\n        //constructor Code\n    }\n}\n</code></pre>\n\n<p>There was a custom constructor defined for the class making it the default constructor. Introducing a dummy constructor has made the error to go away:</p>\n\n<pre><code>public class ApplesDO {\n\n    private String apple;\n\n    public String getApple() {\n        return apple;\n    }\n\n    public void setApple(String apple) {\n        this.apple = apple;\n    }\n\n    public ApplesDO(CustomType custom) {\n        //constructor Code\n    }\n\n    //Introducing the dummy constructor\n    public ApplesDO() {\n    }\n\n}\n</code></pre>\n    "},{"t":"How can I inject a property value into a Spring Bean which was configured using annotations?","l":"http://stackoverflow.com/questions/317687/how-can-i-inject-a-property-value-into-a-spring-bean-which-was-configured-using","q":"\n\n<p>I have a bunch of Spring beans which are picked up from the classpath via annotations, e.g.</p>\n\n<pre><code>@Repository(\"personDao\")\npublic class PersonDaoImpl extends AbstractDaoImpl implements PersonDao {\n    // Implementation omitted\n}\n</code></pre>\n\n<p>In the Spring XML file, there's a <a href=\"http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html\" rel=\"nofollow noreferrer\">PropertyPlaceholderConfigurer</a> defined:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"propertyConfigurer\" \n  class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\n    &lt;property name=\"location\" value=\"/WEB-INF/app.properties\" /&gt;\n&lt;/bean&gt; \n</code></pre>\n\n<p>I want to inject one of the properties from app.properites into the bean shown above. I can't simply do something like </p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean class=\"com.example.PersonDaoImpl\"&gt;\n    &lt;property name=\"maxResults\" value=\"${results.max}\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Because PersonDaoImpl does not feature in the Spring XML file (it is picked up from the classpath via annotations). I've got as far as the following:</p>\n\n<pre><code>@Repository(\"personDao\")\npublic class PersonDaoImpl extends AbstractDaoImpl implements PersonDao {\n\n    @Resource(name = \"propertyConfigurer\")\n    protected void setProperties(PropertyPlaceholderConfigurer ppc) {\n    // Now how do I access results.max? \n    }\n}\n</code></pre>\n\n<p>But it's not clear to me how I access the property I'm interested in from <code>ppc</code>?</p>\n    ","a":"\n<p>You can do this in Spring 3 using EL support. Example:</p>\n\n<pre><code>@Value(\"#{systemProperties.databaseName}\")\npublic void setDatabaseName(String dbName) { ... }\n\n@Value(\"#{strategyBean.databaseKeyGenerator}\")\npublic void setKeyGenerator(KeyGenerator kg) { ... }\n</code></pre>\n\n<p><code>systemProperties</code> is an implicit object and <code>strategyBean</code> is a bean name.</p>\n\n<p>One more example, which works when you want to grab a property from a <code>Properties</code> object. It also shows that you can apply <code>@Value</code> to fields:</p>\n\n<pre><code>@Value(\"#{myProperties['github.oauth.clientId']}\")\nprivate String githubOauthClientId;\n</code></pre>\n\n<p>Here is a <a href=\"http://springinpractice.com/2008/12/02/new-stuff-in-spring-30/\" rel=\"nofollow noreferrer\">blog post</a> I wrote about this for a little more info.</p>\n    "},{"t":"java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener","l":"http://stackoverflow.com/questions/6210757/java-lang-classnotfoundexception-org-springframework-web-context-contextloaderl","q":"\n\n<p>I included:</p>\n\n<ul>\n<li><p><strong>all Spring libs</strong>,</p></li>\n<li><p><strong>Apache Tomcat 7.0 library</strong></p>\n\n<p>in Build Path </p></li>\n</ul>\n\n<p>but it still gives errors:</p>\n\n<pre><code>SEVERE: Error configuring application listener of class org.springframework.web.context.ContextLoaderListener\njava.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1676)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1521)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:415)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:397)\n    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:118)\n    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4660)\n    at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5226)\n    at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5221)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n    at java.lang.Thread.run(Thread.java:662)\nJun 2, 2011 11:07:38 AM org.apache.catalina.core.StandardContext listenerStart\nSEVERE: Error configuring application listener of class org.springframework.web.context.request.RequestContextListener\njava.lang.ClassNotFoundException: org.springframework.web.context.request.RequestContextListener\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1676)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1521)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:415)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:397)\n    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:118)\n    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4660)\n    at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5226)\n    at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5221)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n    at java.lang.Thread.run(Thread.java:662)\nJun 2, 2011 11:07:38 AM org.apache.catalina.core.StandardContext listenerStart\nSEVERE: Error configuring application listener of class com.sun.faces.config.ConfigureListener\njava.lang.ClassNotFoundException: com.sun.faces.config.ConfigureListener\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1676)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1521)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:415)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:397)\n    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:118)\n    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4660)\n    at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5226)\n    at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5221)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n    at java.lang.Thread.run(Thread.java:662)\n</code></pre>\n\n<p>In \"org.sprintframework.web-3.1.0.M1.jar\", I can see \"org.springframework.web.context.ContextLoaderListener\".</p>\n\n<p>Someone on Google says that spring.jar should be included but I don't see any spring.jar in 3.x distribution.</p>\n\n<p>Eclipse 3.6.2\nTomcat 7</p>\n\n<p>Edit: Someone says \"Automatically update dependencies\" should be checked in Project Properties but I don't see anything like that in project properties.\n<a href=\"http://forum.springsource.org/showthread.php?60812-ClassNotFoundException-org.springframework.web.con-text.ContextLoaderListener\">ClassNotFoundException:org.springframework.web.con text.ContextLoaderListener</a></p>\n    ","a":"\n<p>I had a similar problem when running a spring web application in an Eclipse managed tomcat. I solved this problem by adding maven dependencies in the project's web deployment assembly. </p>\n\n<ol>\n<li>Open the project's properties (e.g., right-click on the project's name in the project explorer and select \"Properties\").</li>\n<li>Select \"Deployment Assembly\".</li>\n<li>Click the \"Add...\" button on the right margin.</li>\n<li>Select \"Java Build Path Entries\" from the menu of Directive Type and click \"Next\".</li>\n<li>Select \"Maven Dependencies\" from the Java Build Path Entries menu and click \"Finish\".</li>\n</ol>\n\n<p>You should see \"Maven Dependencies\" added to the Web Deployment Assembly definition.</p>\n    "},{"t":"When using Spring Security, what is the proper way to obtain current username (i.e. SecurityContext) information in a bean?","l":"http://stackoverflow.com/questions/248562/when-using-spring-security-what-is-the-proper-way-to-obtain-current-username-i","q":"\n\n<p>I have a Spring MVC web app which uses Spring Security.  I want to know the username of the currently logged in user.  I'm using the code snippet given below .  Is this the accepted way?  </p>\n\n<p>I don't like having a call to a static method inside this controller - that defeats the whole purpose of Spring, IMHO.  Is there a way to configure the app to have the current SecurityContext, or current Authentication, injected instead?  </p>\n\n<pre><code>  @RequestMapping(method = RequestMethod.GET)\n  public ModelAndView showResults(final HttpServletRequest request...) {\n    final String currentUser = SecurityContextHolder.getContext().getAuthentication().getName();\n    ...\n  }\n</code></pre>\n    ","a":"\n<p>If you are using <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-arguments\">Spring 3</a>, the easiest way is:</p>\n\n<pre><code> @RequestMapping(method = RequestMethod.GET)   \n public ModelAndView showResults(final HttpServletRequest request, Principal principal) {\n\n     final String currentUser = principal.getName();\n\n }\n</code></pre>\n    "},{"t":"Downloading a file from spring controllers","l":"http://stackoverflow.com/questions/5673260/downloading-a-file-from-spring-controllers","q":"\n\n<p>I have a requirement where I need to download a PDF from the website. The PDF needs to be generated within the code, which I thought would be a combination of freemarker and a PDF generation framework like iText. Any better way? </p>\n\n<p>However, my main problem is how do I allow the user to download a file through a Spring Controller?</p>\n    ","a":"\n<pre><code>@RequestMapping(value = \"/files/{file_name}\", method = RequestMethod.GET)\npublic void getFile(\n    @PathVariable(\"file_name\") String fileName, \n    HttpServletResponse response) {\n    try {\n      // get your file as InputStream\n      InputStream is = ...;\n      // copy it to response's OutputStream\n      org.apache.commons.io.IOUtils.copy(is, response.getOutputStream());\n      response.flushBuffer();\n    } catch (IOException ex) {\n      log.info(\"Error writing file to output stream. Filename was '{}'\", fileName, ex);\n      throw new RuntimeException(\"IOError writing file to output stream\");\n    }\n\n}\n</code></pre>\n\n<p>Generally speaking, when you have <code>response.getOutputStream()</code>, you can write anything there. You can pass this output stream as a place to put generated PDF to your generator. Also, if you know what file type you are sending, you can set </p>\n\n<pre><code>response.setContentType(\"application/pdf\");\n</code></pre>\n    "},{"t":"@Resource vs @Autowired","l":"http://stackoverflow.com/questions/4093504/resource-vs-autowired","q":"\n\n<p>Which annotation, <strong>@Resource</strong> (<a href=\"http://jcp.org/en/jsr/detail?id=250\" rel=\"nofollow\">jsr250</a>) or <strong>@Autowired</strong> (Spring specific) should I be using when using DI?</p>\n\n<p>I have successfully used both in the past, <code>@Resource(name=\"blah\")</code> and <code>@Autowired @Qualifier(\"blah\")</code></p>\n\n<p>My instinct is to stick with the <code>@Resource</code> tag since it's been ratified by the jsr people.  Anyone have strong thoughts on this?</p>\n    ","a":"\n<p>In spring pre-3.0 it doesn't matter which one.</p>\n\n<p>In spring 3.0 there's support for the standard (<a href=\"http://www.jcp.org/en/jsr/detail?id=330\">JSR-330</a>) annotation <code>@javax.inject.Inject</code> - use it, with a combination of <code>@Qualifier</code>. Note that spring now also supports the <code>@javax.inject.Qualifier</code> meta-annotation:</p>\n\n<pre><code>@Qualifier\n@Retention(RUNTIME)\npublic @interface YourQualifier {}\n</code></pre>\n\n<p>So you can have</p>\n\n<pre><code>&lt;bean class=\"com.pkg.SomeBean\"&gt;\n   &lt;qualifier type=\"YourQualifier\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>@YourQualifier\n@Component\npublic class SomeBean implements Foo { .. }\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>@Inject @YourQualifier private Foo foo;\n</code></pre>\n\n<p>This makes less use of String-names, which can be misspelled and are harder to maintain.</p>\n\n<hr>\n\n<p>As for the original question: both, without specifying any attributes of the annotation, perform injection by type. The difference is:</p>\n\n<ul>\n<li><code>@Resource</code> allows you to specify a name of the injected bean</li>\n<li><code>@Autowired</code> allows you to mark it as non-mandatory.</li>\n</ul>\n    "},{"t":"Injecting Mockito mocks into a Spring bean","l":"http://stackoverflow.com/questions/2457239/injecting-mockito-mocks-into-a-spring-bean","q":"\n\n<p>I would like to inject a Mockito mock object into a Spring (3+) bean for the purposes of unit testing with JUnit. My bean dependencies are currently injected by using the <code>@Autowired</code> annotation on private member fields.</p>\n\n<p>I have considered using <code>ReflectionTestUtils.setField</code> but the bean instance that I wish to inject is actually a proxy and hence does not declare the private member fields of the target class. I do not wish to create a public setter to the dependency as I will then be modifying my interface purely for the purposes of testing.</p>\n\n<p>I have followed some <a href=\"http://forum.springsource.org/showthread.php?t=58444&amp;page=1\" rel=\"nofollow noreferrer\">advice</a> given by the Spring community but the mock does not get created and the auto-wiring fails:</p>\n\n<pre><code>&lt;bean id=\"dao\" class=\"org.mockito.Mockito\" factory-method=\"mock\"&gt;\n    &lt;constructor-arg value=\"com.package.Dao\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>The error I currently encounter is as follows:</p>\n\n<pre><code>...\nCaused by: org...NoSuchBeanDefinitionException:\n    No matching bean of type [com.package.Dao] found for dependency:\n    expected at least 1 bean which qualifies as autowire candidate for this dependency.\n    Dependency annotations: {\n        @org...Autowired(required=true),\n        @org...Qualifier(value=dao)\n    }\nat org...DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(D...y.java:901)\nat org...DefaultListableBeanFactory.doResolveDependency(D...y.java:770)\n</code></pre>\n\n<p>If I set the <code>constructor-arg</code> value to something invalid no error occurs when starting the application context.</p>\n    ","a":"\n<p>If you're using Spring Boot 1.4, it has an awesome way of doing this. Just use new brand <code>@SpringBootTest</code> on your class and <code>@MockBean</code> on the field  and Spring Boot will create a mock of this type and it will inject it into the context (instead of injecting the original one):</p>\n\n<pre><code>@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MyTests {\n\n    @MockBean\n    private RemoteService remoteService;\n\n    @Autowired\n    private Reverser reverser;\n\n    @Test\n    public void exampleTest() {\n        // RemoteService has been injected into the reverser bean\n        given(this.remoteService.someCall()).willReturn(\"mock\");\n        String reverse = reverser.reverseSomeCall();\n        assertThat(reverse).isEqualTo(\"kcom\");\n    }\n\n}\n</code></pre>\n\n<p>On the other hand, if you're not using Spring Boot or are you using a previous version, you'll have to do a bit more work:    </p>\n\n<p>Create a <code>@Configuration</code> bean that injects your mocks into Spring context:</p>\n\n<pre><code>@Configuration\n@Profile(\"useMocks\")\npublic class MockConfigurer {\n\n    @Bean\n    @Primary\n    public MyBean myBeanSpy() {\n        return mock(MyBean.class);\n    }\n}\n</code></pre>\n\n<p>Using <code>@Primary</code> annotation you're telling spring that this bean has priority if no qualifier are specified.</p>\n\n<p>Make sure you annotate the class with <code>@Profile(\"useMocks\")</code> in order to control which classes will use the mock and which ones will use the real bean.</p>\n\n<p>Finally, in your test, activate <code>userMocks</code> profile:</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {Application.class})\n@WebIntegrationTest\n@ActiveProfiles(profiles={\"useMocks\"})\npublic class YourIntegrationTestIT {\n\n    @Inject\n    private MyBean myBean; //It will be the mock!\n\n\n    @Test\n    public void test() {\n        ....\n    }\n}\n</code></pre>\n\n<p>If you don't want to use the mock but the real bean, just don't activate <code>useMocks</code> profile:</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {Application.class})\n@WebIntegrationTest\npublic class AnotherIntegrationTestIT {\n\n    @Inject\n    private MyBean myBean; //It will be the real implementation!\n\n\n    @Test\n    public void test() {\n        ....\n    }\n}\n</code></pre>\n    "},{"t":"Spring @Autowired usage","l":"http://stackoverflow.com/questions/633158/spring-autowired-usage","q":"\n\n<p>What are the pros and cons of using <strong>@Autowired</strong> in a class that will be wired up by Spring?  </p>\n\n<p>Just to clarify, I'm talking specifically about the <strong>@Autowired</strong> annotation, not auto-wiring in XML.</p>\n\n<p>I probably just don't understand it, but to me it almost seems like an anti-pattern - your classes start to become aware that they are tied to a DI framework, rather than just being POJOs.  Maybe I'm a glutton for punishment, but I like having the external XML config for beans, and I like to have explicit wirings, so I know exactly what is wired where.</p>\n    ","a":"\n<p>For a long time I believed that there was a value in having a \"centralized, declarative, configuration\" like the xml files we all used to use. Then I realized that most of the stuff in the files wasn't <em>configuration</em> - it was never changed anywhere after development, ever. Then I realized that \"centralized\" only has value in quite small systems - only in small systems will you ever be able to grok a configuration file <em>as a whole</em>. And what is really the value of understanding the wiring as a whole, when the same \"wirings\" are mostly duplicated by dependencies in the code? So the only thing I've kept is meta-data (annotations), which is still kind-of declarative. These <em>never</em> change at runtime and they're <em>never</em> \"configuration\" data that someone will change on the fly - so I think keeping it in the code is nice.</p>\n\n<p>I use full auto-wiring as much as I can. I love it. I won't go back to old-style spring unless threatened at gun-point. My reasons for preferring fully <code>@Autowired</code> have changed over time.</p>\n\n<p>Right now I think the most important reason for using autowiring is that there's one less abstraction in your system to keep track of. The \"bean name\" is effectively gone. It turns out the bean name only exists because of xml. So a full layer of abstract indirections (where you would wire bean-name \"foo\" into bean \"bar\") is gone. Now I wire the \"Foo\" interface into my bean directly, and implementation is chosen by run-time profile. This allows me to <em>work with code</em> when tracing dependencies and implementations. When I see an autowired dependency in my code I can just press the \"go to implementation\" key in my IDE and up comes the list of known implementations. In most cases there's just one implementation and I'm straight into the class. Can't  be much simpler than that, and I always know <em>exactly</em> what implementation is being used (I claim that the opposite is closer to the truth with xml wiring - funny how your perspective changes!)</p>\n\n<p>Now you could say that it's just a very simple layer, but each layer of abstraction that we add to our systems <em>increase</em> complexity. I really don't think the xml ever added any real value to any system I've worked with. </p>\n\n<p>Most systems I've ever work with only have <em>one</em> configuration of the production runtime environment. There may be other configurations for test and so on.</p>\n\n<p>I'd say that full autowiring is the ruby-on-rails of spring: It embraces the notion that there's a normal and common usage pattern that most use cases follow. With XML configuration you <em>permit</em> a lot of consistent/inconsistent configuration usage that may/may not be intended. I've seen so much xml configuration go overboard with inconsistencies - does it get refactored together with the code ? Thought not. Are those variations there for a reason? Usually not.</p>\n\n<p>We hardly use qualifiers in our configuration, and found other ways to solve these situations. This is a clear \"disadvantage\" we encounter: We've slightly changed the way we code to make it interact smoother with autowiring: A customer repository no longer implements the generic <code>Repository&lt;Customer&gt;</code> interface but we make an interface <code>CustomerRepository</code> that extends <code>Repository&lt;Customer&gt;</code>. Sometimes there's also a trick or two when it comes to subclassing. But it usually just points us in the direction of stronger typing, which I find is almost always a better solution.</p>\n\n<p>But yes, you're tying to a particular style of DI that mostly spring does. We don't even make public setters for dependencies any more (So you could argue that we're +1 in the encapsulation/information hiding department) We still have some xml in our system, but the xml basically <em>only</em> contains the anomalies. Full autowiring integrates nicely with xml.</p>\n\n<p>The only thing we need now is for the <code>@Component</code>, <code>@Autowired</code> and the rest to be included in a JSR (like JSR-250), so we don't have to tie in with spring. This is the way things have been happening in the past (the <code>java.util.concurrent</code> stuff springs to mind), so I wouldn't be entirely surprised if this happened again.</p>\n    "},{"t":"Spring Security on Wildfly / Undertow: error executing the filter chain","l":"http://stackoverflow.com/questions/23559866/spring-security-on-wildfly-undertow-error-executing-the-filter-chain","q":"\n\n<p>I'm working in order to integrate <strong><a href=\"http://projects.spring.io/spring-security-saml/\">Spring Security SAML Extension</a></strong> with <strong><a href=\"https://spring.io/blog/2013/08/06/spring-boot-simplifying-spring-for-everyone/\">Spring Boot</a></strong>.</p>\n\n<p>I developed a complete sample application, all the source code is published on GitHub: </p>\n\n<ul>\n<li><strong><a href=\"https://github.com/vdenotaris/spring-boot-security-saml-sample\">spring-boot-saml-integration on GitHub</a></strong></li>\n</ul>\n\n<p>By running the WebApp as Spring Boot application (through Spring Tool Set, by using an embedded Application Server), it works fine.\nUnfortunately, the auth process doesn't work on <strong>Undertow/WildFly</strong> (and I must use it as production AS).</p>\n\n<p>By logging, I can see that the IdP performs the <strong>AuthN</strong> process and the instructions of my custom <code>UserDetails</code> implementation are correctly executed. Despite that Spring doesn't set up the privileges for the current user.</p>\n\n<pre><code>@Component\npublic class SAMLUserDetailsServiceImpl implements SAMLUserDetailsService {\n\n    // Logger\n    private static final Logger LOG = LoggerFactory.getLogger(SAMLUserDetailsServiceImpl.class);\n\n    @Override\n    public Object loadUserBySAML(SAMLCredential credential)\n            throws UsernameNotFoundException, SSOUserAccountNotExistsException {\n        String userID = credential.getNameID().getValue();\n        if (userID.compareTo(\"jdoe@samplemail.com\") != 0) {     // We're simulating the data access.\n            LOG.warn(\"SSO User Account not found into the system\");\n            throw new SSOUserAccountNotExistsException(\"SSO User Account not found into the system\", userID);\n        }\n        LOG.info(userID + \" is logged in\");\n        List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;GrantedAuthority&gt;();\n        GrantedAuthority authority = new SimpleGrantedAuthority(\"ROLE_USER\");\n        authorities.add(authority);\n        ExtUser userDetails = new ExtUser(userID, \"password\", true, true, true,\n                true, authorities, \"John\", \"Doe\");\n        return userDetails;\n    }\n}\n</code></pre>\n\n<p>By debugging, I checked that the problem starts from the <code>FilterChainProxy</code> class.\nWhen I run the webapp on WildFly, I can see that the attribute <code>FILTER_APPLIED</code> of <code>ServletRequest</code> is <em>null</em>, thus Spring clears the <code>SecurityContextHolder</code>. </p>\n\n<pre><code>private final static String FILTER_APPLIED = FilterChainProxy.class.getName().concat(\".APPLIED\");\n\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n        throws IOException, ServletException {\n    boolean clearContext = request.getAttribute(FILTER_APPLIED) == null;\n    if (clearContext) {\n        try {\n            request.setAttribute(FILTER_APPLIED, Boolean.TRUE);\n            doFilterInternal(request, response, chain);\n        } finally {\n            SecurityContextHolder.clearContext();\n            request.removeAttribute(FILTER_APPLIED);\n        }\n    } else {\n        doFilterInternal(request, response, chain);\n    }\n}\n</code></pre>\n\n<p>On <strong>VMware vFabric tc Sever</strong> and <strong>Tomcat</strong> that doesn't happen.\nIs there a way to resolve this issue?</p>\n    ","a":"\n<p>Investigating the problem I have noticed that there is some mess with cookies and referers in the auth request.</p>\n\n<p>Currently wildfly authentication will work if you change webapplication context to the Root Context:</p>\n\n<pre><code> &lt;server name=\"default-server\" default-host=\"webapp\"&gt;\n     &lt;http-listener name=\"default\" socket-binding=\"http\"/&gt;\n     &lt;host name=\"default-host\" alias=\"localhost\" default-web-module=\"sso.war\"/&gt;\n &lt;/server&gt;\n</code></pre>\n\n<p>After restarting wildfly and clearing cookies all should work as expected</p>\n    "},{"t":"How to call a method after bean initialization is complete?","l":"http://stackoverflow.com/questions/1088550/how-to-call-a-method-after-bean-initialization-is-complete","q":"\n\n<p>I have a use case where I need to call a (non-static) method in the bean only-once at the ApplicationContext load up. Is it ok, if I use MethodInvokingFactoryBean for this? Or we have a some better solution?</p>\n\n<p>As a side note, I use ConfigContextLoaderListener to load the Application Context in web application. And want, that if bean 'A' is instantiated just call methodA() once.</p>\n\n<p>How can this be done nicely?</p>\n    ","a":"\n<p>You can use something like:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;beans&gt;\n    &lt;bean id=\"myBean\" class=\"...\" init-method=\"init\"/&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>This will call the \"init\" method when the bean is instantiated.</p>\n    "},{"t":"Why is Spring's ApplicationContext.getBean considered bad?","l":"http://stackoverflow.com/questions/812415/why-is-springs-applicationcontext-getbean-considered-bad","q":"\n\n<p>I asked a general Spring question: <a href=\"http://stackoverflow.com/questions/812178/auto-cast-spring-beans\">Auto-cast Spring Beans</a> and had multiple people respond that calling Spring's <code>ApplicationContext.getBean()</code> should be avoided as much as possible.  Why is that?  </p>\n\n<p>How else should I gain access to the beans I configured Spring to create?</p>\n\n<p>I'm using Spring in a non-web application and had planned on accessing a shared <code>ApplicationContext</code> object <a href=\"http://stackoverflow.com/questions/812178/auto-cast-spring-beans/812291#812291\">as described by LiorH</a>.</p>\n\n<p><strong>Amendment</strong></p>\n\n<p>I accept the answer below, but here's an alternate take by Martin Fowler who <a href=\"http://martinfowler.com/articles/injection.html#ServiceLocatorVsDependencyInjection\" rel=\"nofollow noreferrer\">discusses the merits of Dependency Injection vs. using a Service Locator</a> (which is essentially the same as calling a wrapped <code>ApplicationContext.getBean()</code>).</p>\n\n<p>In part, Fowler states, \"<em>With service locator the application class asks for it [the service] explicitly by a message to the locator. With injection there is no explicit request, the service appears in the application class - hence the inversion of control.\nInversion of control is a common feature of frameworks, but it's something that comes at a price. It tends to be hard to understand and leads to problems when you are trying to debug. So on the whole I prefer to avoid it [Inversion of Control] unless I need it. This isn't to say it's a bad thing, just that I think it needs to justify itself over the more straightforward alternative.</em>\"</p>\n    ","a":"\n<p>I mentioned this in a comment on the other question, but the whole idea of Inversion of Control is to have <em>none of your classes know or care how they get the objects they depend on</em>. This makes it easy to change what type of implementation of a given dependency you use at any time. It also makes the classes easy to test, as you can provide mock implementations of dependencies. Finally, it makes the classes <em>simpler</em> and more focused on their core responsibility.</p>\n\n<p>Calling <code>ApplicationContext.getBean()</code> is not Inversion of Control! While it's still easy to change what implemenation is configured for the given bean name, the class now relies directly on Spring to provide that dependency and can't get it any other way. You can't just make your own mock implementation in a test class and pass that to it yourself. This basically defeats Spring's purpose as a dependency injection container.</p>\n\n<p>Everywhere you want to say:</p>\n\n<pre><code>MyClass myClass = applicationContext.getBean(\"myClass\");\n</code></pre>\n\n<p>you should instead, for example, declare a method:</p>\n\n<pre><code>public void setMyClass(MyClass myClass) {\n   this.myClass = myClass;\n}\n</code></pre>\n\n<p>And then in your configuration:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"myClass\" class=\"MyClass\"&gt;...&lt;/bean&gt;\n\n&lt;bean id=\"myOtherClass\" class=\"MyOtherClass\"&gt;\n   &lt;property name=\"myClass\" ref=\"myClass\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Spring will then automatically inject <code>myClass</code> into <code>myOtherClass</code>.</p>\n\n<p>Declare everything in this way, and at the root of it all have something like:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"myApplication\" class=\"MyApplication\"&gt;\n   &lt;property name=\"myCentralClass\" ref=\"myCentralClass\"/&gt;\n   &lt;property name=\"myOtherCentralClass\" ref=\"myOtherCentralClass\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p><code>MyApplication</code> is the most central class, and depends at least indirectly on every other service in your program. When bootstrapping, in your <code>main</code> method, you can call <code>applicationContext.getBean(\"myApplication\")</code> but you should not need to call <code>getBean()</code> anywhere else!</p>\n    "},{"t":"Unsure if I understand TransactionAwarePersistenceManagerFactoryProxy","l":"http://stackoverflow.com/questions/14636178/unsure-if-i-understand-transactionawarepersistencemanagerfactoryproxy","q":"\n\n<p>I am trying to use the <code>org.springframework.orm.jdo.TransactionAwarePersistenceManagerFactoryProxy</code> in my Spring project, but I am not sure how to use it or whether it's exactly what I am looking for. I realize it can help make my DAOs work with a plain JDO <code>PersistenceManagerFactory</code>. Another question is: what happens if the proxy doesn't get made properly? Can I still use it to access my factory to create a transaction aware persistence manager? If the object managed by the factory is a singleton, does this change things? Why not just access the PersistenceManagerFactory directly? Perhaps <code>PersistenceManagerFactoryUtils.getPersistenceManager</code> would be more suited to my needs? Can <code>getObject</code> return null?</p>\n    ","a":"\n<p>Answers are directly available on <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/orm/jdo/TransactionAwarePersistenceManagerFactoryProxy.html\">documentation</a></p>\n\n<blockquote>\n  <p>I realize it can help make my DAOs work with a plain JDO PersistenceManagerFactory. </p>\n</blockquote>\n\n<p>Yes.\nTransactionAwarePersistenceManagerFactoryProxy proxy allows DAOs to work with a plain JDO PersistenceManagerFactory reference, while still participating in Spring's (or a J2EE server's) resource and transaction management.\nYou can surely use it in your app. But without knowing your exact needs, we can't confirm any further.</p>\n\n<blockquote>\n  <p>Can I still use it to access my factory to create a transaction aware persistence manager</p>\n</blockquote>\n\n<p>DAOs could seamlessly switch between a JNDI PersistenceManagerFactory and this proxy for a local PersistenceManagerFactory.</p>\n\n<blockquote>\n  <p>If the object managed by the factory is a singleton, does this change things? Why not just access the PersistenceManagerFactory directly? </p>\n</blockquote>\n\n<p>It is usually preferable to write your JDO-based DAOs with Spring's JdoTemplate, offering benefits such as consistent data access exceptions instead of JDOExceptions at the DAO layer. However, Spring's resource and transaction management (and Dependency Injection) will work for DAOs written against the plain JDO API as well.</p>\n    "},{"t":"How to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?","l":"http://stackoverflow.com/questions/16232833/how-to-respond-with-http-400-error-in-a-spring-mvc-responsebody-method-returnin","q":"\n\n<p>I'm using Spring MVC for a simple JSON API, with <code>@ResponseBody</code> based approach like the following. (I already have a service layer producing JSON directly.)</p>\n\n<pre><code>@RequestMapping(value = \"/matches/{matchId}\", produces = \"application/json\")\n@ResponseBody\npublic String match(@PathVariable String matchId) {\n    String json = matchService.getMatchJson(matchId);\n    if (json == null) {\n        // TODO: how to respond with e.g. 400 \"bad request\"?\n    }\n    return json;\n}\n</code></pre>\n\n<p>Question is, in the given scenario, <strong>what is the simplest, cleanest way to respond with a HTTP 400 error</strong>?</p>\n\n<p>I did come across approaches like:</p>\n\n<pre><code>return new ResponseEntity(HttpStatus.BAD_REQUEST);\n</code></pre>\n\n<p>...but I can't use it here since my method's return type is String, not ResponseEntity.</p>\n    ","a":"\n<p>change your return type to <code>ResponseEntity&lt;String&gt;</code>, then you can use below for 400</p>\n\n<pre><code>return new ResponseEntity&lt;String&gt;(HttpStatus.BAD_REQUEST);\n</code></pre>\n\n<p>and for correct request</p>\n\n<pre><code>return new ResponseEntity&lt;String&gt;(json,HttpStatus.OK);\n</code></pre>\n\n<p><strong>UPDATE 1</strong></p>\n\n<p>after spring 4.1 there are helper methods in ResponseEntity could be used as</p>\n\n<pre><code>return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n</code></pre>\n\n<p>and</p>\n\n<pre><code>return ResponseEntity.ok(json);\n</code></pre>\n    "},{"t":"Spring @Transactional - isolation, propagation","l":"http://stackoverflow.com/questions/8490852/spring-transactional-isolation-propagation","q":"\n\n<p>Can someone explain what <strong>isolation</strong> &amp; <strong>propagation</strong> parameters are for in the <code>@Transactional</code> annotation via real world example. Basically when and why I should choose to change their default values. </p>\n    ","a":"\n<p>Good question, although not a trivial one to answer. </p>\n\n<p><a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/transaction/annotation/Propagation.html\" rel=\"nofollow noreferrer\"><strong>Propagation</strong></a></p>\n\n<p>Defines how transactions relate to each other. Common options</p>\n\n<ul>\n<li><code>Required</code>: Code will always run in a transaction. Create a new transaction or reuse one if available.</li>\n<li><code>Requires_new</code>: Code will always run in a new transaction. Suspend current transaction if one exist. </li>\n</ul>\n\n<p><a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/transaction/TransactionDefinition.html\" rel=\"nofollow noreferrer\"><strong>Isolation</strong></a></p>\n\n<p>Defines the data contract between transactions. </p>\n\n<ul>\n<li><code>Read Uncommitted</code>: Allows dirty reads</li>\n<li><code>Read Committed</code>: Does not allow dirty reads</li>\n<li><code>Repeatable Read</code>: If a row is read twice in the same transaciton, result will always be the same</li>\n<li><code>Serializable</code>: Performs all transactions in a sequence</li>\n</ul>\n\n<p>The different levels have different performance characteristics in a multi threaded application. I think if you understand the <code>dirty reads</code> concept you will be able to select a good option. </p>\n\n<hr>\n\n<p>Example when a dirty read can occur</p>\n\n<pre><code>  thread 1   thread 2      \n      |         |\n    write(x)    |\n      |         |\n      |        read(x)\n      |         |\n    rollback    |\n      v         v \n           value (x) is now dirty (incorrect)\n</code></pre>\n\n<p>So a sane default (if such can be claimed) could be <code>Read Comitted</code>, which only lets you read values which have already been comitted by other running transactions, in combination with a propagation level of <code>Required</code>. Then you can work from there if you application has other needs. </p>\n\n<hr>\n\n<p>A practical example where a new transaction will always be created when entering the <code>provideService</code> routine and completed when leaving. </p>\n\n<pre><code>public class FooService {\n    private Repository repo1;\n    private Repository repo2;\n\n    @Transactional(propagation=Propagation.REQUIRES_NEW)\n    public void provideService() {\n        repo1.retrieveFoo();\n        repo2.retrieveFoo();\n    }\n}\n</code></pre>\n\n<p>Had we used <code>Required</code> instead the transaction <a href=\"http://stackoverflow.com/questions/2754160/question-about-spring-transaction-propagation\">will remain open</a> if the transaction was already open when entering the routine. \nNote also that the result of a <code>rollback</code> could be different as several executions could take part in the same transaction. </p>\n\n<hr>\n\n<p>We can easily verify the behaviour with a test and see how results differ with propagation levels</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:/fooService.xml\")\npublic class FooServiceTests {\n\n    private @Autowired TransactionManager transactionManager;\n    private @Autowired FooService fooService;\n\n    @Test\n    public void testProvideService() {\n        TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionDefinition());\n        fooService.provideService();\n        transactionManager.rollback(status);\n        // assert repository values are unchanged ... \n}\n</code></pre>\n\n<p>With a propagation level of</p>\n\n<ul>\n<li><p><code>Requires new</code> we would expect <code>fooService.provideService()</code> was <em>NOT</em> rolled back since it created it's own sub-transaction. </p></li>\n<li><p><code>Required</code> we would expect everything was rolled back and backing store unchanged. </p></li>\n</ul>\n    "},{"t":"Spring Boot - how to configure port","l":"http://stackoverflow.com/questions/21083170/spring-boot-how-to-configure-port","q":"\n\n<p>Looking for way how to configure port in Spring boot app:</p>\n\n<pre><code>@Controller\n@EnableAutoConfiguration\npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World!\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n}\n</code></pre>\n\n<p>That is all sources :)</p>\n    ","a":"\n<p>As said in docs <a href=\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-change-the-http-port\">http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-change-the-http-port</a></p>\n\n<p>either set <code>server.port</code> as system property using command line option to jvm <code>--server.port=8090</code> or add <code>application.properties</code> in <code>/src/main/resources/</code> with</p>\n\n<pre><code>server.port = 8090\n</code></pre>\n\n<p>For random port use</p>\n\n<pre><code>server.port=0\n</code></pre>\n    "},{"t":"Getting Spring Application Context","l":"http://stackoverflow.com/questions/129207/getting-spring-application-context","q":"\n\n<p>Is there a way to statically/globally request a copy of the ApplicationContext in a Spring application?</p>\n\n<p>Assuming the main class starts up and initializes the application context, does it need to pass that down through the call stack to any classes that need it, or is there a way for a class to ask for the previously created context?  (Which I assume has to be a singleton?)</p>\n    ","a":"\n<p>If the object that needs access to the container is a bean in the container, just implement the <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-aware-beanfactoryaware\" rel=\"nofollow noreferrer\">BeanFactoryAware</a> or <a href=\"http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/context/ApplicationContextAware.html\" rel=\"nofollow noreferrer\">ApplicationContextAware</a> interfaces.</p>\n\n<p>If an object outside the container needs access to the container, I've used a <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern#Java\" rel=\"nofollow noreferrer\">standard GoF singleton pattern</a> for the spring container. That way, you only have one singleton in your application, the rest are all singleton beans in the container.</p>\n    "},{"t":"Spring 3.0 - Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/security]","l":"http://stackoverflow.com/questions/2161050/spring-3-0-unable-to-locate-spring-namespacehandler-for-xml-schema-namespace","q":"\n\n<p>Any ideas what could be the cause of this?</p>\n\n<blockquote>\n  <p>Unable to locate Spring\n  NamespaceHandler for XML schema\n  namespace\n  [<a href=\"http://www.springframework.org/schema/security]\" rel=\"nofollow noreferrer\">http://www.springframework.org/schema/security]</a></p>\n</blockquote>\n\n<pre><code>org.springframework.web.context.ContextLoader initWebApplicationContext: Context initialization failed\norg.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/security]\nOffending resource: ServletContext resource [/WEB-INF/applicationContext.xml]\n</code></pre>\n\n<p>This is my applicationContext.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans:beans xmlns=\"http://www.springframework.org/schema/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:beans=\"http://www.springframework.org/schema/beans\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        http://www.springframework.org/schema/context \n        http://www.springframework.org/schema/context/spring-context-3.0.xsd\n        http://www.springframework.org/schema/security\n        http://www.springframework.org/schema/security/spring-security-3.0.xsd\"&gt;\n...\n&lt;/beans:beans&gt;\n</code></pre>\n\n<p>In my pom.xml I have:</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-security-core&lt;/artifactId&gt;      \n    &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-security-openid&lt;/artifactId&gt;\n    &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n    ","a":"\n<p>I needed to add an additional Maven dependency:</p>\n\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;\n        &lt;version&gt;3.0.1.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n    "},{"t":"Type safety: Unchecked cast","l":"http://stackoverflow.com/questions/262367/type-safety-unchecked-cast","q":"\n\n<p>In my spring application context file, I have something like:</p>\n\n<pre><code>&lt;util:map id=\"someMap\" map-class=\"java.util.HashMap\" key-type=\"java.lang.String\" value-type=\"java.lang.String\"&gt;\n    &lt;entry key=\"some_key\" value=\"some value\" /&gt;\n    &lt;entry key=\"some_key_2\" value=\"some value\" /&gt;   \n&lt;/util:map&gt;\n</code></pre>\n\n<p>In java class, the implementation looks like:</p>\n\n<pre><code>private Map&lt;String, String&gt; someMap = new HashMap&lt;String, String&gt;();\nsomeMap = (HashMap&lt;String, String&gt;)getApplicationContext().getBean(\"someMap\");\n</code></pre>\n\n<p>In Eclipse, I see a warning that says:</p>\n\n<p><strong>Type safety: Unchecked cast from Object to HashMap</strong></p>\n\n<p>What did I do wrong? How do I resolve the issue?</p>\n    ","a":"\n<p>Well, first of all, you're wasting memory with the new <code>HashMap</code> creation call. Your second line completely disregards the reference to this created hashmap, making it then available to the garbage collector. So, don't do that, use:</p>\n\n<pre><code>private Map&lt;String, String&gt; someMap = (HashMap&lt;String, String&gt;)getApplicationContext().getBean(\"someMap\");\n</code></pre>\n\n<p>Secondly, the compiler is complaining that you cast the object to a <code>HashMap</code> without checking if it is a <code>HashMap</code>. But, even if you were to do:</p>\n\n<pre><code>if(getApplicationContext().getBean(\"someMap\") instanceof HashMap) {\n    private Map&lt;String, String&gt; someMap = (HashMap&lt;String, String&gt;)getApplicationContext().getBean(\"someMap\");\n}\n</code></pre>\n\n<p>You would probably still get this warning. The problem is, <code>getBean</code> returns <code>Object</code>, so it is unknown what the type is. Converting it to <code>HashMap</code> directly would not cause the problem with the second case (and perhaps there would not be a warning in the first case, I'm not sure how pedantic the Java compiler is with warnings for Java 5). However, you are converting it to a <code>HashMap&lt;String, String&gt;</code>.</p>\n\n<p>HashMaps are really maps that take an object as a key and have an object as a value, <code>HashMap&lt;Object, Object&gt;</code> if you will. Thus, there is no guarentee that when you get your bean that it can be represented as a <code>HashMap&lt;String, String&gt;</code> because you could have <code>HashMap&lt;Date, Calendar&gt;</code> because the non-generic representation that is returned can have any objects.</p>\n\n<p>If the code compiles, and you can execute <code>String value = map.get(\"thisString\");</code> without any errors, don't worry about this warning. But if the map isn't completely of string keys to string values, you will get a <code>ClassCastException</code> at runtime, because the generics cannot block this from happening in this case.</p>\n    "},{"t":"How to define a List bean in Spring?","l":"http://stackoverflow.com/questions/2416056/how-to-define-a-list-bean-in-spring","q":"\n\n<p>I'm using Spring to define stages in my application. It's configured that the necessary class (here called <code>Configurator</code>) is injected with the stages.<br>\nNow I need the List of Stages in another class, named <code>LoginBean</code>. The <code>Configurator</code> doesn't offer access to his List of Stages.</p>\n\n<p>I cannot change the class <code>Configurator</code>.</p>\n\n<p>My Idea:<br>\nDefine a new bean called Stages and inject it to <code>Configurator</code> and <code>LoginBean</code>.\nMy problem with this idea is that I don't know how to transform this property:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;property ...&gt;\n  &lt;list&gt;\n    &lt;bean ... &gt;...&lt;/bean&gt;\n    &lt;bean ... &gt;...&lt;/bean&gt;\n    &lt;bean ... &gt;...&lt;/bean&gt;\n  &lt;/list&gt;\n&lt;/property&gt;\n</code></pre>\n\n<p>into a bean.</p>\n\n<p>Something like this does not work:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"stages\" class=\"java.util.ArrayList\"&gt;\n</code></pre>\n\n<p>Can anybody help me with this?</p>\n    ","a":"\n<p>Import the spring util namespace. Then you can define a list bean as follows:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:util=\"http://www.springframework.org/schema/util\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                    http://www.springframework.org/schema/util\n                    http://www.springframework.org/schema/util/spring-util-2.5.xsd\"&gt;\n\n\n&lt;util:list id=\"myList\" value-type=\"java.lang.String\"&gt;\n    &lt;value&gt;foo&lt;/value&gt;\n    &lt;value&gt;bar&lt;/value&gt;\n&lt;/util:list&gt;\n</code></pre>\n\n<p></p>\n\n<p>The value-type is the generics type to be used, and is optional. You can also specify the list implementation class using the attribute <code>list-class</code>.</p>\n    "},{"t":"Understanding Spring @Autowired usage","l":"http://stackoverflow.com/questions/19414734/understanding-spring-autowired-usage","q":"\n\n<p>I am reading the spring site to understand Spring Autowired annotation:</p>\n\n<p><a href=\"http://docs.spring.io/spring/docs/3.0.x/reference/beans.html#beans-autowired-annotation\">http://docs.spring.io/spring/docs/3.0.x/reference/beans.html#beans-autowired-annotation</a></p>\n\n<p>3.9.2 @Autowired and @Inject</p>\n\n<p>I am not able to understand the below examples. Do we need to do something in the XML for it to work? </p>\n\n<p>EXAMPLE 1</p>\n\n<pre><code>public class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Autowired\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // ...\n}\n</code></pre>\n\n<p>EXAMPLE 2 </p>\n\n<pre><code>public class MovieRecommender {\n\n    private MovieCatalog movieCatalog;\n\n    private CustomerPreferenceDao customerPreferenceDao;\n\n    @Autowired\n    public void prepare(MovieCatalog movieCatalog,\n                    CustomerPreferenceDao customerPreferenceDao) {\n        this.movieCatalog = movieCatalog;\n        this.customerPreferenceDao = customerPreferenceDao;\n    }\n\n    // ...\n}\n</code></pre>\n\n<p>How can the two classes be autowired implementing the same interface and using the same class? </p>\n\n<p>Example: </p>\n\n<pre><code>class Red implements Color\nclass Blue implements Color\n\nclass myMainClass{\n    @Autowired \n    private Color color;\n\n    draw(){\n        color.design(); \n    } \n}\n</code></pre>\n\n<p>Which design method will be called? How do I make sure the design method of Red class will be called and not Blue?</p>\n    ","a":"\n<p>The <code>@Autowired</code> annotation allows you to skip configurations elsewhere of what to inject and just does it for you. Assuming your package is <code>com.mycompany.movies</code> you have to put this tag in your XML (application context file):</p>\n\n<pre><code>&lt;context:component-scan base-package=\"com.mycompany.movies\" /&gt;\n</code></pre>\n\n<p>This tag will do an auto-scanning. Assuming each class that has to become a bean is annotated with a correct annotation like <code>@Component</code> (for simple bean) or <code>@Controller</code> (for a servlet control) or <code>@Repository</code> (for <code>DAO</code> classes) and these classes are somewhere under the package <code>com.mycompany.movies</code>, Spring will find all of these and create a bean for each one. This is done in 2 scans of the classes - the first time it just searches for classes that need to become a bean and maps the injections it needs to be doing, and on the second scan it injects the beans. Of course, you can define your beans in the more traditional XML file or with a <a href=\"http://stackoverflow.com/q/24014919/2083523\">@Configuration</a> class (or any combination of the three).</p>\n\n<p>The <code>@Autowired</code> annotation tells Spring where an injection needs to occur. If you put it on a method <code>setMovieFinder</code> it understands (by the prefix <code>set</code> + the <code>@Autowired</code> annotation) that a bean needs to be injected. In the second scan, Spring searches for a bean of type <code>MovieFinder</code>, and if it finds such bean, it injects it to this method. If it finds two such beans you will get an <code>Exception</code>. To avoid the <code>Exception</code>, you can use the <code>@Qualifier</code> annotation and tell it which of the two beans to inject in the following manner:</p>\n\n<pre><code>@Qualifier(\"redBean\")\nclass Red implements Color {\n   // Class code here\n}\n\n@Qualifier(\"blueBean\")\nclass Blue implements Color {\n   // Class code here\n}\n</code></pre>\n\n<p>Or if you prefer to declare the beans in your XML, it would look something like this:</p>\n\n<pre><code>&lt;bean id=\"redBean\" class=\"com.mycompany.movies.Red\"/&gt;\n\n&lt;bean id=\"blueBean\" class=\"com.mycompany.movies.Blue\"/&gt;\n</code></pre>\n\n<p>In the <code>@Autowired</code> declaration, you need to also add the <code>@Qualifier</code> to tell which of the two color beans to inject:</p>\n\n<pre><code>@Autowired\n@Qualifier(\"redBean\")\npublic void setColor(Color color) {\n  this.color = color;\n}\n</code></pre>\n\n<p>If you don't want to use two annotations (the <code>@Autowired</code> and <code>@Qualifier</code>) you can use <code>@Resource</code> to combine these two:</p>\n\n<pre><code>@Resource(name=\"redBean\")\npublic void setColor(Color color) {\n  this.color = color;\n}\n</code></pre>\n\n<p>The <code>@Resource</code> (you can read some extra data about it in the first comment on this answer) spares you the use of two annotations and instead you only use one.</p>\n\n<p>I'll just add two more comments:</p>\n\n<ol>\n<li>Good practice would be to use <code>@Inject</code> instead of <code>@Autowired</code> because it is not Spring-specific and is <a href=\"http://www.mkyong.com/spring3/spring-3-and-jsr-330-inject-and-named-example/\">part of the <code>JSR-330</code> standard</a>. </li>\n<li>Another good practice would be to put the <code>@Inject</code> / <code>@Autowired</code> on a constructor instead of a method. If you put it on a constructor, you can validate that the injected beans are not null and fail fast when you try to start the application and avoid a <code>NullPointerException</code> when you need to actually use the bean.</li>\n</ol>\n\n<p>So, to sum it up: The <code>@Autowired</code> annotation spares you the need to do the wiring by yourself in the XML file (or any other way) and just finds for you what needs to be injected where, and does that for you.</p>\n\n<p><strong>Update</strong>: To complete the picture, I created a <a href=\"http://stackoverflow.com/q/24014919/2083523\">new question</a> about the <code>@Configuration</code> class.</p>\n    "},{"t":"What is difference between CrudRepository and JpaRepository interfaces in Spring Data JPA","l":"http://stackoverflow.com/questions/14014086/what-is-difference-between-crudrepository-and-jparepository-interfaces-in-spring","q":"\n\n<p>what is difference between <code>CrudRepository</code> and <code>JpaRepository</code> interfaces in Spring Data JPA, when see the examples in the web. I see them there used kind of interchangeably. What is the difference between them? Why would you want to use one over the other?</p>\n    ","a":"\n<p><a href=\"http://static.springsource.org/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html\">JpaRepository</a> extends <a href=\"http://static.springsource.org/spring-data/data-commons/docs/1.2.0.M1/api/org/springframework/data/repository/PagingAndSortingRepository.html\">PagingAndSortingRepository</a> which in turn extends <a href=\"http://static.springsource.org/spring-data/data-commons/docs/1.2.1.RELEASE/api/org/springframework/data/repository/CrudRepository.html\">CrudRepository</a>. </p>\n\n<p>Their main functions are:</p>\n\n<ul>\n<li><a href=\"http://static.springsource.org/spring-data/data-commons/docs/1.2.1.RELEASE/api/org/springframework/data/repository/CrudRepository.html\">CrudRepository</a> mainly provides CRUD functions.</li>\n<li><a href=\"http://static.springsource.org/spring-data/data-commons/docs/1.2.0.M1/api/org/springframework/data/repository/PagingAndSortingRepository.html\">PagingAndSortingRepository</a> provide methods to do pagination and sorting records.</li>\n<li><a href=\"http://static.springsource.org/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html\">JpaRepository</a> provides some JPA related method such as flushing the persistence context and delete record in a batch.</li>\n</ul>\n\n<p>Because of the inheritance mentioned above,  <code>JpaRepository</code> will have all the functions of <code>CrudRepository</code> and <code>PagingAndSortingRepository</code>. So if you don't need the repository to have the functions provided by <code>JpaRepository</code> and <code>PagingAndSortingRepository</code> , use <code>CrudRepository</code>. </p>\n    "},{"t":"Spring - @Transactional - What happens in background?","l":"http://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background","q":"\n\n<p>I want to know what actually happens when you annotate a method with @Transactional?\nOf course, I know that Spring will wrap that method in a Transaction.</p>\n\n<p>But, I have the following doubts:</p>\n\n<ol>\n<li>I heard that Spring creates a <strong>proxy class</strong>? Can someone explain this in more <strong>depth</strong>. <strong>What actually resides in that proxy class? What happens to the actual class? And how can I see Spring's created proxied class</strong> </li>\n<li>I also read in Spring docs that: </li>\n</ol>\n\n<blockquote>\n  <p><em>Note: Since this mechanism is based on proxies, <strong>only 'external' method calls coming in through the proxy will be intercepted</strong>.  This means that 'self-invocation', i.e. a method within the target object calling some other method of the target object, won't lead to an actual transaction at runtime even if the invoked method is marked with @Transactional!</em></p>\n</blockquote>\n\n<p>Source: <a href=\"http://static.springsource.org/spring/docs/2.0.x/reference/transaction.html\" rel=\"nofollow noreferrer\">http://static.springsource.org/spring/docs/2.0.x/reference/transaction.html</a></p>\n\n<p><strong>Why only external method calls will be under Transaction and not the self-invocation methods. Please explain.</strong></p>\n\n<p>[Yes, I am a newbie and I don't mind accepting the fact that I don't know this]</p>\n\n<p>Cheers !!</p>\n    ","a":"\n<p>This is a big topic. The Spring reference doc devotes multiple chapters to it. I recommend reading the ones on <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/aop.html\" rel=\"nofollow noreferrer\">Aspect-Oriented Programming</a> and <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/transaction.html\" rel=\"nofollow noreferrer\">Transactions</a>, as Spring's declarative transaction support uses AOP at its foundation.</p>\n\n<p>But at a very high level, Spring creates proxies for classes that declare <strong>@Transactional</strong> on the class itself or on members. The proxy is mostly invisible at runtime. It provides a way for Spring to inject behaviors before, after, or around method calls into the object being proxied. Transaction management is just one example of the behaviors that can be hooked in. Security checks are another. And you can provide your own, too, for things like logging. So when you annotate a method with <strong>@Transactional</strong>, Spring dynamically creates a proxy that implements the same interface(s) as the class you're annotating. And when clients make calls into your object, the calls are intercepted and the behaviors injected via the proxy mechanism. </p>\n\n<p>Transactions in EJB work similarly, by the way.</p>\n\n<p>As you observed, through, the proxy mechanism only works when calls come in from some external object. When you make an internal call within the object, you're really making a call through the \"<strong>this</strong>\" reference, which bypasses the proxy. There are ways of working around that problem, however. I explain one approach in <a href=\"http://forum.springsource.org/showthread.php?t=11656\" rel=\"nofollow noreferrer\">this forum post</a> in which I use a <strong>BeanFactoryPostProcessor</strong> to inject an instance of the proxy into \"self-referencing\" classes at runtime. I save this reference to a member variable called \"<strong>me</strong>\". Then if I need to make internal calls that require a change in the transaction status of the thread, I direct the call through the proxy (e.g. \"<strong>me.someMethod()</strong>\".) The forum post explains in more detail. Note that the <strong>BeanFactoryPostProcessor</strong> code would be a little different now, as it was written back in the Spring 1.x timeframe. But hopefully it gives you an idea. I have an updated version that I could probably make available.</p>\n    "},{"t":"Difference between using bean id and name in Spring configuration file","l":"http://stackoverflow.com/questions/874505/difference-between-using-bean-id-and-name-in-spring-configuration-file","q":"\n\n<p>Is there any difference between using an <code>id</code> attribute and <code>name</code> attribute on a <code>&lt;bean&gt;</code> element in a Spring configuration file?</p>\n    ","a":"\n<p>Since Spring 3.1 the <code>id</code> attribute is an <code>xsd:string</code> and permits the same range of characters as the <code>name</code> attribute.</p>\n\n<p>The only difference between an <code>id</code> and a <code>name</code> is that a <code>name</code> can contain multiple aliases separated by a comma, semicolon or whitespace, whereas an <code>id</code> must be a single value.</p>\n\n<p>From the Spring 3.2 documentation:</p>\n\n<blockquote>\n  <p>In XML-based configuration metadata, you use the id and/or name attributes to specify the bean identifier(s). The id attribute allows you to specify exactly one id. Conventionally these names are alphanumeric ('myBean', 'fooService', etc), but may special characters as well. If you want to introduce other aliases to the bean, you can also specify them in the name attribute, separated by a comma (,), semicolon (;), or white space. <strong>As a historical note, in versions prior to Spring 3.1, the id attribute was typed as an xsd:ID, which constrained possible characters. As of 3.1, it is now xsd:string. Note that bean id uniqueness is still enforced by the container, though no longer by XML parsers.</strong></p>\n</blockquote>\n    "},{"t":"Why would I use Scala/Lift over Java/Spring? [closed]","l":"http://stackoverflow.com/questions/2683914/why-would-i-use-scala-lift-over-java-spring","q":"\n\n<p>I know this question is a bit open but I have been looking at Scala/Lift as an alternative to Java/Spring and I wonder what are the real advantages that Scala/Lift has over it. From my perspective and experience, Java Annotations and Spring really minimizes the amount of coding that you have to do for an application. Does Scala/Lift improve upon that?</p>\n    ","a":"\n<p><em>Let's assume we're equally comfortable in Scala and Java, and ignore the (huge) language differences except as they pertain to Spring or Lift.</em></p>\n\n<p>Spring and Lift are almost diametrically opposed in terms of maturity and goals.</p>\n\n<ul>\n<li>Spring is about five years older than Lift</li>\n<li>Lift is monolithic and targets only the web; Spring is modular and targets both web and \"regular\" apps</li>\n<li>Spring supports a plethora of Java EE features; Lift ignores that stuff</li>\n</ul>\n\n<p>In a sentence, Spring is heavyweight and Lift is lightweight.  With sufficient determination and resources you can turn that on its head, but you would need a <em>lot</em> of both.</p>\n\n<p>Here are concrete differences that stuck in my mind after working with both frameworks.  This isn't an exhaustive list, which I can't compile anyhow.  Just what seemed most interesting to me...</p>\n\n<ol>\n<li><p>View philosophy</p>\n\n<p>Lift encourages placing some view material in snippet/action methods.  Snippet code especially will be sprinkled with programmatically generated form elements, <code>&lt;div&gt;</code>s, <code>&lt;p&gt;</code>s, etc.</p>\n\n<p>This is powerful and useful, especially since Scala has a builtin language-level XML mode.  One can write XML inline within Scala methods, including variable bindings in braces.  This can be delightful for very simple XML services or mockups of services -- you can bang out a suite of HTTP response actions all in one splendidly terse file, without templates or much attendant configuration.  The downside is complexity.  Depending on how far you go, there's either a fuzzy separation of concerns between view and logic, or no separation.</p>\n\n<p>In contrast, regular use of Spring for webapps enforces a strong separation between the view and everything else.  I think Spring supports several templating engines, but I've only used JSP in anything serious.  Doing a Lift-inspired \"fuzzy MVC\" design with JSP would be madness.  This is a good thing on larger projects, where the time to just read and understand can be overwhelming.</p></li>\n<li><p>Object-Relational Mapper Choices</p>\n\n<p>Lift's builtin ORM is \"Mapper\".  There's an upcoming alternative called \"Record\", but I think it's still considered pre-alpha.  The LiftWeb Book has sections on using both Mapper and JPA.</p>\n\n<p>Lift's <a href=\"http://neuralmonkey.blogspot.com/2009/08/simple-lift-crud.html\" rel=\"nofollow noreferrer\">CRUDify</a> feature, cool as it is, only works with Mapper (and not JPA).</p>\n\n<p>Of course, Spring supports a <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-introduction\" rel=\"nofollow noreferrer\">panoply of standard and/or mature database technologies</a>.   The operative word there is \"supports\".  Theoretically, you can use any Java ORM with Lift, since you can call arbitrary Java code from Scala.  But Lift only really supports Mapper and (to a much lesser extent) JPA.  Also, working with nontrivial Java code in Scala is currently not as seamless as one might like; using a Java ORM, you will probably find yourself either using both Java and Scala collections everywhere or converting all collections in and out of the Java components.</p></li>\n<li><p>Configuration</p>\n\n<p>Lift apps are configured pretty much entirely through a method an application-wide \"Boot\" class.  In other words, the config is done through Scala code.  This is perfect for projects with brief configurations, and when the person doing the configuring is comfortable editing Scala.</p>\n\n<p>Spring is pretty flexible in terms of configuration.  Lots of conf options can be driven either through XML configuration or annotations.</p></li>\n<li><p>Documentation</p>\n\n<p>Lift's documentation is young.  Spring's docs are pretty mature.  There's no contest.</p>\n\n<p>Since Spring's docs are already nicely organized and easy to find, I'll review the docs I found for Lift.  There are basically 4 sources of Lift documentation: the <a href=\"http://groups.google.com/group/the-lift-book/\" rel=\"nofollow noreferrer\">LiftWeb Book</a>, the <a href=\"http://scala-tools.org/scaladocs/liftweb/1.0/\" rel=\"nofollow noreferrer\">API Docs</a>, LiftWeb's <a href=\"http://groups.google.com/group/liftweb\" rel=\"nofollow noreferrer\">Google group</a>, and \"<a href=\"http://liftweb.net/docs/getting_started/mod_master.html\" rel=\"nofollow noreferrer\">Getting Started</a>\".  There's also a nice suite of code examples, but I wouldn't call them \"documentation\" per se.</p>\n\n<p>The API docs are incomplete.  The LiftWeb Book has been published on trees, but it's also freely available online.  It is really useful, although its decidedly didactic style irritated me at times.  It's a little long on tutorial and short on contract.  Spring has a proper manual, which Lift lacks.</p>\n\n<p>But Lift does have a nice set of examples.  If you're comfortable reading the Lift code and example code (and you know Scala well already), you can work things out in fairly short order.</p></li>\n</ol>\n\n<p>Both frameworks are compelling.  There's a broad range of apps where you can choose either and do well.</p>\n    "},{"t":"Spring MVC @PathVariable with dot (.) is getting truncated","l":"http://stackoverflow.com/questions/16332092/spring-mvc-pathvariable-with-dot-is-getting-truncated","q":"\n\n<p>This is continuation of question\n<a href=\"http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncated\">Spring MVC @PathVariable getting truncated</a></p>\n\n<p>Spring forum states that it has fixed(3.2 version) as part of ContentNegotiationManager. see the below link.<br>\n<a href=\"https://jira.springsource.org/browse/SPR-6164\">https://jira.springsource.org/browse/SPR-6164</a>\n<br>\n<a href=\"https://jira.springsource.org/browse/SPR-7632\">https://jira.springsource.org/browse/SPR-7632</a></p>\n\n<p>In my application requestParameter with .com is truncated.</p>\n\n<p>Could anyone explain me how to use this new feature? how is it configurable at xml?</p>\n\n<p>Note:</p>\n\n<p><a href=\"http://forum.springsource.org/showthread.php?137000-Spring-MVC-PathVariable-with-dot-(-)-is-getting-truncated&amp;p=444607#post444607\">http://forum.springsource.org/showthread.php?137000-Spring-MVC-PathVariable-with-dot-(-)-is-getting-truncated&amp;p=444607#post444607</a></p>\n    ","a":"\n<p>Here's an approach that relies purely on java configuration:</p>\n\n<pre><code>import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n\n@Configuration\npublic class MvcConfig extends WebMvcConfigurationSupport{\n\n    @Bean\n    public RequestMappingHandlerMapping requestMappingHandlerMapping() {\n        RequestMappingHandlerMapping handlerMapping = super.requestMappingHandlerMapping();\n        handlerMapping.setUseSuffixPatternMatch(false);\n        handlerMapping.setUseTrailingSlashMatch(false);\n        return handlerMapping;\n    }\n}\n</code></pre>\n    "},{"t":"Multiple Spring @RequestMapping annotations","l":"http://stackoverflow.com/questions/2513031/multiple-spring-requestmapping-annotations","q":"\n\n<p>Is it possible to use multiple @RequestMapping spring annotations in a method?  Like:</p>\n\n<pre><code>@RequestMapping(\"/\")\n@RequestMapping(\"\")\n@RequestMapping(\"/welcome\")\npublic String welcomeHandler(){\n return(\"welcome\");\n}\n</code></pre>\n    ","a":"\n<p><code>@RequestMapping</code> has a <code>String[]</code> value parameter, so you should be able to specify multiple values like this:</p>\n\n<p><code>@RequestMapping(value={\"\", \"/\", \"welcome\"})</code></p>\n    "},{"t":"What is the proper way to re-attach detached objects in Hibernate?","l":"http://stackoverflow.com/questions/912659/what-is-the-proper-way-to-re-attach-detached-objects-in-hibernate","q":"\n\n<p>I have a situation in which I need to re-attach detached objects to a hibernate session, although an object of the same identity MAY already exist in the session, which will cause errors.</p>\n\n<p>Right now, I can do one of two things.</p>\n\n<ol>\n<li><p><code>getHibernateTemplate().update( obj )</code>\nThis works if and only if an object doesn't already exist in the hibernate session. Exceptions are thrown stating an object with the given identifier already exists in the session when I need it later.</p></li>\n<li><p><code>getHibernateTemplate().merge( obj )</code>\nThis works if and only if an object exists in the hibernate session. Exceptions are thrown when I need the object to be in a session later if I use this.</p></li>\n</ol>\n\n<p>Given these two scenarios, how can I generically attach sessions to objects? I don't want to use exceptions to control the flow of this problem's solution, as there must be a more elegant solution...</p>\n    ","a":"\n<p>to reattach this object, you must use merge();</p>\n\n<p>this methode accept in parameter your entity detached and return an entity will be attached and reloaded from Database.</p>\n\n<pre><code>Example :\n    Lot objAttach = em.merge(oldObjDetached);\n    objAttach.setEtat(...);\n    em.persist(objAttach);\n</code></pre>\n    "},{"t":"What in the world are Spring beans?","l":"http://stackoverflow.com/questions/17193365/what-in-the-world-are-spring-beans","q":"\n\n<p>I am yet to find a high-level definition of Spring beans that I can understand. I see them referenced often in Grails documentation and books, but I think that understanding what they are would be beneficial. So what are Spring beans? How can they be used? Do they have something to do with Dependency Injection?</p>\n    ","a":"\n<blockquote>\n  <p>The objects that form the backbone of your application and that are\n  managed by the Spring IoC container are called beans. A bean is an\n  object that is instantiated, assembled, and otherwise managed by a\n  Spring IoC container. These beans are created with the configuration\n  metadata that you supply to the container, for example, in the form of\n  XML  definitions.</p>\n</blockquote>\n\n<p>More to learn about beans and scope from <a href=\"http://static.springsource.org/spring/docs/3.0.0.M3/reference/html/ch04s04.html\">SpringSource</a>:</p>\n\n<blockquote>\n  <p>When you create a bean definition what you are actually creating is a\n  recipe for creating actual instances of the class defined by that bean\n  definition. The idea that a bean definition is a recipe is important,\n  because it means that, just like a class, you can potentially have\n  many object instances created from a single recipe.</p>\n  \n  <p>You can control not only the various dependencies and configuration\n  values that are to be plugged into an object that is created from a\n  particular bean definition, but also the scope of the objects created\n  from a particular bean definition. This approach is very powerful and\n  gives you the flexibility to choose the scope of the objects you\n  create through configuration instead of having to 'bake in' the scope\n  of an object at the Java class level. Beans can be defined to be\n  deployed in one of a number of scopes</p>\n</blockquote>\n    "},{"t":"BeanFactory vs ApplicationContext","l":"http://stackoverflow.com/questions/243385/beanfactory-vs-applicationcontext","q":"\n\n<p>I'm pretty new to the Spring Framework, I've been playing around with it and putting a few samples apps together for the purposes of evaluating Spring MVC for use in an upcoming company project. So far I really like what I see in Spring MVC, seems very easy to use and encourages you to write classes that are very unit test-friendly.</p>\n\n<p>Just as an exercise, I'm writing a main method for one of my sample/test projects. One thing I'm unclear about is the exact differences between <code>BeanFactory</code> and <code>ApplicationContext</code> - which is appropriate to use in which conditions?</p>\n\n<p>I understand that <code>ApplicationContext</code> extends <code>BeanFactory</code>, but if I'm just writing a simple main method, do I need the extra functionality that <code>ApplicationContext</code> provides? And just exactly what kind of extra functionality does <code>ApplicationContext</code> provide?</p>\n\n<p>In addition to answering \"which should I use in a main() method\", are there any standards or guidelines as far as which implementation I should use in such a scenario? Should my main() method be written to depend on the bean/application configuration to be in XML format - is that a safe assumption, or am I locking the user into something specific?</p>\n\n<p>And does this answer change in a web environment - if any of my classes needed to be aware of Spring, are they more likely to need <code>ApplicationContext</code>?</p>\n\n<p>Thanks for any help. I know a lot of these questions are probably answered in the reference manual, but I'm having a hard time finding a clear breakdown of these two interfaces and the pros/cons of each without reading thru the manual with a fine-tooth comb.</p>\n    ","a":"\n<p>The spring docs are great on this: <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#context-introduction-ctx-vs-beanfactory\" rel=\"nofollow noreferrer\">3.8.1. BeanFactory or ApplicationContext?</a>.\nThey have a table with a comparison, I'll post a snippet:</p>\n\n<p><strong>Bean Factory</strong></p>\n\n<ul>\n<li>Bean instantiation/wiring</li>\n</ul>\n\n<p><strong>Application Context</strong></p>\n\n<ul>\n<li>Bean instantiation/wiring</li>\n<li>Automatic BeanPostProcessor registration</li>\n<li>Automatic BeanFactoryPostProcessor registration</li>\n<li>Convenient MessageSource access (for i18n)</li>\n<li>ApplicationEvent publication</li>\n</ul>\n\n<p>So if you need any of the points presented on the Application Context side, you should use ApplicationContext.</p>\n    "},{"t":"Map enum in JPA with fixed values?","l":"http://stackoverflow.com/questions/2751733/map-enum-in-jpa-with-fixed-values","q":"\n\n<p>I'm looking for the different ways to map an enum using JPA. I especially want to set the integer value of each enum entry and to save only the integer value.</p>\n\n<pre><code>@Entity\n@Table(name = \"AUTHORITY_\")\npublic class Authority implements Serializable {\n\n  public enum Right {\n      READ(100), WRITE(200), EDITOR (300);\n\n      private int value;\n\n      Right(int value) { this.value = value; }\n\n      public int getValue() { return value; }\n  };\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  @Column(name = \"AUTHORITY_ID\")\n  private Long id;\n\n  // the enum to map : \n  private Right right;\n}\n</code></pre>\n\n<p>A simple solution is to use the Enumerated annotation with EnumType.ORDINAL:</p>\n\n<pre><code>@Column(name = \"RIGHT\")\n@Enumerated(EnumType.ORDINAL)\nprivate Right right;\n</code></pre>\n\n<p>But in this case JPA maps the enum index (0,1,2) and not the value I want (100,200,300).</p>\n\n<p>Th two solutions I found do not seem simple...</p>\n\n<h2>First Solution</h2>\n\n<p>A solution, <a href=\"http://forums.java.net/jive/thread.jspa?threadID=32048\" rel=\"nofollow noreferrer\">proposed here</a>, uses @PrePersist and @PostLoad to convert the enum to an other field and mark the enum field as transient:</p>\n\n<pre><code>@Basic\nprivate int intValueForAnEnum;\n\n@PrePersist\nvoid populateDBFields() {\n  intValueForAnEnum = right.getValue();\n}\n\n@PostLoad\nvoid populateTransientFields() {\n  right = Right.valueOf(intValueForAnEnum);\n}\n</code></pre>\n\n<h2>Second Solution</h2>\n\n<p>The second solution <a href=\"http://appfuse.org/display/APF/Java+5+Enums+Persistence+with+Hibernate\" rel=\"nofollow noreferrer\">proposed here</a> proposed a generic conversion object, but still seems heavy and hibernate-oriented (@Type doesn't seem to exist in Java EE): </p>\n\n<pre><code>@Type(\n    type = \"org.appfuse.tutorial.commons.hibernate.GenericEnumUserType\",\n    parameters = {\n            @Parameter(\n                name  = \"enumClass\",                      \n                value = \"Authority$Right\"),\n            @Parameter(\n                name  = \"identifierMethod\",\n                value = \"toInt\"),\n            @Parameter(\n                name  = \"valueOfMethod\",\n                value = \"fromInt\")\n            }\n)\n</code></pre>\n\n<h2>Is there any other solutions ?</h2>\n\n<p>I've several ideas in mind but I don't know if they exist in JPA:</p>\n\n<ul>\n<li>use the setter and getter methods of right member of Authority Class when loading and saving the Authority object</li>\n<li>an equivalent idea would be to tell JPA what are the methods of Right enum to convert enum to int and int to enum</li>\n<li>Because I'm using Spring, is there any way to tell JPA to use a specific converter (RightEditor) ?</li>\n</ul>\n    ","a":"\n<p>JPA provides only two ways to deal with enums,  by their <code>name</code> or by their <code>ordinal</code>. And the standard JPA doesn't support custom types. So:</p>\n\n<ul>\n<li>If you want to do custom type conversions, you'll have to use a provider extension (with Hibernate <code>UserType</code>, EclipseLink <code>Converter</code>, etc). (the second solution). ~or~</li>\n<li>You'll have to use the @PrePersist and @PostLoad trick (the first solution). ~or~</li>\n<li>Annotate getter and setter taking and returning the <code>int</code> value ~or~</li>\n<li>Use an integer attribute at the entity level and perform a translation in getters and setters.</li>\n</ul>\n\n<p>I'll illustrate the latest option (this is a basic implementation, tweak it as required):</p>\n\n<pre><code>@Entity\n@Table(name = \"AUTHORITY_\")\npublic class Authority implements Serializable {\n\n    public enum Right {\n        READ(100), WRITE(200), EDITOR (300);\n\n        private int value;\n\n        Right(int value) { this.value = value; }    \n\n        public int getValue() { return value; }\n\n        public static Right parse(int id) {\n            Right right = null; // Default\n            for (Right item : Right.values()) {\n                if (item.getValue()==id) {\n                    right = item;\n                    break;\n                }\n            }\n            return right;\n        }\n\n    };\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"AUTHORITY_ID\")\n    private Long id;\n\n    @Column(name = \"RIGHT_ID\")\n    private int rightId;\n\n    public Right getRight () {\n        return Right.parse(this.rightId);\n    }\n\n    public void setRight(Right right) {\n        this.rightId = right.getValue();\n    }\n\n}\n</code></pre>\n    "},{"t":"Spring: @Component versus @Bean","l":"http://stackoverflow.com/questions/10604298/spring-component-versus-bean","q":"\n\n<p>I understand that <code>@Component</code> annotation was introduced in spring 2.5 in order to get rid of xml bean definition by using classpath scanning.</p>\n\n<p><code>@Bean</code> was introduced in spring 3.0 and can be used with <code>@Configuration</code> in order to fully get rid of xml file and use java config instead.</p>\n\n<p>Would it have been possible to re-use the <code>@Component</code> annotation instead of introducing <code>@Bean</code> annotation? My understanding is that the final goal is to create beans in both cases.</p>\n    ","a":"\n<p><strong>@Component</strong>\nPreferable for component scanning and automatic wiring. </p>\n\n<p><em>When you have to use <strong>@Bean</strong>?</em> </p>\n\n<p>Sometimes automatic configuration is not an option. <strong>When?</strong> Let's imagine the you want to wire components from 3rd-party libraries (you don't have the source code so you can't annotate its classes with @Component), so automatic configuration is not possible.  The <strong>@Bean</strong> annotation <strong>returns an object</strong> that spring should register as bean in application context. the <strong>body of the method</strong> has logic responsible for creating bean instance</p>\n    "},{"t":"How to use JNDI DataSource provided by Tomcat in Spring?","l":"http://stackoverflow.com/questions/9183321/how-to-use-jndi-datasource-provided-by-tomcat-in-spring","q":"\n\n<p>It is said in Spring javadoc article about <code>DriverManagerDataSource</code> class, that this class is very simple and that it is recommended</p>\n\n<blockquote>\n  <p>to use a JNDI DataSource provided by the container. Such a <code>DataSource</code> can be exposed as a <code>DataSource</code> bean in a Spring ApplicationContext via <code>JndiObjectFactoryBean</code></p>\n</blockquote>\n\n<p>The question is: how to accomplish this? </p>\n\n<p>For example if I wish to have DataSource bean to access my custo mysql database, what I require then? What to write in context configuration etc?</p>\n    ","a":"\n<p>If using Spring's XML schema based configuration, setup in the Spring context like this:</p>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:jee=\"http://www.springframework.org/schema/jee\" xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd\"&gt;\n...\n&lt;jee:jndi-lookup id=\"dbDataSource\"\n   jndi-name=\"jdbc/DatabaseName\"\n   expected-type=\"javax.sql.DataSource\" /&gt;\n</code></pre>\n\n<p>Alternatively, setup using simple bean configuration like this:</p>\n\n<pre><code>&lt;bean id=\"DatabaseName\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n    &lt;property name=\"jndiName\" value=\"java:comp/env/jdbc/DatabaseName\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>You can declare the JNDI resource in tomcat's server.xml using something like this:</p>\n\n<pre><code>&lt;GlobalNamingResources&gt;\n    &lt;Resource name=\"jdbc/DatabaseName\"\n              auth=\"Container\"\n              type=\"javax.sql.DataSource\"\n              username=\"dbUser\"\n              password=\"dbPassword\"\n              url=\"jdbc:postgresql://localhost/dbname\"\n              driverClassName=\"org.postgresql.Driver\"\n              initialSize=\"20\"\n              maxWaitMillis=\"15000\"\n              maxTotal=\"75\"\n              maxIdle=\"20\"\n              maxAge=\"7200000\"\n              testOnBorrow=\"true\"\n              validationQuery=\"select 1\"\n              /&gt;\n&lt;/GlobalNamingResources&gt;\n</code></pre>\n\n<p>And reference the JNDI resource from Tomcat's web context.xml like this:</p>\n\n<pre><code>  &lt;ResourceLink name=\"jdbc/DatabaseName\"\n   global=\"jdbc/DatabaseName\"\n   type=\"javax.sql.DataSource\"/&gt;\n</code></pre>\n\n<p>Reference documentation:</p>\n\n<ul>\n<li><a href=\"https://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html\">Tomcat 8 JNDI Datasource HOW-TO</a></li>\n<li><a href=\"https://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Resource_Links\">Tomcat 8 Context Resource Links Reference</a></li>\n<li><a href=\"http://docs.spring.io/spring/docs/4.2.3.RELEASE/spring-framework-reference/htmlsingle/#xsd-config-body-schemas-jee-jndi-lookup\">Spring 4 JEE JNDI Lookup XML Schema Reference</a></li>\n<li><a href=\"http://docs.spring.io/spring/docs/4.2.3.RELEASE/javadoc-api/org/springframework/jndi/JndiObjectFactoryBean.html\">Spring 4 JndiObjectFactoryBean Javadoc</a></li>\n</ul>\n\n<p>Edit: This answer has been updated for Tomcat 8 and Spring 4.  There have been a few property name changes for Tomcat's <em>default</em> datasource resource pool setup.</p>\n    "},{"t":"Trigger 404 in Spring-MVC controller?","l":"http://stackoverflow.com/questions/2066946/trigger-404-in-spring-mvc-controller","q":"\n\n<p>How do I get a <a href=\"http://en.wikipedia.org/wiki/Spring_Framework\" rel=\"nofollow noreferrer\">Spring</a> 3.0 controller to trigger a 404?</p>\n\n<p>I have a controller with <code>@RequestMapping(value = \"/**\", method = RequestMethod.GET)</code> and for some <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow noreferrer\">URLs</a> accessing the controller, I want the container to come up with a 404.</p>\n    ","a":"\n<p>Since Spring 3.0 you also can throw an Exception declared with <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/bind/annotation/ResponseStatus.html\" rel=\"nofollow noreferrer\"><code>@ResponseStatus</code></a> annotation:</p>\n\n<pre><code>@ResponseStatus(value = HttpStatus.NOT_FOUND)\npublic class ResourceNotFoundException extends RuntimeException {\n    ...\n}\n\n@Controller\npublic class SomeController {\n    @RequestMapping.....\n    public void handleCall() {\n        if (isFound()) {\n            // whatever\n        }\n        else {\n            throw new ResourceNotFoundException(); \n        }\n    }\n}\n</code></pre>\n    "},{"t":"What's the difference between <mvc:annotation-driven /> and <context:annotation-config /> in servlet?","l":"http://stackoverflow.com/questions/3977973/whats-the-difference-between-mvcannotation-driven-and-contextannotation","q":"\n\n<p>I am migrating from Spring 2.5 to Spring 3. </p>\n\n<p>They have introduced <code>&lt;mvc:annotation-driven /&gt;</code> which does some black magic. This is expected to be declared in servlet configuration file only.</p>\n\n<p>In Spring 2.5 I have just used <code>&lt;context:annotation-config /&gt;</code> and <code>&lt;context:component-scan base='...'/&gt;</code> tags declared both in <code>application-context.xml</code> and dispatcher servlet configuration XML with appropriate base packages to scan.</p>\n\n<p>So I wonder what is the difference between <code>mvc:annotation-driven</code> and <code>context:annotation-config</code> tags in servlet config and what can I eliminate in Spring 3 config files?</p>\n    ","a":"\n<p><code>&lt;context:annotation-config&gt;</code> declares support for general annotations such as <code>@Required</code>, <code>@Autowired</code>, <code>@PostConstruct</code>, and so on.</p>\n\n<p><code>&lt;mvc:annotation-driven /&gt;</code> declares explicit support for annotation-driven MVC controllers (i.e. <code>@RequestMapping</code>, <code>@Controller</code>, although support for those is the default behaviour), as well as adding support for declarative validation via <code>@Valid</code> and message body marshalling with <code>@RequestBody</code>/<code>ResponseBody</code>.</p>\n    "},{"t":"Difference between spring @Controller and @RestController annotation","l":"http://stackoverflow.com/questions/25242321/difference-between-spring-controller-and-restcontroller-annotation","q":"\n\n<p>Difference between spring <code>@Controller</code> and <code>@RestController</code> annotation.</p>\n\n<p>Can <code>@Controller</code> annotation be used for both Web MVC and REST applications?<br>\nIf yes, how can we differentiate if it is Web MVC or REST application.</p>\n    ","a":"\n<ul>\n<li><code>@Controller</code> is used to mark classes as Spring MVC Controller.</li>\n<li><code>@RestController</code> is a convenience annotation that does nothing more than adding the <code>@Controller</code> and <code>@ResponseBody</code> annotations (see: <a href=\"http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html\">Javadoc</a>)</li>\n</ul>\n\n<p>So the following two controller definitions should do the same</p>\n\n<pre><code>@Controller\n@ResponseBody\npublic class MyController { }\n\n@RestController\npublic class MyRestController { }\n</code></pre>\n    "},{"t":"Shiro vs. SpringSecurity [closed]","l":"http://stackoverflow.com/questions/4991084/shiro-vs-springsecurity","q":"\n\n<p>I have currently evaluating Java based security frameworks, I am a Spring 3.0 user so it seemed that SpringSecurity would be the right Choice, but Spring security seems to suffer from excessive complexity, it certainly does not seem like it is making security easier to implement, Shiro seems to be much more coherent and easier to understand. I am looking for lists of pros and cons between these two frameworks.</p>\n    ","a":"\n<p>I too agree that Spring Security feels too complicated (to me).  Sure, they have done things to reduce complexity, like creating custom XML namespaces to reduce the quantity of XML configuration, but for me, these don't address <em>my</em> personal fundamental issue with Spring Security: its names and concepts are often confusing in general to me.  It's hard to just 'get it'.</p>\n\n<p>The second you start using Shiro though, you just 'get it'.  What was hard to understand in the security world is just that much easier to understand.  Things that are unbearably difficult to use in the JDK (e.g. Ciphers) are simplified to a level that is not just bearable, but often a joy to use.  </p>\n\n<p>For example, how do you hash+salt a password and base64 encode it in Java or Spring Security?  Neither are as simple and intuitive as Shiro's solution:</p>\n\n<pre><code>ByteSource salt = new SecureRandomNumberGenerator().nextBytes();\nnew Sha512Hash(password, salt).toBase64();\n</code></pre>\n\n<p>No need for commons-codec or anything else.  Just the Shiro jar.</p>\n\n<p>Now with regards to Spring environments, most of the Shiro developers use Spring as their primary application environment.  That means Shiro's Spring integration is superb and it all works exceptionally well.  You can rest assured that if you're writing a Spring app, you'll have a well-rounded security experience.</p>\n\n<p>For example, consider the Spring XML config example in another post in this thread.  Here's how you'd do (essentially) the same thing in Shiro:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&gt;\n\n&lt;bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"&gt;\n    &lt;property name=\"securityManager\" ref=\"securityManager\"/&gt;\n    &lt;property name=\"loginUrl\" value=\"/login.jsp\"/&gt;\n    &lt;property name=\"successUrl\" value=\"/home.jsp\"/&gt;\n    &lt;property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\"/&gt;\n    &lt;property name=\"filterChainDefinitions\"&gt;\n        &lt;value&gt;\n        /secure/** = authc\n        /** = anon\n        &lt;/value&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"&gt;\n    &lt;property name=\"realm\" ref=\"myRealm\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"myRealm\" class=\"...\"&gt;\n    ...\n&lt;/bean&gt;\n</code></pre>\n\n<p></p>\n\n<p>Although slightly more verbose than the other Spring example, it is easier to read IMO.</p>\n\n<p>You'll also find using Shiro's filter chain definitions are probably the easiest way to define general filter chains and web-based security rules ever!  Much nicer than defining them in web.xml.</p>\n\n<p>Finally, Shiro offers extreme 'pluggability' as well.  You'll see that you can configure and/or replace just about anything because of Shiro's POJO/injection-friendly architecture.  Shiro defaults almost everything to sane defaults and you can override or configure only what you need.</p>\n\n<p>At the end of the day, I think choosing either of these two is more about your mental model - which of the two make more sense and is more intuitive for you?  For some it will be Shiro, for others it will be Spring Security.  Shiro works great in Spring environments, so I would say choose based on which of the two you enjoy more and makes the most sense to you.</p>\n\n<p>For more on Shiro's Spring integration: <a href=\"http://shiro.apache.org/spring.html\">http://shiro.apache.org/spring.html</a></p>\n    "},{"t":"multiple packages in context:component-scan, spring config","l":"http://stackoverflow.com/questions/5269450/multiple-packages-in-contextcomponent-scan-spring-config","q":"\n\n<p>How can I add multiple packages in spring-servlet.xml file in <code>context:component-scan</code> element?</p>\n\n<p>I have tried</p>\n\n<pre><code>&lt;context:component-scan base-package=\"z.y.z.service\" base-package=\"x.y.z.controller\" /&gt;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>&lt;context:component-scan base-package=\"x.y.z.service, x.y.z.controller\" /&gt;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>&lt;context:component-scan base-package=\"x.y.z.service\" /&gt;\n&lt;context:component-scan base-package=\"x.y.z.controller\" /&gt;\n</code></pre>\n\n<p>but got error:</p>\n\n<pre><code>org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [x.y.z.dao.daoservice.LoginDAO] found for dependency:\n</code></pre>\n    ","a":"\n<p>The following approach is correct:</p>\n\n<pre><code>&lt;context:component-scan base-package=\"x.y.z.service, x.y.z.controller\" /&gt; \n</code></pre>\n\n<p>Note that the error complains about <code>x.y.z.dao.daoservice.LoginDAO</code>, which is not in the packages mentioned above, perhaps you forgot to add it:</p>\n\n<pre><code>&lt;context:component-scan base-package=\"x.y.z.service, x.y.z.controller, x.y.z.dao\" /&gt; \n</code></pre>\n    "},{"t":"@RequestParam vs @PathVariable","l":"http://stackoverflow.com/questions/13715811/requestparam-vs-pathvariable","q":"\n\n<p>What is the difference between <code>@RequestParam</code> and <code>@PathVariable</code> while handling special characters? <code>+</code> was accepted by <code>@RequestParam</code> as space. In case of <code>@PathVariable</code>, <code>+</code> was accepted as <code>+</code>.</p>\n    ","a":"\n<p><strong>@RequestParam</strong> annotation used for accessing the query parameter values from the request. Look at the following request URL:</p>\n\n<pre><code>http://localhost:8080/springmvc/hello/101?param1=10¶m2=20\n</code></pre>\n\n<p>In the above URL request, the values for param1 and param2 can be accessed as below:</p>\n\n<pre><code>public String getDetails(\n    @RequestParam(value=\"param1\", required=true) String param1,\n        @RequestParam(value=\"param2\", required=false) String param2){\n...\n}\n</code></pre>\n\n<p>The following are the list of parameters supported by the @RequestParam annotation:</p>\n\n<ul>\n<li><strong>defaultValue</strong> – This is the default value as a fallback mechanism if request is not having the value or it is empty.</li>\n<li><strong>name</strong> – Name of the parameter to bind</li>\n<li><strong>required</strong> – Whether the parameter is mandatory or not. If it is true, failing to send that parameter will fail.</li>\n<li><strong>value</strong> – This is an alias for the name attribute</li>\n</ul>\n\n<p><strong>@PathVariable</strong></p>\n\n<p>@<em>PathVariable</em> identifies the pattern that is used in the URI for the incoming request. Let’s look at the below request URL:</p>\n\n<blockquote>\n  <p><a href=\"http://localhost:8080/springmvc/hello/101?param1=10&amp;param2=20\" rel=\"nofollow\">http://localhost:8080/springmvc/hello/101?param1=10&amp;param2=20</a></p>\n</blockquote>\n\n<p>The above URL request can be written in your Spring MVC as below:</p>\n\n<pre><code>@RequestMapping(\"/hello/{id}\")    public String getDetails(@PathVariable(value=\"id\") String id,\n    @RequestParam(value=\"param1\", required=true) String param1,\n    @RequestParam(value=\"param2\", required=false) String param2){\n.......\n}\n</code></pre>\n\n<p>The @<strong>PathVariable</strong> annotation has only one attribute value for binding the request URI template. It is allowed to use the multiple @<strong>PathVariable</strong> annotation in the single method. But, ensure that no more than one method has the same pattern.</p>\n\n<p>Also there is one more interesting annotation:\n<strong>@MatrixVariable</strong></p>\n\n<blockquote>\n  <p><a href=\"http://localhost:8080/spring_3_2/matrixvars/stocks;BT.A=276.70,+10.40,+3.91;AZN=236.00,+103.00,+3.29;SBRY=375.50,+7.60,+2.07\" rel=\"nofollow\">http://localhost:8080/spring_3_2/matrixvars/stocks;BT.A=276.70,+10.40,+3.91;AZN=236.00,+103.00,+3.29;SBRY=375.50,+7.60,+2.07</a></p>\n</blockquote>\n\n<p>And the Controller method for it</p>\n\n<pre><code> @RequestMapping(value = \"/{stocks}\", method = RequestMethod.GET)\n  public String showPortfolioValues(@MatrixVariable Map&lt;String, List&lt;String&gt;&gt; matrixVars, Model model) {\n\n    logger.info(\"Storing {} Values which are: {}\", new Object[] { matrixVars.size(), matrixVars });\n\n    List&lt;List&lt;String&gt;&gt; outlist = map2List(matrixVars);\n    model.addAttribute(\"stocks\", outlist);\n\n    return \"stocks\";\n  }\n</code></pre>\n\n<p>But you must enable:</p>\n\n<pre><code>&lt;mvc:annotation-driven enableMatrixVariables=\"true\" &gt;\n</code></pre>\n    "},{"t":"Spring AOP vs AspectJ","l":"http://stackoverflow.com/questions/1606559/spring-aop-vs-aspectj","q":"\n\n<p>I am under the impression that Spring AOP is best used for application specific tasks such as security, logging, transactions, etc. as it uses custom Java5 annotations as a framework. However, AspectJ seems to be more friendly design-patterns wise. </p>\n\n<p>Can anyone highlight the various pros and cons of using Spring AOP vs AspectJ in a Spring application?</p>\n    ","a":"\n<p>Spring-AOP Pros</p>\n\n<ul>\n<li>It is simpler to use than  AspectJ, since you don't have to use LTW (<a href=\"http://www.eclipse.org/aspectj/doc/next/devguide/ltw.html\" rel=\"nofollow noreferrer\">load-time weaving</a>) or the AspectJ compiler.</li>\n<li>This can be change to AspectJ AOP when you use @Aspect annotation based Spring AOP.</li>\n<li>This use Proxy pattern and Decorator\npattern</li>\n</ul>\n\n<p>Spring-AOP Cons</p>\n\n<ul>\n<li>This is proxy-based AOP, so basically you can only use method-execution pointcut.</li>\n<li>Aspects aren't applied when calling another method within the same class.</li>\n<li>There can be a little runtime overhead.</li>\n<li>Spring-AOP cannot add an aspect to anything that is not created by the Spring factory</li>\n</ul>\n\n<p>AspectJ Pros</p>\n\n<ul>\n<li>This supports all pointcuts. This means you can do anything. </li>\n<li>There is less runtime overhead than that of Spring AOP.</li>\n</ul>\n\n<p>AspectJ Cons</p>\n\n<ul>\n<li>Be careful. Check if your aspects are weaved to only what you wanted to be weaved.</li>\n<li>You need extra build process with AspectJ Compiler or have to setup LTW (load-time weaving)</li>\n</ul>\n    "},{"t":"What is the difference between ApplicationContext and WebApplicationContext in Spring MVC?","l":"http://stackoverflow.com/questions/11708967/what-is-the-difference-between-applicationcontext-and-webapplicationcontext-in-s","q":"\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3652090/difference-between-applicationcontext-and-spring-servlet-xml-in-spring\">difference between applicationContext and spring-servlet.xml in spring</a>  </p>\n</blockquote>\n\n\n\n<p>What is the difference between Application Context and Web Application Context?</p>\n\n<p>I am aware that <code>WebApplicationContext</code> is used for Spring MVC architecture oriented applications?</p>\n\n<p>I want to know what is the use of <code>ApplicationContext</code> in MVC applications? And what kind of beans are defined in <code>ApplicationContext</code>?</p>\n    ","a":"\n<p>Web Application context extended Application Context which is designed to work with the standard <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContext.html\" rel=\"nofollow noreferrer\">javax.servlet.ServletContext</a> so it's able to communicate with the container.  </p>\n\n<pre><code>public interface WebApplicationContext extends ApplicationContext {\n    ServletContext getServletContext();\n}\n</code></pre>\n\n<p>Beans, instantiated in WebApplicationContext will also be able to use ServletContext if they implement ServletContextAware interface </p>\n\n<pre><code>package org.springframework.web.context;\npublic interface ServletContextAware extends Aware { \n     void setServletContext(ServletContext servletContext);\n}\n</code></pre>\n\n<p>There are many things possible to do with the ServletContext instance, for example accessing WEB-INF resources(xml configs and etc.) by calling the getResourceAsStream() method.\nTypically all application contexts defined in web.xml in a servlet Spring application are Web Application contexts, this goes both to the root webapp context and the servlet's app context.</p>\n\n<p>Also, depending on web application context capabilities may make your application a little harder to test, and you may need to use <a href=\"http://static.springsource.org/spring/docs/1.1.4/api/org/springframework/mock/web/MockServletContext.html\" rel=\"nofollow noreferrer\">MockServletContext</a> class for testing.</p>\n\n<p><strong>Difference between servlet and root context</strong>\nSpring allows you to build multilevel application context hierarchies, so the required bean will be fetched from the parent context if it's not present in the current application context. In web apps as default there are two hierarchy levels, root and servlet contexts: <img src=\"https://i.stack.imgur.com/WSAPE.png\" alt=\"Servlet and root context\">. </p>\n\n<p>This allows you to run some services as the singletons for the entire application (Spring Security beans and basic database access services typically reside here) and another as separated services in the corresponding servlets to avoid name clashes between beans. For example one servlet context will be serving the web pages and another will be implementing a stateless web service.</p>\n\n<p>This two level separation comes out of the box when you use the spring servlet classes: to configure the root application context you should use <em>context-param</em> tag in your web.xml</p>\n\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;\n        /WEB-INF/root-context.xml\n            /WEB-INF/applicationContext-security.xml\n    &lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre>\n\n<p>(the root application context is created by <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/web/context/ContextLoaderListener.html\" rel=\"nofollow noreferrer\">ContextLoaderListener</a> which is declared in web.xml</p>\n\n<pre><code>&lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt; \n</code></pre>\n\n<p>)\nand <em>servlet</em> tag for the servlet application contexts</p>\n\n<pre><code>&lt;servlet&gt;\n   &lt;servlet-name&gt;myservlet&lt;/servlet-name&gt;\n   &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n   &lt;init-param&gt;\n      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n      &lt;param-value&gt;app-servlet.xml&lt;/param-value&gt;\n   &lt;/init-param&gt;\n&lt;/servlet&gt;\n</code></pre>\n\n<p>Please note that if init-param will be omitted, then spring will use myservlet-servlet.xml in this example.</p>\n\n<p>See also: <a href=\"http://stackoverflow.com/questions/3652090/difference-between-applicationcontext-and-spring-servlet-xml-in-spring\">Difference between applicationContext.xml and spring-servlet.xml in Spring Framework</a></p>\n    "},{"t":"Role/Purpose of ContextLoaderListener in Spring?","l":"http://stackoverflow.com/questions/11815339/role-purpose-of-contextloaderlistener-in-spring","q":"\n\n<p>I am learning <em>Spring Framework</em> which is being used in my project. I found the  <strong><em>ContextLoaderListener</em></strong> entry in my <em>web.xml</em> file. But could not figure out how exactly it helps a developer?</p>\n\n<p>In the official documentation of <a href=\"http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/ContextLoaderListener.html\" rel=\"nofollow noreferrer\"><em>ContextLoaderListener</em></a> it says  it is to start <em>WebApplicationContext</em>. Regarding <a href=\"http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/WebApplicationContext.html\" rel=\"nofollow noreferrer\"><em>WebApplicationContext</em></a> JavaDocs say:</p>\n\n<blockquote>\n  <p>Interface to provide configuration for a web application.</p>\n</blockquote>\n\n<p><br>\nBut I am not able to understand what I am achieving with <em>ContextLoaderListener</em> which internally initializes the <em>WebApplicationContext</em> ?</p>\n\n<p><strong>As per my understanding</strong>, <em>ContextLoaderListener</em>  reads the Spring configuration file (with value given against contextConfigLocation in <em>web.xml</em>), parses it and loads the <em>singleton bean</em> defined in that config file. Similarly when we want to load <em>prototype bean</em>, we will use same webapplication context to load it. So we initialize the webapplication  with <em>ContextLoaderListener</em> so that we read/parse/validate the config file in advance and whenever we wan to inject dependency we can straightaway do it without any delay. Is this understanding correct?</p>\n    ","a":"\n<p>Your understanding is correct.  The <code>ApplicationContext</code> is where your Spring beans live.  The purpose of the <code>ContextLoaderListener</code> is two-fold:</p>\n\n<ol>\n<li><p>to tie the lifecycle of the <code>ApplicationContext</code> to the lifecycle of the <code>ServletContext</code> and</p></li>\n<li><p>to automate the creation of the <code>ApplicationContext</code>, so you don't have to write explicit code to do create it - it's a convenience function. </p></li>\n</ol>\n\n<p>Another convenient thing about the <code>ContextLoaderListener</code> is that it creates a <code>WebApplicationContext</code> and <code>WebApplicationContext</code> provides access to the <code>ServletContext</code> via <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/context/ServletContextAware.html#setServletContext%28javax.servlet.ServletContext%29\"><code>ServletContextAware</code></a> beans and the <code>getServletContext</code> method.</p>\n    "},{"t":"Spring MVC @PathVariable getting truncated","l":"http://stackoverflow.com/questions/3526523/spring-mvc-pathvariable-getting-truncated","q":"\n\n<p>I have a controller that provides RESTful access to information:</p>\n\n<pre><code>@RequestMapping(method = RequestMethod.GET, value = Routes.BLAH_GET + \"/{blahName}\")\npublic ModelAndView getBlah(@PathVariable String blahName, HttpServletRequest request,\n                            HttpServletResponse response) {\n</code></pre>\n\n<p>The problem I am experiencing is that if I hit the server with a path variable with special characters it gets truncated. For example:\n<a href=\"http://localhost:8080/blah-server/blah/get/blah2010.08.19-02:25:47\" rel=\"nofollow noreferrer\">http://localhost:8080/blah-server/blah/get/blah2010.08.19-02:25:47</a></p>\n\n<p>The parameter blahName will be blah2010.08</p>\n\n<p>However, the call to request.getRequestURI() contains all the information passed in.</p>\n\n<p>Any idea how to prevent Spring from truncating the @PathVariable?</p>\n    ","a":"\n<p>I resolved by this hack <br> </p>\n\n<p>1) Added HttpServletRequest  in @PathVariable like below</p>\n\n<pre><code> @PathVariable(\"requestParam\") String requestParam, HttpServletRequest request) throws Exception { \n</code></pre>\n\n<p>2) Get the URL directly (At this level no truncation) in the request</p>\n\n<pre><code>request.getPathInfo() \n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/16332092/spring-mvc-pathvariable-with-dot-is-getting-truncated\">Spring MVC @PathVariable with dot (.) is getting truncated</a></p>\n    "},{"t":"How to get active user's UserDetails","l":"http://stackoverflow.com/questions/8764545/how-to-get-active-users-userdetails","q":"\n\n<p>In my controllers, when I need the active (logged in) user, I am doing the following to get my <code>UserDetails</code> implementation:</p>\n\n<pre><code>User activeUser = (User)SecurityContextHolder.getContext().getAuthentication().getPrincipal();\nlog.debug(activeUser.getSomeCustomField());\n</code></pre>\n\n<p>It works fine, but I would think Spring could make life easier in a case like this. Is there a way to have the <code>UserDetails</code> autowired into either the controller or the method?</p>\n\n<p>For example, something like:</p>\n\n<pre><code>public ModelAndView someRequestHandler(Principal principal) { ... }\n</code></pre>\n\n<p>But instead of getting the <code>UsernamePasswordAuthenticationToken</code>, I get a <code>UserDetails</code> instead?</p>\n\n<p>I'm looking for an elegant solution. Any ideas?</p>\n    ","a":"\n<p><strong>Preamble:</strong> Since Spring-Security 3.2 there is a nice annotation <code>@AuthenticationPrincipal</code> described at the end of this answer. This is the best way to go when you use Spring-Security &gt;= 3.2.</p>\n\n<p>When you:</p>\n\n<ul>\n<li>use an older version of Spring-Security,</li>\n<li>need to load a your custom User Object from the Database by some information (like the login or id) stored in the principal or</li>\n<li>want to learn how a <code>HandlerMethodArgumentResolver</code> or <code>WebArgumentResolver</code> can solve this in an elegant way, or just want to an learn the background behind <code>@AuthenticationPrincipal</code> and <code>AuthenticationPrincipalArgumentResolver</code> (because it is based on a <code>HandlerMethodArgumentResolver</code>)</li>\n</ul>\n\n<p>then keep on reading - else just use <code>@AuthenticationPrincipal</code> and thank to Rob Winch (Author of <code>@AuthenticationPrincipal</code>) and <a href=\"http://stackoverflow.com/a/22857426/280244\">Lukas Schmelzeisen</a> (for his answer).</p>\n\n<p><em>(BTW: My answer is a bit older (January 2012), so it was <a href=\"http://stackoverflow.com/a/22857426/280244\">Lukas Schmelzeisen</a> that come up as the first one with the <code>@AuthenticationPrincipal</code> annotation solution base on Spring Security 3.2.)</em></p>\n\n<hr>\n\n<p>Then you can use in your controller</p>\n\n<pre><code>public ModelAndView someRequestHandler(Principal principal) {\n   User activeUser = (User) ((Authentication) principal).getPrincipal();\n   ...\n}\n</code></pre>\n\n<hr>\n\n<p>That is ok if you need it once. But if you need it several times its ugly because it pollutes your controller with infrastructure details, that normally should be hidden by the framework.</p>\n\n<p>So what you may really want is to have a controller like this:</p>\n\n<pre><code>public ModelAndView someRequestHandler(@ActiveUser User activeUser) {\n   ...\n}\n</code></pre>\n\n<p>Therefore you only need to implement a <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/\"><code>WebArgumentResolver</code></a>. It has a method</p>\n\n<pre><code>Object resolveArgument(MethodParameter methodParameter,\n                   NativeWebRequest webRequest)\n                   throws Exception\n</code></pre>\n\n<p>That get the web request (second parameter) and must return the <code>User</code> if its feels responsible for the method argument (the first parameter).</p>\n\n<p><em>Since Spring 3.1 there is an new concept called <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html\"><code>HandlerMethodArgumentResolver</code></a>. If you use Spring 3.1+ then you should use it. (It is described in the in the next section this answer))</em></p>\n\n<pre><code>public class CurrentUserWebArgumentResolver implements WebArgumentResolver{\n\n   Object resolveArgument(MethodParameter methodParameter, NativeWebRequest webRequest) {\n        if(methodParameter is for type User &amp;&amp; methodParameter is annotated with @ActiveUser) {\n           Principal principal = webRequest.getUserPrincipal();\n           return (User) ((Authentication) principal).getPrincipal();\n        } else {\n           return WebArgumentResolver.UNRESOLVED;\n        }\n   }\n}\n</code></pre>\n\n<p>You need to define the Custom Annotation -- You can skip it if every instance of User should always taken from the security context, but is never a command object.</p>\n\n<pre><code>@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface ActiveUser {}\n</code></pre>\n\n<p>In the configuration you only need to add this:</p>\n\n<pre><code>&lt;bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"\n    id=\"applicationConversionService\"&gt;\n    &lt;property name=\"customArgumentResolver\"&gt;\n        &lt;bean class=\"CurrentUserWebArgumentResolver\"/&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>@See: <a href=\"http://karthikg.wordpress.com/2009/11/08/learn-to-customize-spring-mvc-controller-method-arguments/\">Learn to customize Spring MVC @Controller method arguments</a> </p>\n\n<p><em>It should be noted that if you're using Spring 3.1, they recommend HandlerMethodArgumentResolver over WebArgumentResolver. - see comment by Jay</em></p>\n\n<hr>\n\n<h2><strong>The same with <code>HandlerMethodArgumentResolver</code> for Spring 3.1+</strong></h2>\n\n<pre><code>public class CurrentUserHandlerMethodArgumentResolver\n                               implements HandlerMethodArgumentResolver {\n\n     @Override\n     public boolean supportsParameter(MethodParameter methodParameter) {\n          return\n              methodParameter.getParameterAnnotation(ActiveUser.class) != null\n              &amp;&amp; methodParameter.getParameterType().equals(User.class);\n     }\n\n     @Override\n     public Object resolveArgument(MethodParameter methodParameter,\n                         ModelAndViewContainer mavContainer,\n                         NativeWebRequest webRequest,\n                         WebDataBinderFactory binderFactory) throws Exception {\n\n          if (this.supportsParameter(methodParameter)) {\n              Principal principal = webRequest.getUserPrincipal();\n              return (User) ((Authentication) principal).getPrincipal();\n          } else {\n              return WebArgumentResolver.UNRESOLVED;\n          }\n     }\n}\n</code></pre>\n\n<p>In the configuration you need to add this</p>\n\n<pre><code>&lt;mvc:annotation-driven&gt;\n      &lt;mvc:argument-resolvers&gt;\n           &lt;bean class=\"CurrentUserHandlerMethodArgumentResolver\"/&gt;         \n      &lt;/mvc:argument-resolvers&gt;\n &lt;/mvc:annotation-driven&gt;\n</code></pre>\n\n<p>@See <a href=\"http://blog.42.nl/articles/leveraging-the-spring-mvc-3-1-handlermethodargumentresolver-interface/\">Leveraging the Spring MVC 3.1 HandlerMethodArgumentResolver interface</a></p>\n\n<hr>\n\n<h2><strong>Spring-Security 3.2 Solution</strong></h2>\n\n<p>Spring Security 3.2 (do not confuse with Spring 3.2) has a own build in solution: <a href=\"http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/apidocs/org/springframework/security/web/bind/annotation/AuthenticationPrincipal.html\"><code>@AuthenticationPrincipal</code></a>. This is nicely described in <a href=\"http://stackoverflow.com/a/22857426/280244\">Lukas Schmelzeisen`s answer</a></p>\n\n<p>It is just writing</p>\n\n<pre><code>ModelAndView someRequestHandler(@AuthenticationPrincipal User activeUser) {\n    ...\n }\n</code></pre>\n\n<p>To get this working you need to register the <code>AuthenticationPrincipalArgumentResolver</code>: either by \"activating\"  <code>@EnableWebMvcSecurity</code> or by registering this bean within <code>mvc:argument-resolvers</code> - the same way I described it with may Spring 3.1 solution above.</p>\n\n<p>@See <a href=\"http://docs.spring.io/spring-security/site/docs/3.2.3.RELEASE/reference/htmlsingle/#mvc-authentication-principal\">Spring Security 3.2 Reference, Chapter 11.2. @AuthenticationPrincipal</a></p>\n    "},{"t":"Only using @JsonIgnore during serialization, but not deserialization","l":"http://stackoverflow.com/questions/12505141/only-using-jsonignore-during-serialization-but-not-deserialization","q":"\n\n<p>I have a user object that is sent to and from the server.  When I send out the user object I don't want to send the hashed password to the client.  So I added <code>@JsonIgnore</code> on the password property, but this also blocks it from being deserialized into the password which makes it hard to sign up users when they ain't got a password.</p>\n\n<p>How can I only get <code>@JsonIgnore</code> to apply to serialization and not deserialization?  I'm using Spring JSONView so I don't have a ton of control over the <code>ObjectMapper</code>.</p>\n\n<p>Things I've tried:</p>\n\n<ol>\n<li>Add <code>@JsonIgnore</code> to the property</li>\n<li>Add <code>@JsonIgnore</code> on the getter method only</li>\n</ol>\n    ","a":"\n<p>Exactly how to do this depends on the version of Jackson that you're using. This changed around version <em>1.9</em>, before that, you could do this by adding <code>@JsonIgnore</code> to the getter.</p>\n\n<p>Which you've tried:</p>\n\n<blockquote>\n  <p>Add @JsonIgnore on the getter method only</p>\n</blockquote>\n\n<p>Do this, <em>and also</em> add a specific <code>@JsonProperty</code> annotation for your JSON \"password\" field name to the setter method for the password on your object.</p>\n\n<p>More recent versions of Jackson have added <code>READ_ONLY</code> and <code>WRITE_ONLY</code> annotation arguments for <code>JsonProperty</code>. So you could also do something like:</p>\n\n<pre><code>@JsonProperty(access = Access.WRITE_ONLY)\nprivate String password;\n</code></pre>\n\n<p>Docs can be found <a href=\"http://fasterxml.github.io/jackson-annotations/javadoc/2.6/com/fasterxml/jackson/annotation/JsonProperty.Access.html\">here</a>.</p>\n    "},{"t":"Which maven dependencies to include for spring 3.0?","l":"http://stackoverflow.com/questions/2237537/which-maven-dependencies-to-include-for-spring-3-0","q":"\n\n<p>I am trying to do my first project with Spring 3.0 (and maven). I have been using Spring 2.5 (and primer versions) in quite some projects. Nevertheless I am kinda confused, what modules I have to define as dependencies in my pom.xml. I just want to use the core container functions (beans, core, context, el).</p>\n\n<p>I was used to do this:</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring&lt;/artifactId&gt;\n    &lt;version&gt;2.5.6&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>But now I am kinda confused, as there is no full packed spring module for version 3.0 anymore. I tried the following but it didnt work (some classes are missing).</p>\n\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n        &lt;version&gt;3.0.0.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;\n        &lt;version&gt;3.0.0.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;\n        &lt;version&gt;3.0.0.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n        &lt;version&gt;3.0.0.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n\n<p>Any help would be appreciated!</p>\n    ","a":"\n<p>There was a really nice post on the <a href=\"http://blog.springsource.com/\" rel=\"nofollow noreferrer\">Spring Blog</a> from Keith Donald detailing howto <a href=\"http://blog.springsource.com/2009/12/02/obtaining-spring-3-artifacts-with-maven/\" rel=\"nofollow noreferrer\">Obtain Spring 3 Aritfacts with Maven</a>, with comments detailing when you'd need each of the dependencies...</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;!-- Shared version number properties --&gt;\n&lt;properties&gt;\n    &lt;org.springframework.version&gt;3.0.0.RELEASE&lt;/org.springframework.version&gt;\n&lt;/properties&gt;\n&lt;!-- Core utilities used by other modules.\n    Define this if you use Spring Utility APIs \n    (org.springframework.core.*/org.springframework.util.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Expression Language (depends on spring-core)\n    Define this if you use Spring Expression APIs \n    (org.springframework.expression.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Bean Factory and JavaBeans utilities (depends on spring-core)\n    Define this if you use Spring Bean APIs \n    (org.springframework.beans.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Aspect Oriented Programming (AOP) Framework \n    (depends on spring-core, spring-beans)\n    Define this if you use Spring AOP APIs \n    (org.springframework.aop.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Application Context \n    (depends on spring-core, spring-expression, spring-aop, spring-beans)\n    This is the central artifact for Spring's Dependency Injection Container\n    and is generally always defined--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Various Application Context utilities, including EhCache, JavaMail, Quartz, \n    and Freemarker integration\n    Define this if you need any of these integrations--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Transaction Management Abstraction \n    (depends on spring-core, spring-beans, spring-aop, spring-context)\n    Define this if you use Spring Transactions or DAO Exception Hierarchy\n    (org.springframework.transaction.*/org.springframework.dao.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- JDBC Data Access Library \n    (depends on spring-core, spring-beans, spring-context, spring-tx)\n    Define this if you use Spring's JdbcTemplate API \n    (org.springframework.jdbc.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA and iBatis.\n    (depends on spring-core, spring-beans, spring-context, spring-tx)\n    Define this if you need ORM (org.springframework.orm.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, JiBX, \n    Castor, XStream, and XML Beans.\n    (depends on spring-core, spring-beans, spring-context)\n    Define this if you need OXM (org.springframework.oxm.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Web application development utilities applicable to both Servlet and \n    Portlet Environments \n    (depends on spring-core, spring-beans, spring-context)\n    Define this if you use Spring MVC, or wish to use Struts, JSF, or another\n    web framework with Spring (org.springframework.web.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Spring MVC for Servlet Environments \n    (depends on spring-core, spring-beans, spring-context, spring-web)\n    Define this if you use Spring MVC with a Servlet Container such as \n    Apache Tomcat (org.springframework.web.servlet.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Spring MVC for Portlet Environments \n    (depends on spring-core, spring-beans, spring-context, spring-web)\n    Define this if you use Spring MVC with a Portlet Container \n    (org.springframework.web.portlet.*)--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc-portlet&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Support for testing Spring applications with tools such as JUnit and TestNG\n    This artifact is generally always defined with a 'test' scope for the \n    integration testing framework and unit testing stubs--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n    &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>\n    "},{"t":"ContextLoaderListener or not?","l":"http://stackoverflow.com/questions/9016122/contextloaderlistener-or-not","q":"\n\n<p>A standard spring web application (created by Roo or \"Spring MVC Project\" Template) create a web.xml with <code>ContextLoaderListener</code> and <code>DispatcherServlet</code>. <strong>Why do they not only use the <code>DispatcherServlet</code> and make it to load the complete configuration?</strong></p>\n\n<p>I understand that the ContextLoaderListener should be used to load the stuff that is not web relevant and the DispatcherServlet is used to load the web relevant stuff (Controllers,...). And this result in two contexts: a parent and a child context.</p>\n\n<p>Background:</p>\n\n<p>I was doing it this standard way for several years.</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;classpath*:META-INF/spring/applicationContext*.xml&lt;/param-value&gt;\n&lt;/context-param&gt;\n\n&lt;!-- Creates the Spring Container shared by all Servlets and Filters --&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;!-- Handles Spring requests --&gt;\n&lt;servlet&gt;\n    &lt;servlet-name&gt;roo&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;WEB-INF/spring/webmvc-config.xml&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n</code></pre>\n\n<p>This often caused problems with the two contexts and the dependencies between them. In the past I was always able to find a solution, and I have the strong feeling that this makes the software structure/architecture always better. But now I am facing a <a href=\"http://stackoverflow.com/questions/8534222/how-to-bridge-spring-application-context-events-to-an-other-context\">problem with the events of the both contexts</a>. </p>\n\n<p>-- However this makes my rethink this two context pattern, and I am asking myself: why should I bring myself into this trouble, why not loading all spring configuration files with one <code>DispatcherServlet</code> and removing the <code>ContextLoaderListener</code> completely. (I still will to have different configuration files, but only one context.)</p>\n\n<p>Is there any reason not to remove the <code>ContextLoaderListener</code>?</p>\n    ","a":"\n<p>In your case, no, there's no reason to keep the <code>ContextLoaderListener</code> and <code>applicationContext.xml</code>. If your app works fine with just the servlet's context, that stick with that, it's simpler.</p>\n\n<p>Yes, the generally-encouraged pattern is to keep non-web stuff in the webapp-level context, but it's nothing more than a weak convention.</p>\n\n<p>The only compelling reasons to use the webapp-level context are:</p>\n\n<ul>\n<li>If you have multiple <code>DispatcherServlet</code> that need to share services</li>\n<li>If you have legacy/non-Spring servlets that need access to Spring-wired services</li>\n<li>If you have servlet filters that hook into the webapp-level context (e.g. Spring Security's <code>DelegatingFilterProxy</code>, <code>OpenEntityManagerInViewFilter</code>, etc)</li>\n</ul>\n\n<p>None of these apply to you, so the extra complexity is unwarranted.</p>\n\n<p>Just be careful when adding background tasks to the servlet's context, like scheduled tasks, JMS connections, etc. If you forget to add <code>&lt;load-on-startup&gt;</code> to your <code>web.xml</code>, then these tasks won't be started until the first access of the servlet.</p>\n    "},{"t":"Xml configuration versus Annotation based configuration [closed]","l":"http://stackoverflow.com/questions/182393/xml-configuration-versus-annotation-based-configuration","q":"\n\n<p>In a few large projects i have been working on lately it seems to become increasingly important to choose one or the other (XML or Annotation). As projects grow, consistency is very important for maintainability. </p>\n\n<p>My question is, what do people prefer.  Do you prefer XML based or Annotation based? or Both? Everybody talks about XML configuration hell and how annotations are the answer, what about Annotation configuration hell?</p>\n    ","a":"\n<p>Annotations have their use, but they are not the one silver bullet to kill XML configuration.  I recommend mixing the two!</p>\n\n<p>For instance, if using Spring, it is entirely intuitive to use XML for the dependency injection portion of your application.  This gets the code's dependencies away from the code which will be using it, by contrast, using some sort of annotation in the code that needs the dependencies makes the code aware of this automatic configuration.</p>\n\n<p>However, instead of using XML for transactional management, marking a method as transactional with an annotation makes perfect sense, since this is information a programmer would probably wish to know.  But that an interface is going to be injected as a SubtypeY instead of a SubtypeX should not be included in the class, because if now you wish to inject SubtypeX, you have to change your code, whereas you had an interface contract before anyways, so with XML, you would just need to change the XML mappings and it is fairly quick and painless to do so.</p>\n\n<p>I haven't used JPA annotations, so I don't know how good they are, but I would argue that leaving the mapping of beans to the database in XML is also good, as the object shouldn't care where its information came from, it should just care what it can do with its information.  But if you like JPA (I don't have any expirience with it), by all means, go for it.</p>\n\n<p>In general:\nIf an annotation provides functionality and acts as a comment in and of itself, and doesn't tie the code down to some specific process in order to function normally without this annotation, then go for annotations.  For example, a transactional method marked as being transactional does not kill its operating logic, and serves as a good code-level comment as well.  Otherwise, this information is probably best expressed as XML, because although it will eventually affect how the code operates, it won't change the main functionality of the code, and hence doesn't belong in the source files.</p>\n    "},{"t":"With Spring 3.0, can I make an optional path variable?","l":"http://stackoverflow.com/questions/4904092/with-spring-3-0-can-i-make-an-optional-path-variable","q":"\n\n<p>With Spring 3.0, can I have an optional path variable?</p>\n\n<p>For example</p>\n\n<pre><code>@RequestMapping(value = \"/json/{type}\", method = RequestMethod.GET)\npublic @ResponseBody TestBean testAjax(\n        HttpServletRequest req,\n        @PathVariable String type,\n        @RequestParam(\"track\") String track) {\n    return new TestBean();\n}\n</code></pre>\n\n<p>Here I would like <code>/json/abc</code> or <code>/json</code> to call the same method. <br>\nOne obvious workaround declare <code>type</code> as a request parameter: </p>\n\n<pre><code>@RequestMapping(value = \"/json\", method = RequestMethod.GET)\npublic @ResponseBody TestBean testAjax(\n        HttpServletRequest req,\n        @RequestParam(value = \"type\", required = false) String type,\n        @RequestParam(\"track\") String track) {\n    return new TestBean();\n}\n</code></pre>\n\n<p>and then <code>/json?type=abc&amp;track=aa</code> or <code>/json?track=rr</code> will work</p>\n    ","a":"\n<p>You can't have optional path variables, but you can have two controller methods which call the same service code:</p>\n\n<pre><code>@RequestMapping(value = \"/json/{type}\", method = RequestMethod.GET)\npublic @ResponseBody TestBean typedTestBean(\n        HttpServletRequest req,\n        @PathVariable String type,\n        @RequestParam(\"track\") String track) {\n    return getTestBean(type);\n}\n\n@RequestMapping(value = \"/json\", method = RequestMethod.GET)\npublic @ResponseBody TestBean testBean(\n        HttpServletRequest req,\n        @RequestParam(\"track\") String track) {\n    return getTestBean();\n}\n</code></pre>\n    "},{"t":"Where can I download Spring Framework jars without using Maven?","l":"http://stackoverflow.com/questions/19082860/where-can-i-download-spring-framework-jars-without-using-maven","q":"\n\n<p>SpringSource.org changed their site to <a href=\"http://spring.io\">http://spring.io</a></p>\n\n<p>Does someone know how to get the latest build without Maven/github? from <a href=\"http://spring.io/projects\">http://spring.io/projects</a></p>\n    ","a":"\n<h2>Please edit to keep this list of mirrors current</h2>\n\n<p>I found this <code>maven</code> repo where you could download from directly a <code>zip</code> file containing all the jars you need.</p>\n\n<ul>\n<li><a href=\"http://maven.springframework.org/release/org/springframework/spring/\" rel=\"nofollow noreferrer\">http://maven.springframework.org/release/org/springframework/spring/</a></li>\n<li><a href=\"http://repo.spring.io/release/org/springframework/spring/\" rel=\"nofollow noreferrer\">http://repo.spring.io/release/org/springframework/spring/</a></li>\n</ul>\n\n<h2>Alternate solution: Maven</h2>\n\n<p>The solution I prefer is using <code>Maven</code>, it is easy and you don't have to download each <code>jar</code> alone. You can do it with the following steps:</p>\n\n<ol>\n<li>Create an empty folder anywhere with any name you prefer, for example <code>spring-source</code></li>\n<li>Create a new file named <code>pom.xml</code></li>\n<li>Copy the xml below into this file</li>\n<li>Open the <code>spring-source</code> folder in your console</li>\n<li>Run <code>mvn install</code></li>\n<li><p>After download finished, you'll find spring jars in <code>/spring-source/target/dependencies</code></p>\n\n<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;spring-source-download&lt;/groupId&gt;\n  &lt;artifactId&gt;SpringDependencies&lt;/artifactId&gt;\n  &lt;version&gt;1.0&lt;/version&gt;\n  &lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n  &lt;/properties&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n      &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.8&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;id&gt;download-dependencies&lt;/id&gt;\n            &lt;phase&gt;generate-resources&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;copy-dependencies&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n              &lt;outputDirectory&gt;${project.build.directory}/dependencies&lt;/outputDirectory&gt;\n            &lt;/configuration&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre></li>\n</ol>\n\n<hr>\n\n<p>Also, if you need to download any other spring project, just copy the <code>dependency</code> configuration from its corresponding web page.</p>\n\n<p>For example, if you want to download <code>Spring Web Flow</code> jars, go to its <a href=\"http://projects.spring.io/spring-webflow/\" rel=\"nofollow noreferrer\">web page</a>, and add its <code>dependency</code> configuration to the <code>pom.xml</code> <code>dependencies</code>, then run <code>mvn install</code> again.</p>\n\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.webflow&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-webflow&lt;/artifactId&gt;\n  &lt;version&gt;2.3.2.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n    "},{"t":"How to execute IN() SQL queries with Spring's JDBCTemplate effectivly?","l":"http://stackoverflow.com/questions/1327074/how-to-execute-in-sql-queries-with-springs-jdbctemplate-effectivly","q":"\n\n<p>I was wondering if there is a more elegant way to do IN() queries with Spring's JDBCTemplate. Currently I do something like that:</p>\n\n<pre><code>StringBuilder jobTypeInClauseBuilder = new StringBuilder();\nfor(int i = 0; i &lt; jobTypes.length; i++) {\n    Type jobType = jobTypes[i];\n\n    if(i != 0) {\n        jobTypeInClauseBuilder.append(',');\n    }\n\n    jobTypeInClauseBuilder.append(jobType.convert());\n}\n</code></pre>\n\n<p>Which is quite painful since if I have nine lines just for building the clause for the IN() query. I would like to have something like the parameter substution of prepared statements. I cannot imagine I am the only person who is annoyed by this fact and I'm asking here to get a solution. Thanks a lot in advance!</p>\n    ","a":"\n<p>You want a parameter source:</p>\n\n<pre><code>Set&lt;Integer&gt; ids = ...;\n\nMapSqlParameterSource parameters = new MapSqlParameterSource();\nparameters.addValue(\"ids\", ids);\n\nList&lt;Foo&gt; foo = getJdbcTemplate().query(\"SELECT * FROM foo WHERE a IN (:ids)\",\n     getRowMapper(), parameters);\n</code></pre>\n\n<p>This only works if <code>getJdbcTemplate()</code> returns an instance of type <a href=\"http://docs.spring.io/spring-framework/docs/4.1.x/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html\" rel=\"nofollow noreferrer\"><code>NamedParameterJdbcTemplate</code></a></p>\n    "},{"t":"Spring MVC type conversion : PropertyEditor or Converter?","l":"http://stackoverflow.com/questions/12544479/spring-mvc-type-conversion-propertyeditor-or-converter","q":"\n\n<p>I am looking for the easiest and simplest way to bind and convert data in Spring MVC. If possible, without doing any xml configuration. </p>\n\n<p>So far I've been using <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#beans-beans-conversion-customeditor-registration\">PropertyEditors</a> like so :</p>\n\n<pre><code>public class CategoryEditor extends PropertyEditorSupport {\n\n    // Converts a String to a Category (when submitting form)\n    @Override\n    public void setAsText(String text) {\n        Category c = new Category(text);\n        this.setValue(c);\n    }\n\n    // Converts a Category to a String (when displaying form)\n    @Override\n    public String getAsText() {\n        Category c = (Category) this.getValue();\n        return c.getName();\n    }\n\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>...\npublic class MyController {\n\n    @InitBinder\n    public void initBinder(WebDataBinder binder) {\n        binder.registerCustomEditor(Category.class, new CategoryEditor());\n    }\n\n    ...\n\n}\n</code></pre>\n\n<p>It is simple : both conversion are defined in the same class, and the binding is straightforward. If I wanted to do a general binding across all my controllers, I could still add <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-webdatabinder\">3 lines in my xml config</a>.</p>\n\n<hr>\n\n<p>But Spring 3.x introduced a new way to do it, using <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#core-convert\">Converters</a> :</p>\n\n<blockquote>\n  <p>Within a Spring container, this system can be used as an alternative\n  to PropertyEditors</p>\n</blockquote>\n\n<p>So let's say I want to use Converters because it is \"the latest alternative\". I would have to create <strong>two</strong> converters :</p>\n\n<pre><code>public class StringToCategory implements Converter&lt;String, Category&gt; {\n\n    @Override\n    public Category convert(String source) {\n        Category c = new Category(source);\n        return c;\n    }\n\n}\n\npublic class CategoryToString implements Converter&lt;Category, String&gt; {\n\n    @Override\n    public String convert(Category source) {\n        return source.getName();\n    }\n\n}\n</code></pre>\n\n<p><strong>First drawback :</strong> I have to make two classes. Benefit : no need to cast thanks to genericity.</p>\n\n<p>Then, how do I simply data bind the converters ?  </p>\n\n<p><strong>Second drawback :</strong> I haven't found any simple way (annotations or other programmatic facilities) to do it in a controller : nothing like <code>someSpringObject.registerCustomConverter(...);</code>.</p>\n\n<p>The only ways I've found would be tedious, not simple, and only about general cross-controller binding :</p>\n\n<ul>\n<li><p><a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#core-convert-Spring-config\">XML config</a> :</p>\n\n<pre><code>&lt;bean id=\"conversionService\"\n  class=\"org.springframework.context.support.ConversionServiceFactoryBean\"&gt;\n    &lt;property name=\"converters\"&gt;\n        &lt;set&gt;\n            &lt;bean class=\"somepackage.StringToCategory\"/&gt;\n            &lt;bean class=\"somepackage.CategoryToString\"/&gt;\n        &lt;/set&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre></li>\n<li><p><a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-config-customize\">Java config</a> (<strong>only in Spring 3.1+</strong>) :</p>\n\n<pre><code>@EnableWebMvc\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    protected void addFormatters(FormatterRegistry registry) {\n        registry.addConverter(new StringToCategory());\n        registry.addConverter(new CategoryToString());\n    }\n\n}\n</code></pre></li>\n</ul>\n\n<p>With all these drawbacks, why using Converters ? Am I missing something ? Are there other tricks that I am not aware of ?</p>\n\n<p>I am tempted to go on using PropertyEditors... Binding is much easier and quicker.</p>\n    ","a":"\n<blockquote>\n  <p>With all these drawbacks, why using Converters ? Am I missing\n  something ? Are there other tricks that I am not aware of ?</p>\n</blockquote>\n\n<p>No, I think you have very comprehensively described both PropertyEditor and Converter, how each one is declared and registered. </p>\n\n<p>In my mind, PropertyEditors are limited in scope - they help convert String to a type, and this string typically comes from UI, and so registering a PropertyEditor using @InitBinder and using WebDataBinder makes sense. </p>\n\n<p>Converter on the other hand is more generic, it is intended for ANY conversion in the system - not just for UI related conversions(String to target type). For eg, Spring Integration uses a converter extensively for converting a message payload to a desired type.</p>\n\n<p>I think for UI related flows PropertyEditors are still appropriate especially for the case where you need to do something custom for a specific command property. For other cases, I would take the recommendation from Spring reference and write a converter instead(for eg, to convert from a Long id to an entity say, as a sample).</p>\n    "},{"t":"Spring classpath prefix difference","l":"http://stackoverflow.com/questions/3294423/spring-classpath-prefix-difference","q":"\n\n<p>Documented <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/resources.html#resources-classpath-wildcards\" rel=\"nofollow noreferrer\">here</a> it states</p>\n\n<blockquote>\n  <p>This special prefix specifies that all\n  classpath resources that match the\n  given name must be obtained\n  (internally, this essentially happens\n  via a ClassLoader.getResources(...)\n  call), and then merged to form the\n  final application context definition.</p>\n</blockquote>\n\n<p>Can someone explain this? </p>\n\n<p>What is the difference between using <code>classpath*:conf/appContext.xml</code> as opposed to <code>classpath:conf/appContext.xml</code> without the asterisk.</p>\n    ","a":"\n<p><strong>SIMPLE DEFINITION</strong></p>\n\n<p>The <code>classpath*:conf/appContext.xml</code> simply means that <strong>all appContext.xml files</strong> under <code>conf</code> folders in all your jars on the classpath  will be picked up and joined into one big application context.</p>\n\n<p>In contrast, <code>classpath:conf/appContext.xml</code> will load <strong>only one such file</strong>... the first one found on your classpath.</p>\n    "},{"t":"Does Spring @Transactional attribute work on a private method?","l":"http://stackoverflow.com/questions/4396284/does-spring-transactional-attribute-work-on-a-private-method","q":"\n\n<p>If I have a <a href=\"http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/transaction/annotation/Transactional.html\">@Transactional</a> -annotation on a private method in a Spring bean, does the annotation have any effect?</p>\n\n<p>If the <code>@Transactional</code> annotation is on a public method, it works and open a transaction.</p>\n\n<pre><code>public class Bean {\n  public void doStuff() {\n     doPrivateStuff();\n  }\n  @Transactional\n  private void doPrivateStuff() {\n\n  }\n}\n\n...\n\nBean bean = (Bean)appContext.getBean(\"bean\");\nbean.doStuff();\n</code></pre>\n    ","a":"\n<p>The answer your question is no - <code>@Transactional</code> will have no effect if used to annotate private methods. The proxy generator will ignore them.</p>\n\n<p>This is documented in <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/transaction.html#transaction-declarative-annotations\" rel=\"nofollow noreferrer\">Spring Manual chapter 10.5.6</a>:</p>\n\n<blockquote>\n  <p><strong>Method visibility and <code>@Transactional</code></strong></p>\n  \n  <p>When using proxies, you should apply\n  the <code>@Transactional</code> annotation only\n  to methods with public visibility. If\n  you do annotate protected, private or\n  package-visible methods with the\n  <code>@Transactional</code> annotation, no error\n  is raised, but the annotated method\n  does not exhibit the configured\n  transactional settings. Consider the\n  use of AspectJ (see below) if you need\n  to annotate non-public methods.</p>\n</blockquote>\n    "},{"t":"Solve “failed to lazily initialize a collection of role” exception","l":"http://stackoverflow.com/questions/11746499/solve-failed-to-lazily-initialize-a-collection-of-role-exception","q":"\n\n<p>I have this problem:</p>\n\n<blockquote>\n  <p>org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: mvc3.model.Topic.comments, no session or session was closed</p>\n</blockquote>\n\n<p>Here is the model:  </p>\n\n<pre><code>@Entity\n@Table(name = \"T_TOPIC\")\npublic class Topic {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name=\"USER_ID\")\n    private User author;\n\n    @Enumerated(EnumType.STRING)    \n    private Tag topicTag;\n\n    private String name;\n    private String text;\n\n    @OneToMany(mappedBy = \"topic\", cascade = CascadeType.ALL)\n    private Collection&lt;Comment&gt; comments = new LinkedHashSet&lt;Comment&gt;();\n\n    ...\n\n    public Collection&lt;Comment&gt; getComments() {\n           return comments;\n    }\n\n}\n</code></pre>\n\n<p>The controller, which calls model looks like the following:</p>\n\n<pre><code>@Controller\n@RequestMapping(value = \"/topic\")\npublic class TopicController {\n\n    @Autowired\n    private TopicService service;\n\n    private static final Logger logger = LoggerFactory.getLogger(TopicController.class);\n\n\n    @RequestMapping(value = \"/details/{topicId}\", method = RequestMethod.GET)\n    public ModelAndView details(@PathVariable(value=\"topicId\") int id)\n    {\n\n            Topic topicById = service.findTopicByID(id);\n            Collection&lt;Comment&gt; commentList = topicById.getComments();\n\n            Hashtable modelData = new Hashtable();\n            modelData.put(\"topic\", topicById);\n            modelData.put(\"commentList\", commentList);\n\n            return new ModelAndView(\"/topic/details\", modelData);\n\n     }\n\n}\n</code></pre>\n\n<p>The jsp-page looks li the following:</p>\n\n<pre><code>&lt;%@page import=\"com.epam.mvc3.helpers.Utils\"%&gt;\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;\n&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;\n&lt;%@ page session=\"false\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n      &lt;title&gt;View Topic&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n&lt;c:forEach items=\"${commentList}\" var=\"item\"&gt;\n&lt;jsp:useBean id=\"item\" type=\"mvc3.model.Comment\"/&gt;\n&lt;li&gt;${item.getText()}&lt;/li&gt;\n\n&lt;/c:forEach&gt;\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Exception is rised, when viewing jsp. In the line with <em>c:forEach</em> loop</p>\n    ","a":"\n<p>If you know that you'll want to see all <code>Comment</code>s every time you retrieve a <code>Topic</code> then change your field mapping for <code>comments</code> to:</p>\n\n<pre><code>@OneToMany(fetch = FetchType.EAGER, mappedBy = \"topic\", cascade = CascadeType.ALL)\nprivate Collection&lt;Comment&gt; comments = new LinkedHashSet&lt;Comment&gt;();\n</code></pre>\n\n<p>Collections are lazy-loaded by default, take a look at <a href=\"http://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence\">this</a> if you want to know more.</p>\n    "},{"t":"POST JSON fails with 415 Unsupported media type, Spring 3 mvc","l":"http://stackoverflow.com/questions/11492325/post-json-fails-with-415-unsupported-media-type-spring-3-mvc","q":"\n\n<p>I am trying to send a POST request to a servlet. Request is sent via jQuery in this way:</p>\n\n<pre><code>var productCategory = new Object();\nproductCategory.idProductCategory = 1;\nproductCategory.description = \"Descrizione2\";\nnewCategory(productCategory);\n</code></pre>\n\n<p>where newCategory is</p>\n\n<pre><code>function newCategory(productCategory)\n{\n  $.postJSON(\"ajax/newproductcategory\", productCategory, function(\n      idProductCategory)\n  {\n    console.debug(\"Inserted: \" + idProductCategory);\n  });\n}\n</code></pre>\n\n<p>and postJSON is</p>\n\n<pre><code>$.postJSON = function(url, data, callback) {\n    return jQuery.ajax({\n    'type': 'POST',\n    'url': url,\n    'contentType': 'application/json',\n    'data': JSON.stringify(data),\n    'dataType': 'json',\n    'success': callback\n    });\n};\n</code></pre>\n\n<p>With firebug I see that JSON is sent correctly:</p>\n\n<pre><code>{\"idProductCategory\":1,\"description\":\"Descrizione2\"}\n</code></pre>\n\n<p>But I get 415 Unsupported media type. Spring mvc controller has signature</p>\n\n<pre><code>    @RequestMapping(value = \"/ajax/newproductcategory\", method = RequestMethod.POST)\npublic @ResponseBody\nInteger newProductCategory(HttpServletRequest request,\n        @RequestBody ProductCategory productCategory)\n</code></pre>\n\n<p>Some days ago it worked, now it is not. I'll show more code if needed.\nThanks</p>\n    ","a":"\n<p>I managed out how to make it works. Tell me in case I am wrong.\nI used only one way to serialize/deserialize: I removed all annotations regarding this (<code>@JSONSerialize</code> and <code>@JSONDeserialize</code>) and registered Serializers and Deserializers in <code>CustomObjectMapper</code> class.\nI didn't find an article explaining this behaviour but I resolved in this way. Hope it's useful.</p>\n    "},{"t":"What is Dispatcher Servlet in Spring?","l":"http://stackoverflow.com/questions/2769467/what-is-dispatcher-servlet-in-spring","q":"\n\n<p>In this image (which I got from <strong><a href=\"http://maestric.com/wiki/lib/exe/fetch.php?w=&amp;h=&amp;cache=cache&amp;media=java:spring:spring_mvc.png\" rel=\"nofollow noreferrer\">here</a></strong>), <em>HTTP</em> request sends something to <em>Dispatcher Servlet.</em> </p>\n\n<p><img src=\"https://i.stack.imgur.com/nRDbB.png\" alt=\"enter image description here\"></p>\n\n<p>My Question is what does <em>Dispatcher Servlet</em> do?</p>\n\n<p>Is it something like getting the information thrown from the web page and throwing it to the controller?</p>\n    ","a":"\n<p>The job of the <em>DispatcherServlet</em> is to take an incoming URI and find the right combination of handlers (generally methods on <em>Controller</em> classes) and views (generally JSPs) that combine to form the page or resource that's supposed to be found at that location.</p>\n\n<p>I might have</p>\n\n<ul>\n<li>a file <code>/WEB-INF/jsp/pages/Home.jsp</code></li>\n<li><p>and a <em>method</em> on a class</p>\n\n<pre><code>@RequestMapping(value=\"/pages/Home.html\")\nprivate ModelMap buildHome() {\n    return somestuff;\n}\n</code></pre></li>\n</ul>\n\n<p>The <em>Dispatcher servlet</em> is the bit that \"knows\" to call that method when a browser requests the page, and to combine its results with the matching JSP file to make an html document.</p>\n\n<p>How it accomplishes this varies widely with configuration and Spring version.</p>\n\n<p>There's also no reason the end result has to be web pages.  It can do the same thing to locate <em>RMI</em> end points, handle <em>SOAP</em> requests, anything that can come into a servlet.</p>\n    "},{"t":"Execute method on startup in spring","l":"http://stackoverflow.com/questions/2401489/execute-method-on-startup-in-spring","q":"\n\n<p>Is there any Spring 3 feature to execute some methods when the application starts for the first time? I know that I can do the trick of setting a method with @Scheduled annotation and it executes just after the startup, but then it will execute periodically.</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>If by \"application startup\" you mean \"application context startup\", then yes, there are <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle\" rel=\"nofollow noreferrer\">many ways to do this</a>, the easiest (for singletons beans, anyway) being to annotate your method with <code>@PostConstruct</code>. Take a look at the link to see the other options, but in summary they are:</p>\n\n<ul>\n<li>Methods annotated with <code>@PostConstruct</code></li>\n<li><code>afterPropertiesSet()</code> as defined by the <code>InitializingBean</code> callback interface</li>\n<li>A custom configured init() method</li>\n</ul>\n\n<p>Technically, these are hooks into the <em>bean</em> lifecycle, rather than the context lifecycle, but in 99% of cases, the two are equivalent.</p>\n\n<p>If you need to hook specifically into the context startup/shutdown, then you can <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle-processor\" rel=\"nofollow noreferrer\">implement the <code>Lifecycle</code> interface</a> instead, but that's probably unnecessary.</p>\n    "},{"t":"What are the benefits of dependency injection containers?","l":"http://stackoverflow.com/questions/131975/what-are-the-benefits-of-dependency-injection-containers","q":"\n\n<p>I understand benefits of dependency injection itself. Let's take Spring for instance. I also understand benefits of other Spring featureslike AOP, helpers of different kinds, etc. I'm just wondering, what are the benefits of XML configuration such as:</p>\n\n<pre><code>&lt;bean id=\"Mary\" class=\"foo.bar.Female\"&gt;\n  &lt;property name=\"age\" value=\"23\"/&gt;\n&lt;/bean&gt;\n&lt;bean id=\"John\" class=\"foo.bar.Male\"&gt;\n  &lt;property name=\"girlfriend\" ref=\"Mary\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>compared to plain old java code such as:</p>\n\n<pre><code>Female mary = new Female();\nmary.setAge(23);\nMale john = new Male();\njohn.setGirlfriend(mary);\n</code></pre>\n\n<p>which is easier debugged, compile time checked and can be understood by anyone who knows only java.\nSo what is the main purpose of a dependency injection framework? (or a piece of code that shows its benefits.)</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong><br>\nIn case of</p>\n\n<pre><code>IService myService;// ...\npublic void doSomething() {  \n  myService.fetchData();\n}\n</code></pre>\n\n<p>How can IoC framework guess which implementation of myService I want to be injected if there is more than one? If there is only one implementation of given interface, and I let IoC container automatically decide to use it, it will be broken after a second implementation appears. And if there is intentionally only one possible implementation of an interface then you do not need to inject it.</p>\n\n<p>It would be really interesting to see small piece of configuration for IoC which shows it's benefits. I've been using Spring for a while and I can not provide such example. And I can show single lines which demonstrate benefits of hibernate, dwr, and other frameworks which I use.</p>\n\n<hr>\n\n<p><strong>UPDATE 2:</strong><br>\nI realize that IoC configuration can be changed without recompiling. Is it really such a good idea? I can understand when someone wants to change DB credentials without recompiling - he may be not developer. In your practice, how often someone else other than developer changes IoC configuration? I think that for developers there is no effort to recompile that particular class instead of changing configuration. And for non-developer you would probably want to make his life easier and provide some simpler configuration file.</p>\n\n<hr>\n\n<p><strong>UPDATE 3:</strong><br></p>\n\n<blockquote>\n  <p>External configuration of mapping between interfaces and their concrete implementations </p>\n</blockquote>\n\n<p>What is so good in making it extenal? You don't make all your code external, while you definitely can - just place it in ClassName.java.txt file, read and compile manually on the fly - wow, you avoided recompiling. Why should compiling be avoided?!</p>\n\n<blockquote>\n  <p>You save coding time because you provide mappings declaratively, not in a procedural code </p>\n</blockquote>\n\n<p>I understand that sometimes declarative approach saves time. For example, I declare only once a mapping between a bean property and a DB column and hibernate uses this mapping while loading, saving, building SQL based on HSQL, etc. This is where the declarative approach works. In case of Spring (in my example), declaration had more lines and had the same expressiveness as corresponding code. If there is an example when such declaration is shorter than code - I would like to see it.</p>\n\n<blockquote>\n  <p>Inversion of Control principle allows for easy unit testing because you can replace real implementations with fake ones (like replacing SQL database with an in-memory one)</p>\n</blockquote>\n\n<p>I do understand inversion of control benefits (I prefer to call the design pattern discussed here as Dependency Injection, because IoC is more general - there are many kinds of control, and we are inverting only one of them - control of initialization). I was asking why someone ever needs something other than a programming language for it. I definitely can replace real implementations with fake ones using code. And this code will express same thing as configuration - it will just initialize fields with fake values.</p>\n\n<pre><code>mary = new FakeFemale();\n</code></pre>\n\n<p>I do understand benefits of DI. I do not understand what benefits are added by external XML configuration compared to configuring code that does the same. I do not think that compiling should be avoided - I compile every day and I'm still alive. I think configuration of DI is bad example of declarative approach. Declaration can be useful if is declared once AND is used many times in different ways - like hibernate cfg, where mapping between bean property and DB column is used for saving, loading, building search queries, etc. Spring DI configuration can be easily translated to configuring code, like in the beginning of this question, can it not? And it is used only for bean initialization, isn't it? Which means a declarative approach does not add anything here, does it?</p>\n\n<p>When I declare hibernate mapping, I just give hibernate some information, and it works based on it - I do not tell it what to do. In case of spring, my declaration tells spring exactly wht to do - so why declare it, why not just do it?</p>\n\n<hr>\n\n<p><strong>LAST UPDATE:</strong><br>\nGuys, a lot of answers are telling me about dependency injection, which I KNOW IS GOOD.\nThe question is about purpose of DI configuration instead of initializing code - I tend to think that initializing code is shorter and clearer.\nThe only answer I got so far to my question, is that it avoids recompiling, when the configuration changes. I guess I should post another question, because it is a big secret for me, why compiling should be avoided in this case.</p>\n    ","a":"\n<p>For myself one of the main reasons to use an IoC (and make use of external configuration) is around the two areas of:</p>\n\n<ul>\n<li>Testing</li>\n<li>Production maintenance</li>\n</ul>\n\n<p><strong>Testing</strong></p>\n\n<p>If you split your testing into 3 scenarios (which is fairly normal in large scale development):</p>\n\n<ol>\n<li>Unit testing</li>\n<li>Integration testing</li>\n<li>Black box testing</li>\n</ol>\n\n<p>What you will want to do is for the last two test scenarios (Integration &amp; Black box), is not recompile any part of the application.</p>\n\n<p>If any of your test scenarios require you to change the configuration (ie: use another component to mimic a banking integration, or do a performance load), this can be easily handled (this does come under the benefits of configuring the DI side of an IoC though.</p>\n\n<p>Additionally if your app is used either at multiple sites (with different server and component configuration) or has a changing configuration on the live environment you can use the later stages of testing to verify that the app will handle those changes.</p>\n\n<p><strong>Production</strong></p>\n\n<p>As a developer you don't (and should not) have control of the production environment (in particular when your app is being distributed to multiple customers or seperate sites), this to me is the real benefit of using both an IoC and external configuration, as it is up to the infrastructure/production support to tweak and adjust the live environment without having to go back to developers and through test (higher cost when all they want to do is move a component).</p>\n\n<p><strong>Summary</strong></p>\n\n<p>The main benefits that external configuration of an IoC come from giving others (non-developers) the power to configure your application, in my experience this is only useful under a limited set of circumstances:</p>\n\n<ul>\n<li>Application is distributed to multiple sites/clients where environments will differ.</li>\n<li>Limited development control/input over the production environment and setup.</li>\n<li>Testing scenarios.</li>\n</ul>\n\n<p>In practice I've found that even when developing something that you do have control over the environment it will be run on, over time it is better to give someone else the capabilities to change the configuration:</p>\n\n<ul>\n<li>When developing you don't know when it will change (the app is so useful your company sells it to someone else).</li>\n<li>I don't want to be stuck with changing the code every time a slight change is requested that could have been handled by setting up and using a good configuration model. </li>\n</ul>\n\n<p><em>Note: Application refers to the complete solution (not just the executable), so all files required for the application to run</em>.</p>\n    "},{"t":"Access properties file programatically with Spring?","l":"http://stackoverflow.com/questions/1771166/access-properties-file-programatically-with-spring","q":"\n\n<p>We use the code below to inject Spring beans with properties from a properties file.</p>\n\n<pre><code>&lt;bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\n    &lt;property name=\"locations\" value=\"classpath:/my.properties\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"blah\" class=\"abc\"&gt;\n    &lt;property name=\"path\" value=\"${the.path}\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Is there a way we can access the properties programatically?  I'm trying to do some code without dependency injection.  So I'd like to just have some code like this:</p>\n\n<pre><code>PropertyPlaceholderConfigurer props = new PropertyPlaceholderConfigurer();\nprops.load(\"classpath:/my.properties\");\nprops.get(\"path\");\n</code></pre>\n    ","a":"\n<p>How about <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/core/io/support/PropertiesLoaderUtils.html\" rel=\"nofollow noreferrer\">PropertiesLoaderUtils</a>?</p>\n\n<pre><code>Resource resource = new ClassPathResource(\"/my.properties\");\nProperties props = PropertiesLoaderUtils.loadProperties(resource);\n</code></pre>\n    "},{"t":"Spring MVC - How to get all request params in a map in Spring controller?","l":"http://stackoverflow.com/questions/7312436/spring-mvc-how-to-get-all-request-params-in-a-map-in-spring-controller","q":"\n\n<p>Sample URL:</p>\n\n<pre><code>../search/?attr1=value1&amp;attr2=value2&amp;attr4=value4\n</code></pre>\n\n<p>I do not know the names of attr1, att2, and attr4.</p>\n\n<p>I would like to be able to do something like that (or similar, don't care, just as long as I have access to the Map of request param name -&gt; value:</p>\n\n<pre><code>@RequestMapping(value = \"/search/{parameters}\", method = RequestMethod.GET)\npublic void search(HttpServletRequest request, \n@PathVariable Map&lt;Spring,Spring&gt; allRequestParams, ModelMap model)\nthrows Exception {//TODO: implement}\n</code></pre>\n\n<p>How can I achieve this with Spring MVC?</p>\n    ","a":"\n<p><strong><em>Edit</em></strong></p>\n\n<p>It has been pointed out that there exists (<a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html\">at least as of 3.0</a>) a pure Spring MVC mechanism by which one could get this data.  I will not detail it here, as it is the answer of another user.  See <a href=\"http://stackoverflow.com/a/18489124/1529734\">@AdamGent's answer</a> for details, and don't forget to upvote it.</p>\n\n<p>In the Spring 3.2 documentation this mechanism is mentioned on both the <code>RequestMapping</code> JavaDoc page and the <code>RequestParam</code> JavaDoc page, but prior, it is only mentioned in the <code>RequestMapping</code> page.  In 2.5 documentation there is no mention of this mechanism.</p>\n\n<p>This is likely the preferred approach for most developers as it removes (at least this) binding to the <code>HttpServletRequest</code> object defined by the servlet-api jar.</p>\n\n<p><strong><em>/Edit</em></strong></p>\n\n<p>You should have access to the requests query string via <a href=\"http://download.oracle.com/docs/cd/E17802_01/products/products/servlet/2.3/javadoc/javax/servlet/http/HttpServletRequest.html#getQueryString%28%29\"><code>request.getQueryString()</code></a>.  </p>\n\n<p>In addition to getQueryString, the query parameters can also be retrieved from <a href=\"http://docs.oracle.com/cd/E17802_01/products/products/servlet/2.3/javadoc/javax/servlet/ServletRequest.html#getParameterMap()\">request.getParameterMap()</a> as a Map.</p>\n    "},{"t":"Reading a List from properties file and load with spring annotation @Value","l":"http://stackoverflow.com/questions/12576156/reading-a-list-from-properties-file-and-load-with-spring-annotation-value","q":"\n\n<p>Similar to this question: <a href=\"http://forum.springsource.org/showthread.php?111992-Loading-a-list-from-properties-file-using-Value-annotation\">http://forum.springsource.org/showthread.php?111992-Loading-a-list-from-properties-file-using-Value-annotation</a> (for which there's no reply on)</p>\n\n<p>I want to have a list of values in a .properties file, ie:</p>\n\n<pre><code>my.list.of.strings=ABC,CDE,EFG\n</code></pre>\n\n<p>And to load it in my class directly, ie:</p>\n\n<pre><code>@Value(\"${my.list.of.strings}\")\nprivate List&lt;String&gt; myList;\n</code></pre>\n\n<p>As I understand, an alternative of doing this is to have it in the spring config file, and load it as a bean reference (correct me if I'm wrong), ie</p>\n\n<pre><code>&lt;bean name=\"list\"&gt;\n &lt;list&gt;\n  &lt;value&gt;ABC&lt;/value&gt;\n  &lt;value&gt;CDE&lt;/value&gt;\n  &lt;value&gt;EFG&lt;/value&gt;\n &lt;/list&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>But is there any way of doing this? using a .properties file? \nps: I would like to do this with out any custom code if possible.</p>\n    ","a":"\n<p>Using Spring EL:</p>\n\n<pre><code> @Value(\"#{'${my.list.of.strings}'.split(',')}\") \n private List&lt;String&gt; myList;\n</code></pre>\n\n<p>Assuming your properties file is loaded correctly with the following:</p>\n\n<pre><code>my.list.of.strings=ABC,CDE,EFG\n</code></pre>\n    "},{"t":"What does java:comp/env/ do?","l":"http://stackoverflow.com/questions/4099095/what-does-javacomp-env-do","q":"\n\n<p>I just spent too much time of my day trying to figure out some errors when hooking up some JNDI factory bean.  The problem turned out to be that instead of this...</p>\n\n<pre><code>&lt;bean id=\"someId\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n  &lt;property name=\"jndiName\" value=\"java:comp/env/jdbc/loc\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>I had actually written this...</p>\n\n<pre><code>&lt;bean id=\"someId\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n  &lt;property name=\"jndiName\" value=\"jdbc/loc\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>I infer that the java:comp/env/ perhaps references some environment variable and makes it so that, ultimately, my context file is looked at.  The only difference is java:comp/env/.  From an expert's mouth, what does that do?</p>\n\n<p>Without the java:comp/env prefix in the value, I would get an error that said \"Name jdbc is not bound in this Context\".</p>\n    ","a":"\n<p>Quoting <a href=\"https://web.archive.org/web/20140227201242/http://v1.dione.zcu.cz/java/docs/jndi-1.2/tutorial/beyond/misc/policy.html\" rel=\"nofollow\">https://web.archive.org/web/20140227201242/http://v1.dione.zcu.cz/java/docs/jndi-1.2/tutorial/beyond/misc/policy.html</a></p>\n\n<blockquote>\n  <p>At the root context of the namespace\n  is a binding with the name \"comp\",\n  which is bound to a subtree reserved\n  for component-related bindings. The\n  name \"comp\" is short for component.\n  There are no other bindings at the\n  root context. However, the root\n  context is reserved for the future\n  expansion of the policy, specifically\n  for naming resources that are tied not\n  to the component itself but to other\n  types of entities such as users or\n  departments. For example, future\n  policies might allow you to name users\n  and organizations/departments by using\n  names such as \"java:user/alice\" and\n  \"java:org/engineering\".</p>\n  \n  <p>In the \"comp\" context, there are two\n  bindings: \"env\" and \"UserTransaction\".\n  The name \"env\" is bound to a subtree\n  that is reserved for the component's\n  environment-related bindings, as\n  defined by its deployment descriptor.\n  \"env\" is short for environment. The\n  J2EE recommends (but does not require)\n  the following structure for the \"env\"\n  namespace.</p>\n</blockquote>\n\n<p>So the binding you did from spring or, for example, from a tomcat context descriptor go by default under java:comp/env/</p>\n\n<p>For example, if your configuration is:</p>\n\n<pre><code>&lt;bean id=\"someId\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n  &lt;property name=\"jndiName\" value=\"foo\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Then you can access it directly using:</p>\n\n<pre><code>Context ctx = new InitialContext();\nDataSource ds = (DataSource)ctx.lookup(\"java:comp/env/foo\");\n</code></pre>\n\n<p>or you could make an intermediate step so you don't have to specify \"java:comp/env\" for every resource you retrieve:</p>\n\n<pre><code>Context ctx = new InitialContext();\nContext envCtx = (Context)ctx.lookup(\"java:comp/env\");\nDataSource ds = (DataSource)envCtx.lookup(\"foo\");\n</code></pre>\n    "},{"t":"Exception NoClassDefFoundError for CacheProvider","l":"http://stackoverflow.com/questions/7528862/exception-noclassdeffounderror-for-cacheprovider","q":"\n\n<p>I'm kind of new in Spring and hibernate so I'm trying to implement some simple web application based on Spring 3 + hibernate 4\nwhile I start tomcat I have this exception:</p>\n\n<pre><code>java.lang.NoClassDefFoundError: org/hibernate/cache/CacheProvider\nat java.lang.Class.getDeclaredMethods0(Native Method)\nat java.lang.Class.privateGetDeclaredMethods(Class.java:2427)\nat java.lang.Class.getDeclaredMethods(Class.java:1791)\n    ...\nCaused by: java.lang.ClassNotFoundException: org.hibernate.cache.CacheProvider\nat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678)\nat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523)\n</code></pre>\n\n<p>I've found that this class was in hibernate-core for hibernate 3 but I've not found it in hibernate 4. </p>\n\n<p>The part of my context.xml for persistence:</p>\n\n<pre><code>&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"&gt;\n    &lt;property name=\"driverClassName\" value=\"org.hsqldb.jdbcDriver\"/&gt;\n    &lt;property name=\"url\" value=\"jdbc:oracle:thin:@IP_Address:SID\"/&gt;\n    &lt;property name=\"username\" value=\"xxx\"/&gt;\n    &lt;property name=\"password\" value=\"xxx\"/&gt;\n    &lt;property name=\"initialSize\" value=\"5\"/&gt;\n    &lt;property name=\"maxActive\" value=\"20\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"&gt;\n    &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n    &lt;property name=\"packagesToScan\" value=\"com.huawei.vms.user\"/&gt;\n    &lt;property name=\"hibernateProperties\"&gt;\n        &lt;props&gt;\n            &lt;prop key=\"dialect\"&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;\n        &lt;/props&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Please help me to figure out why it's trying to load CashProvider because I dont have any settings for that in context.xml and which jar I have to add in my project.\nThanks!</p>\n    ","a":"\n<p>Change your AnnotationSessionFactoryBean to <code>org.springframework.orm.hibernate4.LocalSessionFactoryBean</code> (Hibernate 4) and you'll be good to go.  The AnnotationSessionFactoryBean was replaced with the LocalSessionFactoryBean as it does class path scanning now.</p>\n    "},{"t":"How assign bean's property an Enum value in Spring config file?","l":"http://stackoverflow.com/questions/516771/how-assign-beans-property-an-enum-value-in-spring-config-file","q":"\n\n<p>I have a standalone enum type defined, something like this:</p>\n\n<pre><code>package my.pkg.types;\n\npublic enum MyEnumType {\n    TYPE1,\n    TYPE2\n}\n</code></pre>\n\n<p>Now, I want to inject a value of that type into a bean property:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean name=\"someName\" class=\"my.pkg.classes\"&gt;\n   &lt;property name=\"type\" value=\"my.pkg.types.MyEnumType.TYPE1\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>...and that didn't work :(</p>\n\n<p>How should I Inject an Enum into a spring bean? </p>\n    ","a":"\n<p>Have you tried just \"TYPE1\" ? I suppose spring uses reflection to determine the type of \"type\" anyway, so the fully qualified name seems redundant. I must admit I'm guessing, but spring generally doesn't subscribe to redundancy ;)</p>\n    "},{"t":"Default profile in Spring 3.1","l":"http://stackoverflow.com/questions/10041410/default-profile-in-spring-3-1","q":"\n\n<p>In my application I have beans annotated with <code>@Profile(\"prod\")</code> and <code>@Profile(\"demo\")</code>.\nThe first one, as you can guess :), is used on beans that connect to production DB and second one annotates beans that use some fake DB (<code>HashMap</code> or whatever)- to make development faster.</p>\n\n<p>What I would like to have is default profile (<code>\"prod\"</code>) that will be used always if it is not overridden by \"<em>something-else</em>\".</p>\n\n<p>Perfect would be to have in my <code>web.xml</code>:</p>\n\n<pre><code>&lt;context-param&gt;\n     &lt;param-name&gt;spring.profiles.active&lt;/param-name&gt;\n     &lt;param-value&gt;prod&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre>\n\n<p>and then override this with <code>-Dspring.profiles.active=\"demo\"</code> so that I could do:</p>\n\n<pre><code>mvn jetty:run -Dspring.profiles.active=\"demo\". \n</code></pre>\n\n<p>But sadly this is not working. Any idea how could I achive that? Setting <code>-Dspring.profiles.active=\"prod\"</code> on all my environments  is not an option.</p>\n    ","a":"\n<p>My experience is that using</p>\n\n<pre><code>@Profile(\"default\")\n</code></pre>\n\n<p>the bean will only be added to the context if no other profile is identified. If you pass in a different profile, e.g. <code>-Dspring.profiles.active=\"demo\"</code>, this profile is ignored.</p>\n    "},{"t":"Spring schemaLocation fails when there is no internet connection","l":"http://stackoverflow.com/questions/1729307/spring-schemalocation-fails-when-there-is-no-internet-connection","q":"\n\n<p>I am using Spring and in <code>application-context.xml</code> I have the following definitions: </p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xmlns:util=\"http://www.springframework.org/schema/util\"\n   xmlns:context=\"http://www.springframework.org/schema/context\"\n   xmlns:aop=\"http://www.springframework.org/schema/aop\"\n   xmlns:tx=\"http://www.springframework.org/schema/tx\"\n   xmlns:p=\"http://www.springframework.org/schema/p\"\n   xmlns:security=\"http://www.springframework.org/schema/security\"\n   xsi:schemaLocation=\"\n   http://www.springframework.org/schema/beans \n   http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n   http://www.springframework.org/schema/util \n   http://www.springframework.org/schema/util/spring-util-2.0.xsd\n   http://www.springframework.org/schema/context\n   http://www.springframework.org/schema/context/spring-context-2.1.xsd\n   http://www.springframework.org/schema/tx\n   http://www.springframework.org/schema/tx/spring-tx.xsd\n   http://www.springframework.org/schema/aop\n   http://www.springframework.org/schema/aop/spring-aop-2.0.xsd\n   http://www.springframework.org/schema/security\n   http://www.springframework.org/schema/security/spring-security-2.0.xsd\"\n   &gt;\n</code></pre>\n\n<p>.....</p>\n\n<p><strong>When my internet connection is lost, I cannot run my application via tomcat or jetty.</strong> </p>\n\n<p>It gives: </p>\n\n<pre><code>[main] WARN  org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Ignored XML validation warning\norg.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document '/spring-beans-2.0.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.\n    at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)\n    at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.warning(ErrorHandlerWrapper.java:96)\n    at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:380)\n    at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)\n    at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaErr(XSDHandler.java:2541)\n    at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaWarning(XSDHandler.java:2532)\n    at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getSchemaDocument(XSDHandler.java:1836)\n    at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema(XSDHandler.java:531)\n    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:552)\n    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.findSchemaGrammar(XMLSchemaValidator.java:2408)\n    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1753)\n    at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:685)\n    at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:400)\n    at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDriver.scanRootElementHook(XMLNSDocumentScannerImpl.java:626)\n    at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:3095)\n    at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:921)\n    at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)\n    at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)\n    at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510)\n    at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:807)\n    at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)\n    at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:107)\n    at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:225)\n    at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:283)\n    at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)\n    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)\n    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)\n    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)\n    at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124)\n    at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:92)\n    at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)\n    at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353)\n    at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)\n    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)\n    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)\n    at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)\n    at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)\n    at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)\n    at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)\n    at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)\n    at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)\n    at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n    at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n    at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)\n    at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n    at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)\n    at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n    at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)\n    at org.mortbay.jetty.Server.doStart(Server.java:224)\n    at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)\n    at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)\n    at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)\n    at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)\n    at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)\n    at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)\n    at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:483)\n    at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:678)\n    at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:553)\n    at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:523)\n    at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:371)\n    at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:332)\n    at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:181)\n    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:356)\n    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)\n    at org.apache.maven.cli.MavenCli.main(MavenCli.java:356)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n    at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n    at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n    at org.codehaus.classworlds.Launcher.main(Launcher.java:375)\n2009-11-13 15:31:25,675 [main] ERROR org.springframework.web.context.ContextLoader - Context initialization failed\norg.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 23 in XML document from class path resource [application-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'.\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:404)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinit........\n</code></pre>\n\n<p>Any suggestions how to fix it? </p>\n    ","a":"\n<p>There is no need to use the classpath: protocol in your schemaLocation URL if the namespace is configured correctly and the XSD file is on your classpath.</p>\n\n<p>Spring doc \"<a href=\"http://static.springsource.org/spring/docs/3.0.5.RELEASE/spring-framework-reference/html/extensible-xml.html#extensible-xml-registration\">Registering the handler and the schema</a>\" shows how it should be done. </p>\n\n<p>In your case, the problem was probably that the spring-context jar on your classpath was not 2.1. That was why changing the protocol to classpath: and putting the specific 2.1 XSD in your classpath fixed the problem. </p>\n\n<p>From what I've seen, there are 2 schemas defined for the main XSD contained in a spring-* jar. Once to resolve the schema URL with the version and once without it.</p>\n\n<p>As an example see this part of the spring.schemas contents in spring-context-3.0.5.RELEASE.jar:</p>\n\n<pre><code>http\\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.0.xsd\n</code></pre>\n\n<p>This means that (in xsi:schemaLocation) </p>\n\n<pre><code>http://www.springframework.org/schema/context/spring-context-2.5.xsd \n</code></pre>\n\n<p>will be validated against </p>\n\n<pre><code>org/springframework/context/config/spring-context-2.5.xsd \n</code></pre>\n\n<p>in the classpath. </p>\n\n<pre><code>http://www.springframework.org/schema/context/spring-context-3.0.xsd \n</code></pre>\n\n<p>or</p>\n\n<pre><code>http://www.springframework.org/schema/context/spring-context.xsd\n</code></pre>\n\n<p>will be validated against</p>\n\n<pre><code>org/springframework/context/config/spring-context-3.0.xsd \n</code></pre>\n\n<p>in the classpath.</p>\n\n<pre><code>http://www.springframework.org/schema/context/spring-context-2.1.xsd\n</code></pre>\n\n<p>is not defined so Spring will look for it using the literal URL defined in schemaLocation.</p>\n    "},{"t":"Difference between Role and GrantedAuthority in Spring Security","l":"http://stackoverflow.com/questions/19525380/difference-between-role-and-grantedauthority-in-spring-security","q":"\n\n<p>There are concepts and implementations in Spring Security, such as the <code>GrantedAuthority</code> interface to get an <em>authority</em> to authorize/control an access. </p>\n\n<p>I would like that to permissible operations, such as <em>createSubUsers</em>, or <em>deleteAccounts</em>, which I would allow to an <em>admin</em> (with role <code>ROLE_ADMIN</code>). </p>\n\n<p>I am getting confused as the tutorials/demos I see online. I try to connect what I read, but I think we treat the two interchangeably.</p>\n\n<p>I see <code>hasRole</code> consuming a <code>GrantedAuthority</code> string? I most definitely am doing it wrong in understanding. What are these conceptually in Spring Security? </p>\n\n<p>How do I store the role of a user, separate from the authorities for that role?</p>\n\n<p>I'm also looking at the <code>org.springframework.security.core.userdetails.UserDetails</code> interface which is used in the authentication-provider referenced DAO, which consumes a <code>User</code> (note last GrantedAuthority):</p>\n\n<pre><code>public User(String username, \n            String password, \n            boolean enabled, \n            boolean accountNonExpired,\n            boolean credentialsNonExpired, \n            boolean accountNonLocked, \n            Collection&lt;? extends GrantedAuthority&gt; authorities)\n</code></pre>\n\n<p>Or is there any other way to differentiate the other two? Or is it not supported and we have to make our own?</p>\n    ","a":"\n<p>Think of a GrantedAuthority as being a \"permission\" or a \"right\". Those \"permissions\" are (normally) expressed as strings (with the <code>getAuthority()</code> method). Those strings let you identify the permissions and let your voters decide if they grant access to something.</p>\n\n<p>You can grant different GrantedAuthoritys (permissions) to users by putting them into the security context. You normally do that by implementing your own UserDetailsService that returns a UserDetails implementation that returns the needed GrantedAuthorities.</p>\n\n<p>Roles (as they are used in many examples) are just \"permissions\" with a naming convention that says that a role is a GrantedAuthority that starts with the prefix <code>ROLE_</code>. There's nothing more. A role is just a GrantedAuthority - a \"permission\" - a \"right\". You see a lot of places in spring security where the role with its <code>ROLE_</code> prefix is handled specially as e.g. in the RoleVoter, where the <code>ROLE_</code> prefix is used as a default. This allows you to provide the role names withtout the <code>ROLE_</code> prefix. Prior to Spring security 4, this special handling of \"roles\" has not been followed very consequently and authorities and roles were often treated the same (as you e.g. can see in the implementation of the <code>hasAuthority()</code> method in <a href=\"https://github.com/spring-projects/spring-security/blob/3.2.x/core/src/main/java/org/springframework/security/access/expression/SecurityExpressionRoot.java\">SecurityExpressionRoot</a> - which simply calls <code>hasRole()</code>). With Spring Security 4, the treatment of roles is more consequent and code that deals with \"roles\" (like the <code>RoleVoter</code>, the <code>hasRole</code> expression etc.) always adds the <code>ROLE_</code> prefix for you. So <code>hasAuthority('ROLE_ADMIN')</code> means the the same as <code>hasRole('ADMIN')</code> because the <code>ROLE_</code> prefix gets added automatically. See the spring security 3 to 4 <a href=\"http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-jc.html#m3to4-role-prefixing\">migration guide</a> for futher information.</p>\n\n<p>But still: a role is just an authority with a special <code>ROLE_</code> prefix. So in Spring security 3 <code>@PreAuthorize(\"hasRole('ROLE_XYZ')\")</code> is the same as <code>@PreAuthorize(\"hasAuthority('ROLE_XYZ')\")</code> and in Spring security 4 <code>@PreAuthorize(\"hasRole('XYZ')\")</code> is the same as <code>@PreAuthorize(\"hasAuthority('ROLE_XYZ')\")</code>.</p>\n\n<p>Regarding your use case:</p>\n\n<blockquote>\n  <p>Users have roles and roles can perform certain operations.</p>\n</blockquote>\n\n<p>You could end up in <code>GrantedAuthorities</code> for the roles a user belongs to and the operations a role can perform. The <code>GrantedAuthorities</code> for the roles have the prefix <code>ROLE_</code> and the operations have the prefix <code>OP_</code>. An example for operation authorities could be <code>OP_DELETE_ACCOUNT</code>, <code>OP_CREATE_USER</code>, <code>OP_RUN_BATCH_JOB</code>etc. Roles can be ROLE_ADMIN, ROLE_USER etc.</p>\n\n<p>You could end up having your entities implement <code>GrantedAuthority</code> like in this (pseudo-code) example:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\nclass Role implements GrantedAuthority {\n    @Id\n    private String id;\n\n    @OneToMany\n    private final List&lt;Operation&gt; allowedOperations = new ArrayList&lt;&gt;();\n\n    @Override\n    public String getAuthority() {\n        return id;\n    }\n\n    public Collection&lt;GrantedAuthority&gt; getAllowedOperations() {\n        return allowedOperations;\n    }\n}\n\n@Entity\nclass User {\n    @Id\n    private String id;\n\n    @OneToMany\n    private final List&lt;Role&gt; roles = new ArrayList&lt;&gt;();\n\n    public Collection&lt;Role&gt; getRoles() {\n        return roles;\n    }\n}\n\n@Entity\nclass Operation implements GrantedAuthority {\n    @Id\n    private String id;\n\n    @Override\n    public String getAuthority() {\n        return id;\n    }\n}\n</code></pre>\n\n<p>The ids of the roles and operations you create in your database would be the GrantedAuthority representation, e.g. \"ROLE_ADMIN\", \"OP_DELETE_ACCOUNT\" etc. When a user is authenticated, make sure that all GrantedAuthorities of all its roles and the corresponding operations are returned from the UserDetails.getAuthorities() method.</p>\n\n<p>Example:\nThe admin role with id ROLE_ADMIN has the operations OP_DELETE_ACCOUNT, OP_READ_ACCOUNT, OP_RUN_BATCH_JOB assigned to it. \nThe user role with id ROLE_USER has the operation OP_READ_ACCOUNT.</p>\n\n<p>If an admin logs in the resulting security context will have the GrantedAuthorities:\nROLE_ADMIN, OP_DELETE_ACCOUNT, OP_READ_ACCOUNT, OP_RUN_BATCH_JOB</p>\n\n<p>If a user logs it, it will have:\nROLE_USER, OP_READ_ACCOUNT</p>\n\n<p>The UserDetailsService would take care to collect all roles and all operations of those roles and make them available by the method getAuthorities() in the returned UserDetails instance.</p>\n    "},{"t":"Java EE 6 vs. Spring 3 stack [closed]","l":"http://stackoverflow.com/questions/2499323/java-ee-6-vs-spring-3-stack","q":"\n\n<p>I'm starting a new project now. I have to choose technologies. I need something light, so no EJB or Seam. On the other hand I need JPA (Hibernate or alternative) and JSF with IceFaces.</p>\n\n<p>Do you think that such a stack on Spring 3 deployed on Tomcat is a good choice? Or a Java EE 6 web application could be better? I'm afraid that Java EE 6 is a new technology, not well documented yet. Tomcat seems to be easier to maintain than Glassfish 3. </p>\n\n<p>What's your opinion? Do you have any experiences?</p>\n    ","a":"\n<p>It doesn't matter. Java EE 6 is good enough and because of the profiles there, it is not \"heavy\" - you'll just be using the web profile.</p>\n\n<p>Personally, I prefer Spring. But I'm running out of rational arguments against Java EE 6 :)</p>\n\n<p>(As I was reminded by a comment - you might want to try <a href=\"http://www.jboss.org/richfaces\" rel=\"nofollow noreferrer\">RichFaces</a>, as well as <a href=\"http://www.icesoft.org/java/projects/ICEfaces/overview.jsf\" rel=\"nofollow noreferrer\">ICEfaces</a> and/or <a href=\"http://primefaces.org/\" rel=\"nofollow noreferrer\">PrimeFaces</a> - depending on what components you need).</p>\n    "},{"t":"Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules","l":"http://stackoverflow.com/questions/3403773/using-multiple-property-files-via-propertyplaceholderconfigurer-in-multiple-pr","q":"\n\n<p>We are currently writing an application which is split into multiple projects/modules. For example, let's take the following modules:</p>\n\n<ul>\n<li>myApp-DAO</li>\n<li>myApp-jabber</li>\n</ul>\n\n<p>Each module has its own Spring context xml file. For the DAO module I have a PropertyPlaceholderConfigurer which reads a property file with the necessary db connection parameters. In the jabber module I also have a PropertyPlaceHolderConfigurer for the jabber connection properties.</p>\n\n<p>Now comes the main application which includes myApp-DAO and myApp-jabber. It reads all the context files and starts one big Spring context. Unfortunately it seems like there can only be one PropertyPlaceholderConfigurer per context, so whichever module gets loaded first is able to read it's connection parameters. The other one throws an exception with an error like \"Could not resolve placeholder 'jabber.host'\"</p>\n\n<p>I kind of understand what the problem is, but I don't really know a solution - or the best practice for my usecase.</p>\n\n<p>How would I configure each module so that each one is able to load its own property file? Right now I've moved the PropertyPlaceHolderConfigurer out of the seperate context files and merged them into the main application's context (loading all property files with a single PropertyPlaceHolderConfigurer). This sucks though, because now everyone who uses the dao module has to know, that they need a PropertyPlaceHolderConfigurer in their context .. also the integration tests in the dao module fail etc.</p>\n\n<p>I'm curious to hear about solutions/ideas from the stackoverflow community..</p>\n    ","a":"\n<p>If you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:</p>\n\n\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;context:property-placeholder\nlocation=\"classpath:dao.properties,\n          classpath:services.properties,\n          classpath:user.properties\"\nignore-unresolvable=\"true\"/&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>    &lt;bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\n        &lt;property name=\"locations\"&gt;\n            &lt;list&gt;\n                &lt;value&gt;classpath:dao.properties&lt;/value&gt;\n                &lt;value&gt;classpath:services.properties&lt;/value&gt;\n                &lt;value&gt;classpath:user.properties&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt; \n        &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/&gt;\n    &lt;/bean&gt;\n</code></pre>\n    "},{"t":"JdbcTemplate queryForInt/Long is deprecated in Spring 3.2.2. What should it be replaced by?","l":"http://stackoverflow.com/questions/15661313/jdbctemplate-queryforint-long-is-deprecated-in-spring-3-2-2-what-should-it-be-r","q":"\n\n<p>The queryforInt/queryforLong methods in JdbcTemplate are deprecated in Spring 3.2. I can't find out why or what is considered the best practice to replace existing code using these methods.</p>\n\n<p>A typical method:</p>\n\n<pre><code>int rowCount = jscoreJdbcTemplate.queryForInt(\n    \"SELECT count(*) FROM _player WHERE nameKey = ? AND teamClub = ?\",\n    playerNameKey.toUpperCase(),\n    teamNameKey.toUpperCase()\n);\n</code></pre>\n\n<p>OK the above method needs to be re-written as follows:</p>\n\n<pre><code>Object[] params = new Object[] { \n   playerNameKey.toUpperCase(), \n   teamNameKey.toUpperCase()\n};\nint rowCount = jscoreJdbcTemplate.queryForObject(\n    \"SELECT count(*) FROM _player WHERE nameKey = ? AND teamClub = ?\",\n    params, Integer.class);\n</code></pre>\n\n<p>Obviously this deprecation makes the JdbcTemplate class simpler (or does it?). QueryForInt was always a convenience method (I guess) and has been around a long time. Why has it been removed. The code becomes more complicated as a result.</p>\n    ","a":"\n<p>What I think is that somebody realized that the queryForInt/Long methods has confusing semantics, that is, from JdbcTemplate source code you can see its current implementation:</p>\n\n<pre><code>@Deprecated\npublic int queryForInt(String sql, Object... args) throws DataAccessException {\n    Number number = queryForObject(sql, args, Integer.class);\n    return (number != null ? number.intValue() : 0);\n}\n</code></pre>\n\n<p>which may lead you to think that if the result set is empty it will return 0, however it throws an exception:</p>\n\n<p><code>org.springframework.dao.EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0</code></p>\n\n<p>so the the following implementation is essentially equivalent to the current one:</p>\n\n<pre><code>@Deprecated\npublic int queryForInt(String sql, Object... args) throws DataAccessException {\n    return queryForObject(sql, args, Integer.class);\n}\n</code></pre>\n\n<p>And then the non deprecated code now must be replaced with the ugly:</p>\n\n<pre><code>    queryForObject(sql, new Object { arg1, arg2, ...}, Integer.class);\n</code></pre>\n\n<p>or this (nicer):</p>\n\n<pre><code>    queryForObject(sql, Integer.class, arg1, arg2, ...);\n</code></pre>\n    "},{"t":"Hibernate lazy-load application design","l":"http://stackoverflow.com/questions/5027013/hibernate-lazy-load-application-design","q":"\n\n<p>I tend to use <a href=\"http://www.hibernate.org/docs\">Hibernate</a> in combination with <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate\">Spring</a> framework and it's declarative transaction demarcation capabilities (e.g., <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#transaction-declarative-annotations\">@Transactional</a>). </p>\n\n<p>As we all known, hibernate tries to be as <em>non-invasive</em> and as <em>transparent</em> as possible, however this proves <strong>a bit more challenging</strong> when employing <strong><code>lazy-loaded</code></strong> relationships. </p>\n\n<hr>\n\n<p>I see a number of design alternatives with different levels of transparency. </p>\n\n<ol>\n<li>Make relationships not lazy-loaded (e.g., <code>fetchType=FetchType.EAGER)</code>\n<ul>\n<li>This vioalites the entire idea of lazy loading .. </li>\n</ul></li>\n<li>Initialize collections using <code>Hibernate.initialize(proxyObj);</code>\n<ul>\n<li>This implies relatively high-coupling to the DAO</li>\n<li>Although we can define an interface with <code>initialize</code>, other implementations are not guaranteed to provide any equivalent. </li>\n</ul></li>\n<li>Add transaction behaviour to the persistent <code>Model</code> objects themselves (using either <a href=\"http://download.oracle.com/javase/6/docs/api/\">dynamic proxy</a> or <code>@Transactional</code>)\n<ul>\n<li>I've not tried the dynamic proxy approach, although I never seemed to get @Transactional working on the persistent objects themselves. Probably due to that hibernate is operation on a proxy to bein with. </li>\n<li>Loss of control when transactions are actually taking place</li>\n</ul></li>\n<li>Provide both lazy/non-lazy API, e.g, <code>loadData()</code> and <code>loadDataWithDeps()</code>\n<ul>\n<li>Forces the application to know when to employ which routine, again tight coupling</li>\n<li>Method overflow, <code>loadDataWithA()</code>, ...., <code>loadDataWithX()</code></li>\n</ul></li>\n<li>Force lookup for dependencies, e.g., by only providing <code>byId()</code> operations\n<ul>\n<li>Requires alot of non-object oriented routines, e.g., <code>findZzzById(zid)</code>, and then <code>getYyyIds(zid)</code> instead of <code>z.getY()</code></li>\n<li>It can be useful to fetch each object in a collection one-by-one if there's a large processing overhead between the transactions. </li>\n</ul></li>\n<li>Make part of the <em>application</em> @Transactional instead of only the <a href=\"http://en.wikipedia.org/wiki/Data_access_object\">DAO</a>\n<ul>\n<li>Possible considerations of nested transactions</li>\n<li>Requires routines adapted for transaction management (e.g., suffiently small)</li>\n<li>Small programmatic impact, although might result in large transactions</li>\n</ul></li>\n<li>Provide the DAO with dynamic <a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e3524\">fetch profiles</a>, e.g., <code>loadData(id, fetchProfile);</code>\n<ul>\n<li>Applications must know which profile to use when</li>\n</ul></li>\n<li>AoP type of transactions, e.g., intercept operations and perform transactions when necessary\n<ul>\n<li>Requires byte-code manipulation or proxy usage</li>\n<li>Loss of control when transactions are performed</li>\n<li>Black magic, as always :)</li>\n</ul></li>\n</ol>\n\n<p>Did I miss any option?</p>\n\n<hr>\n\n<p>Which is your preferred approach when trying to minimize the impact of <code>lazy-loaded</code> relationships in your application design? </p>\n\n<p>(Oh, and sorry for <a href=\"http://www.urbandictionary.com/define.php?term=wall%20of%20text\">WoT</a>)</p>\n    ","a":"\n<blockquote>\n  <p>As we all known, hibernate tries to be as non-invasive and as transparent as possible</p>\n</blockquote>\n\n<p>I would say the initial assumption is wrong. Transaparent persistence is a myth, since application always should take care of entity lifecycle and of size of object graph being loaded.</p>\n\n<p>Note that Hibernate can't read thoughts, therefore if you know that you need a particular set of dependencies for a particular operation, you need to express your intentions to Hibernate somehow.</p>\n\n<p>From this point of view, solutions that express these intentions explicitly (namely, 2, 4 and 7) look reasonable and don't suffer from the lack of transparency.</p>\n    "},{"t":"Init method in Spring Controller (annotation version)","l":"http://stackoverflow.com/questions/5419695/init-method-in-spring-controller-annotation-version","q":"\n\n<p>I'm converting a controller to the newer annotation version. In the old version I used to specify the init method in springmvc-servlet.xml using: </p>\n\n<pre><code>&lt;beans&gt;\n    &lt;bean id=\"myBean\" class=\"...\" init-method=\"init\"/&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>How can I specify the init method using the annotation version?</p>\n    ","a":"\n<p>You can use</p>\n\n<pre><code>@PostConstruct\npublic void init() {\n   // ...\n}\n</code></pre>\n    "},{"t":"How do I tell Spring Boot which main class to use for the executable jar?","l":"http://stackoverflow.com/questions/23217002/how-do-i-tell-spring-boot-which-main-class-to-use-for-the-executable-jar","q":"\n\n<pre><code>Execution default of goal \norg.springframework.boot:spring-boot-maven-plugin:1.0.1.RELEASE:repackage \nfailed: \nUnable to find a single main class from the following candidates\n</code></pre>\n\n<p>My project has more than one class with a <code>main</code> method. How do I tell the Spring Boot Maven plugin which of the classes it should use as the main class?</p>\n    ","a":"\n<p>Add your start class in your pom:</p>\n\n<pre><code>&lt;properties&gt;\n    &lt;!-- The main class to start by executing java -jar --&gt;\n    &lt;start-class&gt;com.mycorp.starter.HelloWorldApplication&lt;/start-class&gt;\n&lt;/properties&gt;\n</code></pre>\n    "},{"t":"Spring 3 RequestMapping: Get path value","l":"http://stackoverflow.com/questions/3686808/spring-3-requestmapping-get-path-value","q":"\n\n<p>Is there a way to get the complete path value after the <code>requestMapping</code> <code>@PathVariable</code> values have been parsed?</p>\n\n<p>That is:\n<code>/{id}/{restOfTheUrl}</code> should be able to parse <code>/1/dir1/dir2/file.html id=1</code> and <code>restOfTheUrl=/dir1/dir2/file.html</code></p>\n\n<p>Any ideas would be appreciated.</p>\n    ","a":"\n<p>Non-matched part of the URL is exposed as a request attribute named <code>HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE</code>:</p>\n\n<pre><code>@RequestMapping(\"/{id}/**\")\npublic void foo(@PathVariable(\"id\") int id, HttpServletRequest request) {\n    String restOfTheUrl = (String) request.getAttribute(\n        HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n    ...\n}\n</code></pre>\n    "},{"t":"Unit testing with Spring Security","l":"http://stackoverflow.com/questions/360520/unit-testing-with-spring-security","q":"\n\n<p>My company has been evaluating Spring MVC to determine if we should use it in one of our next projects. So far I love what I've seen, and right now I'm taking a look at the Spring Security module to determine if it's something we can/should use. </p>\n\n<p>Our security requirements are pretty basic; a user just needs to be able to provide a username and password to be able to access certain parts of the site (such as to get info about their account); and there are a handful of pages on the site (FAQs, Support, etc) where an anonymous user should be given access.</p>\n\n<p>In the prototype I've been creating, I have been storing a \"LoginCredentials\" object (which just contains username and password) in Session for an authenticated user; some of the controllers check to see if this object is in session to get a reference to the logged-in username, for example. I'm looking to replace this home-grown logic with Spring Security instead, which would have the nice benefit of removing any sort of \"how do we track logged in users?\" and \"how do we authenticate users?\" from my controller/business code. </p>\n\n<p>It seems like Spring Security provides a (per-thread) \"context\" object to be able to access the username/principal info from anywhere in your app...</p>\n\n<pre><code>Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n</code></pre>\n\n<p>... which seems very un-Spring like as this object is a (global) singleton, in a way.</p>\n\n<p>My question is this: if this is the standard way to access information about the authenticated user in Spring Security, what is the accepted way to inject an Authentication object into the SecurityContext so that it is available for my unit tests when the unit tests require an authenticated user?</p>\n\n<p>Do I need to wire this up in the initialization method of each test case?</p>\n\n<pre><code>protected void setUp() throws Exception {\n    ...\n    SecurityContextHolder.getContext().setAuthentication(\n        new UsernamePasswordAuthenticationToken(testUser.getLogin(), testUser.getPassword()));\n    ...\n}\n</code></pre>\n\n<p>This seems overly verbose. Is there an easier way? </p>\n\n<p>The <code>SecurityContextHolder</code> object itself seems very un-Spring-like...</p>\n    ","a":"\n<p>The problem is that Spring Security does not make the Authentication object available as a bean in the container, so there is no way to easily inject or autowire it out of the box.</p>\n\n<p>Before we started to use Spring Security, we would create a session-scoped bean in the container to store the Principal, inject this into an \"AuthenticationService\" (singleton) and then inject this bean into other services that needed knowledge of the current Principal.</p>\n\n<p>If you are implementing your own authentication service, you could basically do the same thing: create a session-scoped bean with a \"principal\" property, inject this into your authentication service, have the auth service set the property on successful auth, and then make the auth service available to other beans as you need it.</p>\n\n<p>I wouldn't feel too bad about using SecurityContextHolder. though.  I know that it's a static / Singleton and that Spring discourages using such things but their implementation takes care to behave appropriately depending on the environment: session-scoped in a Servlet container, thread-scoped in a JUnit test, etc.  The real limiting factor of a Singleton is when it provides an implementation that is inflexible to different environments.</p>\n    "},{"t":"Converting spring XML file to spring @Configuration class","l":"http://stackoverflow.com/questions/24014919/converting-spring-xml-file-to-spring-configuration-class","q":"\n\n<p>Following the question <a href=\"http://stackoverflow.com/q/19414734/2083523\">Understanding Spring @Autowired usage</a> I wanted to create a complete knowledge base for the other option of spring wiring, the <code>@Configuration</code> class.</p>\n\n<p>Let's assume I have a spring XML file that looks like this:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\"&gt;\n\n  &lt;import resource=\"another-application-context.xml\"/&gt;\n\n  &lt;bean id=\"someBean\" class=\"stack.overflow.spring.configuration.SomeClassImpl\"&gt;\n    &lt;constructor-arg value=\"${some.interesting.property}\" /&gt;\n  &lt;/bean&gt;\n\n  &lt;bean id=\"anotherBean\" class=\"stack.overflow.spring.configuration.AnotherClassImpl\"&gt;\n    &lt;constructor-arg ref=\"someBean\"/&gt;\n    &lt;constructor-arg ref=\"beanFromSomewhereElse\"/&gt;\n  &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>How can I use <code>@Configuration</code> instead? Does it have any affect on the code itself?</p>\n    ","a":"\n<p>(Disclaimer - this answer is based on my <a href=\"http://avietzioni.blogspot.co.il/2014/05/so-long-spring-xmls-configuration-class.html\">blog post</a>)</p>\n\n<h2>Migrating XML to <code>@Configuration</code></h2>\n\n<p>It is possible to migrate the xml to a <code>@Configuration</code> in a few steps:</p>\n\n<ol>\n<li><p>Create a <code>@Configuration</code> annotated class:</p>\n\n<pre><code>@Configuration\npublic class MyApplicationContext {\n\n}\n</code></pre></li>\n<li><p>For each <code>&lt;bean&gt;</code> tag create a method annotated with <code>@Bean</code>:</p>\n\n<pre><code>@Configuration\npublic class MyApplicationContext {\n\n  @Bean(name = \"someBean\")\n  public SomeClass getSomeClass() {\n    return new SomeClassImpl(someInterestingProperty); // We still need to inject someInterestingProperty\n  }\n\n  @Bean(name = \"anotherBean\")\n  public AnotherClass getAnotherClass() {\n    return new AnotherClassImpl(getSomeClass(), beanFromSomewhereElse); // We still need to inject beanFromSomewhereElse\n  }\n}\n</code></pre></li>\n<li><p>In order to import <code>beanFromSomewhereElse</code> we need to import it's definition. It can be defined in an XML and the we'll use <code>@ImportResource</code>:</p>\n\n<pre><code>@ImportResource(\"another-application-context.xml\")\n@Configuration\npublic class MyApplicationContext {\n  ...  \n}\n</code></pre>\n\n<p>If the bean is defined in another <code>@Configuration</code> class we can use the <code>@Import</code> annotation:</p>\n\n<pre><code>@Import(OtherConfiguration.class)\n@Configuration\npublic class MyApplicationContext {\n  ...\n}\n</code></pre></li>\n<li><p>After we imported other XMLs or <code>@Configuration</code> classes, we can use the beans they declare in our context by declaring a private member to the <code>@Configuration</code> class as follows:</p>\n\n<pre><code>@Autowired\n@Qualifier(value = \"beanFromSomewhereElse\")\nprivate final StrangeBean beanFromSomewhereElse;\n</code></pre>\n\n<p>Or use it directly as parameter in the method which defines the bean that depends on this <code>beanFromSomewhereElse</code> using <code>@Qualifier</code> as follows:</p>\n\n<pre><code>@Bean(name = \"anotherBean\")\npublic AnotherClass getAnotherClass(@Qualifier (value = \"beanFromSomewhereElse\") final StrangeBean beanFromSomewhereElse) {\n  return new AnotherClassImpl(getSomeClass(), beanFromSomewhereElse);\n}\n</code></pre></li>\n<li><p>Importing properties is very similar to importing bean from another xml or <code>@Configuration</code> class. Instead of using <code>@Qualifier</code> we'll use <code>@Value</code> with properties as follows:</p>\n\n<pre><code>@Autowired\n@Value(\"${some.interesting.property}\")\nprivate final String someInterestingProperty;\n</code></pre>\n\n<p>This can be used with <strong>SpEL</strong> expressions as well.</p></li>\n<li><p>In order to allow spring to treat such classes as beans containers we need to mark this in our main xml by putting this tag in the context: </p>\n\n<pre><code>&lt;context:annotation-config/&gt;\n</code></pre>\n\n<p>You can now import <code>@Configuration</code> classes exactly the same as you would create a simple bean:</p>\n\n<pre><code>&lt;bean class=\"some.package.MyApplicationContext\"/&gt;\n</code></pre>\n\n<p>There are ways to avoid spring XMLs altogether but they are not in the scope of this answer. You can find out one of these options in my <a href=\"http://avietzioni.blogspot.co.il/2014/05/so-long-spring-xmls-configuration-class.html\">blog post</a> on which I'm basing my answer.</p></li>\n</ol>\n\n<hr>\n\n<h2>The advantages and disadvantages of using this method</h2>\n\n<p>Basically I find this method of declaring beans much more comfortable than using XMLs due to a few advantages I see:</p>\n\n<ol>\n<li><strong>Typos</strong> - <code>@Configuration</code> classes are compiled and typos just won't allow compilations</li>\n<li><strong>Fail fast (compile time)</strong> - If you forget to inject a bean you'll fail on compile time and not on run-time as with XMLs</li>\n<li><strong>Easier to navigate in IDE</strong> - between constructors of beans to understand the dependency tree.</li>\n<li><strong>Possible to easily debug configuration startup</strong></li>\n</ol>\n\n<p>The disadvantages are not many as I see them but there are a few which I could think of:</p>\n\n<ol>\n<li><strong>Abuse</strong> - Code is easier to abuse than XMLs</li>\n<li>With XMLs you can defined dependencies based on classes that are not available during compile time but are provided during run-time. With <code>@Configuration</code> classes you must have the classes available at compile time. Usually that's not an issue, but there are cases it may be.</li>\n</ol>\n\n<p>Bottom line: It is perfectly fine to combine XMLs, <code>@Configuration</code> and <a href=\"http://stackoverflow.com/q/19414734/2083523\">annotations</a> in your application context. Spring doesn't care about the method a bean was declared with.</p>\n    "},{"t":"Why Spring Framework? [closed]","l":"http://stackoverflow.com/questions/1610597/why-spring-framework","q":"\n\n<p>I hear nowadays a lot about the Spring Framework. Why is there so much buzz around the Spring Framework in the industry?</p>\n    ","a":"\n<p>I already gave a partial answer in <a href=\"http://stackoverflow.com/questions/1549472/what-are-upcoming-trends-in-software-industry-and-its-impact-for-java-developer/1549740#1549740\">http://stackoverflow.com/questions/1549472/what-are-upcoming-trends-in-software-industry-and-its-impact-for-java-developer/1549740#1549740</a> but I'll add some links in this answer. Actually, I won't cover or discuss the technical qualities of Spring as they aren't new and don't explain the buzz in my opinion. Instead, consider the following events and acquisitions:</p>\n\n<ul>\n<li>November 11, 2008: <a href=\"http://www.springsource.com/newsevents/g2one\" rel=\"nofollow noreferrer\">SpringSource Acquires G2One Inc</a>.</li>\n<li>April 28, 2009: <a href=\"http://blog.springsource.com/2009/04/28/springsource-tc-server-the-logical-next-step/\" rel=\"nofollow noreferrer\">SpringSource tc Server – The logical next step</a></li>\n<li>May 4, 2009: <a href=\"http://blog.springsource.com/2009/05/04/hyperic/\" rel=\"nofollow noreferrer\">SpringSource Plus Hyperic Unifies Application Lifecycle From Developer to Data Center</a></li>\n<li>Augustus 11, 2009: <a href=\"http://www.infoq.com/news/2009/08/vmware-springsource\" rel=\"nofollow noreferrer\">VMware Acquires SpringSource for $420 Million - Industry Reactions (Updated)</a></li>\n<li>Augustus 19, 2009: <a href=\"http://www.infoq.com/news/2009/08/cloudfoundry\" rel=\"nofollow noreferrer\">SpringSource Cloud Foundry is Launched</a></li>\n</ul>\n\n<p>As you can see, there have been lots of changes in the SpringSource sphere during the past year, with some pretty big moves during this summer. Don't you see the big picture now? Well, look at the resulting stack: with Java, Groovy, Grails as languages, Spring as container, tc Server as underlying application server, Hyperic for health and monitoring, VMware for virtualization, CloudFoundry as management and provisioning system, VMware/SpringSource has <strong>a complete stack for elastic cloud</strong>. And by complete, I mean really complete as this stack covers everything - except the JVM - to put Java on the Cloud: the software, the platform and the infrastructure i.e. all the different flavors of cloud computing.</p>\n\n<p>In other words, while others are still preparing themselves for it, VMware and SpringSource are already ready for the SaaS<sup>1</sup>/PaaS<sup>2</sup>/IaaS<sup>3</sup> wave. </p>\n\n<p>This is exciting, this is where innovation goes, this creates (or at least feeds) the trend, this puts a lot of pressure on Java, the Application Server market, Java EE,... and this explains IMO the buzz around VMware/SpringSource. More than the upcoming arrival of Spring 3.0 :).</p>\n\n<hr>\n\n<p><sup>1</sup> Software as a Service<br>\n<sup>2</sup> Platform as a Service<br>\n<sup>3</sup> Infrastructure as a Service  </p>\n    "},{"t":"No mapping found for HTTP request with URI [/WEB-INF/pages/apiForm.jsp]","l":"http://stackoverflow.com/questions/1266303/no-mapping-found-for-http-request-with-uri-web-inf-pages-apiform-jsp","q":"\n\n<p>My handler forwards to internalresourceview 'apiForm' but then i get error 404 RequestURI=/WEB-INF/pages/apiForm.jsp. I'm sure apiForm.jsp located in /WEB-INF/pages/ </p>\n\n<blockquote>\n  <p><strong>13:45:02,034</strong> DEBUG [org.springframework.web.servlet.view.JstlView] -\n  Forwarding to resource [/WEB-INF/pages/apiForm.jsp] in InternalResourceView 'apiForm'<br>\n   <strong>13:45:02,035</strong> DEBUG [org.springframework.web.servlet.DispatcherServlet] -\n  DispatcherServlet with name 'testapp2' determining Last-Modified value for [/WEB-INF/pages/apiForm.jsp]<br>\n  <strong>13:45:02,038</strong> DEBUG [org.springframework.web.servlet.DispatcherServlet] - No handler found\n  in getLastModified<br>\n  <strong>13:45:02,038</strong> DEBUG [org.springframework.web.servlet.DispatcherServlet] -\n  DispatcherServlet with name 'testapp2' processing request for\n  [/WEB-INF/pages/apiForm.jsp]<br>\n  <strong>13:45:02,038</strong> WARN  [org.springframework.web.servlet.PageNotFound] - No mapping found for\n  HTTP request with URI [/WEB-INF/pages/apiForm.jsp] in DispatcherServlet with name 'testapp2'<br>\n  <strong>13:45:02,045</strong> DEBUG [org.springframework.web.servlet.DispatcherServlet] - Successfully completed request<br>\n  <strong>13:45:02,048</strong> DEBUG [org.springframework.web.servlet.DispatcherServlet] - Successfully completed request  </p>\n</blockquote>\n\n<p>this is how my dispatcher.xml look like..</p>\n\n<pre><code>&lt;bean id=\"viewResolver\"\n    class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"&gt;\n    &lt;property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/&gt;\n    &lt;property name=\"prefix\" value=\"/WEB-INF/pages/\"/&gt;\n    &lt;property name=\"suffix\" value=\".jsp\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n    ","a":"\n<p>Looks like DispatcherServlet is trying to process the request for apiForm.jsp, which suggests to me that your web.xml servlet-mapping is directing requests for that space to DispatcherServlet.</p>\n\n<p>You might have something like this?</p>\n\n<pre><code>&lt;servlet-mapping&gt;\n  &lt;servlet&gt;dispatcher&lt;/servlet&gt;\n  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre>\n\n<p>Try calling your controllers with a different extension (.do for example) and update the servlet-mapping to suit</p>\n\n<pre><code> &lt;servlet-mapping&gt;\n  &lt;servlet&gt;dispatcher&lt;/servlet&gt;\n  &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre>\n    "},{"t":"Serializing enums with Jackson","l":"http://stackoverflow.com/questions/7766791/serializing-enums-with-jackson","q":"\n\n<p>I have an Enum desrcibed below:</p>\n\n<pre><code>public enum OrderType {\n\n  UNKNOWN(0, \"Undefined\"),\n  TYPEA(1, \"Type A\"),\n  TYPEB(2, \"Type B\"),\n  TYPEC(3, \"Type C\");\n\n  private Integer id;\n  private String name;\n\n  private WorkOrderType(Integer id, String name) {\n    this.id = id;\n    this.name = name;\n  }\n\n  //Setters, getters....\n}\n</code></pre>\n\n<p>I return enum array with my controller ( <code>new OrderType[] {UNKNOWN,TYPEA,TYPEB,TYPEC};</code>), and Spring serializes it into the following json string:</p>\n\n<pre><code>[\"UNKNOWN\", \"TYPEA\", \"TYPEB\", \"TYPEC\"] \n</code></pre>\n\n<p>What is the best approach to force Jackson to serialize enums just like POJOs? E.g.:</p>\n\n<pre><code>[\n  {\"id\": 1, \"name\": \"Undefined\"},\n  {\"id\": 2, \"name\": \"Type A\"},\n  {\"id\": 3, \"name\": \"Type B\"},\n  {\"id\": 4, \"name\": \"Type C\"}\n]\n</code></pre>\n\n<p>I played with different annotations but couldn't manage to get such result.</p>\n    ","a":"\n<p>Finally I found solution myself.</p>\n\n<p>I had to annotate enum with <code>@JsonSerialize(using = OrderTypeSerializer.class)</code> and impelement  custom serializer:</p>\n\n<pre><code>public class OrderTypeSerializer extends JsonSerializer&lt;OrderType&gt; {\n\n  @Override\n  public void serialize(OrderType value, JsonGenerator generator,\n            SerializerProvider provider) throws IOException,\n            JsonProcessingException {\n\n    generator.writeStartObject();\n    generator.writeFieldName(\"id\");\n    generator.writeNumber(value.getId());\n    generator.writeFieldName(\"name\");\n    generator.writeString(value.getName());\n    generator.writeEndObject();\n  }\n}\n</code></pre>\n    "},{"t":"What's the point of Spring MVC's DelegatingFilterProxy?","l":"http://stackoverflow.com/questions/6725234/whats-the-point-of-spring-mvcs-delegatingfilterproxy","q":"\n\n<p>I see this in my Spring MVC app's <code>web.xml</code>:</p>\n\n<pre><code>&lt;filter&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n&lt;/filter&gt;\n</code></pre>\n\n<p>I'm trying to figure out why it's there and whether it's actually needed.</p>\n\n<p>I found <a href=\"http://static.springsource.org/spring-security/site/docs/3.0.x/reference/security-filter-chain.html\">this explanation in the Spring docs</a> but it doesn't help me make sense of it:</p>\n\n<p>It seems to suggest that this component is the \"glue\" between the servlets defined in <code>web.xml</code> and the components defined in the Spring <code>applicationContext.xml</code>.</p>\n\n<blockquote>\n  <p>7.1 DelegatingFilterProxy</p>\n  \n  <p>When using servlet filters, you obviously need to declare them in your <code>web.xml</code>, or they will be ignored by the servlet container. In Spring Security, the filter classes are also Spring beans defined in the application context and thus able to take advantage of Spring's rich dependency-injection facilities and lifecycle interfaces. Spring's <code>DelegatingFilterProxy</code> provides the link between <code>web.xml</code> and the application context.</p>\n  \n  <p>When using DelegatingFilterProxy, you will see something like this in the <code>web.xml</code> file:</p>\n\n<pre><code>&lt;filter&gt;\n  &lt;filter-name&gt;myFilter&lt;/filter-name&gt;\n  &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;filter-mapping&gt;\n  &lt;filter-name&gt;myFilter&lt;/filter-name&gt;\n  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n</code></pre>\n  \n  <p>Notice that the filter is actually a <code>DelegatingFilterProxy</code>, and not the class that will actually implement the logic of the filter. What <code>DelegatingFilterProxy</code> does is delegate the Filter's methods through to a bean which is obtained from the Spring application context. This enables the bean to benefit from the Spring web application context lifecycle support and configuration flexibility. The bean must implement <code>javax.servlet.Filter</code> and it must have the same name as that in the filter-name element. Read the <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/filter/DelegatingFilterProxy.html\">Javadoc for DelegatingFilterProxy</a> for more information</p>\n</blockquote>\n\n<p>So, if I take this out of my <code>web.xml</code>, what will happen? My servlets won't be able to communicate with the Spring container?**</p>\n    ","a":"\n<h1>What are Servlet Filters?</h1>\n\n<p><a href=\"http://www.oracle.com/technetwork/java/filters-137243.html\">Servlet filters</a> are, in general, a Java WebApp concept. You can have servlet filters in any webapp, whether or not you use Spring framework in your application. </p>\n\n<p>These filters can intercept requests before they reach the target servlet. You can implement common functionality, like authorization, in servlet filters. Once implemented, you can configure the filter in your web.xml to be applied to a specific servlet, specific request url patterns or all url patterns. </p>\n\n<h1>Where servlet filters are used?</h1>\n\n<p>Modern web-apps can have dozens of such filters. Things like authorization, caching, ORM session management, and dependency injection are often implemented with the aid of servlet filter. All of these filters need to be registered in <code>web.xml</code>.</p>\n\n<h1>Instantiating Servlet Filters - without Spring Framework</h1>\n\n<p>Your servlet container creates instances of Filters declared in <code>web.xml</code> and calls them at appropriate times (i.e., when servicing servlet requests). Now if you are like most of the Dependency Injection (DI) fans, you would likely say that creation of instances is what my DI framework (Spring) does better. Can't I get my servlet filters created with Spring so they are amenable to all DI goodness?</p>\n\n<h1><code>DelegatingFilterProxy</code>, so that Spring creates your filter instances</h1>\n\n<p>This is where <code>DelegatingFilterProxy</code> steps in. <code>DelegatingFilterProxy</code> is an impelmentation of the <code>javax.servlet.Filter</code> interface provided by Spring Framework. Once you configure <code>DelegatingFilterProxy</code> in web.xml, you can declare the actual <strong>beans</strong> that do the filtering in your spring configuration. This way, Spring creates the instances of beans that do the actual filtering, and you can use DI to configure these beans.</p>\n\n<p>Note that you need only a single <code>DelegatingFilterProxy</code> declaration in <code>web.xml</code> but you can have several filtering <code>bean</code>s chained together in your application context.</p>\n    "},{"t":"Auto-wiring a List using util schema gives NoSuchBeanDefinitionException","l":"http://stackoverflow.com/questions/1363310/auto-wiring-a-list-using-util-schema-gives-nosuchbeandefinitionexception","q":"\n\n<p>I have a bean that i want to inject with a named list using Spring util namespace  <code>&lt;util:list id=\"myList\"&gt;</code> but Spring is looking for a collection of beans of type String instead. My broken test is:</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration\npublic class ListInjectionTest {\n\n    @Autowired @Qualifier(\"myList\") private List&lt;String&gt; stringList;\n\n    @Test public void testNotNull() {\n        TestCase.assertNotNull(\"stringList not null\", stringList);\n    }\n}\n</code></pre>\n\n<p>My context is:</p>\n\n<pre><code>&lt;beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xmlns:util=\"http://www.springframework.org/schema/util\"\n   xmlns=\"http://www.springframework.org/schema/beans\"\n   xmlns:context=\"http://www.springframework.org/schema/context\"\n   xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\"&gt;\n\n   &lt;util:list id=\"myList\"&gt;\n       &lt;value&gt;foo&lt;/value&gt;\n       &lt;value&gt;bar&lt;/value&gt;\n   &lt;/util:list&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>But I get </p>\n\n<pre><code>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [java.lang.String] found for dependency [collection of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=myList)}\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:726)\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:571)\n    at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:412)\n</code></pre>\n\n<p>Which puzzles me rather as I figured this would be the way it was expected to work.</p>\n    ","a":"\n<p>This is due to a rather obscure part of @Autowired's behaviour, specified in <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-autowired-annotation\" rel=\"nofollow noreferrer\">3.11.2. @Autowired</a>:</p>\n\n<blockquote>\n  <p>It is also possible to provide all\n  beans of a particular type from the\n  <code>ApplicationContext</code> by adding the\n  annotation to a field or method that\n  expects an array of that type...</p>\n  \n  <p>The same applies for typed collections...</p>\n</blockquote>\n\n<p>In other words, by saying <code>@Autowired @Qualifier(\"myList\") List&lt;String&gt;</code>, you're actually asking for \"give me the list of all beans of type <code>java.lang.String</code> that have the qualifier \"myList\". </p>\n\n<p>The solution is mentioned in <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-autowired-annotation-qualifiers\" rel=\"nofollow noreferrer\">3.11.3. Fine-tuning annotation-based autowiring with qualifiers</a>:</p>\n\n<blockquote>\n  <p>If you intend to express\n  annotation-driven injection by name,\n  do not primarily use <code>@Autowired</code> - even\n  if is technically capable of referring\n  to a bean name through <code>@Qualifier</code>\n  values. Instead, prefer the JSR-250\n  <code>@Resource</code>  annotation which is\n  semantically defined to identify a\n  specific target component by its\n  unique name, with the declared type\n  being irrelevant for the matching\n  process.</p>\n  \n  <p><b>As a specific consequence of this\n  semantic difference, beans which are\n  themselves defined as a collection or\n  map type cannot be injected via\n  <code>@Autowired</code> since type matching is not\n  properly applicable to them.</b> Use\n  <code>@Resource</code> for such beans, referring to\n  the specific collection/map bean by\n  unique name.</p>\n</blockquote>\n\n<p>So use this in your test, and it works fine:</p>\n\n<pre><code>@Resource(name=\"myList\") private List&lt;String&gt; stringList;\n</code></pre>\n    "},{"t":"How to load lazy fetched items from Hibernate/JPA in my controller","l":"http://stackoverflow.com/questions/15359306/how-to-load-lazy-fetched-items-from-hibernate-jpa-in-my-controller","q":"\n\n<p>I have a Person class:</p>\n\n<pre><code>@Entity\npublic class Person {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    private List&lt;Role&gt; roles;\n    // etc\n}\n</code></pre>\n\n<p>With a many-to-many relation that is lazy.</p>\n\n<p>In my controller I have</p>\n\n<pre><code>@Controller\n@RequestMapping(\"/person\")\npublic class PersonController {\n    @Autowired\n    PersonRepository personRepository;\n\n    @RequestMapping(\"/get\")\n    public @ResponseBody Person getPerson() {\n        Person person = personRepository.findOne(1L);\n        return person;\n    }\n}\n</code></pre>\n\n<p>And the PersonRepository is just this code, written according to <a href=\"http://blog.springsource.org/2011/02/10/getting-started-with-spring-data-jpa/\">this guide</a></p>\n\n<pre><code>public interface PersonRepository extends JpaRepository&lt;Person, Long&gt; {\n}\n</code></pre>\n\n<p>However, in this controller <strong>I actually need the lazy-data. How can I trigger its loading?</strong></p>\n\n<p>Trying to access it will fail with </p>\n\n<blockquote>\n  <p>failed to lazily initialize a collection of role:\n  no.dusken.momus.model.Person.roles, could not initialize proxy - no\n  Session</p>\n</blockquote>\n\n<p>or other exceptions depending on what I try.</p>\n\n<p>I've tried adding @Tranactional, to no use. Is it something I need to include/setup for it to work?</p>\n\n<p>My <a href=\"https://gist.github.com/Matsemann/958b29aef642fa1c2f95\">xml-description</a>, in case needed.</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>You will have to make an explicit call on the lazy collection in order to initialize it (common practice is to call <code>.size()</code> for this purpose). In Hibernate there is a dedicated method for this (<code>Hibernate.initialize()</code>), but JPA has no equivalent of that. Of course you will have to make sure that the invocation is done, when the session is still available, so annotate your controller method with <code>@Transactional</code>. An alternative is to create an intermediate Service layer between the Controller and the Repository that could expose methods which initialize lazy collections.</p>\n\n<h3>Update:</h3>\n\n<p>Please note that the above solution is easy, but results in two distinct queries to the database (one for the user, another one for its roles). If you want to achieve better performace add the following method to your Spring Data JPA repository interface:</p>\n\n<pre><code>public interface PersonRepository extends JpaRepository&lt;Person, Long&gt; {\n\n    @Query(\"SELECT p FROM Person p JOIN FETCH p.roles WHERE p.id = (:id)\")\n    public Person findByIdAndFetchRolesEagerly(@Param(\"id\") Long id);\n\n}\n</code></pre>\n\n<p>This method will use JPQL's <a href=\"http://docs.oracle.com/html/E24396_01/ejb3_langref.html#ejb3_langref_fetch_joins\">fetch join</a> clause to eagerly load the roles association in a single round-trip to the database, and will therefore mitigate the performance penalty incurred by the two distinct queries in the above solution. </p>\n    "},{"t":"How to inject dependencies into a self-instantiated object in Spring?","l":"http://stackoverflow.com/questions/3813588/how-to-inject-dependencies-into-a-self-instantiated-object-in-spring","q":"\n\n<p>Let's say we have a class:</p>\n\n<pre><code>public class MyClass {\n    @Autowired private AnotherBean anotherBean;\n}\n</code></pre>\n\n<p>Then we created an object of this class (or some other framework have created the instance of this class).</p>\n\n<pre><code>MyClass obj = new MyClass();\n</code></pre>\n\n<p>Is it possible to still inject the dependencies? Something like:</p>\n\n<pre><code>applicationContext.injectDependencies(obj);\n</code></pre>\n\n<p>(I think Google Guice has something like this)</p>\n    ","a":"\n<p>You can do this using the <code>autowireBean()</code> method of <code>AutowireCapableBeanFactory</code>. You pass it an arbitrary object, and Spring will treat it like something it created itself, and will apply the various autowiring bits and pieces.</p>\n\n<p>To get hold of the <code>AutowireCapableBeanFactory</code>, just autowire that:</p>\n\n<pre><code>private @Autowired AutowireCapableBeanFactory beanFactory;\n\npublic void doStuff() {\n   MyBean obj = new MyBean();\n   beanFactory.autowireBean(obj);\n   // obj will now have its dependencies autowired.\n}\n</code></pre>\n    "},{"t":"Spring Data-JPA versus JPA: Whats the difference?","l":"http://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference","q":"\n\n<p>I am bit confused about difference between Spring Data-JPA and JPA. I know about JPA that it is a specification for persisting the Java Objects to relational database using popular ORM technology i.e. in other words JPA provides interfaces and other ORM technologies implements those interfaces known as JPA provider eg Hibernate.</p>\n\n<p>Now what exactly is Spring Data JPA. Is Spring Data JPA has added some more functionality (Interfaces) over JPA and still it is specification only or it is also a JPA provider ?</p>\n\n<p>I saw Spring Data JPA works around repositories (DAO layer: if I am not wrong). So I mean how it is different using 'Spring Data JPA + Hibernate' or only using 'Hibernate' directly ?</p>\n\n<p>I might be totally wrong in asking question but I appreciate your help in resolving my confusion. Kindly also post any useful links of documentation that helps.\nThanks in advance....</p>\n    ","a":"\n<blockquote>\n  <p>I saw Spring JPA works around repositories (DAO layer: if I am not wrong). So I mean how it is different using 'Spring JPA + Hibernate' or only using 'Hibernate' directly ?</p>\n</blockquote>\n\n<p>As you said, <strong>JPA</strong> is an <em>specification</em> while <strong>Hibernate</strong> is a particular implementation of that specification (these implementations are usually referred to as <em>Providers</em>). By using Hibernate you tie yourself to that provider restricting your freedom to switch to another option when required (for example, you want to use EclipseLink or ObjectDB instead because Hibernate has a bug that halts your development process).</p>\n\n<p>Quoting <strong><a href=\"http://static.springsource.org/spring-data/jpa/docs/1.0.0.M1/reference/html/\">Spring Data JPA</a>'s</strong> documentation:</p>\n\n<blockquote>\n  <p>Implementing a data access layer of an application has been cumbersome for quite a while. Too much boilerplate code had to be written. Domain classes were anemic and haven't been designed in a real object oriented or domain driven manner.</p>\n  \n  <p>Using both of these technologies makes developers life a lot easier regarding rich domain model's persistence. Nevertheless the amount of boilerplate code to implement repositories especially is still quite high. So the goal of the repository abstraction of Spring Data is to reduce the effort to implement data access layers for various persistence stores significantly.</p>\n</blockquote>\n\n<p>To sum it up, it is on top of JPA adding another layer of abstraction, kind of defining a \"standarized\" design for the support of your <em>Persistence Layer</em> in a Spring context. Those defined interfaces (known to Spring) provide the services that the framework handles using JPA to serve the results. You define a repository in a way Spring can scan the project and find it</p>\n\n<pre><code>&lt;repositories base-package=\"com.acme.repositories\" /&gt;\n</code></pre>\n\n<p>Allowing you to use it in the context of a container or outside of it.</p>\n\n<blockquote>\n  <p>Now what exactly is Spring JPA. Is Spring JPA has added some more functionality (Interfaces) over JPA and still it is specification only or it is also a JPA provider ?</p>\n</blockquote>\n\n<p>Long story short, then, Spring Data JPA provides a definition to implement repositories that is supported under the hood by referencing the JPA specification, using the provider you define.</p>\n    "},{"t":"Spring annotations @Repository and @Service","l":"http://stackoverflow.com/questions/6256331/spring-annotations-repository-and-service","q":"\n\n<p>What are the advantages of using <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Repository.html\">@Repository</a> and <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html\">@Service</a>?</p>\n\n<p>Don't tell me about component scanning etc., I am looking forward to something extra benefits or features that are there if at all.</p>\n\n<p>what happens if I don't use it? what is that I would be missing?</p>\n    ","a":"\n<p>Advantage of @Repository stereotype in Spring </p>\n\n<ol>\n<li><p>@Repository is also a @Component and thus you can use component scanning to automatically detect your @Repository annotated beans and register them in the ApplicationContext. </p></li>\n<li><p>Will get automatic exception translation not mere logging.</p></li>\n<li><p>The exceptions for all persistence exceptions are converted to the consistent Spring DataAccessException hierarchy so that you only need to handle 1 kind of exception, even you use multiple strategies (often you mix hibernate/jpa with plain jdbc)</p></li>\n<li><p>Needless configurable. </p></li>\n</ol>\n    "},{"t":"Binding a list in @RequestParam","l":"http://stackoverflow.com/questions/4596351/binding-a-list-in-requestparam","q":"\n\n<p>I'm sending some parameters from a form in this way:</p>\n\n<pre><code>myparam[0]     : 'myValue1'\nmyparam[1]     : 'myValue2'\nmyparam[2]     : 'myValue3'\notherParam     : 'otherValue'\nanotherParam   : 'anotherValue' \n...\n</code></pre>\n\n<p>I know I can get all the params in the controller method by adding a parameter like</p>\n\n<pre><code>public String controllerMethod(@RequestParam Map&lt;String, String&gt; params){\n    ....\n}\n</code></pre>\n\n<p>I want to bind the parameters myParam[] (not the other ones) to a list or array (anything that keeps the index order), so I've tried with a syntax like:</p>\n\n<pre><code>public String controllerMethod(@RequestParam(value=\"myParam\") List&lt;String&gt; myParams){\n    ....\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>public String controllerMethod(@RequestParam(value=\"myParam\") String[] myParams){\n    ....\n}\n</code></pre>\n\n<p>but none of them are binding the myParams. Even when I add a value to the map it is not able to bind the params:</p>\n\n<pre><code>public String controllerMethod(@RequestParam(value=\"myParam\") Map&lt;String, String&gt; params){\n    ....\n}\n</code></pre>\n\n<p>Is there any syntax to bind some params to a list or array without having to create an object as @ModelAttribute with a list attribute in it?</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>Arrays in <code>@RequestParam</code> are used for binding several parameters of the same name:</p>\n\n<pre><code>myparam=myValue1&amp;myparam=myValue2&amp;myparam=myValue3\n</code></pre>\n\n<p>If you need to bind <code>@ModelAttribute</code>-style indexed parameters, I guess you need <code>@ModelAttribute</code> anyway.</p>\n    "},{"t":"How does Spring Data JPA differ from Hibernate for large projects?","l":"http://stackoverflow.com/questions/12790853/how-does-spring-data-jpa-differ-from-hibernate-for-large-projects","q":"\n\n<p>I am having a hard time deciding if I should stick with Hibernate for a new project, or get my feet wet with JPA and the new Spring Data implementation.</p>\n\n<p>Is the Spring Data framework intended for large projects or small projects with modest query requirements? </p>\n\n<p>While I certainly see the advantage in code reduction by using the <code>@Query</code> annotation, what do you do for dynamic queries? What about when you want to implement a save() method that's quite complex? </p>\n\n<p>The documentation says to make a Custom interface and implementation that your main repository implements, but what if you need to access any super methods on the crud repository itself? The crud repository implements the custom one - not the other way around. It seems like an odd design.</p>\n\n<p>I am very uncertain whether this framework will meet the challenges of complex and large applications. I've never ran into many problems with Hibernate, and I'm considering sticking with the good old reliable rather than go with Spring Data JPA. </p>\n\n<p>What should I do? What unforeseen complications and costs will I encounter if I go with Spring Data JPA?</p>\n    ","a":"\n<p>So, <code>spring-data</code> does some extra magic that helps with complex queries. It is strange at first and you totally skip it in the docs but it is really powerful and useful.</p>\n\n<p>It involves creating a custom <code>Repository</code> and a custom `RepositoryImpl' and telling Spring where to find it. Here is an example:</p>\n\n<p>Configuration class - <s>point to your still-needed xml config</s> with annotation pointing to your repositories package (it looks for <code>*Impl</code> classes automatically now):</p>\n\n<pre><code>@Configuration\n@EnableJpaRepositories(basePackages = {\"com.examples.repositories\"})\n@EnableTransactionManagement\npublic class MyConfiguration {\n}\n</code></pre>\n\n<p><s>jpa-repositories.xml - tell <code>Spring</code> where to find your repositories. Also tell <code>Spring</code> to look for custom repositories with the <code>CustomImpl</code> file name:</s></p><s>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/jpa/spring-jpa.xsd\n    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"&gt;\n\n&lt;jpa:repositories base-package=\"com.example.repositories\" repository-impl-postfix=\"CustomImpl\" /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n</s><p><s></s></p>\n\n<p><code>MyObjectRepository</code> - this is where you can put annotated and unannotated query methods. Note how this repository interface extends the <code>Custom</code> one:</p>\n\n<pre><code>@Transactional\npublic interface MyObjectRepository extends JpaRepository&lt;MyObject, Integer&gt;, MyObjectRepositoryCustom {\n\n    List&lt;MyObject&gt; findByName(String name);\n\n    @Query(\"select * from my_object where name = ?0 or middle_name = ?0\")\n    List&lt;MyObject&gt; findByFirstNameOrMiddleName(String name);\n</code></pre>\n\n<p>}</p>\n\n<p><code>MyObjectRepositoryCustom</code> - repository methods that are more complex and cannot be handled with a simple query or an annotation:</p>\n\n<pre><code>public interface MyObjectRepositoryCustom {\n\n    List&lt;MyObject&gt; findByNameWithWeirdOrdering(String name);\n}\n</code></pre>\n\n<p><code>MyObjectRepositoryCustomImpl</code> - where you actually implement those methods with an autowired <code>EntityManager</code>:</p>\n\n<pre><code>public class MyObjectRepositoryCustomImpl implements MyObjectRepositoryCustom {\n\n    @Autowired\n    private EntityManager entityManager;\n\n    public final List&lt;MyObject&gt; findByNameWithWeirdOrdering(String name) {\n        Query query = query(where(\"name\").is(name));\n        query.sort().on(\"whatever\", Order.ASC);\n        return entityManager.find(query, MyObject.class);\n    }\n}\n</code></pre>\n\n<p>Amazingly, this all comes together and methods from both interfaces (and the CRUD interface you implement) all show up when you do:</p>\n\n<pre><code>myObjectRepository.\n</code></pre>\n\n<p>You will see:</p>\n\n<pre><code>myObjectRepository.save()\nmyObjectRepository.findAll()\nmyObjectRepository.findByName()\nmyObjectRepository.findByFirstNameOrMiddleName()\nmyObjectRepository.findByNameWithWeirdOrdering()\n</code></pre>\n\n<p>It really does work. And you get one interface for querying. <code>spring-data</code> really is ready for a large application. And the more queries you can push into simple or annotation only the better off you are.</p>\n\n<p>All of this is documented at the <a href=\"http://docs.spring.io/spring-data/data-jpa/docs/1.4.x/reference/htmlsingle/#repositories.custom-implementations\">Spring Data Jpa site</a>.</p>\n\n<p>Good luck.</p>\n    "},{"t":"Is there a way to specify a default property value in Spring XML?","l":"http://stackoverflow.com/questions/2513484/is-there-a-way-to-specify-a-default-property-value-in-spring-xml","q":"\n\n<p>We are using a <em>PropertyPlaceholderConfigurer</em> to use java properties in our Spring configuration (<a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-factory-placeholderconfigurer\" rel=\"nofollow noreferrer\">details here</a>)</p>\n\n<p>eg:</p>\n\n<pre><code>&lt;foo name=\"port\"&gt;\n  &lt;value&gt;${my.server.port}&lt;/value&gt;\n&lt;/foo&gt;\n</code></pre>\n\n<p>We would like to add an additional property, but have a distributed system where existing instances could all use a default value.  Is there a way to avoid updating all of our properties files, by indicating a default value in the Spring config for when there isn't an overriding property value defined?</p>\n    ","a":"\n<p>Are you looking for the PropertyOverrideConfigurer documented here </p>\n\n<p><a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-factory-overrideconfigurer\" rel=\"nofollow noreferrer\">http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-factory-overrideconfigurer</a> </p>\n\n<blockquote>\n  <p>The PropertyOverrideConfigurer,\n  another bean factory post-processor,\n  is similar to the\n  PropertyPlaceholderConfigurer, but in\n  contrast to the latter, the original\n  definitions can have default values or\n  no values at all for bean properties.\n  If an overriding Properties file does\n  not have an entry for a certain bean\n  property, the default context\n  definition is used.</p>\n</blockquote>\n    "},{"t":"Should I use EJB3 or Spring for my business layer?","l":"http://stackoverflow.com/questions/68527/should-i-use-ejb3-or-spring-for-my-business-layer","q":"\n\n<p>My team is developing a new service oriented product with a web front-end.  In discussions about what technologies we will use we have settled on running a JBoss application server, and Flex frontend (with possible desktop deployment using Adobe AIR), and web services to interface the client and server.</p>\n\n<p>We've reached an impasse when it comes to which server technology to use for our business logic.  The big argument is between EJB3 and Spring, with our biggest concerns being scalability and performance, and also maintainability of the code base.</p>\n\n<p>Here are my questions:</p>\n\n<ol>\n<li>What are the arguments for or against EJB3 vs Spring? \n\n<ul>\n<li>What pitfalls can I expect with each?</li>\n<li>Where can I find good benchmark information?</li>\n</ul></li>\n</ol>\n    ","a":"\n<p>There won't be much difference between EJB3 and Spring based on Performance. We chose Spring for the following reasons (not mentioned in the question):</p>\n\n<ul>\n<li>Spring drives the architecture in a direction that more readily supports unit testing. For example, inject a mock DAO object to unit test your business layer, or utilize Spring's MockHttpRequest object to unit test a servlet. We maintain a separate Spring config for unit tests that allows us to isolate tests to the specific layers.</li>\n<li>An overriding driver was compatibility. If you need to support more than one App Server (or eventually want the option to move from JBoss to Glassfish, etc.), you will essentially be carrying your container (Spring) with you, rather than relying on compatibility between different implementations of the EJB3 specification.</li>\n<li>Spring allows for technology choices for Persistence, object remoting, etc. For example, we are also using a Flex front end, and are using the Hessian protocol for communications between Flex and Spring.</li>\n</ul>\n    "},{"t":"Which artifact for org.springframework.mail?","l":"http://stackoverflow.com/questions/1367303/which-artifact-for-org-springframework-mail","q":"\n\n<p>I'd like to use spring support for sending mails. My project is built with maven-2 and I use spring-core 2.5.5  I tried to look in maven central repo for artifact to include in my pom.xml, and the only one I found is <a href=\"http://mvnrepository.com/artifact/org.springframework/spring-support\" rel=\"nofollow noreferrer\">spring support</a>. The problem is that the highest version in repo is 2.0.8 and it depends on spring-core v. 2.0.8. Should I add it and exclude from its dependencies spring-core, spring-aop and so on, or should I look for another artifact (but which one will do?) or use another repo? Which is the proper maven-2 artifact for org.springframework.mail and where can I find it?</p>\n    ","a":"\n<p>The mail stuff is found, rather bizarrely, in the <a href=\"http://mvnrepository.com/artifact/org.springframework/spring-context-support\" rel=\"nofollow noreferrer\">context-support artifact</a>.</p>\n    "},{"t":"Autowiring two beans implementing same interface - how to set default bean to autowire?","l":"http://stackoverflow.com/questions/10534053/autowiring-two-beans-implementing-same-interface-how-to-set-default-bean-to-au","q":"\n\n<h2>Background:</h2>\n\n<p>I have a Spring 2.5/Java/Tomcat application. There is the following bean, which is used throughout the application in many places</p>\n\n<pre><code>public class HibernateDeviceDao implements DeviceDao\n</code></pre>\n\n<p>and the following bean which is new:</p>\n\n<pre><code>public class JdbcDeviceDao implements DeviceDao\n</code></pre>\n\n<p>The first bean is configured so (all beans in the package are included)</p>\n\n<pre><code>&lt;context:component-scan base-package=\"com.initech.service.dao.hibernate\" /&gt;\n</code></pre>\n\n<p>The second (new) bean is configured separately</p>\n\n<pre><code>&lt;bean id=\"jdbcDeviceDao\" class=\"com.initech.service.dao.jdbc.JdbcDeviceDao\"&gt;\n    &lt;property name=\"dataSource\" ref=\"jdbcDataSource\"&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>This results (of course) in an exception when starting the server:</p>\n\n<blockquote>\n  <p>nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [com.sevenp.mobile.samplemgmt.service.dao.DeviceDao] is defined: expected single matching bean but found 2: [deviceDao, jdbcDeviceDao]</p>\n</blockquote>\n\n<p>from a class trying to autowire the bean like this</p>\n\n<pre><code>@Autowired\nprivate DeviceDao hibernateDevicDao;\n</code></pre>\n\n<p>because there are two beans implementing the same interface. </p>\n\n<h2>The question:</h2>\n\n<p><strong>Is it possible to configure the beans so that</strong> </p>\n\n<p><strong>1.</strong> I don't have to make changes to existing classes, which already have the <code>HibernateDeviceDao</code> autowired</p>\n\n<p><strong>2.</strong> still being able to use the second (new) bean like this:</p>\n\n<pre><code>@Autowired\n@Qualifier(\"jdbcDeviceDao\")\n</code></pre>\n\n<p>I.e. i would need a way to configure the <code>HibernateDeviceDao</code> bean as the default bean to be autowired, simultaneously allowing the usage of a the <code>JdbcDeviceDao</code> when explicitly specifying so with the <code>@Qualifier</code> annotation. </p>\n\n<h2>What I've already tried:</h2>\n\n<p>I tried setting the property</p>\n\n<pre><code>autowire-candidate=\"false\"\n</code></pre>\n\n<p>in the bean configuration for JdbcDeviceDao:</p>\n\n<pre><code>&lt;bean id=\"jdbcDeviceDao\" class=\"com.initech.service.dao.jdbc.JdbcDeviceDao\" autowire-candidate=\"false\"&gt;\n    &lt;property name=\"dataSource\" ref=\"jdbcDataSource\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>because the Spring documentation says that</p>\n\n<blockquote>\n  <p>Indicates whether or not this bean should be considered when \n   looking for matching candidates to satisfy another bean's \n   autowiring requirements. <strong>Note that this does not affect explicit \n   references by name, which will get resolved even if the specified \n   bean is not marked as an autowire candidate.*</strong></p>\n</blockquote>\n\n<p>which I interpreted to mean that I could still autowire <code>JdbcDeviceDao</code> using the <code>@Qualifier</code> annotation and have the <code>HibernateDeviceDao</code> as default bean. Apparently my interpretation was not correct, though, as this results in the following error message when starting the server:</p>\n\n<blockquote>\n  <p>Unsatisfied dependency of type [class com.sevenp.mobile.samplemgmt.service.dao.jdbc.JdbcDeviceDao]: expected at least 1 matching bean</p>\n</blockquote>\n\n<p>coming from the class where I've tried autowiring the bean with a qualifier: </p>\n\n<pre><code>@Autowired\n@Qualifier(\"jdbcDeviceDao\")\n</code></pre>\n\n<h2>Solution:</h2>\n\n<p><a href=\"http://stackoverflow.com/users/21234/skaffman\">skaffman's</a> <a href=\"http://stackoverflow.com/questions/10534053/autowiring-two-beans-implementing-same-interface-how-to-set-default-bean-to-au#10534137\">suggestion</a> to try the @Resource annotation worked. So the configuration has autowire-candidate set to false for jdbcDeviceDao and when using the jdbcDeviceDao I refer to it using the @Resource annotation (instead of @Qualifier):</p>\n\n<pre><code>@Autowired\n@Resource(name = \"jdbcDeviceDao\")\nprivate JdbcDeviceListItemDao jdbcDeviceDao;\n</code></pre>\n    ","a":"\n<p>I'd suggest marking the Hibernate DAO class with <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/context/annotation/Primary.html\"><code>@Primary</code></a>, i.e. (assuming you used <code>@Repository</code> on <code>HibernateDeviceDao</code>):</p>\n\n<pre><code>@Primary\n@Repository\npublic class HibernateDeviceDao implements DeviceDao\n</code></pre>\n\n<p>This way it will be selected as the default autowire candididate, with no need to <code>autowire-candidate</code> on the other bean.</p>\n\n<p>Also, rather than using <code>@Autowired @Qualifier</code>, I find it more elegant to use <code>@Resource</code> for picking specific beans, i.e.</p>\n\n<pre><code>@Resource(name=\"jdbcDeviceDao\")\nDeviceDao deviceDao;\n</code></pre>\n    "},{"t":"Akka or Reactor","l":"http://stackoverflow.com/questions/16595393/akka-or-reactor","q":"\n\n<p>I am in the process of starting a new project (java-based). I need to build it as a modular, distributed and resilient architecture.</p>\n\n<p>Therefore I would like to have the business processes to communicate among themselves, be interoperable, but also independent.</p>\n\n<p>I am looking right now at two frameworks that, besides their difference in age, express 2 different views:</p>\n\n<ul>\n<li>Akka (<a href=\"http://akka.io\">http://akka.io</a>)</li>\n<li>Reactor (<a href=\"https://github.com/reactor/reactor\">https://github.com/reactor/reactor</a>)</li>\n</ul>\n\n<p>What I should  consider when choosing one of the above frameworks?</p>\n\n<p>As far as I understand till now, Akka is still somehow coupled (in a way that I have to 'choose' the actor I want to send the messages to), but very resilient. While Reactor is loose (as is based on event posting).</p>\n\n<p>Can someone help me understand how make a proper decision?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>After reviewing better the <a href=\"http://doc.akka.io/docs/akka/snapshot/java/event-bus.html\">Event Bus</a> of Akka, I believe in some way the <a href=\"https://github.com/reactor/reactor#events-selectors-and-consumers\">features expressed by Reactor</a> are already included in Akka.</p>\n\n<p>For example the subscription and event publishing, documented on <a href=\"https://github.com/reactor/reactor#events-selectors-and-consumers\">https://github.com/reactor/reactor#events-selectors-and-consumers</a>, can be expressed in Akka as following:</p>\n\n<pre><code>final ActorSystem system = ActorSystem.create(\"system\");\nfinal ActorRef actor = system.actorOf(new Props(\n    new UntypedActorFactory() {\n\n        @Override\n        public Actor create() throws Exception {\n\n            return new UntypedActor() {\n                final LoggingAdapter log = Logging.getLogger(\n                        getContext().system(), this);\n\n                @Override\n                public void onReceive(Object message)\n                        throws Exception {\n                    if (message instanceof String)\n                        log.info(\"Received String message: {}\",\n                                message);\n                    else\n                        unhandled(message);\n                }\n            };\n        }\n    }), \"actor\");\n\nsystem.eventStream().subscribe(actor, String.class);\nsystem.eventStream().publish(\"testing 1 2 3\");\n</code></pre>\n\n<p>Therefore it seems to me now that the major differences between the two are:</p>\n\n<ul>\n<li>Akka, more mature, bound to Typesafe</li>\n<li>Reactor, early stage, bound to the Spring</li>\n</ul>\n\n<p>Is my interpretation correct? But <strong>what is conceptually the difference between the Actor in Akka and the Consumer in Reactor</strong>?</p>\n    ","a":"\n<p>Reactor is not bound to Spring, its an optional module. We want Reactor to be portable, a foundation as Jon outlined. </p>\n\n<p>I won't be confident about pushing in production as we are not even Milestone (1.0.0.SNAPSHOT), in that regard, I would have a deeper look at <em>Akka</em> which is a fantastic asynchronous framework IMO. Also consider <em>Vert.x</em> and <em>Finagle</em> which might be adapted if you look either for a platform (the former) or for composable futures (the latter). If you look after a wide range of asynchronous patterns, maybe <em>GPars</em> will provide you a more complete solution.</p>\n\n<p>In the end, we might certainly have overlaps, in fact we're leaning toward a mixed approach (flexible composable eventing, distributed, and not bound to any dispatching strategy) where you can easily find bits from <em>RxJava</em>, <em>Vert.x</em>, <em>Akka</em> etc. We are not even opinionated by the language choice, even if we are strongly committed to Groovy, people have already started <em>Clojure</em> and <em>Kotlin</em> ports. Add to this mix the fact that some requirements are driven by <a href=\"https://github.com/SpringSource/spring-xd\">Spring XD</a> and <a href=\"http://www.grails.org\">Grails</a>.</p>\n\n<p>Many thanks for your witnessed interest, hopefully you'll have more comparison points in a couple of months :)</p>\n    "},{"t":"How to parameterize @Scheduled(fixedDelay) with Spring 3.0 expression language?","l":"http://stackoverflow.com/questions/2598712/how-to-parameterize-scheduledfixeddelay-with-spring-3-0-expression-language","q":"\n\n<p>When using the Spring 3.0 capability to annotate a scheduled task, I would like to set the fixedDelay as parameter from my configuration file, instead of hard-wiring it into my task class, like currently...</p>\n\n<pre><code>@Scheduled(fixedDelay=5000)\npublic void readLog() {\n        ...\n}\n</code></pre>\n\n<p>Unfortunately it seems that with the means of the Spring Expression Language (EL) @Value returns a String object which in turn is not able to be auto-boxed to a long value as required by the fixedDelay parameter.</p>\n\n<p>Thanks in advance for your help on this.</p>\n    ","a":"\n<p>I guess the <code>@Scheduled</code> annotation is out of question. So maybe a solution for you would be to use <code>task-scheduled</code> XML configuration. Let's consider this example (copied from <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/scheduling.html\" rel=\"nofollow noreferrer\">Spring doc</a>):</p>\n\n<pre><code>&lt;task:scheduled-tasks scheduler=\"myScheduler\"&gt;\n    &lt;task:scheduled ref=\"someObject\" method=\"readLog\" \n               fixed-rate=\"#{YourConfigurationBean.stringValue}\"/&gt;\n&lt;/task:scheduled-tasks&gt;\n</code></pre>\n\n<p>... or if the cast from String to Long didn't work, something like this would:</p>\n\n<pre><code>&lt;task:scheduled-tasks scheduler=\"myScheduler\"&gt;\n    &lt;task:scheduled ref=\"someObject\" method=\"readLog\"\n            fixed-rate=\"#{T(java.lang.Long).valueOf(YourConfigurationBean.stringValue)}\"/&gt;\n&lt;/task:scheduled-tasks&gt;\n</code></pre>\n\n<p>Again, I haven't tried any of these setups, but I hope it might help you a bit.</p>\n    "},{"t":"Spring: how do I inject an HttpServletRequest into a request-scoped bean?","l":"http://stackoverflow.com/questions/3320674/spring-how-do-i-inject-an-httpservletrequest-into-a-request-scoped-bean","q":"\n\n<p>I'm trying to set up a <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-scopes-other\" rel=\"nofollow noreferrer\">request-scoped bean</a> in Spring.</p>\n\n<p>I've successfully set it up so the bean is created once per request. Now, it needs to access the HttpServletRequest object.</p>\n\n<p>Since the bean is created once per request, I figure the container can easily inject the request object in my bean. How can I do that ?</p>\n    ","a":"\n<p>Request-scoped beans can be autowired with the request object.</p>\n\n<pre><code>private @Autowired HttpServletRequest request;\n</code></pre>\n    "},{"t":"intellij - spring is not being recognized (Unmapped Spring configuration)","l":"http://stackoverflow.com/questions/22063533/intellij-spring-is-not-being-recognized-unmapped-spring-configuration","q":"\n\n<p>I am using IntelliJ IDEA and all plugins for Spring are activated,\nbut when I load my Maven project I have the following error:</p>\n\n<blockquote>\n  <p>Spring Configuration Check<br>\n  Unmapped Spring configuration files found.<br>\n  Please configure/setup Spring facet for modules  </p>\n</blockquote>\n\n<p>Any ideas what prevented it from being configured automatically?</p>\n    ","a":"\n<p>Just to clarify the answers above, you need to do the following:</p>\n\n<ol>\n<li>Go to the project structure dialog (either by clicking the warning or through file=&gt;project structure</li>\n<li>select the <strong>modules</strong> item in the left hand list</li>\n<li>go through and <strong>right click</strong> on the modules with missing files and select <strong>Add=&gt;Spring</strong></li>\n<li>in the new tab <strong>click the + button</strong></li>\n<li>you should now see a list of the xml files.  Check the boxes next to them</li>\n</ol>\n\n<p>I'm not entirely clear what this achieves apart from getting rid of the warnings!  If anyone could shed any light on that it'd be good.</p>\n    "},{"t":"how to read System environment variable in Spring applicationContext","l":"http://stackoverflow.com/questions/3965446/how-to-read-system-environment-variable-in-spring-applicationcontext","q":"\n\n<p>How to read the <code>system environment variable</code> in the application context?</p>\n\n<p>I want something like :</p>\n\n<pre><code>&lt;util:properties id=\"dbProperties\"\n        location=\"classpath:config_DEV/db.properties\" /&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;util:properties id=\"dbProperties\"\n        location=\"classpath:config_QA/db.properties\" /&gt;\n</code></pre>\n\n<p>depending on the environement.</p>\n\n<p>Can I have something like this in my application Context? </p>\n\n<pre><code>&lt;util:properties id=\"dbProperties\"\n        location=\"classpath:config_${systemProperties.env}/db.properties\" /&gt;\n</code></pre>\n\n<p>where the actual val is set based on the SYSTEM ENVIRONMENT VARIABLE</p>\n\n<p>I'm using Spring 3.0</p>\n    ","a":"\n<p>Check <a href=\"http://www.summa-tech.com/blog/2009/04/20/6-tips-for-managing-property-files-with-spring/\">this article</a>. It gives you several ways to do this, via the <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html\"><code>PropertyPlaceholderConfigurer</code></a> which supports external properties (via the <code>systemPropertiesMode</code> property)</p>\n    "},{"t":"JAAS for human beings","l":"http://stackoverflow.com/questions/628416/jaas-for-human-beings","q":"\n\n<p>I am having a hard time understanding JAAS. It all seems more complicated than it should be (especially the Sun tutorials). I need a simple tutorial or example on how to implement security (authentication + authorization) in java application based on Struts + Spring + Hibernate with custom user repository. Can be implemented using ACEGI.</p>\n    ","a":"\n<p>Here are some of the links I used to help understand JAAS:</p>\n\n<p><a href=\"http://www.owasp.org/index.php/JAAS_Tomcat_Login_Module\" rel=\"nofollow noreferrer\">http://www.owasp.org/index.php/JAAS_Tomcat_Login_Module</a></p>\n\n<p><a href=\"http://www.javaworld.com/jw-09-2002/jw-0913-jaas.html\" rel=\"nofollow noreferrer\">http://www.javaworld.com/jw-09-2002/jw-0913-jaas.html</a></p>\n\n<p><a href=\"http://www.jaasbook.com/\" rel=\"nofollow noreferrer\">http://www.jaasbook.com/</a></p>\n\n<p><a href=\"http://roneiv.wordpress.com/2008/02/18/jaas-authentication-mechanism-is-it-possible-to-force-j_security_check-to-go-to-a-specific-page/\" rel=\"nofollow noreferrer\">http://roneiv.wordpress.com/2008/02/18/jaas-authentication-mechanism-is-it-possible-to-force-j_security_check-to-go-to-a-specific-page/</a></p>\n\n<p>Also have a look at the Apache tomcat realms configuration how-to:</p>\n\n<p><a href=\"http://tomcat.apache.org/tomcat-6.0-doc/realm-howto.html\" rel=\"nofollow noreferrer\">http://tomcat.apache.org/tomcat-6.0-doc/realm-howto.html</a></p>\n    "},{"t":"Spring Expression Language (SpEL) with @Value: dollar vs. hash ($ vs. #)","l":"http://stackoverflow.com/questions/5322632/spring-expression-language-spel-with-value-dollar-vs-hash-vs","q":"\n\n<p>I'm a little confused concerning when to use <code>${...}</code> compared to <code>#{...}</code>. Spring's documentation only uses <code>#{...}</code>, but there are plenty of examples that use <code>${...}</code>. Furthermore, when I started with SpEL I was told to use <code>${...}</code> and it works fine.</p>\n\n<p>For those who are confused, an example of how I use it would be</p>\n\n<pre><code>@Component\npublic class ProxyConfiguration {\n\n    @Value(\"${proxy.host}\")\n    private String host;\n    @Value(\"${proxy.port}\")\n    private String port;\n\n    :\n}\n</code></pre>\n\n<p>and some property file:</p>\n\n<pre><code>proxy.host=myproxy.host\nproxy.port=8000\n</code></pre>\n\n<p>My questions are:</p>\n\n<ul>\n<li>what are the differences or is it the same?</li>\n<li>is one version deprecated so I should use the other one?</li>\n</ul>\n    ","a":"\n<p><code>${...}</code> is the property placeholder syntax. It can only be used to dereference properties.</p>\n\n<p><code>#{...}</code> is <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html\">SpEL syntax</a>, which is far more capable and complex. It can also handle property placeholders, and a lot more besides.</p>\n\n<p>Both are valid, and neither is deprecated.</p>\n    "},{"t":"How to use OrderBy with findAll in Spring Data","l":"http://stackoverflow.com/questions/25486583/how-to-use-orderby-with-findall-in-spring-data","q":"\n\n<p>I am using spring data and my dao looks like</p>\n\n<pre><code>public interface StudentDAO extends JpaRepository&lt;StudentEntity, Integer&gt;\n{\n    public findAllOrderByIdAsc();   // I want to use some thing like this\n}\n</code></pre>\n\n<p>In above code, commented line shows my intent. Can spring Data provides inbuilt functionality\nto use such a method to find all records order by some column with ASC/DESC ?</p>\n\n<p>Thank you :)</p>\n    ","a":"\n<p>I'm a bit late to the party but since the accepted answer uses Sort to achieve what you want, I decided to post this for anyone who might look for the answer to this question.</p>\n\n<pre><code>public interface StudentDAO extends JpaRepository&lt;StudentEntity, Integer&gt;\n{\n    public List&lt;StudentEntity&gt; findAllByOrderByIdAsc();\n}\n</code></pre>\n\n<p>The code above should work. I'm using something similar:</p>\n\n<pre><code>public List&lt;Pilot&gt; findTop10ByOrderByLevelDesc();\n</code></pre>\n\n<p>It returns 10 rows with the highest level.\n<br><br><strong>IMPORTANT :</strong><br>\nSince I've been told that it's easy to miss the key point of this answer, here's a little clarification:\n<br><br>findAll<strong>By</strong>OrderByIdAsc(); <br><br>The little 'by' does all the magic.</p>\n    "},{"t":"Spring - using static final fields (constants) for bean initialization","l":"http://stackoverflow.com/questions/2897819/spring-using-static-final-fields-constants-for-bean-initialization","q":"\n\n<p>is it possible to define a bean with the use of static final fields of CoreProtocolPNames class like this:</p>\n\n<hr>\n\n<pre><code>&lt;bean id=\"httpParamBean\" class=\"org.apache.http.params.HttpProtocolParamBean\"&gt;\n     &lt;constructor-arg ref=\"httpParams\"/&gt;\n     &lt;property name=\"httpElementCharset\" value=\"CoreProtocolPNames.HTTP_ELEMENT_CHARSET\" /&gt;\n     &lt;property name=\"version\" value=\"CoreProtocolPNames.PROTOCOL_VERSION\"&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<hr>\n\n<pre><code>public interface CoreProtocolPNames {\n\n    public static final String PROTOCOL_VERSION = \"http.protocol.version\"; \n\n    public static final String HTTP_ELEMENT_CHARSET = \"http.protocol.element-charset\"; \n}\n</code></pre>\n\n<hr>\n\n<p>If it is possible, what is the best way of doing this ?</p>\n    ","a":"\n<p>Something like this (Spring 2.5)</p>\n\n<pre><code>&lt;bean id=\"foo\" class=\"Bar\"&gt;\n    &lt;property name=\"myValue\"&gt;\n        &lt;util:constant static-field=\"java.lang.Integer.MAX_VALUE\"/&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Where <code>util</code> namespace is from <code>xmlns:util=\"http://www.springframework.org/schema/util\"</code></p>\n\n<p>But for Spring 3, it would be cleaner to use the <code>@Value</code> annotation and the expression language. Which looks like this:</p>\n\n<pre><code>public class Bar {\n    @Value(\"T(java.lang.Integer).MAX_VALUE\")\n    private Integer myValue;\n}\n</code></pre>\n    "},{"t":"How to read values from properties file?","l":"http://stackoverflow.com/questions/9259819/how-to-read-values-from-properties-file","q":"\n\n<p>I am using spring. i need to read values from properties file. This is internal properties file not the external properties file. properties file can be as below.  </p>\n\n<pre><code>some.properties ---file name. values are below.\n\nabc = abc\ndef = dsd\nghi = weds\njil = sdd\n</code></pre>\n\n<p>i need to read those values from the properties file not in traditional way.  how to achieve it? is there any latest approach with spring 3.0?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>Configure PropertyPlaceholder in your context:</p>\n\n<pre><code>&lt;context:property-placeholder location=\"classpath*:my.properties\"/&gt;\n</code></pre>\n\n<p>Then you refer to the properties in your beans:</p>\n\n<pre><code>@Component\nclass MyClass {\n  @Value(\"${my.property.name}\")\n  private String[] myValues;\n}\n</code></pre>\n\n<p>EDIT: updated the code to parse property with mutliple comma-separated values:</p>\n\n<pre><code>my.property.name=aaa,bbb,ccc\n</code></pre>\n\n<p>If that doesnt work, you can define a bean with properties, inject and process it manually:</p>\n\n<pre><code>&lt;bean id=\"myProperties\"\n      class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\"&gt;\n  &lt;property name=\"locations\"&gt;\n    &lt;list&gt;\n      &lt;value&gt;classpath*:my.properties&lt;/value&gt;\n    &lt;/list&gt;\n  &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>and the bean:</p>\n\n<pre><code>@Component\nclass MyClass {\n  @Resource(name=\"myProperties\")\n  private Properties myProperties;\n\n  @PostConstruct\n  public void init() {\n    // do whatever you need with properties\n  }\n}\n</code></pre>\n    "},{"t":"Jdbctemplate query for string: EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0","l":"http://stackoverflow.com/questions/10606229/jdbctemplate-query-for-string-emptyresultdataaccessexception-incorrect-result","q":"\n\n<p>I am using Jdbctemplate to retrieve a single String value from the db.  Here is my method.</p>\n\n<pre><code>    public String test() {\n        String cert=null;\n        String sql = \"select ID_NMB_SRZ from codb_owner.TR_LTM_SLS_RTN \n             where id_str_rt = '999' and ID_NMB_SRZ = '60230009999999'\";\n        cert = (String) jdbc.queryForObject(sql, String.class); \n        return cert;\n    }\n</code></pre>\n\n<p>In my scenario it is complete possible to NOT get a hit on my query so my question is how do I get around the following error message.</p>\n\n<pre><code>EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0\n</code></pre>\n\n<p>It would seem to me that I should just get back a null instead of throwing an exception.  How can I fix this?  Thanks in advance.</p>\n    ","a":"\n<p>In JdbcTemplate , queryForInt, queryForLong, queryForObject all such methods expects that executed query will return one and only one row. If you get no rows or more than one row that will result in <code>IncorrectResultSizeDataAccessException</code> . Now the correct way is not to catch this exception or <code>EmptyResultDataAccessException</code>, but make sure the query you are using should return only one row.  If at all it is not possible then use <code>query</code> method instead.</p>\n\n<pre><code>List&lt;String&gt; strLst  = getJdbcTemplate().query(sql,new RowMapper {\n\n  public Object mapRow(ResultSet rs, int rowNum) throws SQLException {\n        return rs.getString(1);\n  }\n\n});\n\nif ( strLst.isEmpty() ){\n  return null;\n}else if ( strLst.size() == 1 ) { // list contains exactly 1 element\n  return strLst.get(0);\n}else{  // list contains more than 1 elements\n  //your wish, you can either throw the exception or return 1st element.    \n}\n</code></pre>\n    "},{"t":"what are good blogs to read relating java, spring, hibernate, maven? [closed]","l":"http://stackoverflow.com/questions/2553654/what-are-good-blogs-to-read-relating-java-spring-hibernate-maven","q":"\n\n<p>To continue to question further I'm more interested in blogs, websites who once in a while release a tutorial, tip or best-practice on the topics I mentioned. For ex : \n<a href=\"http://net.tutsplus.com/\" rel=\"nofollow noreferrer\">http://net.tutsplus.com/</a> is very good website to follow if you wanna learn about or upgrade your knowledge about CSS, HTML, Javascript, PHP .. Is there a website like this for Java and related technologies?</p>\n    ","a":"\n<p>I'll list some of the ones I'm reading, via RSS:</p>\n\n<p>Blog aggregators:</p>\n\n<ul>\n<li><a href=\"http://java.dzone.com\" rel=\"nofollow noreferrer\">http://java.dzone.com</a></li>\n<li><a href=\"http://javacodegeeks.com\" rel=\"nofollow noreferrer\">http://javacodegeeks.com</a></li>\n<li><a href=\"http://www.programcreek.com/2012/11/top-100-java-developers-blogs/\" rel=\"nofollow noreferrer\">http://www.programcreek.com/2012/11/top-100-java-developers-blogs/</a></li>\n</ul>\n\n<p>Blogs:</p>\n\n<ul>\n<li><a href=\"http://relation.to/Bloggers/Gavin\" rel=\"nofollow noreferrer\">http://relation.to/Bloggers/Gavin</a> - Gavin King - the guy behind Hibernate, Seam, Weld</li>\n<li><a href=\"http://vladmihalcea.com/\" rel=\"nofollow noreferrer\">http://vladmihalcea.com/</a> - Vlad Mihalcea's blog (Hibernate Developer Advocate)</li>\n<li><a href=\"http://blog.springsource.com/\" rel=\"nofollow noreferrer\">http://blog.springsource.com/</a> - Spring source team blog</li>\n<li><a href=\"http://developers-blog.org/\" rel=\"nofollow noreferrer\">http://developers-blog.org/</a></li>\n<li><a href=\"http://misko.hevery.com/\" rel=\"nofollow noreferrer\">http://misko.hevery.com/</a> - Misko Hevery, on testability and tdd</li>\n<li><a href=\"http://krams915.blogspot.in/\" rel=\"nofollow noreferrer\">http://krams915.blogspot.in/</a></li>\n<li><a href=\"http://programcreek.com/\" rel=\"nofollow noreferrer\">http://programcreek.com/</a></li>\n<li><a href=\"http://mkyong.com\" rel=\"nofollow noreferrer\">http://mkyong.com</a></li>\n<li><a href=\"http://techblog.bozho.net\" rel=\"nofollow noreferrer\">my blog</a></li>\n</ul>\n\n<p>Websites:</p>\n\n<ul>\n<li>A couple of JavaLobby forum sections - you can follow whichever section of <a href=\"http://www.javalobby.org/java/forums/c5601.html\" rel=\"nofollow noreferrer\">the forum</a> you like</li>\n<li><a href=\"http://www.theserverside.com/\" rel=\"nofollow noreferrer\">http://www.theserverside.com/</a> - The Server Side</li>\n<li><a href=\"http://www.devx.com/Java/Door/6972\" rel=\"nofollow noreferrer\">http://www.devx.com/Java/Door/6972</a> - DevX Java zone</li>\n<li><a href=\"http://www.javaworld.com/\" rel=\"nofollow noreferrer\">http://www.javaworld.com/</a> - JavaWorld</li>\n<li><a href=\"http://www.infoq.com/java/\" rel=\"nofollow noreferrer\">http://www.infoq.com/java/</a> - InfoQ</li>\n<li><a href=\"http://www.java.net/articles\" rel=\"nofollow noreferrer\">http://www.java.net/articles</a> - java.net articles</li>\n<li><a href=\"http://onjava.com/\" rel=\"nofollow noreferrer\">http://onjava.com/</a></li>\n<li><a href=\"http://www.javased.com\" rel=\"nofollow noreferrer\">http://www.javased.com</a> - Search Engine for Java Code Examples</li>\n<li><a href=\"http://modernpathshala.com\" rel=\"nofollow noreferrer\">http://modernpathshala.com</a>  - Java</li>\n</ul>\n    "},{"t":"Spring 4 vs Jersey for REST web services","l":"http://stackoverflow.com/questions/26305363/spring-4-vs-jersey-for-rest-web-services","q":"\n\n<p>We are planning to make a new application with spring 4.0.6 version. We use controller that can return \"XML\" or \"JSON\". \nIn the previous project we have successfully implemented Jersey with Spring for REST support using JAX-RS API, but after reading a few articles and suggestions from seniors they said spring is providing pretty good REST support. </p>\n\n<p>Some of the points that really confused me if I use Spring REST support without using JAX-RS and Jersey are:</p>\n\n<ol>\n<li><p>How marshaling and unmarshaling done in Spring MVC ?</p></li>\n<li><p>Is it necessary for marshaling or unmarshaling need to use jax-rs. </p></li>\n<li><p>If marshaling and unmarshaling are automatically handled by spring then how does it know about xmlRootElements.</p></li>\n</ol>\n\n<p>I am still confused if Spring proving very good support of REST then why do people still go with Jersey for REST?\nReally looking to know more in details.</p>\n\n<p>If I said anything wrong please ignore it.\nExplanation with example is really helpful.</p>\n\n<p>Thanks in advance!!</p>\n    ","a":"\n<p>I'd say both Jersey and Spring MVC are great - each project has its own style and strengths. Anyway, StackOverflow is not the right place for asking subjective comparisons (your question would be closed quite quickly). If you're already using Spring for everything else and are not <em>required</em> to use JAX-RS, then Spring MVC makes total sense.</p>\n\n<p>Regarding features like (un)marshalling, JAX-RS is just a spec after all - other libraries can offer similar features without implementing the same API.</p>\n\n<ol>\n<li><p>Instead of <a href=\"https://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/ext/MessageBodyReader.html\">MessageBodyReaders</a>/Writers, Spring MVC is using <a href=\"http://docs.spring.io/spring-framework/docs/4.0.6.RELEASE/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html\">HttpMessageConverters</a> to handle (un)marshalling REST resources. Spring MVC handles content negotiation and chooses the best available converter for the job (you can annotate methods to hint at what media type they produce/consume).</p></li>\n<li><p>No, it's not necessary to use JAX-RS to (un)marshall resources. In fact, JAX-RS implementations and Spring MVC use third party serialization libraries to do the job; so it's not tied to a particular standard</p></li>\n<li><p>In its 4.0.6 version, Spring supports many <a href=\"http://docs.spring.io/spring-framework/docs/4.0.6.RELEASE/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html\">HttpMessageConverters</a>, with Jackson for JSON, JAXB for XML and many others. Spring 4.1.0 added more <a href=\"http://docs.spring.io/spring-framework/docs/4.1.0.RELEASE/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html\">HttpMessageConverters</a>:</p>\n\n<ul>\n<li>Jackson is now available for both JSON and XML</li>\n<li><a href=\"https://developers.google.com/protocol-buffers/\">Google Protobuf</a></li>\n<li><a href=\"https://code.google.com/p/google-gson/\">Gson for JSON</a>, as an alternative to Jackson</li>\n</ul></li>\n</ol>\n\n<p>To answer your last point, <code>@XmlRootElement</code> is a JAXB annotation and is not part of JAX-RS. <a href=\"http://docs.spring.io/spring-framework/docs/4.1.0.RELEASE/spring-framework-reference/html/oxm.html#oxm-jaxb\">Spring supports JAXB</a>.</p>\n\n<p>For a more complete example with REST in Spring, check out <a href=\"https://spring.io/guides/gs/rest-service/\">this getting started guide</a> (you'll get a complete example running in 10-15 minutes).</p>\n\n<p>Again the last part of your question is quite subjective - there are many popular solutions for building REST services in the JVM, not just Jersey and Spring (Dropwizard, Play! Framework, etc).</p>\n    "},{"t":"inject bean reference into a Quartz job in Spring?","l":"http://stackoverflow.com/questions/6990767/inject-bean-reference-into-a-quartz-job-in-spring","q":"\n\n<p>I managed to configure and schedule a Quartz  job using JobStoreTX persistent store in Spring. I do not use Spring's Quartz jobs, because I need to schedule them dynamically, at run time, and all examples of integrating Spring with Quartz that i found were hard-coding the shcedules in the Spring config files... Anyway, here is how I schedule the job:</p>\n\n<pre><code>JobDetail emailJob = JobBuilder.newJob(EMailJob.class)\n.withIdentity(\"someJobKey\", \"immediateEmailsGroup\")\n.storeDurably()\n.build();\n\nSimpleTrigger trigger = (SimpleTrigger) TriggerBuilder.newTrigger() \n.withIdentity(\"someTriggerKey\", \"immediateEmailsGroup\")\n.startAt(fireTime)\n.build();\n\n// pass initialization parameters into the job\nemailJob.getJobDataMap().put(NotificationConstants.MESSAGE_PARAMETERS_KEY,       messageParameters);\nemailJob.getJobDataMap().put(NotificationConstants.RECIPIENT_KEY, recipient);\n\nif (!scheduler.checkExists(jobKey) &amp;&amp; scheduler.getTrigger(triggerKey) != null)     {                                       \n// schedule the job to run\nDate scheduleTime1 = scheduler.scheduleJob(emailJob, trigger);\n}\n</code></pre>\n\n<p>The EMailJob is a simple job that is sending e-mail using the Spring's JavaMailSenderImpl class.</p>\n\n<pre><code>public class EMailJob implements Job {\n@Autowired\nprivate JavaMailSenderImpl mailSenderImpl;\n\n    public EMailJob() {\n    }\n    public void execute(JobExecutionContext context)\n       throws JobExecutionException {\n   ....\n    try {\n        mailSenderImpl.send(mimeMessage);\n    } catch (MessagingException e) {\n        ....\n        throw new JobExecutionException(\"EMailJob failed: \" +  jobKey.getName(), e);\n    }\n\n    logger.info(\"EMailJob finished OK\");\n\n}\n</code></pre>\n\n<p>The problem is that I need to get a reference to an instance of this class (JavaMailSenderImpl)  in my EMailJob class. When I try to inject it like this:</p>\n\n<pre><code>@Autowired\nprivate JavaMailSenderImpl mailSenderImpl;\n</code></pre>\n\n<p>it is not injected - the reference is NULL. I'm assuming this is happening because it is not  Spring who instantiates the EMailJob class, but Quartz, and Quartz does not know anything about dependency injection...</p>\n\n<p>So, is there some way to force this injection to happen?</p>\n\n<p>thanks!</p>\n\n<p>Update 1:\n@Aaron:\nhere is a relevant part of the stacktrace from the startup, which is showing the the EMailJob was instantiated twice:</p>\n\n<pre><code>2011-08-15 14:16:38,687 [main] INFO     org.springframework.context.support.GenericApplicationContext - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler#0' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2011-08-15 14:16:38,734 [main] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1328c7a: defining beans [...]; root of factory hierarchy\n2011-08-15 14:16:39,734 [main] INFO  com.cambridgedata.notifications.EMailJob - EMailJob() -  initializing ...\n2011-08-15 14:16:39,937 [main] INFO  org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor -   Validated configuration attributes\n2011-08-15 14:16:40,078 [main] INFO  org.springframework.security.web.access.intercept.FilterSecurityInterceptor - Validated configuration attributes\n2011-08-15 14:16:40,296 [main] INFO  org.springframework.jdbc.datasource.init.ResourceDatabasePopulator - Executing SQL script from class path resource ...\n2011-08-15 14:17:14,031 [main] INFO  com.mchange.v2.log.MLog - MLog clients using log4j logging.\n2011-08-15 14:17:14,109 [main] INFO  com.mchange.v2.c3p0.C3P0Registry - Initializing c3p0-0.9.1.1 [built 15-March-2007 01:32:31; debug? true; trace: 10]\n2011-08-15 14:17:14,171 [main] INFO  org.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl\n2011-08-15 14:17:14,171 [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.0.1 created.\n2011-08-15 14:17:14,187 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Using thread monitor-based data access locking (synchronization).\n2011-08-15 14:17:14,187 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - JobStoreTX initialized.\n2011-08-15 14:17:14,187 [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.0.1) 'NotificationsScheduler' with instanceId  'NON_CLUSTERED'\n Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.\n   NOT STARTED.\n Currently in standby mode.\n Number of jobs executed: 0\n Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 3 threads.\n Using job-store 'org.quartz.impl.jdbcjobstore.JobStoreTX' - which supports persistence. and is not clustered.\n\n2011-08-15 14:17:14,187 [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'NotificationsScheduler' initialized from the specified file : 'spring/quartz.properties' from the class resource path.\n2011-08-15 14:17:14,187 [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.0.1\n2011-08-15 14:17:14,234 [main] INFO  com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -&gt; 3, acquireRetryAttempts -&gt; 30, acquireRetryDelay -&gt; 1000, autoCommitOnClose -&gt; false, automaticTestTable -&gt; null, breakAfterAcquireFailure -&gt; false, checkoutTimeout -&gt; 0, connectionCustomizerClassName -&gt; null, connectionTesterClassName -&gt; com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -&gt; 2sajb28h1lcabf28k3nr1|13af084, debugUnreturnedConnectionStackTraces -&gt; false, description -&gt; null, driverClass -&gt; com.mysql.jdbc.Driver, factoryClassLocation -&gt; null, forceIgnoreUnresolvedTransactions -&gt; false, identityToken -&gt; 2sajb28h1lcabf28k3nr1|13af084, idleConnectionTestPeriod -&gt; 50, initialPoolSize -&gt; 3, jdbcUrl -&gt; jdbc:mysql://localhost:3306/2010rewrite2, lastAcquisitionFailureDefaultUser -&gt; null, maxAdministrativeTaskTime -&gt; 0, maxConnectionAge -&gt; 0, maxIdleTime -&gt; 0, maxIdleTimeExcessConnections -&gt; 0, maxPoolSize -&gt; 5, maxStatements -&gt; 0, maxStatementsPerConnection -&gt; 120, minPoolSize -&gt; 1, numHelperThreads -&gt; 3, numThreadsAwaitingCheckoutDefaultUser -&gt; 0, preferredTestQuery -&gt; select 0 from dual, properties -&gt; {user=******, password=******}, propertyCycle -&gt; 0, testConnectionOnCheckin -&gt; true, testConnectionOnCheckout -&gt; false, unreturnedConnectionTimeout -&gt; 0, usesTraditionalReflectiveProxies -&gt; false ]\n2011-08-15 14:17:14,312 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Freed 0 triggers from 'acquired' / 'blocked' state.\n2011-08-15 14:17:14,328 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Recovering 0 jobs that were in-progress at the time of the last shut-down.\n2011-08-15 14:17:14,328 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Recovery complete.\n2011-08-15 14:17:14,328 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Removed 0 'complete' triggers.\n2011-08-15 14:17:14,328 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Removed 0 stale fired job entries.\n2011-08-15 14:17:14,328 [main] INFO  org.quartz.core.QuartzScheduler - Scheduler NotificationsScheduler_$_NON_CLUSTERED started.\n2011-08-15 14:17:14,515 [NotificationsScheduler_QuartzSchedulerThread] INFO  com.cambridgedata.notifications.EMailJob - EMailJob() -  initializing ...\n</code></pre>\n\n<p>thanks!</p>\n\n<p>Update #2: @Ryan:</p>\n\n<p>I tried to use the SpringBeanJobFactory as following:</p>\n\n<pre><code>    &lt;bean id=\"jobFactoryBean\" class=\"org.springframework.scheduling.quartz.SpringBeanJobFactory\"&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"schedulerFactoryBean\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"&gt;\n        &lt;property name=\"configLocation\" value=\"classpath:spring/quartz.properties\"/&gt;\n        &lt;property name=\"jobFactory\" ref=\"jobFactoryBean\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>And I have modified my main class to get Scheduler from this factory, instead of Quartz':</p>\n\n<pre><code>    @PostConstruct\npublic void initNotificationScheduler() {\n    try {\n        //sf = new StdSchedulerFactory(\"spring/quartz.properties\");\n        //scheduler = sf.getScheduler();\n\n        scheduler = schedulerFactoryBean.getScheduler();\n        scheduler.start();\n            ....\n</code></pre>\n\n<p>But when I run the app - get errors, see below. Here is the stacktrace from Spring startup . Seems like the Scheduler itself is created fine, but the error comes when it is trying to instantiate my EMailJob:</p>\n\n<pre><code>2011-08-15 21:49:42,968 [main] INFO  org.springframework.scheduling.quartz.SchedulerFactoryBean - Loading Quartz config from [class path resource [spring/quartz.properties]]\n2011-08-15 21:49:43,031 [main] INFO  com.mchange.v2.log.MLog - MLog clients using log4j logging.\n2011-08-15 21:49:43,109 [main] INFO  com.mchange.v2.c3p0.C3P0Registry - Initializing c3p0-0.9.1.1 [built 15-March-2007 01:32:31; debug? true; trace: 10]\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.0.1 created.\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Using thread monitor-based data access locking (synchronization).\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - JobStoreTX initialized.\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.0.1) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'\n Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.\n NOT STARTED.\n Currently in standby mode.\n Number of jobs executed: 0\n Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 3 threads.\n Using job-store 'org.quartz.impl.jdbcjobstore.JobStoreTX' - which supports persistence. and is not clustered.\n\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.0.1\n2011-08-15 21:49:43,187 [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@566633\n2011-08-15 21:49:43,265 [main] INFO  com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -&gt; 3, acquireRetryAttempts -&gt; 30, acquireRetryDelay -&gt; 1000, autoCommitOnClose -&gt; false, automaticTestTable -&gt; null, breakAfterAcquireFailure -&gt; false, checkoutTimeout -&gt; 0, connectionCustomizerClassName -&gt; null, connectionTesterClassName -&gt; com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -&gt; 1hge13f8h1lsg7py1rg0iu0|1956391, debugUnreturnedConnectionStackTraces -&gt; false, description -&gt; null, driverClass -&gt; com.mysql.jdbc.Driver, factoryClassLocation -&gt; null, forceIgnoreUnresolvedTransactions -&gt; false, identityToken -&gt; 1hge13f8h1lsg7py1rg0iu0|1956391, idleConnectionTestPeriod -&gt; 50, initialPoolSize -&gt; 3, jdbcUrl -&gt; jdbc:mysql://localhost:3306/2010rewrite2, lastAcquisitionFailureDefaultUser -&gt; null, maxAdministrativeTaskTime -&gt; 0, maxConnectionAge -&gt; 0, maxIdleTime -&gt; 0, maxIdleTimeExcessConnections -&gt; 0, maxPoolSize -&gt; 5, maxStatements -&gt; 0, maxStatementsPerConnection -&gt; 120, minPoolSize -&gt; 1, numHelperThreads -&gt; 3, numThreadsAwaitingCheckoutDefaultUser -&gt; 0, preferredTestQuery -&gt; select 0 from dual, properties -&gt; {user=******, password=******}, propertyCycle -&gt; 0, testConnectionOnCheckin -&gt; true, testConnectionOnCheckout -&gt; false, unreturnedConnectionTimeout -&gt; 0, usesTraditionalReflectiveProxies -&gt; false ]\n2011-08-15 21:49:43,343 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Freed 0 triggers from 'acquired' / 'blocked' state.\n2011-08-15 21:49:43,359 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Recovering 0 jobs that were in-progress at the time of the last shut-down.\n2011-08-15 21:49:43,359 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Recovery complete.\n2011-08-15 21:49:43,359 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Removed 0 'complete' triggers.\n2011-08-15 21:49:43,359 [main] INFO  org.quartz.impl.jdbcjobstore.JobStoreTX - Removed 0 stale fired job entries.\n2011-08-15 21:49:43,359 [main] INFO  org.quartz.core.QuartzScheduler - Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.\n2011-08-15 21:49:43,562 [schedulerFactoryBean_QuartzSchedulerThread] ERROR org.quartz.core.ErrorLogger - An error occured instantiating job to be executed. job= 'immediateEmailsGroup.DEFAULT.jobFor_1000new1'\norg.quartz.SchedulerException: Problem instantiating class  'com.cambridgedata.notifications.EMailJob' -  [See nested exception:  java.lang.AbstractMethodError:  org.springframework.scheduling.quartz.SpringBeanJobFactory.newJob(Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Scheduler;)Lorg/quartz/Job;]\nat org.quartz.core.JobRunShell.initialize(JobRunShell.java:141)\nat org.quartz.core.QuartzSchedulerThread.run(QuartzSchedulerThread.java:381)\nCaused by: java.lang.AbstractMethodError: org.springframework.scheduling.quartz.SpringBeanJobFactory.newJob(Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Scheduler;)Lorg/quartz/Job;\nat org.quartz.core.JobRunShell.initialize(JobRunShell.java:134)\n</code></pre>\n\n<p>thanks!</p>\n    ","a":"\n<p>Just a wrap-up of the solution provided by jelies plus a couple of other things to make Spring+Quartz integration easier: <a href=\"http://codrspace.com/Khovansa/spring-quartz-with-a-database/\" rel=\"nofollow\">http://codrspace.com/Khovansa/spring-quartz-with-a-database/</a></p>\n    "},{"t":"How to set an “Accept:” header on Spring RestTemplate request?","l":"http://stackoverflow.com/questions/19238715/how-to-set-an-accept-header-on-spring-resttemplate-request","q":"\n\n<p>I want to set the value of the <code>Accept:</code> in a request I am making using Spring's <code>RestTemplate</code>.</p>\n\n<p>Here is my Spring request handling code</p>\n\n<pre><code>@RequestMapping(\n    value= \"/uom_matrix_save_or_edit\", \n    method = RequestMethod.POST,\n    produces=\"application/json\"\n)\npublic @ResponseBody ModelMap uomMatrixSaveOrEdit(\n    ModelMap model,\n    @RequestParam(\"parentId\") String parentId\n){\n    model.addAttribute(\"attributeValues\",parentId);\n    return model;\n}\n</code></pre>\n\n<p>and here is my Java REST client:</p>\n\n<pre><code>public void post(){\n    MultiValueMap&lt;String, String&gt; params = new LinkedMultiValueMap&lt;String, String&gt;();\n    params.add(\"parentId\", \"parentId\");\n    String result = rest.postForObject( url, params, String.class) ;\n    System.out.println(result);\n}\n</code></pre>\n\n<p>This works for me; I get a JSON string from the server side.</p>\n\n<p>My question is: how can I specify the <code>Accept:</code> header (e.g. <code>application/json</code>,<code>application/xml</code>, ... ) and request method (e.g. <code>GET</code>,<code>POST</code>, ... ) when I use RestTemplate?</p>\n    ","a":"\n<p>You need to use one of the <a href=\"http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/client/RestTemplate.html#exchange%28java.lang.String,%20org.springframework.http.HttpMethod,%20org.springframework.http.HttpEntity,%20java.lang.Class,%20java.lang.Object...%29\"><code>exchange</code></a> methods that accepts an <a href=\"http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/http/HttpEntity.html\"><code>HttpEntity</code></a> for which you can also set the <a href=\"http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/http/HttpHeaders.html\"><code>HttpHeaders</code></a>. </p>\n\n<p>For example</p>\n\n<pre><code>RestTemplate restTemplate = new RestTemplate();\nHttpHeaders headers = new HttpHeaders();\nheaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n\nHttpEntity&lt;String&gt; entity = new HttpEntity&lt;String&gt;(\"parameters\", headers);\n\nrestTemplate.exchange(url, HttpMethod.POST, entity, String.class);\n</code></pre>\n\n<p>The <code>RestTemplate</code> will use some registered <code>HttpMessageConverter</code> instances to convert JSON to instances of your classes.</p>\n    "},{"t":"spring scoped proxy bean","l":"http://stackoverflow.com/questions/14371335/spring-scoped-proxy-bean","q":"\n\n<p>Can someone explain the usage of the spring <code>@ScopedProxy</code> annotation? I <em>thought</em> it had something to do with session scoped beans, but I'm not quite sure what.</p>\n\n<p>In my usage of scopes, I've used session scoped beans without the <code>@ScopedProxy</code> annotation (or without aop scoped proxies), so I'm really sure how to use it properly.</p>\n    ","a":"\n<p><a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-factory-scopes-other-injection\">Section 3.4.4.5</a> of the spring docs explains it pretty well:</p>\n\n<p>(please note that the following 'userPreferences' bean definition as it stands is incomplete):</p>\n\n<pre><code>&lt;bean id=\"userPreferences\" class=\"com.foo.UserPreferences\" scope=\"session\"/&gt;\n\n&lt;bean id=\"userManager\" class=\"com.foo.UserManager\"&gt;\n    &lt;property name=\"userPreferences\" ref=\"userPreferences\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>From the above configuration it is evident that the singleton bean 'userManager' is being injected with a reference to the HTTP Session-scoped bean 'userPreferences'. The salient point here is that the <strong><em>'userManager' bean is a singleton</em></strong>... it will be <strong><em>instantiated exactly once per container</em></strong>, <strong><em>and its dependencies</em></strong> (in this case only one, the 'userPreferences' bean) <strong><em>will also only be injected (once!)</em></strong>.</p>\n\n<p>This means that the 'userManager' will (conceptually) only ever operate on the exact same 'userPreferences' object, that is the one that it was originally injected with.</p>\n\n<p>This is not what you want when you inject a HTTP Session-scoped bean as a dependency into a collaborating object (typically). Rather, <strong><em>what we do want is a single 'userManager' object per container</em></strong>, and then, <strong><em>for the lifetime of a HTTP Session, we want to see and use a 'userPreferences' object that is specific to said HTTP Session</em></strong>.</p>\n\n<p>Rather what you need then is to inject some sort of object that exposes the exact same public interface as the UserPreferences class (ideally an object that is a UserPreferences instance) and that is smart enough to be able to go off and fetch the real UserPreferences object from whatever underlying scoping mechanism we have chosen (HTTP request, Session, etc.). We can then safely inject this proxy object into the 'userManager' bean, which will be blissfully unaware that the UserPreferences reference that it is holding onto is a <strong><em>proxy</em></strong>. </p>\n\n<p>In our case, <strong><em>when a UserManager instance invokes a method on the dependency-injected UserPreferences object, it will really be invoking a method on the proxy</em></strong>... the proxy will then go off and fetch the real UserPreferences object from (in this case) the HTTP Session, and delegate the method invocation onto the retrieved real UserPreferences object.</p>\n\n<p>That is why you need the following, correct and complete, configuration when injecting request-, session-, and globalSession-scoped beans into collaborating objects:</p>\n\n<pre><code>&lt;bean id=\"userPreferences\" class=\"com.foo.UserPreferences\" scope=\"session\"&gt;\n    &lt;aop:scoped-proxy/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"userManager\" class=\"com.foo.UserManager\"&gt;\n    &lt;property name=\"userPreferences\" ref=\"userPreferences\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n    "},{"t":"How to create custom methods for use in spring security expression language annotations","l":"http://stackoverflow.com/questions/6632982/how-to-create-custom-methods-for-use-in-spring-security-expression-language-anno","q":"\n\n<p>I would like to create a class that adds custom methods for use in spring security expression language for method-based authorization via annotations.</p>\n\n<p>For example, I would like to create a custom method like 'customMethodReturningBoolean' to be used somehow like this:</p>\n\n<pre><code>  @PreAuthorize(\"customMethodReturningBoolean()\")\n  public void myMethodToSecure() { \n    // whatever\n  }\n</code></pre>\n\n<p>My question is this.\nIf it is possible, what class should I subclass to create my custom methods, how would I go about configuring it in the spring xml configuration files and come someone give me an example of a custom method used in this way?</p>\n    ","a":"\n<p>You'll need to subclass two classes.</p>\n\n<p>First, set a new method expression handler</p>\n\n<pre><code>&lt;global-method-security&gt;\n  &lt;expression-handler ref=\"myMethodSecurityExpressionHandler\"/&gt;\n&lt;/global-method-security&gt;\n</code></pre>\n\n<p><code>myMethodSecurityExpressionHandler</code> will be a subclass of <code>DefaultMethodSecurityExpressionHandler</code> which overrides <code>createEvaluationContext()</code>, setting a subclass of <code>MethodSecurityExpressionRoot</code> on the <code>MethodSecurityEvaluationContext</code>.</p>\n\n<p>For example:</p>\n\n<pre><code>@Override\npublic EvaluationContext createEvaluationContext(Authentication auth, MethodInvocation mi) {\n    MethodSecurityEvaluationContext ctx = new MethodSecurityEvaluationContext(auth, mi, parameterNameDiscoverer);\n    MethodSecurityExpressionRoot root = new MyMethodSecurityExpressionRoot(auth);\n    root.setTrustResolver(trustResolver);\n    root.setPermissionEvaluator(permissionEvaluator);\n    root.setRoleHierarchy(roleHierarchy);\n    ctx.setRootObject(root);\n\n    return ctx;\n}\n</code></pre>\n    "},{"t":"Template Engines for Spring Framework [closed]","l":"http://stackoverflow.com/questions/29516/template-engines-for-spring-framework","q":"\n\n<p>I've taken quite a shine to the Spring Framework and would like to get into it a bit more. I have noticed that aside from plain vanilla JSPs there are various template engines for use with Spring MVC, such as <a href=\"http://velocity.apache.org/engine/index.html\" rel=\"nofollow noreferrer\">Velocity</a> and <a href=\"http://freemarker.sourceforge.net/\" rel=\"nofollow noreferrer\">Freemarker</a>. Are there others? Which one do you recommend?</p>\n    ","a":"\n<p>I prefer Velocity to Freemarker for the clarity/simplicity of the syntax and professionalism of the community.  I also get a lot of mileage out of the VelocityTools library.  Freemarker can be a bit more intimidating but is also totally solid.  It lacks VelocityTools, but makes up for it with native support for JSP tag libraries.</p>\n\n<p>Either of these template languages is a great improvement over JSP/JSTL, if you ask me.</p>\n    "},{"t":"Should you set up database connection properties in server.xml or context.xml","l":"http://stackoverflow.com/questions/15064260/should-you-set-up-database-connection-properties-in-server-xml-or-context-xml","q":"\n\n<p>I am trying to set up the database connection properties using JNDI for a Spring web application.</p>\n\n<p>I am considering two approaches as below:</p>\n\n<p><strong>Approach 1:</strong></p>\n\n<p>In your Spring configuration you may have something like:</p>\n\n\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/facs\"/&gt;\n</code></pre>\n\n<p>Then in your webapp /META-INF/context.xml file you should have something similar too:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n\n&lt;!-- antiResourceLocking=\"true\" --&gt;\n&lt;Context path=\"/podd-apn\"\n         reloadable=\"true\"\n         cachingAllowed=\"false\"\n         antiResourceLocking=\"true\"\n         &gt;\n\n  &lt;Resource name=\"jdbc/facs\"              \n            type=\"javax.sql.DataSource\" username=\"${database.username}\" password=\"${database.password}\"\n            driverClassName=\"org.postgresql.Driver\" \n            url=\"${database.url}\"\n            maxActive=\"8\" maxIdle=\"4\"\n            global=\"jdbc/facs\" \n            /&gt;\n\n\n&lt;/Context&gt;\n</code></pre>\n\n<p>And in your web.xml you should something like:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;!-- JNDI --&gt;\n  &lt;resource-ref&gt;\n    &lt;description&gt;FACs Datasource&lt;/description&gt;\n    &lt;res-ref-name&gt;jdbc/facs&lt;/res-ref-name&gt;\n    &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;\n    &lt;res-auth&gt;Container&lt;/res-auth&gt;\n  &lt;/resource-ref&gt; \n</code></pre>\n\n<p><br>\n  <strong>Approach 2:</strong></p>\n\n<p>Setup in the Spring context like this:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;jee:jndi-lookup id=\"dbDataSource\"\n   jndi-name=\"jdbc/DatabaseName\"\n   expected-type=\"javax.sql.DataSource\" /&gt;\n</code></pre>\n\n<p>You can declare the JNDI resource in Tomcat's server.xml using something like this:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;GlobalNamingResources&gt;\n  &lt;Resource name=\"jdbc/DatabaseName\" auth=\"Container\" type=\"javax.sql.DataSource\"\n              username=\"dbUsername\" password=\"dbPasswd\"\n              url=\"jdbc:postgresql://localhost/dbname\"\n              driverClassName=\"org.postgresql.Driver\"\n              initialSize=\"5\" maxWait=\"5000\"\n              maxActive=\"120\" maxIdle=\"5\"\n              validationQuery=\"select 1\"\n              poolPreparedStatements=\"true\"/&gt;\n&lt;/GlobalNamingResources/&gt;\n</code></pre>\n\n<p>And reference the JNDI resource from Tomcat's web context.xml like this:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;ResourceLink name=\"jdbc/DatabaseName\"\n   global=\"jdbc/DatabaseName\"\n   type=\"javax.sql.DataSource\"/&gt;\n</code></pre>\n\n<p><br>\nMy question is where is the best place to keep database properties? Should they be placed in <strong>server.xml</strong> or <strong>context.xml</strong>?</p>\n\n<p>Also, if I have 2 databases, should I use two  configs? </p>\n\n<p>Also, is it best practice to directly place them in either server.xml or context.xml? Or do I need to configure through Tomcat Manager GUI console?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>I prefer a third approach that takes the best from \n<strong>Approach 1</strong> and <strong>Approach 2</strong> <a href=\"http://stackoverflow.com/questions/15064260/tomcat-jndi-configuration-best-practice\">described by user1016403</a>.</p>\n\n<h1>Approach 3</h1>\n\n<ol>\n<li>Save database properties on the <code>server.xml</code></li>\n<li>reference the <code>server.xml</code> database properties from the web application <code>META-INF/context.xml</code></li>\n</ol>\n\n<h2>Approach 3 benefits</h2>\n\n<p>While the first point is useful for security reasons the second point is useful for referencing server properties value from the web application, even if server properties values will change.</p>\n\n<p>Moreover decoupling resource definitions on the server from their use by the web application makes such configuration scalable across organizations with various complexity where different teams work on different tiers/layers: the server administrators team can work without conflicting with developers team if the administrator shares the same JNDI  name with the developer for each resource.</p>\n\n<h2>Approach 3 implementation</h2>\n\n<p>Define the JNDI name <code>jdbc/ApplicationContext_DatabaseName</code>.</p>\n\n<p>Declare the <code>jdbc/ApplicationContext_DatabaseName</code>'s various properties and values in Tomcat's <code>server.xml</code> using something like this:</p>\n\n<pre><code>&lt;GlobalNamingResources&gt;\n  &lt;Resource name=\"jdbc/ApplicationContext_DatabaseName\" auth=\"Container\" type=\"javax.sql.DataSource\"\n              username=\"dbUsername\" password=\"dbPasswd\"\n              url=\"jdbc:postgresql://localhost/dbname\"\n              driverClassName=\"org.postgresql.Driver\"\n              initialSize=\"5\" maxWait=\"5000\"\n              maxActive=\"120\" maxIdle=\"5\"\n              validationQuery=\"select 1\"\n              poolPreparedStatements=\"true\"/&gt;\n&lt;/GlobalNamingResources/&gt;\n</code></pre>\n\n<p>Link the <code>jdbc/ApplicationContext_DatabaseName</code>'s properties from web application <code>META-INF/context.xml</code> by an application-private JNDI context <code>java:comp/env/</code> specified in the <code>name</code> attribute:</p>\n\n<pre><code>&lt;Context path=\"/ApplicationContext\" ... &gt;\n  &lt;!--\n    \"global\" attribute links to GlobalNamingResources in the ${catalina.base}/conf/server.xml (server administrator team)\n    \"name\" attribute is relative to the application-private JNDI context java:comp/env/ and is looked up from the java web application (application developer team)\n  --&gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContext_DatabaseName\" name=\"jdbc/DatabaseName\" type=\"javax.sql.DataSource\"/&gt;\n&lt;/Context&gt;\n</code></pre>\n\n<p>Finally, in order to use the JNDI resource, specify the JNDI name <code>jdbc/DatabaseName</code> in web application's deployment descriptor:</p>\n\n<pre><code>&lt;resource-ref&gt;\n    &lt;description&gt;DatabaseName's Datasource&lt;/description&gt;\n    &lt;res-ref-name&gt;jdbc/DatabaseName&lt;/res-ref-name&gt;\n    &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;\n    &lt;res-auth&gt;Container&lt;/res-auth&gt;\n&lt;/resource-ref&gt; \n</code></pre>\n\n<p>and in Spring context:</p>\n\n<pre><code>&lt;jee:jndi-lookup id=\"DatabaseNameDataSource\"\n   jndi-name=\"jdbc/DatabaseName\"\n   expected-type=\"javax.sql.DataSource\" /&gt;\n</code></pre>\n\n<h2>Approach 3 drawbacks</h2>\n\n<p>If the JNDI name gets changed then both the <code>server.xml</code> and the <code>META-INF/context.xml</code> will have to be edited and a deploy would be necessary; nevertheless this scenario is rare.</p>\n\n<h2>Approach 3 variations</h2>\n\n<p><strong>Many data sources used by one web application</strong></p>\n\n<p>Simply add configurations to Tomcat's <code>server.xml</code>:</p>\n\n<pre><code>&lt;GlobalNamingResources&gt;\n  &lt;Resource name=\"jdbc/ApplicationContext_DatabaseName1\" ... /&gt;\n  &lt;Resource name=\"jdbc/ApplicationContext_DatabaseName2\" ... /&gt;\n  ...\n&lt;/GlobalNamingResources/&gt;\n</code></pre>\n\n<p>Add link web application <code>META-INF/context.xml</code> by an application-private JNDI context <code>java:comp/env/</code> specified in the <code>name</code> attribute:</p>\n\n<pre><code>&lt;Context path=\"/ApplicationContext\" ... &gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContext_DatabaseName1\" name=\"jdbc/DatabaseName1\" ... /&gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContext_DatabaseName2\" name=\"jdbc/DatabaseName2\" ... /&gt;\n  ...\n&lt;/Context&gt;\n</code></pre>\n\n<p>Finally add JNDI resources usage in web application's deployment descriptor:</p>\n\n<pre><code>&lt;resource-ref&gt;\n    &lt;description&gt;DatabaseName1's Datasource&lt;/description&gt;\n    &lt;res-ref-name&gt;jdbc/DatabaseName1&lt;/res-ref-name&gt; ... \n&lt;/resource-ref&gt; \n&lt;resource-ref&gt;\n    &lt;description&gt;DatabaseName2's Datasource&lt;/description&gt;\n    &lt;res-ref-name&gt;jdbc/DatabaseName2&lt;/res-ref-name&gt; ... \n&lt;/resource-ref&gt;\n...\n</code></pre>\n\n<p>and in Spring context:</p>\n\n<pre><code>&lt;jee:jndi-lookup id=\"DatabaseName1DataSource\"\n   jndi-name=\"jdbc/DatabaseName1\" ... /&gt;\n&lt;jee:jndi-lookup id=\"DatabaseName2DataSource\"\n   jndi-name=\"jdbc/DatabaseName2\" ... /&gt;\n...\n</code></pre>\n\n<p><br>\n<strong>Many data sources used by many web application on the same server</strong></p>\n\n<p>Simply add configuration to Tomcat's <code>server.xml</code>:</p>\n\n<pre><code>&lt;GlobalNamingResources&gt;\n  &lt;Resource name=\"jdbc/ApplicationContextX_DatabaseName1\" ... /&gt;\n  &lt;Resource name=\"jdbc/ApplicationContextX_DatabaseName2\" ... /&gt;\n  &lt;Resource name=\"jdbc/ApplicationContextY_DatabaseName1\" ... /&gt;\n  &lt;Resource name=\"jdbc/ApplicationContextY_DatabaseName2\" ... /&gt;\n  ...\n&lt;/GlobalNamingResources/&gt;\n</code></pre>\n\n<p>the others configuration should be deducible from previous variation case.</p>\n\n<p><br>\n<strong>Many data sources to the same database used by many web application on the same server</strong> </p>\n\n<p>In such case a Tomcat's <code>server.xml</code> configurations like:</p>\n\n<pre><code>&lt;GlobalNamingResources&gt;\n  &lt;Resource name=\"jdbc/ApplicationContextX_DatabaseName\" ... /&gt;\n  &lt;Resource name=\"jdbc/ApplicationContextY_DatabaseName\" ... /&gt;\n</code></pre>\n\n<p>ends up in two different web applications <code>META-INF/context.xml</code>  like:</p>\n\n<pre><code>&lt;Context path=\"/ApplicationContextX\" ... &gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContextX_DatabaseName\" name=\"jdbc/DatabaseName\" ... /&gt;\n&lt;/Context&gt;\n</code></pre>\n\n<p>and like:</p>\n\n<pre><code>&lt;Context path=\"/ApplicationContextY\" ... &gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContextY_DatabaseName\" name=\"jdbc/DatabaseName\" ... /&gt;\n&lt;/Context&gt;\n</code></pre>\n\n<p>so someone might be worried about the fact that the same <code>name=\"jdbc/DatabaseName\"</code> is looked up, and then used, by two different applications deployed on the same server: this is not a problem because the <code>jdbc/DatabaseName</code> is an application-private JNDI context <code>java:comp/env/</code>, so <code>ApplicationContextX</code> <strong>by using <code>java:comp/env/</code></strong> can't (by design) look up the resource linked to <code>global=\"jdbc/ApplicationContextY_DatabaseName\"</code>.</p>\n\n<p>Of course if you felt more relaxed without this worry you might use a different naming strategy like:</p>\n\n<pre><code>&lt;Context path=\"/ApplicationContextX\" ... &gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContextX_DatabaseName\" name=\"jdbc/applicationXprivateDatabaseName\" ... /&gt;\n&lt;/Context&gt;\n</code></pre>\n\n<p>and like:</p>\n\n<pre><code>&lt;Context path=\"/ApplicationContextY\" ... &gt;\n  &lt;ResourceLink global=\"jdbc/ApplicationContextY_DatabaseName\" name=\"jdbc/applicationYprivateDatabaseName\" ... /&gt;\n&lt;/Context&gt;\n</code></pre>\n    "},{"t":"JQuery, Spring MVC @RequestBody and JSON - making it work together","l":"http://stackoverflow.com/questions/5908466/jquery-spring-mvc-requestbody-and-json-making-it-work-together","q":"\n\n<p>I would like to have a bidirectional JSON to Java serialization</p>\n\n<p>I'm using <strong>successfully</strong> the Java to JSON to JQuery path... (<code>@ResponseBody</code>)\ne.g. </p>\n\n<pre><code>@RequestMapping(value={\"/fooBar/{id}\"}, method=RequestMethod.GET)\n     public @ResponseBody FooBar getFooBar(\n            @PathVariable String id,\n            HttpServletResponse response , ModelMap model) {\n        response.setContentType(\"application/json\");\n...\n}\n</code></pre>\n\n<p>and In JQuery I use </p>\n\n<pre><code>$.getJSON('fooBar/1', function(data) {\n    //do something\n});\n</code></pre>\n\n<p>this works <strong>well</strong> (e.g. annotations work already, thanks to all the answerers)</p>\n\n<p>However, how do I do the <strong>reverse</strong> path: have JSON be serialized to a Java Object back using RequestBody? </p>\n\n<p>no matter what I try, I can't get something like this to work:</p>\n\n<pre><code>@RequestMapping(value={\"/fooBar/save\"}, method=RequestMethod.POST)\npublic String saveFooBar(@RequestBody FooBar fooBar,\n        HttpServletResponse response , ModelMap model) {\n\n  //This method is never called. (it does when I remove the RequestBody...)\n}\n</code></pre>\n\n<p>I have Jackson configured correctly (it serializes on the way out) and I have MVC set as annotations driven of course</p>\n\n<p>How do I make it work? is it possible at all? or is Spring / JSON / JQuery is oneway (out)? </p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>I changed this Jackson setting</p>\n\n<pre><code>&lt;bean id=\"jsonHttpMessageConverter\"\n    class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\" /&gt;\n\n&lt;!-- Bind the return value of the Rest service to the ResponseBody. --&gt;\n&lt;bean\n    class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"&gt;\n    &lt;property name=\"messageConverters\"&gt;\n        &lt;util:list id=\"beanList\"&gt;\n            &lt;ref bean=\"jsonHttpMessageConverter\" /&gt;\n&lt;!--            &lt;ref bean=\"xmlMessageConverter\" /&gt; --&gt;              \n        &lt;/util:list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>To the (almost similiar one) suggested </p>\n\n<pre><code>&lt;bean id=\"jacksonMessageConverter\"\n    class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"&gt;&lt;/bean&gt;\n    &lt;bean\n        class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"&gt;\n        &lt;property name=\"messageConverters\"&gt;\n            &lt;list&gt;\n                &lt;ref bean=\"jacksonMessageConverter\" /&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt; \n</code></pre>\n\n<p>And it seems to work! I don't know what exactly did the trick, but it works...</p>\n    ","a":"\n<p>I'm pretty sure you only have to register <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.html\"><code>MappingJacksonHttpMessageConverter</code></a> </p>\n\n<p>(the easiest way to do that <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-config-enable\">is through <code>&lt;mvc:annotation-driven /&gt;</code> in XML or <code>@EnableWebMvc</code> in Java</a>)</p>\n\n<p><strong>See:</strong></p>\n\n<ul>\n<li><a href=\"http://forum.springsource.org/archive/index.php/t-89618.html\">this forum post</a> and</li>\n<li><a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/validation.html#format-configuring-formatting-mvc\">7.6.5 Configuring Formatting in Spring MVC</a></li>\n</ul>\n\n<hr>\n\n<p>Here's a working example:</p>\n\n<p><strong>Maven POM</strong></p>\n\n<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;test&lt;/groupId&gt;&lt;artifactId&gt;json&lt;/artifactId&gt;&lt;packaging&gt;war&lt;/packaging&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;name&gt;json test&lt;/name&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;&lt;!-- spring mvc --&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;&lt;version&gt;3.0.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;&lt;!-- jackson --&gt;\n            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;&lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;&lt;version&gt;1.4.2&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n    &lt;build&gt;&lt;plugins&gt;\n            &lt;!-- javac --&gt;&lt;plugin&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.3.2&lt;/version&gt;&lt;configuration&gt;&lt;source&gt;1.6&lt;/source&gt;&lt;target&gt;1.6&lt;/target&gt;&lt;/configuration&gt;&lt;/plugin&gt;\n            &lt;!-- jetty --&gt;&lt;plugin&gt;&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;&lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;7.4.0.v20110414&lt;/version&gt;&lt;/plugin&gt;\n    &lt;/plugins&gt;&lt;/build&gt;\n&lt;/project&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>in folder src/main/webapp/WEB-INF</strong></p>\n\n<p><strong>web.xml</strong></p>\n\n<pre><code>&lt;web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"\n    version=\"2.4\"&gt;\n    &lt;servlet&gt;&lt;servlet-name&gt;json&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;json&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre>\n\n<p><strong>json-servlet.xml</strong></p>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                        http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n    &lt;import resource=\"classpath:mvc-context.xml\" /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>in folder src/main/resources:</strong></p>\n\n<p><strong>mvc-context.xml</strong></p>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;\n\n    &lt;mvc:annotation-driven /&gt;\n    &lt;context:component-scan base-package=\"test.json\" /&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>In folder src/main/java/test/json</strong></p>\n\n<p><strong>TestController.java</strong></p>\n\n<pre><code>@Controller\n@RequestMapping(\"/test\")\npublic class TestController {\n\n    @RequestMapping(method = RequestMethod.POST, value = \"math\")\n    @ResponseBody\n    public Result math(@RequestBody final Request request) {\n        final Result result = new Result();\n        result.setAddition(request.getLeft() + request.getRight());\n        result.setSubtraction(request.getLeft() - request.getRight());\n        result.setMultiplication(request.getLeft() * request.getRight());\n        return result;\n    }\n\n}\n</code></pre>\n\n<p><strong>Request.java</strong></p>\n\n<pre><code>public class Request implements Serializable {\n    private static final long serialVersionUID = 1513207428686438208L;\n    private int left;\n    private int right;\n    public int getLeft() {return left;}\n    public void setLeft(int left) {this.left = left;}\n    public int getRight() {return right;}\n    public void setRight(int right) {this.right = right;}\n}\n</code></pre>\n\n<p><strong>Result.java</strong></p>\n\n<pre><code>public class Result implements Serializable {\n    private static final long serialVersionUID = -5054749880960511861L;\n    private int addition;\n    private int subtraction;\n    private int multiplication;\n\n    public int getAddition() { return addition; }\n    public void setAddition(int addition) { this.addition = addition; }\n    public int getSubtraction() { return subtraction; }\n    public void setSubtraction(int subtraction) { this.subtraction = subtraction; }\n    public int getMultiplication() { return multiplication; }\n    public void setMultiplication(int multiplication) { this.multiplication = multiplication; }\n}\n</code></pre>\n\n<p>You can test this setup by executing <code>mvn jetty:run</code> on the command line, and then sending a POST request:</p>\n\n<pre><code>URL:        http://localhost:8080/test/math\nmime type:  application/json\npost body:  { \"left\": 13 , \"right\" : 7 }\n</code></pre>\n\n<p>I used the <a href=\"https://addons.mozilla.org/en-US/firefox/addon/poster/\">Poster Firefox plugin</a> to do this.</p>\n\n<p>Here's what the response looks like:</p>\n\n<pre><code>{\"addition\":20,\"subtraction\":6,\"multiplication\":91}\n</code></pre>\n    "},{"t":"Is there a maven 2 archetype for spring 3 MVC applications?","l":"http://stackoverflow.com/questions/2757269/is-there-a-maven-2-archetype-for-spring-3-mvc-applications","q":"\n\n<p>I'm experimenting with the spring 3 MVC framework. Since i use maven 2 to manage my project, i'm searching for a archetype to create a spring 3 MVC application. </p>\n    ","a":"\n<p>You can use <a href=\"http://www.springsource.org/sts\" rel=\"nofollow noreferrer\">STS</a> (spring tool suite) a new spring MVC template project creates a working application using spring 3.</p>\n\n<p>Or you can using <a href=\"http://www.springsource.org/spring-roo/\" rel=\"nofollow noreferrer\">Spring Roo</a> to give a working foundation to your project.</p>\n    "},{"t":"@RequestBody and @ResponseBody annotations in Spring","l":"http://stackoverflow.com/questions/11291933/requestbody-and-responsebody-annotations-in-spring","q":"\n\n<p>Can someone explain the <code>@RequestBody</code> and <code>@ResponseBody</code> annotations in Spring 3? What are they for? Any examples would be great.</p>\n    ","a":"\n<p>There is a whole Section in the docs called <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-requestbody\">16.3.3.4 Mapping the request body with the @RequestBody annotation</a>. And one called <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-responsebody\">16.3.3.5 Mapping the response body with the @ResponseBody annotation</a>. I suggest you consult those sections. Also relevant: <a href=\"http://static.springsource.org/spring/docs/current/javadoc-api/index.html?org/springframework/web/bind/annotation/RequestBody.html\"><code>@RequestBody</code></a> javadocs, <a href=\"http://static.springsource.org/spring/docs/current/javadoc-api/index.html?org/springframework/web/bind/annotation/ResponseBody.html\"><code>@ResponseBody</code></a> javadocs</p>\n\n<p>Usage examples would be something like this:</p>\n\n<p>Using a JavaScript-library like JQuery, you would post a JSON-Object like this:</p>\n\n<pre><code>{ \"firstName\" : \"Elmer\", \"lastName\" : \"Fudd\" }\n</code></pre>\n\n<p>Your controller method would look like this:</p>\n\n<pre><code>// controller\n@ResponseBody @RequestMapping(\"/description\")\npublic Description getDescription(@RequestBody UserStats stats){\n    return new Description(stats.getFirstName() + \" \" + stats.getLastname() + \" hates wacky wabbits\");\n}\n\n// domain / value objects\npublic class UserStats{\n    private String firstName;\n    private String lastName;\n    // + getters, setters\n}\npublic class Description{\n    private String description;\n    // + getters, setters, constructor\n}\n</code></pre>\n\n<p>Now if you have <a href=\"http://jackson.codehaus.org/\">Jackson</a> on your classpath (and have an <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-config-enable\"><code>&lt;mvc:annotation-driven&gt;</code></a> setup), Spring would convert the incoming JSON to a UserStats object from the post body (because you added the <code>@RequestBody</code> annotation) and it would serialize the returned object to JSON (because you added the <code>@ResponseBody</code> annotation). So the Browser / Client would see this JSON result:</p>\n\n<pre><code>{ \"description\" : \"Elmer Fudd hates wacky wabbits\" }\n</code></pre>\n\n<p>See this previous answer of mine for a complete working example: <a href=\"http://stackoverflow.com/a/5908632/342852\">http://stackoverflow.com/a/5908632/342852</a></p>\n\n<p>Note: RequestBody / ResponseBody is of course not limited to JSON, both can handle multiple formats, including plain text and XML, but JSON is probably the most used format.</p>\n\n<hr>\n\n<p><strong>Update:</strong>\nEver since Spring 4.x, you usually won't use <code>@RequestBody</code> on method level, but rather <code>@RestController</code> on class level, with the same effect. See <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-restcontroller\">Creating REST Controllers with the @RestController annotation</a></p>\n    "},{"t":"log4j:WARN No appenders could be found for logger in web.xml","l":"http://stackoverflow.com/questions/1266139/log4jwarn-no-appenders-could-be-found-for-logger-in-web-xml","q":"\n\n<p>I already put the log4jConfigLocation in web.xml, but I still get the following warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>log4j:WARN No appenders could be found for logger ⤦\n    ⤥ (org.springframework.web.context.ContextLoader).\nlog4j:WARN Please initialize the log4j system properly.\n</code></pre>\n\n<p>What did I miss?</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;web-app&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            /WEB-INF/applicationContext.xml\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/classes/log4j.properties&lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;listener&gt;\n        &lt;listener-class&gt;\n            org.springframework.web.util.Log4jConfigListener\n        &lt;/listener-class&gt;\n    &lt;/listener&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;\n            org.springframework.web.context.ContextLoaderListener\n        &lt;/listener-class&gt;\n    &lt;/listener&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;suara2&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;\n            org.springframework.web.servlet.DispatcherServlet\n        &lt;/servlet-class&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;suara2&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre>\n    ","a":"\n<p>If that's the entire log4j.properties file it looks like you're never actually creating a logger. You need a line like:</p>\n\n<pre><code>log4j.rootLogger=debug,A1\n</code></pre>\n    "},{"t":"Why is HibernateDaoSupport not recommended?","l":"http://stackoverflow.com/questions/5104765/why-is-hibernatedaosupport-not-recommended","q":"\n\n<p>I've been doing some work with Hibernate 3.5 and Spring 3 recently, I'm fairly new with Hibernate and thought the <code>HibernateDaoSupport</code> class in Spring made it nice and easy to use Hibernate with my domain classes.</p>\n\n<p>However, while searching for an unrelated question I saw someone mention that the <code>HibernateDaoSupport</code> is not the best way to use Spring and Hibernate. Can anyone shed any light on:</p>\n\n<ul>\n<li>Why is it not recommended?</li>\n<li>What is the best (or at least the accepted) way to integrate Hibernate and Spring?</li>\n</ul>\n    ","a":"\n<p>Using <code>HibernateDaoSupport</code>/<code>HibernateTemplate</code> is not recommended since it unnecessarily\nties your code to Spring classes.</p>\n\n<p>Using these classes was inevitable with older versions of Hibernate in order to integrate support of Spring-managed transactions.</p>\n\n<p>However, since Hibernate 3.0.1 you don't need it any more - you can write a code against a plain Hibernate API while using Spring-managed transactions. All you need is to configure Spring transaction support, inject <code>SessionFactory</code> and call <code>getCurrentSession()</code> on it when you need to work with session. </p>\n\n<p>Another benefit of <code>HibernateTemplate</code> is exception translation. Without <code>HibernateTemplate</code> the same functionality can be achieved by using <code>@Repository</code> annotation, as shown in Gareth Davis's answer.</p>\n\n<p><strong>See also:</strong></p>\n\n<ul>\n<li><a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate-straight\">13.3.2 Implementing DAOs based on plain Hibernate 3 API</a></li>\n</ul>\n    "},{"t":"Can I replace a Spring bean definition at runtime?","l":"http://stackoverflow.com/questions/4041300/can-i-replace-a-spring-bean-definition-at-runtime","q":"\n\n<p>Consider the following scenario. I have a Spring application context with a bean whose properties should be configurable, think <code>DataSource</code> or <code>MailSender</code>. The mutable application configuration is managed by a separate bean, let's call it <code>configuration</code>.</p>\n\n<p>An administrator can now change the configuration values, like email address or database URL, and I would like to re-initialize the configured bean at runtime.</p>\n\n<p>Assume that I can't just simply modify the property of the configurable bean above (e.g. created by <code>FactoryBean</code> or constructor injection) but have to recreate the bean itself.</p>\n\n<p>Any thoughts on how to achieve this? I'd be glad to receive advice on how to organize the whole configuration thing as well. Nothing is fixed. :-)</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>To clarify things a bit: I am not asking how to update the configuration or how to inject static configuration values. I'll try an example:</p>\n\n<pre><code>&lt;beans&gt;\n    &lt;util:map id=\"configuration\"&gt;\n        &lt;!-- initial configuration --&gt;\n    &lt;/util:map&gt;\n\n    &lt;bean id=\"constructorInjectedBean\" class=\"Foo\"&gt;\n        &lt;constructor-arg value=\"#{configuration['foobar']}\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"configurationService\" class=\"ConfigurationService\"&gt;\n        &lt;property name=\"configuration\" ref=\"configuration\" /&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>So there's a bean <code>constructorInjectedBean</code> that uses constructor injection. Imagine the construction of the bean is very expensive so using a prototype scope or a factory proxy is not an option, think <code>DataSource</code>.</p>\n\n<p>What I want to do is that every time the configuration is being updated (via <code>configurationService</code> the bean <code>constructorInjectedBean</code> is being recreated and re-injected into the application context and dependent beans.</p>\n\n<p>We can safely assume that <code>constructorInjectedBean</code> is using an interface so proxy magic is indeed an option.</p>\n\n<p>I hope to have made the question a little bit clearer.</p>\n    ","a":"\n<p>I can think of a 'holder bean' approach (essentially a decorator), where the holder bean delegates to holdee, and it's the holder bean which is injected as a dependency into other beans. Nobody else has a reference to holdee but the holder. Now, when the holder bean's config is changed, it recreates the holdee with this new config and starts delegating to it.</p>\n    "},{"t":"Get list of JSON objects with Spring RestTemplate","l":"http://stackoverflow.com/questions/23674046/get-list-of-json-objects-with-spring-resttemplate","q":"\n\n<p>I have two questions:</p>\n\n<ul>\n<li>How to map a list of JSON objects using Spring RestTemplate.</li>\n<li>How to map nested JSON objects.</li>\n</ul>\n\n<p>I am trying to consume <a href=\"https://bitpay.com/api/rates\">https://bitpay.com/api/rates</a>, by following the tutorial from <a href=\"http://spring.io/guides/gs/consuming-rest/\">http://spring.io/guides/gs/consuming-rest/</a>.</p>\n    ","a":"\n<p>Maybe this way...</p>\n\n<pre><code>ResponseEntity&lt;Object[]&gt; responseEntity = restTemplate.getForEntity(urlGETList, Object[].class);\nObject[] objects = responseEntity.getBody();\nMediaType contentType = responseEntity.getHeaders().getContentType();\nHttpStatus statusCode = responseEntity.getStatusCode();\n</code></pre>\n\n<p>Controller code for the <code>RequestMapping</code></p>\n\n<pre><code>@RequestMapping(value=\"/Object/getList/\", method=RequestMethod.GET)\npublic @ResponseBody List&lt;Object&gt; findAllObjects() {\n\n    List&lt;Object&gt; objects = new ArrayList&lt;Object&gt;();\n    return objects;\n}\n</code></pre>\n\n<p><code>ResponseEntity</code> is an extension of <code>HttpEntity</code> that adds a <code>HttpStatus</code> status code. Used in <code>RestTemplate</code> as well <code>@Controller</code> methods.\nIn <code>RestTemplate</code> this class is returned by <code>getForEntity()</code> and <code>exchange()</code>.</p>\n    "},{"t":"Mockito: Inject real objects into private @Autowired fields","l":"http://stackoverflow.com/questions/20270391/mockito-inject-real-objects-into-private-autowired-fields","q":"\n\n<p>I'm using Mockito's <code>@Mock</code> and <code>@InjectMocks</code> annotations to inject dependencies into private fields which are annotated with Spring's <code>@Autowired</code>:</p>\n\n<pre><code>@RunWith(MockitoJUnitRunner.class)\npublic class DemoTest {\n    @Mock\n    private SomeService service;\n\n    @InjectMocks\n    private Demo demo;\n\n    /* ... */\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>public class Demo {\n\n    @Autowired\n    private SomeService service;\n\n    /* ... */\n}\n</code></pre>\n\n<p>Now I would like to also inject <strong>real</strong> objects into private <code>@Autowired</code> fields (without setters). Is this possible or is the mechanism limited to injecting Mocks only?</p>\n    ","a":"\n<p>Use @Spy annotation</p>\n\n<pre><code>@RunWith(MockitoJUnitRunner.class)\npublic class DemoTest {\n    @Spy\n    private SomeService service = new RealServiceImpl();\n\n    @InjectMocks\n    private Demo demo;\n\n    /* ... */\n}\n</code></pre>\n\n<p>Mockito will consider all fields having @Mock or @Spy annotation as potential candidates to be injected into the instance annotated with @InjectMocks annotation. In the above case 'RealServiceImpl' instance will get injected into the 'demo'</p>\n\n<p>For more details refer</p>\n\n<p><a href=\"http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#13\">http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#13</a>\n<a href=\"http://docs.mockito.googlecode.com/hg/latest/org/mockito/Spy.html\">http://docs.mockito.googlecode.com/hg/latest/org/mockito/Spy.html</a></p>\n    "},{"t":"Spring ApplicationContext - Resource leak: 'context' is never closed","l":"http://stackoverflow.com/questions/14184059/spring-applicationcontext-resource-leak-context-is-never-closed","q":"\n\n<p>In a spring MVC application, I initialize a variable in one of the service classes using the following approach:</p>\n\n<pre><code>ApplicationContext context = \n         new ClassPathXmlApplicationContext(\"META-INF/userLibrary.xml\");\nservice = context.getBean(UserLibrary.class);\n</code></pre>\n\n<p>The UserLibrary is a 3rd party utility which I am using in my application. The above code generates a warning for the 'context' variable. The warning is shown below:</p>\n\n<pre><code>Resource leak: 'context' is never closed\n</code></pre>\n\n<p>I don't understand the warning. As the application is a Spring MVC application, I can't really close/destroy the context as I refer to the service while the application is running. What exactly is the warning trying to tell me?</p>\n    ","a":"\n<p>Since the app context is a <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html\"><code>ResourceLoader</code></a> (i.e. I/O operations) it consumes resources that need to be freed at some point. It is also an extension of <code>AbstractApplicationContext</code> which implements <code>Closable</code>. Thus, it's got a <code>close()</code> method and can be used in a <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">try-with-resources statement</a>.</p>\n\n<pre><code>try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"META-INF/userLibrary.xml\")) {\n  service = context.getBean(UserLibrary.class);\n}\n</code></pre>\n\n<p>Whether you actually need to create this context is a different question (you linked to it), I'm not gonna comment on that.</p>\n\n<p>It's true that the context is closed implicitly when the application is stopped but that's not good enough. Eclipse is right, you need to take measures to close it manually for other cases in order to avoid classloader leaks.</p>\n    "},{"t":"Difference between servlet and web service","l":"http://stackoverflow.com/questions/5930795/difference-between-servlet-and-web-service","q":"\n\n<p>What is the difference between these 2? I found few results on google nothing conclusive. </p>\n\n<p>Here is a follow up question: </p>\n\n<p>Say I create spring mvc web app annotate couple of classes with @Controller annotation and create something that will successfully transfer some information from front end -&gt; back end and vice versa and perhaps some database might be involved on the back end side. </p>\n\n<p>What would you call that? Rest web service or servlet or something else ?</p>\n    ","a":"\n<p>Web Service uses ServletContainer class which is again a Servlet class, which handles the request in clean and structured way. \nThe REST stands for REpresentational STateless Protocol. Here the request won't store any data.</p>\n\n<p>The REST Web Service supports HTTP methods </p>\n\n<ol>\n<li><strong>GET</strong> - Usually to fetch data.  </li>\n<li><strong>POST</strong> - To insert new Object.</li>\n<li><strong>PUT</strong>  - To update the existing Object.</li>\n<li><strong>DELETE</strong> -To delete the Object.</li>\n</ol>\n\n<p>We can map any number of URLs to Web Service class which can have any type of HTTP methods.</p>\n\n<p>On other hand, there can be only 1 URL mapping can be done for each servlet.\nThough the end requirement can be achieved with the help of request parameter conditions, but using servlet nowadays won't provide clean way.</p>\n\n<p>In webservice we can define URL path at <strong>Class level</strong> as well as <strong>Method level</strong>, which allows us to code in more structured way.</p>\n    "},{"t":"Singleton design pattern vs Singleton beans in Spring container","l":"http://stackoverflow.com/questions/2637864/singleton-design-pattern-vs-singleton-beans-in-spring-container","q":"\n\n<p>As we all know we have beans as singleton by default in Spring container and if we have a web application based on Spring framework then in that case do we really need to implement Singleton design pattern to hold global data rather than just creating a bean through spring.</p>\n\n<p>Please bear with me if I'm not able to explain what I actually meant to ask.</p>\n    ","a":"\n<p>Singleton scope in Spring means that this bean will be instantiated only once by Spring. In contrast to the prototype scope (new instance each time), request scope (once per request), session scope (once per HTTP session).</p>\n\n<p>Singleton scope has technically noting to do with the singleton design pattern. You don't have to implement your beans as singletons for them to be put in the singleton scope.</p>\n    "},{"t":"DAO and Service layers (JPA/Hibernate + Spring)","l":"http://stackoverflow.com/questions/3882108/dao-and-service-layers-jpa-hibernate-spring","q":"\n\n<p>I'm designing a new app based on JPA/Hibernate, Spring and Wicket. The distinction between the DAO and Service layers isn't that clear to me though. According to Wikipedia, DAO is </p>\n\n<blockquote>\n  <p>an object that provides an abstract\n  interface to some type of database or\n  persistence mechanism, providing some\n  specific operations without exposing\n  details of the database.</p>\n</blockquote>\n\n<p>I was wondering whether a DAO could contain methods that don't really have to do much with data access, but are way easier executed using a query? For example \"get a list of all airlines that operate on a certain set of airports\"? It sounds to me to be more of a service-layer method, but I'm not sure if using JPA EntityManager in the service layer is an example of good practice?</p>\n    ","a":"\n<p>A DAO should provide access to a single <em>related</em> source of data and, depending on how complicated your business model, will return either full fledged Business objects, or simple Data objects.  Either way, the DAO methods should reflect the database somewhat closely.</p>\n\n<p>A Service can provide a higher level interface to not only process your business objects, but to get access to them in the first place.  If I get a business object from a Service, that object may be created from different databases (and different DAO's), it could be decorated with information made from an HTTP request.  It may have certain business logic that converts several data objects into a single, robust, business object.</p>\n\n<p>I generally create a DAO thinking that it will be used by anyone who is going to use that database, or set of business related data, it is literally the lowest level code besides triggers, functions and stored procedures within the database.  </p>\n\n<p><strong>Answers to specific questions:</strong></p>\n\n<blockquote>\n  <p>I was wondering whether a DAO could\n  contain methods that don't really have\n  to do much with data access, but are\n  way easier executed using a query?</p>\n</blockquote>\n\n<p>for most cases no, you would want your more complicated business logic in your service layer, the assembly of data from separate queries.  However, if you're concerned about processing speed, a service layer may delegate an action to a DAO even though it breaks the beauty of the model, in much the same way that a C++ programmer may write assembler code to speed up certain actions.</p>\n\n<blockquote>\n  <p>It sounds to me to be more of a\n  service-layer method, but I'm not sure\n  if using JPA EntityManager in the\n  service layer is an example of good\n  practice?</p>\n</blockquote>\n\n<p>If you're going to use your entity manager in your service, then think of the entity manager as your DAO, because that's exactly what it is.  If you need to remove some redundant query building, don't do so in your service class, extract it into a class that utilized the entity manager and make that your DAO.  If your use case is really simple, you could skip the service layer entirely and use your entity manager, or DAO in controllers because all your service is going to do is pass off calls to <code>getAirplaneById()</code> to the DAO's <code>findAirplaneById()</code></p>\n\n<p>UPDATE - To clarify with regard to the discussion below, using an entity manager in a service is likely not the best decision in most situations where there is also a DAO layer for various reasons highlighted in the comments.  But in my opinion it would be perfectly reasonable given:</p>\n\n<ol>\n<li>The service needs to interact with different sets of data</li>\n<li>At least one set of data already has a DAO</li>\n<li>The service class resides in a module that requires some persistence which is simple enough to not warrant it's own DAO</li>\n</ol>\n\n<p>example.</p>\n\n<pre><code>//some system that contains all our customers information\nclass PersonDao {\n   findPersonBySSN( long ssn )\n}\n\n//some other system where we store pets\nclass PetDao {\n   findPetsByAreaCode()\n   findCatByFullName()\n}\n\n//some web portal your building has this service\nclass OurPortalPetLostAndFoundService {\n\n   notifyOfLocalLostPets( Person p ) {\n      Location l = ourPortalEntityManager.findSingle( PortalUser.class, p.getSSN() )\n        .getOptions().getLocation();\n      ... use other DAO's to get contact information and pets...\n   }\n}\n</code></pre>\n    "},{"t":"How to register Spring @Configuration annotated class instead of applicationContext.xml file in web.xml?","l":"http://stackoverflow.com/questions/8075790/how-to-register-spring-configuration-annotated-class-instead-of-applicationcont","q":"\n\n<p>I am using jsf and spring together in web application. I have configured datasource and session factory in one configuration class which uses annotations like <code>@Configuration, @ComponentScan</code> etc. <strong>I don't have any applicationContext.xml file in my project</strong> as I am handling every entry of context xml in Configuration class. The test case works successfully but when I deploy my web application, it gives me error </p>\n\n<blockquote>\n  <p>java.lang.IllegalStateException: No WebApplicationContext found: no\n  ContextLoaderListener registered?</p>\n</blockquote>\n\n<p>Now if I give listener class in web.xml,</p>\n\n<pre><code>&lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>\n\n<p>it gives me error, </p>\n\n<blockquote>\n  <p>/WEB-INF/applicationContext.xml not found</p>\n</blockquote>\n\n<p>As per the document of <code>ContextLoaderListener</code>, it's true that if I don't give <code>contextConfigLocation</code> param in <code>web.xml</code> explicitly, it will search for the default spring context file named <code>applicationContext.xml</code> in <code>web.xml</code>. Now, what should I do if I don't want to use spring context file and do all the configuration with annotations? How should I register listener class <code>ContextLoaderListener</code> so that without use of xml file and using annotations only, I be able to run my web application with spring and jsf?</p>\n    ","a":"\n<p>In <code>web.xml</code> you need to bootstrap the context with <code>AnnotationConfigWebApplicationContext</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;servlet&gt;\n    &lt;servlet-name&gt;appServlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextClass&lt;/param-name&gt;\n        &lt;param-value&gt;\n            org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n        &lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            org.package.YouConfigurationAnnotatedClass\n        &lt;/param-value&gt;\n    &lt;/init-param&gt;\n&lt;/servlet&gt;\n</code></pre>\n\n<p>And don't forget to use <code>@EnableWebMvc</code> for your MVC annotations to kick in.</p>\n\n<p><em>further reading:</em> </p>\n\n<ul>\n<li><a href=\"http://blog.springsource.com/2011/06/13/spring-3-1-m2-spring-mvc-enhancements-2/\">Spring 3.1 MVC Enhancements</a></li>\n<li><a href=\"http://blog.springsource.com/2011/02/21/spring-3-1-m1-mvc-namespace-enhancements-and-configuration/\">Spring 3.1 MVC Namespace Enhancements And Configuration</a></li>\n</ul>\n\n<h3>EDIT as a \"comments follow up\" =&gt; to be Turing Complete:</h3>\n\n<p>Yes of course you need a listener. Although the above completely answers the question \"<em>How to register Spring @Configuration annotated class instead of applicationContext.xml file in web.xml</em>\", here is an <a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-java-instantiating-container-web\">example</a> from Spring official documentation that layouts the full <code>web.xml</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;web-app&gt;\n  &lt;!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext\n       instead of the default XmlWebApplicationContext --&gt;\n  &lt;context-param&gt;\n      &lt;param-name&gt;contextClass&lt;/param-name&gt;\n      &lt;param-value&gt;\n          org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n      &lt;/param-value&gt;\n  &lt;/context-param&gt;\n\n  &lt;!-- Configuration locations must consist of one or more comma- or space-delimited\n       fully-qualified @Configuration classes. Fully-qualified packages may also be\n       specified for component-scanning --&gt;\n  &lt;context-param&gt;\n      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n      &lt;param-value&gt;com.acme.AppConfig&lt;/param-value&gt;\n  &lt;/context-param&gt;\n\n  &lt;!-- Bootstrap the root application context as usual using ContextLoaderListener --&gt;\n  &lt;listener&gt;\n      &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n  &lt;/listener&gt;\n\n  &lt;!-- Declare a Spring MVC DispatcherServlet as usual --&gt;\n  &lt;servlet&gt;\n      &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n      &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n      &lt;!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext\n           instead of the default XmlWebApplicationContext --&gt;\n      &lt;init-param&gt;\n          &lt;param-name&gt;contextClass&lt;/param-name&gt;\n          &lt;param-value&gt;\n              org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n          &lt;/param-value&gt;\n      &lt;/init-param&gt;\n      &lt;!-- Again, config locations must consist of one or more comma- or space-delimited\n           and fully-qualified @Configuration classes --&gt;\n      &lt;init-param&gt;\n          &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n          &lt;param-value&gt;com.acme.web.MvcConfig&lt;/param-value&gt;\n      &lt;/init-param&gt;\n  &lt;/servlet&gt;\n\n  &lt;!-- map all requests for /app/* to the dispatcher servlet --&gt;\n  &lt;servlet-mapping&gt;\n      &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n      &lt;url-pattern&gt;/app/*&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre>\n    "},{"t":"javax.servlet.ServletException cannot be resolved to a type in spring web app","l":"http://stackoverflow.com/questions/15781902/javax-servlet-servletexception-cannot-be-resolved-to-a-type-in-spring-web-app","q":"\n\n<p>I am developing web app using spring frame work, but i am getting following error in some of the jsp pages.</p>\n\n<pre><code>javax.servlet.ServletException cannot be resolved to a type\n</code></pre>\n\n<p>I have included <code>servlet-api</code> also but still same error message is displaying. How to over come this problem?</p>\n    ","a":"\n<p>I guess this may work, in Eclipse <strong>select your project</strong> →  then click on <strong>project menu bar</strong> on top → goto to <strong>properties</strong> → click on <strong>Targeted Runtimes</strong> → now you must <strong>select a check box</strong> next to the server you are using to run current project → click <strong>Apply</strong> → then click <strong>OK button</strong>. That's it, give a try.</p>\n    "},{"t":"Sun JSTL taglib declaration fails with “Can not find the tag library descriptor” [duplicate]","l":"http://stackoverflow.com/questions/13595511/sun-jstl-taglib-declaration-fails-with-can-not-find-the-tag-library-descriptor","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/13285826/can-not-find-the-tag-library-descriptor-for-http-java-sun-com-jsp-jstl-core\" dir=\"ltr\">Can not find the tag library descriptor for “http://java.sun.com/jsp/jstl/core”</a>\n                <span class=\"question-originals-answer-count\">\n                    5 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I am using a JSP page to print an array of values. I'm trying to use JSTL <code>&lt;c:forEach&gt;</code> for this.</p>\n\n<pre><code>&lt;c:forEach items=\"${objects}\" var=\"object\"&gt;\n    &lt;td&gt;${object.name} &lt;/td&gt;\n&lt;/c:forEach&gt;\n</code></pre>\n\n<p>The problem is my JSTL taglib declaration:</p>\n\n<pre><code> &lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%&gt;\n</code></pre>\n\n<p>The IDE shows an error on this line</p>\n\n<blockquote>\n  <p>Can not find the tag library descriptor.</p>\n</blockquote>\n\n<p>Many of the forums point to the old Sun site to download the JSTL libraries. Now all of these links point to the Oracle home page with no link to JSTL binaries. This is leading me to believe there is a newer approach to accomplish this.</p>\n    ","a":"\n<p>To resolve this issue: </p>\n\n<ol>\n<li><p>The <code>jstl jar</code> should be in your classpath. If you are using <em>maven</em>, add a dependency to jstl in your <code>pom.xml</code> using the snippet provided <a href=\"http://mvnrepository.com/artifact/jstl/jstl/1.2\">here</a>. If you are not using <em>maven</em>, download the jstl jar from <a href=\"http://repo1.maven.org/maven2/jstl/jstl/1.2/jstl-1.2.jar\">here</a> and deploy it into your <code>WEB-INF/lib</code>.</p></li>\n<li><p>Make sure you have the following taglib directive at the top of your <code>jsp</code>:</p>\n\n<pre><code> &lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%&gt;\n</code></pre></li>\n</ol>\n    "},{"t":"Spring @PostConstruct vs. init-method attribute","l":"http://stackoverflow.com/questions/8519187/spring-postconstruct-vs-init-method-attribute","q":"\n\n<p>Is there any difference between using the <code>@PostConstruct</code> annotation and declaring the same method as <code>init-method</code> in Spring XML configuration?</p>\n    ","a":"\n<p>No practically I don't think there is any difference but there are priorities in the way they work. <code>@PostConstruct</code>, <code>init-method</code> are BeanPostProcessors.</p>\n\n<ol>\n<li><code>@PostConstruct</code> is a JSR-250 annotation while <code>init-method</code> is Spring's way of having an initializing method.</li>\n<li>If you have a <code>@PostConstruct</code> method, this will be called first before the initializing methods are called.</li>\n<li>If your bean implements InitializingBean and overrides <code>afterPropertiesSet</code> , first <code>@PostConstruct</code> is called, then the <code>afterPropertiesSet</code> and then <code>init-method</code>.</li>\n</ol>\n\n<p>For more info you can check Spring's <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-lifecycle-combined-effects\">reference documentation</a>.</p>\n    "},{"t":"Injecting EntityManager Vs. EntityManagerFactory","l":"http://stackoverflow.com/questions/1310087/injecting-entitymanager-vs-entitymanagerfactory","q":"\n\n<p>A long question, please bear with me.</p>\n\n<p>We are using Spring+JPA for a web application. My team is debating over injecting <code>EntityManagerFactory</code> in the <code>GenericDAO</code> (a DAO based on Generics something on the lines provided by APPFUSE, we do not use <code>JpaDaosupport</code> for some reason) over injecting an <code>EntityManager</code>. We are using \"application managed persistence\".</p>\n\n<p>The arguments against injecting a <code>EntityManagerFactory</code> is that its too heavy and so is not required, the <code>EntityManager</code> does what we need. Also, as Spring would create a new instance of a DAO for every web request(I doubt this) there are not going to be any concurrency issues as in the same <code>EntityManager</code> instance is shared by two threads.</p>\n\n<p>The argument for injecting EFM is that its a good practice over all its always good to have a handle to a factory.</p>\n\n<p>I am not sure which is the best approach, can someone please enlighten me?</p>\n    ","a":"\n<p>The pros and cons of injecting EntityManagerFactory vs EntityManager are all spelled out in the Spring docs <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/orm.html#orm-jpa-straight\" rel=\"nofollow noreferrer\">here</a>, I'm not sure if I can improve on that.</p>\n\n<p>Saying that, there are some points in your question that should be cleared up.</p>\n\n<blockquote>\n  <p>...Spring would create a new instance of\n  a DAO for every web request...</p>\n</blockquote>\n\n<p>This is not correct. If your DAO is a Spring bean, then it's a singleton, unless you configure it otherwise via the <code>scope</code> attribute in the bean definition. Instantiating a DAO for every request would be crazy.</p>\n\n<blockquote>\n  <p>The argument for injecting EMF is that\n  its a good practice over all its\n  always good to have a handle to a\n  factory.</p>\n</blockquote>\n\n<p>This argument doesn't really hold water. General good practice says that an object should be injected with the minimum collaborators it needs to do its job. </p>\n    "},{"t":"POSTing a @OneToMany sub-resource association in Spring Data REST","l":"http://stackoverflow.com/questions/25311978/posting-a-onetomany-sub-resource-association-in-spring-data-rest","q":"\n\n<p>Currently I have a Spring Boot application using Spring Data REST. I have a domain entity <code>Post</code> which has the <code>@OneToMany</code> relationship to another domain entity, <code>Comment</code>. These classes are structured as follows:</p>\n\n<p>Post.java:</p>\n\n<pre><code>@Entity\npublic class Post {\n\n    @Id\n    @GeneratedValue\n    private long id;\n    private String author;\n    private String content;\n    private String title;\n\n    @OneToMany\n    private List&lt;Comment&gt; comments;\n\n    // Standard getters and setters...\n}\n</code></pre>\n\n<p>Comment.java:</p>\n\n<pre><code>@Entity\npublic class Comment {\n\n    @Id\n    @GeneratedValue\n    private long id;\n    private String author;\n    private String content;\n\n    @ManyToOne\n    private Post post;\n\n    // Standard getters and setters...\n}\n</code></pre>\n\n<p>Their Spring Data REST JPA repositories are basic implementations of <code>CrudRepository</code>:</p>\n\n<p>PostRepository.java:</p>\n\n<pre><code>public interface PostRepository extends CrudRepository&lt;Post, Long&gt; { }\n</code></pre>\n\n<p>CommentRepository.java:</p>\n\n<pre><code>public interface CommentRepository extends CrudRepository&lt;Comment, Long&gt; { }\n</code></pre>\n\n<p>The application entry point is a standard, simple Spring Boot application. Everything is configured stock.</p>\n\n<p>Application.java</p>\n\n<pre><code>@Configuration\n@EnableJpaRepositories\n@Import(RepositoryRestMvcConfiguration.class)\n@EnableAutoConfiguration\npublic class Application {\n\n    public static void main(final String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre>\n\n<p>Everything appears to work correctly. When I run the application, everything appears to work correctly. I can POST a new Post object to <code>http://localhost:8080/posts</code> like so:</p>\n\n<p>Body: \n<code>{\"author\":\"testAuthor\", \"title\":\"test\", \"content\":\"hello world\"}</code></p>\n\n<p>Result at <code>http://localhost:8080/posts/1</code>:</p>\n\n<pre><code>{\n    \"author\": \"testAuthor\",\n    \"content\": \"hello world\",\n    \"title\": \"test\",\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:8080/posts/1\"\n        },\n        \"comments\": {\n            \"href\": \"http://localhost:8080/posts/1/comments\"\n        }\n    }\n}\n</code></pre>\n\n<p>However, when I perform a GET at <code>http://localhost:8080/posts/1/comments</code> I get an empty object <code>{}</code> returned,  and if I try to POST a comment to the same URI, I get an HTTP 405 Method Not Allowed.</p>\n\n<p>What is the correct way to create a <code>Comment</code> resource and associate it with this <code>Post</code>? I'd like to avoid POSTing directly to <code>http://localhost:8080/comments</code> if possible.</p>\n    ","a":"\n<p>I faced the same scenario and I had to remove the repository class for the sub entity as I have used one to many mapping and pull data thru the main entity itself. Now I am getting the entire response with data.</p>\n    "},{"t":"Spring vs EJB. Can Spring replace EJB? [closed]","l":"http://stackoverflow.com/questions/1779169/spring-vs-ejb-can-spring-replace-ejb","q":"\n\n<p>Since <a href=\"http://en.wikipedia.org/wiki/Spring_Framework\" rel=\"nofollow noreferrer\">Spring</a> is able to use transactions just like <a href=\"http://en.wikipedia.org/wiki/Enterprise_JavaBean\" rel=\"nofollow noreferrer\">EJB</a>. For me, Spring is able to replace the requirement of using EJB. Can anyone tell me what are the extra advantages of using EJB? </p>\n    ","a":"\n<p>Spring was developed as an alternative to EJB right from its inception, so the answer is of course you can use Spring in place of EJBs.</p>\n\n<p>If there's an \"advantage\" to using EJBs, I'd say that it would depend on the skills of your team.  If you have no Spring expertise, and lots of EJB experience, then maybe sticking with EJB 3.0 is a good move.</p>\n\n<p>App servers written to support the EJB standard can, in theory, be ported from one compliant Java EE app server to another.  But that means staying away from any and all vendor-specific extensions that lock you in to one vendor.</p>\n\n<p>Spring ports easily between app servers (e.g., WebLogic, Tomcat, JBOSS, etc.) because it doesn't depend on them.</p>\n\n<p>However, you are locked into Spring.</p>\n\n<p>Spring encourages good OO design practices (e.g., interfaces, layers, separation of concerns) that benefit any problem they touch, even if you decide to switch to Guice or another DI framework.  </p>\n\n<p>Update: This question and answer are five years old in 2014.  It needs to be said that the world of programming and application development have changed a great deal in that time.</p>\n\n<p>It's no longer just a choice between Java or C#, Spring or EJBs.  With <a href=\"http://vertx.io/\" rel=\"nofollow noreferrer\">vert.x</a> it's possible to eschew Java EE altogether.  You can write highly scalable, \npolyglot applications without an app server.</p>\n\n<p>Update: It's Mar 2016 now.  Spring Boot offers an even better way to write applications without Java EE app servers.  You can create an executable JAR and run it on a JVM.</p>\n\n<p>I wonder if Oracle will continue to support the Java EE spec.  Web services have taken over for EJBs.  The EJB solution is dead.  (Just my opinion.)</p>\n    "},{"t":"@Autowired static field. Spring 2.5","l":"http://stackoverflow.com/questions/1018797/autowired-static-field-spring-2-5","q":"\n\n<p>Is there some way to use <code>@Autowired</code> with static fields. If not, are there some other ways to do this?</p>\n    ","a":"\n<p>In short, no. You cannot autowire or manually wire static fields in Spring. You'll have to write your own logic to do this.</p>\n    "},{"t":"How to implement pagination in Spring MVC 3","l":"http://stackoverflow.com/questions/2245035/how-to-implement-pagination-in-spring-mvc-3","q":"\n\n<p>Is there any out-of-the-box, easy to implement, standard pagination component/tag-lib or code-sample available for pagination in Spring MVC?</p>\n    ","a":"\n<p>Have a look at <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/beans/support/PagedListHolder.html\" rel=\"nofollow noreferrer\"><code>PagedListHolder</code></a> and other classes from  <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/beans/support/package-summary.html\" rel=\"nofollow noreferrer\"><code>org.springframework.beans.support</code></a>. </p>\n\n<p>See the JPetstore in the samples for some examples, e.g. in <a href=\"https://src.springframework.org/svn/spring-samples/jpetstore/trunk/org.springframework.samples.jpetstore/src/main/java/org/springframework/samples/jpetstore/web/spring/SearchProductsController.java\" rel=\"nofollow noreferrer\"><code>SearchProductsController.java</code></a>:</p>\n\n<pre><code>public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    String keyword = request.getParameter(\"keyword\");\n    if (keyword != null) {\n        if (!StringUtils.hasLength(keyword)) {\n            return new ModelAndView(\"Error\", \"message\", \"Please enter a keyword to search for, then press the search button.\");\n        }\n        PagedListHolder productList = new PagedListHolder(this.petStore.searchProductList(keyword.toLowerCase()));\n        productList.setPageSize(4);\n        request.getSession().setAttribute(\"SearchProductsController_productList\", productList);\n        return new ModelAndView(\"SearchProducts\", \"productList\", productList);\n    }\n    else {\n        String page = request.getParameter(\"page\");\n        PagedListHolder productList = (PagedListHolder) request.getSession().getAttribute(\"SearchProductsController_productList\");\n        if (productList == null) {\n            return new ModelAndView(\"Error\", \"message\", \"Your session has timed out. Please start over again.\");\n        }\n        if (\"next\".equals(page)) {\n            productList.nextPage();\n        }\n        else if (\"previous\".equals(page)) {\n            productList.previousPage();\n        }\n        return new ModelAndView(\"SearchProducts\", \"productList\", productList);\n    }\n}\n</code></pre>\n    "},{"t":"Spring: Why do we autowire the interface and not the implemented class?","l":"http://stackoverflow.com/questions/12899372/spring-why-do-we-autowire-the-interface-and-not-the-implemented-class","q":"\n\n<p><strong>Example</strong></p>\n\n<pre><code>interface IA\n{\n  public void someFunction();\n}\n\n@Resource(name=\"b\")\nclass B implements IA\n{\n  public void someFunction()\n  {\n    //busy code block\n  }\n  public void someBfunc()\n  {\n     //doing b things\n  }\n}\n\n@Resource(name=\"c\")\nclass C implements IA\n{\n  public void someFunction()\n  {\n    //busy code block\n  }\n  public void someCfunc()\n  {\n     //doing C things\n  }\n}\n\nclass MyRunner\n{\n\n  @Autowire\n  @Qualifier(\"b\") \n  IA worker;\n\n  worker.someFunction();\n}\n</code></pre>\n\n<p>Can someone explain this to me. </p>\n\n<ul>\n<li>How does spring know which polymorphic type to use. </li>\n<li>Do I need <code>@Qualifier</code> or <code>@Resource</code>? </li>\n<li>Why do we autowire the interface and not the implemented class?</li>\n</ul>\n    ","a":"\n<blockquote>\n  <p>How does spring know which polymorphic type to use.</p>\n</blockquote>\n\n<p>As long as there is only a single implementation of the interface and that implementation is annotated with <code>@Component</code> with Spring's component scan enabled, Spring framework can find out the (interface, implementation) pair. If component scan is not enabled, then you have to define the bean explicitly in your application-config.xml (or equivalent spring configuration file).</p>\n\n<blockquote>\n  <p>Do I need @Qualifier or @Resource?</p>\n</blockquote>\n\n<p>Once you have more than one implementation, then you need to qualify each of them and during auto-wiring, you would need to use the <code>@Qualifier</code> annotation to inject the right implementation, along with <code>@Autowired</code> annotation. If you are using @Resource (J2EE semantics), then you should specify the bean name using the <code>name</code> attribute of this annotation.</p>\n\n<blockquote>\n  <p>Why do we autowire the interface and not the implemented class?</p>\n</blockquote>\n\n<p>Firstly, it is always a good practice to code to interfaces in general. Secondly, in case of spring, you can inject any implementation at runtime. A typical use case is to inject mock implementation during testing stage.</p>\n\n<pre><code>interface IA\n{\n  public void someFunction();\n}\n\n\nclass B implements IA\n{\n  public void someFunction()\n  {\n    //busy code block\n  }\n  public void someBfunc()\n  {\n     //doing b things\n  }\n}\n\n\nclass C implements IA\n{\n  public void someFunction()\n  {\n    //busy code block\n  }\n  public void someCfunc()\n  {\n     //doing C things\n  }\n}\n\nclass MyRunner\n{\n     @Autowire\n     @Qualifier(\"b\") \n     IA worker;\n\n     ....\n     worker.someFunction();\n}\n</code></pre>\n\n<p>Your bean configuration should look like this:</p>\n\n<pre><code>&lt;bean id=\"b\" class=\"B\" /&gt;\n&lt;bean id=\"c\" class=\"C\" /&gt;\n&lt;bean id=\"runner\" class=\"MyRunner\" /&gt;\n</code></pre>\n\n<p>Alternatively, if you enabled component scan on the package where these are present, then you should qualify each class with <code>@Component</code> as follows:</p>\n\n<pre><code>interface IA\n{\n  public void someFunction();\n}\n\n@Component(value=\"b\")\nclass B implements IA\n{\n  public void someFunction()\n  {\n    //busy code block\n  }\n  public void someBfunc()\n  {\n     //doing b things\n  }\n}\n\n\n@Component(value=\"c\")\nclass C implements IA\n{\n  public void someFunction()\n  {\n    //busy code block\n  }\n  public void someCfunc()\n  {\n     //doing C things\n  }\n}\n\n@Component    \nclass MyRunner\n{\n     @Autowire\n     @Qualifier(\"b\") \n     IA worker;\n\n     ....\n     worker.someFunction();\n}\n</code></pre>\n\n<p>Then <code>worker</code> in <code>MyRunner</code> will be injected with an instance of type <code>B</code>.</p>\n    "},{"t":"“NoClassDefFoundError: Could not initialize class” error","l":"http://stackoverflow.com/questions/1401111/noclassdeffounderror-could-not-initialize-class-error","q":"\n\n<p>When I run my project, I get numerous outputs of this error:</p>\n\n<pre>Sep 9, 2009 8:22:23 AM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet Jersey threw exception\njava.lang.NoClassDefFoundError: Could not initialize class SpringFactory\n        at com.point2.prospect.persistence.hibernate.HibernateTransactionInterceptor.doFilter(HibernateTrans\nactionInterceptor.java:17)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at com.point2.prospect.restapi.ServerErrorInterceptor.doFilter(ServerErrorInterceptor.java:27)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n        at java.lang.Thread.run(Thread.java:619)\n</pre>\n\n<p>I notice that this problem has a pattern of being asked all over the web, but with no real answers. What is a general cause for this kind of error?</p>\n    ","a":"\n<p>NoClassDefFound error is a nebulous error and is often hiding a more serious issue. It is <em>not</em> the same as ClassNotFoundException (which is thrown when the class is just plain not there).</p>\n\n<p>NoClassDefFound <em>may</em> indicate the class is not there, as the javadocs indicate, but it is typically thrown when, after the classloader has loaded the bytes for the class and calls \"defineClass\" on them.  Also carefully check your full stack trace for other clues or possible \"cause\" Exceptions (though your particular backtrace shows none).</p>\n\n<p>The first place to look when you get a NoClassDefFoundError is in the static bits of your class i.e. any initialization that takes place during the defining of the class. If this fails it will throw a NoClassDefFoundError - it's supposed to throw an ExceptionInInitializerError and indicate the details of the problem but in my experience, these are rare. It will only do the ExceptionInInitializerError the first time it tries to define the class, after that it will just throw NoClassDefFound.  So look at earlier logs.</p>\n\n<p>I would thus suggest looking at the code in that HibernateTransactionInterceptor line and seeing what it is requiring. It seems that it is unable to define the class SpringFactory. So maybe check the initialization code in that class, that might help. \nIf you can debug it, stop it at the last line above (17) and debug into so you can try find the exact line that is causing the exception. Also check higher up in the log, if you very lucky there might be an ExceptionInInitializerError.</p>\n    "},{"t":"Spring Boot Context Root","l":"http://stackoverflow.com/questions/20405474/spring-boot-context-root","q":"\n\n<p>I am trying to set a Spring Boot applications context root programatically. The reason for the context root is we want the app to be accessed from localhost:port/{app_name} and have all the controller paths append to it. </p>\n\n<p>Here is the application configuration file for the web-app.</p>\n\n<pre><code>@Configuration\npublic class ApplicationConfiguration {\n\n  Logger logger = LoggerFactory.getLogger(ApplicationConfiguration.class);\n\n  @Value(\"${mainstay.web.port:12378}\")\n  private String port;\n\n  @Value(\"${mainstay.web.context:/mainstay}\")\n  private String context;\n\n  private Set&lt;ErrorPage&gt; pageHandlers;\n\n  @PostConstruct\n  private void init(){\n      pageHandlers = new HashSet&lt;ErrorPage&gt;();\n      pageHandlers.add(new ErrorPage(HttpStatus.NOT_FOUND,\"/notfound.html\"));\n      pageHandlers.add(new ErrorPage(HttpStatus.FORBIDDEN,\"/forbidden.html\"));\n  }\n\n  @Bean\n  public EmbeddedServletContainerFactory servletContainer(){\n      TomcatEmbeddedServletContainerFactory factory = new TomcatEmbeddedServletContainerFactory();\n      logger.info(\"Setting custom configuration for Mainstay:\");\n      logger.info(\"Setting port to {}\",port);\n      logger.info(\"Setting context to {}\",context);\n      factory.setPort(Integer.valueOf(port));\n      factory.setContextPath(context);\n      factory.setErrorPages(pageHandlers);\n      return factory;\n  }\n\n  public String getPort() {\n      return port;\n  }\n\n  public void setPort(String port) {\n      this.port = port;\n  }\n}\n</code></pre>\n\n<p>Here is the index controller for the main page. </p>\n\n<pre><code>@Controller\npublic class IndexController {\n\n  Logger logger = LoggerFactory.getLogger(IndexController.class);\n\n  @RequestMapping(\"/\")\n  public String index(Model model){\n      logger.info(\"Setting index page title to Mainstay - Web\");\n      model.addAttribute(\"title\",\"Mainstay - Web\");\n      return \"index\";\n  }\n\n}\n</code></pre>\n\n<p>The new root of the application should be at localhost:12378/mainstay but it is still located at localhost:12378. </p>\n\n<p>What am I missing that is causing Spring Boot to not append the context root before the request mapping?</p>\n    ","a":"\n<p>Why are you trying to roll your own solution. Spring-boot already supports that.</p>\n\n<p>If you don't already have one, add an <code>application.properties</code> file to <code>src\\main\\resources</code>. In that properties file, add 2 properties:</p>\n\n<pre><code>server.contextPath=/mainstay\nserver.port=12378\n</code></pre>\n\n<p>You can then remove your configuration for the custom servlet container. If you need to do some post processing on the container you can add a <code>EmbeddedServletContainerCustomizer</code> implementation to your configuration (for instance to add the error pages).</p>\n\n<p>Basically the properties inside the <code>application.properties</code> serve as a default you can always override them by using another <code>application.properties</code> next to the artifact you deliver or by adding JVM parameters (<code>-Dserver.port=6666</code>).</p>\n\n<p>See also <a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle\">http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle</a></p>\n\n<p>The class <a href=\"https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\"><code>ServerProperties</code></a> implements the <code>EmbeddedServletContainerCustomizer</code>. The default for <code>contextPath</code> is <code>\"\"</code>. In your code sample you are setting the <code>contextPath</code> directly on the <code>TomcatEmbeddedServletContainerFactory</code>. Next the <code>ServerProperties</code> instance will process this instance and reset it from your path to <code>\"\"</code>. (<a href=\"https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java#L110\">This line</a> does a <code>null</code> check but as the default is <code>\"\"</code> it always fail and set the context to <code>\"\"</code> and thus overriding yours).</p>\n    "},{"t":"How can I use Spring Security without sessions?","l":"http://stackoverflow.com/questions/2504590/how-can-i-use-spring-security-without-sessions","q":"\n\n<p>I am building a web application with Spring Security that will live on Amazon EC2 and use Amazon's Elastic Load Balancers. Unfortunately, ELB does not support sticky sessions, so I need to ensure my application works properly without sessions.</p>\n\n<p>So far, I have setup RememberMeServices to assign a token via a cookie, and this works fine, but I want the cookie to expire with the browser session (e.g. when the browser closes).</p>\n\n<p>I have to imagine I'm not the first one to want to use Spring Security without sessions... any suggestions?</p>\n    ","a":"\n<p>It seems to be even easier in Spring Securitiy 3.0. If you're using namespace configuration, you can simply do as follows:</p>\n\n<pre><code>&lt;http create-session=\"never\"&gt;\n  &lt;!-- config --&gt;\n&lt;/http&gt;\n</code></pre>\n\n<p>Or you could configure the SecurityContextRepository as null, and nothing would ever get saved that way <a href=\"http://static.springsource.org/spring-security/site/docs/3.0.x/reference/core-web-filters.html#security-context-repository\" rel=\"nofollow noreferrer\">as well</a>.</p>\n    "},{"t":"Java 1.8 ASM ClassReader failed to parse class file - probably due to a new Java class file version that isn't supported yet","l":"http://stackoverflow.com/questions/22526695/java-1-8-asm-classreader-failed-to-parse-class-file-probably-due-to-a-new-java","q":"\n\n<p>My web application runs fine on JDK 1.7 but crashes on 1.8 with the following exception (during application server startup with Jetty 8). I am using Spring version: 3.2.5.RELEASE.</p>\n\n<h2>Exception:</h2>\n\n<p><code>org.springframework.core.NestedIOException: ASM ClassReader failed to parse class file - probably due to a new Java class file version that isn't supported yet</code></p>\n\n<p>I assume that problem occurs because of spring and \"asm.jar\" library on which it depends. </p>\n\n<p>How do I resolve this?</p>\n    ","a":"\n<p>As @prunge and @Pablo Lozano stated, you need Spring 4 if you want compile code to Java 8 (--target 1.8), but you can still run apps on Java 8 compiled to Java 7 if you run on Spring 3.2.X.</p>\n\n<p>Check out \n<a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/new-in-4.0.html\">http://docs.spring.io/spring/docs/current/spring-framework-reference/html/new-in-4.0.html</a></p>\n\n<blockquote>\n  <p>Note that the Java 8 bytecode level (-target 1.8, as required by -source 1.8) is only fully supported as of Spring Framework 4.0. In particular, Spring 3.2 based applications need to be compiled with a maximum of Java 7 as the target, even if they happen to be deployed onto a Java 8 runtime. Please upgrade to Spring 4 for Java 8 based applications.</p>\n</blockquote>\n    "},{"t":"Spring Boot not serving static content","l":"http://stackoverflow.com/questions/24661289/spring-boot-not-serving-static-content","q":"\n\n<p>I'm banging my head against the wall for a couple of hours now. My project is almost finished, but I can't get it to serve static content.</p>\n\n<p>I've placed a folder named <code>static</code> under <code>src/main/resources</code>. Inside it I have a folder named <code>images</code>. When I package the app and run it, it can't find the images I have put on that folder.</p>\n\n<p>I've tried to put the static files in <code>public</code>, <code>resources</code> and <code>META-INF/resources</code> but nothing works.</p>\n\n<p>If I jar -tvf app.jar I can see that the files are inside the jar on the right folder:\n<code>/static/images/head.png</code> for example, but calling: <code>http://localhost:8080/images/head.png</code>, all I get is a <code>404</code></p>\n\n<p>Any ideas why spring-boot is not finding this? (I'm using 1.1.4 BTW)</p>\n    ","a":"\n<p>I had a similar problem, and it turned out that the simple solution was to have my configuration class extend <code>WebMvcAutoConfiguration</code>:</p>\n\n<pre><code>@Configuration\n@EnableWebMvc\n@ComponentScan\npublic class ServerConfiguration extends WebMvcAutoConfiguration{\n}\n</code></pre>\n\n<p>I didn't need any other code to allow my static content to be served, however, I did put a directory called <code>public</code> under <code>src/main/webapp</code> and configured maven to point to <code>src/main/webapp</code> as a resource directory. This means that <code>public</code> is copied into <code>target/classes</code>, and is therefore on the classpath at runtime for spring-boot/tomcat to find.</p>\n    "},{"t":"How do I prevent Spring 3.0 MVC @ModelAttribute variables from appearing in URL?","l":"http://stackoverflow.com/questions/2163517/how-do-i-prevent-spring-3-0-mvc-modelattribute-variables-from-appearing-in-url","q":"\n\n<p>Using Spring MVC 3.0.0.RELEASE, I have the following Controller:</p>\n\n<pre><code>@Controller\n@RequestMapping(\"/addIntake.htm\")\npublic class AddIntakeController{\n\n  private final Collection&lt;String&gt; users;\n\n  public AddIntakeController(){\n    users = new ArrayList&lt;String&gt;();\n    users.add(\"user1\");\n    users.add(\"user2\");\n    // ...\n    users.add(\"userN\");\n  }\n\n  @ModelAttribute(\"users\")\n  public Collection&lt;String&gt; getUsers(){\n    return this.users;\n  }\n\n  @RequestMapping(method=RequestMethod.GET)\n  public String setupForm(ModelMap model){\n\n    // Set up command object\n    Intake intake = new Intake();\n    intake.setIntakeDate(new Date());\n    model.addAttribute(\"intake\", intake);\n\n    return \"addIntake\";\n  }\n\n  @RequestMapping(method=RequestMethod.POST)\n  public String addIntake(@ModelAttribute(\"intake\")Intake intake, BindingResult result){\n\n    // Validate Intake command object and persist to database\n    // ...\n\n    String caseNumber = assignIntakeACaseNumber();\n\n    return \"redirect:intakeDetails.htm?caseNumber=\" + caseNumber;\n\n  }\n\n}\n</code></pre>\n\n<p>The Controller reads Intake information from a command object populated from an HTML form, validates the command object, persists the information to the database, and returns a case number.</p>\n\n<p>Everything works great, except for when I redirect to the intakeDetails.htm page, I get a URL that looks like this:</p>\n\n<p><code>http://localhost:8080/project/intakeDetails.htm?caseNumber=1&amp;users=user1&amp;users=user2&amp;users=user3&amp;users=user4...</code></p>\n\n<p>How do I prevent the user Collection from showing up in the URL? </p>\n    ","a":"\n<p>Since spring 3.1 the <code>RequestMappingHandlerAdapter</code> provides a flag called <code>ignoreDefaultModelOnRedirect</code>that you can use to prevent using the content of the defautl model if the controller redirects.</p>\n    "},{"t":"How to accept Date params in a GET request to Spring MVC Controller?","l":"http://stackoverflow.com/questions/15164864/how-to-accept-date-params-in-a-get-request-to-spring-mvc-controller","q":"\n\n<p>I've a GET request that sends a date in YYYY-MM-DD format to a Spring Controller.\nThe controller code is as follows:</p>\n\n<pre><code>@RequestMapping(value=\"/fetch\" , method=RequestMethod.GET)\n    public @ResponseBody String fetchResult(@RequestParam(\"from\") Date fromDate) {\n        //Content goes here\n    }\n</code></pre>\n\n<p>The request is sent correctly as I'm checking with Firebug.\nI get the error:</p>\n\n<blockquote>\n  <p>HTTP Status 400: The request sent by the client was syntactically incorrect.</p>\n</blockquote>\n\n<p>How can I make the controller accept this format of Date? \nPlease help. What am I doing wrong?</p>\n    ","a":"\n<p>Ok, I solved it.\nWriting it for anyone who might be tired after a full day of non-stop coding &amp; miss such a silly thing.</p>\n\n<pre><code>@RequestMapping(value=\"/fetch\" , method=RequestMethod.GET)\n    public @ResponseBody String fetchResult(@RequestParam(\"from\") @DateTimeFormat(pattern=\"yyyy-MM-dd\") Date fromDate) {\n        //Content goes here\n    }\n</code></pre>\n\n<p>Yes, it's simple. Just add the DateTimeFormat annotation.</p>\n    "},{"t":"Is CDI a good replacement of Spring?","l":"http://stackoverflow.com/questions/5973364/is-cdi-a-good-replacement-of-spring","q":"\n\n<p>We are planning to write a web application from the scratch, it has been decided to go with the latest edition of Glassfish which complies to Java EE 6 standard, therefore we are analyzing if CDI can be use instead of Spring. </p>\n\n<p>Can we say that CDI could be a replacement for Spring?</p>\n    ","a":"\n<p>CDI stands for \"context and dependency injection\", while Spring is a complete ecosystem around a dependency injection container. To compare both, you have to differentiate the comparison.</p>\n\n<p><strong>Dependency injection</strong> is handled by both containers. The main difference is the fact that CDI handles DI in a <em>dynamic</em> (aka: stateful) way -  this means that dependencies are resolved at <em>execution time</em>. Spring's approach is <em>static</em> - this means that components are wired together at <em>creation time</em>. While the CDI-way might seem a bit unusual at a first glimpse, it's far superior and offers way more and advanced options (I'm writing this with the background of two productive CDI apps). </p>\n\n<p>If you look at the <strong>ecosystem</strong>, the situation is different: Spring comes bundled with <em>a lot of</em> jars (&gt;150), while CDI is pretty small by itself. A typical CDI-usage would be inside of a Java EE 6 application server, but you can easily make it work in a servlet engine or even Java SE. This means that using CDI makes no assumption about using Hibernate, JPA, EJB or whatever - that's up to you.</p>\n\n<p>If you need more functionality, CDI comes with the concept of <strong>portable extensions</strong> (which by itself makes the API worthwile). Independent extension modules like Apache CODI and Seam 3 exist and cover topics like security, mailing, reporting and more.</p>\n\n<p>To summarize: CDI is nothing like a \"replacement\" for the Spring ecosystem, it's rather an improvement over Spring's dependency injection mechanism. It's part of Java EE 6, so if you are on a GlasFish with Java EE 6, you should definitely go for CDI. In my eyes your question is rather: Can I replace Spring with Java EE 6? I guess my answer is pretty obvious ;-)</p>\n\n<p>Have a look at <a href=\"http://docs.jboss.org/weld/reference/latest/en-US/html/\">Weld</a> to get a good start...</p>\n    "},{"t":"What is javax.inject.Named annotation supposed to be used for?","l":"http://stackoverflow.com/questions/5415261/what-is-javax-inject-named-annotation-supposed-to-be-used-for","q":"\n\n<p>I am trying to understand the <code>javax.inject</code> package and I am not clear what the <code>javax.inject.Named</code> annotation is supposed to be used for. The Javadoc does not explain the the idea behind it. </p>\n\n<p>Javadoc is at <a href=\"http://download.oracle.com/javaee/6/api/javax/inject/Named.html\">http://download.oracle.com/javaee/6/api/javax/inject/Named.html</a></p>\n\n<p>I am using <strong>Spring 3.0</strong> to write some sample programs, by putting <code>@Named</code> on a bean it seems to add it to the bean factory but the Javadoc description is so light I can't tell if that is the standard behavior or Spring specific behavior.</p>\n\n<p>My questions are:</p>\n\n<ol>\n<li>What is the difference between <code>@Named</code> and <code>@Qualifier</code></li>\n<li>How are you supposed to tell the Runtime system a class should be injectable in other classes what's the annotation for that? The equivalent of <code>@Component</code> in Spring?</li>\n</ol>\n\n<p><strong>Update 1</strong> there is an excellent explanation of <code>@Named</code> and <code>@Qualifier</code> at Nice article about <code>@Named</code> and <code>@Qualifier</code> <a href=\"http://java.dzone.com/articles/java-ee6-cdi-named-components\">http://java.dzone.com/articles/java-ee6-cdi-named-components</a> thanks @xmedeko for linking to it the comment below.</p>\n    ","a":"\n<p>Use @Named to differentiate between different objects of the same type bound in the same scope. </p>\n\n<pre><code>@Named(\"maxWaitTime\")\npublic long maxWaitTimeMs;\n\n@Named(\"minWaitTime\")\npublic long minWaitTimeMs;\n</code></pre>\n\n<p>Without the @Named qualifier, the injector would not know which long to bind to which variable.</p>\n\n<p>If you want to create annotations that act like @Named, use the @Qualifier annotation when creating them.  If you look at @Named, it is itself annotated with @Qualifier.</p>\n    "},{"t":"Spring JSON request getting 406 (not Acceptable)","l":"http://stackoverflow.com/questions/7462202/spring-json-request-getting-406-not-acceptable","q":"\n\n<p>this is my javascript:</p>\n\n<pre><code>    function getWeather() {\n        $.getJSON('getTemperature/' + $('.data option:selected').val(), null, function(data) {\n            alert('Success');                               \n        });\n    }\n</code></pre>\n\n<p>this is my controller:</p>\n\n<pre><code>@RequestMapping(value=\"/getTemperature/{id}\", headers=\"Accept=*/*\", method = RequestMethod.GET)\n@ResponseBody\npublic Weather getTemparature(@PathVariable(\"id\") Integer id){\n    Weather weather = weatherService.getCurrentWeather(id);\n        return weather;\n}\n</code></pre>\n\n<p>spring-servlet.xml</p>\n\n<pre><code>&lt;context:annotation-config /&gt;\n&lt;tx:annotation-driven /&gt;\n</code></pre>\n\n<p>Getting this error:</p>\n\n<pre><code>GET http://localhost:8080/web/getTemperature/2 406 (Not Acceptable)\n</code></pre>\n\n<p>Headers:</p>\n\n<p><strong>Response Headers</strong></p>\n\n<pre><code>Server  Apache-Coyote/1.1\nContent-Type    text/html;charset=utf-8\nContent-Length  1070\nDate    Sun, 18 Sep 2011 17:00:35 GMT\n</code></pre>\n\n<p><strong>Request Headers</strong></p>\n\n<pre><code>Host    localhost:8080\nUser-Agent  Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2\nAccept  application/json, text/javascript, */*; q=0.01\nAccept-Language en-us,en;q=0.5\nAccept-Encoding gzip, deflate\nAccept-Charset  ISO-8859-1,utf-8;q=0.7,*;q=0.7\nConnection  keep-alive\nX-Requested-With    XMLHttpRequest\nReferer http://localhost:8080/web/weather\nCookie  JSESSIONID=7D27FAC18050ED84B58DAFB0A51CB7E4\n</code></pre>\n\n<p>Interesting note:</p>\n\n<p><strong>I get 406 error, but the hibernate query works meanwhile.</strong>\nThis is what tomcat log says, everytime when I change selection in dropbox:</p>\n\n<pre><code> select weather0_.ID as ID0_0_, weather0_.CITY_ID as CITY2_0_0_, weather0_.DATE as DATE0_0_, weather0_.TEMP as TEMP0_0_ from WEATHER weather0_ where weather0_.ID=?\n</code></pre>\n\n<p>What could the problem be? There were two similar questions in SO before, I tried all the accepted hints there, but they did not work I guess...</p>\n\n<p>Any suggestions? Feel free to ask questions...</p>\n    ","a":"\n<blockquote>\n  <p><strong>406 Not Acceptable</strong></p>\n  \n  <p>The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.</p>\n</blockquote>\n\n<p>So, your request accept header is application/json and your controller is not able to return that. This happens when the correct HTTPMessageConverter can not be found to satisfy the @ResponseBody annotated return value. HTTPMessageConverter are automatically registered when you use the <code>&lt;mvc:annotation-driven&gt;</code>, given certain 3-d party libraries in the classpath.</p>\n\n<p>Either you don't have the correct Jackson library in your classpath, or you haven't used the \n<code>&lt;mvc:annotation-driven&gt;</code> directive.</p>\n\n<p>I successfully replicated your scenario and it worked fine using these two libraries and no <code>headers=\"Accept=*/*\"</code> directive.</p>\n\n<ul>\n<li>jackson-core-asl-1.7.4.jar</li>\n<li>jackson-mapper-asl-1.7.4.jar</li>\n</ul>\n    "},{"t":"Spring Boot Remove Whitelabel Error Page","l":"http://stackoverflow.com/questions/25356781/spring-boot-remove-whitelabel-error-page","q":"\n\n<p>I'm trying to remove white label error page, so what I've done was created a controller mapping for \"/error\",</p>\n\n<pre><code>@RestController\npublic class IndexController {\n\n    @RequestMapping(value = \"/error\")\n    public String error() {\n        return \"Error handling\";\n    }\n\n}\n</code></pre>\n\n<p>But now I\"m getting this error.</p>\n\n<pre><code>Exception in thread \"AWT-EventQueue-0\" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource   [org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.class]: Invocation  of init method failed; nested exception is java.lang.IllegalStateException: Ambiguous mapping found. Cannot map 'basicErrorController' bean method \npublic org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt;  org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletR equest)\nto {[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}: There is already 'indexController' bean method\n</code></pre>\n\n<p>Don't know whether I'm doing anything wrong. Please advice.</p>\n\n<p><b>EDIT: </b></p>\n\n<p>Already added\n    <code>error.whitelabel.enabled=false</code>  to application.properties file, still getting the same error</p>\n    ","a":"\n<p>You need to change your code to the following:</p>\n\n<pre><code>@RestController\npublic class IndexController implements ErrorController{\n\n    private static final String PATH = \"/error\";\n\n    @RequestMapping(value = PATH)\n    public String error() {\n        return \"Error handling\";\n    }\n\n    @Override\n    public String getErrorPath() {\n        return PATH;\n    }\n}\n</code></pre>\n\n<p>Your code did not work, because Spring Boot automatically registers the <code>BasicErrorController</code> as a Spring Bean when you have not specified an implementation of <code>ErrorController</code>.  </p>\n\n<p>To see that fact just navigate to <code>ErrorMvcAutoConfiguration.basicErrorController</code> <a href=\"https://github.com/spring-projects/spring-boot/blob/v1.1.5.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration.java\">here</a>.</p>\n    "},{"t":"How to manage REST API versioning with spring?","l":"http://stackoverflow.com/questions/20198275/how-to-manage-rest-api-versioning-with-spring","q":"\n\n<p>I've been searching how to manage a REST API versions using Spring 3.2.x, but I haven't find anything that is easy to maintain. I'll explain first the problem I have, and then a solution... but I do wonder if I'm re-inventing the wheel here.</p>\n\n<p>I want to manage the version based on the Accept header, and for example if a request has the Accept header <code>application/vnd.company.app-1.1+json</code>, I want spring MVC to forward this to the method that handles this version. And since not all methods in an API change in the same release, I don't want to go to each of my controllers and change anything for a handler that hasn't changed between versions. I also don't want to have the logic to figure out which version to use in the controller themselves (using service locators) as Spring is already discovering which method to call.</p>\n\n<p>So taken an API with versions 1.0, to 1.8 where a handler was introduced in version 1.0 and modified in v1.7, I would like handle this in the following way. Imagine that the code is inside a controller, and that there's some code that is able to extract the version from the header. (The following is invalid in Spring)</p>\n\n<pre><code>@RequestMapping(...)\n@VersionRange(1.0,1.6)\n@ResponseBody\npublic Object method1() {\n   // so something\n   return object;\n}\n\n@RequestMapping(...) //same Request mapping annotation\n@VersionRange(1.7)\n@ResponseBody\npublic Object method2() {\n   // so something\n   return object;\n}\n</code></pre>\n\n<p>This is not possible in spring as the 2 methods have the same <code>RequestMapping</code> annotation and Spring fails to load. The idea is that the <code>VersionRange</code> annotation can define an open or closed version range. The first method is valid from versions 1.0 to 1.6, while the second for version 1.7 onwards (including the latest version 1.8). I know that this approach breaks if someone decides to pass version 99.99, but that's something I'm OK to live with.</p>\n\n<p>Now, since the above is not possible without a serious rework of how spring works, I was thinking of tinkering with the way handlers matched to requests, in particular to write my own <code>ProducesRequestCondition</code>, and have the version range in there. For example</p>\n\n<p>Code:</p>\n\n<pre><code>@RequestMapping(..., produces = \"application/vnd.company.app-[1.0-1.6]+json)\n@ResponseBody\npublic Object method1() {\n   // so something\n   return object;\n}\n\n@RequestMapping(..., produces = \"application/vnd.company.app-[1.7-]+json)\n@ResponseBody\npublic Object method2() {\n   // so something\n   return object;\n}\n</code></pre>\n\n<p>In this way, I can have closed or open version ranges defined in the produces part of the annotation. I'm working on this solution now, with the problem that I still had to replace some core Spring MVC classes (<code>RequestMappingInfoHandlerMapping</code>, <code>RequestMappingHandlerMapping</code> and <code>RequestMappingInfo</code>), which I don't like, because it means extra work whenever I decide to upgrade to a newer version of spring.</p>\n\n<p>I would appreciate any thoughts... and especially, any suggestion to do this in a simpler, easier to maintain way.</p>\n\n<hr>\n\n<h2>Edit</h2>\n\n<p>Adding a bounty. To get the bounty, please answer the question above without suggesting to have this logic in the controller themselves. Spring already has a lot of logic to select which controller method to call, and I want to piggyback on that.</p>\n\n<hr>\n\n<h2>Edit 2</h2>\n\n<p>I've shared the original POC (with some improvements) in github: <a href=\"https://github.com/augusto/restVersioning\">https://github.com/augusto/restVersioning</a></p>\n    ","a":"\n<p>Regardless whether versioning can be avoided by doing backwards compatible changes (which might not always possible when you are bound by some corporate guidelines or your API clients are implemented in a buggy way and would break even if they should not) the abstracted requirement is an interesting one: </p>\n\n<p><strong>How can I do a custom request mapping that does arbitrary evaluations of header values from the request without doing the evaluation in the method body?</strong></p>\n\n<p>As described in <a href=\"http://stackoverflow.com/a/10336769/2615437\">this SO answer</a> you actually can have the same <code>@RequestMapping</code> and use a different annotation to differentiate during the actual routing that happens during runtime. To do so, you will have to:</p>\n\n<ol>\n<li>Create a new annotation <code>VersionRange</code>.</li>\n<li>Implement a <code>RequestCondition&lt;VersionRange&gt;</code>. Since you will have something like a best-match algorithm you will have to check whether methods annotated with other <code>VersionRange</code> values provide a better match for the current request.</li>\n<li>Implement a <code>VersionRangeRequestMappingHandlerMapping</code> based on the annotation and request condition (as <a href=\"http://stackoverflow.com/a/10336769/2615437\">described in the linked post</a>).</li>\n<li>Configure spring to evaluate your <code>VersionRangeRequestMappingHandlerMapping</code> before using the default <code>RequestMappingHandlerMapping</code> (e.g. by setting its order to 0).</li>\n</ol>\n\n<p>This wouldn't require any hacky replacements of Spring components but uses the Spring configuration and extension mechanisms sot it should work even if you update your Spring version (as long as the new version supports these mechanisms).</p>\n    "},{"t":"Return only string message from Spring MVC 3 Controller","l":"http://stackoverflow.com/questions/7672858/return-only-string-message-from-spring-mvc-3-controller","q":"\n\n<p>Can any one tell me how I can return string message from controller?</p>\n\n<p>If i just return a string from a controller method then spring mvc treating it as a jsp view name.</p>\n    ","a":"\n<p>Annotate your method in controller with <code>@ResponseBody</code>:</p>\n\n<pre><code>@RequestMapping(value=\"/controller\", method=GET)\n@ResponseBody\npublic String foo() {\n    return \"Response!\";\n}\n</code></pre>\n\n<p>From: <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-responsebody\">15.3.2.6 Mapping the response body with the <code>@ResponseBody</code> annotation</a>:</p>\n\n<blockquote>\n  <p>The <code>@ResponseBody</code> annotation [...] can be put on a method and indicates that the return type should be written straight to the HTTP response body (and not placed in a Model, or interpreted as a view name).</p>\n</blockquote>\n    "},{"t":"How do I get the Session Object in Spring?","l":"http://stackoverflow.com/questions/1629211/how-do-i-get-the-session-object-in-spring","q":"\n\n<p>I am relatively new to <a href=\"http://en.wikipedia.org/wiki/Spring_Framework\" rel=\"nofollow noreferrer\">Spring</a> and Spring security.</p>\n\n<p>I was attempting to write a program where I needed to authenticate a user at the server end using Spring security,</p>\n\n<p>I came up with the following:</p>\n\n<pre><code>public class CustomAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider{\n    @Override\n    protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken)\n                    throws AuthenticationException\n    {\n        System.out.println(\"Method invoked : additionalAuthenticationChecks isAuthenticated ? :\"+usernamePasswordAuthenticationToken.isAuthenticated());\n    }\n\n    @Override\n    protected UserDetails retrieveUser(String username,UsernamePasswordAuthenticationToken authentication) throws AuthenticationException \n    {\n        System.out.println(\"Method invoked : retrieveUser\");\n        //so far so good, i can authenticate user here, and throw exception if not authenticated!!\n        //THIS IS WHERE I WANT TO ACCESS SESSION OBJECT\n    }\n}\n</code></pre>\n\n<p>My usecase is that when a user is authenticated, I need to place an attribute like:</p>\n\n<pre><code>session.setAttribute(\"userObject\", myUserObject);\n</code></pre>\n\n<p>myUserObject is an object of some class that I can access throughout my server code across multiple user requests.</p>\n    ","a":"\n<p>Your friend here is <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/context/request/RequestContextHolder.html\" rel=\"nofollow noreferrer\"><code>org.springframework.web.context.request.RequestContextHolder</code></a></p>\n\n<pre><code>// example usage\npublic static HttpSession session() {\n    ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n    return attr.getRequest().getSession(true); // true == allow create\n}\n</code></pre>\n\n<p>This will be populated by the standard spring mvc dispatch servlet, but if you are using a different web framework you have add <code>org.springframework.web.filter.RequestContextFilter</code> as a filter in your <code>web.xml</code> to manage the holder.</p>\n\n<p><strong>EDIT</strong>: just as a side issue what are you actually trying to do, I'm not sure you should need access to the <code>HttpSession</code> in the <code>retieveUser</code> method of a <code>UserDetailsService</code>. Spring security will put the UserDetails object in the session for you any how. It can be retrieved by accessing the <code>SecurityContextHolder</code>:</p>\n\n<pre><code>public static UserDetails currentUserDetails(){\n    SecurityContext securityContext = SecurityContextHolder.getContext();\n    Authentication authentication = securityContext.getAuthentication();\n    if (authentication != null) {\n        Object principal = authentication.getPrincipal();\n        return principal instanceof UserDetails ? (UserDetails) principal : null;\n    }\n    return null;\n}\n</code></pre>\n    "},{"t":"Spring + Web MVC: dispatcher-servlet.xml vs. applicationContext.xml (plus shared security)","l":"http://stackoverflow.com/questions/16458754/spring-web-mvc-dispatcher-servlet-xml-vs-applicationcontext-xml-plus-shared","q":"\n\n<p>What is the correct way to use the two contexts: <code>dispatcher-servlet.xml</code> and <code>applicationContext.xml</code>? What goes where?</p>\n\n<p>I want to write a fairly typical app deployed in a servlet container. It has some controllers with JSP views. It also has some nontrivial logic on the back-end. Do I really need both contexts? How are they related to each other? How can I decide what to put in which?</p>\n\n<p>Also, I want to use Spring-security for my application. I may want to use its features (like declarative security with annotations) in web controllers as well as in deeper layers. How should I configure security to work in this case? Should it be in one of those files (which?), or both?</p>\n    ","a":"\n<pre><code>&lt;mvc:annotation-driven /&gt;\n&lt;mvc:default-servlet-handler /&gt;\n&lt;mvc:resources mapping=\"/resources/**\" location=\"/resources/\" /&gt;\n\n&lt;context:component-scan base-package=\"com.tridenthyundai.ains\" /&gt;\n\n&lt;bean id=\"multipartResolver\"\n    class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\" /&gt;\n\n&lt;bean id=\"messageSource\" \n    class=\"org.springframework.context.support.ReloadableResourceBundleMessageSource\"&gt;\n    &lt;property name=\"basename\" value=\"/WEB-INF/messages\" /&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"viewResolver\"\n    class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n\n    &lt;property name=\"prefix\"&gt;\n        &lt;value&gt;/WEB-INF/pages/&lt;/value&gt;\n    &lt;/property&gt;\n    &lt;property name=\"suffix\"&gt;\n        &lt;value&gt;.jsp&lt;/value&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p></p>\n    "},{"t":"Spring Boot: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean","l":"http://stackoverflow.com/questions/21783391/spring-boot-unable-to-start-embeddedwebapplicationcontext-due-to-missing-embedd","q":"\n\n<p>I am totally new to Spring and started to do the official guides from this site:\n<a href=\"https://spring.io/guides\">https://spring.io/guides</a></p>\n\n<p>I'd like to do this guide:\n<a href=\"https://spring.io/guides/gs/scheduling-tasks/\">https://spring.io/guides/gs/scheduling-tasks/</a></p>\n\n<p>I get the following Exception:</p>\n\n<pre><code>2014-02-14 16:25:21.614  INFO 9032 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.scheduling.annotation.SchedulingConfiguration' of type [class org.springframework.scheduling.annotation.SchedulingConfiguration$$EnhancerByCGLIB$$5b48d763] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n2014-02-14 16:25:21.638  INFO 9032 --- [           main] .c.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/C:/work/Spring/SpringTutorial/target/classes/, file:/C:/work/apache-maven-3.0.3/repo/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/boot/spring-boot-starter/1.0.0.RC1/spring-boot-starter-1.0.0.RC1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/boot/spring-boot/1.0.0.RC1/spring-boot-1.0.0.RC1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-context/4.0.0.RELEASE/spring-context-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/boot/spring-boot-autoconfigure/1.0.0.RC1/spring-boot-autoconfigure-1.0.0.RC1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/boot/spring-boot-starter-logging/1.0.0.RC1/spring-boot-starter-logging-1.0.0.RC1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/slf4j/jcl-over-slf4j/1.7.5/jcl-over-slf4j-1.7.5.jar, file:/C:/work/apache-maven-3.0.3/repo/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar, file:/C:/work/apache-maven-3.0.3/repo/org/slf4j/jul-to-slf4j/1.7.5/jul-to-slf4j-1.7.5.jar, file:/C:/work/apache-maven-3.0.3/repo/org/slf4j/log4j-over-slf4j/1.7.5/log4j-over-slf4j-1.7.5.jar, file:/C:/work/apache-maven-3.0.3/repo/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar, file:/C:/work/apache-maven-3.0.3/repo/ch/qos/logback/logback-core/1.0.13/logback-core-1.0.13.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/boot/spring-boot-starter-web/1.0.0.RC1/spring-boot-starter-web-1.0.0.RC1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/boot/spring-boot-starter-tomcat/1.0.0.RC1/spring-boot-starter-tomcat-1.0.0.RC1.jar, file:/C:/work/apache-maven-3.0.3/repo/org/apache/tomcat/embed/tomcat-embed-core/7.0.47/tomcat-embed-core-7.0.47.jar, file:/C:/work/apache-maven-3.0.3/repo/org/apache/tomcat/embed/tomcat-embed-logging-juli/7.0.47/tomcat-embed-logging-juli-7.0.47.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-web/4.0.0.RELEASE/spring-web-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-aop/4.0.0.RELEASE/spring-aop-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-beans/4.0.0.RELEASE/spring-beans-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-webmvc/4.0.0.RELEASE/spring-webmvc-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/org/springframework/spring-expression/4.0.0.RELEASE/spring-expression-4.0.0.RELEASE.jar, file:/C:/work/apache-maven-3.0.3/repo/com/fasterxml/jackson/core/jackson-databind/2.3.1/jackson-databind-2.3.1.jar, file:/C:/work/apache-maven-3.0.3/repo/com/fasterxml/jackson/core/jackson-annotations/2.3.0/jackson-annotations-2.3.0.jar, file:/C:/work/apache-maven-3.0.3/repo/com/fasterxml/jackson/core/jackson-core/2.3.1/jackson-core-2.3.1.jar, file:/C:/work/apache-maven-3.0.3/repo/commons-lang/commons-lang/2.2/commons-lang-2.2.jar]\nException in thread \"main\" org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean.\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:140)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:476)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:124)\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:658)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:355)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:920)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:909)\n    at hu.kumite.Application.main(Application.java:17)\nCaused by: org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean.\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:190)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:163)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137)\n    ... 7 more\n</code></pre>\n\n<p>The application starter class is this:</p>\n\n<pre><code>@ComponentScan\n@EnableAutoConfiguration\npublic class Application {\n    public static void main(String[] args) {\n    //SpringApplication.run(Application.class, args);\n    SpringApplication.run(ScheduledTasks.class, args);\n    }\n}\n</code></pre>\n\n<p>As you can see, the main method contains a commented line. I've already done a tutorial, namely this one: <a href=\"https://spring.io/guides/gs/consuming-rest/\">https://spring.io/guides/gs/consuming-rest/</a>\nIt's up and running. But I can't run the ScheduledTasks app, which is the following:</p>\n\n<pre><code>@EnableScheduling\npublic class ScheduledTasks {\n\n    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n\n    @Scheduled(fixedRate = 5000)\n    public void reportCurrentTime() {\n        System.out.println(\"The time is now \" + dateFormat.format(new Date()));\n    }\n}\n</code></pre>\n\n<p>I use Eclipse and run the Application.java's main as an Application.\nCould someone please help me?</p>\n    ","a":"\n<p>The scheduling guide isn't a web app so you probably have some mouldy stuff in your pom.xml from the REST guide? If you follow the instructions closely it should work. Another potential issue with the code you posted above is that your <code>@EnableAutoConfiguration</code> class is not used in the context, only as a main method (which may not be a problem for the scheduling guide but it probably is for a bunch of others).</p>\n    "},{"t":"In Spring MVC, how can I set the mime type header when using @ResponseBody","l":"http://stackoverflow.com/questions/4471584/in-spring-mvc-how-can-i-set-the-mime-type-header-when-using-responsebody","q":"\n\n<p>I have a Spring MVC Controller that returns a JSON String and I would like to set the mimetype to application/json. How can I do that?</p>\n\n<pre><code>@RequestMapping(method=RequestMethod.GET, value=\"foo/bar\")\n@ResponseBody\npublic String fooBar(){\n    return myService.getJson();\n}\n</code></pre>\n\n<p>The business objects are already available as JSON strings, so using <code>MappingJacksonJsonView</code> is not the solution for me. <code>@ResponseBody</code> is perfect, but how can I set the mimetype?</p>\n    ","a":"\n<p>I would consider to refactor the service to return your domain object rather than JSON strings and let Spring handle the serialization (via the <code>MappingJacksonHttpMessageConverter</code> as you write). As of Spring 3.1, the implementation looks quite neat:</p>\n\n<pre><code>@RequestMapping(produces = MediaType.APPLICATION_JSON_VALUE, \n    method = RequestMethod.GET\n    value = \"/foo/bar\")\n@ResponseBody\npublic Bar fooBar(){\n    return myService.getBar();\n}\n</code></pre>\n\n<p>Comments:</p>\n\n<p>First, the <code>&lt;mvc:annotation-driven /&gt;</code> or the <code>@EnableWebMvc</code> must be <a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-config-enable\">added</a> to your application config.</p>\n\n<p>Next, the <a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-produces\">produces</a> attribute of the <code>@RequestMapping</code> annotation is used to specify the content type of the response. Consequently, it should be set to <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/http/MediaType.html#APPLICATION_JSON_VALUE\">MediaType.APPLICATION_JSON_VALUE</a> (or <code>\"application/json\"</code>).</p>\n\n<p>Lastly, Jackson must be added so that any serialization and de-serialization between Java and JSON will be handled automatically by Spring (the Jackson dependency is detected by Spring and the <code>MappingJacksonHttpMessageConverter</code> will be under the hood).</p>\n    "},{"t":"Missing artifact com.microsoft.sqlserver:sqljdbc4:jar:4.0","l":"http://stackoverflow.com/questions/19537396/missing-artifact-com-microsoft-sqlserversqljdbc4jar4-0","q":"\n\n<p>I am trying to add MS SQL driver dependency in my POM.xml file and the following is the dependency.</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;\n    &lt;artifactId&gt;sqljdbc4&lt;/artifactId&gt;\n    &lt;version&gt;4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>but I get this exception</p>\n\n<blockquote>\n  <p>Missing artifact com.microsoft.sqlserver:sqljdbc4:jar:4.0</p>\n</blockquote>\n\n<p>I really don't understand the issue.</p>\n    ","a":"\n<p>The issue is that Maven can't find this artifact in any of the configured <a href=\"http://maven.apache.org/guides/introduction/introduction-to-repositories.html\">maven repositories</a>.</p>\n\n<p>Unfortunately Microsoft doesn't make this artifact available via any maven repository. You need to download the jar from the <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=11774\">Microsoft website</a>, and then manually install it into your local maven repository.</p>\n\n<p>You can do this with the following maven command:</p>\n\n<pre><code>mvn install:install-file -Dfile=sqljdbc4.jar -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=4.0 -Dpackaging=jar\n</code></pre>\n\n<p>Then next time you run maven on your POM it will find the artifact.</p>\n    "},{"t":"Spring - Annotation Based Controller - RequestMapping based on query string","l":"http://stackoverflow.com/questions/454689/spring-annotation-based-controller-requestmapping-based-on-query-string","q":"\n\n<p>In Spring annotation-based controller, is it possible to map different query strings using <code>@RequestMapping</code> to different methods?</p>\n\n<p>For example</p>\n\n<pre><code>@RequestMapping(\"/test.html?day=monday\")\npublic void writeMonday() {\n}\n\n\n@RequestMapping(\"/test.html?day=tuesday\")\npublic void writeTuesday() {\n}\n</code></pre>\n    ","a":"\n<p>or you could do something like:</p>\n\n<pre><code>@RequestMapping(\"/test.html\")\npublic void writeSomeDay(@RequestParam String day) {\n   // code to handle \"day\" comes here...\n}\n</code></pre>\n    "},{"t":"why can't we autowire static fields in spring","l":"http://stackoverflow.com/questions/10938529/why-cant-we-autowire-static-fields-in-spring","q":"\n\n<p>Why cant we autowire the static instance variable in the Spring bean. I know there is other way to achieve this but just want to know why cant we do it in below way.</p>\n\n<p>e.g.</p>\n\n<pre><code>@Autowired\npublic static Test test;\n</code></pre>\n    ","a":"\n<p>Because using static fields encourages the usage of static methods. And static methods are evil. The main purpose of dependency injection is to let the container create objects for you and wire them. Also it makes testing easier.</p>\n\n<p>Once you start to use static methods, you no longer need to create an instance of object and testing is much harder. Also you cannot create several instances of a given class, each with a different dependency being injected (because the field is implicitly shared and creates global state - also evil).</p>\n    "},{"t":"Circular dependency in spring","l":"http://stackoverflow.com/questions/3485347/circular-dependency-in-spring","q":"\n\n<p>How does spring resolve this. Bean A is dependent on bean b, and bean b on bean a.</p>\n    ","a":"\n<p>As the other answers have said, Spring just takes care of it, creating the beans and injecting them as required.</p>\n\n<p>One of the consequences is that bean injection / property setting might occur in a different order to what your XML wiring files would seem to imply.  So you need to be careful that your property setters don't do initialization that relies on other setters already having been called.  The way to deal with this is to declare beans as implementing the <code>InitializingBean</code> interface.  This requires you to implement the <code>afterPropertiesSet()</code> method, and this is where you do the critical initialization.  (I also include code to check that important properties have actually been set.)</p>\n    "},{"t":"Can SpringMVC be configured to process all requests, but exclude static content directories?","l":"http://stackoverflow.com/questions/1234298/can-springmvc-be-configured-to-process-all-requests-but-exclude-static-content","q":"\n\n<p>If I map my spring application to process all incoming requests ('/*'), then requests for static content return 404's. For example, a request for \"myhost.com/css/global.css\" would return a 404, even though the resource exists as Spring intercepts the request.</p>\n\n<p>The alternative is to map SpringMVC to a subdirectory (for example '/home/<em>'), but in this case, you must pass this directory in all links within the application.  Is there a way to map SpringMVC to '/</em>' and exclude a set of directories from processing?</p>\n\n<p>My current web.xml configuration is:</p>\n\n<pre><code>&lt;servlet&gt;\n    &lt;servlet-name&gt;springApp&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;springApp&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/home/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre>\n\n<p>Idealy I would like to have the mapping be something like the following:</p>\n\n<pre><code> &lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;springApp&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;exclude&gt;/css/*,/js/*&lt;/exclude&gt;\n &lt;/servlet-mapping&gt;\n</code></pre>\n\n<p>Is this type of thing possible?</p>\n    ","a":"\n<p>If you want to do this with Spring only, it's possible but a bit messy:</p>\n\n<ol>\n<li>You'll either need to use a <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/mvc.html#mvc-handlermapping\" rel=\"nofollow noreferrer\">SimpleUrlHandlerMapping</a> for which you can explicitly specify URL patterns which should be mapped to controllers OR extend it to support \"ignore\" URLs like \"css/**\".</li>\n<li>You'll need to write your own <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/HttpRequestHandler.html\" rel=\"nofollow noreferrer\">HttpRequestHandler</a> implementation that would basically consist of \"getServletContext().getRequestDsipatcher().include()\" call to return the requested resource as is.</li>\n<li>You'll have to register that handler as defaultHandler for the above SimpleUrlHandlerMapping.</li>\n</ol>\n\n<p>Once all that is done, all requests that can't be mapped to your controllers will be forwarded to your <code>HttpRequestHandler</code> and served \"as is\".</p>\n    "},{"t":"Spring and the anemic domain model","l":"http://stackoverflow.com/questions/1304245/spring-and-the-anemic-domain-model","q":"\n\n<p>So, I've noticed that I definitely have a tendency to pattern my Spring/Hibernate stack objects like this:</p>\n\n<ul>\n<li>Foo controller makes a call to \"FooService\"</li>\n<li>FooService calls FooRepository.getById() method to get some Foos.</li>\n<li>FooRepository makes some Hibernate calls to load Foo objects.</li>\n<li>FooService does some interactions with the Foos. It may use a related TransactionalFooService to handle things that need to be done together in a transaction.</li>\n<li>FooService asks FooRepository to save the Foos.</li>\n</ul>\n\n<p>The problem here is that the Foos don't have any real logic. For example, if an email needs to be sent every time a Foo expires, there's not a call to Foo.expire().  There's a call to FooService.expireFoo(fooId).  This is for a variety of reasons:</p>\n\n<ul>\n<li>It's annoying to get at other services and objects from a Foo.  It's not a Spring bean, and it was loaded by Hibernate.</li>\n<li>It's annoying to get a Foo to do several somethings transactionally.</li>\n<li>It's hard to decide whether Foo should be responsible for choosing when to save itself.  If you call foo.setName(), should foo persist the change?  Should it wait until you call foo.save()?  Should foo.save() just invoke FooRepository.save(this)?</li>\n</ul>\n\n<p>So for these sorts of reasons, my Spring domain objects tend to be basically glorified structs with some validation logic.  Maybe this is okay.  Maybe web services are okay as procedural code.  Maybe as new features get written, it's acceptable to create new services that deal with the same old objects in new ways.</p>\n\n<p>But I'd like to escape from this sort of design, and I'm wondering what other Spring uses do about it?  Do you combat it with fancy tricks like load-time weaving (which I'm not that comfortable with)?  Do you have some other trick?  Do you think procedural is fine?</p>\n    ","a":"\n<p>You can get Spring to inject your services into your Hibernate instantiated instances, using AOP. You can also get Hibernate to do the same, using Interceptors.</p>\n\n<p>See <a href=\"http://www.jblewitt.com/blog/?p=129\" rel=\"nofollow noreferrer\">http://www.jblewitt.com/blog/?p=129</a></p>\n\n<p>Regarding \"It's annoying to get a Foo to do several somethings transactionally\", I would expect your service implementations would know/care about the transactions, and if you're now using the service interfaces within your domain model, that should now be not quite so annoying.</p>\n\n<p>I suspect that deciding when a domain model should be saved is dependent upon what it is and what you're doing with it.</p>\n\n<p>FWIW I have a tendency to produce just the same sort of anemic structures, but I'm getting there, now I know it's possible to do it a more sensible way.</p>\n    "},{"t":"java.lang.ClassNotFoundException: org.springframework.web.servlet.DispatcherServlet","l":"http://stackoverflow.com/questions/11227395/java-lang-classnotfoundexception-org-springframework-web-servlet-dispatcherserv","q":"\n\n<p>i am using <strong>spring 3.1.0.RELEASE</strong>, and my servlet container is <strong>tomcat 7</strong> and my IDE is <strong>eclipse indigo</strong>\nand the jar <strong>spring-webmvc-3.1.0.RELEASE.jar</strong> which contains the <strong>DispatcherServlet</strong>\nexists in the lib folder, and yet when running the application, i am getting the exception:</p>\n\n<pre><code>java.lang.ClassNotFoundException: org.springframework.web.servlet.DispatcherServlet\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:525)\n    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:507)\n    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:126)\n    at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1099)\n    at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1043)\n    at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4957)\n    at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5284)\n    at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5279)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n    at java.lang.Thread.run(Thread.java:662)\n</code></pre>\n\n<p>please advise why i am getting this exception, and how to fix it.</p>\n\n<p>EDIT: following are my configuration files:</p>\n\n<p><strong>1- .springBeans:</strong></p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beansProjectDescription&gt;\n    &lt;version&gt;1&lt;/version&gt;\n    &lt;pluginVersion&gt;&lt;![CDATA[2.9.0.201203011806-RELEASE]]&gt;&lt;/pluginVersion&gt;\n    &lt;configSuffixes&gt;\n        &lt;configSuffix&gt;&lt;![CDATA[xml]]&gt;&lt;/configSuffix&gt;\n    &lt;/configSuffixes&gt;\n    &lt;enableImports&gt;&lt;![CDATA[false]]&gt;&lt;/enableImports&gt;\n    &lt;configs&gt;\n        &lt;config&gt;src/main/webapp/WEB-INF/checkout-servlet.xml&lt;/config&gt;\n    &lt;/configs&gt;\n    &lt;configSets&gt;\n    &lt;/configSets&gt;\n&lt;/beansProjectDescription&gt;\n</code></pre>\n\n<p><strong>2- web.xml:</strong></p>\n\n<p></p>\n\n<pre><code>&lt;web-app&gt;\n  &lt;display-name&gt;Checkout&lt;/display-name&gt;\n\n  &lt;servlet&gt;\n    &lt;servlet-name&gt;checkout&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n  &lt;/servlet&gt;\n\n  &lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;checkout&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n\n<p><strong>3- checkout-servlet.xml:</strong></p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"com.myapp\"/&gt;\n\n    &lt;bean id=\"myService\" class=\"com.myapp.MyService\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>also when trying to access any page in the application, i get the exception:</p>\n\n<pre><code>HTTP Status 404 - Servlet checkout is not available\n\ntype Status report\n\nmessage Servlet checkout is not available\n\ndescription The requested resource (Servlet checkout is not available) is not available.\nApache Tomcat/7.0.22\n</code></pre>\n    ","a":"\n<p>i found that in the <strong>deployment assembly</strong>, there was the entry:</p>\n\n<pre><code>[persisted container] org.maven.ide.eclipse.maven2_classpath_container\n</code></pre>\n\n<p>i removed it, and added the <code>maven dependencies</code> entry, and it works fine now.</p>\n    "},{"t":"Spring RestTemplate GET with parameters","l":"http://stackoverflow.com/questions/8297215/spring-resttemplate-get-with-parameters","q":"\n\n<p>I have to make a REST call that includes custom headers and query parameters. I set my HttpEntity with just the headers (no Body) and I use the RestTemplate.exchange() method as follows:</p>\n\n<pre><code>HttpHeaders headers = new HttpHeaders();\nheaders.set(\"Accept\", \"application/json\");\n\nMap&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();\nparams.put(\"msisdn\", msisdn);\nparams.put(\"email\", email);\nparams.put(\"clientVersion\", clientVersion);\nparams.put(\"clientType\", clientType);\nparams.put(\"issuerName\", issuerName);\nparams.put(\"applicationName\", applicationName);\n\nHttpEntity entity = new HttpEntity(headers);\n\nHttpEntity&lt;String&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class, params);\n</code></pre>\n\n<p>This fails at the client end with the dispatcher servlet being unable to resolve the request to a handler. Havinf debugged it, it looks like the request paramaters are not being sent.</p>\n\n<p>When I do a an exchange with a POST using a request Body and no query parameters it works just fine.</p>\n\n<p>Does anyone have any ideas?</p>\n\n<p>Many Thanks for your time</p>\n    ","a":"\n<p>OK, so I'm being an idiot and I'm confusing query parameters with url parameters. I was kinda hoping there would be a nicer way to populate my query parameters rather than an ugly concatenated String but there we are. It's simply a case of build the URL with the correct parameters. If you pass it as a String Spring will also take care of the encoding for you.</p>\n    "},{"t":"org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set","l":"http://stackoverflow.com/questions/26548505/org-hibernate-hibernateexception-access-to-dialectresolutioninfo-cannot-be-null","q":"\n\n<p>I am trying run a spring-boot application which uses hibernate via spring-jpa, but i am getting this error:</p>\n\n<pre><code>Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set\n        at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:104)\n        at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:71)\n        at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:205)\n        at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:111)\n        at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:234)\n        at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)\n        at org.hibernate.cfg.Configuration.buildTypeRegistrations(Configuration.java:1885)\n        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1843)\n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:850)\n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:843)\n        at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.withTccl(ClassLoaderServiceImpl.java:398)\n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:842)\n        at org.hibernate.jpa.HibernatePersistenceProvider.createContainerEntityManagerFactory(HibernatePersistenceProvider.java:152)\n        at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:336)\n        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:318)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1613)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1550)\n        ... 21 more\n</code></pre>\n\n<p>my pom.xml file is this:</p>\n\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;1.1.8.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;\n       &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n\n<p>my hibernate configuration is that (the dialect configuration is in the last method from this class):</p>\n\n<pre><code>@Configuration\n@EnableTransactionManagement\n@ComponentScan({ \"com.spring.app\" })\npublic class HibernateConfig {\n\n   @Bean\n   public LocalSessionFactoryBean sessionFactory() {\n      LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();\n\n      sessionFactory.setDataSource(restDataSource());\n      sessionFactory.setPackagesToScan(new String[] { \"com.spring.app.model\" });\n      sessionFactory.setHibernateProperties(hibernateProperties());\n\n      return sessionFactory;\n   }\n\n   @Bean\n   public DataSource restDataSource() {\n      BasicDataSource dataSource = new BasicDataSource();\n\n      dataSource.setDriverClassName(\"org.postgresql.Driver\");\n      dataSource.setUrl(\"jdbc:postgresql://localhost:5432/teste?charSet=LATIN1\");\n      dataSource.setUsername(\"klebermo\");\n      dataSource.setPassword(\"123\");\n\n      return dataSource;\n   }\n\n   @Bean\n   @Autowired\n   public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {\n      HibernateTransactionManager txManager = new HibernateTransactionManager();\n      txManager.setSessionFactory(sessionFactory);\n      return txManager;\n   }\n\n   @Bean\n   public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {\n      return new PersistenceExceptionTranslationPostProcessor();\n   }\n\n   Properties hibernateProperties() {\n      return new Properties() {\n         /**\n         * \n         */\n        private static final long serialVersionUID = 1L;\n\n        {\n            setProperty(\"hibernate.hbm2ddl.auto\", \"create\");\n            setProperty(\"hibernate.show_sql\", \"false\");\n            setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\n         }\n      };\n   }\n}\n</code></pre>\n\n<p>what I am doing wrong here?</p>\n    ","a":"\n<p>First remove all of your configuration Spring Boot will start it for you. If you really need a <code>SessionFactory</code> instead of an <code>EntityManagerFactory</code> add a <code>HibernateJpaSessionFactoryBean</code>. </p>\n\n<p>Make sure you have an <code>application.properties</code> in your classpath and add the following properties.</p>\n\n<pre><code>spring.datasource.driverClassName=org.postgresql.Driver\nspring.datasource.url=jdbc:postgresql://localhost:5432/teste?charSet=LATIN1\nspring.datasource.username=klebermo\nspring.datasource.password=123\n\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.show-sql=false\nspring.jpa.hibernate.ddl-auto=create\n</code></pre>\n\n<p>Now if you really need access to a <code>SessionFactory</code> and that is basically for the same datasource you can do the following (Which is also docmented <a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#\">here</a> although for XML not JavaConfig).</p>\n\n<pre><code>@Configuration        \npublic class HibernateConfig {\n\n    @Bean\n    public HibernateJpaSessionFactoryBean sessionFactory(EntityManagerFactory emf) {\n         HibernateJpaSessionFactoryBean factory = new HibernateJpaSessionFactoryBean();\n         factory.setEntityManagerFactory(emf);\n         return factory;\n    }\n}\n</code></pre>\n\n<p>That way you have both an <code>EntityManagerFactory</code> and a <code>SessionFactory</code>.</p>\n\n<p>Assuming you have an class with a <code>main</code> method with <code>@EnableAutoConfiguration</code> you don't need the <code>@EnableTransactionManagement</code> annotation as that will be enabled by Spring Boot for you. A basic application class in the <code>com.spring.app</code> package should be enough.</p>\n\n<pre><code>@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic class Application {\n\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n\n} \n</code></pre>\n\n<p>Something like that should be enough to have all your classes (including entities and Spring Data based repositories detected).</p>\n\n<p>I would also suggest removing the <code>commons-dbcp</code> dependency as that would allow Spring Boot to configure the faster and more robust <a href=\"http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html\"><code>tomcat-jdbc</code></a> implemenation.</p>\n    "},{"t":"@Autowired bean is null when referenced in the constructor of another bean","l":"http://stackoverflow.com/questions/6335975/autowired-bean-is-null-when-referenced-in-the-constructor-of-another-bean","q":"\n\n<p>Shown below is a snippet of code where I try and reference my ApplicationProperties bean. When I reference it from the constructor it is null, but when referenced from another method  it is fine. Up until now I have not had no problem using this autowired bean in other classes. But this is the first time I have tried to use it in the constructor of another class.</p>\n\n<p>In the code snippet below applicationProperties is null when called from the constructor but when referenced in the convert method it is not. What am I missing</p>\n\n<pre><code>@Component\npublic class DocumentManager implements IDocumentManager {\n\n  private Log logger = LogFactory.getLog(this.getClass());\n  private OfficeManager officeManager = null;\n  private ConverterService converterService = null;\n\n  @Autowired\n  private IApplicationProperties applicationProperties;\n\n\n  // If I try and use the Autowired applicationProperties bean in the constructor\n  // it is null ?\n\n  public DocumentManager() {\n  startOOServer();\n  }\n\n  private void startOOServer() {\n    if (applicationProperties != null) {\n      if (applicationProperties.getStartOOServer()) {\n        try {\n          if (this.officeManager == null) {\n            this.officeManager = new DefaultOfficeManagerConfiguration()\n              .buildOfficeManager();\n            this.officeManager.start();\n            this.converterService = new ConverterService(this.officeManager);\n          }\n        } catch (Throwable e){\n          logger.error(e);  \n        }\n      }\n    }\n  }\n\n  public byte[] convert(byte[] inputData, String sourceExtension, String targetExtension) {\n    byte[] result = null;\n\n    startOOServer();\n    ...\n</code></pre>\n\n<p>Below is s snippet from ApplicationProperties ...</p>\n\n<pre><code>@Component\npublic class ApplicationProperties implements IApplicationProperties {\n\n  /* Use the appProperties bean defined in WEB-INF/applicationContext.xml\n   * which in turn uses resources/server.properties\n   */\n  @Resource(name=\"appProperties\")\n  private Properties appProperties;\n\n  public Boolean getStartOOServer() {\n    String val = appProperties.getProperty(\"startOOServer\", \"false\");\n    if( val == null ) return false;\n    val = val.trim();\n    return val.equalsIgnoreCase(\"true\") || val.equalsIgnoreCase(\"on\") || val.equalsIgnoreCase(\"yes\");\n  }\n</code></pre>\n    ","a":"\n<p><a href=\"http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\">Autowiring</a> (link from Dunes comment) happens after the construction of an object.  Therefore they will not be set until after the constructor has completed.</p>\n\n<p>If you need to run some initialization code, you should be able to pull the code in the constructor into a method, and annotate that method with <a href=\"http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-postconstruct-and-predestroy-annotations\"><code>@PostConstruct</code></a>.</p>\n    "},{"t":"How does Spring autowire by name when more than one matching bean is found?","l":"http://stackoverflow.com/questions/4447877/how-does-spring-autowire-by-name-when-more-than-one-matching-bean-is-found","q":"\n\n<p>Suppose I have interfaces such as these:</p>\n\n<pre><code>interface Country {}\nclass USA implements Country {}\nclass UK implements Country ()\n</code></pre>\n\n<p>And this snippet of configuration xml:</p>\n\n<pre><code>&lt;bean class=\"USA\"/&gt;\n&lt;bean id=\"country\" class=\"UK\"/&gt;\n&lt;bean id=\"main\" class=\"Main\"/&gt;\n</code></pre>\n\n<p>How can I control which dependency is autowired below?  I'd like the UK one.</p>\n\n<pre><code>class Main {\n    private Country country;\n    @Autowired\n    public void setCountry(Country country) {\n        this.country = country;\n    }\n}\n</code></pre>\n\n<p>I am using Spring 3.0.3.RELEASE.</p>\n    ","a":"\n<p>This is documented in <a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers\">section 3.9.3</a> of the Spring 3.0 manual:</p>\n\n<blockquote>\n  <p>For a fallback match, the bean name is considered a default qualifier value. </p>\n</blockquote>\n\n<p>In other words, the default behaviour is as though you'd added <code>@Qualifier(\"country\")</code> to the setter method.</p>\n    "},{"t":"How to serve .html files with Spring","l":"http://stackoverflow.com/questions/15479213/how-to-serve-html-files-with-spring","q":"\n\n<p>I am developing a website with Spring, and am trying to serve resources that are not .jsp files (.html for example)</p>\n\n<p>right now i have commented out this part of my servlet configuration</p>\n\n<pre><code>    &lt;bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" \n        p:prefix=\"/WEB-INF/jsp/\" p:suffix=\".jsp\" /&gt;\n</code></pre>\n\n<p>And tried to return fromthe controller the full path to the resource.</p>\n\n<pre><code>@Controller\npublic class LandingPageController {\n\nprotected static Logger logger = Logger.getLogger(LandingPageController.class);\n\n@RequestMapping({\"/\",\"/home\"})\npublic String showHomePage(Map&lt;String, Object&gt; model) {\n    return \"/WEB-INF/jsp/index.html\";   \n   }\n}\n</code></pre>\n\n<p>the index.html file exists in that folder.</p>\n\n<p>NOTE: when i change the index.html to index.jsp my server now serves the page correctly.</p>\n\n<p>Thank you.</p>\n    ","a":"\n<p>The initial problem is that the the configuration specifies a property <code>suffix=\".jsp\"</code> so the ViewResolver implementing class will add <code>.jsp</code> to the end of the view name being returned from your method.</p>\n\n<p>However since you commented out the <code>InternalResourceViewResolver</code> then, depending on the rest of your application configuration, there might not be any other ViewResolver registered. You might find that nothing is working now.</p>\n\n<p>Since <code>.html</code> files are <em>static</em> and do not require processing by a servlet then it is more efficient, and simpler, to use an <a href=\"http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-config-static-resources\"><code>&lt;mvc:resources/&gt;</code> mapping</a>. This requires Spring 3.0.4+.</p>\n\n<p>For example:</p>\n\n<pre><code>&lt;mvc:resources mapping=\"/static/**\" location=\"/static/\" /&gt;\n</code></pre>\n\n<p>which would <em>pass through</em> all requests starting with <code>/static/</code> to the <code>webapp/static/</code> directory.</p>\n\n<p>So by putting <code>index.html</code> in <code>webapp/static/</code> and using <code>return \"static/index.html\";</code> from your method, Spring should find the view.</p>\n    "},{"t":"Spring 3.0 vs Java EE 6.0 [closed]","l":"http://stackoverflow.com/questions/2822812/spring-3-0-vs-java-ee-6-0","q":"\n\n<p>I'm confronted with a situation... </p>\n\n<p>I've been asked to give an advise regarding which approach to take, in terms of Java EE development between Spring 3.0 and Java EE 6.0.  I was, and still am, a promoter of Spring 2.5 over classic Java EE 5 development, specially with JBoss, I even migrated old apps to Spring and influenced the re-definition of the development policy here to include Spring specific APIs, and helped the development of a strategic plan to foster more lightweight solutions like Spring + Tomcat, instead of the heavier ones of JBoss, right now, we're using JBoss merely as a Web container, having what I call the \"container inside the container paradox\", that is, having Spring apps, with most of its APIs, running inside JBoss, So we're in the process of migrating to tomcat.</p>\n\n<p>However, with the coming of Java EE 6.0 many features, that made Spring attractive at that time, easy deployment, less-coupling, even some sort of D.I, etc,  seems to have been mimicked, in one way or the other. JSF 2.0, JPA 2.0, WebBeans, WebProfiles, etc. </p>\n\n<p>So, the question goes...</p>\n\n<p>From your point of view, how save, and logical, it is to continue to invest in a non-standard Java EE development framework like Spring given the new perspectives offered by Java EE 6.0?</p>\n\n<p>Can we talk about maybe 3 or 4 more years of Spring development, or do you recommend early adoption of Java EE 6.0 APIs and its practices?</p>\n\n<p>I'll appreciate any insights with this.</p>\n    ","a":"\n<p>The crucial point IMHO is not the one of features. In that regard, Spring will always be ahead of JavaEE as it's natural for OpenSource VS. a Standard. So one fact is, that you get the new features much earlier with Spring that with JavaEE (e.g. container integration testing is a new feature in JavaEE 6 and has been available in Spring for ages).</p>\n\n<p>The most important point IMHO is the one of lifecycles for administration and development. When you choose JavaEE, you tie your programming model to your infrastructure. Usually app server vendors are not the fastest adopting new standard's versions (blame WebSphere, JBoss, what have you). So this means we probably won't see production ready, JavaEE 6 supporting products by the big vendors before end of the year. </p>\n\n<p>Even if that is the case then you still have to take the hurdle of your administration, IT department and budget controlling managers to be willing to upgrade to this shiny new version. Coming from this side, JavaEE 6 is not even an option to many shops. You can choose what ever you like to deploy your apps to? You wanna choose Glassfish for production? Go ahead, try. Most shops aren't in such a \"comfortable\" situation.</p>\n\n<p>Exactly contrary: Spring. Decoupled programming model from infrastructure. Go take current 3.0.x and use <code>@Inject</code>, JPA 2 and the like in your Tomcat or legacy application server.</p>\n    "},{"t":"Spring Boot REST service exception handling","l":"http://stackoverflow.com/questions/28902374/spring-boot-rest-service-exception-handling","q":"\n\n<p>I am trying to set up a large-scale REST services server.  We're using Spring Boot 1.2.1 Spring 4.1.5, and Java 8.  Our controllers are implementing @RestController and the standard @RequestMapping annotations.</p>\n\n<p>My problem is that Spring Boot sets up a default redirect for controller exceptions to \"/error\".  From the docs:</p>\n\n<blockquote>\n  <p>Spring Boot provides an /error mapping by default that handles all errors in a sensible way, and it is registered as a ‘global’ error page in the servlet container. </p>\n</blockquote>\n\n<p>Coming from years writing REST applications with Node.js, this is, to me, anything but sensible.  Any exception a service endpoint generates should return in the response.  I can't understand why you'd send a redirect to what is most likely an Angular or JQuery SPA consumer which is only looking for an answer and can't or won't take any action on a redirect.</p>\n\n<p>What I want to do is set up a global error handler that can take any exception - either purposefully thrown from a request mapping method or auto generated by Spring (404 if no handler method is found for the request path signature), and return a standard formatted error response (400, 500, 503, 404) to the client without any MVC redirects.  Specifically, we are going to take the error, log it to NoSQL with a UUID, then return to the client the right HTTP error code with the UUID of the log entry in the JSON body.</p>\n\n<p>The docs have been vague on how to do this.  It seems to me that you have to either create your own <a href=\"http://docs.spring.io/spring-boot/docs/1.2.2.RELEASE/api/org/springframework/boot/autoconfigure/web/ErrorController.html\">ErrorController</a> implementation or use <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html\">ControllerAdvice</a> in some fashion, but all the examples I've see still include forwarding the response to some kind of error mapping, which doesn't help.  Other examples suggest that you'd have to list every Exception type you want to handle instead of just listing \"Throwable\" and getting everything.</p>\n\n<p>Can anyone tell me what I missed, or point me in the right direction on how to do this without suggesting up the chain that Node.js would be easier to deal with?  </p>\n    ","a":"\n<p><strong>Addendum (4/20/16)</strong></p>\n\n<p>An annoymous user suggested an edit and got rejected, but his suggestion looks good and helpful so I'm adding it:</p>\n\n<p>Using Spring Boot 1.3.1.RELEASE</p>\n\n<p><strong>New Step 1 -</strong> It is easy and less intrusive to add the following properties to the application.properties:</p>\n\n<pre><code>spring.mvc.throw-exception-if-no-handler-found=true\nspring.resources.add-mappings=false\n</code></pre>\n\n<blockquote>\n  <p>Much easier than modifying the existing DispatcherServlet instance (as below)! - JO'</p>\n</blockquote>\n\n<p>If working with a full RESTful Application, it is very important to disable the automatic mapping of static resources since if you are using Spring Boot's default configuration for handling static resources then the resource handler will be handling the request (it's ordered last and mapped to /** which means that it picks up any requests that haven't been handled by any other handler in the application) so the dispatcher servlet doesn't get a chance to throw an exception.</p>\n\n<hr>\n\n<p><strong>New Answer (12/04/15)</strong></p>\n\n<p>Using Spring Boot 1.2.7.RELEASE</p>\n\n<p><strong>New Step 1 -</strong> I found a much less intrusive way of setting the \"throExceptionIfNoHandlerFound\" flag.  Replace the DispatcherServlet replacement code below (Step 1) with this in your application initialization class:</p>\n\n<pre><code>@ComponentScan()\n@EnableAutoConfiguration\npublic class MyApplication extends SpringBootServletInitializer {\n    private static Logger LOG = LoggerFactory.getLogger(MyApplication.class);\n    public static void main(String[] args) {\n        ApplicationContext ctx = SpringApplication.run(MyApplication.class, args);\n        DispatcherServlet dispatcherServlet = (DispatcherServlet)ctx.getBean(\"dispatcherServlet\");\n        dispatcherServlet.setThrowExceptionIfNoHandlerFound(true);\n    }\n</code></pre>\n\n<p>In this case, we're setting the flag on the existing DispatcherServlet, which preserves any auto-configuration by the Spring Boot framework.  </p>\n\n<p>One more thing I've found - the @EnableWebMvc annotation is deadly to Spring Boot.  Yes, that annotation enables things like being able to catch all the controller exceptions as described below, but it also kills a LOT of the helpful auto-configuration that Spring Boot would normally provide.  Use that annotation with extreme caution when you use Spring Boot.</p>\n\n<hr>\n\n<p><strong>Original Answer:</strong></p>\n\n<p>After a lot more research and following up on the solutions posted here (thanks for the help!) and no small amount of runtime tracing into the Spring code, I finally found a configuration that will handle all Exceptions (not Errors, but read on) including 404s.</p>\n\n<p><strong>Step 1 -</strong> tell SpringBoot to stop using MVC for \"handler not found\" situations.  We want Spring to throw an exception instead of returning to the client a view redirect to \"/error\".  To do this, you need to have an entry in one of your configuration classes:</p>\n\n<pre><code>// NEW CODE ABOVE REPLACES THIS! (12/04/15)\n@Configuration\npublic class MyAppConfig {\n    @Bean  // Magic entry \n    public DispatcherServlet dispatcherServlet() {\n        DispatcherServlet ds = new DispatcherServlet();\n        ds.setThrowExceptionIfNoHandlerFound(true);\n        return ds;\n    }\n}\n</code></pre>\n\n<p>The downside of this is that it replaces the default dispatcher servlet. This hasn't been a problem for us yet, with no side effects or execution problems showing up.  If you're going to do anything else with the dispatcher servlet for other reasons, this is the place to do them.</p>\n\n<p><strong>Step 2 -</strong> Now that spring boot will throw an exception when no handler is found, that exception can be handled with any others in a unified exception handler:</p>\n\n<pre><code>@EnableWebMvc\n@ControllerAdvice\npublic class ServiceExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @ExceptionHandler(Throwable.class)\n    @ResponseBody\n    ResponseEntity&lt;Object&gt; handleControllerException(HttpServletRequest req, Throwable ex) {\n        ErrorResponse errorResponse = new ErrorResponse(ex);\n        if(ex instanceof ServiceException) {\n            errorResponse.setDetails(((ServiceException)ex).getDetails());\n        }\n        if(ex instanceof ServiceHttpException) {\n            return new ResponseEntity&lt;Object&gt;(errorResponse,((ServiceHttpException)ex).getStatus());\n        } else {\n            return new ResponseEntity&lt;Object&gt;(errorResponse,HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    @Override\n    protected ResponseEntity&lt;Object&gt; handleNoHandlerFoundException(NoHandlerFoundException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\n        Map&lt;String,String&gt; responseBody = new HashMap&lt;&gt;();\n        responseBody.put(\"path\",request.getContextPath());\n        responseBody.put(\"message\",\"The URL you have reached is not in service at this time (404).\");\n        return new ResponseEntity&lt;Object&gt;(responseBody,HttpStatus.NOT_FOUND);\n    }\n    ...\n}\n</code></pre>\n\n<p>Keep in mind that I think the \"@EnableWebMvc\" annotation is significant here.  It seems that none of this works without it.  And that's it - your Spring boot app will now catch all exceptions, including 404s, in the above handler class and you may do with them as you please.</p>\n\n<p>One last point - there doesn't seem to be a way to get this to catch thrown Errors.  I have a wacky idea of using aspects to catch errors and turn them into Exceptions that the above code can then deal with, but I have not yet had time to actually try implementing that.  Hope this helps someone.</p>\n\n<p>Any comments/corrections/enhancements will be appreciated.</p>\n    "},{"t":"What design patterns are used in Spring framework? [closed]","l":"http://stackoverflow.com/questions/755563/what-design-patterns-are-used-in-spring-framework","q":"\n\n<p>What design patterns are used in Spring framework?</p>\n    ","a":"\n<p>There are loads of different design patterns used, but there are a few obvious ones:</p>\n\n<ul>\n<li><p>Proxy - used heavily in <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/aop.html#aop-understanding-aop-proxies\" rel=\"nofollow noreferrer\">AOP</a>, and <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/remoting.html\" rel=\"nofollow noreferrer\">remoting</a>.</p></li>\n<li><p>Singleton - beans defined in spring config files are singletons by default.</p></li>\n<li><p>Template method - used extensively to deal with boilerplate repeated code (such as closing connections cleanly, etc..). For example <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/jdbc.html#jdbc-JdbcTemplate\" rel=\"nofollow noreferrer\">JdbcTemplate</a>, <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/jms.html#jms-jmstemplate\" rel=\"nofollow noreferrer\">JmsTemplate</a>, <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/orm.html#orm-jpa-template\" rel=\"nofollow noreferrer\">JpaTemplate</a>.</p></li>\n</ul>\n\n<hr>\n\n<p>Update following comments: For MVC, you might want to read the <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/mvc.html\" rel=\"nofollow noreferrer\">MVC Reference</a></p>\n\n<p>Some obvious patterns in use in MVC:</p>\n\n<ul>\n<li><p><a href=\"http://java.sun.com/blueprints/patterns/MVC-detailed.html\" rel=\"nofollow noreferrer\">Model View Controller</a> :-)   . The advantage with Spring MVC is that your controllers are POJOs as opposed to being servlets. This makes for easier testing of controllers. One thing to note is that the controller is only required to return a logical view name, and the view selection is left to a separate <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/mvc.html#mvc-viewresolver\" rel=\"nofollow noreferrer\">ViewResolver</a>. This makes it easier to reuse controllers for different view technologies.</p></li>\n<li><p><a href=\"http://java.sun.com/blueprints/corej2eepatterns/Patterns/FrontController.html\" rel=\"nofollow noreferrer\">Front Controller</a>. Spring provides <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/servlet/DispatcherServlet.html\" rel=\"nofollow noreferrer\">DispatcherServlet</a> to ensure an incoming request gets dispatched to your controllers.</p></li>\n<li><p><a href=\"http://java.sun.com/blueprints/corej2eepatterns/Patterns/ViewHelper.html\" rel=\"nofollow noreferrer\">View Helper</a> - Spring has a number of custom JSP tags, and velocity macros, to assist in separating code from presentation in views.</p></li>\n</ul>\n    "},{"t":"Is there a way to avoid undeployment memory leaks in Tomcat?","l":"http://stackoverflow.com/questions/4565105/is-there-a-way-to-avoid-undeployment-memory-leaks-in-tomcat","q":"\n\n<p>This question is for anyone who's ever tested the \"Find leaks\" button in the Tomcat manager and got some results like this:</p>\n\n<blockquote>\n  <p>The following web applications were stopped (reloaded, undeployed), but their classes from previous runs are still loaded in memory, thus causing a memory leak (use a profiler to confirm): <br>\n  /leaky-app-name</p>\n</blockquote>\n\n<p>I'm assuming this has something to do with that \"Perm Gen space\" error you often get with frequent redeployments.</p>\n\n<p>So what I'm seeing in jconsole when I deploy is that my loaded classes goes from about 2k to 5k. Then you would think an undeployment should drop them back down to 2k but they remain at 5k.</p>\n\n<p>I've also tried using the following JVM options: </p>\n\n<p><code>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:+CMSPermGenSweepingEnabled</code></p>\n\n<p>I did see VERY minor dips in the amount of Perm Gen space used but not what I expected and the loaded class counts did not drop.</p>\n\n<p>So is there a way to configure Tomcat or design your app to unload better on an undeployment? Or are we stuck with restarting the server after some major debugging sessions?</p>\n\n<p>Tomcat version output:</p>\n\n<blockquote>\n  <p>Server version: Apache Tomcat/6.0.29 <br>\n  Server built:   July 19 2010 1458 <br>\n  Server number:  6.0.0.29 <br>\n  OS Name:        Windows 7 <br>\n  OS Version:     6.1 <br>\n  Architecture:   x86 <br>\n  JVM Version:    1.6.0_18-b07 <br>\n  JVM Vendor:     Sun Microsystems Inc. <br></p>\n</blockquote>\n\n<p><strong>Update:</strong></p>\n\n<p>Thanks to celias' answer I decided to do a little more digging and I think I determined the culprit to be in my application thanks to CXF, Spring and JAXB.</p>\n\n<p>After I learned how to profile a Java application, I pointed the profiler at Tomcat and took some heap dumps and snapshots to see what the objects and classes looked like in memory. I discovered that some of the enumerations from my XML schema used in my CXF/JAXB (wsdl2java) generated classes were lingering after an undeployment. According to my heap dump it looks like the objects were tied to a Map. Disclaimer: I admit I'm still a little green with profiling and tracing an object's call tree can be challenging in Java.</p>\n\n<p>Also I should mention that I didn't even invoke the service, just deployed then undeployed it. The objects themselves appeared to be loaded via reflection initiated from Spring on deployment. I believe I followed the convention for setting up a CXF service in Spring. So I'm not 100% sure if this is Spring/CXF, JAXB, or reflection's fault.</p>\n\n<p>As a side note: the application in question is a web service using Spring/CXF and the XML happens to be a rather complex schema (an extension of <a href=\"http://www.niem.gov/implementationguide.php\">NIEM</a>).</p>\n    ","a":"\n<p>If you want to make sure not to cause leaks you have to do the following:</p>\n\n<ul>\n<li>Make sure your web application does not use any java classes that are in the web container shared libraries. If you have any shared libraries, make sure there is no strong references to the objects in those libraries</li>\n<li>Avoid using static variables, especially on java objects like HashTable, Sets, etc. If you need to, make sure that you call remove to release the objects with the maps, lists...</li>\n</ul>\n\n<p>Here is also a good article on ThreadLocal and MemoryLeaks - <a href=\"http://blog.arendsen.net/index.php/2005/02/22/threadlocals-and-memory-leaks-revisited/\">http://blog.arendsen.net/index.php/2005/02/22/threadlocals-and-memory-leaks-revisited/</a></p>\n    "},{"t":"Set System Property With Spring Configuration File","l":"http://stackoverflow.com/questions/3339736/set-system-property-with-spring-configuration-file","q":"\n\n<p><strong>Configuration</strong>:<br>\nSpring 2.5, Junit 4, Log4j<br>\nThe log4j file location is specified from a system property</p>\n\n<pre><code>${log.location}\n</code></pre>\n\n<p>At runtime, system property set with -D java option.  All is well.</p>\n\n<p><strong>Problem / What I Need:</strong><br>\nAt unit test time, system property not set, and file location not resolved. <br>\nApp uses Spring, would like to simply configure Spring to <strong>set</strong> the system property.</p>\n\n<p><strong>More Info:</strong><br>\nRequirement is for configuration only.  Can't introduce new Java code, or entries into IDE.  Ideally, one of Spring's property configuration implementations could handle this--I just haven't been able to find the right combination.</p>\n\n<p>This idea is close, but needs to add Java code:<br>\n<a href=\"http://rolfje.wordpress.com/2008/07/23/spring-systempropertyinitilizingbean\" rel=\"nofollow noreferrer\">Spring SystemPropertyInitializingBean</a></p>\n\n<p>Any help out there?  Any ideas are appreciated.</p>\n    ","a":"\n<p>You can achieve that with the combination of two <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html\" rel=\"nofollow noreferrer\">MethodInvokingFactoryBeans</a></p>\n\n<p>Create an inner bean that accesses System.getProperties and an outer bean that invokes putAll on the properties acquired by the inner bean:</p>\n\n<pre><code>&lt;bean\n    class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;\n    &lt;property\n        name=\"targetObject\"&gt;\n        &lt;!-- System.getProperties() --&gt;\n        &lt;bean\n            class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;\n            &lt;property name=\"targetClass\" value=\"java.lang.System\" /&gt;\n            &lt;property name=\"targetMethod\" value=\"getProperties\" /&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n    &lt;property\n        name=\"targetMethod\"\n        value=\"putAll\" /&gt;\n    &lt;property\n        name=\"arguments\"&gt;\n        &lt;!-- The new Properties --&gt;\n        &lt;util:properties&gt;\n            &lt;prop\n                key=\"my.key\"&gt;myvalue&lt;/prop&gt;\n            &lt;prop\n                key=\"my.key2\"&gt;myvalue2&lt;/prop&gt;\n            &lt;prop\n                key=\"my.key3\"&gt;myvalue3&lt;/prop&gt;\n\n        &lt;/util:properties&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>(You could of course use just one bean and target System.setProperties(), but then you'd be replacing existing properties which is not a good idea.</p>\n\n<p>Anyway, here's my little test method:</p>\n\n<pre><code>public static void main(final String[] args) {\n\n    new ClassPathXmlApplicationContext(\"classpath:beans.xml\");\n\n    System.out.println(\"my.key: \"+System.getProperty(\"my.key\"));\n    System.out.println(\"my.key2: \"+System.getProperty(\"my.key2\"));\n    System.out.println(\"my.key3: \"+System.getProperty(\"my.key3\"));\n\n    // to test that we're not overwriting existing properties\n    System.out.println(\"java.io.tmpdir: \"+System.getProperty(\"java.io.tmpdir\"));\n}\n</code></pre>\n\n<p>And here's the output:</p>\n\n<pre><code>my.key: myvalue\nmy.key2: myvalue2\nmy.key3: myvalue3\njava.io.tmpdir: C:\\DOKUME~1\\SEANFL~1\\LOKALE~1\\Temp\\\n</code></pre>\n    "},{"t":"How to close a spring ApplicationContext?","l":"http://stackoverflow.com/questions/14423980/how-to-close-a-spring-applicationcontext","q":"\n\n<p>After my application finishes I want to close the spring context.<br>\nThe relevant code has an <code>ApplicationContext</code> reference but I couldn't find a <code>close</code> method.</p>\n    ","a":"\n<p>Downcast your <a href=\"http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html\" rel=\"nofollow\"><code>ApplicationContext</code></a> to <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/context/ConfigurableApplicationContext.html\" rel=\"nofollow\"><code>ConfigurableApplicationContext</code></a> which defines <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/context/ConfigurableApplicationContext.html#close()\" rel=\"nofollow\"><code>close()</code></a> method:</p>\n\n<pre><code>((ConfigurableApplicationContext)appCtx).close();\n</code></pre>\n    "},{"t":"How to configure log4j.properties for SpringJUnit4ClassRunner?","l":"http://stackoverflow.com/questions/4570072/how-to-configure-log4j-properties-for-springjunit4classrunner","q":"\n\n<p>Suddenly this keeps happening during a JUnit test. Everything was working, I wrote some new tests and this error occured. If I revert it, it won't go away. Why is that?</p>\n\n<pre><code>log4j:WARN No appenders could be found for logger (org.springframework.test.context.junit4.SpringJUnit4ClassRunner).\nlog4j:WARN Please initialize the log4j system properly.\nlog4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.\n</code></pre>\n    ","a":"\n<p>The new tests you wrote (directly or indirectly) use <strong>classes that log using Log4j</strong>.</p>\n\n<p>Log4J needs to be configured for this logging to work properly.</p>\n\n<p>Put a <strong>log4j.properties</strong> (or log4j.xml) file in the <strong>root of your test classpath</strong>.</p>\n\n<p>It should have some basic configuration such as</p>\n\n<pre><code># Set root logger level to DEBUG and its only appender to A1.\nlog4j.rootLogger=DEBUG, A1\n\n# A1 is set to be a ConsoleAppender.\nlog4j.appender.A1=org.apache.log4j.ConsoleAppender\n\n# A1 uses PatternLayout.\nlog4j.appender.A1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n\n# An alternative logging format:\n# log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1} - %m%n\n</code></pre>\n\n<p>An appender outputs to the console by default, but you can also explicitly set the target like this:</p>\n\n<pre><code>log4j.appender.A1.Target=System.out\n</code></pre>\n\n<p>This will redirect all output in a nice format to the console. More info can be found here in the <a href=\"http://logging.apache.org/log4j/1.2/manual.html\">Log4J manual</a>,  </p>\n\n<p>Log4J Logging will then be properly configured and this warning will disappear.</p>\n    "},{"t":"Spring AOP: What's the difference between JoinPoint and PointCut?","l":"http://stackoverflow.com/questions/15447397/spring-aop-whats-the-difference-between-joinpoint-and-pointcut","q":"\n\n<p>I'm learning Aspect Oriented Programming concepts and Spring AOP. I'm failing to understand the difference between a Pointcut and a Joinpoint - both of them seem to be the same for me. A Pointcut is where you apply your advise and a Joinpoint is also a place where we can apply our advise, then what's the difference?</p>\n\n<p>An example of a pointcut can be:</p>\n\n<pre><code>@Pointcut(\"execution(* * getName()\")\n</code></pre>\n\n<p>What can be an example of a Joinpoint? </p>\n    ","a":"\n<p><strong>Joinpoint:</strong> A joinpoint is a <em>candidate</em> point in the <strong>Program Execution</strong> of the application where an aspect can be plugged in. This point could be a method being called, an exception being thrown, or even a field being modified. These are the points where your aspect’s code can be inserted into the normal flow of your application to add new behavior.</p>\n\n<p><strong>Advice:</strong> This is an object which includes API invocations to the system wide concerns representing the action to perform at a joinpoint specified by a point.</p>\n\n<p><strong>Pointcut:</strong> A pointcut defines at what joinpoints, the associated Advice should be applied. Advice can be applied at any joinpoint supported by the AOP framework. Of course, you don’t want to apply all of your aspects at all of the possible joinpoints. Pointcuts allow you to specify where you want your advice to be applied. Often you specify these pointcuts using explicit class and method names or through regular expressions that define matching class and method name patterns. Some AOP frameworks allow you to create dynamic pointcuts that determine whether to apply advice based on runtime decisions, such as the value of method parameters.</p>\n\n<p>The following image can help you understand Advice, PointCut, Joinpoints.\n<img src=\"https://i.stack.imgur.com/J7Hrh.png\" alt=\"enter image description here\"></p>\n\n<p><a href=\"https://sites.google.com/site/javatouch/introductiontoaop\" rel=\"nofollow noreferrer\">Source</a></p>\n\n<p><strong>Explaination using Restaurant Analogy:</strong> <a href=\"http://www.coderanch.com/t/485525/Spring/Difference-Joint-Point-Point-Cut\" rel=\"nofollow noreferrer\">Source by @Victor</a> </p>\n\n<p>When you go out to a restaurant, you look at a menu and see several options to choose from. You can order one or more of any of the items on the menu. But until you actually order them, they are just \"opportunities to dine\". Once you place the order and the waiter brings it to your table, it's a meal. </p>\n\n<p>Join points are the options on the menu and pointcuts are the items you select. A joinpoint is an opportunity within code for you to apply an aspect...just an opportunity. Once you take that opportunity and select one or more joinpoints and apply an aspect to them, you've got a pointcut. </p>\n    "},{"t":"Splitting applicationContext to multiple files","l":"http://stackoverflow.com/questions/600095/splitting-applicationcontext-to-multiple-files","q":"\n\n<p>What is the correct way to split Spring's configuration to multiple xml files?</p>\n\n<p>At the moment I have</p>\n\n<ul>\n<li><code>/WEB-INF/foo-servlet.xml</code></li>\n<li><code>/WEB-INF/foo-service.xml</code></li>\n<li><code>/WEB-INF/foo-persistence.xml</code></li>\n</ul>\n\n<p>My <code>web.xml</code> has the following:</p>\n\n<pre><code>&lt;servlet&gt;\n    &lt;description&gt;Spring MVC Dispatcher Servlet&lt;/description&gt;\n    &lt;servlet-name&gt;intrafest&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;\n        org.springframework.web.servlet.DispatcherServlet\n    &lt;/servlet-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            /WEB-INF/foo-*.xml\n        &lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n\n&lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;\n            /WEB-INF/foo-*.xml\n    &lt;/param-value&gt;\n&lt;/context-param&gt;\n\n\n&lt;listener&gt;\n    &lt;listener-class&gt;\n        org.springframework.web.context.ContextLoaderListener\n    &lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>\n\n<p>The actual questions:</p>\n\n<ul>\n<li>Is this approach <em>correct/best</em>?</li>\n<li>Do I really need to specify the config locations both in the <code>DispatcherServlet</code> <em>AND</em> the <code>context-param</code> sections?</li>\n</ul>\n\n<p>What do I need to keep in mind to be able to reference beans defined in <code>foo-servlet.xml</code> from <code>foo-service.xml</code>? Does this have something to do with specifying <code>contextConfigLocation</code> in <code>web.xml</code>?</p>\n\n<p><strong>Update 1:</strong></p>\n\n<p>I'm using <em>Spring</em> framework 3.0. It's my understanding that I don't need to do resource importing like this:</p>\n\n<pre><code> &lt;import resource=\"foo-services.xml\"/&gt; \n</code></pre>\n\n<p>Is this a correct assumption?</p>\n    ","a":"\n<p>I find the following setup the easiest.</p>\n\n<p>Use the default config file loading mechanism of <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/mvc.html#mvc-servlet\" rel=\"nofollow noreferrer\">DispatcherServlet</a>:</p>\n\n<blockquote>\n  <p>The framework will, on initialization\n  of a DispatcherServlet, look for a\n  file named [servlet-name]-servlet.xml\n  in the WEB-INF directory of your web\n  application and create the beans\n  defined there (overriding the\n  definitions of any beans defined with\n  the same name in the global scope).</p>\n</blockquote>\n\n<p>In your case, simply create a file <code>intrafest-servlet.xml</code> in the <code>WEB-INF</code> dir and don't need to specify anything specific information in <code>web.xml</code>.</p>\n\n<p>In <code>intrafest-servlet.xml</code> file you can use <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-xml-import\" rel=\"nofollow noreferrer\">import</a> to compose your XML configuration.</p>\n\n<pre><code>&lt;beans&gt;\n  &lt;bean id=\"bean1\" class=\"...\"/&gt;\n  &lt;bean id=\"bean2\" class=\"...\"/&gt;\n\n  &lt;import resource=\"foo-services.xml\"/&gt;\n  &lt;import resource=\"foo-persistence.xml\"/&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>Note that the Spring team actually prefers to load multiple config files when creating the (Web)ApplicationContext. If you still want to do it this way, I think you don't need to specify both context parameters (<code>context-param</code>) <em>and</em> servlet initialization parameters (<code>init-param</code>). One of the two will do. You can also use commas to specify multiple config locations.</p>\n    "},{"t":"How to check String in response body with mockMvc","l":"http://stackoverflow.com/questions/18336277/how-to-check-string-in-response-body-with-mockmvc","q":"\n\n<p>I have simple integration test </p>\n\n<pre><code>    @Test\npublic void shouldReturnErrorMessageToAdminWhenCreatingUserWithUsedUserName() throws Exception {\n    mockMvc.perform(post(\"/api/users\").header(\"Authorization\", base64ForTestUser).contentType(MediaType.APPLICATION_JSON)\n            .content(\"{\\\"userName\\\":\\\"testUserDetails\\\",\\\"firstName\\\":\\\"xxx\\\",\\\"lastName\\\":\\\"xxx\\\",\\\"password\\\":\\\"xxx\\\"}\"))\n            .andDo(print())\n            .andExpect(status().isBadRequest())\n            .andExpect(?);\n}\n</code></pre>\n\n<p>In last line I want to compare string received in response body to expected string</p>\n\n<p>And in response I get:</p>\n\n<pre><code>MockHttpServletResponse:\n          Status = 400\n   Error message = null\n         Headers = {Content-Type=[application/json]}\n    Content type = application/json\n            Body = \"Username already taken\"\n   Forwarded URL = null\n  Redirected URL = null\n</code></pre>\n\n<p>Tried some tricks with content(), body() but nothing worked.</p>\n    ","a":"\n<p>@Sotirios Delimanolis answer do the job however I was looking for comparing strings within this mockMvc assertion</p>\n\n<p>So here it is </p>\n\n<pre><code>.andExpect(content().string(\"\\\"Username already taken - please try with different username\\\"\"));\n</code></pre>\n\n<p>Of course my assertion fail:</p>\n\n<pre><code>java.lang.AssertionError: Response content expected:\n&lt;\"Username already taken - please try with different username\"&gt; but was:&lt;\"Something gone wrong\"&gt;\n</code></pre>\n\n<p>because:</p>\n\n<pre><code>  MockHttpServletResponse:\n            Body = \"Something gone wrong\"\n</code></pre>\n\n<p>So this is proof that it works!</p>\n    "},{"t":"Is it possible from Spring to inject the result of calling a method on a ref bean?","l":"http://stackoverflow.com/questions/2520722/is-it-possible-from-spring-to-inject-the-result-of-calling-a-method-on-a-ref-bea","q":"\n\n<p>Is it possible from Spring to inject the result of calling a method on a ref bean? </p>\n\n<p>I'm trying to refactor some cut/pasted code from two separate projects into a common class. In one of the projects, the code lives in a class I'll call \"MyClient\" that is being instantiated from Spring. It is injected with another spring-instantiated class \"MyRegistry\", then the MyClient class uses that class to look up an endpoint. All I really need is the endpoint String in my refactored class, which can be initialized via a Setter. I really cannot have a dependency on MyRegistry from MyClient in the refactored code. </p>\n\n<p>So, my question is this... is there a way I can inject the endpoint String from spring that was looked up in the MyRegistry class. So, I currently have:</p>\n\n<pre><code>&lt;bean id=\"registryService\" class=\"foo.MyRegistry\"&gt;\n...properties set etc...\n&lt;/bean&gt;\n\n&lt;bean id=\"MyClient\" class=\"foo.MyClient\"&gt;\n    &lt;property name=\"registry\" ref=\"registryService\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>But I'd like to have (and I know this is imaginary Spring syntax)</p>\n\n<pre><code>&lt;bean id=\"MyClient\" class=\"foo.MyClient\"&gt;\n    &lt;property name=\"endPoint\" value=\"registryService.getEndPoint('bar')\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>where MyRegistry will have a method getEndPoint(Stirng endPointName)</p>\n\n<p>Hope that makes sense from a the standpoint of what I'm trying to achieve. Please let me know if something like this is possible in Spring!</p>\n    ","a":"\n<p>The nicest solution is to use Spring 3's expression language as described by @ChssPly76, but if you're using an older version of Spring, it's almost as easy:</p>\n\n<pre><code>&lt;bean id=\"MyClient\" class=\"foo.MyClient\"&gt;\n   &lt;property name=\"endPoint\"&gt;\n      &lt;bean factory-bean=\"registryService\" factory-method=\"getEndPoint\"&gt;\n         &lt;constructor-arg value=\"bar\"/&gt;\n      &lt;/bean&gt;\n   &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n    "},{"t":"How do you set cache headers in Spring MVC?","l":"http://stackoverflow.com/questions/1362930/how-do-you-set-cache-headers-in-spring-mvc","q":"\n\n<p>In an annotation-based Spring MVC controller, what is the preferred way to set cache headers for a specific path?</p>\n    ","a":"\n<p><a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/servlet/support/WebContentGenerator.html\" rel=\"nofollow noreferrer\">org.springframework.web.servlet.support.WebContentGenerator</a>, which is the base class for all Spring controllers has quite a few methods dealing with cache headers:</p>\n\n<pre><code>/* Set whether to use the HTTP 1.1 cache-control header. Default is \"true\".\n * &lt;p&gt;Note: Cache headers will only get applied if caching is enabled\n * (or explicitly prevented) for the current request. */\npublic final void setUseCacheControlHeader();\n\n/* Return whether the HTTP 1.1 cache-control header is used. */\npublic final boolean isUseCacheControlHeader();\n\n/* Set whether to use the HTTP 1.1 cache-control header value \"no-store\"\n * when preventing caching. Default is \"true\". */\npublic final void setUseCacheControlNoStore(boolean useCacheControlNoStore);\n\n/* Cache content for the given number of seconds. Default is -1,\n * indicating no generation of cache-related headers.\n * Only if this is set to 0 (no cache) or a positive value (cache for\n * this many seconds) will this class generate cache headers.\n * The headers can be overwritten by subclasses, before content is generated. */\npublic final void setCacheSeconds(int seconds);\n</code></pre>\n\n<p>They can either be invoked within your controller prior to content generation or specified as bean properties in Spring context.</p>\n    "},{"t":"Get UserDetails object from Security Context in Spring MVC controller","l":"http://stackoverflow.com/questions/6161985/get-userdetails-object-from-security-context-in-spring-mvc-controller","q":"\n\n<p>I'm using Spring Security 3 and Spring MVC 3.05.</p>\n\n<p>I would like to print username of currently logged in user,how can I fetch UserDetails in my Controller?</p>\n\n<pre><code>@RequestMapping(value=\"/index.html\", method=RequestMethod.GET)\n    public ModelAndView indexView(){\n         UserDetails user = ?\n                mv.addObject(\"username\", user.getUsername());\n        ModelAndView mv = new ModelAndView(\"index\");\n        return mv;\n    }   \n</code></pre>\n    ","a":"\n<p>If you already know for sure that the user is logged in (in your example if <code>/index.html</code> is protected):</p>\n\n<pre><code>UserDetails userDetails =\n (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n</code></pre>\n\n<p>To first check if the user is logged in, check that the current <code>Authentication</code> is not a <code>AnonymousAuthenticationToken</code>.</p>\n\n<pre><code>Authentication auth = SecurityContextHolder.getContext().getAuthentication();\nif (!(auth instanceof AnonymousAuthenticationToken)) {\n        // userDetails = auth.getPrincipal()\n}\n</code></pre>\n    "},{"t":"How to query data via Spring data JPA by sort and pageable both out of box？","l":"http://stackoverflow.com/questions/10527124/how-to-query-data-via-spring-data-jpa-by-sort-and-pageable-both-out-of-box","q":"\n\n<p>I am trying <a href=\"http://www.springsource.org/spring-data/jpa\">Spring data JPA</a> in my project. I want to know if there is an out of box API to query data  by both sort and pageable. Of course, I know I can write that method by myself, just want to know if there is an OOTB one. My DAO extends JpaRepository, and I found there are the following methods I can invoke:</p>\n\n<pre><code>findAll();\nfindAll(Pageable pageable);\nfindAll(Sort sort);\n</code></pre>\n\n<p>But no such method findAll(Sort,Pageable),I am curious.</p>\n    ","a":"\n<p>There are two ways to achieve this:</p>\n\n<pre><code>final PageRequest page1 = new PageRequest(\n  0, 20, Direction.ASC, \"lastName\", \"salary\"\n);\n\nfinal PageRequest page2 = new PageRequest(\n  0, 20, new Sort(\n    new Order(Direction.ASC, \"lastName\"), \n    new Order(Direction.DESC, \"salary\")\n  )\n);\n\ndao.findAll(page1);\n</code></pre>\n\n<p>As you can see the second form is more flexible as it allows to define different direction for every property (<code>lastName ASC, salary DESC</code>).</p>\n    "},{"t":"Spring MVC: difference between <context:component-scan> and <annotation-driven /> tags?","l":"http://stackoverflow.com/questions/13661985/spring-mvc-difference-between-contextcomponent-scan-and-annotation-driven","q":"\n\n<p>Some days ago I began to study this Spring Hello World Tutorial: <a href=\"http://viralpatel.net/blogs/spring-3-mvc-create-hello-world-application-spring-3-mvc/\">http://viralpatel.net/blogs/spring-3-mvc-create-hello-world-application-spring-3-mvc/</a></p>\n\n<p>In this tutorial Spring DispatcherServlet is configured using the <em>spring-servlet.xml</em> file, this one: </p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n &lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n\nxsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context \n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n&lt;context:component-scan base-package=\"net.viralpatel.spring3.controller\" /&gt;\n\n&lt;bean id=\"viewResolver\"\n    class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"&gt;\n    &lt;property name=\"viewClass\"\n        value=\"org.springframework.web.servlet.view.JstlView\" /&gt;\n    &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt;\n    &lt;property name=\"suffix\" value=\".jsp\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p></p>\n\n<p>In this file I am using the <strong>context:component-scan</strong> tag to say that Spring have to scan my file searching the annotation, so for example, when the controller class finds that a method is annotated by <strong>@RequestMapping(\"/hello\")</strong> annotation knows that this method handles the HTTP Request toward the URL ending with \"/hello\". This is simple...</p>\n\n<p>Now my doubt is related to the Spring MVC template project that I could automatically build in STS\\Eclipse. </p>\n\n<p>When I create a new Spring MVC project in STS I have that my <em>DispatcherServlet</em> is configured by a file named <strong>servlet-context.xml</strong> that contains some configuration similar to the previous example file.</p>\n\n<p>In this file, I still have  the component scan tag:</p>\n\n<pre><code>&lt;context:component-scan base-package=\"com.mycompany.maventestwebapp\" /&gt;\n</code></pre>\n\n<p>but I have also another tag (that look like have similar task), this one:</p>\n\n<pre><code>&lt;annotation-driven /&gt;\n</code></pre>\n\n<p>What is the difference between these two tags?<br>\nAn other \"strange\" thing is that the previous example (that don't use the annotation-driven tag) is very similar to the project create by STS using the Spring MVC Template project but if I delete the annotation-driven tag from its configuration file the project don't run and give me the following error: <strong>HTTP Status 404 -</strong></p>\n\n<p>And in the stacktrace I have:</p>\n\n<p><strong>WARN : org.springframework.web.servlet.PageNotFound - No mapping found for HTTP request with URI [/maventestwebapp/] in DispatcherServlet with name 'appServlet'</strong></p>\n\n<p>But why? The previous example works well without annotation-driven tag, and this controller class is very similar. In fact, there is only one method that handles HTTP request toward \"/\" path</p>\n\n<p>This is the code of my controller class:</p>\n\n<pre><code>package com.mycompany.maventestwebapp;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Locale;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n/**\n * Handles requests for the application home page.\n*/\n@Controller\npublic class HomeController {\n\nprivate static final Logger logger = LoggerFactory.getLogger(HomeController.class);\n\n/**\n * Simply selects the home view to render by returning its name.\n */\n@RequestMapping(value = \"/\", method = RequestMethod.GET)\npublic String home(Locale locale, Model model) {\n    logger.info(\"Welcome home! The client locale is {}.\", locale);\n\n    Date date = new Date();\n    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);\n\n    String formattedDate = dateFormat.format(date);\n\n    model.addAttribute(\"serverTime\", formattedDate );\n\n    return \"home\";\n}\n</code></pre>\n\n<p>Can someone help me to understand this thing?</p>\n\n<p>Thank you very much!</p>\n    ","a":"\n<p><code>&lt;mvc:annotation-driven /&gt;</code> means that you can define spring beans dependencies without actually having to specify a bunch of  elements in xml or implement an interface or extend a base class. For example <code>@Repository</code> to tell spring that a class is a Dao without having to extend <code>JpaDaoSupport</code> or some other subclass of DaoSupport. Similarly <code>@Controller</code> tells spring that the the class specified contains methods that will handle http requests without you having to implement the Controller interface or extend a subclass that implements controller. </p>\n\n<p>When spring starts up it reads its xml configuration file and looks for <code>&lt;bean</code> elements within it if it sees something like <code>&lt;bean class=\"com.example.Foo\" /&gt;</code> and  Foo was marked up with <code>@Controller</code> it knows that the class is a controller and treats it as such. By default spring assumes that all the classes it should manage are explicitly defined in the beans.xml file.</p>\n\n<p>Component scanning with <code>&lt;context:component-scan base-package=\"com.mycompany.maventestwebapp\" /&gt;</code> is telling spring that it should search the class path for all the classes under com.mycompany.maventestweapp and look at each class to see if it has a <code>@Controller</code>, or <code>@Repository</code>, or <code>@Service</code>, or <code>@Component</code> and if it does then Spring will register the class with the bean factory as if you had typed <code>&lt;bean class=\"...\" /&gt;</code> in the xml configuration files. </p>\n\n<p>In a typical spring mvc app you will find that there are two spring configuration files, a file that configures the application context, usually started with the spring context listener. </p>\n\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>\n\n<p>And a Spring MVC configuration file usually started with the Spring dispatcher servlet. For example.</p>\n\n<pre><code>&lt;servlet&gt;\n        &lt;servlet-name&gt;main&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;main&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n</code></pre>\n\n<p>Spring has support for hierarchical bean factories, so in the case of the spring mvc, the dispatches servlet context is a child of the main application context. If the servlet context was asked for a bean called \"abc\" it will look in the servlet context first, if it does not find it there it will look in the parent context, which is the application context. </p>\n\n<p>Common beans such as data sources, jpa configuration, business services are defined in the application context while MVC specific configuration goes not the configuration file associated with the servlet. </p>\n\n<p>Hope this helps. </p>\n    "},{"t":"How to set active spring 3.1 environment profile via a properites file and not via an env variable or system property","l":"http://stackoverflow.com/questions/8587489/how-to-set-active-spring-3-1-environment-profile-via-a-properites-file-and-not-v","q":"\n\n<p>We use the new environment profiles feature of spring 3.1. We currently set the active profile by setting the environment variable spring.profiles.active=xxxxx on the server to which we deploy the application.</p>\n\n<p>We think this is a suboptimal solution as the war file we want to deploy should just have an additional properties file which sets the environment in which the spring app context should load so the deployment is not dependent on some env var set on the server.</p>\n\n<p>I tried to figure out how to do that and found:</p>\n\n<p><a href=\"http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/core/env/ConfigurableEnvironment.html#setActiveProfiles%28java.lang.String...%29\"><code>ConfigurableEnvironment.setActiveProfiles()</code></a></p>\n\n<p>which I can use to programmatically set the profile but then I still don't know where and when to execute this code. Somewhere where the spring context loads up? Can I load the parameter I want to pass to the method from a properties file?</p>\n\n<p>UPDATE: I just found at <a href=\"http://docs.oracle.com/javaee/1.4/api/javax/servlet/ServletContextListener.html?is-external=true\">docs</a> which I might be able to implement to set the active profile?</p>\n    ","a":"\n<p>The answer from Thomasz is valid as long as the profile name can be provided statically in the web.xml or one uses the new XML-less configuration type where one could programmatically load the profile to set from a properties file.</p>\n\n<p>As we still use the XML version I investigated further and found the following nice solution where you implement your own <code>ApplicationContextInitializer</code> where you just add a new PropertySource with a properties file to the list of sources to search for environment specific configuration settings. in the example below one could set the <code>spring.profiles.active</code> property in the <code>env.properties</code> file.</p>\n\n<pre><code>public class P13nApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; {\n\n    private static Logger LOG = LoggerFactory.getLogger(P13nApplicationContextInitializer.class);\n\n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        ConfigurableEnvironment environment = applicationContext.getEnvironment();\n        try {\n            environment.getPropertySources().addFirst(new ResourcePropertySource(\"classpath:env.properties\"));\n            LOG.info(\"env.properties loaded\");\n        } catch (IOException e) {\n            // it's ok if the file is not there. we will just log that info.\n            LOG.info(\"didn't find env.properties in classpath so not loading it in the AppContextInitialized\");\n        }\n    }\n\n}\n</code></pre>\n\n<p>You then need to add that initializer as a parameter to the <code>ContextLoaderListener</code> of spring as follows to your <code>web.xml</code>:</p>\n\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;contextInitializerClasses&lt;/param-name&gt;\n    &lt;param-value&gt;somepackage.P13nApplicationContextInitializer&lt;/param-value&gt;\n&lt;/context-param&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>\n\n<p>You can also apply it to <code>DispatcherServlet</code>:</p>\n\n<pre><code>&lt;servlet&gt;\n    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextInitializerClasses&lt;/param-name&gt;\n        &lt;param-value&gt;somepackage.P13nApplicationContextInitializer&lt;/param-value&gt;\n    &lt;/init-param&gt;\n&lt;/servlet&gt;\n</code></pre>\n    "},{"t":"Maven dependency spring-web vs spring-webmvc","l":"http://stackoverflow.com/questions/13533700/maven-dependency-spring-web-vs-spring-webmvc","q":"\n\n<p>What is the difference between the following dependencies?</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code> &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n    &lt;version&gt;3.1.2.RELEASE&lt;/version&gt;\n &lt;/dependency&gt;\n</code></pre>\n\n<p>vs</p>\n\n<pre><code> &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n      &lt;version&gt;3.1.2.RELEASE&lt;/version&gt;\n &lt;/dependency&gt;\n</code></pre>\n\n<p>If I include <code>spring-webmvc</code> alone then <code>spring-web</code> is implicitly added. </p>\n\n<p>When should we use <code>spring-web</code> alone?</p>\n    ","a":"\n<p><code>spring-web</code> provides core HTTP integration, including some handy Servlet filters, Spring HTTP Invoker, infrastructure to integrate with other web frameworks and HTTP technologies e.g. Hessian, Burlap.</p>\n\n<p><code>spring-webmvc</code> is an implementation of Spring MVC. <code>spring-webmvc</code> <a href=\"http://repo1.maven.org/maven2/org/springframework/spring-webmvc/3.1.3.RELEASE/spring-webmvc-3.1.3.RELEASE.pom\">depends on</a> on <code>spring-web</code>, thus including it will transitively add <code>spring-web</code>. You don't have to add <code>spring-web</code> explicitly.</p>\n\n<p>You should depend only on <code>spring-web</code> if you don't use Spring MVC but want to take advantage of other web-related technologies that Spring supports.</p>\n    "},{"t":"Caching with Hibernate + Spring - some Questions!","l":"http://stackoverflow.com/questions/5405417/caching-with-hibernate-spring-some-questions","q":"\n\n<p>Im working on developing a webapplication with Spring 3 and Hibernate 3.6. At the moment I try to understand how Caching with Spring and Hibernate works. I found some sources about Caching with Hibernate and some about Spring and I try to bring my informations together now. I still got some questions to both frameworks and Id be glad if someone could answer them or tell me if the facts listed here are correct.</p>\n\n<p>Most of the time, short answers (yes/no) would be sufficient. I think that this list can be useful for others too, who want to understand how caching with spring and hibernate works.</p>\n\n<p><code>General</code></p>\n\n<p><strong>1)</strong> Hibernate supports the following Caches: 1st Level Cache, 2nd Level Cache, Query Cache</p>\n\n<p><strong>2)</strong> Spring itself supports the following Caching possibilities: just Method Caching </p>\n\n<p><code>1st Level Cache</code></p>\n\n<p><strong>3)</strong> The 1st Level Cache is part of EVERY Hibernate application. </p>\n\n<p><strong>4)</strong> The 1st Level Cache is created for EVERY hibernate-session. </p>\n\n<p><strong>5)</strong> What is saved in the 1st Level Cache? Objects or just the values of their properties? queries and their results?</p>\n\n<p><code>2nd Level Cache</code></p>\n\n<p><strong>6)</strong> I found out: the 2nd Level Cache is used ONCE per application. isn't that false? isn't it used ONCE per sessionfactory? and: multiple sessionfactorys = multiple 2nd level caches possible?</p>\n\n<p><strong>7)</strong> what is saved in the 2nd Level Cache: in my opinion just the values belonging to one record, not the objects itself.</p>\n\n<p><strong>8)</strong> when storing values from one record in 2nd Level Cache, its possible to store related values (from objects connected over a foreign key) with it too?</p>\n\n<p><strong>9)</strong> when updating the values of one object in the 2nd level cache, its possible to update the values of objects connected with it in the cache too?</p>\n\n<p><strong>10)</strong> when values of an object are changing, how can I update the 2nd level cache? flush? can I just update a part of the cache or must the whole cache be updated?</p>\n\n<p><strong>11)</strong> where does the 2nd level cache make sense and where doesnt it?</p>\n\n<p><strong>12)</strong> the Cache Mode: does each cache mode provide a different strategy of caching? for example with cache mode \"read only\" no synchronization of database and cache is ever necessary? do other cache modes provide synchronization? I thought synchronization must be done by the developer himself?</p>\n\n<p><code>Query Cache</code></p>\n\n<p><strong>13)</strong> what is the difference between the Query Cache and the 2nd Level Cache? in my opinion: in the Query Cache result sets are saved, but not with their values, just with their ids. when the query is used again and the result set is still \"correct\", the values belonging to the ids are queried from the 2nd Level Cache</p>\n\n<p><strong>14)</strong> For the Query Cache a 2nd Level Cache MUST be used?</p>\n\n<p><strong>15)</strong> where does the Query Cache make sense and where doesnt it?</p>\n\n<p><code>Spring</code></p>\n\n<p><strong>16)</strong> Does Spring provide more Caching possibilities than method caching?</p>\n\n<p><strong>17)</strong> method caching is not linked to hibernate caching</p>\n\n<p><strong>18)</strong> but: for method caching a 2nd level is necessary, like ehcache (which can be used by hibernate too)</p>\n\n<p><strong>19)</strong> can method caching be used without database queries?</p>\n\n<p><code>Getting mixed up</code></p>\n\n<p><strong>20)</strong> if using ehcache for hibernate as 2nd level cache and ehcache for spring for method caching, can I use the same ehcache-instance? is there a chance that something gets mixed up?</p>\n\n<p><strong>21)</strong> when using 1st level cache and 2nd level cache, can they get mixed up? when querying the database, where does the result then come from, the 1st or 2nd level cache? does the 1st level cache work with the 2nd level cache?</p>\n\n<p><strong>22)</strong> anything else that can get mixed up by using the caches I mentioned? :-)</p>\n\n<p>Thanks for answering, not matter what question! :-)</p>\n    ","a":"\n<blockquote>\n  <p>Hibernate supports the following Caches: 1st Level Cache, 2nd Level Cache, Query Cache</p>\n</blockquote>\n\n<p>Yes.</p>\n\n<blockquote>\n  <p>Spring itself supports the following Caching possibilities: just Method Caching</p>\n</blockquote>\n\n<p>Spring 3.1 introduces the new caching abstraction based on annotations around methods, yes.</p>\n\n<blockquote>\n  <p>The 1st Level Cache is part of EVERY Hibernate application.</p>\n</blockquote>\n\n<p>Yes.</p>\n\n<blockquote>\n  <p>The 1st Level Cache is created for EVERY hibernate-session.</p>\n</blockquote>\n\n<p>Yes, although you can manually clear it at any given moment.</p>\n\n<blockquote>\n  <p>What is saved in the 1st Level Cache? Objects or just the values of their properties? queries and their results?</p>\n</blockquote>\n\n<p>It's a map of all objects fetched during the life of a session, if you load the same object by id for the second time, it will be loaded from L1.</p>\n\n<blockquote>\n  <p>I found out: the 2nd Level Cache is used ONCE per application. isn't that false? isn't it used ONCE per sessionfactory? and: multiple sessionfactorys = multiple 2nd level caches possible?</p>\n</blockquote>\n\n<p>You are right, typically there is just one session factory per application (database), hence the shortcut.</p>\n\n<blockquote>\n  <p>what is saved in the 2nd Level Cache: in my opinion just the values belonging to one record, not the objects itself.</p>\n</blockquote>\n\n<p>The same things as in L1, but they live longer. L2 is typically backed by some industrial-strength cache, while L1 is just a map (it doesn't even have to be thread-safe). It stores full entities, including lazily loaded relationships.</p>\n\n<blockquote>\n  <p>when storing values from one record in 2nd Level Cache, its possible to store related values (from objects connected over a foreign key) with it too?</p>\n</blockquote>\n\n<p>You do not manage L2 manually, it happens automatically.</p>\n\n<blockquote>\n  <p>when updating the values of one object in the 2nd level cache, its possible to update the values of objects connected with it in the cache too?</p>\n</blockquote>\n\n<p>See above.</p>\n\n<blockquote>\n  <p>when values of an object are changing, how can I update the 2nd level cache? flush? can I just update a part of the cache or must the whole cache be updated?</p>\n</blockquote>\n\n<p>See above - Hibernate will figure this out for you. You never interact with L2 directly.</p>\n\n<blockquote>\n  <p>where does the 2nd level cache make sense and where doesnt it?</p>\n</blockquote>\n\n<p>Measure. In application that read a lot of data by primary key and read-to-write factor is very high, L2 has a significant impact on your performance.</p>\n\n<blockquote>\n  <p>the Cache Mode: does each cache mode provide a different strategy of caching? for example with cache mode \"read only\" no synchronization of database and cache is ever necessary? do other cache modes provide synchronization? I thought synchronization must be done by the developer himself?</p>\n</blockquote>\n\n<p>Cache mode helps Hibernate to choose best strategy for caching and invalidating. For instance if cache is read only, Hibernate won't bother invalidating it (or it won't do this that often). But read only cache (read only entity) will of course forbid any updates.</p>\n\n<blockquote>\n  <p>what is the difference between the Query Cache and the 2nd Level Cache? in my opinion: in the Query Cache result sets are saved, but not with their values, just with their ids. when the query is used again and the result set is still \"correct\", the values belonging to the ids are queried from the 2nd Level Cache.</p>\n</blockquote>\n\n<p>Exactly, but this is a very broad topic. Especially the <em>result set is still \"correct\"</em> part.</p>\n\n<blockquote>\n  <p>For the Query Cache a 2nd Level Cache MUST be used?</p>\n</blockquote>\n\n<p>Yes, without L2 query cache has no sense and will slow down the application dramatically.</p>\n\n<blockquote>\n  <p>where does the Query Cache make sense and where doesnt it?</p>\n</blockquote>\n\n<p>Hard question, typically when you are executing the same query a lot of times and the universe of query parameters is low (for each set of query parameters new query cache is created with all ids of records being the results).</p>\n\n<blockquote>\n  <p>Does Spring provide more Caching possibilities than method caching?</p>\n</blockquote>\n\n<p>No, Spring is more-or-less just a glue for your own code.</p>\n\n<blockquote>\n  <p>method caching is not linked to hibernate caching.</p>\n</blockquote>\n\n<p>Spring is not linked to Hibernate, so...</p>\n\n<blockquote>\n  <p>but: for method caching a 2nd level is necessary, like ehcache (which can be used by hibernate too)</p>\n</blockquote>\n\n<p>L2 is Hibernate concept. If you want to cache methods, you need <em>some</em> underlying cache. Let it be EhCache, never mind. of course it must be thread-safe. </p>\n\n<blockquote>\n  <p>can method caching be used without database queries?</p>\n</blockquote>\n\n<p>Spring has nothing to do with Hibernate. You may cache computations that have nothing to do with database.</p>\n\n<blockquote>\n  <p>if using ehcache for hibernate as 2nd level cache and ehcache for spring for method caching, can I use the same ehcache-instance? is there a chance that something gets mixed up?</p>\n</blockquote>\n\n<p>You may use the same <code>CacheManager</code> and cache configuration as Hibernate to ease deployment. As long as cache names do not overlap, they are completely independent, even thought working within the same manager.</p>\n\n<blockquote>\n  <p>when using 1st level cache and 2nd level cache, can they get mixed up? when querying the database, where does the result then come from, the 1st or 2nd level cache? does the 1st level cache work with the 2nd level cache?</p>\n</blockquote>\n\n<p>They just work, as long as some abstraction does not leak :-). When you query by primary key, first L1 is examined (it is faster), then L2.</p>\n\n<blockquote>\n  <p>anything else that can get mixed up by using the caches I mentioned? :-)</p>\n</blockquote>\n\n<p>See above, abstractions tend to leak. But the worst problems come when you change the database and Hibernate does not no about it. Also clustering without proper replication will cause you a headache. And the biggest problem - very often incorrect caching actually slows down the application (query cache is the most dangerous here).</p>\n    "},{"t":"POST request via RestTemplate in JSON","l":"http://stackoverflow.com/questions/4075991/post-request-via-resttemplate-in-json","q":"\n\n<p>I didn't find any example how to solve my problem, so I want to ask you for help. I can't simply send POST request using RestTemplate object in JSON</p>\n\n<p>Every time I get <strong>org.springframework.web.client.HttpClientErrorException: 415 Unsupported Media Type</strong></p>\n\n<p>I use RestTemplate in this way:</p>\n\n<pre><code>...\nrestTemplate = new RestTemplate();\nList&lt;HttpMessageConverter&lt;?&gt;&gt; list = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;();\nlist.add(new MappingJacksonHttpMessageConverter());\nrestTemplate.setMessageConverters(list);\n...\nPayment payment= new Payment(\"Aa4bhs\");\nPayment res = restTemplate.postForObject(\"http://localhost:8080/aurest/rest/payment\", payment, Payment.class);\n</code></pre>\n\n<p><strong>What is my fault?</strong></p>\n    ","a":"\n<pre><code>    This code is working for me \n    RestTemplate restTemplate = new RestTemplate();\n    Payment payment= new Payment(\"Aa4bhs\");\n    MultiValueMap&lt;String, Object&gt; map = new LinkedMultiValueMap&lt;String, Object&gt;();\n    map.add(\"payment\",payment);\n    HttpEntity&lt;MultiValueMap&lt;String,Object&gt;&gt; httpEntity= new HttpEntity&lt;MultiValueMap&lt;String,Object&gt;&gt;(map,headerObject);\n\n Payment res=restTemplate.postForObject(url,httpEntity,Payment.class);\n</code></pre>\n    "},{"t":"How to import spring-config.xml of one project into spring-config.xml of another project?","l":"http://stackoverflow.com/questions/5113579/how-to-import-spring-config-xml-of-one-project-into-spring-config-xml-of-another","q":"\n\n<p>I have two projects with the name <code>simple-core-impl</code> and <code>simple-core-web</code>.</p>\n\n<p>Both projects are <code>spring based</code> and both have a parent project name <code>simple-core</code>. </p>\n\n<p>I have <code>simple-impl-config.xml</code> in <code>simple-core-impl</code> project and <code>simple-web-config.xml</code> in <code>simple-impl-config.xml</code>. </p>\n\n<p>I have a bean which has class: <code>simple service</code> which have one method which returns me a message \"hello World\".  </p>\n\n<p>I want to import the <code>simple-impl-config.xml</code> in the <code>simple-web-config.xml</code> so the bean is available into my controller which is in <code>simple-core-web</code> project. </p>\n\n<p><code>simple-core-web</code> project has a jar of <code>simple-core-impl</code> project. </p>\n\n<p>So please tell me how I can I import <code>spring-config.xml</code> of one project into <code>spring-config.xml</code> of another project so all the beans of first is available into other project by just importing?</p>\n\n<p>I do not want to rewrite all the beans.</p>\n    ","a":"\n<pre><code>&lt;import resource=\"classpath:spring-config.xml\" /&gt;\n</code></pre>\n\n<p><strong>Reference:</strong></p>\n\n<ul>\n<li><a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-xml-import\">Composing XML-based configuration\nmetadata</a></li>\n<li><a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/resources.html\">Resources</a> (here the <code>classpath:</code>\npart is explained)</li>\n</ul>\n    "},{"t":"setMaxResults for Spring-Data-JPA annotation?","l":"http://stackoverflow.com/questions/9314078/setmaxresults-for-spring-data-jpa-annotation","q":"\n\n<p>I am trying to incorporate Spring-Data-JPA to my project.\nOne thing confuses me is how to achieve setMaxResults(n) by annotation ?</p>\n\n<p>for example , my code: </p>\n\n<pre><code>public interface UserRepository extends CrudRepository&lt;User , Long&gt;\n{\n  @Query(value=\"From User u where u.otherObj = ?1 \")\n  public User findByOhterObj(OtherObj otherObj);\n}\n</code></pre>\n\n<p>I only need to return <code>one (and only one)</code> User from otherObj , but I cannot find a way to annotate the maxResults ... Can somebody give me a hint ?</p>\n\n<p>(mysql complains :</p>\n\n<pre><code>com.mysql.jdbc.JDBC4PreparedStatement@5add5415: select user0_.id as id100_, user0_.created as created100_ from User user0_ where user0_.id=2 limit ** NOT SPECIFIED **\nWARN  util.JDBCExceptionReporter - SQL Error: 0, SQLState: 07001\nERROR util.JDBCExceptionReporter - No value specified for parameter 2\n</code></pre>\n\n<p>)</p>\n\n<p>I found a link : <a href=\"https://jira.springsource.org/browse/DATAJPA-147\">https://jira.springsource.org/browse/DATAJPA-147</a> ,\nI tried but failed. It seems not possible now ? \nWhy such a important feature not built in Spring-Data ?</p>\n\n<p>If I implement this feature manually :</p>\n\n<pre><code>public class UserRepositoryImpl implements UserRepository\n</code></pre>\n\n<p>I have to implement tons of predefined methods in <code>CrudRepository</code> , this will be terrible.</p>\n\n<p>environments : spring-3.1 , spring-data-jpa-1.0.3.RELEASE.jar , spring-data-commons-core-1.1.0.RELEASE.jar</p>\n    ","a":"\n<p>If you are using Java 8 and Spring Data 1.7.0, you can use default methods if you want to combine a <code>@Query</code> annotation with setting maximum results:</p>\n\n<pre><code>public interface UserRepository extends PagingAndSortingRepository&lt;User,Long&gt; {\n  @Query(\"from User u where ...\")\n  List&lt;User&gt; findAllUsersWhereFoo(@Param(\"foo\") Foo foo, Pageable pageable);\n\n  default List&lt;User&gt; findTop10UsersWhereFoo(Foo foo) {\n    return findAllUsersWhereFoo(foo, new PageRequest(0,10));\n  }\n\n}\n</code></pre>\n    "},{"t":"How to unit test a Spring MVC controller using @PathVariable?","l":"http://stackoverflow.com/questions/1401128/how-to-unit-test-a-spring-mvc-controller-using-pathvariable","q":"\n\n<p>I have a simple annotated controller similar to this one:</p>\n\n<pre><code>@Controller\npublic class MyController {\n  @RequestMapping(\"/{id}.html\")\n  public String doSomething(@PathVariable String id, Model model) {\n    // do something\n    return \"view\";\n  }\n}\n</code></pre>\n\n<p>and I want to test it with an unit test like this:</p>\n\n<pre><code>public class MyControllerTest {\n  @Test\n  public void test() {\n    MockHttpServletRequest request = new MockHttpServletRequest();\n    request.setRequestURI(\"/test.html\");\n    new AnnotationMethodHandlerAdapter()\n      .handle(request, new MockHttpServletResponse(), new MyController());\n    // assert something\n  }\n}\n</code></pre>\n\n<p>The problem is that AnnotationMethodHandlerAdapter.handler() method throws an exception:</p>\n\n<pre><code>java.lang.IllegalStateException: Could not find @PathVariable [id] in @RequestMapping\nat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:642)\nat org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolvePathVariable(HandlerMethodInvoker.java:514)\nat org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:262)\nat org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:146)\n</code></pre>\n    ","a":"\n<p>As of Spring 3.2, there is a proper way to test this, in an elegant and easy way. You will be able to do things like this:</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration(\"servlet-context.xml\")\npublic class SampleTests {\n\n  @Autowired\n  private WebApplicationContext wac;\n\n  private MockMvc mockMvc;\n\n  @Before\n  public void setup() {\n    this.mockMvc = webAppContextSetup(this.wac).build();\n  }\n\n  @Test\n  public void getFoo() throws Exception {\n    this.mockMvc.perform(get(\"/foo\").accept(\"application/json\"))\n        .andExpect(status().isOk())\n        .andExpect(content().mimeType(\"application/json\"))\n        .andExpect(jsonPath(\"$.name\").value(\"Lee\"));\n  }\n}\n</code></pre>\n\n<p>For further information, take a look at <a href=\"http://blog.springsource.org/2012/11/12/spring-framework-3-2-rc1-spring-mvc-test-framework/\">http://blog.springsource.org/2012/11/12/spring-framework-3-2-rc1-spring-mvc-test-framework/</a></p>\n    "},{"t":"Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/security]","l":"http://stackoverflow.com/questions/7188719/unable-to-locate-spring-namespacehandler-for-xml-schema-namespace-http-www-sp","q":"\n\n<p>I am developing my first application in spring security. My applicationContext-security.xml file looks like this:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;!--\n  -  Namespace-based OpenID configuration\n  --&gt;\n\n&lt;b:beans xmlns=\"http://www.springframework.org/schema/security\"\n    xmlns:b=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd\"&gt;\n\n    &lt;http&gt;\n        &lt;intercept-url pattern=\"/**\" access=\"ROLE_USER\"/&gt;\n        &lt;intercept-url pattern=\"/index.xhtml*\" filters=\"none\"/&gt;\n        &lt;logout/&gt;\n        &lt;openid-login login-page=\"/index.xhtml\" authentication-failure-url=\"/index.xhtml?login_error=true\"&gt;\n            &lt;attribute-exchange&gt;\n                &lt;openid-attribute name=\"email\" type=\"http://schema.openid.net/contact/email\" required=\"true\" count=\"2\"/&gt;\n                &lt;openid-attribute name=\"name\" type=\"http://schema.openid.net/namePerson/friendly\" /&gt;\n            &lt;/attribute-exchange&gt;\n        &lt;/openid-login&gt;\n        &lt;remember-me token-repository-ref=\"tokenRepo\"/&gt;\n    &lt;/http&gt;\n\n    &lt;b:bean id=\"tokenRepo\"\n            class=\"org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl\" /&gt;\n\n    &lt;authentication-manager alias=\"authenticationManager\"/&gt;\n\n    &lt;user-service id=\"userService\"&gt;\n        &lt;user name=\"http://user.myopenid.com/\" authorities=\"ROLE_SUPERVISOR,ROLE_USER\" /&gt;\n    &lt;/user-service&gt;\n\n&lt;/b:beans&gt;\n</code></pre>\n\n<p>and Web.xml file is:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\" version=\"2.4\"&gt;\n\n    &lt;display-name&gt;Spring Security OpenID Demo Application&lt;/display-name&gt;\n\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            /WEB-INF/applicationContext-security.xml\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/classes/log4j.properties&lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;context-param&gt;\n        &lt;param-name&gt;webAppRootKey&lt;/param-name&gt;\n        &lt;param-value&gt;openid.root&lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;filter&gt;\n        &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n    &lt;/filter&gt;\n\n    &lt;filter-mapping&gt;\n      &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/filter-mapping&gt;\n\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n     &lt;welcome-file-list&gt;\n        &lt;welcome-file&gt;faces/index.xhtml&lt;/welcome-file&gt;\n    &lt;/welcome-file-list&gt;\n&lt;/web-app&gt;\n</code></pre>\n\n<p>Clean and Build of the application is successful, but when I try to deploy the application jetty 7 gives me following error:</p>\n\n<blockquote>\n  <p>SEVERE: Context initialization failed<br>\n  org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [<a href=\"http://www.springframework.org/schema/security]\">http://www.springframework.org/schema/security]</a><br>\n  Offending resource: ServletContext resource [/WEB-INF/applicationContext-security.xml]<br>\n  at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)<br>\n  at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)<br>\n  at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80)  </p>\n</blockquote>\n\n<p>Tried everything but can't solve this error. Any help would be appreciated.</p>\n\n<p><strong>EDIT</strong>\nI tried added 3.0.2 version of the Spring-Security and got this:</p>\n\n<blockquote>\n  <p>Context initialization failed<br>\n  org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 13 in XML document from ServletContext resource [/WEB-INF/applicationContext-security.xml] is invalid;<br>\n  nested exception is org.xml.sax.SAXParseException; lineNumber: 13; columnNumber: 11; cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'http'.\n      at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)<br>\n      at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334</p>\n</blockquote>\n    ","a":"\n<p>You need a <code>spring-security-config.jar</code> on your classpath.</p>\n\n<p>The exception means that the <code>security:</code> xml namescape cannot be handled by spring \"parsers\". They are implementations of the <code>NamespaceHandler</code> interface, so you need a handler that knows how to process <code>&lt;security:</code> tags. That's the <code>SecurityNamespaceHandler</code> located in <code>spring-security-config</code></p>\n    "},{"t":"Spring 3.2 @value annotation with pure java configuration does not work, but Environment.getProperty works","l":"http://stackoverflow.com/questions/17097521/spring-3-2-value-annotation-with-pure-java-configuration-does-not-work-but-env","q":"\n\n<p>I've been breaking my head on this one. Not sure what I am missing. I am unable to get the <code>@Value</code> annotations to work in a pure java configured spring app(non web)</p>\n\n<pre><code>@Configuration\n@PropertySource(\"classpath:app.properties\")\npublic class Config {\n    @Value(\"${my.prop}\") \n    String name;\n\n    @Autowired\n    Environment env;\n\n    @Bean(name = \"myBean\", initMethod = \"print\")\n    public MyBean getMyBean(){\n         MyBean myBean = new MyBean();\n         myBean.setName(name);\n         System.out.println(env.getProperty(\"my.prop\"));\n         return myBean;\n    }\n}\n</code></pre>\n\n<p>The property file just contains <code>my.prop=avalue</code> The bean is as follows:</p>\n\n<pre><code>public class MyBean {\n    String name;\n    public void print() {\n        System.out.println(\"Name: \" + name);\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n</code></pre>\n\n<p>The environment variable prints the value properly, the <code>@Value</code> does not.<br>\n<code>avalue</code><br>\n<code>Name: ${my.prop}</code>   </p>\n\n<p>The main class just initializes the context.</p>\n\n<pre><code>AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Config.class);\n</code></pre>\n\n<p>However if I use </p>\n\n<pre><code>@ImportResource(\"classpath:property-config.xml\")\n</code></pre>\n\n<p>with this snippet </p>\n\n<pre><code>&lt;context:property-placeholder location=\"app.properties\" /&gt;\n</code></pre>\n\n<p>then it works fine. Of course now the enviroment returns <code>null</code>.</p>\n    ","a":"\n<p>Add the following bean declaration in your <code>Config</code> class</p>\n\n<pre><code>@Bean\npublic static PropertySourcesPlaceholderConfigurer propertyPlaceholderConfigurer() {\n    return new PropertySourcesPlaceholderConfigurer();\n}\n</code></pre>\n\n<p>In order for <code>@Value</code> annotations to work <code>PropertySourcesPlaceholderConfigurer</code> should be registered. It is done automatically when using <code>&lt;context:property-placeholder&gt;</code> in XML, but should be registered as a <code>static @Bean</code> when using <code>@Configuration</code>.</p>\n\n<p>See <a href=\"http://static.springsource.org/spring-framework/docs/3.2.0.M2/api/org/springframework/context/annotation/PropertySource.html\">@PropertySource</a> documentation and this Spring Framework <a href=\"https://jira.springsource.org/browse/SPR-8539\">Jira issue</a>.</p>\n    "},{"t":"Where should I put @Transactional annotation: at an interface definition or at an implementing class?","l":"http://stackoverflow.com/questions/3120143/where-should-i-put-transactional-annotation-at-an-interface-definition-or-at-a","q":"\n\n<p>The question from the title in code:</p>\n\n<pre><code>@Transactional (readonly = true)\npublic interface FooService {\n   void doSmth ();\n}\n\n\npublic class FooServiceImpl implements FooService {\n   ...\n}\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>public interface FooService {\n   void doSmth ();\n}\n\n@Transactional (readonly = true)\npublic class FooServiceImpl implements FooService {\n   ...\n}\n</code></pre>\n    ","a":"\n<p>From <a href=\"http://static.springsource.org/spring/docs/2.0.x/reference/transaction.html\" rel=\"nofollow noreferrer\">http://static.springsource.org/spring/docs/2.0.x/reference/transaction.html</a></p>\n\n<blockquote>\n  <p><strong>The Spring team's recommendation is that you only annotate concrete classes with the <code>@Transactional</code> annotation, as opposed to annotating interfaces.</strong> You certainly can place the <code>@Transactional</code> annotation on an interface (or an interface method), but this will only work as you would expect it to if you are using interface-based proxies. The fact that annotations are <em>not inherited</em> means that if you are using class-based proxies then the transaction settings will not be recognised by the class-based proxying infrastructure and the object will not be wrapped in a transactional proxy (which would be decidedly <em>bad</em>). So please do take the Spring team's advice and only annotate concrete classes (and the methods of concrete classes) with the <code>@Transactional</code> annotation.</p>\n  \n  <p><em>Note: Since this mechanism is based on proxies, only 'external' method calls coming in through the proxy will be intercepted.</em> This means that 'self-invocation', i.e. a method within the target object calling some other method of the target object, won't lead to an actual transaction at runtime even if the invoked method is marked with <code>@Transactional</code>!</p>\n</blockquote>\n\n<p>(Emphasis added to the first sentence, other emphasis from the original.)</p>\n    "},{"t":"Anyway to @Autowire a bean that requires constructor arguments?","l":"http://stackoverflow.com/questions/6739566/anyway-to-autowire-a-bean-that-requires-constructor-arguments","q":"\n\n<p>I'm using Spring 3.0.5 and am using @Autowire annotation for my class members as much as possible.  One of the beans that I need to autowire requires arguments to its constructor.  I've looked through the Spring docs, but cannot seem to find any reference to how to annotate constructor arguments.</p>\n\n<p>In XML, I can use  as part of the bean definition.  Is there a similar mechanism for @Autowire annotation?</p>\n\n<p>Ex:</p>\n\n<pre><code>@Component\npublic class MyConstructorClass{\n\n  String var;\n  public MyConstructorClass( String constrArg ){\n    this.var = var;\n  }\n...\n}\n\n\n@Service\npublic class MyBeanService{\n  @Autowired\n  MyConstructorClass myConstructorClass;\n\n  ....\n}\n</code></pre>\n\n<p>In this example, how do I specify the value of \"constrArg\" in MyBeanService with the @Autowire annotation?  Is there any way to do this?</p>\n\n<p>Thanks,</p>\n\n<p>Eric</p>\n    ","a":"\n<p>You need the <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/index.html?org/springframework/beans/factory/annotation/Value.html\"><code>@Value</code></a> annotation.</p>\n\n<blockquote>\n  <p>A common use case is to assign default field values using\n  <code>\"#{systemProperties.myProp}\"</code> style expressions.</p>\n</blockquote>\n\n<pre><code>public class SimpleMovieLister {\n\n  private MovieFinder movieFinder;\n  private String defaultLocale;\n\n  @Autowired\n  public void configure(MovieFinder movieFinder, \n                        @Value(\"#{ systemProperties['user.region'] }\"} String defaultLocale) {\n      this.movieFinder = movieFinder;\n      this.defaultLocale = defaultLocale;\n  }\n\n  // ...\n}\n</code></pre>\n\n<p><strong>See:</strong> <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/expressions.html#expressions-beandef-annotation-based\">Expression Language &gt; Annotation Configuration</a></p>\n\n<hr>\n\n<p>To be more clear: in your scenario, you'd wire two classes, <code>MybeanService</code> and <code>MyConstructorClass</code>, something like this:</p>\n\n<pre><code>@Component\npublic class MyBeanService implements BeanService{\n    @Autowired\n    public MybeanService(MyConstructorClass foo){\n        // do something with foo\n    }\n}\n\n@Component\npublic class MyConstructorClass{\n    public MyConstructorClass(@Value(\"#{some expression here}\") String value){\n         // do something with value\n    }\n}\n</code></pre>\n\n<p>Update: if you need several different instances of <code>MyConstructorClass</code> with different values, you should <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers\">use Qualifier annotations</a></p>\n    "},{"t":"Mockito, JUnit and Spring","l":"http://stackoverflow.com/questions/10906945/mockito-junit-and-spring","q":"\n\n<p>I started to learn about Mockito only today. I wrote some simple test (with JUnit, see below), but I can't figure out how can I use mock object inside Spring's manages beans. What is <em>best practise</em> for working with Spring. How should I inject mocked dependency to my bean?</p>\n\n<p>You can skip this till <strong>back to my question</strong>.</p>\n\n<p>First of all, what I've learned.\nThis is very good article <a href=\"http://martinfowler.com/articles/mocksArentStubs.html\">Mocks Aren't Stubs</a> that explains the basics (Mock's checks <strong>behavior verification</strong> not <em>state verification</em>). Then there is good example here <a href=\"http://en.wikipedia.org/wiki/Mockito\">Mockito</a>\nHere <a href=\"http://blog.trifork.com/2009/08/13/easier-mocking-with-mockito/\">Easier mocking with mockito</a> we have explanation that Mockito's mock objects are both <em>mock</em> and <em>stubs</em>. </p>\n\n<p>Here <a href=\"http://mockito.googlecode.com/svn/branches/1.8.0/javadoc/org/mockito/Mockito.html\">Mockito</a> and here <a href=\"http://mockito.googlecode.com/svn/branches/1.8.0/javadoc/org/mockito/Matchers.html\">Matchers</a> you can find more examples. </p>\n\n<p>This test</p>\n\n<pre><code>@Test\npublic void testReal(){\n    List&lt;String&gt; mockedList = mock(List.class);\n     //stubbing\n     //when(mockedList.get(0)).thenReturn(\"first\");\n\n    mockedList.get(anyInt());\n    OngoingStubbing&lt;String&gt; stub= when(null);\n    stub.thenReturn(\"first\");\n\n    //String res = mockedList.get(0);\n                //System.out.println(res);\n\n     //you can also verify using argument matcher\n     //verify(mockedList).get(anyInt());\n\n    verify(mockedList);\n    mockedList.get(anyInt());\n}\n</code></pre>\n\n<p>works just fine.</p>\n\n<p><strong>Back to my question.</strong> Here <a href=\"http://stackoverflow.com/questions/2457239/injecting-mockito-mocks-into-a-spring-bean\">Injecting Mockito mocks into a Spring bean</a> somebody tries to use Springs <code>ReflectionTestUtils.setField()</code>, but than here <a href=\"http://www.jayway.com/2011/11/30/spring-integration-tests-part-i-creating-mock-objects/\">Spring Integration Tests, Creating Mock Objects</a> we have recommendation to <em>change</em> Spring's context.</p>\n\n<p>I didn't really understand last two links... Can somebody explain me what problem does Spring have with Mockito? What's wrong with this solution?</p>\n\n<pre><code>@InjectMocks\nprivate MyTestObject testObject\n\n@Mock\nprivate MyDependentObject mockedObject\n\n@Before\npublic void setup() {\n        MockitoAnnotations.initMocks(this);\n}\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/a/8742745/1137529\">http://stackoverflow.com/a/8742745/1137529</a></p>\n\n<p><strong>EDIT</strong>: I wasn't really clear. I will provide 3 examples of code to clarify my self:\nSuppose, we have bean HelloWorld with method <code>printHello()</code> and bean HelloFacade with method <code>sayHello</code> that forward calls to HelloWorld's method <code>printHello()</code>.</p>\n\n<p>First example is using Spring's context and without custom runner, using ReflectionTestUtils for dependency injection (DI):</p>\n\n<pre><code>public class Hello1Test  {\nprivate ApplicationContext ctx;\n\n@Before\npublic void setUp() {\n    MockitoAnnotations.initMocks(this);\n    this.ctx = new ClassPathXmlApplicationContext(\"META-INF/spring/ServicesImplContext.xml\");\n}\n\n\n\n@Test\npublic void testHelloFacade() {\n    HelloFacade obj = (HelloFacade) ctx.getBean(HelloFacadeImpl.class);\n    HelloWorld mock = mock(HelloWorld.class);\n    doNothing().when(mock).printHello();\n\n    ReflectionTestUtils.setField(obj, \"hello\", mock);\n    obj.sayHello();\n\n    verify(mock, times(1)).printHello();\n}\n\n}\n</code></pre>\n\n<p>As @Noam pointed out thereis way to run it wihtout explicit call to <code>MockitoAnnotations.initMocks(this);</code>. I will also drop using of the Spring's context on this example.</p>\n\n<pre><code>@RunWith(MockitoJUnitRunner.class)\npublic class Hello1aTest {\n\n\n@InjectMocks\nprivate HelloFacade obj =  new HelloFacadeImpl();\n\n@Mock\nprivate HelloWorld mock;\n\n\n@Test\npublic void testHelloFacade() {\n    doNothing().when(mock).printHello();\n    obj.sayHello();\n}\n\n}\n</code></pre>\n\n<p>Another way to do this</p>\n\n<pre><code>public class Hello1aTest {\n\n@Before\npublic void setUp() {\n    MockitoAnnotations.initMocks(this);\n}\n\n\n@InjectMocks\nprivate HelloFacadeImpl obj;\n\n@Mock\nprivate HelloWorld mock;\n\n\n@Test\npublic void testHelloFacade() {\n    doNothing().when(mock).printHello();\n    obj.sayHello();\n}\n\n}\n</code></pre>\n\n<p>Noth, that in preivious example we have to manually instaniate HelloFacadeImpl and assign it to HelloFacade,  beacuse HelloFacade is interface. In the last example, we can just declare HelloFacadeImpl and Mokito will instantiate it for us. The drawback of this approach that now, unit-under-test is impl-class and not interface.</p>\n    ","a":"\n<p>Honestly I am not sure if I really understand your question  :P  I will try to clarify as much as I can, from what I get from your original question:</p>\n\n<p>First, in most case, you should NOT have any concern on Spring.  You rarely need to have spring involved in writing your unit test.  In normal case, you only need to instantiate the system under test (SUT, the target to be tested) in your unit test, and inject dependencies of SUT in the test too.  The dependencies are usually a mock/stub.</p>\n\n<p>Your original suggested way, and example 2, 3 is precisely doing what I am describing above.</p>\n\n<p>In some rare case (like, integration tests, or some special unit tests), you need to create a Spring app context, and get your SUT from the app context.  In such case, I believe you can:</p>\n\n<p>1) Create your SUT in spring app ctx, get reference to it, and inject mocks to it</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"test-app-ctx.xml\")\npublic class FooTest {\n\n    @Autowired\n    @InjectMocks\n    TestTarget sut;\n\n    @Mock\n    Foo mockFoo;\n\n    @Before\n    /* Initialized mocks */\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void someTest() {\n         // ....\n    }\n}\n</code></pre>\n\n<p>or </p>\n\n<p>2) follow the way described in your link <a href=\"http://www.jayway.com/2011/11/30/spring-integration-tests-part-i-creating-mock-objects/\">Spring Integration Tests, Creating Mock Objects</a>.  This approach is to create mocks in Spring's app context, and you can get the mock object from the app ctx to do your stubbing/verification:</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"test-app-ctx.xml\")\npublic class FooTest {\n\n    @Autowired\n    TestTarget sut;\n\n    @Autowired\n    Foo mockFoo;\n\n    @Test\n    public void someTest() {\n         // ....\n    }\n}\n</code></pre>\n\n<p>Both ways should work.  The main difference is the former case will have the dependencies injected after going through spring's lifecycle etc.  (e.g. bean initialization), while the latter case is injected beforehands.  For example, if your SUT implements spring's InitializingBean, and the initialization routine involves the dependencies, you will see the difference between these two approach.  I believe there is no right or wrong for these 2 approaches, as long as you know what you are doing.</p>\n\n<p>Just a supplement, @Mock, @Inject, MocktoJunitRunner etc are all unnecessary in using Mockito.  They are just utilities to save you typing the Mockito.mock(Foo.class) and bunch of setter invocations.</p>\n    "},{"t":"Is Spring Boot meant to replace Spring Roo? [closed]","l":"http://stackoverflow.com/questions/20576843/is-spring-boot-meant-to-replace-spring-roo","q":"\n\n<p>I have recently been spending some time looking over projects contained in the Spring 4.0 ecosystem and have recently come across the documentation for Spring Boot. It appears that Boot has a bunch of nice features for getting a Spring application up and running quickly, including the ability to auto configure and run embedded application servers in a simple .jar file. I realize that Roo is meant to be more of a CLI tool for quickly prototyping a Spring application and does not take as much of an 'opinionated' approach as Boot. Despite these differences, both tools have the end goal of making it easier to stand up a Spring application from scratch, so my question is the following: Is Spring Boot meant to replace Spring Roo in the Spring ecosystem, or will they both continue to co-exist with the same level of support?</p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"Spring MVC How take the parameter value of a GET HTTP Request in my controller method?","l":"http://stackoverflow.com/questions/13442678/spring-mvc-how-take-the-parameter-value-of-a-get-http-request-in-my-controller-m","q":"\n\n<p>In this period I am studing the Spring MVC showcase example (downloadable from STS dasboard) and I have some simple question about the <code>Request Mapping</code> examples:</p>\n\n<p>1) In my <code>home.jsp</code> page I have this link:</p>\n\n<pre><code>        &lt;li&gt;\n            &lt;a id=\"byParameter\" class=\"textLink\" href=\"&lt;c:url value=\"/mapping/parameter?foo=bar\" /&gt;\"&gt;By path, method, and presence of parameter&lt;/a&gt;\n        &lt;/li&gt;\n</code></pre>\n\n<p>As you can see by this link I am doing an HTTP GET Request having a \"foo\" parameter containing the value: \"bar\".</p>\n\n<p>This HTTP Request is handled by the following method of the controller class MappingController:</p>\n\n<pre><code>@RequestMapping(value=\"/mapping/parameter\", method=RequestMethod.GET, params=\"foo\")\npublic @ResponseBody String byParameter() {\n    return \"Mapped by path + method + presence of query parameter! (MappingController)\";\n}\n</code></pre>\n\n<p>This method manage HTTP Request (only <code>GET</code> type) that have a parameter named \"foo\"</p>\n\n<p>How can I take the value (\"bar\") of this parameter and put it in a variable inside the code of my by Parameter method?</p>\n\n<p>Thank you very much</p>\n\n<p>Andrea </p>\n    ","a":"\n<p>As explained in <a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#mvc-ann-requestparam\">the documentation</a>, by using an <code>@RequestParam</code> annotation:</p>\n\n<pre><code>public @ResponseBody String byParameter(@RequestParam(\"foo\") String foo) {\n    return \"Mapped by path + method + presence of query parameter! (MappingController) - foo = \"\n           + foo;\n}\n</code></pre>\n    "},{"t":"Another unnamed CacheManager already exists in the same VM (ehCache 2.5)","l":"http://stackoverflow.com/questions/10013288/another-unnamed-cachemanager-already-exists-in-the-same-vm-ehcache-2-5","q":"\n\n<p>This is what happens when I run my junit tests...</p>\n\n<pre><code>Another CacheManager with same name 'cacheManager' already exists in the same VM. Please \nprovide unique names for each CacheManager in the config or do one of following:\n1. Use one of the CacheManager.create() static factory methods to reuse same\n   CacheManager with same name or create one if necessary\n2. Shutdown the earlier cacheManager before creating new one with same name.\n\nThe source of the existing CacheManager is: \n DefaultConfigurationSource [ ehcache.xml or ehcache-failsafe.xml ]\n</code></pre>\n\n<p>What's the reason behind the exception. Could there be more than 1 cacheManager running simultaneously?</p>\n\n<p>This is how I configured the cachManager using Sping 3.1.1. It sets explicitly the scope of the cacheManager to \"singleton\"</p>\n\n<pre><code>&lt;ehcache:annotation-driven /&gt;\n\n&lt;bean\n    id=\"cacheManager\"\n    class=\"org.springframework.cache.ehcache.EhCacheManagerFactoryBean\"\n    scope=\"singleton\"\n    /&gt;\n</code></pre>\n\n<p>The ehcache.xml looks like</p>\n\n<pre><code>&lt;ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\"\n     updateCheck=\"false\"\n     maxBytesLocalHeap=\"100M\" \n     name=\"cacheManager\"\n     &gt;\n ....\n &lt;/ehcache&gt;\n</code></pre>\n\n<p>Finally my class </p>\n\n<pre><code>@Component\npublic class BookingCache implements CacheWrapper&lt;String, BookingUIBean&gt; {\n\n     @Autowired\n     private CacheManager ehCacheManager;\n      ....\n}\n</code></pre>\n\n<p>I'm very sure that I'm dealing with only one cacheManager in my code base. Something else is probably running the n-th instance.</p>\n    ","a":"\n<p>This error also happens with wrong mapping files. The message is horrible, doesn't say the cause.</p>\n    "},{"t":"Showing a Spring transaction in log","l":"http://stackoverflow.com/questions/1965454/showing-a-spring-transaction-in-log","q":"\n\n<p>I configured spring with transactional support. Is there any way to log transactions just to ensure I set up everything correctly? Showing in the log is a good way to see what is happening.</p>\n    ","a":"\n<p>in your <code>log4j.properties</code> (for alternative loggers, or log4j's xml format, check the docs)</p>\n\n<p>Depending on your transaction manager, you can set the logging level of the spring framework so that it gives you more info about transactions. For example, in case of using <code>JpaTransactionManager</code>, you set</p>\n\n<pre><code>log4j.logger.org.springframework.orm.jpa=INFO\n</code></pre>\n\n<p>(this is the package of the your transaction manager), and also</p>\n\n<pre><code>log4j.logger.org.springframework.transaction=INFO\n</code></pre>\n\n<p>If <code>INFO</code> isn't enough, use <code>DEBUG</code></p>\n    "},{"t":"Persistence unit as RESOURCE_LOCAL or JTA?","l":"http://stackoverflow.com/questions/1962525/persistence-unit-as-resource-local-or-jta","q":"\n\n<p>I have queries as below:</p>\n\n<ol>\n<li>What is the difference of these two?   </li>\n<li>Are both of these supported by all databases?</li>\n<li>Are JPA TransactionManager and JTA TransactionManager different?</li>\n</ol>\n    ","a":"\n<p>JPA implementations have the choice of managing transactions themselves (<code>RESOURCE_LOCAL</code>), or having them managed by the application server's JTA implementation.</p>\n\n<p>In most cases, RESOURCE_LOCAL is fine. This would use basic JDBC-level transactions. The downside is that the transaction is local to the JPA persistence unit, so if you want a transaction that spans multiple persistence units (or other databases), then RESOURCE_LOCAL may not be good enough.</p>\n\n<p>JTA is also used for managing transactions across systems like JMS and JCA, but that's fairly exotic usage for most of us.</p>\n\n<p>To use JTA, you need support for it in your application server, and also support from the JDBC driver.</p>\n    "},{"t":"JUnit tests pass in Eclipse but fail in Maven Surefire","l":"http://stackoverflow.com/questions/3365628/junit-tests-pass-in-eclipse-but-fail-in-maven-surefire","q":"\n\n<p>I have written some JUnit tests using JUnit 4 and spring-test libraries. When I run the tests inside Eclipse then run fine and pass. But when I run them using Maven (during the build process), they fail giving a spring related error. I am not sure what is causing the problem, JUnit, Surefire or Spring. Here is my test code, spring configuration and the exception that I get from Maven:</p>\n\n<p><em>PersonServiceTest.java</em></p>\n\n<pre><code>package com.xyz.person.test;\n\nimport static com.xyz.person.util.FjUtil.toFjList;\nimport static junit.framework.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.transaction.TransactionConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.xyz.person.bo.Person;\nimport com.xyz.person.bs.PersonService;\n\nimport fj.Effect;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = { \"classpath*:personservice-test.xml\" })\n@TransactionConfiguration(transactionManager = \"transactionManager\", defaultRollback = false)\npublic class PersonServiceTest {\n\n    @Autowired\n    private PersonService service;\n\n    @Test\n    @Transactional\n    public void testCreatePerson() {\n        Person person = new Person();\n        person.setName(\"abhinav\");\n        service.createPerson(person);\n\n        assertNotNull(person.getId());\n    }\n\n    @Test\n    @Transactional\n    public void testFindPersons() {\n        Person person = new Person();\n        person.setName(\"abhinav\");\n        service.createPerson(person);\n\n        List&lt;Person&gt; persons = service.findPersons(\"abhinav\");\n        toFjList(persons).foreach(new Effect&lt;Person&gt;() {\n            public void e(final Person p) {\n                assertEquals(\"abhinav\", p.getName());\n            }});\n    }\n\n}\n</code></pre>\n\n<p><em>personservice-test.xml</em></p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd\n      http://www.springframework.org/schema/tx\n      http://www.springframework.org/schema/tx/spring-tx.xsd\n      http://www.springframework.org/schema/aop\n      http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n      http://www.springframework.org/schema/context\n      http://www.springframework.org/schema/context/spring-context-2.5.xsd\"&gt;\n\n    &lt;import resource=\"classpath:/personservice.xml\" /&gt;\n\n    &lt;bean id=\"datasource\"\n        class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"\n        lazy-init=\"true\"&gt;\n        &lt;property name=\"driverClassName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" /&gt;\n        &lt;property name=\"url\" value=\"jdbc:derby:InMemoryDatabase;create=true\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"entityManagerFactory\"\n        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"&gt;\n        &lt;property name=\"dataSource\" ref=\"datasource\" /&gt;\n        &lt;property name=\"persistenceUnitName\" value=\"PersonService\" /&gt;\n        &lt;property name=\"jpaVendorAdapter\"&gt;\n            &lt;bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"&gt;\n                &lt;property name=\"databasePlatform\" value=\"org.hibernate.dialect.DerbyDialect\" /&gt;\n                &lt;property name=\"showSql\" value=\"true\" /&gt;\n                &lt;property name=\"generateDdl\" value=\"true\" /&gt;\n            &lt;/bean&gt;\n        &lt;/property&gt;\n        &lt;property name=\"jpaPropertyMap\"&gt;\n            &lt;map&gt;\n                &lt;entry key=\"hibernate.validator.autoregister_listeners\" value=\"false\" /&gt;\n                &lt;entry key=\"javax.persistence.transactionType\" value=\"RESOURCE_LOCAL\" /&gt;\n            &lt;/map&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"&gt;\n        &lt;property name=\"entityManagerFactory\" ref=\"entityManagerFactory\" /&gt;\n        &lt;property name=\"dataSource\" ref=\"datasource\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;tx:annotation-driven transaction-manager=\"transactionManager\"\n        proxy-target-class=\"false\" /&gt;\n\n    &lt;bean id=\"beanMapper\" class=\"org.dozer.DozerBeanMapper\"&gt;\n        &lt;property name=\"mappingFiles\"&gt;\n            &lt;list&gt;\n                &lt;value&gt;personservice-mappings.xml&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p><em>Exception in Maven</em></p>\n\n<pre><code>-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning com.xyz.person.test.PersonServiceTest\n23:18:51,250  WARN JDBCExceptionReporter:77 - SQL Warning: 10000, SQLState: 01J01\n23:18:51,281  WARN JDBCExceptionReporter:78 - Database 'InMemoryDatabase' not created, connection made to existing database instead.\n23:18:52,937  WARN JDBCExceptionReporter:77 - SQL Warning: 10000, SQLState: 01J01\n23:18:52,937  WARN JDBCExceptionReporter:78 - Database 'InMemoryDatabase' not created, connection made to existing database instead.\n23:18:52,953  WARN TestContextManager:429 - Caught exception while allowing TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener@359a359a] to process 'after' execution for test: method [public void com.xyz.person.test.PersonServiceTest.testCreatePerson()], instance [com.xyz.person.test.PersonServiceTest@1bc81bc8], exception [org.springframework.transaction.IllegalTransactionStateException: Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.]\njava.lang.IllegalStateException: No value for key [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean@3f563f56] bound to thread [main]\n        at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:199)\n        at org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:489)\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1011)\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)\n        at org.springframework.test.context.transaction.TransactionalTestExecutionListener$TransactionContext.endTransaction(TransactionalTestExecutionListener.java:515)\n        at org.springframework.test.context.transaction.TransactionalTestExecutionListener.endTransaction(TransactionalTestExecutionListener.java:290)\n        at org.springframework.test.context.transaction.TransactionalTestExecutionListener.afterTestMethod(TransactionalTestExecutionListener.java:183)\n        at org.springframework.test.context.TestContextManager.afterTestMethod(TestContextManager.java:426)\n        at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:90)\n        at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)\n        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n        at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n        at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)\n        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)\n        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)\n        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)\n        at org.apache.maven.surefire.Surefire.run(Surefire.java:180)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\n        at java.lang.reflect.Method.invoke(Method.java:599)\n        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)\n        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)\n23:18:53,078  WARN TestContextManager:377 - Caught exception while allowing TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener@359a359a] to process 'before' execution of test method [public void com.xyz.person.test.PersonServiceTest.testFindPersons()] for test instance [com.xyz.person.test.PersonServiceTest@79f279f2]\norg.springframework.transaction.IllegalTransactionStateException: Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.\n        at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:304)\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:371)\n        at org.springframework.test.context.transaction.TransactionalTestExecutionListener$TransactionContext.startTransaction(TransactionalTestExecutionListener.java:507)\n        at org.springframework.test.context.transaction.TransactionalTestExecutionListener.startNewTransaction(TransactionalTestExecutionListener.java:269)\n        at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:162)\n        at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:374)\n        at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)\n        at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)\n        at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)\n        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n        at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n        at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)\n        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)\n        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)\n        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)\n        at org.apache.maven.surefire.Surefire.run(Surefire.java:180)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\n        at java.lang.reflect.Method.invoke(Method.java:599)\n        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)\n        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)\nTests run: 3, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 15.625 sec &lt;&lt;&lt; FAILURE!\n\nResults :\n\nTests in error:\n  testCreatePerson(com.xyz.person.test.PersonServiceTest)\n  testCreatePerson(com.xyz.person.test.PersonServiceTest)\n  testFindPersons(com.xyz.person.test.PersonServiceTest)\n\nTests run: 3, Failures: 0, Errors: 3, Skipped: 0\n</code></pre>\n    ","a":"\n<p>I had the same problem, and the solution for me was to allow Maven to handle all dependencies, including to local jars. I used Maven for online dependencies, and configured build path manually for local dependencies.\nThus, Maven was not aware of the dependencies I configured manually.</p>\n\n<p>I used this solution to install the local jar dependencies into Maven:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/4955635/how-to-add-local-jar-files-in-maven-project\">How to add local jar files in maven project?</a></p>\n    "},{"t":"Annotation Configuration Replacement for mvc:resources - Spring","l":"http://stackoverflow.com/questions/14861720/annotation-configuration-replacement-for-mvcresources-spring","q":"\n\n<p>I'm trying to upgrade my spring mvc project to utilize the new annotations and get rid of my xml. Previously I was loading my static resources in my <code>web.xml</code> with the line:</p>\n\n<pre><code>&lt;mvc:resources mapping=\"/resources/**\" location=\"/resources/\" /&gt; \n</code></pre>\n\n<p>Now, I'm utilizing the <code>WebApplicationInitializer</code> class and <code>@EnableWebMvc</code> annotation to startup my service without any xml files, but can't seem to figure out how to load my resources. </p>\n\n<p>Is there an annotation or new configuration to pull these resources back in without having to use xml?</p>\n    ","a":"\n<p>One way to do this is to have your configuration class extend <code>WebMvcConfigurerAdapter</code>, then override the following method as such:</p>\n\n<pre><code>@Override\npublic void addResourceHandlers(final ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(\"/resources/**\").addResourceLocations(\"/resources/\");\n}\n</code></pre>\n    "},{"t":"Difference between save and saveAndFlush in Spring data jpa","l":"http://stackoverflow.com/questions/21203875/difference-between-save-and-saveandflush-in-spring-data-jpa","q":"\n\n<p>I am trying to learn spring data JPA by testing some CRUD operation via <code>JpaRepository</code>.</p>\n\n<p>I came across two methods <code>save</code> and <code>saveAndFlush</code>.\nI don't get the difference between these two. On calling <code>save</code> also my changes are getting saved into database so what is the use of <code>saveAndFlush</code>.</p>\n    ","a":"\n<p>On <code>saveAndFlush</code>, changes will be flushed to DB immediately in this command. With <code>save</code>, this is not necessarily true, and might stay just in memory, until <code>flush</code> or <code>commit</code> commands are issued. </p>\n\n<p>But be aware, that even if you flush the changes in transaction and do not commit them, the changes still won't be visible to the outside transactions until the commit in this transaction.</p>\n\n<p>In your case, you probably use some sort of transactions mechanism, which issues <code>commit</code> command for you if everything works out fine.</p>\n    "},{"t":"Spring Java Config: how do you create a prototype-scoped @Bean with runtime arguments?","l":"http://stackoverflow.com/questions/22155832/spring-java-config-how-do-you-create-a-prototype-scoped-bean-with-runtime-argu","q":"\n\n<p>Using Spring's Java Config, I need to acquire/instantiate a prototype-scoped bean with constructor arguments that are only obtainable at runtime.  Consider the following code example (simplified for brevity):</p>\n\n<pre><code>@Autowired\nprivate ApplicationContext appCtx;\n\npublic void onRequest(Request request) {\n    //request is already validated\n    String name = request.getParameter(\"name\");\n    Thing thing = appCtx.getBean(Thing.class, name);\n\n    //System.out.println(thing.getName()); //prints name\n}\n</code></pre>\n\n<p>where the Thing class is defined as follows:</p>\n\n<pre><code>public class Thing {\n\n    private final String name;\n\n    @Autowired\n    private SomeComponent someComponent;\n\n    @Autowired\n    private AnotherComponent anotherComponent;\n\n    public Thing(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n</code></pre>\n\n<p>Notice <code>name</code> is <code>final</code>: it can only be supplied via a constructor, and guarantees immutability.  The other dependencies are implementation-specific dependencies of the <code>Thing</code> class, and shouldn't be known to (tightly coupled to) the request handler implementation.</p>\n\n<p>This code works perfectly well with Spring XML config, for example:</p>\n\n<pre><code>&lt;bean id=\"thing\", class=\"com.whatever.Thing\" scope=\"prototype\"&gt;\n    &lt;!-- other post-instantiation properties omitted --&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>How do I achieve the same thing with Java config?  The following does not work:</p>\n\n<pre><code>@Bean\n@Scope(\"prototype\")\npublic Thing thing(String name) {\n    return new Thing(name);\n}\n</code></pre>\n\n<p>Now, I <em>could</em> create a Factory, e.g.:</p>\n\n<pre><code>public interface ThingFactory {\n    public Thing createThing(String name);\n}\n</code></pre>\n\n<p>But that <em>defeats the entire point of using Spring to replace the ServiceLocator and Factory design pattern</em>, which would be ideal for this use case.</p>\n\n<p>If Spring Java Config could do this, I would be able to avoid:</p>\n\n<ul>\n<li>defining a Factory interface</li>\n<li>defining a Factory implementation</li>\n<li>writing tests for the Factory implementation</li>\n</ul>\n\n<p>That's a ton of work (relatively speaking) for something so trivial that Spring already supports via XML config.</p>\n    ","a":"\n<p>In a <code>@Configuration</code> class, a <code>@Bean</code> method like so</p>\n\n<pre><code>@Bean\n@Scope(\"prototype\")\npublic Thing thing(String name) {\n    return new Thing(name);\n}\n</code></pre>\n\n<p>is used to register a <strong>bean definition and provide the factory for creating the bean</strong>. The bean that it defines is only instantiated upon request using arguments that are determined either directly or through scanning that <code>ApplicationContext</code>. </p>\n\n<p>In the case of a <code>prototype</code> bean, a new object is created every time and therefore the  corresponding <code>@Bean</code> method is also executed. </p>\n\n<p>You can retrieve a bean from the <code>ApplicationContext</code> through its <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-java.lang.Object...-\"><code>BeanFactory#getBean(String name, Object... args)</code></a> method which states</p>\n\n<blockquote>\n  <p>Allows for specifying explicit constructor arguments / factory method\n  arguments, overriding the specified default arguments (if any) in the\n  bean definition.</p>\n  \n  <p>Parameters:</p>\n  \n  <p><strong>args</strong> arguments to use if creating a prototype using explicit arguments\n  to a static factory method. It is invalid to use a non-null args value\n  in any other case.</p>\n</blockquote>\n\n<p>In other words, for this <code>prototype</code> scoped bean, you are providing the arguments that will be used, not in the constructor of the bean class, but in the <code>@Bean</code> method invocation.</p>\n\n<p>This is at least true for Spring versions 4+.</p>\n    "},{"t":"No matching bean of type … found for dependency","l":"http://stackoverflow.com/questions/8961275/no-matching-bean-of-type-found-for-dependency","q":"\n\n<p>after some days of trying and waitin' for answers on the springsource forums I'll try it here.\nRunning my application results in these exception:</p>\n\n<pre><code>org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [com.example.my.services.user.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:924)\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:793)\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707)\n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478)\n    org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)\n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284)\n    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106)\n    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n    org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n    org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)\n    org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n    org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585)\n    org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913)\n    org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)\n    org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)\n    org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)\n    org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)\n    org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)\n    org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)\n    org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)\n    javax.servlet.GenericServlet.init(GenericServlet.java:212)\n    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n    org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n    org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n    org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n    java.lang.Thread.run(Thread.java:662)\n</code></pre>\n\n<p>Here's the relevant code</p>\n\n<p>application context:</p>\n\n<pre><code>&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\"&gt;\n  &lt;property name=\"driverClassName\" value=\"org.postgresql.Driver\" /&gt;\n  &lt;property name=\"url\" value=\"jdbc:postgresql://localhost:5432/test\" /&gt;\n  &lt;property name=\"username\" value=\"test\" /&gt;\n  &lt;property name=\"password\" value=\"test\" /&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate3.LocalSessionFactoryBean\"&gt;\n  &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n  &lt;property name=\"packagesToScan\" value=\"com.example.my.entities.*\" /&gt;\n  &lt;property name=\"configurationClass\" value=\"org.hibernate.cfg.AnnotationConfiguration\" /&gt;\n  &lt;property name=\"hibernateProperties\"&gt;\n    &lt;props&gt;\n      &lt;prop key=\"hibernate.dialect\"&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/prop&gt;\n      &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n    &lt;/props&gt;\n  &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;tx:annotation-driven /&gt;\n&lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n  &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>com.example.my.entities.user:</p>\n\n<pre><code>@Entity\n@Table( name = \"tbl_users\" )\npublic class User\n{\n  @Id\n  @Column( name = \"id\" )\n  @GeneratedValue\n  private int id;\n\n  @Column( name = \"username\" )\n  private String username;\n\n  @Column( name = \"password\" )\n  private String password;\n\n  public void setId( int id )\n  {\n    this.id = id;\n  }\n\n  public int getId()\n  {\n    return id;\n  }\n\n  public void setUsername( String username )\n  {\n    this.username = username;\n  }\n\n  public String getUsername()\n  {\n    return username;\n  }\n\n  public void setPassword( String password )\n  {\n    this.password = password;\n  }\n\n  public String getPassword()\n  {\n    return password;\n  }\n}\n</code></pre>\n\n<p>service:</p>\n\n<pre><code>@Service\npublic class UserServiceImpl implements UserService\n{\n  @Autowired\n  private UserDAO userDAO;\n\n  @Override\n  @Transactional\n  public void addUser( User user )\n  {\n    userDAO.addUser( user );\n  }\n\n  @Override\n  @Transactional\n  public List&lt;User&gt; listUsers()\n  {\n    return userDAO.listUsers();\n  }\n\n  @Override\n  @Transactional\n  public void removeUser( int id )\n  {\n    userDAO.removeUser( id );\n  }\n}\n</code></pre>\n    ","a":"\n<p>Multiple things can cause this, I didn't bother to check your entire repository, so I'm going out on a limb here.</p>\n\n<p>First off, you could be missing an annotation (@Service or @Component) from the implementation of <code>com.example.my.services.user.UserService</code>, if you're using annotations for configuration. If you're using (only) xml, you're probably missing the <code>&lt;bean&gt;</code> -definition for the UserService-implementation.</p>\n\n<p>If you're using annotations and the implementation is annotated correctly, check that the package where the implementation is located in is scanned (check your <code>&lt;context:component-scan base-package=</code> -value).</p>\n    "},{"t":"com.sun.jdi.InvocationException occurred invoking method","l":"http://stackoverflow.com/questions/4123628/com-sun-jdi-invocationexception-occurred-invoking-method","q":"\n\n<p>I just want to create an object of class,but got this error when debugging,can anybody tell me  what's the problem is? the location of this code is in some Spring(2.5) Service class. </p>\n\n<p>there is an similar problem:<a href=\"http://stackoverflow.com/questions/2702707/ojb-reference-descriptor-10-relationship-should-i-set-auto-retrieve-to-false/4123482#4123482\">OJB Reference Descriptor 1:0 relationship? Should I set auto-retrieve to false?</a></p>\n\n<p>thanks a lot~ </p>\n    ","a":"\n<p>This was my case</p>\n\n<p>I had a <strong>BO</strong> class of <strong>Student</strong> which was class which was having <strong>one-to-many</strong> mapping to another <strong>BO</strong> class <strong>Classes</strong> (the classes which he studied).</p>\n\n<p>I wanted save data into another table, which was having <strong>foreign keys</strong> of both <strong>Student</strong> and <strong>Classes</strong>. At some instance of execution, I was bringing a <strong>List</strong> of <strong>Students</strong> under some conditions, and each <strong>Student</strong> will have a reference of <strong>Classes</strong> class. </p>\n\n<p>Sample code :-</p>\n\n<pre><code>Iterator&lt;Student&gt; itr = studentId.iterator();\nwhile (itr.hasNext()) \n{\n    Student student = (Student) itr.next();\n    MarksCardSiNoGen bo = new MarksCardSiNoGen();\n\n    bo.setStudentId(student);\n\n    Classes classBo = student.getClasses();\n\n    bo.setClassId(classBo);\n}\n</code></pre>\n\n<p>Here you can see that, I'm setting both <strong>Student</strong> and <strong>Classes</strong> reference to the <strong>BO</strong> I want to save. But while debugging when I inspected <code>student.getClasses()</code> it was showing this exception(<code>com.sun.jdi.InvocationException</code>).</p>\n\n<p>The problem I found was that, after fetching the <strong>Student</strong> list using <strong>HQL</strong> query, I was <strong>flushing</strong> and <strong>closing</strong> the <strong>session</strong>. When I removed that <code>session.close();</code> statement the problem was solved.</p>\n\n<p>The session was closed when I finally saved all the data into table(<strong>MarksCardSiNoGen</strong>).</p>\n\n<p>Hope this helps.</p>\n    "},{"t":"Spring MVC: how to create a default controller for index page?","l":"http://stackoverflow.com/questions/5252065/spring-mvc-how-to-create-a-default-controller-for-index-page","q":"\n\n<p>I'm trying to do one of those standard spring mvc hello world applications but with the twist that I'd like to map the controller to the root. (for example: <a href=\"http://numberformat.wordpress.com/2009/09/02/hello-world-spring-mvc-with-annotations/\">http://numberformat.wordpress.com/2009/09/02/hello-world-spring-mvc-with-annotations/</a> )\nSo the only real difference is that they map it to host\\appname\\something and I'd like to map it to host\\appname.</p>\n\n<p>I placed my index.jsp in src\\main\\webapp\\jsp and mapped it in the web.xml as the welcome file.\nI tried:</p>\n\n<pre><code>@Controller(\"loginController\")\npublic class LoginController{\n\n  @RequestMapping(\"/\")\n  public String homepage2(ModelMap model, HttpServletRequest request, HttpServletResponse response){\n    System.out.println(\"blablabla2\");\n    model.addAttribute(\"sigh\", \"lesigh\");\n    return \"index\";\n  }\n</code></pre>\n\n<p>As my controller but I see nothing appear in the console of my tomcat.\nDoes anyone know where I'm messing up?</p>\n\n<p>My web.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n    version=\"2.5\"&gt;\n\n    &lt;!-- Index --&gt;\n    &lt;welcome-file-list&gt;\n        &lt;welcome-file&gt;/jsp/index.jsp&lt;/welcome-file&gt;\n    &lt;/welcome-file-list&gt;\n\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/mvc-dispatcher-servlet.xml&lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springweb&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springweb&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n\n<p>The mvc-dispatcher-servlet.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;\n\n    &lt;context:annotation-config /&gt;\n    &lt;context:component-scan base-package=\"de.claude.test.*\" /&gt;\n\n    &lt;bean id=\"viewResolver\"\n        class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"&gt;\n        &lt;property name=\"viewClass\"\n            value=\"org.springframework.web.servlet.view.JstlView\" /&gt;\n        &lt;property name=\"prefix\" value=\"/jsp/\" /&gt;\n        &lt;property name=\"suffix\" value=\".jsp\" /&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>I'm using Spring 3.0.5.release</p>\n\n<p>Or is this not possible and do I need to put my index.jsp back in the root of the web-inf and put a redirect to somewhere inside my jsp so the controller picks it up?</p>\n    ","a":"\n<p>The solution I use in my SpringMVC webapps is to create a simple <code>DefaultController</code> class like the following: -</p>\n\n<pre><code>@Controller\npublic class DefaultController {\n\n    private final String redirect;\n\n    public DefaultController(String redirect) {\n        this.redirect = redirect;\n    }\n\n    @RequestMapping(value = \"/\")\n    public ModelAndView redirectToMainPage() {\n        return new ModelAndView(\"redirect:/\" + redirect);\n    }\n\n}\n</code></pre>\n\n<p>The redirect can be injected in using the following spring configuration: -</p>\n\n<pre><code>&lt;bean class=\"com.adoreboard.farfisa.controller.DefaultController\"&gt;\n    &lt;constructor-arg name=\"redirect\" value=\"${default.redirect:loginController}\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>The <code>${default.redirect:loginController}</code> will default to <code>loginController</code> but can be changed by inserting <code>default.redirect=something_else</code> into a spring properties file / setting an environment variable etc.</p>\n\n<p>As @Mike has mentioned above I have also: -</p>\n\n<ul>\n<li>Got rid of <code>&lt;welcome-file-list&gt; ... &lt;/welcome-file-list&gt;</code> section in the <code>web.xml</code> file.</li>\n<li>Don't have any files sitting in WebContent that would be considered default pages (<code>index.html</code>, <code>index.jsp</code>, <code>default.html</code>, etc)</li>\n</ul>\n\n<p>This solution lets Spring worry more about redirects which may or may not be what you like.</p>\n    "},{"t":"Spring @Transaction method call by the method within the same class, does not work?","l":"http://stackoverflow.com/questions/3423972/spring-transaction-method-call-by-the-method-within-the-same-class-does-not-wo","q":"\n\n<p>I am new to Spring Transaction. Some thing that I found really odd, probably I did understand this properly. I wanted to have a transactional around method level and I have a caller method within the same class and it seems like it does not like that, it has to be called from the separate class. I don't understand how is that possible. If anyone has an idea how to resolve this issue, I would greatly appreciate. I would like to use the same class to call the annotated transactional method.</p>\n\n<p>Here is the code: </p>\n\n<pre><code>public class UserService {\n\n    @Transactional\n    public boolean addUser(String userName, String password) {\n        try {\n            // call DAO layer and adds to database.\n        } catch (Throwable e) {\n            TransactionAspectSupport.currentTransactionStatus()\n                    .setRollbackOnly();\n\n        }\n    }\n\n    public boolean addUsers(List&lt;User&gt; users) {\n        for (User user : users) {\n            addUser(user.getUserName, user.getPassword);\n        }\n    } \n}\n</code></pre>\n    ","a":"\n<p>This is my solution for self invocation.</p>\n\n<pre><code>private SBMWSBL self;\n@Autowired private ApplicationContext applicationContext;\n\n@PostConstruct\npublic  void postContruct(){\n    self =applicationContext.getBean(SBMWSBL.class);\n}\n</code></pre>\n    "},{"t":"A 'simple' way to implement Swagger in a Spring MVC application","l":"http://stackoverflow.com/questions/26720090/a-simple-way-to-implement-swagger-in-a-spring-mvc-application","q":"\n\n<p>I have honestly Google-searched this enough before putting this question here. I have a ReSTFul API written in simple Spring (no Spring Boot, no fancy stuff!). I need to implement Swagger into this. So far, EVERY page on the internet has only driven me crazy with confusing configurations and bloated code that I did not find portable at all.</p>\n\n<p>Does anyone have a sample project (or a set of detailed steps) that can help me accomplish this? In particular, I am looking for a good sample that uses swagger-springmvc. I know it has 'samples', but at best, the esoteric code is discouraging.</p>\n\n<p>Any help will be appreciated. I must clarify that I am not looking for \"why Swagger is simply the best\". I am not using (and for my current task will not use) Spring Boot or such.</p>\n\n<p>Thanks a lot in advance!</p>\n    ","a":"\n<h3>Springfox (Swagger spec 2.0, current)</h3>\n\n<p><a href=\"https://github.com/springfox/springfox\" rel=\"nofollow\">Springfox</a> has replaced Swagger-SpringMVC, and now supports both Swagger specs 1.2 and 2.0.  The implementation classes have changed, allowing for some deeper customization, but with some work.  The <a href=\"http://springfox.github.io/springfox/docs/current/\" rel=\"nofollow\">documentation</a> has improved, but still needs some details added for advanced configuration.  The old answer for the 1.2 implementation can still be found below. </p>\n\n<p><strong>Maven dependency</strong></p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;version&gt;2.5.0&lt;/version&gt;\n&lt;/dependency&gt; \n</code></pre>\n\n<p>The bare-minimum implementation looks more-or-less the same, but now uses the <code>Docket</code> class instead of the <code>SwaggerSpringMvcPlugin</code> class:</p>\n\n<pre><code>@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api(){\n        return new Docket(DocumentationType.SWAGGER_2)\n            .select()\n            .apis(RequestHandlerSelectors.any())\n            .paths(PathSelectors.regex(\"/api/.*\"))\n            .build()\n            .apiInfo(apiInfo());\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n            .title(\"TITLE\")\n            .description(\"DESCRIPTION\")\n            .version(\"VERSION\")\n            .termsOfServiceUrl(\"http://terms-of-services.url\")\n            .license(\"LICENSE\")\n            .licenseUrl(\"http://url-to-license.com\")\n            .build();\n    }\n\n}\n</code></pre>\n\n<p>Your Swagger 2.0 API documentation will now be available at <code>http://myapp/v2/api-docs</code>.  </p>\n\n<p>Adding Swagger UI support is even easier now.  If you are using Maven, add the following dependency for the Swagger UI webjar:</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n    &lt;version&gt;2.5.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>If you are using Spring Boot, then your web app should automatically pick up the necessary files and show the UI at <code>http://myapp/swagger-ui.html</code> (formerly: <code>http://myapp/springfox</code>).  If you are not using Spring Boot, then as yuriy-tumakha mentions in the answer below, you will need to register a resource handler for the files.  The Java configuration looks like this:</p>\n\n<pre><code>@Configuration\n@EnableWebMvc\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n    @Override \n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n\n}\n</code></pre>\n\n<p>The new <a href=\"http://springfox.github.io/springfox/docs/current/#configuring-springfox-staticdocs\" rel=\"nofollow\">static documentation generation</a> feature also looks quite nice, though I have not tried it out myself.</p>\n\n<h3>Swagger-SpringMVC (Swagger spec 1.2, older)</h3>\n\n<p>The documentation for <a href=\"https://github.com/dilipkrish/swagger-springmvc\" rel=\"nofollow\">Swagger-SpringMVC</a> can be a little bit confusing, but it is actually incredibly easy to set up.  The simplest configuration requires creating a <code>SpringSwaggerConfig</code> bean and enabling annotation-based configuration (which you probably already do in your Spring MVC project):</p>\n\n<pre><code>&lt;mvc:annotation-driven/&gt;\n&lt;bean class=\"com.mangofactory.swagger.configuration.SpringSwaggerConfig\" /&gt;\n</code></pre>\n\n<p>However, I think it is well worth it to take the extra step of defining a custom Swagger configuration using the <code>SwaggerSpringMvcPlugin</code>, instead of the previous XML-defined bean:</p>\n\n<pre><code>@Configuration\n@EnableSwagger\n@EnableWebMvc\npublic class SwaggerConfig {\n\n    private SpringSwaggerConfig springSwaggerConfig;\n\n    @SuppressWarnings(\"SpringJavaAutowiringInspection\")\n    @Autowired\n    public void setSpringSwaggerConfig(SpringSwaggerConfig springSwaggerConfig) {\n        this.springSwaggerConfig = springSwaggerConfig;\n    }\n\n    @Bean\n    public SwaggerSpringMvcPlugin customImplementation(){\n\n        return new SwaggerSpringMvcPlugin(this.springSwaggerConfig)\n                .apiInfo(apiInfo())\n                .includePatterns(\".*api.*\"); // assuming the API lives at something like http://myapp/api\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n            .title(\"TITLE\")\n            .description(\"DESCRIPTION\")\n            .version(\"VERSION\")\n            .termsOfServiceUrl(\"http://terms-of-services.url\")\n            .license(\"LICENSE\")\n            .licenseUrl(\"http://url-to-license.com\")\n            .build();\n    }\n\n}\n</code></pre>\n\n<p>When you run your application, you should now see your API spec created at <code>http://myapp/api-docs</code>.  To get the fancy Swagger UI set up, you need to clone the static files from the <a href=\"https://github.com/swagger-api/swagger-ui/tree/master/dist\" rel=\"nofollow\">GitHub project</a> and put them in your project.  Make sure your project is configured to serve the static HTML files:</p>\n\n<pre><code>&lt;mvc:resources mapping=\"*.html\" location=\"/\" /&gt;\n</code></pre>\n\n<p>Then edit the <code>index.html</code> file at the top level of the Swagger UI <code>dist</code> directory.  Towards the top of the file, you'll see some JavaScript that refers to the <code>api-docs</code> URL of another project.  Edit this to point to your project's Swagger documentation:</p>\n\n<pre><code>  if (url &amp;&amp; url.length &gt; 1) {\n    url = url[1];\n  } else {\n    url = \"http://myapp/api-docs\";\n  }\n</code></pre>\n\n<p>Now when you navigate to <code>http://myapp/path/to/swagger/index.html</code>, you should see the Swagger UI instance for your project.</p>\n    "},{"t":"Struts2 vs Spring 3 [closed]","l":"http://stackoverflow.com/questions/5123816/struts2-vs-spring-3","q":"\n\n<p>Does anyone know difference between Struts2 and Spring 3 MVC. I know the difference between Struts 1 and Spring 2.5, but what's the advantage Struts2 has over Spring 3 or otherwise.</p>\n\n<p>I tried looking all over web, but there is no comprehensive answer anywhere.</p>\n    ","a":"\n<p>Struts2 is really WebWork 2 renamed as Struts2.  Consider for a moment the fact that Struts essentially leveraged its own brand name to adopt WebWork as its new base, and that should suggest to you that there was at least some who felt it was very compelling -- one doesn't always throw out their own code base to start anew when they issue a sequel.  </p>\n\n<p>That said, I'm not going to tell you that Struts2 is better/worse than Spring 3 MVC.  Bottom line is that they are definitely comparable.  </p>\n\n<p>If you want more details on how they compare, I suggest you check out Matt Raible's presentations in years past on this topic:</p>\n\n<p><a href=\"http://raibledesigns.com/rd/entry/my_comparing_jvm_web_frameworks\">http://raibledesigns.com/rd/entry/my_comparing_jvm_web_frameworks</a></p>\n\n<p><a href=\"http://static.raibledesigns.com/repository/presentations/ComparingJavaWebFrameworks-ApacheConUS2007.pdf\">http://static.raibledesigns.com/repository/presentations/ComparingJavaWebFrameworks-ApacheConUS2007.pdf</a></p>\n\n<p>including a spreadsheet that compares several of them on various degrees:</p>\n\n<p><a href=\"http://spreadsheets.google.com/pub?key=0AtkkDCT2WDMXdC1HOEtnUHpCejJMbUhGeGJWUmh5dVE&amp;hl=en&amp;output=html\">http://spreadsheets.google.com/pub?key=0AtkkDCT2WDMXdC1HOEtnUHpCejJMbUhGeGJWUmh5dVE&amp;hl=en&amp;output=html</a> </p>\n    "},{"t":"Spring/Java error: namespace element 'annotation-config' … on JDK 1.5 and higher","l":"http://stackoverflow.com/questions/23813369/spring-java-error-namespace-element-annotation-config-on-jdk-1-5-and-high","q":"\n\n<p>I have Spring/Java App that is compiled with <strong>Compiler compliance level 1.5</strong>.</p>\n\n<p>I have a new Linux setup where I downloaded <strong>Apache Tomcat 8.0.8</strong>.</p>\n\n<p>I downloaded <strong>JDK 8u5</strong>.</p>\n\n<p>I set the path in bash as follows:</p>\n\n<pre><code>PATH=$PATH:$HOME/jdk1.8.0_05/bin\nexport PATH\n</code></pre>\n\n<p>Java -version reports:</p>\n\n<pre><code>java version \"1.8.0_05\"\nJava(TM) SE Runtime Environment (build 1.8.0_05-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 25.5-b02, mixed mode)\n</code></pre>\n\n<p>And set in setnenv.sh (for Tomcat):</p>\n\n<pre><code>JDK_HOME=/home/userid/jdk1.8.0_05\n</code></pre>\n\n<p>When I deploy my WAR file I get below error.\nI think Tomcat doesn't seem to use the Java I installed.\nI have followed the setup instructions.\nPS: I also tried JRE instead of JDK and same issue.</p>\n\n<p><strong>Thank you in advance,\nRobert</strong></p>\n\n<pre><code>22-May-2014 11:34:54.070 INFO [http-nio-8080-exec-4] org.apache.catalina.core.ApplicationContext.log Initializing Spring root WebApplicationContext\n22-May-2014 11:34:54.512 SEVERE [http-nio-8080-exec-4] org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener\n org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [/home/userid/apache-tomcat-8.0.8/webapps/myApplication-QA/WEB-INF/classes/config/spring/securityContext.xml]; nested exception is **java.lang.IllegalStateException: Context namespace element 'annotation-config' and its parser class [org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser] are only available on JDK 1.5 and higher**\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)\n    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)\n    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)\n    at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)\n    at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124)\n    at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:92)\n    at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)\n    at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353)\n    at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)\n    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)\n    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)\n    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4750)\n    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5170)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.manager.ManagerServlet.start(ManagerServlet.java:1270)\n    at org.apache.catalina.manager.HTMLManagerServlet.start(HTMLManagerServlet.java:673)\n    at org.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:221)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:644)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:301)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.catalina.filters.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:213)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:615)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:136)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:78)\n    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:526)\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1033)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:652)\n    at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.IllegalStateException: Context namespace element 'annotation-config' and its parser class [org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser] are only available on JDK 1.5 and higher\n    at org.springframework.context.config.ContextNamespaceHandler$1.parse(ContextNamespaceHandler.java:65)\n    at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)\n    at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1253)\n    at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1243)\n    at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)\n    at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)\n    ... 49 more\n\n22-May-2014 11:34:54.518 INFO [http-nio-8080-exec-4] org.apache.catalina.core.ApplicationContext.log Closing Spring root WebApplicationContext\n</code></pre>\n    ","a":"\n<p>The class that's throwing the exception is using this code to check for Java version:</p>\n\n<pre><code>static {\n        javaVersion = System.getProperty(\"java.version\");\n        // version String should look like \"1.4.2_10\"\n        if (javaVersion.indexOf(\"1.7.\") != -1) {\n            majorJavaVersion = JAVA_17;\n        }\n        else if (javaVersion.indexOf(\"1.6.\") != -1) {\n            majorJavaVersion = JAVA_16;\n        }\n        else if (javaVersion.indexOf(\"1.5.\") != -1) {\n            majorJavaVersion = JAVA_15;\n        }\n        else {\n            // else leave 1.4 as default (it's either 1.4 or unknown)\n            majorJavaVersion = JAVA_14;\n        }\n    }\n</code></pre>\n\n<p>So, when Spring 2.5 was first released, the code didn't assume it will be run in a Java version that's later than 1.7. For Java 8 and beyond, the code above will assume default 1.4 version. Because of this, the annotations part will complain.</p>\n\n<p>I think you either need to upgrade your Spring version or use Java 7. <a href=\"http://stackoverflow.com/questions/20882576/has-spring-framework-2-x-reached-eol\">Spring 2.5 has been EOLed</a> for quite some time now, anyway.</p>\n    "},{"t":"How to achieve conditional resource import in a Spring XML context?","l":"http://stackoverflow.com/questions/3035630/how-to-achieve-conditional-resource-import-in-a-spring-xml-context","q":"\n\n<p>What I would like to achieve is the ability to \"dynamically\" (i.e. based on a property defined in a configuration file) enable/disable the importing of a child Spring XML context.</p>\n\n<p>I imagine something like:</p>\n\n<pre><code>&lt;import condition=\"some.property.name\" resource=\"some-context.xml\"/&gt;\n</code></pre>\n\n<p>Where the property is resolved (to a boolean) and when true the context is imported, otherwise it isn't.</p>\n\n<p>Some of my research so far:</p>\n\n<ul>\n<li><p>Writing a custom NamespaceHandler (and related classes) so I can register my own custom element in my own namespace. For example: <code>&lt;myns:import condition=\"some.property.name\" resource=\"some-context.xml\"/&gt;</code></p>\n\n<p>The problem with this approach is that I do not want to replicate the entire resource importing logic from Spring and it isn't obvious to me what I need to delegate to to do this.</p></li>\n<li>Overriding <code>DefaultBeanDefinitionDocumentReader</code> to extend the behaviour of the \"import\" element parsing and interpretation (which happens there in the <code>importBeanDefinitionResource</code> method). However I'm not sure where I can register this extension.</li>\n</ul>\n    ","a":"\n<p>This is now completely possible, using Spring 4.</p>\n\n<p>In your main application content file</p>\n\n<pre><code>&lt;bean class=\"com.example.MyConditionalConfiguration\"/&gt;\n</code></pre>\n\n<p>And the MyConditionalConfiguration looks like</p>\n\n<pre><code>@Configuration\n@Conditional(MyConditionalConfiguration.Condition.class)\n@ImportResource(\"/com/example/context-fragment.xml\")\npublic class MyConditionalConfiguration {\n    static class Condition implements ConfigurationCondition {\n         @Override\n         public ConfigurationPhase getConfigurationPhase() {\n             return ConfigurationPhase.PARSE_CONFIGURATION;\n         }\n         @Override\n         public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n             // only load context-fragment.xml if the system property is defined\n             return System.getProperty(\"com.example.context-fragment\") != null;\n         }\n    }\n}\n</code></pre>\n\n<p>And then finally, you put the bean definitions you want included in the /com/example/context-fragment.xml</p>\n\n<p>See the <a href=\"http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html\">JavaDoc for @Conditional</a></p>\n    "},{"t":"Using Spring 3 autowire in a standalone Java application","l":"http://stackoverflow.com/questions/3659720/using-spring-3-autowire-in-a-standalone-java-application","q":"\n\n<p>Here is my code:</p>\n\n<pre><code>public class Main {\n\n    public static void main(String[] args) {\n        Main p = new Main();\n        p.start(args);\n    }\n\n    @Autowired\n    private MyBean myBean;\n    private void start(String[] args) {\n        ApplicationContext context = \n            new ClassPathXmlApplicationContext(\"META-INF/config.xml\");\n        System.out.println(\"my beans method: \" + myBean.getStr());\n    }\n}\n\n@Service \npublic class MyBean {\n    public String getStr() {\n        return \"string\";\n    }\n}\n</code></pre>\n\n<hr>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xmlns:context=\"http://www.springframework.org/schema/context\"\n xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n     http://www.springframework.org/schema/context\n     http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt; \n    &lt;context:annotation-config /&gt; \n    &lt;context:component-scan base-package=\"mypackage\"/&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>Why doesn't this work? I get <code>NullPointerException</code>. Is it possible to use autowiring in a standalone application?</p>\n    ","a":"\n<p>Spring works in standalone application. You are using the wrong way to create a spring bean. The correct way to do it like this:</p>\n\n<pre><code>@Component\npublic class Main {\n\n    public static void main(String[] args) {\n        ApplicationContext context = \n            new ClassPathXmlApplicationContext(\"META-INF/config.xml\");\n\n        Main p = context.getBean(Main.class);\n        p.start(args);\n    }\n\n    @Autowired\n    private MyBean myBean;\n    private void start(String[] args) {\n        System.out.println(\"my beans method: \" + myBean.getStr());\n    }\n}\n\n@Service \npublic class MyBean {\n    public String getStr() {\n        return \"string\";\n    }\n}\n</code></pre>\n\n<p>In the first case (the one in the question), you are creating the object by yourself, rather than getting it from the Spring context. So Spring does not get a chance to <code>Autowire</code> the dependencies (which causes the <code>NullPointerException</code>). </p>\n\n<p>In the second case (the one in this answer), you get the bean from the Spring context and hence it is Spring managed and Spring takes care of <code>autowiring</code>.</p>\n    "},{"t":"How to avoid the “Circular view path” exception with Spring MVC test","l":"http://stackoverflow.com/questions/18813615/how-to-avoid-the-circular-view-path-exception-with-spring-mvc-test","q":"\n\n<p>I have the following code in one of my controllers:</p>\n\n<pre><code>@Controller\n@RequestMapping(\"/preference\")\npublic class PreferenceController {\n\n\n    @RequestMapping(method = RequestMethod.GET, produces = \"text/html\")\n    public String preference() {\n        return \"preference\";\n    }\n</code></pre>\n\n<p>I am simply trying to test it using <strong>Spring MVC test</strong> as follows:</p>\n\n<pre><code>@ContextConfiguration\n@WebAppConfiguration\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class PreferenceControllerTest {\n\n    @Autowired\n    private WebApplicationContext ctx;\n\n    private MockMvc mockMvc;\n    @Before\n    public void setup() {\n        mockMvc = webAppContextSetup(ctx).build();\n        }\n\n    @Test\n    public void circularViewPathIssue() throws Exception {\n        mockMvc.perform(get(\"/preference\"))//\n                .andDo(print());\n    }\n</code></pre>\n\n<p>I am getting the following exception:</p>\n\n<blockquote>\n  <p>Circular view path [preference]: would dispatch back to the current\n  handler URL [/preference] again. Check your ViewResolver setup! (Hint:\n  This may be the result of an unspecified view, due to default view\n  name generation.)</p>\n</blockquote>\n\n<p>What I find strange is that <strong>it works fine when I load the \"full\" context configuration</strong> that includes the template and view resolvers as shown below:</p>\n\n<pre><code>&lt;bean class=\"org.thymeleaf.templateresolver.ServletContextTemplateResolver\" id=\"webTemplateResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"WEB-INF/web-templates/\" /&gt;\n        &lt;property name=\"suffix\" value=\".html\" /&gt;\n        &lt;property name=\"templateMode\" value=\"HTML5\" /&gt;\n        &lt;property name=\"characterEncoding\" value=\"UTF-8\" /&gt;\n        &lt;property name=\"order\" value=\"2\" /&gt;\n        &lt;property name=\"cacheable\" value=\"false\" /&gt;\n    &lt;/bean&gt;\n</code></pre>\n\n<p>I am well aware that the prefix added by the template resolver ensures that there are not \"circular view path\" when the app uses this template resolver. </p>\n\n<p>But then how I am supposed to test my app using Spring MVC test? Has anyone got any clue?</p>\n    ","a":"\n<p>This has nothing to do with Spring MVC testing.</p>\n\n<p>When you don't declare a <code>ViewResolver</code>, Spring registers a default <code>InternalResourceViewResolver</code> which creates instances of <code>JstlView</code> for rendering the <code>View</code>.</p>\n\n<p>The <code>JstlView</code> class extends <code>InternalResourceView</code> which is</p>\n\n<blockquote>\n  <p>Wrapper for a JSP or other resource within the same web application.\n  Exposes model objects as request attributes and forwards the request\n  to the specified resource URL using a javax.servlet.RequestDispatcher.</p>\n  \n  <p><strong>A URL for this view is supposed to specify a resource within the web\n  application, suitable for RequestDispatcher's forward or include\n  method.</strong></p>\n</blockquote>\n\n<p>Bold is mine. In otherwords, the view, before rendering, will try to get a <code>RequestDispatcher</code> to which to <code>forward()</code>. Before doing this it checks the following</p>\n\n<pre><code>if (path.startsWith(\"/\") ? uri.equals(path) : uri.equals(StringUtils.applyRelativePath(uri, path))) {\n    throw new ServletException(\"Circular view path [\" + path + \"]: would dispatch back \" +\n                        \"to the current handler URL [\" + uri + \"] again. Check your ViewResolver setup! \" +\n                        \"(Hint: This may be the result of an unspecified view, due to default view name generation.)\");\n}\n</code></pre>\n\n<p>where <code>path</code> is the view name, what you returned from the <code>@Controller</code>. In this example, that is <code>preference</code>. The variable <code>uri</code> holds the uri of the request being handled, which is <code>/context/preference</code>. </p>\n\n<p>The code above realizes that if you were to forward to <code>/context/preference</code>, the same servlet (since the same handled the previous) would handle the request and you would go into an endless loop.</p>\n\n<hr>\n\n<p>When you declare a <code>ThymeleafViewResolver</code> and a <code>ServletContextTemplateResolver</code> with a specific <code>prefix</code> and <code>suffix</code>, it builds the <code>View</code> differently, giving it a path like</p>\n\n<pre><code>WEB-INF/web-templates/preference.html\n</code></pre>\n\n<p><code>ThymeleafView</code> instances locate the file relative to the <code>ServletContext</code> path by using a\n<code>ServletContextResourceResolver</code></p>\n\n<pre><code>templateInputStream = resourceResolver.getResourceAsStream(templateProcessingParameters, resourceName);`\n</code></pre>\n\n<p>which eventually</p>\n\n<pre><code>return servletContext.getResourceAsStream(resourceName);\n</code></pre>\n\n<p>This gets a resource that is relative to the <code>ServletContext</code> path. It can then use the <code>TemplateEngine</code> to generate the HTML. There's no way an endless loop can happen here.</p>\n    "},{"t":"Spring - Is it possible to use multiple transaction managers in the same application?","l":"http://stackoverflow.com/questions/4423125/spring-is-it-possible-to-use-multiple-transaction-managers-in-the-same-applica","q":"\n\n<p>I'm new to Spring and I'm wondering if its possible to use numerous transaction managers in the same application?</p>\n\n<p>I have two data access layers - one for both of the databases. I'm wondering, how do you go about using one transaction managers for one layer and different transaction manager for the other layer. I don't need to perform transactions across both databases - yet. But I do need perform transactions on each database individually. I've created an image to help outline my problem:</p>\n\n<p><img src=\"https://i.stack.imgur.com/zt4PX.png\" alt=\"alt text\"></p>\n\n<p>Here is my application context configuration:</p>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-3.0.xsd\n        http://www.springframework.org/schema/tx\n        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\"&gt;\n\n    &lt;context:component-scan base-package=\"cheetah.repositories\" /&gt;\n    &lt;tx:annotation-driven /&gt;\n\n    &lt;bean id=\"entityManagerFactory\"\n        class=\"org.springframework.orm.jpa.LocalEntityManagerFactoryBean\"&gt;\n        &lt;property name=\"persistenceUnitName\" value=\"accounts\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean class=\"org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor\" /&gt;\n\n    &lt;bean id=\"transactionManager\"\n        class=\"org.springframework.orm.jpa.JpaTransactionManager\"&gt;\n        &lt;property name=\"entityManagerFactory\" ref=\"entityManagerFactory\" /&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>Here is an example that uses this configuration:</p>\n\n<pre><code>@Repository\npublic class JpaAccountRepository implements AccountRepository {\n\n    @PersistenceContext(unitName = \"cheetahAccounts\")\n    private EntityManager accountManager;\n\n    @Override\n    @Transactional\n    public Account findById(long id) {\n\n        Account account = accountManager.find(Account.class, id);\n        return account;\n    }\n}\n</code></pre>\n\n<p>So for the account repository, I want to use an entity manager factory with the persistence unit set to accounts. However, with my BusinessData Repository, I want to use an entity manager factory with a different persistence unit. Since I can only define one transaction manager bean, how can I go about using different transaction managers for the different repositories?</p>\n\n<p>Thanks for any help.</p>\n    ","a":"\n<p>Where you use a <code>@Transactional</code> annotation, you can <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#tx-multiple-tx-mgrs-with-attransactional\">specify the transaction manager to use</a> by adding an attribute set to a bean name or qualifier.  For example, if your application context defines multiple transaction managers with qualifiers:</p>\n\n<pre><code>&lt;bean id=\"transactionManager1\"\n    class=\"org.springframework.orm.jpa.JpaTransactionManager\"&gt;\n    &lt;property name=\"entityManagerFactory\" ref=\"entityManagerFactory1\" /&gt;\n    &lt;qualifier value=\"account\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"transactionManager2\"\n    class=\"org.springframework.orm.jpa.JpaTransactionManager\"&gt;\n    &lt;property name=\"entityManagerFactory\" ref=\"entityManagerFactory2\" /&gt;\n    &lt;qualifier value=\"businessData\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>You can use the qualifier to specify the transaction manager to use:</p>\n\n<pre><code>public class TransactionalService {\n\n    @Transactional(\"account\")\n    public void setSomethingInAccount() { ... }\n\n    @Transactional(\"businessData\")\n    public void doSomethingInBusinessData() { ... }\n}\n</code></pre>\n    "},{"t":"How do you create a Spring MVC project in Eclipse?","l":"http://stackoverflow.com/questions/2135289/how-do-you-create-a-spring-mvc-project-in-eclipse","q":"\n\n<p>I am trying to follow the basic tutorial for Spring MVC but got lost at creating a new project in Eclipse.<br>\nIt seems to me that most tutorials assume you know how to create a Spring Project in Eclipse.<br>\nAny advice on where to get started or tutorials which explain how to set up Eclipse would be appreciated.</p>\n    ","a":"\n<p>You want to create a \"Dynamic Web Project\".  Follow the steps here:  <a href=\"http://www.deepakgaikwad.net/index.php/2009/02/08/spring-mvc-tutorial-with-eclipse-and-tomcat.html\" rel=\"nofollow noreferrer\">Spring MVC Tutorial with Eclipse and Tomcat</a>.</p>\n\n<p>Also, here is the Eclipse documentation for Dynamic Web Projects:  <a href=\"http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.wst.webtools.doc.user/topics/ccwebprj.html\" rel=\"nofollow noreferrer\">http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.wst.webtools.doc.user/topics/ccwebprj.html</a></p>\n    "},{"t":"How does Spring 3 expression language interact with property placeholders?","l":"http://stackoverflow.com/questions/2041558/how-does-spring-3-expression-language-interact-with-property-placeholders","q":"\n\n<p>Spring 3 has introduced a new <a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/expressions.html\" rel=\"nofollow noreferrer\">expression language</a> (SpEL) which can be used in bean definitions. The syntax itself is fairly well specified.</p>\n\n<p>What isn't clear is how, if at all, SpEL interacts with the property placeholder syntax that was already present in prior versions. Does SpEL have support for property placeholders, or do I have to combine the syntax of both mechanisms and hope they combine?</p>\n\n<p>Let me give a concrete example. I want to use the property syntax <code>${x.y.z}</code>, but with the addition of \"default value\" syntax as provided by the <a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/expressions.html#d0e12053\" rel=\"nofollow noreferrer\">elvis operator</a> to handle cases where <code>${x.y.z}</code> is undefined.</p>\n\n<p>I've tried the following syntaxes without success:</p>\n\n<ul>\n<li><code>#{x.y.z?:'defaultValue'}</code></li>\n<li><code>#{${x.y.z}?:'defaultValue'}</code></li>\n</ul>\n\n<p>The first one gives me </p>\n\n<blockquote>\n  <p>Field or property 'x' cannot be found\n  on object of type\n  'org.springframework.beans.factory.config.BeanExpressionContext'</p>\n</blockquote>\n\n<p>which suggests that SpEL doesn't recognise this as a property placeholder.</p>\n\n<p>The second syntax throws an exception saying that the placeholder is not recognised, so the placeholder resolver <em>is</em> being invoked, but is failing as expected, since the property is not defined.</p>\n\n<p>The docs make no mention of this interaction, so either such a thing is not possible, or it's undocumented.</p>\n\n<p>Anyone managed to do this?</p>\n\n<hr>\n\n<p>OK, I've come up with a small, self-contained test case for this. This all works as-is:</p>\n\n<p>First, the bean definitions:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xmlns:context=\"http://www.springframework.org/schema/context\"\n           xmlns:util=\"http://www.springframework.org/schema/util\"\n           xsi:schemaLocation=\"\n                http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n                http://www.springframework.org/schema/util    http://www.springframework.org/schema/util/spring-util.xsd\n           \"&gt; \n\n    &lt;context:property-placeholder properties-ref=\"myProps\"/&gt;\n\n    &lt;util:properties id=\"myProps\"&gt;\n        &lt;prop key=\"x.y.z\"&gt;Value A&lt;/prop&gt;\n    &lt;/util:properties&gt;\n\n    &lt;bean id=\"testBean\" class=\"test.Bean\"&gt;\n            &lt;!-- here is where the magic is required --&gt;\n        &lt;property name=\"value\" value=\"${x.y.z}\"/&gt; \n\n            &lt;!-- I want something like this\n        &lt;property name=\"value\" value=\"${a.b.c}?:'Value B'\"/&gt; \n            --&gt; \n    &lt;/bean&gt;     \n&lt;/beans&gt;\n</code></pre>\n\n<p>Then, the trivial bean class:</p>\n\n<p>package test;</p>\n\n<pre><code>public class Bean {\n\n    String value;\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n}\n</code></pre>\n\n<p>And lastly, the test case:</p>\n\n<pre><code>package test;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.*;\n\nimport javax.annotation.Resource;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration\npublic class PlaceholderTest {\n\n    private @Resource Bean testBean;\n\n    @Test\n    public void valueCheck() {\n        assertThat(testBean.value, is(\"Value A\"));\n    }\n}\n</code></pre>\n\n<p>The challenge - to come up with a SpEL expression in the beans file which allows me to specify a default value in cases where <code>${x.y.z}</code> cannot be resolved, and this default <em>must</em> be specified as part of the expression, not externalized in another property set.</p>\n    ","a":"\n<p>you may:</p>\n\n<pre><code>&lt;bean id=\"testBean\" class=\"test.Bean\"&gt;\n        &lt;!-- if 'a.b.c' not found, then value=\"Value B\" ---&gt;\n       &lt;property name=\"value\" value=\"${a.b.c:Value B}\"/&gt; \n&lt;/bean&gt;     \n</code></pre>\n\n<p>or</p>\n\n<pre><code> ...\n &lt;!-- if 'a.b.c' not found , but 'a.b' found ,then value=${a.b}\n      if 'a.b' also not found , then value=\"a\"     \n --&gt;\n &lt;property name=\"value\" value=\"${a.b.c:${a.b:a}\"/&gt; \n ...\n</code></pre>\n\n<p>or\n       ...</p>\n\n<pre><code>   &lt;!-- if 'a.b.c' not found , but 'a.b' found ,then value=${a.b}\n      if 'a.b' also not found , then value=\"a\"     \n    --&gt;\n       &lt;property name=\"value\" value=\"#{  '${a.b.c:}'  ?: '${a.b:a}' }\"/&gt; \n   ...\n</code></pre>\n    "},{"t":"How to manually log out a user with spring security?","l":"http://stackoverflow.com/questions/5727380/how-to-manually-log-out-a-user-with-spring-security","q":"\n\n<p>Probably the answer is simple: How can I manually logout the currently logged in user in spring security?\nIs it sufficient to call:</p>\n\n<pre><code>SecurityContextHolder.getContext().getAuthentication().setAuthenticated(false); \n</code></pre>\n\n<p>?</p>\n    ","a":"\n<p>In Servlet 3.0 container Spring logout functionality is integrated with servlet and you just invoke <code>logout()</code> on your <code>HttpServletRequest</code>. Still need to write valid response content.</p>\n\n<p><strong>According to <a href=\"http://docs.spring.io/spring-security/site/docs/3.2.1.CI-SNAPSHOT/reference/htmlsingle/#servletapi-logout\">documentation</a></strong> (Spring 3.2):</p>\n\n<blockquote>\n  <p><strong>The HttpServletRequest.logout() method can be used to log the current user out.</strong></p>\n  \n  <p>Typically this means that the SecurityContextHolder will be cleared\n  out, the HttpSession will be invalidated, any \"Remember Me\"\n  authentication will be cleaned up, etc.</p>\n</blockquote>\n    "},{"t":"Spring Boot JPA - configuring auto reconnect","l":"http://stackoverflow.com/questions/22684807/spring-boot-jpa-configuring-auto-reconnect","q":"\n\n<p>I have a nice little spring boot jpa web application. It is deployed on amazon beanstalk and uses an amazon rds for persisting data. It is however not used that often and there for fails after a while with this kind of exception:</p>\n\n<pre><code>com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: The last packet successfully received from the server was 79,870,633 milliseconds ago.  \nThe last packet sent successfully to the server was 79,870,634 milliseconds ago. is longer than the server configured value of 'wait_timeout'. \nYou should consider either expiring and/or testing connection validity before use in your application, increasing the server configured values for client timeouts, or using the Connector/J connection property 'autoReconnect=true' to avoid this problem.\n</code></pre>\n\n<p>I am not sure how to configure this setting and can not find information on it on <a href=\"http://spring.io\">http://spring.io</a> (a very good site though). Anybody have some ideas or pointers to information ?</p>\n    ","a":"\n<p>I assume that boot is configuring the <code>DataSource</code> for you. In this case, and since you are using MySQL, you can add the following to your <code>application.properties</code></p>\n\n<pre><code>spring.datasource.testOnBorrow=true\nspring.datasource.validationQuery=SELECT 1\n</code></pre>\n\n<p>Note that the use of <code>autoReconnect</code> is <a href=\"http://dev.mysql.com/doc/connector-j/en/connector-j-reference-configuration-properties.html\">not recommended</a>:</p>\n\n<blockquote>\n  <p>The use of this feature is not recommended, because it has side effects related to session state and data consistency when applications don't handle SQLExceptions properly, and is only designed to be used when you are unable to configure your application to handle SQLExceptions resulting from dead and stale connections properly.</p>\n</blockquote>\n    "},{"t":"how do you get current active/default Environment profile programatically in spring 3.1?","l":"http://stackoverflow.com/questions/9267799/how-do-you-get-current-active-default-environment-profile-programatically-in-spr","q":"\n\n<p>I need to code different logic based on different current Environment profile. How can you get the current active and default profiles from Spring?</p>\n    ","a":"\n<p>You can autowire the Environment</p>\n\n<pre><code>@Autowired\nEnvironment env;\n</code></pre>\n\n<p>Environment offers <code>String[] getActiveProfiles()</code>, <code>String[] getDefaultProfiles()</code>, and <code>boolean acceptsProfiles(String... profiles)</code></p>\n    "},{"t":"Is it possible to have multiple PropertyPlaceHolderConfigurer in my applicationContext?","l":"http://stackoverflow.com/questions/686635/is-it-possible-to-have-multiple-propertyplaceholderconfigurer-in-my-applicationc","q":"\n\n<p>I need to load a specific applicationContext.xml file according to a given system property. This itself loads a file with the actual configuration. Therefore I need 2 PropertyPlaceHolderConfigurer, one which resolves the system param, and the other one within the actual configuration.</p>\n\n<p>Any ideas how to do this?</p>\n    ","a":"\n<p>Yes you can do more than one.  Be sure to set <a href=\"http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html#setIgnoreUnresolvablePlaceholders(boolean)\" rel=\"nofollow noreferrer\">ignoreUnresolvablePlaceholders</a> so that the first will ignore any placeholders that it can't resolve.</p>\n\n<pre><code>&lt;bean id=\"ppConfig1\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\n   &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/&gt;\n   &lt;property name=\"locations\"&gt;\n    &lt;list&gt;\n             &lt;value&gt;classpath*:/my.properties&lt;/value&gt;\n    &lt;/list&gt;\n  &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"ppConfig2\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\n   &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"false\"/&gt;\n   &lt;property name=\"locations\"&gt;\n    &lt;list&gt;\n             &lt;value&gt;classpath*:/myOther.properties&lt;/value&gt;\n    &lt;/list&gt;\n  &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Depending on your application, you should investigate systemPropertiesMode, it allows you to load properties from a file, but allow the system properties to override values in the property file if set.</p>\n    "},{"t":"@Scope(“prototype”) bean scope not creating new bean","l":"http://stackoverflow.com/questions/7621920/scopeprototype-bean-scope-not-creating-new-bean","q":"\n\n<p>I want to use a annotated prototype bean in my controller. But spring is creating a singleton bean instead. Here is the code for that:</p>\n\n<pre><code>@Component\n@Scope(\"prototype\")\npublic class LoginAction {\n\n  private int counter;\n\n  public LoginAction(){\n    System.out.println(\" counter is:\" + counter);\n  }\n  public String getStr() {\n    return \" counter is:\"+(++counter);\n  }\n}\n</code></pre>\n\n<p>Controller code:</p>\n\n<pre><code>@Controller\npublic class HomeController {\n    @Autowired\n    private LoginAction loginAction;\n\n    @RequestMapping(value=\"/view\", method=RequestMethod.GET)\n    public ModelAndView display(HttpServletRequest req){\n        ModelAndView mav = new ModelAndView(\"home\");\n        mav.addObject(\"loginAction\", loginAction);\n        return mav;\n    }\n\n    public void setLoginAction(LoginAction loginAction) {\n        this.loginAction = loginAction;\n    }\n\n    public LoginAction getLoginAction() {\n        return loginAction;\n    }\n    }\n</code></pre>\n\n<p>Velocity template:</p>\n\n<pre><code> LoginAction counter: ${loginAction.str}\n</code></pre>\n\n<p>Spring <code>config.xml</code> has component scanning enabled:</p>\n\n\n\n<pre><code>    &lt;context:annotation-config /&gt;\n    &lt;context:component-scan base-package=\"com.springheat\" /&gt;\n    &lt;mvc:annotation-driven /&gt;\n</code></pre>\n\n<p>I'm getting an incremented count each time. Can't figure out where am I going wrong! </p>\n\n<p><strong>Update</strong></p>\n\n<p>As <a href=\"http://stackoverflow.com/a/7621968/254477\">suggested by @gkamal</a>, I made <code>HomeController</code> <code>webApplicationContext</code>-aware and it solved the problem.</p>\n\n<p>updated code:</p>\n\n<pre><code>@Controller\npublic class HomeController {\n\n    @Autowired\n    private WebApplicationContext context;\n\n    @RequestMapping(value=\"/view\", method=RequestMethod.GET)\n    public ModelAndView display(HttpServletRequest req){\n        ModelAndView mav = new ModelAndView(\"home\");\n        mav.addObject(\"loginAction\", loginAction);\n        return mav;\n    }\n\n    public LoginAction getLoginAction() {\n        return (LoginAction) context.getBean(\"loginAction\");\n    }\n}\n</code></pre>\n    ","a":"\n<p>Scope prototype means that every time you ask spring (getBean or dependency injection) for an instance it will create a new instance and give a reference to that.</p>\n\n<p>In your example a new instance of LoginAction is created and injected into your HomeController . If you have another controller into which you inject LoginAction you will get a different instance.</p>\n\n<p>If you want a different instance for each call - then you need to call getBean each time - injecting into a singleton bean will not achieve that.</p>\n    "},{"t":"Populating Spring @Value during Unit Test","l":"http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test","q":"\n\n<p>I'm trying to write a Unit Test for a simple bean that's used in my program to validate forms. The bean is annotated with <code>@Component</code> and has a class variable that is initialized using <code>@Value(\"${this.property.value}\") private String thisProperty;</code></p>\n\n<p>I would like to write unit tests for the validation methods inside this class, however, if possible I would like to do so without utilizing the properties file. My reasoning behind this, is that if the value I'm pulling from the properties file changes, I would like that to not affect my test case. My test case is testing the code that validates the value, not the value itself. </p>\n\n<p>Is there a way to use Java code inside my test class to initialize a Java class and populate the Spring @Value property inside that class then use that to test with?</p>\n\n<p>I did find this <a href=\"https://gist.github.com/danlangford/3418696\">How To</a> that seems to be close, but still uses a properties file. I would rather it all be Java code.</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>If possible I would try to write those test without Spring Context. If you create this class in your test without spring, then you have full control over its fields.</p>\n\n<p>To set the <code>@value</code> field you can use Springs <code>ReflectionTestUtil</code> it has a method <code>setField</code> to set private fields.</p>\n\n<p>@see <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/test/util/ReflectionTestUtils.html#setField(java.lang.Object\">http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/test/util/ReflectionTestUtils.html#setField(java.lang.Object</a>, java.lang.String, java.lang.Object)</p>\n    "},{"t":"Spring beans redefinition in unit test environment","l":"http://stackoverflow.com/questions/565334/spring-beans-redefinition-in-unit-test-environment","q":"\n\n<p>we are using Spring for my application purposes, and Spring Testing framework for unit tests. We have a small problem though: the application code loads a Spring application context from a list of locations (xml files) in the classpath. But when we run our unit tests, we want some of the Spring beans to be mocks instead of full-fledged implementation classes. Moreover, for some unit tests we want some beans to become mocks, while for other unit tests we want other beans to become mocks, as we are testing different layers of the application.</p>\n\n<p>All this means I want to redefine specific beans of the application context and refresh the context when desired. While doing this, I want to redefine only a small portion of the beans located in one (or several) original xml beans definition file. I cannot find an easy way to do it. It's always regarded that Spring is a unit testing friendly framework so I must be missing something here.</p>\n\n<p>Do you have any ideas how to do it?</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>i would propose a custom TestClass and some easy rules for the locations of the spring bean.xml</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\n    \"classpath*:spring/*.xml\",\n    \"classpath*:spring/persistence/*.xml\",\n    \"classpath*:spring/mock/*.xml\"})\n@Transactional\n@TestExecutionListeners({\n    DependencyInjectionTestExecutionListener.class,\n    TransactionalTestExecutionListener.class,\n    DirtiesContextTestExecutionListener.class})\npublic abstract class AbstractHibernateTests implements ApplicationContextAware \n{\n\n    /**\n     * Logger for Subclasses.\n     */\n    protected final Logger LOG = LoggerFactory.getLogger(getClass());\n\n    /**\n     * The {@link ApplicationContext} that was injected into this test instance\n     * via {@link #setApplicationContext(ApplicationContext)}.\n     */\n    protected ApplicationContext applicationContext;\n\n    /**\n     * Set the {@link ApplicationContext} to be used by this test instance,\n     * provided via {@link ApplicationContextAware} semantics.\n     */\n    @Override\n    public final void setApplicationContext(\n            final ApplicationContext applicationContext) {\n        this.applicationContext = applicationContext;\n    }\n}\n</code></pre>\n\n<p>if there are mock-bean.xml in the specified location, they will override all \"real\" bean.xml in the \"normal\" locations - your normal locations might differ</p>\n\n<p>but... i would never mix mock and non-mock beans it's hard to trace problems, when the application grows older.</p>\n    "},{"t":"How to download spring framework zip file [duplicate]","l":"http://stackoverflow.com/questions/19124445/how-to-download-spring-framework-zip-file","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/19082860/where-can-i-download-spring-framework-jars-without-using-maven\" dir=\"ltr\">Where can I download Spring Framework jars without using Maven?</a>\n                <span class=\"question-originals-answer-count\">\n                    1 answer\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I am trying to download spring framework 3.2.4 zip file from www.springsource.org/download/community. It is redirecting me to <a href=\"http://spring.io/projects\">http://spring.io/projects</a>. From there I went in to Spring framework and checked for zip file but there is no zip file to download. I tried to google but there were some old instructions which were easy to download. Looks like some thing got changed in the way we download zip file. \nplease help me with instructions to download.</p>\n    ","a":"Some Issue fetching the answer, please click the link in the header to navigate to the actual stackoverflow thread"},{"t":"java.lang.IllegalArgumentException: A ServletContext is required to configure default servlet handling","l":"http://stackoverflow.com/questions/21516683/java-lang-illegalargumentexception-a-servletcontext-is-required-to-configure-de","q":"\n\n<p>I have the following test class:</p>\n\n<pre><code>@ActiveProfiles({ \"DataTC\", \"test\" })\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {BaseTestConfiguration.class, DataTestConfiguration.class, JpaConfiguration.class, PropertyPlaceholderConfiguration.class })\npublic class RegularDayToTimeSlotsTest {\n...\n</code></pre>\n\n<p>The issue seems to come from the BaseTestConfiguration class:</p>\n\n<pre><code>@Configuration\n@ComponentScan(basePackages = { \"com.bignibou\" }, excludeFilters = { @Filter(type = FilterType.CUSTOM, value = RooRegexFilter.class),\n        @Filter(type = FilterType.ANNOTATION, value = Controller.class), @Filter(type = FilterType.ANNOTATION, value = ControllerAdvice.class) })\npublic class BaseTestConfiguration {\n\n}\n</code></pre>\n\n<p>I systematically get this exception:</p>\n\n<pre><code>Caused by: java.lang.IllegalArgumentException: A ServletContext is required to configure default servlet handling\n    at org.springframework.util.Assert.notNull(Assert.java:112)\n    at org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer.&lt;init&gt;(DefaultServletHandlerConfigurer.java:54)\n    at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.defaultServletHandlerMapping(WebMvcConfigurationSupport.java:329)\n    at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerByCGLIB$$bb4ceb44.CGLIB$defaultServletHandlerMapping$22(&lt;generated&gt;)\n    at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerByCGLIB$$bb4ceb44$$FastClassByCGLIB$$368bb5c1.invoke(&lt;generated&gt;)\n    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)\n    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:326)\n    at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerByCGLIB$$bb4ceb44.defaultServletHandlerMapping(&lt;generated&gt;)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166)\n    ... 43 more\n</code></pre>\n\n<p>I am not sure how to get around this issue. Somehow Spring is looking for a ServletContext when I run the test and I get the above exception...</p>\n    ","a":"\n<p>One of your <code>@Configuration</code> classes is obviously annotated with <code>@EnableWebMvc</code>. That's how <code>DelegatingWebMvcConfiguration</code> ends up in your stack trace, since it is <em>imported</em> by <code>@EnableWebMvc</code>.</p>\n\n<p>So although you <em>think</em> you don't need a <code>WebApplicationContext</code> (and hence a <code>ServletContext</code>), you in fact do need it simply because you are loading an application context with <code>@EnableWebMvc</code>.</p>\n\n<p>You have two options:</p>\n\n<ul>\n<li>Compose the configuration classes for your integration test so that you are not including the web-related configuration (i.e., the <code>@Configuration</code> class(es) annotated with <code>@EnableWebMvc</code>).</li>\n<li>Annotate your test class with <code>@WebAppConfiguration</code> as suggested in other comments above.</li>\n</ul>\n\n<p>Regards,</p>\n\n<p>Sam (author of the Spring TestContext Framework)</p>\n    "},{"t":"How to make spring inject value into a static field","l":"http://stackoverflow.com/questions/11324372/how-to-make-spring-inject-value-into-a-static-field","q":"\n\n<p>I know this may looks like a previously asked question but I'm facing a different problem here.</p>\n\n<p>I have a utility class that has only static methods. I don't and I won't take an instance from it.</p>\n\n<pre><code>public class Utils{\n    private static Properties dataBaseAttr;\n    public static void methodA(){\n\n    }\n\n    public static void methodB(){\n\n    }\n}\n</code></pre>\n\n<p>Now I need Spring to fill dataBaseAttr with database attributes Properties.Spring config is:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd\"&gt;\n\n&lt;util:properties id=\"dataBaseAttr\"\n        location=\"file:#{classPathVariable.path}/dataBaseAttr.properties\" /&gt;\n&lt;/beans&gt;\n</code></pre>\n\n<p>I already done it in other beans but the problem here in this class (Utils) isn't a bean, And if I make it a bean nothing changes I still can't use the variable since the class will not be instantiated and variable always equals null.</p>\n    ","a":"\n<p>You have two possibilities:</p>\n\n<ol>\n<li>non-static setter for static property/field;</li>\n<li>using <a href=\"http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html\"><code>org.springframework.beans.factory.config.MethodInvokingFactoryBean</code></a> to invoke a static setter.</li>\n</ol>\n\n<p>In the first option you have a bean with a regular setter but instead setting an instance property you set the static property/field.</p>\n\n<pre><code>public void setTheProperty(Object value) {\n    foo.bar.Class.STATIC_VALUE = value;\n}\n</code></pre>\n\n<p>but in order to do this you need to have an instance of a bean that will expose this setter (its more like an <em>workaround</em>).</p>\n\n<p>In the second case it would be done as follows:</p>\n\n<blockquote>\n<pre><code>&lt;bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;\n    &lt;property name=\"staticMethod\" value=\"foo.bar.Class.setTheProperty\"/&gt;\n    &lt;property name=\"arguments\"&gt;\n        &lt;list&gt;\n            &lt;ref bean=\"theProperty\"/&gt;\n        &lt;/list&gt;\n   &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n</blockquote>\n\n<p>On you case you will add a new setter on the <code>Utils</code> class:</p>\n\n<pre><code>public static setDataBaseAttr(Properties p)\n</code></pre>\n\n<p>and in your context you will configure it with the approach exemplified above, more or less like:</p>\n\n<blockquote>\n<pre><code>&lt;bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;\n    &lt;property name=\"staticMethod\" value=\"foo.bar.Utils.setDataBaseAttr\"/&gt;\n    &lt;property name=\"arguments\"&gt;\n        &lt;list&gt;\n            &lt;ref bean=\"dataBaseAttr\"/&gt;\n        &lt;/list&gt;\n   &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n</blockquote>\n    "},{"t":"Spring CrudRepository findByInventoryIds(List<Long> inventoryIdList) - equivalent to IN clause","l":"http://stackoverflow.com/questions/18987292/spring-crudrepository-findbyinventoryidslistlong-inventoryidlist-equivalen","q":"\n\n<p>In Spring CrudRepository, do we have support for \"IN clause\" for a field? ie something similar to the following? </p>\n\n<pre><code> findByInventoryIds(List&lt;Long&gt; inventoryIdList) \n</code></pre>\n\n<p>If such support is not available, what elegant options can be considered? Firing queries for each id may not be optimal.</p>\n    ","a":"\n<p><code>findByInventoryIdIn(List&lt;Long&gt; inventoryIdList)</code> should do the trick.</p>\n\n<p>The HTTP HTTP request parameter format would be like so:</p>\n\n<pre><code>Yes ?id=1,2,3\nNo  ?id=1&amp;id=2&amp;id=3\n</code></pre>\n\n<p>The complete list of JPA repository keywords can be found in the <a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repository-query-keywords\">current documentation listing</a>. It shows that <code>IsIn</code> is equivalent – if you prefer the verb for readability – and that JPA also supports <code>NotIn</code> and <code>IsNotIn</code>.</p>\n    "},{"t":"Spring Hibernate - Could not obtain transaction-synchronized Session for current thread","l":"http://stackoverflow.com/questions/26203446/spring-hibernate-could-not-obtain-transaction-synchronized-session-for-current","q":"\n\n<p>I created an application with spring + hibernate, but I always get this error. This is my first application with hibernate, I read some guides but I can not solve this problem. Where am I doing wrong?</p>\n\n<p>This is the code of my application</p>\n\n<pre><code>ott 05, 2014 4:03:06 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nInformazioni: Refreshing   org.springframework.context.support.ClassPathXmlApplicationContext@1eab16b: startup date  [Sun Oct 05 16:03:06 CEST 2014]; root of context hierarchy\nott 05, 2014 4:03:06 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nInformazioni: Loading XML bean definitions from class path resource [springConfig.xml]\nott 05, 2014 4:03:08 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt;\nINFO: HCANN000001: Hibernate Commons Annotations {4.0.5.Final}\nott 05, 2014 4:03:08 PM org.hibernate.Version logVersion\nINFO: HHH000412: Hibernate Core {4.3.6.Final}\nott 05, 2014 4:03:08 PM org.hibernate.cfg.Environment &lt;clinit&gt;\nINFO: HHH000206: hibernate.properties not found\nott 05, 2014 4:03:08 PM org.hibernate.cfg.Environment buildBytecodeProvider\nINFO: HHH000021: Bytecode provider name : javassist\nott 05, 2014 4:03:09 PM org.hibernate.dialect.Dialect &lt;init&gt;\nINFO: HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect\nott 05, 2014 4:03:09 PM org.hibernate.engine.transaction.internal.TransactionFactoryInitiator initiateService\nINFO: HHH000399: Using default transaction strategy (direct JDBC transactions)\nott 05, 2014 4:03:09 PM org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory &lt;init&gt;\nINFO: HHH000397: Using ASTQueryTranslatorFactory\nException in thread \"main\" org.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread\nat org.springframework.orm.hibernate4.SpringSessionContext.currentSession(SpringSessionContext.java:134)\nat org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014)\nat coreservlets.StudentDAOImpl.create(StudentDAOImpl.java:19)\nat coreservlets.MainApp.main(MainApp.java:14)\n</code></pre>\n\n<p>student.java</p>\n\n<pre><code>package coreservlets;\n\npublic class Student {\n\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public Integer getId(){return id;}//getId\n\n    public void setId(Integer id){this.id=id;}//setId\n\n    public String getName(){return name;}//getName\n\n    public void setName(String name){this.name=name;}//setName\n\n    public Integer getAge(){return age;}//getAge\n\n    public void setAge(Integer age){this.age=age;}//setAge\n\n}//Student\n</code></pre>\n\n<p>studentDAO.java</p>\n\n<pre><code>package coreservlets;\n\nimport org.hibernate.SessionFactory;\n\npublic interface StudentDAO {\n\n    public void setSessionFactory(SessionFactory sessionFactory);\n\n    public void create(String name,Integer age);\n\n}//StudentDAO\n</code></pre>\n\n<p>StudentDAOImpl.java</p>\n\n<pre><code>package coreservlets;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class StudentDAOImpl implements StudentDAO {\n\n    private SessionFactory sessionFactory;\n\n    @Autowired\n    public void setSessionFactory(SessionFactory sessionFactory){\n        this.sessionFactory=sessionFactory;\n    }//setSessionFactory\n\n    public void create(String name,Integer age){\n        Session session=sessionFactory.getCurrentSession();\n        Student student=new Student();\n        student.setName(name);\n        student.setAge(age);\n        session.save(student);\n    }//create\n\n}//StudentDAOImpl\n</code></pre>\n\n<p>MainApp.java</p>\n\n<pre><code>package coreservlets;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n\n    public static void main(String[] args) {\n\n        ApplicationContext context=new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\n        StudentDAOImpl student=(StudentDAOImpl) context.getBean(\"studentDAOImpl\");\n\n        student.create(\"Alessandro\", new Integer(33));\n\n\n    }//main\n\n}//MainApp\n</code></pre>\n\n<p>springConfig.xml</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:mvc=\"http://www.springframework.org/schema/mvc\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"&gt;\n\n&lt;context:annotation-config/&gt;\n\n&lt;context:component-scan base-package=\"coreservlets\"/&gt;\n\n&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"&gt;\n  &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/&gt;\n  &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/spring_hibernate\"/&gt;\n  &lt;property name=\"username\" value=\"root\"/&gt;\n  &lt;property name=\"password\" value=\"password\"/&gt;\n  &lt;property name=\"initialSize\" value=\"5\"/&gt;\n  &lt;property name=\"maxTotal\" value=\"10\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt;\n&lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n&lt;property name=\"hibernateProperties\"&gt;\n    &lt;value&gt;\n            hibernate.dialect=org.hibernate.dialect.MySQLDialect\n    &lt;/value&gt;\n&lt;/property&gt;\n\n&lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>sql</p>\n\n<pre><code>create table student\n(\nid integer not null auto_increment,\nname varchar(20) not null,\nage integer not null,\nprimary key(id)\n);\n</code></pre>\n    ","a":"\n<p>You must <strong>enable</strong> the transaction support (<code>&lt;tx:annotation-driven&gt;</code> or <code>@EnableTransactionManagement</code>) and <strong>declare</strong> the <code>transactionManager</code> and it should work through the <code>SessionFactory</code>.</p>\n\n<p>You must add <code>@Transactional</code> into your <code>@Repository</code></p>\n\n<p>With <code>@Transactional</code> in your <code>@Repository</code> Spring is able to apply transactional support into your repository.</p>\n\n<p>Your <code>Student</code> class has no the @javax.persistence.* annotations how <code>@Entity</code>, I am assuming the Mapping Configuration for that class has been defined through XML.</p>\n    "},{"t":"Java Spring Boot: How to map my app root (“/”) to index.html?","l":"http://stackoverflow.com/questions/27381781/java-spring-boot-how-to-map-my-app-root-to-index-html","q":"\n\n<p>I'm new to Java and to Spring.\nHow can I map my app root <code>http://localhost:8080/</code> to a static <code>index.html</code>?\nIf I navigate to <code>http://localhost:8080/index.html</code> its works fine.</p>\n\n<p>My app structure is :</p>\n\n<p><img src=\"https://i.stack.imgur.com/bMEaw.png\" alt=\"dirs\"></p>\n\n<p>My <code>config\\WebConfig.java</code> looks like this:</p>\n\n<pre><code>@Configuration\n@EnableWebMvc\n@ComponentScan\npublic class WebConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/**\").addResourceLocations(\"/\");\n        }\n}\n</code></pre>\n\n<p>I tried to add <code>registry.addResourceHandler(\"/\").addResourceLocations(\"/index.html\");</code> but it fails.</p>\n    ","a":"\n<p>It would have worked out of the box if you hadn't used <code>@EnableWebMvc</code> annotation. When you do that you switch off all the things that Spring Boot does for you in <code>WebMvcAutoConfiguration</code>. You could remove that annotation, or you could add back the view controller that you switched off:</p>\n\n<pre><code>@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n    registry.addViewController(\"/\").setViewName(\"forward:/index.html\");\n}\n</code></pre>\n    "},{"t":"Spring @Value annotation in @Controller class not evaluating to value inside properties file","l":"http://stackoverflow.com/questions/11890544/spring-value-annotation-in-controller-class-not-evaluating-to-value-inside-pro","q":"\n\n<p>I am new to Spring and trying to inject a string with a value using the <code>@Value(\"${loginpage.message}\")</code> annotation inside of a controller annotated with the <code>@Controller</code> annotation and the value of my string is being evaluated as the string <code>\"${loginpage.message}\"</code> and not what is inside my properties file.</p>\n\n<p>Below is my controller with the string 'message' that I want to inject.</p>\n\n<pre><code>@Controller\npublic class LoginController extends BaseController {\n    @Value(\"${loginpage.message}\")\n    private String message;\n\n    @RequestMapping(\"/\")\n    public String goToLoginPage(Model model) {\n        model.addAttribute(\"message\", message);\n\n        return \"/login\";\n    }\n}\n</code></pre>\n\n<p>My application context looks like this: </p>\n\n<pre><code>&lt;context:property-placeholder location=\"classpath:properties/application.properties\" /&gt;\n\n&lt;context:annotation-config /&gt;\n\n&lt;context:component-scan base-package=\"com.me.application\" /&gt;\n</code></pre>\n\n<p>My properties file has the line:</p>\n\n<pre><code>loginpage.message=this is a test message\n</code></pre>\n\n<p>Spring must be picking up the value at some point because whenever I change <code>@Value(\"${loginpage.message}\")</code> to a value not in the properties file like <code>@Value(\"${notInPropertiesFile}\")</code>, I get an exception.</p>\n    ","a":"\n<p>It seems that the question has been already asked <a href=\"http://stackoverflow.com/questions/5275724/spring-3-0-5-doesnt-evaluate-value-annotation-from-properties\">Spring 3.0.5 doesn't evaluate @Value annotation from properties</a></p>\n\n<p>The difference between web app root and servlet application contexts is one of the top sources of confusion in Spring, see  <a href=\"http://stackoverflow.com/questions/3652090/difference-between-applicationcontext-and-spring-servlet-xml-in-spring\">difference between applicationContext and spring-servlet.xml in spring</a></p>\n\n<p>From <code>@Value</code> javadoc : </p>\n\n<blockquote>\n  <p>Note that actual processing of the @Value annotation is performed by a\n  BeanPostProcessor</p>\n</blockquote>\n\n<p>From <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-extension\">Spring documentation:</a></p>\n\n<blockquote>\n  <p>BeanPostProcessor interfaces are scoped per-container. This is only relevant if you are using container hierarchies. If you define a BeanPostProcessor in one container, it will only do its work on the beans in that container. Beans that are defined in one container are not post-processed by a BeanPostProcessor in another container, even if both containers are part of the same hierarchy.</p>\n</blockquote>\n    "},{"t":"Spring HandlerInterceptor vs Servlet Filters","l":"http://stackoverflow.com/questions/8000844/spring-handlerinterceptor-vs-servlet-filters","q":"\n\n<p><a href=\"http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html\">HandlerInterceptor</a>s in Spring can now be configured to be invoked only on certain URLs using <code>&lt;mvc:interceptors&gt;</code>.</p>\n\n<p>Servlet Filters can achieve same functionality (logging, security etc). So which one should be used?</p>\n\n<p>I think with Interceptors, one can use <code>ModelAndView</code> object to work with Models so it has more advantages. Can anyone draw out scenarios where Filters or Interceptors have advantages over the other?</p>\n    ","a":"\n<p>The <code>org.springframework.web.servlet.HanderInterceptor</code> Interface <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html\">JavaDoc</a> itself has a two paragraphs that discuss this question:</p>\n\n<blockquote>\n  <p>HandlerInterceptor is basically similar to a Servlet 2.3 Filter, but\n  in contrast to the latter it just allows custom pre-processing with\n  the option of prohibiting the execution of the handler itself, and\n  custom post-processing. Filters are more powerful, for example they\n  allow for exchanging the request and response objects that are handed\n  down the chain. Note that a filter gets configured in web.xml, a\n  HandlerInterceptor in the application context.</p>\n  \n  <p>As a basic guideline, fine-grained handler-related preprocessing tasks\n  are candidates for HandlerInterceptor implementations, especially\n  factored-out common handler code and authorization checks. On the\n  other hand, a Filter is well-suited for request content and view\n  content handling, like multipart forms and GZIP compression. This\n  typically shows when one needs to map the filter to certain content\n  types (e.g. images), or to all requests.</p>\n</blockquote>\n    "},{"t":"Spring session-scoped beans (controllers) and references to services, in terms of serialization","l":"http://stackoverflow.com/questions/3180963/spring-session-scoped-beans-controllers-and-references-to-services-in-terms-o","q":"\n\n<ul>\n<li>a standard case - you have a controller (<code>@Controller</code>) with <code>@Scope(\"session\")</code>.</li>\n<li>classes put in the session usually are expected to implement <code>Serializable</code> so that they can be stored physically in case the server is restarted, for example</li>\n<li>If the controller implements <code>Serializable</code>, this means all services (other spring beans) it is referring will also be serialized. They are often proxies, with references to transaction mangers, entity manager factories, etc.</li>\n<li>It is not unlikely that some service, or even controller, hold a reference to the <code>ApplicationContext</code>, by implementing <code>ApplicationContextAware</code>, so this can effectively mean that the whole context is serialized. And given that it holds many connections - i.e. things that are not serializable by idea, it will be restored in corrupt state.</li>\n</ul>\n\n<p>So far I've mostly ignored these issues. Recently I thought of declaring all my spring dependencies <code>transient</code> and getting them back in <code>readResolve()</code> by the static utility classes <code>WebApplicationContextUtils</code> and such that hold the request/ServletContext in a <code>ThreadLocal</code>. This is tedious, but it guarantees that, when the object is deserialized, its dependencies will be \"up to date\" with the <em>current</em> application context.</p>\n\n<p>Is there any accepted practice for this, or any guidelines for serializing parts of the spring context.</p>\n\n<p>Note that in JSF, managed beans (~controllers) are stateful (unlike action-based web frameworks). So perhaps my question stands more for JSF, than for spring-mvc.</p>\n    ","a":"\n<p>In <a href=\"http://infoq.com/presentations/Whats-New-in-Spring-3.0\" rel=\"nofollow noreferrer\">this presentation</a> (around 1:14) the speaker says that this issue is resolved in spring 3.0 by providing a proxy of non-serializable beans, which obtains an instance from the <em>current</em> application context (on deserialization)</p>\n    "},{"t":"Spring: namespace vs contextConfigLocation init parameters in web.xml","l":"http://stackoverflow.com/questions/15818047/spring-namespace-vs-contextconfiglocation-init-parameters-in-web-xml","q":"\n\n<p>I am reading the documentation for Spring MVC and I have a question regarding the init params. I am using Spring 3.2 if it matter. What is the difference between the contextConfigLocation and namespace? Is the contextConfigLocation meant only for specifying the folders where the context class can find a XML definition and the namespace attribute is meant for specifying the file name?</p>\n\n<pre><code>&lt;servlet&gt;\n        &lt;servlet-name&gt;AppServlet&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;WEB-INF&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;namespace&lt;/param-name&gt;\n            &lt;param-value&gt;application-context.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n</code></pre>\n\n<p>Is this correct? Should it use /WEB-INF/application-context.xml? And should you specify paths?</p>\n    ","a":"\n<h1>TL;DR</h1>\n\n<p>Just set the value(s) for the <code>contextConfigLocation</code> whenever you need to specify custom config files. This way you will be specifying both the config file names and their locations.</p>\n\n<p><strong>The <code>namespace</code> is essentially an alternative way</strong> of telling Spring container context loader class what config file to use. I never bother with it, but just use <code>contextConfigLocation</code> whenever I need to configure custom config files.</p>\n\n<p>Here is an example from one of my previous Spring projects (some of the configurations omitted for the sake of brevity):</p>\n\n<p><em>web.xml</em></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                            http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"&gt;\n\n    &lt;display-name&gt;Spring Web Application example&lt;/display-name&gt;\n\n    &lt;!-- Configurations for the root application context (parent context) --&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            /WEB-INF/spring/jdbc/spring-jdbc.xml\n            /WEB-INF/spring/security/spring-security-context.xml\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n    &lt;!-- Configurations for the DispatcherServlet application context (child context) --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;\n                /WEB-INF/spring/mvc/spring-mvc-servlet.xml\n            &lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n\n<hr>\n\n<h1>Long answer</h1>\n\n<p>OK, first let's get some important moments clear. There are two types of contexts we are dealing with:</p>\n\n<ol>\n<li><strong>root context</strong> (parent)</li>\n<li><strong>individual servlet context</strong> (child)</li>\n</ol>\n\n<p>Quote from the Spring Framework API (version 3.2.2 at the moment of writing this) for the <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/javadoc-api/org/springframework/web/context/WebApplicationContext.html\">WebApplicationContext</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Like generic application contexts, web application contexts are\n  hierarchical. <strong>There is a single root context per application, while\n  each servlet in the application (including a dispatcher servlet in the\n  MVC framework) has its own child context</strong>.</p>\n</blockquote>\n\n<p>Also here: <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/spring-framework-reference/html/testing.html#testcontext-ctx-management-ctx-hierarchies\">Context hierarchies</a>:</p>\n\n<blockquote>\n  <p>For example, if you are developing a Spring MVC web application you\n  will typically have a <strong>root WebApplicationContext loaded via Spring's\n  ContextLoaderListener</strong> and a <strong>child WebApplicationContext loaded via\n  Spring's DispatcherServlet</strong>. This results in a parent-child context\n  hierarchy where shared components and infrastructure configuration are\n  declared in the root context and consumed in the child context by\n  web-specific components.</p>\n</blockquote>\n\n<p>And here: <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/spring-framework-reference/html/mvc.html#mvc-servlet\">17.2 The DispatcherServlet</a>:</p>\n\n<blockquote>\n  <p>ApplicationContext instances in Spring can be scoped. In the Web MVC\n  framework, <strong>each DispatcherServlet has its own WebApplicationContext,\n  which inherits all the beans already defined in the root\n  WebApplicationContext</strong>. These inherited beans can be overridden in the\n  servlet-specific scope, and you can define new scope-specific beans\n  local to a given Servlet instance.</p>\n</blockquote>\n\n<p><br>\nNow let's see the <strong>root application context</strong> configuration. Here is an example:<br>\n<em>web.xml</em></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                            http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            /WEB-INF/spring/daoContext.xml\n            /WEB-INF/spring/applicationContext.xml\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n&lt;/web-app&gt;\n</code></pre>\n\n<p><br>\nFrom the official Spring documentation (emphasis mine):<br>\n<a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/spring-framework-reference/html/beans.html#context-create\">5.14.4 Convenient ApplicationContext instantiation for web applications</a>: </p>\n\n<blockquote>\n  <p><strong>You can create ApplicationContext instances declaratively</strong> by using,\n  for example, a ContextLoader. Of course you can also create\n  ApplicationContext instances programmatically by using one of the\n  ApplicationContext implementations.</p>\n  \n  <p>You can <strong>register an ApplicationContext using the ContextLoaderListener</strong>\n  (see the example above)</p>\n  \n  <p>The listener inspects the contextConfigLocation parameter. <strong>If the\n  parameter does not exist, the listener uses\n  /WEB-INF/applicationContext.xml as a default</strong>. When the parameter does\n  exist, the listener separates the String by using predefined\n  delimiters (comma, semicolon and whitespace) and uses the values as\n  locations where application contexts will be searched. Ant-style path\n  patterns are supported as well. Examples are /WEB-INF/*Context.xml for\n  all files with names ending with \"Context.xml\", residing in the\n  \"WEB-INF\" directory, and /WEB-INF/**/*Context.xml, for all such files\n  in any subdirectory of \"WEB-INF\".</p>\n</blockquote>\n\n<p><br>\nQuite often Spring configuration is split across multiple files. It's more logical and convenient, especially in the large-scale projects. In our example we explicitly defined two configuration XML files: <em>daoContext.xml</em> and <em>applicationContext.xml</em> in the custom location: <code>/WEB-INF/spring/</code>. Again, had we not defined <em>contextConfigLocation</em>, the <em>ContextLoaderListener</em> would try to locate the default config file: <em><code>/WEB-INF/applicationContext.xml</code></em>.</p>\n\n<p>NOTE:<br>\nThe <strong>root context is optional</strong>. Also see this answer: <a href=\"http://stackoverflow.com/a/7451389/814702\">http://stackoverflow.com/a/7451389/814702</a></p>\n\n<p>So if the default <em><code>/WEB-INF/applicationContext.xml</code></em> config file does not suit your needs, use <em>ContextLoaderListener</em> along with <code>&lt;context-param&gt;</code> <em>contextConfigLocation</em> where you can define custom config file(s) <strong>to define root application context</strong>.</p>\n\n<p><br>\nNext let's see the <strong>individual (child) application context</strong>. From the official Spring documentation (emphasis mine):<br>\n<a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/spring-framework-reference/html/mvc.html#mvc-servlet\">17.2 The DispatcherServlet</a></p>\n\n<blockquote>\n  <p><strong>Upon initialization of a DispatcherServlet, Spring MVC looks for a file named<br>\n  [servlet-name]-servlet.xml in the WEB-INF directory</strong> of your\n  web application and creates the beans defined there, overriding the\n  definitions of any beans defined with the same name in the global\n  scope.</p>\n  \n  <p>Consider the following DispatcherServlet Servlet configuration (in the\n  web.xml file):</p>\n</blockquote>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;web-app&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;golfing&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;golfing&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/golfing/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n\n<p><br></p>\n\n<h2>About contextConfigLocation and namespace</h2>\n\n<p>From the documentation (emphasis mine):</p>\n\n<blockquote>\n  <p>With the above Servlet configuration in place, you will need to have a file called<br>\n  <code>/WEB-INF/golfing-servlet.xml</code> in your application; this\n  file will contain all of your Spring Web MVC-specific components\n  (beans). You can change the exact location of this configuration file\n  through a Servlet initialization parameter (see below for details).<br>\n  ...<br>\n  <strong>You can customize individual DispatcherServlet instances</strong> by adding\n  Servlet initialization parameters (init-param elements) to the Servlet\n  declaration in the web.xml file. See the following table for the list\n  of supported parameters.</p>\n  \n  <ul>\n  <li><p><strong><em>contextClass</em></strong>: Class that implements WebApplicationContext, which instantiates the context used by this Servlet. By default, the XmlWebApplicationContext is used.</p></li>\n  <li><p><strong><em>contextConfigLocation</em></strong>: String that is passed to the context instance (specified by contextClass) to indicate where context(s) can be found. The string consists potentially of multiple strings (using a comma as a delimiter) to support multiple contexts.\n  In case of multiple context locations with beans that are defined twice, the latest location takes precedence.</p></li>\n  <li><p><strong><em>namespace</em></strong>: Namespace of the WebApplicationContext. Defaults to [servlet-name]-servlet.</p></li>\n  </ul>\n</blockquote>\n\n<p><br>\nNow let's research the API documentation for the related classes. The class <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html\"><em>DispatcherServlet</em></a> extends abstract class <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/javadoc-api/org/springframework/web/servlet/FrameworkServlet.html\"><em>FrameworkServlet</em></a>. From the <em>FrameworkServlet</em> API docs (emphasis mine):</p>\n\n<blockquote>\n  <p>Passes a \"contextConfigLocation\" servlet init-param to the context\n  instance, parsing it into potentially multiple file paths which can be\n  separated by any number of commas and spaces, like<br>\n  \"test-servlet.xml,\n  myServlet.xml\". <strong>If not explicitly specified, the context\n  implementation is supposed to build a default location from the\n  namespace of the servlet</strong>.</p>\n  \n  <p>The default namespace is \"'servlet-name'-servlet\", e.g. \"test-servlet\"\n  for a servlet-name \"test\" (leading to a \"/WEB-INF/test-servlet.xml\"\n  default location with XmlWebApplicationContext). <strong>The namespace can\n  also be set explicitly via the \"namespace\" servlet init-param</strong>.</p>\n</blockquote>\n\n<p>This is the excerpt from the <em>FrameworkServlet</em> source code:<br>\n<a href=\"http://grepcode.com/file/repository.springsource.com/org.springframework/org.springframework.web.servlet/3.2.2/org/springframework/web/servlet/FrameworkServlet.java#FrameworkServlet\"><em>FrameworkServlet.java</em></a></p>\n\n<pre class=\"lang-java prettyprint-override\"><code>....\n/**\n* Suffix for WebApplicationContext namespaces. If a servlet of this class is\n* given the name \"test\" in a context, the namespace used by the servlet will\n* resolve to \"test-servlet\".\n*/\npublic static final String DEFAULT_NAMESPACE_SUFFIX = \"-servlet\";\n....\n</code></pre>\n\n<p><br>\nThe default context class for <em>FrameworkServlet</em> is <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/javadoc-api/org/springframework/web/context/support/XmlWebApplicationContext.html\"><em>XmlWebApplicationContext</em></a>. From the <em>XmlWebApplicationContext</em> API docs (emphasis mine):</p>\n\n<blockquote>\n  <p>By default, the configuration will be taken from\n  \"/WEB-INF/applicationContext.xml\" for the root context, and\n  \"/WEB-INF/test-servlet.xml\" for a context with the namespace\n  \"test-servlet\" (like for a DispatcherServlet instance with the\n  servlet-name \"test\").</p>\n  \n  <p><strong>The config location defaults can be overridden via the\n  \"contextConfigLocation\" context-param of ContextLoader and servlet\n  init-param of FrameworkServlet</strong>. Config locations can either denote\n  concrete files like \"/WEB-INF/context.xml\" or Ant-style patterns like\n  \"/WEB-INF/*-context.xml\" (see PathMatcher javadoc for pattern\n  details).</p>\n</blockquote>\n\n<p>Overriding default config locations using <code>contextConfigLocation</code> is the same as in the above example for the root application context.</p>\n\n<p>As for the <strong>overriding the default namespace</strong> there are some important moments. When you set a new namespace, <strong>don't prepend it with <code>/WEB-INF</code> and don't append <code>.xml</code> to it</strong>. The reason for that can be discovered if we look in the source file for the <em>XmlWebApplicationContext</em> class:<br>\n<a href=\"http://grepcode.com/file/repository.springsource.com/org.springframework/org.springframework.web/3.2.2/org/springframework/web/context/support/XmlWebApplicationContext.java#XmlWebApplicationContext\"><em>XmlWebApplicationContext.java</em></a></p>\n\n<pre class=\"lang-java prettyprint-override\"><code>...\n\n/** Default config location for the root context */\npublic static final String DEFAULT_CONFIG_LOCATION = \"/WEB-INF/applicationContext.xml\";\n\n/** Default prefix for building a config location for a namespace */\npublic static final String DEFAULT_CONFIG_LOCATION_PREFIX = \"/WEB-INF/\";\n\n/** Default suffix for building a config location for a namespace */\npublic static final String DEFAULT_CONFIG_LOCATION_SUFFIX = \".xml\";\n\n...\n\n/**\n* The default location for the root context is \"/WEB-INF/applicationContext.xml\",\n* and \"/WEB-INF/test-servlet.xml\" for a context with the namespace \"test-servlet\"\n* (like for a DispatcherServlet instance with the servlet-name \"test\").\n*/\n@Override\nprotected String[] getDefaultConfigLocations() {\n    if (getNamespace() != null) {\n        return new String[] {DEFAULT_CONFIG_LOCATION_PREFIX + getNamespace() + DEFAULT_CONFIG_LOCATION_SUFFIX};\n    }\n    else {\n        return new String[] {DEFAULT_CONFIG_LOCATION};\n    }\n}\n</code></pre>\n\n<p>As you can see, the source code says it all.</p>\n\n<p><br></p>\n\n<h2>Example of specifying custom namespace</h2>\n\n<p><em>web.xml</em></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                            http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"&gt;\n\n\n    &lt;!-- Configurations for the DispatcherServlet application context (child context) --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;namespace&lt;/param-name&gt;\n            &lt;param-value&gt;spring/mvc/spring-mvc&lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;spring-mvc&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n\n<p>The result is that, instead of using the default namespace for constructing the path to the config file, that would otherwise be <code>/WEB-INF/spring-mvc-servlet.xml</code>, the container will look for <code>/WEB-INF/spring/mvc/spring-mvc.xml</code>.</p>\n\n<p>NOTE:<br>\nThe above explanations related to the setting custom namespace are for the default <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/javadoc-api/org/springframework/web/context/support/XmlWebApplicationContext.html\"><em>XmlWebApplicationContext</em></a> context class. One can specify an alternative class, like <a href=\"http://docs.spring.io/spring/docs/3.2.2.RELEASE/javadoc-api/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.html\"><em>AnnotationConfigWebApplicationContext</em></a>, so there will be some special moments for that.</p>\n\n<hr>\n\n<h2>CONCLUSION</h2>\n\n<p>It is (IMHO) much more easier to use <code>contextConfigLocation</code> parameter to define custom config files, both for the root application context and for the individual contexts. The only difference is that for the root application context you use <strong><code>&lt;context-param&gt;</code></strong> within <code>&lt;web-app&gt;</code> element, but NOT within a specific servlet (also don't forget the listener class). And for the child context you use <strong><code>&lt;init-param&gt;</code></strong> nested inside the <code>&lt;servlet&gt;</code> element <strong>for each specific servlet</strong>. See my example configurations (<em>web.xml</em>) in the very beginning of this post.</p>\n\n<p>Additional sources (as if the above was not enough :-)):</p>\n\n<ul>\n<li><a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/\">Spring Framework Reference\nDocumentation</a></li>\n<li><a href=\"http://www.jroller.com/latenightdev/entry/spring_mvc_context_loading\">Spring MVC Context\nLoading</a>\n</li>\n</ul>\n\n<p>Also see these answers:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/3652125/814702\">Difference between applicationContext.xml and spring-servlet.xml in Spring</a></li>\n<li><a href=\"http://stackoverflow.com/a/11709272/814702\">What is the difference between ApplicationContext and WebApplicationContext in Spring MVC?</a></li>\n<li><a href=\"http://stackoverflow.com/a/7451389/814702\">Spring-MVC: What are a “context” and “namespace”?</a></li>\n</ul>\n    "},{"t":"@Transactional(propagation=Propagation.REQUIRED)","l":"http://stackoverflow.com/questions/10740021/transactionalpropagation-propagation-required","q":"\n\n<p>if some one can explain what this annotation do and when exactly we use it :</p>\n\n<pre><code>@Transactional(propagation=Propagation.REQUIRED)\n</code></pre>\n\n<p>Thanks</p>\n    ","a":"\n<p>When the propagation setting is PROPAGATION_REQUIRED, a logical transaction scope is created for each method upon which the setting is applied. Each such logical transaction scope can determine rollback-only status individually, with an outer transaction scope being logically independent from the inner transaction scope. Of course, in case of standard PROPAGATION_REQUIRED behavior, all these scopes will be mapped to the same physical transaction. So a rollback-only marker set in the inner transaction scope does affect the outer transaction's chance to actually commit (as you would expect it to).</p>\n\n<p><img src=\"https://i.stack.imgur.com/OEe1L.png\" alt=\"enter image description here\"></p>\n\n<p><a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/transaction.html\" rel=\"nofollow noreferrer\">http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/transaction.html</a></p>\n    "},{"t":"Spring can't autowire Map bean","l":"http://stackoverflow.com/questions/13913752/spring-cant-autowire-map-bean","q":"\n\n<p>I've defined a map in spring as such:</p>\n\n<pre><code>&lt;util:map id=\"AdditionalParams\" scope=\"prototype\" map-class=\"java.util.HashMap\" \n          key-type=\"java.lang.String\" value-type=\"java.lang.String\"&gt;\n\n    &lt;entry key=\"Start\" value=\"12345\" /&gt;\n    &lt;entry key=\"Finish\" value=\"12365\" /&gt;\n&lt;/util:map&gt;\n</code></pre>\n\n<p>And then I'm autowiring this bean to a property defined as:</p>\n\n<pre><code>private @Autowired @Qualifier(value = \"AdditionalParams\") Map&lt;String, String&gt; additionalParams;\n</code></pre>\n\n<p>When doing this, the an exception get's thrown saying that:</p>\n\n<blockquote>\n  <p>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'DutyCreator': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.util.Map DutyCreator.additionalParams; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [java.lang.String] found for dependency [map with value type java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=AdditionalParams)}</p>\n  \n  <p>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [java.lang.String] found for dependency [map with value type java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=AdditionalParams)}</p>\n</blockquote>\n\n<p>Any ideas?</p>\n\n<p>Cheers.</p>\n    ","a":"\n<pre><code>@Autowired ApplicationContext ctx;\nprivate  &lt;T&gt; T getBean(String qualifier, Class&lt;T&gt; returnType){\n    //use this for loop to print all bean from ctx. so you wont miss the typo.\n    /*for(String s:ctx.getBeanDefinitionNames())\n        log.info(s);*/\n    return ctx.getBean(qualifier, returnType);\n}\n</code></pre>\n\n<p>// inside your call</p>\n\n<pre><code> if(providerList == null){\n       providerList = ctx.getBean(\"providerList\", Map.class);\n }\n</code></pre>\n\n<p>This Solution works good to me </p>\n    "},{"t":"Spring hibernate template when to use and why?","l":"http://stackoverflow.com/questions/4067775/spring-hibernate-template-when-to-use-and-why","q":"\n\n<p>Greetings,\nCurrently developing small web service application where response from web service (using CXF + Spring) processed and saved to database. To work with database I am using Hibernate(3.5). Browsing some Hibernate + Spring example on web, I often can see the usage of HibernateTemplate so I am a bit confused about this moment and wanted to ask:</p>\n\n<p>Do you use HibernateTemplate in your Hibernate3 applications? \nWhen does HibernateTemplate can make your development life better and based on what points can I decide do I need to use it or not ? </p>\n\n<p>Thanks. </p>\n    ","a":"\n<p>All spring templates (hibernate, jdbc, rest, jpa etc.) have the same pros and cons:</p>\n\n<p><strong>Pro:</strong> They perform common setup routines for you, let you skip the boilerplate and concentrate on the logic you want.</p>\n\n<p><strong>Con:</strong> you are coupling your application tightly to the spring framework. For this reason, Spring recommends that <code>HibernateTemplate</code> no longer be used.</p>\n\n<p>Specifically, what <code>HibernateTemplate</code> did for you was to automatically open and close sessions and commit or rollback transactions after your code executed. However, all of this can be achieved in an aspect-oriented way using Spring's <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#transaction-declarative\" rel=\"nofollow\">Declarative Transaction Management</a>.</p>\n\n<p><strong>Reference:</strong></p>\n\n<ul>\n<li>Spring Reference: <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate\" rel=\"nofollow\">ORM: Hibernate</a> for the current suggested Spring Hibernate usage patterns</li>\n<li>Spring Reference: <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/classic-spring.html#orm-hibernate-template\" rel=\"nofollow\">Classic Spring Usage: HibernateTemplate</a></li>\n</ul>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>As of Spring 3.1 (and newer versions), <a href=\"https://jira.springsource.org/browse/SPR-8096\" rel=\"nofollow\"><code>HibernateTemplate</code> has been removed</a>. See <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/orm.html#orm-hibernate\" rel=\"nofollow\">Hibernate</a> for the currently suggested usage patterns.</p>\n    "},{"t":"Spring configuration XML schema: with or without version?","l":"http://stackoverflow.com/questions/20894695/spring-configuration-xml-schema-with-or-without-version","q":"\n\n<p>I am new to Spring. One thing confuses me is that sometimes I see XML configuration files with versioned schemas, yet sometimes with non-versioned ones. For example, sometimes I see something like</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context-4.0.xsd\"&gt;\n\n    &lt;context:annotation-config/&gt;\n\n    &lt;context:component-scan base-package=\"base.package\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>And sometimes like this:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n    &lt;context:annotation-config/&gt;\n\n    &lt;context:component-scan base-package=\"base.package\"/&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>Note that the <code>spring-beans</code> and <code>spring-context</code> schemas are different in the two examples.</p>\n\n<p>So, my question is, which style would you use and why? In particular, will the versioned schema become unavailable in the future, and will the non-versioned schema keep compatible with a current application when Spring updates the schema? </p>\n\n<p>A side question is, where can I find a list of the versioned spring schemas?</p>\n\n<p>Many thanks!</p>\n    ","a":"\n<p>It is recommended to use the \"versionless\" XSDs, because they're mapped to the current version of the framework you're using in your application.</p>\n\n<p><strong>Applications and tools should never try to fetch those XSDs from the web</strong>, since those schemas are included in the JARs. If they do, it usually means your app is trying to use a XSD that is more recent than the framework version you're using, or that your IDE/tool is not properly configured.</p>\n\n<p>To my knowledge, there's only one case where you'd want to use specific XSD versions: when trying to use a XML attribute that's been deprecated/modified in a more recent version. That doesn't happen often to say the least.</p>\n\n<p>Anyway the Spring team should drop the versioned schemas for Spring 5.0, see <a href=\"https://jira.spring.io/browse/SPR-13499\">SPR-13499</a>.</p>\n\n<p><em>More on \"versionless == current version\":</em></p>\n\n<p>Those XSD files are included in Spring JARs - the \"versionless\" XSD is mapped to the latest version during the build (see the <a href=\"https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/resources/META-INF/spring.schemas\">spring.schemas</a> files that actually make that link).\nAlso, the files available online are built the same way (see the <a href=\"https://github.com/spring-projects/spring-framework/blob/master/build.gradle#L1014\">\"schemaZip\" target in the gradle build</a>).</p>\n    "},{"t":"Spring 3.0 MVC binding Enums Case Sensitive","l":"http://stackoverflow.com/questions/4617099/spring-3-0-mvc-binding-enums-case-sensitive","q":"\n\n<p>If I have a RequestMapping in a Spring controller like so... </p>\n\n<pre><code>@RequestMapping(method = RequestMethod.GET, value = \"{product}\")\npublic ModelAndView getPage(@PathVariable Product product)\n</code></pre>\n\n<p>And Product is an enum. eg. Product.Home</p>\n\n<p>When I request the page, mysite.com/home</p>\n\n<p>I get</p>\n\n<pre><code>Unable to convert value \"home\" from type 'java.lang.String' to type 'domain.model.product.Product'; nested exception is java.lang.IllegalArgumentException: No enum const class domain.model.product.Product.home\n</code></pre>\n\n<p>Is there a way to have the enum type converter to understand that lower case home is actually Home? </p>\n\n<p>I'd like to keep the url case insensitive and my Java enums with standard capital letters.</p>\n\n<p>Thanks</p>\n\n<p><strong>Solution</strong></p>\n\n<pre><code>public class ProductEnumConverter extends PropertyEditorSupport\n{\n    @Override public void setAsText(final String text) throws IllegalArgumentException\n    {\n        setValue(Product.valueOf(WordUtils.capitalizeFully(text.trim())));\n    }\n}\n</code></pre>\n\n<p>registering it </p>\n\n<pre><code>&lt;bean class=\"org.springframework.beans.factory.config.CustomEditorConfigurer\"&gt;\n        &lt;property name=\"customEditors\"&gt;\n            &lt;map&gt;\n                &lt;entry key=\"domain.model.product.Product\" value=\"domain.infrastructure.ProductEnumConverter\"/&gt;\n            &lt;/map&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n</code></pre>\n\n<p>Add to controllers that need special conversion</p>\n\n<pre><code>@InitBinder\npublic void initBinder(WebDataBinder binder)\n{\n    binder.registerCustomEditor(Product.class, new ProductEnumConverter());\n} \n</code></pre>\n    ","a":"\n<p>Broadly speaking, you want to create a new PropertyEditor that does the normalisation for you, and then you register that in your Controller like so:</p>\n\n<pre><code>@InitBinder\n public void initBinder(WebDataBinder binder) {\n\n  binder.registerCustomEditor(Product.class,\n    new CaseInsensitivePropertyEditor());\n }\n</code></pre>\n    "},{"t":"Spring Boot Multiple Datasource","l":"http://stackoverflow.com/questions/27614301/spring-boot-multiple-datasource","q":"\n\n<p>I'm quite new to spring boot and I'd like to create a multiple datasource for my project.\nHere is my current case. I have two packages for entity for multiple database. Let's say</p>\n\n<pre><code>com.test.entity.db.mysql ; for entities that belong to MySql\ncom.test.entity.db.h2 ; for entities that belong to H2 Databases\n</code></pre>\n\n<p>So, currently I have two entities class</p>\n\n<p>UserMySql.java</p>\n\n<pre><code>@Entity\n@Table(name=\"usermysql\")\npublic class UserMysql{\n\n    @Id\n    @GeneratedValue\n    public int id;\n\n    public String name;\n\n}\n</code></pre>\n\n<p>UserH2.java</p>\n\n<pre><code>@Entity\n@Table(name=\"userh2\")\npublic class Userh2 {\n\n    @Id\n    @GeneratedValue\n    public int id;\n\n    public String name;\n}\n</code></pre>\n\n<p>I'd like to achieve a configuration where if I create user from UserMySql, it will be saved to MySql Database, and if I create user from Userh2 it will be saved to H2 Databases. So, I also have two DBConfig, let's say MySqlDbConfig and H2DbConfig. </p>\n\n<p>(com.test.model is package where I'll put my Repositories class. It will be defined below)</p>\n\n<p>MySqlDbConfig.java</p>\n\n<pre><code>@Configuration\n@EnableJpaRepositories(\n    basePackages=\"com.test.model\",\n    entityManagerFactoryRef = \"mysqlEntityManager\")\npublic class MySqlDBConfig {\n\n@Bean\n@Primary\n@ConfigurationProperties(prefix=\"datasource.test.mysql\")\npublic DataSource mysqlDataSource(){\n    return DataSourceBuilder\n            .create()\n            .build();\n}\n\n@Bean(name=\"mysqlEntityManager\")\npublic LocalContainerEntityManagerFactoryBean mySqlEntityManagerFactory(\n        EntityManagerFactoryBuilder builder){       \n    return builder.dataSource(mysqlDataSource())                \n            .packages(\"com.test.entity.db.mysql\")\n            .build();\n}   \n\n}\n</code></pre>\n\n<p>H2DbConfig.java</p>\n\n<pre><code>@Configuration\n@EnableJpaRepositories(\n    entityManagerFactoryRef = \"h2EntityManager\")\npublic class H2DbConfig {\n\n@Bean\n@ConfigurationProperties(prefix=\"datasource.test.h2\")\npublic DataSource h2DataSource(){\n    return DataSourceBuilder\n            .create()\n            .driverClassName(\"org.h2.Driver\")\n            .build();\n}\n\n@Bean(name=\"h2EntityManager\")\npublic LocalContainerEntityManagerFactoryBean h2EntityManagerFactory(\n        EntityManagerFactoryBuilder builder){\n    return builder.dataSource(h2DataSource())\n            .packages(\"com.test.entity.db.h2\")\n            .build();\n}\n}\n</code></pre>\n\n<p>My application.properties file</p>\n\n<pre><code>#DataSource settings for mysql\ndatasource.test.mysql.jdbcUrl = jdbc:mysql://127.0.0.1:3306/test\ndatasource.test.mysql.username = root\ndatasource.test.mysql.password = root\ndatasource.test.mysql.driverClassName = com.mysql.jdbc.Driver\n\n#DataSource settings for H2\ndatasource.test.h2.jdbcUrl = jdbc:h2:~/test\ndatasource.test.h2.username = sa\n\n# DataSource settings: set here configurations for the database connection\nspring.datasource.url = jdbc:mysql://127.0.0.1:3306/test\nspring.datasource.username = root\nspring.datasource.password = root\nspring.datasource.driverClassName = com.mysql.jdbc.Driver\nspring.datasource.validation-query=SELECT 1\n\n\n# Specify the DBMS\nspring.jpa.database = MYSQL\n\n# Show or not log for each sql query\nspring.jpa.show-sql = true\n\n# Hibernate settings are prefixed with spring.jpa.hibernate.*\nspring.jpa.hibernate.ddl-auto = update\nspring.jpa.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect\nspring.jpa.hibernate.naming_strategy = org.hibernate.cfg.ImprovedNamingStrategy\nspring.jpa.hibernate.show_sql = true\nspring.jpa.hibernate.format_sql = true\n\nserver.port=8080\nendpoints.shutdown.enabled=false\n</code></pre>\n\n<p>And then for crud I have UserMySqlDao and UserH2Dao</p>\n\n<p>UserMySqlDao.java</p>\n\n<pre><code>@Transactional \n@Repository\npublic interface UserMysqlDao extends CrudRepository&lt;UserMysql, Integer&gt;{\n\n    public UserMysql findByName(String name);\n}\n</code></pre>\n\n<p>UserH2Dao.java</p>\n\n<pre><code>@Transactional\n@Repositories\npublic interface UserH2Dao extends CrudRepository&lt;Userh2, Integer&gt;{\n\n    public Userh2 findByName(String name);\n}\n</code></pre>\n\n<p>And for last, I have an UserController as endpoint to access my service</p>\n\n<p>UserController.java</p>\n\n<pre><code>@Controller \n@RequestMapping(\"/user\")\npublic class UserController {\n\n\n@Autowired\nprivate UserMysqlDao userMysqlDao;\n\n@Autowired\nprivate UserH2Dao userH2Dao;\n\n@RequestMapping(\"/createM\")\n@ResponseBody\npublic String createUserMySql(String name){\n    UserMysql user = new UserMysql();\n    try{            \n        user.name = name;\n        userMysqlDao.save(user);\n        return \"Success creating user with Id: \"+user.id;\n    }catch(Exception ex){\n        return \"Error creating the user: \" + ex.toString();\n    }\n}\n\n@RequestMapping(\"/createH\")\n@ResponseBody\npublic String createUserH2(String name){\n    Userh2 user = new Userh2();\n    try{\n        user.name = name;\n        userH2Dao.save(user);\n        return \"Success creating user with Id: \"+user.id;\n    }catch(Exception ex){\n        return \"Error creating the user: \" + ex.toString();\n    }\n}   \n}\n</code></pre>\n\n<p>Application.java</p>\n\n<pre><code>@Configuration\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\n@EntityScan(basePackages=\"com.test.entity.db\")\n@ComponentScan\npublic class Application {\n\npublic static void main(String[] args) {\n    System.out.println(\"Entering spring boot\");\n    ApplicationContext ctx = SpringApplication.run(Application.class, args);\n\n    System.out.println(\"Let's inspect the beans provided by Spring Boot:\");\n    String[] beanNames = ctx.getBeanDefinitionNames();\n    Arrays.sort(beanNames);\n    for (String beanName : beanNames) {\n        System.out.print(beanName);\n        System.out.print(\" \");\n    }\n\n    System.out.println(\"\");\n}\n\n}\n</code></pre>\n\n<p>With this configuration my Spring boot run well, but when I access </p>\n\n<pre><code>http://localhost/user/createM?name=myname it writes an exception\n\nError creating the user: org.springframework.dao.InvalidDataAccessResourceUsageException:   could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.SQLGrammarException: could not execute statement\n</code></pre>\n\n<p>I've googling around and haven't got a solution yet. Any ideas why this exception occurs? And is this the best way to implement multiple datasource to implement my case above? I'm open to full refactor if needed.</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>Use multiple datasource or realizing the separation of reading &amp; writing.\nyou must have a knowledge of Class <code>AbstractRoutingDataSource</code> which support dynamic datasource choose.</p>\n\n<p>Here is my <code>datasource.yaml</code> and I figure out how to resolve this case. You can refer to this project <a href=\"https://github.com/lvhao/schedule-job\" rel=\"nofollow\">spring-boot + quartz</a>. Hope this will help you.</p>\n\n<pre><code>dbServer:\n  default: localhost:3306\n  read: localhost:3306\n  write: localhost:3306\ndatasource:\n  default:\n    type: com.zaxxer.hikari.HikariDataSource\n    pool-name: default\n    continue-on-error: false\n    jdbc-url: jdbc:mysql://${dbServer.default}/schedule_job?useSSL=true&amp;verifyServerCertificate=false&amp;useUnicode=true&amp;characterEncoding=utf8\n    username: root\n    password: lh1234\n    connection-timeout: 30000\n    connection-test-query: SELECT 1\n    maximum-pool-size: 5\n    minimum-idle: 2\n    idle-timeout: 600000\n    destroy-method: shutdown\n    auto-commit: false\n  read:\n    type: com.zaxxer.hikari.HikariDataSource\n    pool-name: read\n    continue-on-error: false\n    jdbc-url: jdbc:mysql://${dbServer.read}/schedule_job?useSSL=true&amp;verifyServerCertificate=false&amp;useUnicode=true&amp;characterEncoding=utf8\n    username: root\n    password: lh1234\n    connection-timeout: 30000\n    connection-test-query: SELECT 1\n    maximum-pool-size: 5\n    minimum-idle: 2\n    idle-timeout: 600000\n    destroy-method: shutdown\n    auto-commit: false\n  write:\n    type: com.zaxxer.hikari.HikariDataSource\n    pool-name: write\n    continue-on-error: false\n    jdbc-url: jdbc:mysql://${dbServer.write}/schedule_job?useSSL=true&amp;verifyServerCertificate=false&amp;useUnicode=true&amp;characterEncoding=utf8\n    username: root\n    password: lh1234\n    connection-timeout: 30000\n    connection-test-query: SELECT 1\n    maximum-pool-size: 5\n    minimum-idle: 2\n    idle-timeout: 600000\n    destroy-method: shutdown\n    auto-commit: false\n</code></pre>\n    "},{"t":"Does dependency injection exist in Rails?","l":"http://stackoverflow.com/questions/2190812/does-dependency-injection-exist-in-rails","q":"\n\n<p>Does the fact that Rails have an MVC approach mean that is has dependency injection?</p>\n\n<p>Or is there a reason that we don't talk about dependency injection in Rails?</p>\n\n<p><strong>If Rails does have dependency injection, what does it consist of?</strong></p>\n    ","a":"\n<p>Dependency injection is usually unnecessary with Ruby. Jamis Buck <a href=\"http://weblog.jamisbuck.org/2008/11/9/legos-play-doh-and-programming\" rel=\"nofollow noreferrer\">blogged extensively</a> about the reasons why. Well worth a read.</p>\n    "},{"t":"JSR 303 Bean Validation + Javascript Client-Side Validation","l":"http://stackoverflow.com/questions/2513863/jsr-303-bean-validation-javascript-client-side-validation","q":"\n\n<p>What is the best way to perform client-side form validation using Javascript (with minimal code duplication) when using JSR 303 bean validation on the server side? I'm currently using <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#validation-mvc-jsr303\" rel=\"nofollow noreferrer\">Spring 3</a> and the <a href=\"http://hibernate.org/subprojects/validator\" rel=\"nofollow noreferrer\">Hibernate Validator</a>.</p>\n    ","a":"\n<p>PrimeFaces Client Side Validation Framework Supports Bean Validation.</p>\n\n<p><a href=\"http://blog.primefaces.org/?p=2874\" rel=\"nofollow\">http://blog.primefaces.org/?p=2874</a></p>\n    "},{"t":"@Value not resolved when using @PropertySource annotation. How to configure PropertySourcesPlaceholderConfigurer?","l":"http://stackoverflow.com/questions/13728000/value-not-resolved-when-using-propertysource-annotation-how-to-configure-prop","q":"\n\n<p>I have following configuration class:</p>\n\n<pre><code>@Configuration\n@PropertySource(name = \"props\", value = \"classpath:/app-config.properties\")\n@ComponentScan(\"service\")\npublic class AppConfig {\n</code></pre>\n\n<p>and I have service with property:</p>\n\n<pre><code>@Component \npublic class SomeService {\n    @Value(\"#{props['some.property']}\") private String someProperty;\n</code></pre>\n\n<p>I receive error when I want to test the AppConfig configuration class with</p>\n\n<pre><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'someService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.lang.String service.SomeService.someProperty; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 0): Field or property 'props' cannot be found on object of type 'org.springframework.beans.factory.config.BeanExpressionContext' \n</code></pre>\n\n<p>The issue is documented <a href=\"https://jira.springsource.org/browse/SPR-8539\">in SPR-8539</a></p>\n\n<p>but anyway I cannot figure out how to configure <strong>PropertySourcesPlaceholderConfigurer</strong>  to get it work.</p>\n\n<h2>Edit 1</h2>\n\n<p>This approach works well with xml configuration</p>\n\n<pre><code>&lt;util:properties id=\"props\" location=\"classpath:/app-config.properties\" /&gt;\n</code></pre>\n\n<p>but I want to use java for configuration.</p>\n    ","a":"\n<p>If you use @PropertySource, properties have to be retrieved with:</p>\n\n<pre><code>@Autowired\nEnvironment env;\n// ...\nString subject = env.getProperty(\"mail.subject\");\n</code></pre>\n\n<p>If you want to retrieve with @Value(\"${mail.subject}\"), you have to register the prop placeholder by xml.</p>\n\n<p>Reason:\n<a href=\"https://jira.springsource.org/browse/SPR-8539\">https://jira.springsource.org/browse/SPR-8539</a></p>\n    "},{"t":"Spring cron expression for every day 1:01:am","l":"http://stackoverflow.com/questions/26147044/spring-cron-expression-for-every-day-101am","q":"\n\n<p>I'm trying to have my code execute on a fixed schedule, based on a Spring cron expression. I would like the code to be executed every day at 1:01:am. I tried the following expression, but this didn't fire up for me. What's wrong with the syntax here?</p>\n\n<pre><code>@Scheduled(cron = \"0 1 1 ? * *\")\npublic void resetCache() {\n    // ...\n}\n</code></pre>\n    ","a":"\n<p>One thing i've noticed is: spring CronTrigger is not cron. You may end up with 7 parameters in a valid cron expression (wich you can validate on cronmaker.com) and then spring not accept it. Most of cases you just delete the last parameter and everything works fine.</p>\n    "},{"t":"No mapping found for HTTP request with URI… in DispatcherServlet with name","l":"http://stackoverflow.com/questions/18683847/no-mapping-found-for-http-request-with-uri-in-dispatcherservlet-with-name","q":"\n\n<p>I checked out nearly every relevant article on stackoverflow already, but I just cant fix my problem.</p>\n\n<p>Here is the code:\nweb.xml:</p>\n\n<pre><code>   &lt;display-name&gt;Spring3MVC&lt;/display-name&gt;\n    &lt;welcome-file-list&gt;\n        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n    &lt;/welcome-file-list&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; \n        &lt;param-value&gt;/WEB-INF/spring-servlet.xml&lt;/param-value&gt; \n    &lt;/context-param&gt; \n    &lt;listener&gt; \n        &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener &lt;/listener-class&gt; \n    &lt;/listener&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;\n            org.springframework.web.servlet.DispatcherServlet\n        &lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n        &lt;url-pattern&gt;*.htm&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre>\n\n<p>spring-servlet.xml:</p>\n\n<pre><code>&lt;context:component-scan base-package=\"com.mycompany.elso\" /&gt;\n    &lt;bean class=\"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping\"/&gt;   \n\n    &lt;bean id=\"viewResolver\"\n        class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"&gt;\n        &lt;property name=\"viewClass\"\n            value=\"org.springframework.web.servlet.view.JstlView\" /&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt;\n        &lt;property name=\"suffix\" value=\".jsp\" /&gt;\n    &lt;/bean&gt;\n</code></pre>\n\n<p>myController:</p>\n\n<pre><code>public class myController {\n    @RequestMapping(\"/hello\")\n    public ModelAndView helloWorld() {\n\n        String message = \"Hello World, Spring 3.0!\";\n        return new ModelAndView(\"hello\", \"message\", message); \n    }\n}\n</code></pre>\n\n<p>Web Pages/index.jsp:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Spring 3.0 MVC Series&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;a href=\"hello.html\"&gt;Say Hello&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Web Pages/WEB-INF/jsp/hello.jsp:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Spring 3.0 MVC Series: Hello World - ViralPatel.net&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    ${message}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>So when i launch the appication the index.jsp is loaded correctly but when i click on the href to navigate to hello.jsp i got a 404 error and the server log says:</p>\n\n<pre><code>No mapping found for HTTP request with URI [/Elso/hello.html] in DispatcherServlet with name 'spring'\n</code></pre>\n\n<p>I've checked out dozens of articles like that, but I just can't find the mistake, anybody has any idea what could it be?</p>\n    ","a":"\n<p>You could try and add an <code>@Controller</code> annotation on top of your myController Class and\ntry the following url <code>/&lt;webappname&gt;/my/hello.html</code>.\nThis is because <code>org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping</code> prepends <strong>/my</strong> to each RequestMapping in the myController class.</p>\n    "},{"t":"Spring get current ApplicationContext","l":"http://stackoverflow.com/questions/21827548/spring-get-current-applicationcontext","q":"\n\n<p>I am using Spring MVC for my web application. My beans are written in \"<code>spring-servlet.xml</code>\" file</p>\n\n<p>Now I have a class <code>MyClass</code> and i want to access this class using spring bean</p>\n\n<p>In the <code>spring-servlet.xml</code> i have written following</p>\n\n<pre><code>&lt;bean id=\"myClass\" class=\"com.lynas.MyClass\" /&gt;\n</code></pre>\n\n<p>Now i need to access this using <code>ApplicationContext</code> </p>\n\n<pre><code>ApplicationContext context = ??\n</code></pre>\n\n<p>So that I can do </p>\n\n<pre><code>MyClass myClass = (MyClass) context.getBean(\"myClass\");\n</code></pre>\n\n<p>How to do this??</p>\n    ","a":"\n<p>Simply inject it..</p>\n\n<pre><code>@Autowired\nprivate ApplicationContext appContext;\n</code></pre>\n\n<p>or implement this interface: <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContextAware.html\">ApplicationContextAware</a></p>\n    "},{"t":"Is it possible to have empty RequestParam values use the defaultValue?","l":"http://stackoverflow.com/questions/12296642/is-it-possible-to-have-empty-requestparam-values-use-the-defaultvalue","q":"\n\n<p>if I have a a request mapping similar to the following:</p>\n\n<pre><code>@RequestMapping(value = \"/test\", method = RequestMethod.POST)\n@ResponseBody\npublic void test(@RequestParam(value = \"i\", defaultValue = \"10\") int i) {\n}\n</code></pre>\n\n<p>And then call this request with:</p>\n\n<pre><code>http://example.com/test?i=\n</code></pre>\n\n<p>I get the error message</p>\n\n<blockquote>\n  <p>Failed to convert value of type 'java.lang.String' to type 'int'; nested exception is java.lang.NumberFormatException: For input string: \"\"'</p>\n</blockquote>\n\n<p>I can solve this by either stopping the javascript client from sending empty parameters, or by accepting string values and only parsing if they are not found to be blank.</p>\n    ","a":"\n<p>You could change the @RequestParam type to an Integer and make it not required. This would allow your request to succeed, but i would then be null. You could explicitly set i to your default value in the controller method:</p>\n\n<pre><code>@RequestMapping(value = \"/test\", method = RequestMethod.POST)\n@ResponseBody\npublic void test(@RequestParam(value = \"i\", required=false) Integer i) {\n    if(i == null){\n        i = 10;\n    }\n    // ...\n}\n</code></pre>\n\n<p>I have removed the defaultValue from the example above, but you may want to include it if you expect to receive requests where i isn't set at all: </p>\n\n<pre><code>http://example.com/test\n</code></pre>\n    "},{"t":"Spring security's SecurityContextHolder: session or request bound?","l":"http://stackoverflow.com/questions/6408007/spring-securitys-securitycontextholder-session-or-request-bound","q":"\n\n<p>Is the Userprincipal I retrieve from <code>SecurityContextHolder</code> bound to requests or to sessions?</p>\n\n<p><code>UserPrincipal principal = (UserPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</code></p>\n\n<p>This is the way I access the currently logged in user. Will this invalidate if the current session is destroyed?</p>\n    ","a":"\n<p>It depends on how you configured it (or lets say, you can configure a different behaviour).</p>\n\n<p>In a Web application you will use the <a href=\"http://www.jarvana.com/jarvana/view/org/springframework/security/spring-security-core/3.0.5.RELEASE/spring-security-core-3.0.5.RELEASE-sources.jar!/org/springframework/security/core/context/ThreadLocalSecurityContextHolderStrategy.java?format=ok\"><code>ThreadLocalSecurityContextHolderStrategy</code></a> which interacts with <a href=\"http://www.jarvana.com/jarvana/view/org/springframework/security/spring-security-web/3.0.5.RELEASE/spring-security-web-3.0.5.RELEASE.jar!/org/springframework/security/web/context/SecurityContextPersistenceFilter.class?classDetails=ok\"><code>SecurityContextPersistenceFilter</code></a>.</p>\n\n<p>The Java Doc of <code>SecurityContextPersistenceFilter</code> starts with:</p>\n\n<blockquote>\n  <p>Populates the {@link\n  SecurityContextHolder} with\n  information obtained from the\n  configured {@link\n  SecurityContextRepository} prior to\n  the request and stores it back in the\n  repository once the request has\n  completed and clearing the context\n  holder. By default it uses an {@link\n  HttpSessionSecurityContextRepository}.\n  See this class for information\n  HttpSession related\n  configuration options.</p>\n</blockquote>\n\n<p><em>Btw: HttpSessionSecurityContextRepository is the only implementation of SecurityContextRepository (I have found in the default libs)</em></p>\n\n<p>It works like this:</p>\n\n<ul>\n<li>The <a href=\"http://www.jarvana.com/jarvana/view/org/springframework/security/spring-security-web/3.0.5.RELEASE/spring-security-web-3.0.5.RELEASE-sources.jar!/org/springframework/security/web/context/HttpSessionSecurityContextRepository.java?format=ok\"><code>HttpSessionSecurityContextRepository</code></a> uses the httpSession (Key=\"SPRING_SECURITY_CONTEXT\") to store an <code>SecurityContext</code> Object.</li>\n<li>The <code>SecurityContextPersistenceFilter</code> is an filter that uses an <code>SecurityContextRepository</code> for example the  <code>HttpSessionSecurityContextRepository</code> to load and store <code>SecurityContext</code> Objects. If an HttpRequest passes the filter, the filter get the <code>SecurityContext</code> from the repository and put it in the SecurityContextHolder (<code>SecurityContextHolder#setContext</code>) </li>\n<li>The <code>SecurityContextHolder</code> has two methods <code>setContext</code> and <code>getContext</code>. Both uses a <code>SecurityContextHolderStrategy</code> to specify what exactly is done in the set- and get-Context methods. - For example the <code>ThreadLocalSecurityContextHolderStrategy</code> uses a thread local to store the context.</li>\n</ul>\n\n<p>So in summary: The user principal (element of SecurityContext) is stored in the HTTP Session. And for each request it is put in a thread local from where you access it.</p>\n    "},{"t":"Spring - Redirect after POST (even with validation errors)","l":"http://stackoverflow.com/questions/2543797/spring-redirect-after-post-even-with-validation-errors","q":"\n\n<p>I'm trying to figure out how to \"preserve\" the BindingResult so it can be used in a subsequent GET via the Spring <code>&lt;form:errors&gt;</code> tag. The reason I want to do this is because of Google App Engine's SSL limitations. I have a form which is displayed via HTTP and the post is to an HTTPS URL. If I only forward rather than redirect then the user would see the <a href=\"https://whatever.appspot.com/my/form\" rel=\"nofollow noreferrer\">https://whatever.appspot.com/my/form</a> URL. I'm trying to avoid this. Any ideas how to approach this?</p>\n\n<p>Below is what I'd like to do, but I only see validation errors when I use <code>return \"create\"</code>.</p>\n\n<pre><code>@RequestMapping(value = \"/submit\", method = RequestMethod.POST)\npublic final String submit(\n    @ModelAttribute(\"register\") @Valid final Register register,\n    final BindingResult binding) {\n\n    if (binding.hasErrors()) {\n        return \"redirect:/register/create\";\n    }\n\n    return \"redirect:/register/success\";\n}\n</code></pre>\n    ","a":"\n<p>In addition to Oscar's nice answer, if you are following that <code>RedirectAttributes</code> approach, do not forget that you are actually passing the <code>modelAttribute</code> to the redirected page. This means if you create a new instance of that modelAttribute for the redirected page (in a controller), <strong>you will lose the validation errors</strong>. So, if your <strong>POST</strong> controller method is something like this:</p>\n\n<pre><code>@RequestMapping(value = \"/submit\", method = RequestMethod.POST)\npublic final String submit(@ModelAttribute(\"register\") @Valid final Register register, final BindingResult binding, RedirectAttributes attr, HttpSession session) {\n\nif (binding.hasErrors()) {\n    attr.addFlashAttribute(\"org.springframework.validation.BindingResult.register\", binding);\n    attr.addFlashAttribute(\"register\", register);\n    return \"redirect:/register/create\";\n}\n\nreturn \"redirect:/register/success\";\n}\n</code></pre>\n\n<p>Then you will probably need to do a modification in your register create page <strong>GET</strong> controller. From this:</p>\n\n<pre><code>@RequestMapping(value = \"/register/create\", method = RequestMethod.GET)\npublic String registerCreatePage(Model model) {\n    // some stuff\n    model.addAttribute(\"register\", new Register());\n    // some more stuff\n}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>@RequestMapping(value = \"/register/create\", method = RequestMethod.GET)\npublic String registerCreatePage(Model model) {\n    // some stuff\n    if (!model.containsAttribute(\"register\")) {\n        model.addAttribute(\"register\", new Register());\n    }\n    // some more stuff\n}\n</code></pre>\n\n<p>Source: <a href=\"http://gerrydevstory.com/2013/07/11/preserving-validation-error-messages-on-spring-mvc-form-post-redirect-get/\">http://gerrydevstory.com/2013/07/11/preserving-validation-error-messages-on-spring-mvc-form-post-redirect-get/</a></p>\n    "},{"t":"Why use CDI in Java EE","l":"http://stackoverflow.com/questions/13047807/why-use-cdi-in-java-ee","q":"\n\n<p>I know there are a lot of articles out there that explain how to use CDI in Java EE but I'm having trouble figuring out what advantage this actually brings. For example, suppose I have a class that currently uses an instance of Foo. I might either do</p>\n\n<pre><code>Foo myFoo = new Foo();\n</code></pre>\n\n<p>or </p>\n\n<pre><code>// Better, FooFactory might return a mock object for testing    \nFoo myFoo = FooFactory.getFoo();\n</code></pre>\n\n<p>I keep reading that with CDI I can do:</p>\n\n<pre><code>@Inject\nFoo myFoo;\n</code></pre>\n\n<p>but why is this better than the previous factory based approach? I assume there is some other use case that I'm not aware of but I haven't been able to identify this. </p>\n\n<p>If I've understood the responses below, the concept is that the DI framework acts as a master object factory that is configured centrally. Is this a reasonable interpretation?</p>\n\n<p><strong>Update</strong></p>\n\n<p>I've since started learning Spring and this now makes a lot more sense. The paragraph below is taken from <em>Spring in Practice</em> taking an example of an <code>AccountService</code> class which in turn, uses an instance of <code>AccountDao</code>. I apologise for the long quote but I think it really gets to the heart of why injected resources offer something over standard initialisation. </p>\n\n<p><em>You could have constructed the AccountService using the new keyword, but the creation of service layer objects is rarely so straightforward. They often depend on DAOs, mail senders, SOAP proxies, and whatnot. You could instantiate each of those dependencies programmatically in the AccountService constructor (or through static initialization), but that leads to hard dependencies and cascading changes as they’re swapped out.</em></p>\n\n<p><em>Additionally, you could create dependencies externally and set them on the AccountService via setter methods or constructor arguments. Doing so would eliminate the hard internal dependencies (as long as they were declared in the AccountService by interface), but you’d have duplicated initialization code everywhere. Here’s how you create a DAO and wire it\nup to your AccountService the Spring way:</em></p>\n\n<pre><code>&lt;bean id=\"accountDao\" class=\"com.springinpractice.ch01.dao.jdbc.JdbcAccountDao\"/&gt;\n\n&lt;bean id=\"accountService\"\n    class=\"com.springinpractice.ch01.service.AccountService\"&gt;\n    &lt;property name=\"accountDao\" ref=\"accountDao\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Having configured the beans as above, your program can now request an instance of <code>AccountService</code> from the Spring ApplicationContext and the Spring DI framework will look after instantiated everything that needs instantiating. </p>\n    ","a":"\n<p>The people that wrote CDI gave you one big object factory; they did the work for you, better than you would.  It's XML configuration or annotation driven, so you don't have to embed everything in code.</p>\n\n<p>Dependency injection engines, like Spring, do a lot more than your factory.  It'll take more than one factory class and one line of code to duplicate all that they offer.</p>\n\n<p>Of course you don't have to use it.  You are always free to invent your own wheel.  And you should - <a href=\"http://www.joelonsoftware.com/articles/fog0000000007.html\">if your purpose is to learn how to make wheels</a> or eliminate dependencies.  </p>\n\n<p>But if you want to just develop applications, it's better to use the tools that others provide when they give you an advantage.</p>\n\n<p>The <a href=\"http://martinfowler.com/articles/injection.html\">seminal article</a> on dependency injection was written by Martin Fowler.  I'd recommend reading it; it's still great, eight years later.</p>\n\n<blockquote>\n  <p>\"still not clear on what the more is\"</p>\n</blockquote>\n\n<p>Here are a few advantages:</p>\n\n<ol>\n<li>Looser coupling</li>\n<li>Easier testing</li>\n<li>Better layering</li>\n<li>Interface-based design</li>\n<li>Dynamic proxies (segue to AOP).</li>\n</ol>\n    "},{"t":"How To Inject AuthenticationManager using Java Configuration in a Custom Filter","l":"http://stackoverflow.com/questions/21633555/how-to-inject-authenticationmanager-using-java-configuration-in-a-custom-filter","q":"\n\n<p>I'm using Spring Security 3.2 and Spring 4.0.1</p>\n\n<p>I'm working on converting an xml config into a Java config. When I annotate <code>AuthenticationManager</code> with <code>@Autowired</code> in my Filter, I'm getting an exception </p>\n\n<pre><code>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.security.authentication.AuthenticationManager] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}\n</code></pre>\n\n<p>I've tried injecting <code>AuthenticationManagerFactoryBean</code> but that also fails with a similar exception.</p>\n\n<p>Here is the XML configuration I'm working from</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans ...&gt;\n    &lt;security:authentication-manager id=\"authenticationManager\"&gt;\n        &lt;security:authentication-provider user-service-ref=\"userDao\"&gt;\n            &lt;security:password-encoder ref=\"passwordEncoder\"/&gt;\n        &lt;/security:authentication-provider&gt;\n    &lt;/security:authentication-manager&gt;\n\n    &lt;security:http\n            realm=\"Protected API\"\n            use-expressions=\"true\"\n            auto-config=\"false\"\n            create-session=\"stateless\"\n            entry-point-ref=\"unauthorizedEntryPoint\"\n            authentication-manager-ref=\"authenticationManager\"&gt;\n        &lt;security:access-denied-handler ref=\"accessDeniedHandler\"/&gt;\n        &lt;security:custom-filter ref=\"tokenAuthenticationProcessingFilter\" position=\"FORM_LOGIN_FILTER\"/&gt;\n        &lt;security:custom-filter ref=\"tokenFilter\" position=\"REMEMBER_ME_FILTER\"/&gt;\n        &lt;security:intercept-url method=\"GET\" pattern=\"/rest/news/**\" access=\"hasRole('user')\"/&gt;\n        &lt;security:intercept-url method=\"PUT\" pattern=\"/rest/news/**\" access=\"hasRole('admin')\"/&gt;\n        &lt;security:intercept-url method=\"POST\" pattern=\"/rest/news/**\" access=\"hasRole('admin')\"/&gt;\n        &lt;security:intercept-url method=\"DELETE\" pattern=\"/rest/news/**\" access=\"hasRole('admin')\"/&gt;\n    &lt;/security:http&gt;\n\n    &lt;bean class=\"com.unsubcentral.security.TokenAuthenticationProcessingFilter\"\n          id=\"tokenAuthenticationProcessingFilter\"&gt;\n        &lt;constructor-arg value=\"/rest/user/authenticate\"/&gt;\n        &lt;property name=\"authenticationManager\" ref=\"authenticationManager\"/&gt;\n        &lt;property name=\"authenticationSuccessHandler\" ref=\"authenticationSuccessHandler\"/&gt;\n        &lt;property name=\"authenticationFailureHandler\" ref=\"authenticationFailureHandler\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>Here is the Java Config I'm attempting</p>\n\n<pre><code>@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private AccessDeniedHandler accessDeniedHandler;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n                .userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .sessionManagement()\n                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                    .and()\n                .exceptionHandling()\n                    .authenticationEntryPoint(authenticationEntryPoint)\n                    .accessDeniedHandler(accessDeniedHandler)\n                    .and();\n        //TODO: Custom Filters\n    }\n}\n</code></pre>\n\n<p>And this is the Custom Filter class. The line giving me trouble is the setter for AuthenticationManager</p>\n\n<pre><code>@Component\npublic class TokenAuthenticationProcessingFilter extends AbstractAuthenticationProcessingFilter {\n\n\n    @Autowired\n    public TokenAuthenticationProcessingFilter(@Value(\"/rest/useAuthenticationManagerr/authenticate\") String defaultFilterProcessesUrl) {\n        super(defaultFilterProcessesUrl);\n    }\n\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException, ServletException {\n      ...\n    }\n\n    private String obtainPassword(HttpServletRequest request) {\n        return request.getParameter(\"password\");\n    }\n\n    private String obtainUsername(HttpServletRequest request) {\n        return request.getParameter(\"username\");\n    }\n\n    @Autowired\n    @Override\n    public void setAuthenticationManager(AuthenticationManager authenticationManager) {\n        super.setAuthenticationManager(authenticationManager);\n    }\n\n    @Autowired\n    @Override\n    public void setAuthenticationSuccessHandler(AuthenticationSuccessHandler successHandler) {\n        super.setAuthenticationSuccessHandler(successHandler);\n    }\n\n    @Autowired\n    @Override\n    public void setAuthenticationFailureHandler(AuthenticationFailureHandler failureHandler) {\n        super.setAuthenticationFailureHandler(failureHandler);\n    }\n}\n</code></pre>\n    ","a":"\n<p>Override method <code>authenticationManagerBean</code> in <code>WebSecurityConfigurerAdapter</code> to expose the AuthenticationManager built using <code>configure(AuthenticationManagerBuilder)</code> as a Spring bean:</p>\n\n<p>For example:</p>\n\n<pre><code>   @Bean(name=\"myAuthenticationManager\")\n   @Override\n   public AuthenticationManager authenticationManagerBean() throws Exception {\n       return super.authenticationManagerBean();\n   }\n</code></pre>\n    "},{"t":"AOP use cases?","l":"http://stackoverflow.com/questions/2197051/aop-use-cases","q":"\n\n<p>I'd like to make a picture of what are the possible cases for effective invovement of AOP in application design. All I have met so far is:</p>\n\n<ul>\n<li>logging-related</li>\n<li>security checks</li>\n<li>transaction management</li>\n<li>tweaking of a legacy application</li>\n</ul>\n\n<p>Anything else?</p>\n\n<p>(It doesn't have to be necessarily Spring's proxy based AOP - rather JBoss AOP.)</p>\n\n<p>(<a href=\"http://stackoverflow.com/questions/2155936/how-to-introduce-aop-into-productive-software-development\">Related question</a>)</p>\n    ","a":"\n<p>I can give you two examples where we use it:</p>\n\n<ul>\n<li><p>Automatically registering objects in JMX for remote management.  If a class is annotated with our <code>@AutoRegister</code> annotation, we have an aspect that watches for new instantiations of that class and registers them in JMX automatically.</p></li>\n<li><p>Audit logging (the gold standard AOP use case).  Its a bit coarse but the general approach is to annotate methods that represent some auditable action.  Combined with something like Spring Security, we can get a pretty good idea of:</p>\n\n<ul>\n<li>who the user is</li>\n<li>what method they're invoking</li>\n<li>what data they're providing</li>\n<li>what time the method was invoked</li>\n<li>whether the invocation was successful or not (i.e., if an exception was thrown)</li>\n</ul></li>\n</ul>\n    "},{"t":"Why use Spring ApplicationContext hierarchies?","l":"http://stackoverflow.com/questions/5132604/why-use-spring-applicationcontext-hierarchies","q":"\n\n<p>I am trying to understand ApplicationContext hierarchies in spring. </p>\n\n<p>I learnt the following </p>\n\n<ol>\n<li>An ApplicationContext cannot have\nmore than 1 parent\nApplicationContext.</li>\n<li>When a given\nApplicationContext cannot resolve a\nbean, it will pass on the resolution\nrequest to its parent. </li>\n<li>The parent of\nan ApplicationContext is specified\nin its constructor.</li>\n</ol>\n\n<p>I would like to understand when to use ApplicationContext hierarchies (instead of a single ApplicationContext).</p>\n\n<p>The best I could get from google was <a href=\"http://techo-ecco.com/blog/spring-application-context-hierarchy-and-contextsingletonbeanfactorylocator/\">this</a>. And what I understand is that if an application has a large number of beans defined at the various layers then each layer having its own ApplicationContext would be a benefit. What is not understood is what is the benefit of doing so and how is the benefit achieved?</p>\n\n<p>TIA,\nVijay</p>\n    ","a":"\n<p>The classic use-case for this is when you have multiple Spring <code>DispatcherServlet</code> within a single webapp, with each of these servlets having their own app context, but which need to share beans between them. In this case, you add a 3rd context at the level of the webapp, which is the parent of each of the servlet appcontexts.</p>\n\n<p>You can take this pattern further, for example if you have multiple webapps bundled into a single JavaEE EAR. Here, the EAR can have its own context, which is the parent of the individual webapp contexts, which is the parent of the servlet contexts, and so on. You have this hierarchy of responsibility.</p>\n\n<p>In other situations, the context structure is dictated by some other factor. For example, Spring Security is independent of Spring MVC, and requires its configuration beans to go in the webapp context. If you want to use Spring MVC with it, then the config for that has to go into the servlet context, which has the root webapp context as its parent.</p>\n    "},{"t":"Is this very likely to create a memory leak in Tomcat?","l":"http://stackoverflow.com/questions/5292349/is-this-very-likely-to-create-a-memory-leak-in-tomcat","q":"\n\n<p>I configured tomcat to work with a different external open source.</p>\n\n<p>However, after the tomcat is running for a few minutes I get:</p>\n\n<blockquote>\n  <p>SEVERE: The web application [/MyProject] created a ThreadLocal with\n  key of type [java.lang.ThreadLocal] (value\n  [java.lang.ThreadLocal@1b3f02f]) and a value of type\n  [org.apache.axis.MessageContext] (value\n  [org.apache.axis.MessageContext@5dbd4e]) but failed to remove it when\n  the web application was stopped. This is very likely to create a\n  memory leak.</p>\n</blockquote>\n\n<p>What could cause it?</p>\n\n<p>Where do I have to look? Could it be datapooling on Tomcat?</p>\n\n<p>And what does it mean Threads in Tomcat?</p>\n\n<p><strong>EDITED</strong></p>\n\n<p>Here is my full trace. The application seems to reloads its context while it's still running - and I don't know why!</p>\n\n<pre><code>Mar 13, 2011 10:56:12 PM org.apache.catalina.core.StandardContext reload\nINFO: Reloading this Context has started\nMar 13, 2011 10:56:12 PM org.apache.catalina.core.StandardWrapper unload\nINFO: Waiting for 1 instance(s) to be deallocated\nMar 13, 2011 10:56:13 PM org.apache.catalina.core.StandardWrapper unload\nINFO: Waiting for 1 instance(s) to be deallocated\nMar 13, 2011 10:56:14 PM org.apache.catalina.core.StandardWrapper unload\nINFO: Waiting for 1 instance(s) to be deallocated\nMar 13, 2011 10:56:14 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc\nSEVERE: The web application [/MyProject] registered the JBDC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc\nSEVERE: The web application [/MyProject] registered the JBDC driver [oracle.jdbc.driver.OracleDriver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [NioSocketAcceptor-1] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [NioProcessor-1] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [NioProcessor-4] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [bitronix-disk-force-batcher] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [bitronix-scheduler] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] is still processing a request that has yet to finish. This is very likely to create a memory leak. You can control the time allowed for requests to finish by using the unloadDelay attribute of the standard Context implementation.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [NioProcessor-7] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads\nSEVERE: The web application [/MyProject] appears to have started a thread named [NioProcessor-2] but has failed to stop it. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@1b5a8e1]) and a value of type [org.mvel2.debug.DebuggerContext] (value [org.mvel2.debug.DebuggerContext@16259fd]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [org.apache.axis.utils.XMLUtils.ThreadLocalDocumentBuilder] (value [org.apache.axis.utils.XMLUtils$ThreadLocalDocumentBuilder@84b0b4]) and a value of type [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl] (value [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl@16d2cfa]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [null] (value [com.sun.faces.util.Util$1@16bbac9]) and a value of type [java.util.HashMap] (value [{com.sun.faces.patternCache={ = }}]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@1b3f02f]) and a value of type [org.apache.axis.MessageContext] (value [org.apache.axis.MessageContext@5dbd4e]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [org.apache.axis.utils.XMLUtils.ThreadLocalDocumentBuilder] (value [org.apache.axis.utils.XMLUtils$ThreadLocalDocumentBuilder@84b0b4]) and a value of type [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl] (value [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl@378584]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [org.springframework.core.NamedThreadLocal] (value [Transactional resources]) and a value of type [java.util.HashMap] (value [{org.hibernate.impl.SessionFactoryImpl@ccc27b=org.springframework.orm.hibernate3.SessionHolder@4f6ada}]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nMar 13, 2011 10:56:15 PM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap\nSEVERE: The web application [/MyProject] created a ThreadLocal with key of type [null] (value [com.sun.faces.application.ApplicationAssociate$1@1f01fcf]) and a value of type [com.sun.faces.application.ApplicationAssociate] (value [com.sun.faces.application.ApplicationAssociate@1b85528]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\n2011-03-13 22:57:27,734 ERROR (            ContextLoader.java:220)     - Context initialization failed\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in class path resource [applicationContext-hibernate.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is java.lang.OutOfMemoryError: Java heap space\n    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328)\n    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1325)\n</code></pre>\n    ","a":"\n<p>The message is actually pretty clear: something creates a <code>ThreadLocal</code> with value of type <code>org.apache.axis.MessageContext</code> - this is a great hint. It most likely means that Apache Axis framework forgot/failed to cleanup after itself. The same <a href=\"http://jira.qos.ch/browse/LBCLASSIC-183\">problem</a> occurred for instance in Logback. You shouldn't bother much, but reporting a bug to Axis team might be a good idea.</p>\n\n<p>Tomcat reports this error because the <code>ThreadLocal</code>s are created per HTTP worker threads. Your application is undeployed but HTTP threads remain - and these <code>ThreadLocal</code>s as well. This may lead to memory leaks (<code>org.apache.axis.MessageContext</code> can't be unloaded) and some issues when these threads are reused in the future.</p>\n\n<p>For details see: <a href=\"http://wiki.apache.org/tomcat/MemoryLeakProtection\">http://wiki.apache.org/tomcat/MemoryLeakProtection</a></p>\n    "},{"t":"JPA vs Spring JdbcTemplate","l":"http://stackoverflow.com/questions/4573975/jpa-vs-spring-jdbctemplate","q":"\n\n<p>For a new project is JPA always the recommended tool for handling relational data or are there scenarios where Spring JdbcTemplate is a better choice? Some factors to consider in your response:</p>\n\n<ul>\n<li>new database schema vs pre-existing schema and tables</li>\n<li>level of developer expertise</li>\n<li>ease with which can integrate with a data caching layer</li>\n<li>performance</li>\n<li>any other relevant factors to consider?</li>\n</ul>\n    ","a":"\n<p>Use Spring JdbcTemplate if you don't want to access your database schema via a domain model. Using JdbcTemplate you are using a lower level access, with more flexibility, but probably also more boilerplate.</p>\n\n<p>Spring JdbcTemplate can be more easily used with exotic database schemas and a stored procedure focus. Using JPA you need to make sure that database schema maps correctly to the domain model.</p>\n\n<p>Both technologies need developers knowing relational databases, SQL and transactions. With JPA you get more hidden complexity though.</p>\n\n<p>JPA is to my knowledge more easily pluggable to data caching layers, since the object oriented focus makes cache entry identification, update and invalidation easier.</p>\n\n<p>You can fine tune JdbcTemplate based backends better, but there is for most cases more code involved.</p>\n\n<p>Some other aspect to consider is that although with JPA you get a domain model for your database schema you will often need to use additional DTO classes. Using JdbcTemplate you can directly operate with DTO classes.</p>\n    "},{"t":"Spring 3.1, Hibernate 4, SessionFactory","l":"http://stackoverflow.com/questions/8565051/spring-3-1-hibernate-4-sessionfactory","q":"\n\n<p>This was working:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"sessionFactory\"  \n      class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"&gt;\n...\n</code></pre>\n\n<p>but upgrading to the aforementioned versions breaks it. What is the correct method to create a <a href=\"https://docs.jboss.org/hibernate/orm/4.0/javadocs/org/hibernate/SessionFactory.html\" rel=\"nofollow noreferrer\"><em>SessionFactory</em></a> bean with <strong>Spring 3.1.Release</strong> and <strong>Hibernate 4.0.0.FINAL</strong>?</p>\n\n<p>The error on deploy is:</p>\n\n<blockquote>\n  <p>nested exception is java.lang.NoClassDefFoundError:\n  Lorg/hibernate/cache/CacheProvider;</p>\n</blockquote>\n\n<p><br>\n<strong>EDIT</strong><br>\nHave added my own answer, which fixed it for me.</p>\n    ","a":"\n<p>I think you should use <code>org.springframework.orm.hibernate4.LocalSessionFactoryBean</code> instead of \n<code>org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean</code></p>\n\n<p>From <code>LocalSessionFactoryBean</code> javadoc:</p>\n\n<blockquote>\n  <p>NOTE: This variant of LocalSessionFactoryBean requires Hibernate 4.0 or higher. It is similar in role to the same-named class in the orm.hibernate3 package. However, in practice, it is closer to AnnotationSessionFactoryBean since its core purpose is to bootstrap a SessionFactory from annotation scanning.</p>\n</blockquote>\n    "},{"t":"Spring MVC - Binding a Date Field","l":"http://stackoverflow.com/questions/3705282/spring-mvc-binding-a-date-field","q":"\n\n<p>For request parameters representing string, number, and boolean values, the Spring MVC container can bind them to typed properties out of the box.</p>\n\n<p>How do you have the Spring MVC container bind a request parameter representing a Date?</p>\n\n<p>Speaking of which, how does the Spring MVC determine the type of a given request parameter?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<blockquote>\n  <p>How does the Spring MVC determine the type of a given request parameter ?</p>\n</blockquote>\n\n<p>Spring makes use of <a href=\"http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/web/bind/ServletRequestDataBinder.html\" rel=\"nofollow noreferrer\">ServletRequestDataBinder</a> to bind its values. The process can be described as follows</p>\n\n<pre><code>/**\n  * Bundled Mock request\n  */\nMockHttpServletRequest request = new MockHttpServletRequest();\nrequest.addParameter(\"name\", \"Tom\");\nrequest.addParameter(\"age\", \"25\");\n\n/**\n  * Spring create a new command object before processing the request\n  *\n  * By calling &lt;COMMAND_CLASS&gt;.class.newInstance(); \n  */\nPerson person = new Person();\n</code></pre>\n\n<p>...</p>\n\n<pre><code>/**\n  * And Then with a ServletRequestDataBinder, it bind the submitted values\n  * \n  * It makes use of Java reflection To bind its values\n  */\nServletRequestDataBinder binder = ServletRequestDataBinder(person);\nbinder.bind(request);\n</code></pre>\n\n<p>Behind the scenes, <a href=\"http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/validation/DataBinder.html\" rel=\"nofollow noreferrer\">DataBinder</a> instances internally makes use of a <a href=\"http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/beans/BeanWrapperImpl.html\" rel=\"nofollow noreferrer\">BeanWrapperImpl</a> instance which is responsible for set up the values of the command object. With <a href=\"http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/beans/BeanWrapperImpl.html#getPropertyType(java.lang.String)\" rel=\"nofollow noreferrer\">getPropertyType</a> method, it retrieves the property type</p>\n\n<p>If you see the submitted request above (of course, by using a mock), Spring will call</p>\n\n<pre><code>BeanWrapperImpl beanWrapper = new BeanWrapperImpl(person);\n\nClazz requiredType = beanWrapper.getPropertyType(\"name\");\n</code></pre>\n\n<p>And Then</p>\n\n<pre><code>beanWrapper.convertIfNecessary(\"Tom\", requiredType, methodParam)\n</code></pre>\n\n<blockquote>\n  <p>How does Spring MVC container bind a request parameter representing a Date ?</p>\n</blockquote>\n\n<p>If you have human-friendly representation of data which needs special conversion, you must register a <a href=\"http://download.oracle.com/javase/6/docs/api/java/beans/PropertyEditor.html?is-external=true\" rel=\"nofollow noreferrer\">PropertyEditor</a> For instance, java.util.Date does not know what 13/09/2010 is, so you tell Spring</p>\n\n<blockquote>\n  <p>Spring, convert this human-friendly date by using the following PropertyEditor</p>\n</blockquote>\n\n<pre><code>binder.registerCustomEditor(Date.class, new PropertyEditorSupport() {\n    public void setAsText(String value) {\n        try {\n            setValue(new SimpleDateFormat(\"dd/MM/yyyy\").parse(value));\n        } catch(ParseException e) {\n            setValue(null);\n        }\n    }\n\n    public String getAsText() {\n        return new SimpleDateFormat(\"dd/MM/yyyy\").format((Date) getValue());\n    }        \n\n});\n</code></pre>\n\n<p>When calling convertIfNecessary method, Spring looks for any registered PropertyEditor which takes care of converting the submitted value. To register your PropertyEditor, you can either</p>\n\n<p>Spring 3.0</p>\n\n<pre><code>@InitBinder\npublic void binder(WebDataBinder binder) {\n    // as shown above\n}\n</code></pre>\n\n<p>Old-style Spring 2.x</p>\n\n<pre><code>@Override\npublic void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) {\n    // as shown above\n}\n</code></pre>\n    "},{"t":"count members with jsonpath?","l":"http://stackoverflow.com/questions/13745332/count-members-with-jsonpath","q":"\n\n<p>Is it possible to count the number of members using JsonPath?</p>\n\n<p>Using <a href=\"https://github.com/SpringSource/spring-test-mvc\">spring mvc test</a> I'm testing a controller that generates </p>\n\n<pre><code>{\"foo\": \"oof\", \"bar\": \"rab\"}\n</code></pre>\n\n<p>with</p>\n\n<pre><code>standaloneSetup(new FooController(fooService)).build()\n            .perform(get(\"/something\").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.foo\").value(\"oof\"))\n            .andExpect(jsonPath(\"$.bar\").value(\"rab\"));\n</code></pre>\n\n<p>I'd like to make sure that no other members are present in the generated json. Hopefully by counting them using jsonPath. Is it possible? Alternate solutions are welcome too.</p>\n    ","a":"\n<p>To test size of <strong>array</strong>: <code>jsonPath(\"$\", hasSize(4))</code> </p>\n\n<p>To count members of <strong>object</strong>: <code>jsonPath(\"$.*\", hasSize(4))</code> </p>\n\n<hr>\n\n<p>I.e. to test that API returns an <strong>array</strong> of 4 items:</p>\n\n<p>accepted value: <code>[1,2,3,4]</code></p>\n\n<pre><code>mockMvc.perform(get(API_URL))\n       .andExpect(jsonPath(\"$\", hasSize(4)));\n</code></pre>\n\n<hr>\n\n<p>to test that API returns an <strong>object</strong> containing 2 members:</p>\n\n<p>accepted value: <code>{\"foo\": \"oof\", \"bar\": \"rab\"}</code></p>\n\n<pre><code>mockMvc.perform(get(API_URL))\n       .andExpect(jsonPath(\"$.*\", hasSize(2)));\n</code></pre>\n\n<hr>\n\n<p>I'm using Hamcrest version 1.3 and Spring Test 3.2.5.RELEASE</p>\n\n<p><a href=\"http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/Matchers.html#hasSize(int)\">hasSize(int) javadoc</a></p>\n    "},{"t":"What is the issue with the runtime discovery algorithm of Apache Commons Logging","l":"http://stackoverflow.com/questions/3222895/what-is-the-issue-with-the-runtime-discovery-algorithm-of-apache-commons-logging","q":"\n\n<p>Dave Syer (SpringSource) <a href=\"http://blog.springsource.com/2009/12/04/logging-dependencies-in-spring/\" rel=\"nofollow noreferrer\">writes</a> in his blog:</p>\n\n<blockquote>\n  <p>Unfortunately, the worst thing about commons-logging, and what has made it unpopular with new tools, is also the runtime discovery algorithm.</p>\n</blockquote>\n\n<p>Why? What is the issue with its runtime discovery algorithm? Performance?</p>\n    ","a":"\n<blockquote>\n  <p>Why? What is the issue with its runtime discovery algorithm? Performance?</p>\n</blockquote>\n\n<p>No, it's not performance, it's <a href=\"http://articles.qos.ch/classloader.html\" rel=\"nofollow noreferrer\">classloader pain</a>. JCL discovery process relies on classloader hacks to find the logging framework at runtime but this mechanism leads to numerous problems including unexpected behavior, hard to debug classloading problems resulting in increased complexity. This is nicely captured by Ceki (the author of Log4J, SLF4J and Logback) in <a href=\"http://articles.qos.ch/thinkAgain.html\" rel=\"nofollow noreferrer\">Think again before adopting the commons-logging API</a> (which also mentions memory leaks problems observed with JCL). </p>\n\n<p>And this is why SLF4J, which uses static bindings, has been created. </p>\n\n<p>Ceki being the author of SLF4J, you might think his articles are biased but, believe me, they are not and he is providing lots of references (evidences) to prove his point.</p>\n\n<p>To sum up:</p>\n\n<ul>\n<li>Yes, JCL is known to be broken, better stay away from it.</li>\n<li>If you want to use a logging facade (not all projects need that), use SLF4J.</li>\n<li>SLF4J provides a JCL-to-SLF4J bridge for frameworks still using JCL like Spring :(</li>\n<li>I find Logback, Log4J's successor, to be a superior logging implementation.</li>\n<li>Logback natively implements the SLF4J API. This means that if you are using Logback, you are actually using the SLF4J API.</li>\n</ul>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://radio-weblogs.com/0122027/2003/08/15.html\" rel=\"nofollow noreferrer\">Commons Logging was my fault</a></li>\n<li><a href=\"http://articles.qos.ch/thinkAgain.html\" rel=\"nofollow noreferrer\">Think again before adopting the commons-logging API</a></li>\n<li><a href=\"http://v4forums.wordpress.com/2008/12/27/slf4j-vs-jcl-dynamic-binding-vs-static-binding/\" rel=\"nofollow noreferrer\">SLF4J Vs JCL / Dynamic Binding Vs Static Binding</a></li>\n</ul>\n    "},{"t":"Reuse spring application context across junit test classes","l":"http://stackoverflow.com/questions/8501975/reuse-spring-application-context-across-junit-test-classes","q":"\n\n<p>We've a bunch of JUnit test cases (Integration tests) and they are logically grouped into different test classes.</p>\n\n<p>We are able to load Spring application context once per test class and re-use it for all test cases in a JUnit test class as mentioned in <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/testing.html\">http://static.springsource.org/spring/docs/current/spring-framework-reference/html/testing.html</a></p>\n\n<p>However, we were just wondering if there is a way to load Spring application context only once for a bunch of JUnit test classes.</p>\n\n<p>FWIW, we use Spring 3.0.5, JUnit 4.5 and use Maven to build the project.</p>\n    ","a":"\n<p>Yes, this is perfectly possible. All you have to do is to use the same <code>locations</code> attribute in your test classes:</p>\n\n<pre><code>@ContextConfiguration(locations = \"classpath:test-context.xml\")\n</code></pre>\n\n<p>Spring caches application contexts by <code>locations</code> attribute so if the same <code>locations</code> appears for the second time, Spring uses the same context rather than creating a new one.</p>\n\n<p>I wrote an article about this feature: <a href=\"http://nurkiewicz.blogspot.com/2010/12/speeding-up-spring-integration-tests.html\">Speeding up Spring integration tests</a>. Also it is described in details in Spring documentation: <a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/testing.html#testing-ctx-management\">9.3.2.1 Context management and caching</a>.</p>\n\n<p>This has an interesting implication. Because Spring does not know when JUnit is done, it caches all context <em>forever</em> and closes them using JVM shutdown hook. This behavior (especially when you have a lot of test classes with different <code>locations</code>) might lead to excessive memory usage, memory leaks, etc. Another advantage of caching context.</p>\n    "},{"t":"Spring DAO vs Spring ORM vs Spring JDBC","l":"http://stackoverflow.com/questions/24990400/spring-dao-vs-spring-orm-vs-spring-jdbc","q":"\n\n<p>I was going through data access technologies supported by Spring, and I noticed that it mentions multiple options and I am not sure about the difference among them:</p>\n\n<ul>\n<li>Spring-DAO (<a href=\"http://docs.spring.io/spring/docs/2.0.8/reference/dao.html\">http://docs.spring.io/spring/docs/2.0.8/reference/dao.html</a>)</li>\n<li>Spring-ORM (<a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/orm.html\">http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/orm.html</a>)</li>\n<li>Spring-JDBC (<a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\">http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html</a>)</li>\n</ul>\n\n<p>As I understand, Spring JDBC provides templates for reducing boilerplate code for accessing a database through plain old way - you write your own SQL queries.</p>\n\n<p>Spring-ORM provides simplified templates for accessing databases through ORM technologies, such as Hibernate, My(i)Batis etc.</p>\n\n<p>Spring-DAO as per Spring's website:</p>\n\n<blockquote>\n  <p>The Data Access Object (DAO) support in Spring is aimed at making it\n  easy to work with data access technologies like JDBC, Hibernate or JDO\n  in a consistent way</p>\n</blockquote>\n\n<p>I am a bit clear about ORM vs JDBC as they are aimed at different ways of accessing the DB. But Spring-DAO is just plain confusing! </p>\n\n<p>Could anyone please clarify what exactly are the differences among these three?\nWhich should be preferred in which scenarios?</p>\n\n<p>Also, there is another project <code>Spring-DATA</code> also available (<a href=\"http://projects.spring.io/spring-data/\">http://projects.spring.io/spring-data/</a>) Now, is it kind of a parent project for all data access techs supported by Spring or is it just a new name for Spring-DAO?</p>\n    ","a":"\n<p>Here is an introduction to each mentioned technology.</p>\n\n<p><strong>Spring-DAO</strong></p>\n\n<p>Spring-DAO is not stricto senso a spring module, but rather conventions that should dictate you to write DAO, and to write them well. As such, it does neither provide interfaces nor implementations nor templates to access your data. When writing a DAO, you should annotate them with <code>@Repository</code> so that exceptions linked to the underlying technology (JDBC, Hibernate, JPA, etc.) are consistently translated into the proper <code>DataAccessException</code> subclass.</p>\n\n<p>As an example, suppose you're now using Hibernate, and your service layer catches <code>HibernateException</code> in order to react to it. If you change to JPA, your DAOs interfaces should not change, and the service layer will still compile with blocks that catches <code>HibernateException</code>, but you will never enter these blocks as your DAOs are now throwing JPA <code>PersistenceException</code>. By using <code>@Repository</code> on your DAO, the exceptions linked to the underlying technology are translated to Spring <code>DataAccessException</code>; your service layer catches these exceptions and if you decide to change the persistence technology, the same Spring <code>DataAccessExceptions</code> will still be thrown as spring have translated native exceptions.</p>\n\n<p>Note however that this has limited usage for the following reasons:</p>\n\n<ol>\n<li>Your should usually not catch persistence exceptions, as the provider may have rolled back the transaction (depending on the exact exception subtype), and thus you should not continue the execution with an alternative path.</li>\n<li>The hierarchy of exceptions is usually richer in your provider than what Spring provides, and there's no definitive mapping from one provider to the other. Relying on this is hazardous.\nThis is however a good idea to annotate your DAOs with <code>@Repository</code>, as the beans will be automatically added by the scan procedure. Further, Spring may add other useful features to the annotation.</li>\n</ol>\n\n<p><strong>Spring-JDBC</strong></p>\n\n<p>Spring-JDBC provides the JdbcTemplate class, that removes plumbing code and helps you concentrate on the SQL query and parameters. You just need to configure it with a <code>DataSource</code>, and you can then write code like this:</p>\n\n<pre><code>int nbRows = jdbcTemplate.queryForObject(\"select count(1) from person\", Integer.class);\n\nPerson p = jdbcTemplate.queryForObject(\"select first, last from person where id=?\", \n             rs -&gt; new Person(rs.getString(1), rs.getString(2)), \n             134561351656L);\n</code></pre>\n\n<p>Spring-JDBC also provides a JdbcDaoSupport, that you can extend to develop your DAO. It basically defines 2 properties: a DataSource and a JdbcTemplate that both can be used to implement the DAO methods. It also provides an exceptions translator from SQL exceptions to spring DataAccessExceptions.</p>\n\n<p>If you plan to use plain jdbc, this is the module you will need to use.</p>\n\n<p><strong>Spring-ORM</strong></p>\n\n<p>Spring-ORM is an umbrella module that covers many persistence technologies, namely JPA, JDO, Hibernate and iBatis. For each of these technologies, Spring provides integration classes so that each technology can be used following Spring principles of configuration, and smoothly integrates with Spring transaction management.</p>\n\n<p>For each technology, the configuration basically consists in injecting a <code>DataSource</code> bean into some kind of <code>SessionFactory</code> or <code>EntityManagerFactory</code> etc. bean. For pure JDBC, there's no need for such integration classes (apart from JdbcTemplate), as JDBC only relies on a DataSource.</p>\n\n<p>If you plan to use an ORM like JPA or Hibernate, you will not need spring-jdbc, but only this module.</p>\n\n<p><strong>Spring-Data</strong></p>\n\n<p>Spring-Data is an umbrella project that provides a common API to define how to access data (DAO + annotations) in a more generic way, covering both SQL and NOSQL data sources.</p>\n\n<p>The initial idea is to provide a technology so that the developer writes the interface for a DAO (finder methods) and the entity classes in a technology-agnostic way and, based on configuration only (annotations on DAOs &amp; entities + spring configuration, be it xml- or java-based), decides the implementation technology, be it JPA (SQL) or redis, hadoop, etc. (NOSQL). </p>\n\n<p>If you follow the naming conventions defined by spring for the finder method names, you don't even need to provide the query strings corresponding to finder methods for the most simple cases. For other situations, you have to provide the query string inside annotations on the finder methods.</p>\n\n<p>When the application context is loaded, spring provides proxies for the DAO interfaces, that contain all the boilerplate code related to the data access technology, and invokes the configured queries.</p>\n\n<p>Spring-Data concentrates on non-SQL technologies, but still provides a module for JPA (the only SQL technology).</p>\n\n<p><strong>What's next</strong></p>\n\n<p>Knowing all this, you have now to decide what to pick. The good news here is that you don't need to make a definitive final choice for the technology. This is actually where Spring power resides : as a developer, you concentrate on the business when you write code, and if you do it well, changing the underlying technology is an implementation or configuration detail.</p>\n\n<ol>\n<li>Define a data model with POJO classes for the entities, and get/set methods to represent the entity attributes and the relationships to other entities. You will certainly need to annotate the entity classes and fields based on the technology, but for now, POJOs are enough to start with. Just concentrate on the business requirements for now.</li>\n<li>Define interfaces for your DAOs. 1 DAO covers exactly 1 entity, but you will certainly not need a DAO for each of them, as you should be able to load additional entities by navigating the relationships. Define the finder methods following strict naming conventions.</li>\n<li>Based on this, someone else can start working on the services layer, with mocks for your DAOs.</li>\n<li>You learn the different persistence technologies (sql, no-sql) to find the best fit for your needs, and choose one of them. Based on this, you annotate the entities and implement the DAOs (or let spring implement them for you if you choose to use spring-data).</li>\n<li>If the business requirements evolve and your data access technology is not sufficient to support it (say, you started with JDBC and a few entities, but now need a richer data model and JPA is a better choice), you will have to change the implementation of your DAOs, add a few annotations on your entities and change the spring configuration (add an EntityManagerFactory definition). The rest of your business code should not see other impacts from your change.</li>\n</ol>\n\n<p><strong>Note : Transaction Management</strong></p>\n\n<p>Spring provides an API for transaction management. If you plan to use spring for the data access, you should also use spring for transaction management, as they integrate together really well. For each data access technology supported by spring, there is a matching transaction manager for local transactions, or you can choose JTA if you need distributed transactions. All of them implement the same API, so that (once again) the technology choice is just a matter a configuration that can be changed without further impact on the business code.</p>\n\n<p><strong>Note : Spring documentation</strong></p>\n\n<p>The links to Spring documentation that you mentioned are rather old. Here is the documentation of the latest release (4.1.6, covering all topics) :</p>\n\n<ul>\n<li>Single html page: <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/\">http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/</a></li>\n<li>PDF: <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/spring-framework-reference.pdf\">http://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/spring-framework-reference.pdf</a></li>\n</ul>\n\n<p>Spring-data is not part of the Spring framework. There is a common module that you should first read to get used to the principles. Documentation can be found here:</p>\n\n<ul>\n<li>Single html page: <a href=\"http://docs.spring.io/spring-data/data-commons/docs/1.9.2.RELEASE/reference/html/\">http://docs.spring.io/spring-data/data-commons/docs/1.9.2.RELEASE/reference/html/</a></li>\n<li>PDF: <a href=\"http://docs.spring.io/spring-data/data-commons/docs/1.9.2.RELEASE/reference/pdf/spring-data-commons-reference.pdf\">http://docs.spring.io/spring-data/data-commons/docs/1.9.2.RELEASE/reference/pdf/spring-data-commons-reference.pdf</a></li>\n</ul>\n    "},{"t":"Spring3.2 and jboss as 7","l":"http://stackoverflow.com/questions/13786685/spring3-2-and-jboss-as-7","q":"\n\n<p>How to resolve this warn? If i use Spring 3.2 i am see this warn: </p>\n\n<blockquote>\n  <p>14:24:19,014 WARN  [org.jboss.as.ee] (MSC service thread 1-10) JBAS011006: Not installing optional component org.springframework.web.context.request.async.StandardServletAsyncWebRequest due to exception: org.jboss.as.server.deployment.DeploymentUnitProcessingException: JBAS011054: Could not find default constructor for class org.springframework.web.context.request.async.StandardServletAsyncWebRequest</p>\n</blockquote>\n    ","a":"\n<p>Apparently this is \"normal\", everything should still work. Likely there's an (anonymous) inner class in <code>StandardServletAsyncWebRequest</code>.</p>\n\n<p>See also <a href=\"https://community.jboss.org/message/760558#760558\">Applicaiton is deployed in JBoss7.0.2 Final (Arc ) but failed to in 7.1.1 Final (Brontes)</a> and <a href=\"https://community.jboss.org/message/739794\">metadata-complete=\"true\" not respected</a>. Basically it's just a warning, everything is fine.</p>\n    "},{"t":"Support for X509PKIPathv1 in xws-security for Spring-WS","l":"http://stackoverflow.com/questions/12596543/support-for-x509pkipathv1-in-xws-security-for-spring-ws","q":"\n\n<p>I'm trying to send a request to an existing webservice. This webservice is not governed by me. The security policy of this webservice requires me to send my complete certificate chain in my SOAP request. My certificate chain contains 3 certificates. There are no issues with the setup of the certificate chain, as I'm able to test it's validity (and have done so).</p>\n\n<p>The security configuration for this setup (= sending the complete certificate chain in the request), is:</p>\n\n<pre><code>&lt;xwss:Sign id=\"signature\"&gt;\n   &lt;xwss:X509Token \n        certificateAlias=\"alias\" \n        keyReferenceType=\"Direct\"\n        valueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509PKIPathv1\" /&gt;\n&lt;/xwss:Sign&gt;\n</code></pre>\n\n<p>I'm trying to achieve this through <a href=\"http://static.springsource.org/spring-ws/sites/2.0/\">Spring-WS</a>. Spring-WS uses spring-ws-security for security. Spring-ws-security delegates to xws-security. </p>\n\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.ws&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-ws-security&lt;/artifactId&gt;\n        &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.apache.ws.security&lt;/groupId&gt;\n                &lt;artifactId&gt;wss4j&lt;/artifactId&gt;\n            &lt;/exclusion&gt;            \n            &lt;exclusion&gt;\n                &lt;groupId&gt;com.sun.xml.wsit&lt;/groupId&gt;\n                &lt;artifactId&gt;xws-security&lt;/artifactId&gt;\n            &lt;/exclusion&gt;            \n        &lt;/exclusions&gt;\n     &lt;/dependency&gt;\n</code></pre>\n\n<p>Xws-security comes in 2 flavors:</p>\n\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;com.sun.xml.wsit&lt;/groupId&gt;\n        &lt;artifactId&gt;xws-security&lt;/artifactId&gt;\n        &lt;version&gt;1.3.1&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;com.sun.xml.wss&lt;/groupId&gt;\n        &lt;artifactId&gt;xws-security&lt;/artifactId&gt;\n        &lt;version&gt;3.0&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n\n<p>The first one is used by Spring WS Security. The second is legacy.</p>\n\n<p>Applying my XWSS configuration in xws-security is done in a class called BinarySecurityToken. BinarySecurityToken has a field called</p>\n\n<pre><code>valueType\n</code></pre>\n\n<p>The JavaDoc of valueType says it has support for X509PKIPathv1 (among others). However, it does not, as stated by this setter:</p>\n\n<pre><code>    protected void setValueType(String valueType) {\n    if (!(MessageConstants.X509v3_NS.equals(valueType)||MessageConstants.X509v1_NS.equals(valueType))) { \n        log.log(Level.SEVERE,\"WSS0342.valtype.invalid\");\n        throw new RuntimeException(\"Unsupported value type: \" + valueType);\n    }\n    this.valueType = valueType;\n}\n</code></pre>\n\n<p>The class MessageConstants does not (even) have a static for X509PKIPathv1. When I run my code, I get the expected result:</p>\n\n<pre><code>Unsupported value type: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509PKIPathv1\n</code></pre>\n\n<p>I was able to look at the source code of the legacy <code>com.sun.xml.wss.xws-security:3.0</code>. Despite my efforts, I have not found the source code of <code>com.sun.xml.wsit.xws-security-1.3.1</code>. However I believe the code is the same. I tried both libraries and both give me the same exception. I tried it, using the default spring-ws-security and using explicit dependency declarations to both libraries (one at a time).</p>\n\n<p>My questions: </p>\n\n<ol>\n<li>Has anyone been able to use xws-security for generating an X509 signature with a valueType of X509PKIPathv1 and a keyReferenceType that is Direct?</li>\n<li>Do other xws-security implementations exist that offer this? Or should I look at a completely different approach like Wss4j?</li>\n</ol>\n\n<p>I have considered re-writing BinarySecurityToken, but that would probably also imply rewriting the X509 signing of SignatureProcessor in DSIG.</p>\n    ","a":"\n<blockquote>\n  <p>The valueType can be #X509v3, #X509PKIPathv1</p>\n</blockquote>\n\n<p>That is found here\n<a href=\"http://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/XWS-SecurityIntro4.html\" rel=\"nofollow\">XWS-SecurityIntro4</a>\nHave you tried those values specifically instead of a URL?</p>\n    "},{"t":"how to conditionally show jsp content to logged in users with Spring security","l":"http://stackoverflow.com/questions/1638170/how-to-conditionally-show-jsp-content-to-logged-in-users-with-spring-security","q":"\n\n<p>I want to show content to any user that is logged in and to hide if they are not logged in. I'm using jsp's and spring security. </p>\n\n<p>Obviously a home grown solution is easily done. But what's the cleanest standard way of achieving this? </p>\n\n<p>Spring security tags don't seem to have nice way that will allow for the addition of new roles in the future.</p>\n    ","a":"\n<p>I've had success with the following:</p>\n\n<pre><code>    &lt;sec:authorize ifAnyGranted=\"ROLE_ANONYMOUS\"&gt;\n        &lt;td&gt;&lt;a href=\"&lt;c:url value=\"/login.htm\"/&gt;\"&gt;Login&lt;/a&gt;&lt;/td&gt;\n    &lt;/sec:authorize&gt;\n    &lt;sec:authorize ifNotGranted=\"ROLE_ANONYMOUS\"&gt;\n        &lt;td&gt;&lt;a href=\"&lt;c:url value=\"/j_spring_security_logout\"/&gt;\"&gt;Logout&lt;/a&gt;&lt;/td&gt;\n    &lt;/sec:authorize&gt;\n</code></pre>\n\n<p>New roles can be added without affecting the logic here.</p>\n\n<hr>\n\n<p>To bring this answer up to date with Spring Security 3, using the <code>isAnonymous()</code> and <code>isAuthenticated()</code> expressions have worked well in combination thus far to achieve the same thing. Here's an example:</p>\n\n<pre><code>&lt;sec:authorize access=\"isAnonymous()\"&gt;\n    &lt;form method=\"POST\" action=\"&lt;c:url value='j_spring_security_check'/&gt;\"&gt;\n        Username: &lt;input name=\"j_username\" type=\"text\" value=\"${SPRING_SECURITY_LAST_USERNAME}\" /&gt; \n        Password: &lt;input name=\"j_password\" type=\"password\" /&gt; \n        &lt;input type=\"submit\" value=\"Sign in\" /&gt;\n    &lt;/form&gt;\n&lt;/sec:authorize&gt;\n&lt;sec:authorize access=\"isAuthenticated()\"&gt;\n    &lt;a href=\"&lt;c:url value=\"/j_spring_security_logout\" /&gt;\"&gt;Logout&lt;/a&gt;\n&lt;/sec:authorize&gt;\n</code></pre>\n    "},{"t":"SpringMVC RequestMapping for GET parameters","l":"http://stackoverflow.com/questions/13213061/springmvc-requestmapping-for-get-parameters","q":"\n\n<p>How to make the RequestMapping to handle GET parameters in the url?\nFor example i have this url</p>\n\n<pre><code>http://localhost:8080/userGrid?_search=false&amp;nd=1351972571018&amp;rows=10&amp;page=1&amp;sidx=id&amp;sord=desc\n</code></pre>\n\n<p>(from jqGrid)</p>\n\n<p>how should my RequestMapping look like? I want to get the parameters using HttpReqest</p>\n\n<p>Tried this:</p>\n\n<pre><code>@RequestMapping(\"/userGrid\")\n    public @ResponseBody GridModel getUsersForGrid(HttpServletRequest request)\n</code></pre>\n\n<p>but it doesn't work.</p>\n    ","a":"\n<p>Use <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html\">@RequestParam</a> in your method arguments so Spring can bind them, also use the <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html#params%28%29\">@RequestMapping.params</a> array to narrow the method that will be used by spring. Sample code:</p>\n\n<pre><code>@RequestMapping(\"/userGrid\", \nparams = {\"_search\", \"nd\", \"rows\", \"page\", \"sidx\", \"sort\"})\npublic @ResponseBody GridModel getUsersForGrid(\n@RequestParam(value = \"_search\") String search, \n@RequestParam(value = \"nd\") int nd, \n@RequestParam(value = \"rows\") int rows, \n@RequestParam(value = \"page\") int page, \n@RequestParam(value = \"sidx\") int sidx, \n@RequestParam(value = \"sort\") Sort sort) {\n// Stuff here\n}\n</code></pre>\n\n<p>This way Spring will only execute this method if ALL PARAMETERS are present saving you from null checking and related stuff.</p>\n    "},{"t":"How to add a hook to the application context initialization event?","l":"http://stackoverflow.com/questions/8686507/how-to-add-a-hook-to-the-application-context-initialization-event","q":"\n\n<p>For a regular Servlet, I guess you could declare a <a href=\"http://docs.oracle.com/javaee/5/api/javax/servlet/ServletContextListener.html\">context listener</a>, but for Spring MVC would Spring make this any easier?</p>\n\n<p>Furthermore, if I define a context listener and then would need to access the beans defined in my <code>servlet.xml</code> or <code>applicationContext.xml</code>, how would I get access to them?</p>\n    ","a":"\n<p><a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#context-functionality-events\"><strong>Spring has some standard events which you can handle.</strong></a> </p>\n\n<p>To do that, you must create and register a bean that implements the <code>ApplicationListener</code> interface, something like this:</p>\n\n<pre><code>package test.pack.age;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.event.ContextRefreshedEvent;\n\npublic class ApplicationListenerBean implements ApplicationListener {\n\n    @Override\n    public void onApplicationEvent(ApplicationEvent event) {\n        if (event instanceof ContextRefreshedEvent) {\n            ApplicationContext applicationContext = ((ContextRefreshedEvent) event).getApplicationContext();\n            // now you can do applicationContext.getBean(...)\n            // ...\n        }\n    }\n}\n</code></pre>\n\n<p>You then register this bean within your <code>servlet.xml</code> or <code>applicationContext.xml</code> file:</p>\n\n<pre><code>&lt;bean id=\"eventListenerBean\" class=\"test.pack.age.ApplicationListenerBean\" /&gt;\n</code></pre>\n\n<p>and Spring will notify it when the application context is initialized.</p>\n\n<p>In Spring 3 (if you are using this version), the <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/ApplicationListener.html\"><code>ApplicationListener</code> class is generic</a> and you can declare the event type that you are interested in, and the event will be filtered accordingly. You can simplify a bit your bean code like this:</p>\n\n<pre><code>public class ApplicationListenerBean implements ApplicationListener&lt;ContextRefreshedEvent&gt; {\n\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        ApplicationContext applicationContext = event.getApplicationContext();\n        // now you can do applicationContext.getBean(...)\n        // ...\n    }\n}\n</code></pre>\n    "},{"t":"Any open source Spring sample project that's bigger than PetClinic? [closed]","l":"http://stackoverflow.com/questions/2604655/any-open-source-spring-sample-project-thats-bigger-than-petclinic","q":"\n\n<p>I've finished reading the spring doc and the PetClinic sample project. Just like to see some bigger real world project that's done with Spring. Thanks.</p>\n    ","a":"\n<p><a href=\"http://www.springsource.org/projects\" rel=\"nofollow noreferrer\">Spring source Projects</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/powerstone/\" rel=\"nofollow noreferrer\">Powerstone</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/tudu/\" rel=\"nofollow noreferrer\">Tudu Lists</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/alfresco/\" rel=\"nofollow noreferrer\">Alfresco Content Management</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/springside/\" rel=\"nofollow noreferrer\">SpringSide</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/plazma/\" rel=\"nofollow noreferrer\">Plazma</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/agileexpress/\" rel=\"nofollow noreferrer\">agileexpress</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/zksample2/\" rel=\"nofollow noreferrer\">Zksample2</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/spring-rich-c/\" rel=\"nofollow noreferrer\">Spring Rich Client</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/broadleaf/\" rel=\"nofollow noreferrer\">Broadleaf Commerce</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/theopenerp/\" rel=\"nofollow noreferrer\">OpenERP</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/hispacta/\" rel=\"nofollow noreferrer\">HISPACTA</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/cw-search/\" rel=\"nofollow noreferrer\">Luigi Open Search Engine</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/josso/\" rel=\"nofollow noreferrer\">JOSSO</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/hse/\" rel=\"nofollow noreferrer\">HSE</a></p>\n\n<p><a href=\"http://sourceforge.net/projects/jsbp/\" rel=\"nofollow noreferrer\">Java Small Business Platform</a></p>\n\n<p><a href=\"http://code.google.com/p/jrecruiter/\" rel=\"nofollow noreferrer\">jrecruiter</a></p>\n    "},{"t":"The matching wildcard is strict, but no declaration can be found for element 'context:component-scan","l":"http://stackoverflow.com/questions/13589470/the-matching-wildcard-is-strict-but-no-declaration-can-be-found-for-element-co","q":"\n\n<p>I am getting the following errors while trying my first spring project:</p>\n\n<pre><code>Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'context:component-scan\n</code></pre>\n\n<p>Here is the <code>applicationContext.xml</code>:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"&gt;\n\n        &lt;context:component-scan base-package=\"com.xyz\" /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>What is causing the error?</p>\n    ","a":"\n<p>You have not specified the schema location of the context namespace, that is the reason for this specific error:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;beans .....\n  xmlns:context=\"http://www.springframework.org/schema/context\"\n  xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n    http://www.springframework.org/schema/aop\n    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n    http://www.springframework.org/schema/tx\n    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n</code></pre>\n    "},{"t":"When use ResponseEntity<T> and @RestController for Spring RESTful applications","l":"http://stackoverflow.com/questions/26549379/when-use-responseentityt-and-restcontroller-for-spring-restful-applications","q":"\n\n<p>I am working with Spring Framework 4.0.7, together with MVC and Rest</p>\n\n<p>I can work in peace with:</p>\n\n<ul>\n<li><code>@Controller</code> </li>\n<li><code>ResponseEntity&lt;T&gt;</code></li>\n</ul>\n\n<p>For example:</p>\n\n<pre><code>@Controller\n@RequestMapping(\"/person\")\n@Profile(\"responseentity\")\npublic class PersonRestResponseEntityController {\n</code></pre>\n\n<p>With the method (just to create)</p>\n\n<pre><code>@RequestMapping(value=\"/\", method=RequestMethod.POST)\npublic ResponseEntity&lt;Void&gt; createPerson(@RequestBody Person person, UriComponentsBuilder ucb){\n    logger.info(\"PersonRestResponseEntityController  - createPerson\");\n    if(person==null)\n        logger.error(\"person is null!!!\");\n    else\n        logger.info(\"{}\", person.toString());\n\n    personMapRepository.savePerson(person);\n    HttpHeaders headers = new HttpHeaders();\n    headers.add(\"1\", \"uno\");\n    //http://localhost:8080/spring-utility/person/1\n    headers.setLocation(ucb.path(\"/person/{id}\").buildAndExpand(person.getId()).toUri());\n\n    return new ResponseEntity&lt;&gt;(headers, HttpStatus.CREATED);\n}\n</code></pre>\n\n<p>to return something</p>\n\n<pre><code>@RequestMapping(value=\"/{id}\", method=RequestMethod.GET)\npublic ResponseEntity&lt;Person&gt; getPerson(@PathVariable Integer id){\n    logger.info(\"PersonRestResponseEntityController  - getPerson - id: {}\", id);\n    Person person = personMapRepository.findPerson(id);\n    return new ResponseEntity&lt;&gt;(person, HttpStatus.FOUND);\n}\n</code></pre>\n\n<p>Works fine</p>\n\n<p><strong>I can do the same with</strong>: </p>\n\n<ul>\n<li><code>@RestController</code> (I know it is the same than <code>@Controller</code> + <code>@ResponseBody</code>) </li>\n<li><code>@ResponseStatus</code></li>\n</ul>\n\n<p>For example:</p>\n\n<pre><code>@RestController\n@RequestMapping(\"/person\")\n@Profile(\"restcontroller\")\npublic class PersonRestController {\n</code></pre>\n\n<p>With the method (just to create)</p>\n\n<pre><code>@RequestMapping(value=\"/\", method=RequestMethod.POST)\n@ResponseStatus(HttpStatus.CREATED)\npublic void createPerson(@RequestBody Person person, HttpServletRequest request, HttpServletResponse response){\n    logger.info(\"PersonRestController  - createPerson\");\n    if(person==null)\n        logger.error(\"person is null!!!\");\n    else\n        logger.info(\"{}\", person.toString());\n\n    personMapRepository.savePerson(person);\n    response.setHeader(\"1\", \"uno\");\n\n    //http://localhost:8080/spring-utility/person/1\n    response.setHeader(\"Location\", request.getRequestURL().append(person.getId()).toString());\n}\n</code></pre>\n\n<p>to return something</p>\n\n<pre><code>@RequestMapping(value=\"/{id}\", method=RequestMethod.GET)\n@ResponseStatus(HttpStatus.FOUND)\npublic Person getPerson(@PathVariable Integer id){\n    logger.info(\"PersonRestController  - getPerson - id: {}\", id);\n    Person person = personMapRepository.findPerson(id);\n    return person;\n}\n</code></pre>\n\n<p>My questions are: </p>\n\n<ol>\n<li>when <em>for a solid reason</em> or <em>specific scenario</em> one option must be used mandatorily over the other</li>\n<li>If (1) does not matter, what approach is suggested and why.</li>\n</ol>\n    ","a":"\n<p><code>ResponseEntity</code> is meant to represent the entire HTTP response. You can control anything that goes into it: status code, headers, and body.</p>\n\n<p><code>@ResponseBody</code> is a marker for the HTTP response body and <code>@ResponseStatus</code> declares the status code of the HTTP response.</p>\n\n<p><code>@ResponseStatus</code> isn't very flexible. It marks the entire method so you have to be sure that your handler method will always behave the same way. And you still can't set the headers. You'd need the <code>HttpServletResponse</code> or a <code>HttpHeaders</code> parameter. </p>\n\n<p>Basically, <code>ResponseEntity</code> lets you do more.</p>\n    "},{"t":"Launching Spring application Address already in use","l":"http://stackoverflow.com/questions/20735205/launching-spring-application-address-already-in-use","q":"\n\n<p>I have this error launching my spring application:</p>\n\n<pre><code>java -jar target/gs-serving-web-content-0.1.0.jar\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::             (v0.5.0.M6)\n\n2013-12-23 00:23:09.466  INFO 19252 --- [           main] hello.Application                        : Starting Application on mbp-de-antoine.home with PID 19252 (/Users/antoine/Documents/workspace-sts-3.4.0.RELEASE/springapp/target/gs-serving-web-content-0.1.0.jar started by antoine)\n2013-12-23 00:23:09.511  INFO 19252 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@24024c39: startup date [Mon Dec 23 00:23:09 CET 2013]; root of context hierarchy\n2013-12-23 00:23:10.910  INFO 19252 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat\n2013-12-23 00:23:10.910  INFO 19252 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.42\n2013-12-23 00:23:11.045  INFO 19252 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2013-12-23 00:23:11.046  INFO 19252 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1537 ms\n2013-12-23 00:23:11.274  INFO 19252 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'\n2013-12-23 00:23:11.274  INFO 19252 --- [ost-startStop-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started\n2013-12-23 00:23:11.409  INFO 19252 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]\n2013-12-23 00:23:11.634  INFO 19252 --- [ost-startStop-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"{[/greeting],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}\" onto public java.lang.String hello.GreetingController.greeting(java.lang.String,org.springframework.ui.Model)\n2013-12-23 00:23:11.717  INFO 19252 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]\n2013-12-23 00:23:11.717  INFO 19252 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]\n2013-12-23 00:23:12.406  INFO 19252 --- [ost-startStop-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 1132 ms\n2013-12-23 00:23:12.417 ERROR 19252 --- [           main] o.a.coyote.http11.Http11NioProtocol      : Failed to start end point associated with ProtocolHandler [\"http-nio-8080\"]\n\njava.net.BindException: Address already in use\n    at sun.nio.ch.Net.bind0(Native Method)\n    at sun.nio.ch.Net.bind(Net.java:444)\n    at sun.nio.ch.Net.bind(Net.java:436)\n    at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)\n    at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)\n    at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:473)\n    at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:617)\n    at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:444)\n    at org.apache.catalina.connector.Connector.startInternal(Connector.java:1010)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.core.StandardService.startInternal(StandardService.java:459)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:732)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.startup.Tomcat.start(Tomcat.java:335)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:58)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.&lt;init&gt;(TomcatEmbeddedServletContainer.java:53)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getTomcatEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:259)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:140)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:158)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:476)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:552)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:293)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:749)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:738)\n    at hello.Application.main(Application.java:12)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)\n    at java.lang.Thread.run(Thread.java:744)\n\n2013-12-23 00:23:12.419 ERROR 19252 --- [           main] o.apache.catalina.core.StandardService   : Failed to start connector [Connector[org.apache.coyote.http11.Http11NioProtocol-8080]]\n\norg.apache.catalina.LifecycleException: Failed to start component [Connector[org.apache.coyote.http11.Http11NioProtocol-8080]]\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)\n    at org.apache.catalina.core.StandardService.startInternal(StandardService.java:459)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:732)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.startup.Tomcat.start(Tomcat.java:335)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:58)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.&lt;init&gt;(TomcatEmbeddedServletContainer.java:53)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getTomcatEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:259)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:140)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:158)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:476)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:552)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:293)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:749)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:738)\n    at hello.Application.main(Application.java:12)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)\n    at java.lang.Thread.run(Thread.java:744)\nCaused by: org.apache.catalina.LifecycleException: service.getName(): \"Tomcat\";  Protocol handler start failed\n    at org.apache.catalina.connector.Connector.startInternal(Connector.java:1017)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    ... 24 common frames omitted\nCaused by: java.net.BindException: Address already in use\n    at sun.nio.ch.Net.bind0(Native Method)\n    at sun.nio.ch.Net.bind(Net.java:444)\n    at sun.nio.ch.Net.bind(Net.java:436)\n    at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)\n    at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)\n    at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:473)\n    at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:617)\n    at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:444)\n    at org.apache.catalina.connector.Connector.startInternal(Connector.java:1010)\n    ... 25 common frames omitted\n\n2013-12-23 00:23:12.420  INFO 19252 --- [           main] o.apache.catalina.core.StandardService   : Stopping service Tomcat\n2013-12-23 00:23:12.430  INFO 19252 --- [           main] nitializer$AutoConfigurationReportLogger : \n\n\n=========================\nAUTO-CONFIGURATION REPORT\n=========================\n\n\nPositive matches:\n-----------------\n\n   MessageSourceAutoConfiguration\n      - @ConditionalOnMissingBean (types: org.springframework.context.MessageSource; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer\n      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) found no beans (OnBeanCondition)\n\n   ThymeleafAutoConfiguration\n      - @ConditionalOnClass classes found: org.thymeleaf.spring3.SpringTemplateEngine (OnClassCondition)\n      - @ConditionalOnClass classes found: org.thymeleaf.spring3.SpringTemplateEngine (OnClassCondition)\n\n   ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration\n      - @ConditionalOnMissingBean (names: defaultTemplateResolver; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   ThymeleafAutoConfiguration.ThymeleafDefaultConfiguration\n      - @ConditionalOnMissingBean (types: org.thymeleaf.spring3.SpringTemplateEngine; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   ThymeleafAutoConfiguration.ThymeleafViewResolverConfiguration\n      - @ConditionalOnClass classes found: javax.servlet.Servlet (OnClassCondition)\n      - @ConditionalOnClass classes found: javax.servlet.Servlet (OnClassCondition)\n\n   ThymeleafAutoConfiguration.ThymeleafViewResolverConfiguration#thymeleafViewResolver\n      - @ConditionalOnMissingBean (names: thymeleafViewResolver; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   DispatcherServletAutoConfiguration\n      - found web application StandardServletEnvironment (OnWebApplicationCondition)\n      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet (OnClassCondition)\n      - found web application StandardServletEnvironment (OnWebApplicationCondition)\n      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet (OnClassCondition)\n      - @ConditionalOnBean (types: org.springframework.boot.context.embedded.EmbeddedServletContainerFactory; SearchStrategy: all) found the following [tomcatEmbeddedServletContainerFactory] (OnBeanCondition)\n\n   DispatcherServletAutoConfiguration#dispatcherServlet\n      - no DispatcherServlet found (DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition)\n\n   EmbeddedServletContainerAutoConfiguration\n      - found web application StandardServletEnvironment (OnWebApplicationCondition)\n      - found web application StandardServletEnvironment (OnWebApplicationCondition)\n\n   EmbeddedServletContainerAutoConfiguration.EmbeddedTomcat\n      - @ConditionalOnClass classes found: javax.servlet.Servlet,org.apache.catalina.startup.Tomcat (OnClassCondition)\n      - @ConditionalOnClass classes found: javax.servlet.Servlet,org.apache.catalina.startup.Tomcat (OnClassCondition)\n      - @ConditionalOnMissingBean (types: org.springframework.boot.context.embedded.EmbeddedServletContainerFactory; SearchStrategy: current) found no beans (OnBeanCondition)\n\n   ServerPropertiesAutoConfiguration#serverProperties\n      - @ConditionalOnMissingBean (types: org.springframework.boot.context.embedded.properties.ServerProperties; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   WebMvcAutoConfiguration\n      - found web application StandardServletEnvironment (OnWebApplicationCondition)\n      - @ConditionalOnClass classes found: javax.servlet.Servlet,org.springframework.web.servlet.DispatcherServlet,org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter (OnClassCondition)\n      - found web application StandardServletEnvironment (OnWebApplicationCondition)\n      - @ConditionalOnClass classes found: javax.servlet.Servlet,org.springframework.web.servlet.DispatcherServlet,org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter (OnClassCondition)\n      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   WebMvcAutoConfiguration#hiddenHttpMethodFilter\n      - @ConditionalOnMissingBean (types: org.springframework.web.filter.HiddenHttpMethodFilter; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver\n      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) found no beans (OnBeanCondition)\n\n\nNegative matches:\n-----------------\n\n   RabbitAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.amqp.rabbit.core.RabbitTemplate,com.rabbitmq.client.Channel (OnClassCondition)\n\n   AopAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.aspectj.lang.annotation.Aspect,org.aspectj.lang.reflect.Advice (OnClassCondition)\n\n   BatchAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.batch.core.launch.JobLauncher (OnClassCondition)\n\n   JpaRepositoriesAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.data.jpa.repository.JpaRepository (OnClassCondition)\n\n   MongoRepositoriesAutoConfiguration\n      - required @ConditionalOnClass classes not found: com.mongodb.Mongo,org.springframework.data.mongodb.repository.MongoRepository (OnClassCondition)\n\n   DataSourceAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType (OnClassCondition)\n\n   DataSourceTransactionManagerAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.jdbc.core.JdbcTemplate,org.springframework.transaction.PlatformTransactionManager (OnClassCondition)\n\n   JmsTemplateAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.jms.core.JmsTemplate,javax.jms.ConnectionFactory (OnClassCondition)\n\n   DeviceResolverAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.mobile.device.DeviceResolverHandlerInterceptor,org.springframework.mobile.device.DeviceHandlerMethodArgumentResolver (OnClassCondition)\n\n   HibernateJpaAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean,org.springframework.transaction.annotation.EnableTransactionManagement,javax.persistence.EntityManager,org.hibernate.ejb.HibernateEntityManager (OnClassCondition)\n\n   ReactorAutoConfiguration\n      - required @ConditionalOnClass classes not found: reactor.spring.context.config.EnableReactor (OnClassCondition)\n\n   ThymeleafAutoConfiguration.ThymeleafSecurityDialectConfiguration\n      - required @ConditionalOnClass classes not found: org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect (OnClassCondition)\n\n   ThymeleafAutoConfiguration.ThymeleafWebLayoutConfiguration\n      - required @ConditionalOnClass classes not found: nz.net.ultraq.thymeleaf.LayoutDialect (OnClassCondition)\n\n   EmbeddedServletContainerAutoConfiguration.EmbeddedJetty\n      - required @ConditionalOnClass classes not found: org.eclipse.jetty.server.Server,org.eclipse.jetty.util.Loader (OnClassCondition)\n\n   MultipartAutoConfiguration\n      - @ConditionalOnClass classes found: javax.servlet.Servlet,org.springframework.web.multipart.support.StandardServletMultipartResolver (OnClassCondition)\n      - @ConditionalOnClass classes found: javax.servlet.Servlet,org.springframework.web.multipart.support.StandardServletMultipartResolver (OnClassCondition)\n      - @ConditionalOnBean (types: javax.servlet.MultipartConfigElement; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver\n      - @ConditionalOnBean (types: org.springframework.web.servlet.View; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver\n      - @ConditionalOnBean (types: org.springframework.web.servlet.View; SearchStrategy: all) found no beans (OnBeanCondition)\n\n   WebSocketAutoConfiguration\n      - required @ConditionalOnClass classes not found: org.springframework.web.socket.WebSocketHandler (OnClassCondition)\n\n\n\njava.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)\n    at java.lang.Thread.run(Thread.java:744)\nCaused by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embdedded Tomcat\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:138)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:476)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:552)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:293)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:749)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:738)\n    at hello.Application.main(Application.java:12)\n    ... 6 more\nCaused by: org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embdedded Tomcat\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:85)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.&lt;init&gt;(TomcatEmbeddedServletContainer.java:53)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getTomcatEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:259)\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:140)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:158)\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135)\n    ... 13 more\nCaused by: java.lang.IllegalStateException: Tomcat connector in failed state\n    at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:81)\n    ... 18 more\n</code></pre>\n\n<p>I think this is because my port is used. My port 8080 is used so I try the port 8181\nI have no application on the port 8181</p>\n\n<p>in the tomcat server.xml I set the port to 8181 but the problem persist</p>\n\n<p>I find this post:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/646649/alternate-port-for-tomcat-not-8080-when-starting-with-maven\">Alternate port for Tomcat (not 8080) when starting with Maven?</a></p>\n\n<p>But I have the same problem  after launching mvn -Dmaven.tomcat.port=8181 tomcat:run-war</p>\n\n<p>I don't realy understand how to maven is linked to the tomcat server\nThis is my pom.xml</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;gs-serving-web-content&lt;/artifactId&gt;\n    &lt;version&gt;0.1.0&lt;/version&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;0.5.0.M6&lt;/version&gt;\n    &lt;/parent&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;\n            &lt;artifactId&gt;thymeleaf-spring3&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;properties&gt;\n        &lt;start-class&gt;hello.Application&lt;/start-class&gt;\n    &lt;/properties&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n    &lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;spring-milestone&lt;/id&gt;\n            &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;\n            &lt;snapshots&gt;\n                &lt;enabled&gt;false&lt;/enabled&gt;\n            &lt;/snapshots&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n    &lt;pluginRepositories&gt;\n        &lt;pluginRepository&gt;\n            &lt;id&gt;spring-milestone&lt;/id&gt;\n            &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;\n            &lt;snapshots&gt;\n                &lt;enabled&gt;false&lt;/enabled&gt;\n            &lt;/snapshots&gt;\n        &lt;/pluginRepository&gt;\n    &lt;/pluginRepositories&gt;\n\n&lt;/project&gt;\n</code></pre>\n\n<p>Thanks for your help</p>\n    ","a":"\n<p>Spring Boot uses embedded Tomcat by default, but it handles it differently without using <code>tomcat-maven-plugin</code>. To change the port use <a href=\"http://projects.spring.io/spring-boot/docs/spring-boot/README.html#toc_3\"><code>--server.port</code></a> parameter for example:</p>\n\n<pre><code>java -jar target/gs-serving-web-content-0.1.0.jar --server.port=8181\n</code></pre>\n    "},{"t":"Understanding the need for a DI framework","l":"http://stackoverflow.com/questions/500637/understanding-the-need-for-a-di-framework","q":"\n\n<p>This might be a naive question. I'm currently learning the Spring framework and <i>dependency injection</i>. While the basic principle of DI is rather easy to grasp, it's not immediately obvious why you need an elaborate framework to implement it.</p>\n\n<p>Consider the following:</p>\n\n<pre><code>public abstract class Saw\n{\n    public abstract void cut(String wood);\n}\n\npublic class HandSaw extends Saw\n{\n    public void cut(String wood)\n    {\n        // chop it up\n    }\n}\n\npublic class ChainSaw extends Saw\n{\n    public void cut(String wood)\n    {\n        // chop it a lot faster\n    }\n}\n\npublic class SawMill\n{\n    private Saw saw;\n\n    public void setSaw(Saw saw)\n    {\n        this.saw = saw;\n    }\n\n    public void run(String wood)\n    {\n        saw.cut(\"some wood\");\n    }\n}\n</code></pre>\n\n<p>Then you could simply do:</p>\n\n<pre><code>Saw saw = new HandSaw();\nSawMill sawMill = new SawMill();\nsawMill.setSaw(saw);\nsawMill.run();\n</code></pre>\n\n<p>Which would be equivalent to:</p>\n\n<pre><code>&lt;bean id=\"saw\" class=\"HandSaw\"/&gt;\n\n&lt;bean id=\"sawMill\" class=\"SawMill\"&gt;\n   &lt;property name=\"saw\" ref=\"saw\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>plus:</p>\n\n<pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(\"sawmill.xml\");\nSawMill springSawMill = (SawMill)context.getBean(\"sawMill\");\nspringSawMill.run();\n</code></pre>\n\n<p>Granted, this is a contrieved example, and with more complex object relationships it might be more efficient to stash up an XML file than writing it programmatically, but surely there must be more to it than that?</p>\n\n<p>(I know the Spring framework is more than that, but I'm thinking of the need for a DI container.)</p>\n\n<p>In the first example it would also be trivial to change dependencies midstream:</p>\n\n<pre><code>// gotta chop it faster\nsaw = new ChainSaw();\nsawMill.setSaw(saw);\nsawMill.run();\n</code></pre>\n    ","a":"\n<p>Dependency injection is a degenerate form of <a href=\"http://www.scala-lang.org/node/114\" rel=\"nofollow noreferrer\">implicit parameter passing</a>, and the purpose is essentially the same, to solve what's called <a href=\"http://portal.acm.org/citation.cfm?doid=1017472.1017481\" rel=\"nofollow noreferrer\">The Configurations Problem</a>:</p>\n\n<blockquote>\n  <p>The configurations problem is to\n  propagate run-time preferences\n  throughout a program, allowing\n  multiple concurrent configuration sets\n  to coexist safely under statically\n  guaranteed separation.</p>\n</blockquote>\n\n<p>Dependency Injection frameworks compensate for the lack of <a href=\"http://www.scala-lang.org/node/114\" rel=\"nofollow noreferrer\">implicit parameters</a>, <a href=\"http://www.youtube.com/watch?v=ZasXwtTRkio\" rel=\"nofollow noreferrer\">Curried functions</a>, and convenient facilities for <a href=\"http://learnyouahaskell.com/for-a-few-monads-more\" rel=\"nofollow noreferrer\">monads</a> in the language.</p>\n    "},{"t":"Spring JDBC Template for calling Stored Procedures","l":"http://stackoverflow.com/questions/9361538/spring-jdbc-template-for-calling-stored-procedures","q":"\n\n<p>What is the correct way to invoke stored procedures using modern day (circa 2012) Spring JDBC Template?</p>\n\n<p>Say, I have a stored procedure that declares both <code>IN</code> and <code>OUT</code> parameters, something like this:</p>\n\n<pre><code>mypkg.doSomething(\n    id OUT int,\n    name IN String,\n    date IN Date\n)\n</code></pre>\n\n<p>I have come across <code>CallableStatementCreator</code> based approaches where we have to explicitly register <code>IN</code> and <code>OUT</code> parameters. Consider the following method in <code>JdbcTemplate</code> class:</p>\n\n<pre><code>public Map&lt;String, Object&gt; call(CallableStatementCreator csc, List&lt;SqlParameter&gt; declaredParameters)\n</code></pre>\n\n<p>Of course, I do know that I can use it like so:</p>\n\n<pre><code>List&lt;SqlParameter&gt; declaredParameters = new ArrayList&lt;SqlParameter&gt;();\n\ndeclaredParameters.add(new SqlOutParameter(\"id\", Types.INTEGER));\ndeclaredParameters.add(new SqlParameter(\"name\", Types.VARCHAR));\ndeclaredParameters.add(new SqlParameter(\"date\", Types.DATE));\n\nthis.jdbcTemplate.call(new CallableStatementCreator() {\n\n    @Override\n    CallableStatement createCallableStatement(Connection con) throws SQLException {\n        CallableStatement stmnt = con.createCall(\"{mypkg.doSomething(?, ?, ?)}\");\n\n        stmnt.registerOutParameter(\"id\", Types.INTEGER);\n        stmnt.setString(\"name\", \"&lt;name&gt;\");\n        stmnt.setDate(\"date\", &lt;date&gt;);\n\n        return stmnt;\n    }\n}, declaredParameters);\n</code></pre>\n\n<p>What is the purpose of <code>declaredParameters</code> when I am already registering them in my <code>csc</code> implementation? In other words, why would I need to pass in a <code>csc</code> when spring can simply do <code>con.prepareCall(sql)</code> internally? Basically, can't I pass in either one of them instead of both of them?</p>\n\n<p>Or, is there a much better way to call stored procedures (using Spring JDBC Template) than what I have come across so far?</p>\n\n<p><em>Note:</em> You may find many questions that appear to have a similar title but they are not the same as this one.</p>\n    ","a":"\n<p>There are a number of ways to call stored procedures in Spring.</p>\n\n<p>If you use <code>CallableStatementCreator</code> to declare parameters, you will be using Java's standard interface of <code>CallableStatement</code>, i.e register out parameters and set them separately. Using <code>SqlParameter</code> abstraction will make your code cleaner.</p>\n\n<p>I recommend you looking at <code>SimpleJdbcCall</code>. It may be used like this:</p>\n\n<pre><code>SimpleJdbcCall jdbcCall = new SimpleJdbcCall(jdbcTemplate)\n    .withSchemaName(schema)\n    .withCatalogName(package)\n    .withProcedureName(procedure)();\n...\njdbcCall.addDeclaredParameter(new SqlParameter(paramName, OracleTypes.NUMBER));\n...\njdbcCall.execute(callParams);\n</code></pre>\n\n<p>For simple procedures you may use <code>jdbcTemplate</code>'s <code>update</code> method:</p>\n\n<pre><code>jdbcTemplate.update(\"call SOME_PROC (?, ?)\", param1, param2);\n</code></pre>\n    "},{"t":"What's the best way to get started with OSGI? [closed]","l":"http://stackoverflow.com/questions/16140/whats-the-best-way-to-get-started-with-osgi","q":"\n\n<p>What makes a module/service/bit of application functionality a particularly good candidate for an OSGi module? </p>\n\n<p>I'm interested in using <a href=\"http://en.wikipedia.org/wiki/OSGi\" rel=\"nofollow noreferrer\">OSGi</a> in my applications. We're a Java shop and we use Spring pretty extensively, so I'm leaning toward using <a href=\"http://www.springframework.org/osgi\" rel=\"nofollow noreferrer\">Spring Dynamic Modules for OSGi(tm) Service Platforms</a>. I'm looking for a good way to incorporate a little bit of OSGi into an application as a trial. Has anyone here used this or a similar OSGi technology? Are there any pitfalls? </p>\n\n<p>@Nicolas - Thanks, I've seen that one. It's a good tutorial, but I'm looking more for ideas on how to do my first \"real\" OSGi bundle, as opposed to a Hello World example.</p>\n\n<p>@david - Thanks for the link! Ideally, with a greenfield app, I'd design the whole thing to be dynamic. What I'm looking for right now, though, is to introduce it in a small piece of an existing application. Assuming I can pick any piece of the app, what are some factors to consider that would make that piece better or worse as an OSGi guinea pig?</p>\n    ","a":"\n<p>Well, since you can not have one part OSGi and one part non-OSGi you'll need to make your entire app OSGi. In its simplest form you make a single OSGi bundle out of your entire application. Clearly this is not a best practice but it can be useful to get a feel for deploying a bundle in an OSGi container (Equinox, Felix, Knoplerfish, etc).</p>\n\n<p>To take it to the next level you'll want to start splitting your app into components, components should typically have a set of responsibilities that can be isolated from the rest of your application through a set of interfaces and class dependencies. Identifying these purely by hand can range from rather straightforward for a well designed highly cohesive but loosely coupled application to a nightmare for interlocked source code that you are not familiar with.</p>\n\n<p>Some help can come from tools like <a href=\"http://clarkware.com/software/JDepend.html\" rel=\"nofollow noreferrer\">JDepend</a> which can show you the coupling of Java packages against other packages/classes in your system. A package with low efferent coupling should be easier to extract into an OSGi bundle than one with high efferent coupling. Even more architectural insight can be had with pro tools like <a href=\"http://www.headwaysoftware.com/products/structure101/index.php\" rel=\"nofollow noreferrer\">Structure 101</a>.</p>\n\n<p>Purely on a technical level, working daily with an application that consists of 160 OSGi bundles and using Spring DM I can confirm that the transition from \"normal\" Spring to Spring DM is largely pain free. The extra namespace and the fact that you can (and should) isolate your OSGi specific Spring configuration in separate files makes it even easier to have both with and without OSGi deployment scenarios.</p>\n\n<p>OSGi is a deep and wide component model, documentation I recommend:</p>\n\n<ul>\n<li><a href=\"http://www.osgi.org/Release4/Download\" rel=\"nofollow noreferrer\">OSGi R4 Specification</a>: Get the PDFs of the Core and Compendium specification, they are canonical, authoritative and very readable. Have a shortcut to them handy at all times, you will consult them.</li>\n<li>Read up on OSGi best practices, there is a large set of things you <strong>can</strong> do but a somewhat smaller set of things you <strong>should</strong> do and there are some things you should <strong>never do</strong> (DynamicImport: * for example). </li>\n</ul>\n\n<p>Some links: </p>\n\n<ul>\n<li><a href=\"http://felix.apache.org/site/presentations.data/best-practices-apachecon-20060628.pdf\" rel=\"nofollow noreferrer\">OSGi best practices and using Apache Felix</a></li>\n<li><a href=\"http://www.osgi.org/wiki/uploads/CommunityEvent2007/OSGiBestPractices.pdf\" rel=\"nofollow noreferrer\">Peter Kriens and BJ Hargrave in a Sun presentation on OSGi best practices</a> </li>\n<li>one key OSGi concept are Services, learn why and how they supplant the Listener pattern with the <a href=\"http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf\" rel=\"nofollow noreferrer\">Whiteboard pattern</a></li>\n<li><strike><a href=\"http://groups.google.com/group/spring-osgi\" rel=\"nofollow noreferrer\">The Spring DM Google Group</a> is very responsive and friendly in my experience</strike><br>\n<a href=\"http://groups.google.com/group/spring-osgi\" rel=\"nofollow noreferrer\">The Spring DM Google Group</a> is <a href=\"https://groups.google.com/forum/#!topic/spring-osgi/e-3gVCgl-_M\" rel=\"nofollow noreferrer\">no longer active</a> and has moved to Eclipse.org as the Gemini Blueprint project which has a forum <a href=\"http://www.eclipse.org/forums/index.php?t=thread&amp;frm_id=153\" rel=\"nofollow noreferrer\">here</a>.</li>\n</ul>\n    "},{"t":"Invalid CSRF Token 'null' was found on the request parameter '_csrf' or header 'X-CSRF-TOKEN'","l":"http://stackoverflow.com/questions/21128058/invalid-csrf-token-null-was-found-on-the-request-parameter-csrf-or-header","q":"\n\n<p>After configuring Spring Security 3.2, <code>_csrf.token</code> is not bound to a request or a session object.</p>\n\n<p>This is the spring security config:</p>\n\n<pre><code>&lt;http pattern=\"/login.jsp\" security=\"none\"/&gt;\n\n&lt;http&gt;\n    &lt;intercept-url pattern=\"/**\" access=\"ROLE_USER\"/&gt;\n    &lt;form-login login-page=\"/login.jsp\"\n                authentication-failure-url=\"/login.jsp?error=1\"\n                default-target-url=\"/index.jsp\"/&gt;\n    &lt;logout/&gt;\n    &lt;csrf /&gt;\n&lt;/http&gt;\n\n&lt;authentication-manager&gt;\n    &lt;authentication-provider&gt;\n        &lt;user-service&gt;\n            &lt;user name=\"test\" password=\"test\" authorities=\"ROLE_USER/&gt;\n        &lt;/user-service&gt;\n    &lt;/authentication-provider&gt;\n&lt;/authentication-manager&gt;\n</code></pre>\n\n<p>The login.jsp file</p>\n\n<pre><code>&lt;form name=\"f\" action=\"${contextPath}/j_spring_security_check\" method=\"post\" &gt;\n    &lt;input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" /&gt;\n    &lt;button id=\"ingresarButton\"\n            name=\"submit\"\n            type=\"submit\"\n            class=\"right\"\n            style=\"margin-right: 10px;\"&gt;Ingresar&lt;/button&gt;\n    &lt;span&gt;\n        &lt;label for=\"usuario\"&gt;Usuario :&lt;/label&gt;\n        &lt;input type=\"text\" name=\"j_username\" id=\"u\" class=\"\" value=''/&gt;\n    &lt;/span&gt;\n    &lt;span&gt;\n        &lt;label for=\"clave\"&gt;Contrase&amp;ntilde;a :&lt;/label&gt;\n\n        &lt;input type=\"password\"\n               name=\"j_password\"\n               id=\"p\"\n               class=\"\"\n               onfocus=\"vc_psfocus = 1;\"\n               value=\"\"&gt;\n    &lt;/span&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>And it renders the next html:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"\" value=\"\" /&gt;\n</code></pre>\n\n<p>The result is 403 HTTP status:</p>\n\n<pre><code>Invalid CSRF Token 'null' was found on the request parameter '_csrf' or header 'X-CSRF-TOKEN'.\n</code></pre>\n\n<p><strong>UPDATE</strong>\nAfter some debug, the request object gets out fine form DelegatingFilterProxy, but in the line 469 of CoyoteAdapter it executes request.recycle(); that erases all the attributes...</p>\n\n<p>I test in Tomcat 6.0.36, 7.0.50 with JDK 1.7.</p>\n\n<p>I have not understood this behavior, rather than, it would be possible if someone point me in the direction of some application sample war with Spring Security 3.2 that works with CSRF.</p>\n    ","a":"\n<p>With thymeleaf you may add:</p>\n\n<pre><code>&lt;input type=\"hidden\" th:name=\"${_csrf.parameterName}\" th:value=\"${_csrf.token}\"/&gt;\n</code></pre>\n    "},{"t":"How do I prevent people from doing XSS in Spring MVC?","l":"http://stackoverflow.com/questions/2147958/how-do-i-prevent-people-from-doing-xss-in-spring-mvc","q":"\n\n<p>What should I do to prevent XSS in Spring MVC? Right now I am just putting all places where I output user text into JSTL <code>&lt;c:out&gt;</code> tags or <code>fn:escapeXml()</code> functions, but this seems error prone as I might miss a place.</p>\n\n<p>Is there an easy systematic way to prevent this? Maybe like a filter or something? I'm collecting input by specifying <code>@RequestParam</code> parameters on my controller methods. </p>\n    ","a":"\n<p>In Spring you can escape the html from JSP pages generated by <code>&lt;form&gt;</code> tags. This closes off a lot avenues for XSS attacks, and can be done automatically in three ways:</p>\n\n<p>For the entire application in the <code>web.xml</code> file:</p>\n\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;defaultHtmlEscape&lt;/param-name&gt;\n    &lt;param-value&gt;true&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre>\n\n<p>For all forms on a given page in the file itself:</p>\n\n<pre><code>&lt;spring:htmlEscape defaultHtmlEscape=\"true\" /&gt; \n</code></pre>\n\n<p>For each form:</p>\n\n<pre><code>&lt;form:input path=\"someFormField\" htmlEscape=\"true\" /&gt; \n</code></pre>\n    "},{"t":"Self injection with Spring","l":"http://stackoverflow.com/questions/5152686/self-injection-with-spring","q":"\n\n<p>I tried the following code with Spring 3.x which failed with <code>BeanNotFoundException</code> and it should according to the answers of a question which I asked before - <a href=\"http://stackoverflow.com/questions/5107505/can-i-inject-same-class-using-spring\">Can I inject same class using Spring?</a>  </p>\n\n<pre><code>@Service\npublic class UserService implements Service{\n   @Autowired\n   private Service self;\n}\n</code></pre>\n\n<p>Since I was trying this with Java 6, I found the following code works fine:</p>\n\n<pre><code>@Service(value = \"someService\")\npublic class UserService implements Service{\n   @Resource(name = \"someService\")\n   private Service self;\n}\n</code></pre>\n\n<p>but I don't understand how it resolves the cyclic dependency.</p>\n\n<p>EDIT:<br>\nHere's the error message. The OP mentioned it in a comment on one of the answers:</p>\n\n<blockquote>\n  <p>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [com.spring.service.Service] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}</p>\n</blockquote>\n    ","a":"\n<p><strong>Update: February 2016</strong></p>\n\n<p><em>Self autowiring</em> will be officially supported in Spring Framework 4.3. The implementation can be seen in this <a href=\"https://github.com/spring-projects/spring-framework/commit/4a0fa69ce469cae2e8c8a1a45f0b43f74a74481d\">GitHub commit</a>.</p>\n\n<hr>\n\n<p>The definitive reason that you cannot autowire yourself is that the implementation of Spring's <code>DefaultListableBeanFactory.findAutowireCandidates(String, Class, DependencyDescriptor)</code> method explicitly excludes the possibility. This is visible in the following code excerpt from this method:</p>\n\n\n\n<pre><code>for (String candidateName : candidateNames) {\n    if (!candidateName.equals(beanName) &amp;&amp; isAutowireCandidate(candidateName, descriptor)) {\n        result.put(candidateName, getBean(candidateName));\n    }\n}\n</code></pre>\n\n<p>FYI: the name of the bean (i.e., the bean that's trying to autowire itself) is <code>beanName</code>. That bean is in fact an autowire candidate, but the above if-condition returns false (since <code>candidateName</code> in fact equals the <code>beanName</code>). Thus you simply cannot autowire a bean with itself (at least not as of Spring 3.1 M1).</p>\n\n<p>Now as for whether or not this is intended behavior semantically speaking, that's another question. ;)</p>\n\n<p>I'll ask Juergen and see what he has to say.</p>\n\n<p>Regards,</p>\n\n<p>Sam (Core Spring Committer)</p>\n\n<p>p.s. I've opened a Spring JIRA issue to consider supporting self-autowiring by type using @Autowired. Feel free to watch or vote for this issue here: <a href=\"https://jira.springsource.org/browse/SPR-8450\">https://jira.springsource.org/browse/SPR-8450</a></p>\n    "},{"t":"How do I call the default deserializer from a custom deserializer in Jackson","l":"http://stackoverflow.com/questions/18313323/how-do-i-call-the-default-deserializer-from-a-custom-deserializer-in-jackson","q":"\n\n<p>I have a problem in my custom deserializer in Jackson. I want to access the default serializer to populate the object i am deserializing into. After the population I will do som custom things but first I want to deserialize the object with the default jackson behaviour.</p>\n\n<p>This is the code that I have at the moment.</p>\n\n<pre><code>public class UserEventDeserializer extends StdDeserializer&lt;User&gt; {\n\n  private static final long serialVersionUID = 7923585097068641765L;\n\n  public UserEventDeserializer() {\n    super(User.class);\n  }\n\n  @Override\n  @Transactional\n  public User deserialize(JsonParser jp, DeserializationContext ctxt)\n      throws IOException, JsonProcessingException {\n\n    ObjectCodec oc = jp.getCodec();\n    JsonNode node = oc.readTree(jp);\n    User deserializedUser = null;\n    deserializedUser = super.deserialize(jp, ctxt, new User()); \n    // The previous line generates an exception java.lang.UnsupportedOperationException\n    // Because there is no implementation of the deserializer.\n    // I want a way to access the default spring deserializer for my User class.\n    // How can I do that?\n\n    //Special logic\n\n    return deserializedUser;\n  }\n\n}\n</code></pre>\n\n<p>What I need is a way to initialize the default deserializer so that I can prepopulate my POJO before I start my special logic.</p>\n\n<p>When calling deserialize from within the custom deserializer It seams the method is called from the current context no matter how I construct the serializer class. Because of the annotation in my POJO. This causes a Stack Overflow exception for obvious reasons. I have tried initalizing a beandeserializer but the process is extreamly complex and I haven't managed to find the right way to do it. I have also tried overloading the annotaiton introspector to no avail, thinking that it might help me ignore the annotaiton in the DeserializerContext. Finaly it seams I might have had some success using JsonDeserializerBuilders allthough this required me to do some magic stuff to get ahold of the application context from spring. I would appreciate any thing that could lead me to a cleaner solution for example how Can I construct a Deserialization context without reading the JsonDeserializer annotaiton.</p>\n    ","a":"\n<p>As StaxMan already suggested you can do this by writing a <code>BeanDeserializerModifier</code> and registering it via <code>SimpleModule</code>. The following example should work:</p>\n\n<pre><code>public class UserEventDeserializer extends StdDeserializer&lt;User&gt; implements ResolvableDeserializer\n{\n  private static final long serialVersionUID = 7923585097068641765L;\n\n  private final JsonDeserializer&lt;?&gt; defaultDeserializer;\n\n  public UserEventDeserializer(JsonDeserializer&lt;?&gt; defaultDeserializer)\n  {\n    super(User.class);\n    this.defaultDeserializer = defaultDeserializer;\n  }\n\n  @Override public User deserialize(JsonParser jp, DeserializationContext ctxt)\n      throws IOException, JsonProcessingException\n  {\n    User deserializedUser = (User) defaultDeserializer.deserialize(jp, ctxt);\n\n    // Special logic\n\n    return deserializedUser;\n  }\n\n  // for some reason you have to implement ResolvableDeserializer when modifying BeanDeserializer\n  // otherwise deserializing throws JsonMappingException??\n  @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException\n  {\n    ((ResolvableDeserializer) defaultDeserializer).resolve(ctxt);\n  }\n\n\n  public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException\n  {\n    SimpleModule module = new SimpleModule();\n    module.setDeserializerModifier(new BeanDeserializerModifier()\n    {\n      @Override public JsonDeserializer&lt;?&gt; modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc, JsonDeserializer&lt;?&gt; deserializer)\n      {\n        if (beanDesc.getBeanClass() == User.class)\n          return new UserEventDeserializer(deserializer);\n        return deserializer;\n      }\n    });\n\n\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.registerModule(module);\n    User user = mapper.readValue(new File(\"test.json\"), User.class);\n  }\n}\n</code></pre>\n    "},{"t":"Injecting beans into a class outside the Spring managed context","l":"http://stackoverflow.com/questions/310271/injecting-beans-into-a-class-outside-the-spring-managed-context","q":"\n\n<p>I'm an end-user of one of my company's products. It is not very suitable for integration into Spring, however I am able to get a handle on the context and retrieve the required bean by name.  However, I would still like to know if it was possible to inject a bean into this class, even though the class is not managed by Spring itself.</p>\n\n<p>Clarification: The same application which is managing the lifecycle of some class MyClass, is also managing the lifecycle of the Spring context. Spring does not have any knowledge of the instance of MyClass, and I would like to some how provide the instance to the context, but cannot create the instance in the context itself.</p>\n    ","a":"\n<p>You can do this:</p>\n\n<pre><code>ApplicationContext ctx = ...\nYourClass someBeanNotCreatedBySpring = ...\nctx.getAutowireCapableBeanFactory().autowireBeanProperties(\n    someBeanNotCreatedBySpring,\n    AutowireCapableBeanFactory.AUTOWIRE_AUTODETECT, true);\n</code></pre>\n\n<p>You can use <code>@Autowired</code> and so on within <code>YourClass</code> to specify fields to be injected etc.</p>\n    "},{"t":"Autowire reference beans into list by type","l":"http://stackoverflow.com/questions/7446301/autowire-reference-beans-into-list-by-type","q":"\n\n<p>I have one class that has a list of objects of <code>Daemon</code> type.</p>\n\n<pre><code> Class Xyz {    \n       List&lt;Daemon&gt; daemons;\n    }\n</code></pre>\n\n<p>My spring configuration looks like this.</p>\n\n<pre><code>&lt;bean id=\"xyz\" class=\"package1.Xyz\"&gt;\n   &lt;property name=\"daemons\" ref=\"daemonsList\"&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"daemon1\" class=\"package1.DaemonImpl1\"/&gt;\n&lt;bean id=\"daemon2\" class=\"package1.DaemonImpl2\"/&gt;\n\n&lt;bean id=\"daemonsList\" class=\"java.util.ArrayList\"&gt;\n        &lt;constructor-arg&gt;\n            &lt;list&gt;\n                &lt;ref bean=\"daemon1\" /&gt;      \n                &lt;ref bean=\"daemon2\" /&gt;\n            &lt;/list&gt;\n        &lt;/constructor-arg&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Now instead of explicitly wiring each daemon implementation in list, is it possible to autowire all beans of type <code>Daemon</code> automatically in list. Problem I am trying to solve is, If someone creates a bean of new implementation of <code>Daemon</code> class and forgets to wire it into list.</p>\n\n<p>I have seen this question somewhere on stackoverflow but not able to find that again. Apologies for it.</p>\n\n<p>Thanks</p>\n\n<p>Jitendra</p>\n    ","a":"\n<p>It should work like this (remove the ArrayList bean from your XML):</p>\n\n<pre><code>public Class Xyz {    \n\n    private List&lt;Daemon&gt; daemons;\n\n    @Autowired\n    public void setDaemons(List&lt;Daemon&gt; daemons){\n        this.daemons = daemons;\n    }\n\n}\n</code></pre>\n\n<p>I don't think there's a way to do this in XML.</p>\n\n<hr>\n\n<p>See:\n<a href=\"http://static.springsource.org/spring/docs/current/spring-framework-reference/html/beans.html#beans-autowired-annotation\" rel=\"nofollow\">3.9.2. <code>@Autowired</code> and <code>@Inject</code></a>:</p>\n\n<blockquote>\n  <p>It is also possible to provide all beans of a particular type from the\n  ApplicationContext by adding the annotation to a field or method that\n  expects an array of that type:</p>\n</blockquote>\n\n<pre><code>public class MovieRecommender {\n\n  @Autowired\n  private MovieCatalog[] movieCatalogs;\n\n  // ...\n}\n</code></pre>\n\n<blockquote>\n  <p>The same applies for typed collections:</p>\n</blockquote>\n\n<pre><code>public class MovieRecommender {\n\n  private Set&lt;MovieCatalog&gt; movieCatalogs;\n\n  @Autowired\n  // or if you don't want a setter, annotate the field\n  public void setMovieCatalogs(Set&lt;MovieCatalog&gt; movieCatalogs) {\n      this.movieCatalogs = movieCatalogs;\n  }\n\n  // ...\n}\n</code></pre>\n\n<p>BTW, as of Spring 4.x, <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/new-in-4.0.html#_core_container_improvements\" rel=\"nofollow\">these lists can be ordered automatically using the <code>@Ordered</code> mechanism</a>.</p>\n    "},{"t":"How do I run a spring boot executable jar in a Production environment?","l":"http://stackoverflow.com/questions/22886083/how-do-i-run-a-spring-boot-executable-jar-in-a-production-environment","q":"\n\n<p>Spring boot's preferred deployment method is via a executable jar file which contains tomcat inside.</p>\n\n<p>It is started with a simple <code>java -jar myapp.jar</code>.</p>\n\n<p>Now, I want to deploy that jar to my linux server on EC2, am I missing something or do I really need to create a init script to properly start the application as a daemon?</p>\n\n<p>If I simply call <code>java -jar</code> the application dies when I log out.</p>\n\n<p>I could start it in screen or nohup but that is not very elegant and a restart in my server would force me to log in and start the process manually.</p>\n\n<p>So, is there something already for the task in spring boot?</p>\n    ","a":"\n<p>This is a simple, you can use spring boot maven plugin to finish your code deploy.</p>\n\n<p>the plugin config like:</p>\n\n<pre><code>&lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;jvmArguments&gt;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${debug.port}\n                    &lt;/jvmArguments&gt;\n                    &lt;profiles&gt;\n                        &lt;profile&gt;test&lt;/profile&gt;\n                    &lt;/profiles&gt;\n                    &lt;executable&gt;true&lt;/executable&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n</code></pre>\n\n<p>And, the <code>jvmArtuments</code> is add for you jvm. <code>profiles</code> will choose a profile to start your app. <code>executable</code> can make your app driectly run.</p>\n\n<p>and if you add <code>mvnw</code> to your project, or you have a maven enveriment. You can just call<code>./mvnw spring-boot:run</code> for mvnw or <code>mvn spring-boot:run</code> for maven.</p>\n    "},{"t":"Struts2 + Spring Security 2.06: Valuestack is null when attempting to use @Secured on an Action method","l":"http://stackoverflow.com/questions/8829346/struts2-spring-security-2-06-valuestack-is-null-when-attempting-to-use-secur","q":"\n\n<p>Before I begin, I've to say the closest answer I've found is <a href=\"http://forum.springsource.org/showthread.php?66381-Method-security-with-struts2-make-all-request-params-in-action-NULL\">here</a> but honestly I don't really understand what's going on there.</p>\n\n<p>I'm using Struts2 + Spring Security 2.06 with a custom authentication provider and access decision manager to remove the need for a \"ROLE_\" prefix.</p>\n\n<p>My applicationContext-security.xml looks like this:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>    &lt;beans:bean id=\"customAuthenticationProvider\"\n                class=\"com.test.testconsole.security.CustomAuthenticationProvider\"&gt;\n        &lt;beans:property name=\"userManagementService\" ref=\"userManagementService\"/&gt;\n        &lt;custom-authentication-provider/&gt;\n    &lt;/beans:bean&gt;\n\n    &lt;!--Customize Spring Security's access decision manager to remove need for \"ROLE_\" prefix--&gt;\n    &lt;beans:bean\n            id=\"accessDecisionManager\"\n            class=\"org.springframework.security.vote.AffirmativeBased\"&gt;\n        &lt;beans:property name=\"decisionVoters\"&gt;\n            &lt;beans:list&gt;\n                &lt;beans:ref bean=\"roleVoter\"/&gt;\n                &lt;beans:ref bean=\"authenticatedVoter\"/&gt;\n            &lt;/beans:list&gt;\n        &lt;/beans:property&gt;\n    &lt;/beans:bean&gt;\n\n    &lt;beans:bean\n            id=\"roleVoter\"\n            class=\"org.springframework.security.vote.RoleVoter\"&gt;\n        &lt;beans:property name=\"rolePrefix\" value=\"\"/&gt;\n    &lt;/beans:bean&gt;\n\n    &lt;beans:bean\n            id=\"authenticatedVoter\"\n            class=\"org.springframework.security.vote.AuthenticatedVoter\"&gt;\n    &lt;/beans:bean&gt;\n\n&lt;global-method-security secured-annotations=\"enabled\" access-decision-manager-ref=\"accessDecisionManager\"/&gt;\n</code></pre>\n\n<p>Relevant portion of my web.xml:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>    &lt;!--Spring Security--&gt;\n&lt;filter&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;filter&gt;\n    &lt;filter-name&gt;struts2&lt;/filter-name&gt;\n    &lt;filter-class&gt;\n        org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n    &lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;!--Has to be placed _Before_ the struts2 filter-mapping--&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;struts2&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n</code></pre>\n\n<p>And I'm simply using @Secured in one of my action classes like so:</p>\n\n<pre><code>@Secured({\"TEST_ADMIN\"})\npublic String editAccount() {\n    logger.info(\"Editing account for: \" + email);\n    //blah blah blah\n}\n</code></pre>\n\n<p>With the @Secured annotation added to a method in the action, all parameters become null, in fact looks like the valuestack is null:</p>\n\n<pre><code>154379 [1146701440@qtp-1897259366-0] DEBUG com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler  - Entering nullPropertyValue [target=[com.test.testconsole.sections.SettingsAction@da47641, com.opensymphony.xwork2.DefaultTextProvider@1cc50164], property=currentPage]        \n154379 [1146701440@qtp-1897259366-0] WARN  com.opensymphony.xwork2.ognl.OgnlValueStack  - Caught an exception while evaluating expression 'currentPage.equals('Summary')' against value stack\n    java.lang.NullPointerException: target is null for method equals\n        at ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1347)\n        at ognl.ASTMethod.getValueBody(ASTMethod.java:90)\n        at ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\n        at ognl.SimpleNode.getValue(SimpleNode.java:258)\n        at ognl.ASTChain.getValueBody(ASTChain.java:141)\n        at ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\n        at ognl.SimpleNode.getValue(SimpleNode.java:258)\n        at ognl.Ognl.getValue(Ognl.java:494)\n        at com.opensymphony.xwork2.ognl.OgnlUtil.getValue(OgnlUtil.java:217)\n        at com.opensymphony.xwork2.ognl.OgnlValueStack.getValue(OgnlValueStack.java:342)\n        at com.opensymphony.xwork2.ognl.OgnlValueStack.tryFindValue(OgnlValueStack.java:331)\n        at com.opensymphony.xwork2.ognl.OgnlValueStack.tryFindValueWhenExpressionIsNotNull(OgnlValueStack.java:307)\n        at com.opensymphony.xwork2.ognl.OgnlValueStack.findValue(OgnlValueStack.java:293)\n        at org.apache.struts2.components.Component.findValue(Component.java:382)\n        at org.apache.struts2.components.If.start(If.java:86)\n        at org.apache.struts2.views.jsp.ComponentTagSupport.doStartTag(ComponentTagSupport.java:53)\n        at org.apache.jsp.WEB_002dINF.views.layouts.header_jsp._jspx_meth_s_if_0(org.apache.jsp.WEB_002dINF.views.layouts.header_jsp:252)\n        at org.apache.jsp.WEB_002dINF.views.layouts.header_jsp._jspService(org.apache.jsp.WEB_002dINF.views.layouts.header_jsp:97)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\n        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)\n        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\n        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\n        at org.mortbay.jetty.servlet.Dispatcher.include(Dispatcher.java:192)\n        at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:1013)\n        at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:698)\n        at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:80)\n        at org.apache.tiles.jsp.context.JspTilesRequestContext.dispatch(JspTilesRequestContext.java:73)\n        at org.apache.tiles.context.TilesRequestContextWrapper.dispatch(TilesRequestContextWrapper.java:72)\n        at org.apache.struts2.tiles.StrutsTilesRequestContext.dispatch(StrutsTilesRequestContext.java:88)\n        at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:283)\n        at org.apache.tiles.jsp.taglib.InsertAttributeTag.render(InsertAttributeTag.java:140)\n        at org.apache.tiles.jsp.taglib.InsertAttributeTag.render(InsertAttributeTag.java:117)\n        at org.apache.tiles.jsp.taglib.RenderTagSupport.execute(RenderTagSupport.java:154)\n        at org.apache.tiles.jsp.taglib.RoleSecurityTagSupport.doEndTag(RoleSecurityTagSupport.java:75)\n        at org.apache.tiles.jsp.taglib.ContainerTagSupport.doEndTag(ContainerTagSupport.java:80)\n        at org.apache.jsp.WEB_002dINF.views.layouts.bodyWithSidebar_jsp._jspx_meth_tiles_insertAttribute_0(org.apache.jsp.WEB_002dINF.views.layouts.bodyWithSidebar_jsp:121)\n        at org.apache.jsp.WEB_002dINF.views.layouts.bodyWithSidebar_jsp._jspService(org.apache.jsp.WEB_002dINF.views.layouts.bodyWithSidebar_jsp:58)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\n        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)\n        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\n        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\n        at org.mortbay.jetty.servlet.Dispatcher.include(Dispatcher.java:192)\n        at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:1013)\n        at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:698)\n        at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:80)\n        at org.apache.tiles.jsp.context.JspTilesRequestContext.dispatch(JspTilesRequestContext.java:73)\n        at org.apache.tiles.context.TilesRequestContextWrapper.dispatch(TilesRequestContextWrapper.java:72)\n        at org.apache.struts2.tiles.StrutsTilesRequestContext.dispatch(StrutsTilesRequestContext.java:88)\n        at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:606)\n        at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:280)\n        at org.apache.tiles.jsp.taglib.InsertAttributeTag.render(InsertAttributeTag.java:140)\n        at org.apache.tiles.jsp.taglib.InsertAttributeTag.render(InsertAttributeTag.java:117)\n        at org.apache.tiles.jsp.taglib.RenderTagSupport.execute(RenderTagSupport.java:154)\n        at org.apache.tiles.jsp.taglib.RoleSecurityTagSupport.doEndTag(RoleSecurityTagSupport.java:75)\n        at org.apache.tiles.jsp.taglib.ContainerTagSupport.doEndTag(ContainerTagSupport.java:80)\n        at org.apache.jsp.WEB_002dINF.views.layouts.main_jsp._jspx_meth_tiles_insertAttribute_0(org.apache.jsp.WEB_002dINF.views.layouts.main_jsp:473)\n        at org.apache.jsp.WEB_002dINF.views.layouts.main_jsp._jspService(org.apache.jsp.WEB_002dINF.views.layouts.main_jsp:157)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\n        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)\n        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\n        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\n        at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:327)\n        at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126)\n        at org.apache.tiles.servlet.context.ServletTilesRequestContext.forward(ServletTilesRequestContext.java:198)\n        at org.apache.tiles.servlet.context.ServletTilesRequestContext.dispatch(ServletTilesRequestContext.java:179)\n        at org.apache.tiles.context.TilesRequestContextWrapper.dispatch(TilesRequestContextWrapper.java:72)\n        at org.apache.struts2.tiles.StrutsTilesRequestContext.dispatch(StrutsTilesRequestContext.java:88)\n        at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:606)\n        at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:246)\n        at org.apache.struts2.views.tiles.TilesResult.doExecute(TilesResult.java:105)\n        at org.apache.struts2.dispatcher.StrutsResultSupport.execute(StrutsResultSupport.java:186)\n        at com.opensymphony.xwork2.DefaultActionInvocation.executeResult(DefaultActionInvocation.java:373)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:277)\n        at com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:176)\n        at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:263)\n        at org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:68)\n        at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:133)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207)\n        at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207)\n        at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:190)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:75)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:94)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:243)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:270)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n        at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:176)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:190)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:187)\n        at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248)\n        at org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:52)\n        at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:498)\n        at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:77)\n        at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:91)\n        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:378)\n        at org.springframework.security.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109)\n        at org.springframework.security.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.ui.SessionFixationProtectionFilter.doFilterHttp(SessionFixationProtectionFilter.java:67)\n        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.ui.ExceptionTranslationFilter.doFilterHttp(ExceptionTranslationFilter.java:101)\n        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.wrapper.SecurityContextHolderAwareRequestFilter.doFilterHttp(SecurityContextHolderAwareRequestFilter.java:91)\n        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.ui.AbstractProcessingFilter.doFilterHttp(AbstractProcessingFilter.java:278)\n        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.ui.logout.LogoutFilter.doFilterHttp(LogoutFilter.java:89)\n        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.context.HttpSessionContextIntegrationFilter.doFilterHttp(HttpSessionContextIntegrationFilter.java:235)\n        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)\n        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390)\n        at org.springframework.security.util.FilterChainProxy.doFilter(FilterChainProxy.java:175)\n        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:236)\n        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)\n        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\n        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)\n        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\n        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)\n        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n        at org.mortbay.jetty.Server.handle(Server.java:326)\n        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:536)\n        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:915)\n        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)\n        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)\n        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:405)\n        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)\n        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\n</code></pre>\n\n<p>I read in the Spring Security FAQ that the Controller/Action is not the best place to secure methods, but the described failure in the FAQ is that the @Secured annotation will not work, i.e. method will not be secured.</p>\n\n<p>In my case, I get a null valuestack even before reaching that method; execute() is not secured, only editUser() and that wasn't even called yet.</p>\n\n<p>I hope someone has the same experience and found a solution .. thanks.</p>\n\n<p><strong>Update:</strong>\nI wonder if this will help: <a href=\"http://stackoverflow.com/questions/8229600/spring-security-how-i-can-enable-method-security-annotations\">Spring Security - how I can enable Method Security annotations?</a></p>\n\n<p>My Action classes currently extend a BaseAction class where I put common functionality though ..</p>\n    ","a":"\n<p>I just wonder, this problem occurs if you use the default configuration of Spring Security, where it expects <strong><code>ROLE_</code></strong> prefixed names.</p>\n\n<p>See this question:\n<a href=\"http://stackoverflow.com/questions/986892/how-do-i-use-custom-roles-authorities-in-spring-security\">How do I use custom roles/authorities in Spring Security?</a></p>\n\n<blockquote>\n  <p>You are using the default configuration witch expects that roles starts with the \"ROLE_\" prefix. You will have to add a custom security configuration and set rolePrefix to \"\"</p>\n</blockquote>\n\n<p>The example configuration from: <a href=\"http://stackoverflow.com/questions/4951832/spring-security-role-prefix-and-custom-user-details-service?rq=1\">Spring Security Role Prefix and Custom User Details Service</a></p>\n\n<pre><code>&lt;beans:bean id=\"roleVoter\" class=\"org.springframework.security.access.vote.RoleVoter\"&gt;\n    &lt;beans:property name=\"rolePrefix\" value=\"\" /&gt;\n&lt;/beans:bean&gt;\n</code></pre>\n\n<p>Related questions:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/8314690/spring-security-role-prefix-no-longer-needed?rq=1\">Spring Security ROLE_ prefix no longer needed?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/283870/acegi-security-how-do-i-add-another-grantedauthority-to-authentication-to-anony\">Acegi Security: How do i add another GrantedAuthority to Authentication to anonymous user</a></li>\n</ul>\n    "},{"t":"Spring 3.x JSON status 406 “characteristics not acceptable according to the request ”accept“ headers ()”","l":"http://stackoverflow.com/questions/12865093/spring-3-x-json-status-406-characteristics-not-acceptable-according-to-the-requ","q":"\n\n<p>Upon trying to get my response in <code>JSON</code> using <code>Spring 3.x</code>, I get the <code>406 error</code> \"The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the <code>request</code> \"accept\" headers ().\"</p>\n\n<p>Here is my environment</p>\n\n<pre><code>* Spring 3.2.0.RELEASE\n* included jackson-mapper-asl-1.7.9.jar, jackson-core-asl-1.7.9.jar\n* Tomcat 6.x\n* mvc:annotation-driven in Spring configuration XML file\n</code></pre>\n\n<p>My Controller: </p>\n\n<pre><code>@RequestMapping(\"/contest\")\npublic class ContestController {\n\n    @RequestMapping(value=\"{name}\", headers=\"Accept=*/*\", method = RequestMethod.GET)\n    public @ResponseBody Contest getContestInJSON(@PathVariable String name) {\n        Contest contest = new Contest();\n        contest.setName(name);\n        contest.setStaffName(new String(\"contestitem1\"));\n\n        return contest;\n    }\n\n}\n</code></pre>\n\n<p>My Spring Configuration file</p>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:mvc=\"http://www.springframework.org/schema/mvc\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans     \n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n    http://www.springframework.org/schema/context \n    http://www.springframework.org/schema/context/spring-context-3.0.xsd\n    http://www.springframework.org/schema/mvc\n    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\"&gt;\n\n&lt;context:component-scan base-package=\"com.contestframework.controllers\" /&gt;\n\n&lt;bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\"&gt;\n\n&lt;property name=\"mediaTypes\"&gt;\n    &lt;map&gt;\n      &lt;entry key=\"atom\" value=\"application/atom+xml\"/&gt;\n      &lt;entry key=\"html\" value=\"text/html\"/&gt;\n      &lt;entry key=\"json\" value=\"application/json\"/&gt;\n    &lt;/map&gt;\n &lt;/property&gt;\n\n &lt;property name=\"viewResolvers\"&gt;\n &lt;list&gt;\n  &lt;bean class=\"org.springframework.web.servlet.view.BeanNameViewResolver\"/&gt;\n  &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n    &lt;property name=\"prefix\" value=\"/WEB-INF/pages/\"/&gt;\n    &lt;property name=\"suffix\" value=\".jsp\"/&gt;\n  &lt;/bean&gt;\n &lt;/list&gt;\n &lt;/property&gt;\n\n &lt;property name=\"defaultViews\"&gt;\n  &lt;list&gt;\n   &lt;bean class=\"org.springframework.web.servlet.view.json.MappingJacksonJsonView\" /&gt;\n  &lt;/list&gt;\n &lt;/property&gt;\n\n &lt;/bean&gt;\n\n&lt;mvc:annotation-driven /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>After this I just access the Controller using below:</p>\n\n<pre><code>http://domain/SpringWebProject/json/contest/abcd\n</code></pre>\n\n<p>and the response I get is Status 406: \"The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request \"accept\" headers ().\"</p>\n\n<p>I also tried an alternate mechanism by access this using <code>Javascript</code> <code>AJAX</code> to make sure my request header has <code>application/JSON</code> but this led to the same Status 406 result</p>\n\n<pre><code>$.getJSON('contest/abcd', function(data) {\nconsole.log(data) }\n</code></pre>\n\n<p>Here is my REQUEST HEADER captured from browser:</p>\n\n<pre><code>Request URL:http://localhost:8080/SpringWebProject/json/contest/abcd\nRequest Method:GET\nStatus Code:406 Not Acceptable\n\nAccept:application/json, text/javascript, */*; q=0.01\nAccept-Charset:ISO-8859-1,utf-8;q=0.7,*;q=0.3\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:en-US,en;q=0.8\nConnection:keep-alive\nCookie:JSESSIONID=59689C95B0B9C21494EB0AB9D9F7BCCD\nHost:localhost:8080\nReferer:http://localhost:8080/SpringWebProject/json/welcome\nUser-Agent:Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4\nX-Requested-With:XMLHttpRequest\nResponse Headersview source\nContent-Length:1070\nContent-Type:text/html;charset=utf-8\nDate:Fri, 12 Oct 2012 18:23:40 GMT\nServer:Apache-Coyote/1.1\n</code></pre>\n\n<p>Appreciate any help in this regard.</p>\n    ","a":"\n<p>There is nothing wrong in your configuration, let me suggest a few small changes though:</p>\n\n<p>a) Your namespaces appear wrong - they are referring to the 3.0 schemas, just change them to either 3.1 one's or don't refer to the version explicitly, this way for eg.</p>\n\n<pre><code>xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans     \n    http://www.springframework.org/schema/beans/spring-beans.xsd\n</code></pre>\n\n<p>OR </p>\n\n<pre><code>xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans     \n    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\n</code></pre>\n\n<p>b) You don't require the ContentNegotiatingViewResolver, you can remove everything but the <code>component-scan</code> and <code>&lt;mvc:annotation-driven/&gt;</code> from your configuration</p>\n\n<p>c) The request will not directly work from the browser as it explicitly requires an Accept header of \"application/json\" - <code>$.getJson</code> call should work though as it sends the correct headers</p>\n\n<p>d) Remove the <code>headers=Acc..</code> from the @RequestMapping, and produces also, both are filtering criteria to match up the correct mapped method call.</p>\n\n<p>With these, there is no reason why the json should not get served out, can you please try with these and see how it goes.</p>\n    "},{"t":"Dynamic Web Module 3.0 — 3.1","l":"http://stackoverflow.com/questions/19661135/dynamic-web-module-3-0-3-1","q":"\n\n<p>I have a mavenized codebased configured Spring 3.2.4 web app. \nWhen I build the app with Maven/pom.xml first I got an error that web.xml is missing. \nfirst I tried to create an empty web.xml. this was the moment when The project facets changed (and I don't know why). It switched from dynamic Web Module 3.0 to 3.1 and this is irreversible. \nHow can I change it again into Dynamic Web Modules 3.0??? </p>\n\n<p><img src=\"https://i.stack.imgur.com/4pmqT.png\" alt=\"enter image description here\"></p>\n\n<p>Additionally I can't remove the JAX-RS. Trying this it results in:</p>\n\n<pre><code>Failed while uninstalling JAX-RS (REST Web Services) 1.0.\norg.eclipse.jst.javaee.web.internal.impl.WebAppImpl cannot be cast to org.eclipse.jst.j2ee.webapplication.WebApp\n</code></pre>\n\n<p>Later I found out that I can avoid the Maven compile error by inserting the according plugin into pom.xml:</p>\n\n<pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.4&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>\n    ","a":"\n<p>I had similar troubles in eclipse and the only way to fix it for me was to </p>\n\n<ul>\n<li>Remove the web module</li>\n<li>Apply</li>\n<li>Change the module version</li>\n<li>Add the module</li>\n<li>Configure (Further configuration available link at the bottom of the dialog)</li>\n<li>Apply</li>\n</ul>\n\n<p>Just make sure you configure the web module before applying it as by default it will look for your web files in /WebContent/ and this is not what Maven project structure should be.</p>\n\n<p><strong>EDIT</strong>: </p>\n\n<p>Here is a second way in case nothing else helps</p>\n\n<ul>\n<li>Exit eclipse, go to your project in the file system, then to .settings folder. </li>\n<li>Open the <code>org.eclipse.wst.common.project.facet.core.xml</code> , <strong>make backup</strong>, and remove the web module entry.   </li>\n<li>You can also modify the web module version there, but again, no guarantees. </li>\n</ul>\n    "},{"t":"Autowiring spring bean by name using annotation","l":"http://stackoverflow.com/questions/11831261/autowiring-spring-bean-by-name-using-annotation","q":"\n\n<p>In Springs latest version, we can autowire a bean using annotation as <strong>@Autowire</strong>.\nThis will autowire the bean using its type(or constructor, if applied on it).<br>\nIs there any way I can use autowire annotation based on the bean name which we were doing without annotaion in spring's xml file as <strong>autowire=\"byName\"</strong>?</p>\n    ","a":"\n<p>You can use JSR-250 <code>@Resource</code> for by-name bean autowiring, unless you need constructor injection or multi-parameter method injection.</p>\n\n<p>From the docs:</p>\n\n<blockquote>\n  <p>If you intend to express annotation-driven injection by name, do not primarily use @Autowired, even if is technically capable of referring to a bean name through @Qualifier values. Instead, use the JSR-250 @Resource annotation, which is semantically defined to identify a specific target component by its unique name, with the declared type being irrelevant for the matching process.</p>\n</blockquote>\n    "},{"t":"spring 3 autowiring and junit testing","l":"http://stackoverflow.com/questions/3660933/spring-3-autowiring-and-junit-testing","q":"\n\n<p>My code:</p>\n\n<pre><code>@Component\npublic class A {\n    @Autowired\n    private B b;\n\n    public void method() {}\n}\n\npublic interface X {...}\n\n@Component\npublic class B implements X {\n    ...\n}\n</code></pre>\n\n<p>I want to test in isolation class A. Do I have to mock class B? If yes, how? Because it is autowired and there is no setter where i could send the mocked object.</p>\n    ","a":"\n<blockquote>\n  <p>I want to test in isolation class A.</p>\n</blockquote>\n\n<p>You should absolutely mock B, rather than instantiate and inject an instance of B.  The point is to test A whether or not B works, so you should not allow a potentially broken B interfere with the testing of A.</p>\n\n<p>That said, I highly recommend <a href=\"http://mockito.org/\" rel=\"nofollow noreferrer\">Mockito</a>.  As mocking frameworks go, it is extremely easy to use.  You would write something like the following:</p>\n\n<pre><code>@Test\npublic void testA() {\n    A a = new A();\n    B b = Mockito.mock(B.class); // create a mock of B\n    Mockito.when(b.getMeaningOfLife()).thenReturn(42); // define mocked behavior of b\n    ReflectionTestUtils.setField(a, \"b\", b); // inject b into the B attribute of A\n\n    a.method();\n\n    // call whatever asserts you need here\n}\n</code></pre>\n    "},{"t":"Could not resolve Spring property placeholder","l":"http://stackoverflow.com/questions/4779572/could-not-resolve-spring-property-placeholder","q":"\n\n<p>I have my config:</p>\n\n<pre><code>&lt;context:property-placeholder location=\"classpath:idm.properties\" /&gt;\n\n&lt;bean id=\"idmPropertyHolder\" class=\"fi.utu.resurssitilaus.idm.IdmPropertyHolder\"&gt;\n   &lt;property name=\"url\" value=\"${idm.url}\" /&gt; \n    &lt;property name=\"user\" value=\"${idm.user}\" /&gt;\n    &lt;property name=\"password\" value=\"${idm.password}\" /&gt;\n    &lt;property name=\"proxyHost\" value=\"${http.proxyHost}\" /&gt;\n    &lt;property name=\"proxyPort\" value=\"${http.proxyPort}\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>I get the error</p>\n\n<pre><code>    SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener\n    org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'idmPropertyHolder' defined in ServletContext resource [/WEB-INF/idm-config.xml]: Could not resolve placeholder 'idm.url'\n            at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:272)\n            at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75)\n            at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:640)\n            at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:615)\n            at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:405)\n            at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)\n            at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)\n            at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)\n            at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3934)\n            at org.apache.catalina.core.StandardContext.start(StandardContext.java:4429)\n            at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)\n            at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)\n            at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:526)\n            at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:630)\n            at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:514)\n            at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1288)\n            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n            at java.lang.reflect.Method.invoke(Method.java:597)\n            at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)\n            at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)\n            at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)\n            at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1473)\n            at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:824)\n            at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:350)\n            at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)\n            at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n            at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n            at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n            at org.netbeans.modules.web.monitor.server.MonitorFilter.doFilter(MonitorFilter.java:196)\n            at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n            at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n            at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n            at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n            at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)\n            at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n            at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n            at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n            at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n            at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\n            at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n            at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\n            at java.lang.Thread.run(Thread.java:619)\n    24.1.2011 9:19:05 org.apache.catalina.core.ApplicationContext log\n    INFO: Closing Spring root WebApplicationContext\n    24.1.2011 9:19:05 org.apache.catalina.core.ApplicationContext log\n    INFO: Shutting down log4j\n</code></pre>\n\n<p>I know this could be missing properties file, but I have it in my classpath just right. What is missing? </p>\n\n<p>My web.xml:</p>\n\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;\n      /WEB-INF/base-config.xml\n      /WEB-INF/idm-config.xml\n      /WEB-INF/ldap-config.xml\n      /WEB-INF/sec-config.xml\n\n    &lt;/param-value&gt;\n  &lt;/context-param&gt;\n\n  &lt;!-- Reads request input using UTF-8 encoding --&gt;\n  &lt;filter&gt;\n    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n    &lt;init-param&gt;\n      &lt;param-name&gt;encoding&lt;/param-name&gt;\n      &lt;param-value&gt;UTF-8&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n      &lt;param-name&gt;forceEncoding&lt;/param-name&gt;\n      &lt;param-value&gt;true&lt;/param-value&gt;\n    &lt;/init-param&gt;\n  &lt;/filter&gt;\n\n\n  &lt;filter&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n  &lt;/filter&gt;\n\n  &lt;filter-mapping&gt;\n    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n\n\n  &lt;filter-mapping&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n\n  &lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n  &lt;/listener&gt;\n\n\n  &lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n  &lt;/listener&gt;\n\n  &lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.security.web.session.HttpSessionEventPublisher&lt;/listener-class&gt;\n  &lt;/listener&gt;\n\n  &lt;!-- Handles all requests into the application --&gt;\n  &lt;servlet&gt;\n    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n      &lt;param-value&gt;\n        /WEB-INF/app-config.xml\n\n      &lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n  &lt;/servlet&gt;\n\n  &lt;servlet&gt;\n    &lt;servlet-name&gt;tiles&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.apache.tiles.web.startup.TilesServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n      &lt;param-name&gt;\n        org.apache.tiles.impl.BasicTilesContainer.DEFINITIONS_CONFIG\n      &lt;/param-name&gt;\n      &lt;param-value&gt;\n        /WEB-INF/tiles-config.xml\n      &lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;\n  &lt;/servlet&gt;\n\n  &lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n\n  &lt;session-config&gt;\n    &lt;session-timeout&gt;\n      30\n    &lt;/session-timeout&gt;\n  &lt;/session-config&gt;\n\n  &lt;welcome-file-list&gt;\n    &lt;welcome-file&gt;redirect.jsp&lt;/welcome-file&gt;\n  &lt;/welcome-file-list&gt;\n&lt;/web-app&gt;\n</code></pre>\n    ","a":"\n<p>make sure your properties file exist in classpath directory but not in sub folder of your classpath directory. if it is exist in sub folder then write as below classpath:subfolder/idm.properties</p>\n    "},{"t":"annotation equivalent of <aop:scoped-proxy>","l":"http://stackoverflow.com/questions/4503606/annotation-equivalent-of-aopscoped-proxy","q":"\n\n<p>I am moving from an xml config to annoations. i want to convert a session scoped bean that is </p>\n\n<pre><code>&lt;aop:scoped-proxy&gt;\n</code></pre>\n\n<p>can this be done with annotations, and if not, what can i do to still keep that declaration working?</p>\n\n<p><strong>edit:</strong>\nI am interested in doing this in Spring 2.5</p>\n    ","a":"\n<p>in the spring context xml, do something like:</p>\n\n<pre><code>&lt;context:component-scan base-package=\"com.startup.failure\" scoped-proxy=\"interfaces\" /&gt;\n</code></pre>\n\n<p>Note that you would need to write interfaces for all classes in that package, though.</p>\n    "},{"t":"REST with Spring and Jackson full data binding","l":"http://stackoverflow.com/questions/4441557/rest-with-spring-and-jackson-full-data-binding","q":"\n\n<p>I'm using Spring MVC to handle JSON POST requests. Underneath the covers I'm using the MappingJacksonHttpMessageConverter built on the Jackson JSON processor and enabled when you use the mvc:annotation-driven.</p>\n\n<p>One of my services receives a list of actions:</p>\n\n<pre><code>@RequestMapping(value=\"/executeActions\", method=RequestMethod.POST)\n    public @ResponseBody String executeActions(@RequestBody List&lt;ActionImpl&gt; actions) {\n        logger.info(\"executeActions\");\n        return \"ACK\";\n    }\n</code></pre>\n\n<p>I have found that Jackson maps the requestBody to a List of java.util.LinkedHashMap items (simple data binding). Instead, I would like the request to be bound to a List of typed objects (in this case \"ActionImpl\"). </p>\n\n<p>I know this is easy to do if you use Jackson's ObjectMapper directly:</p>\n\n<pre><code>List&lt;ActionImpl&gt; result = mapper.readValue(src, new TypeReference&lt;List&lt;ActionImpl&gt;&gt;() { }); \n</code></pre>\n\n<p>but I was wondering what's the best way to achieve this when using Spring MVC and MappingJacksonHttpMessageConverter.  Any hints?</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>I suspect problem is due to type erasure, i.e. instead of passing generic parameter type, maybe only actions.getClass() is passed; and this would give type equivalent of List&lt; ?&gt;.</p>\n\n<p>If this is true, one possibility would be to use an intermediate sub-class, like:</p>\n\n<pre><code>public class ActionImplList extends ArrayList&lt;ActionImpl&gt; { }\n</code></pre>\n\n<p>because this will the retain type information even if only class is passed.\nSo then:</p>\n\n<pre><code>public @ResponseBody String executeActions(@RequestBody ActionImplList actions)\n</code></pre>\n\n<p>would do the trick. Not optimal but should work.</p>\n\n<p>I hope someone with more Spring MVC knowledge can shed light on why parameter type is not being passed (perhaps it's a bug?), but at least there is a work around.</p>\n    "},{"t":"Spring Dependency Injection with TestNG","l":"http://stackoverflow.com/questions/2608528/spring-dependency-injection-with-testng","q":"\n\n<p>Spring support JUnit quite well on that:\nWith the <code>RunWith</code> and <code>ContextConfiguration</code> annotation, things look very intuitive</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = \"classpath:dao-context.xml\")\n</code></pre>\n\n<p>This test will be able to run both in Eclipse &amp; Maven in correctly.\nI wonder if there is similar stuff for TestNG. I'm considering moving to this \"Next Generation\" Framework but I didn't find a match for testing with Spring.</p>\n    ","a":"\n<p>It works with TestNG as well, you need to subclass <code>org.springframework.test.context.testng.AbstractTestNGSpringContextTests</code> or <code>org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests</code>.</p>\n    "},{"t":"Quartz: Cron expression that will never execute","l":"http://stackoverflow.com/questions/13835221/quartz-cron-expression-that-will-never-execute","q":"\n\n<p>I know there is a duplicate <a href=\"http://stackoverflow.com/questions/8324306/cron-job-that-will-never-execute\">here</a>, which probably is exactly my case, though it would deserve some better explanation, which I will try to provide here.</p>\n\n<p>I work with a Java web application using a Spring application context. In this context, I defined scheduled jobs using Quartz. These jobs are triggered by a cron defined in a .properties file.</p>\n\n<p>The Spring context is embedded within the war, while the .properties file is on the application server (Tomcat in this particular case).</p>\n\n<p>This is just fine and allows to define different crons according to the environment (development, integration, production, ...).</p>\n\n<p>Now, when running this application locally on my own computer, I do not wish these jobs to be executed. Is there a way to write a cron expression which will never trigger?</p>\n    ","a":"\n<h1>Using an expression far in the future</h1>\n\n<p>Made some quick tests using <code>org.quartz.CronExpression</code>.</p>\n\n<pre><code>String exp = \"0 0 0 1 1 ? 3000\";\nboolean valid = CronExpression.isValidExpression(exp);\nSystem.out.println(valid);\nif (valid) {\n    CronExpression cronExpression = new CronExpression(exp);\n    System.out.println(cronExpression.getNextValidTimeAfter(new Date()));\n}\n</code></pre>\n\n<p>When I do <code>String exp = \"# 0 0 0 1 1 ?\";</code>, the <code>isValid</code> test returns <code>false</code>.</p>\n\n<p>With the sample given above yet, the output is the following:</p>\n\n<pre><code>true\nnull\n</code></pre>\n\n<p>Meaning:</p>\n\n<ul>\n<li>the expression is valid;</li>\n<li>there is no upcoming date which matches this expression.</li>\n</ul>\n\n<p>For the scheduler to accept a cron trigger, though, the latter <em>must</em> match a date in the future.</p>\n\n<p>I tried several years and figured out that once the year is above 2300, Quartz seems not to bother anymore (though I did not find a mention to a maximal value for the year <a href=\"http://quartz-scheduler.org/documentation/quartz-2.x/tutorials/tutorial-lesson-06\">in Quartz 2's documentation</a>). There might be a cleaner way to do this, but this will satisfy my needs for now.</p>\n\n<p><strong>So, in the end, the cron I propose is <code>0 0 0 1 1 ? 2200</code>.</strong></p>\n\n<h3>Quartz 1 variant</h3>\n\n<p>Note that, in Quartz 1, <a href=\"http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger\">2099 is the last valid year</a>. You can therefore adapt your cron expression to use <a href=\"http://stackoverflow.com/a/14732997/1734119\">Maciej Matys's suggestion</a>: <code>59 59 23 31 12 ? 2099</code></p>\n\n<h1>Alternative: Using a date in the past</h1>\n\n<p><a href=\"http://stackoverflow.com/users/2192903/arnaud-denoyelle\">Arnaud Denoyelle</a> suggested something more elegant, which my test above validates as a correct expression: instead of choosing a date in a far future, choose it in a far past:</p>\n\n<p><code>0 0 0 1 1 ? 1970</code> (the first valid expression according to Quartz documentation).</p>\n\n<p><strong>This solution does not work though.</strong></p>\n\n<p><a href=\"http://stackoverflow.com/users/3311840/hippofluff\">hippofluff</a> highlighted that Quartz will detect an expression in past will never be executed again and therefore throw an exception.</p>\n\n<pre><code>org.quartz.SchedulerException: Based on configured schedule, the given trigger will never fire.\n</code></pre>\n\n<p>This seems to have been in Quartz <a href=\"https://www.google.com/search?q=Quartz+Based+on+configured+schedule%2C+the+given+trigger+will+never+fire\">for a long time</a>.</p>\n\n<h3>Lessons learned: the test is not foolproof as is</h3>\n\n<p>This highlights a weakness of my test: in case you want to test a <code>CronExpression</code>, remember <strong>it has to have a <code>nextValidTime</code></strong><sup>1</sup>. Otherwise, the scheduler you will pass it to will simply reject it with the above mentioned exception.</p>\n\n<p>I would advise adapting the test code as follows:</p>\n\n<pre><code>String exp = \"0 0 0 1 1 ? 3000\";\nboolean valid = CronExpression.isValidExpression(exp);\nif (valid) {\n    CronExpression cronExpression = new CronExpression(exp);\n    valid = cronExpression.getNextValidTimeAfter(new Date()) != null;\n}\nSystem.out.println(\"Can I use &lt;\" + exp + \"&gt;? \" + (valid ? \"Go ahead!\" : \"This shall fail.\"));\n</code></pre>\n\n<p>There you go: no need to think, just read the output.</p>\n\n<hr>\n\n<p><sub><sup>1</sup> This is the part I forgot when testing Arnaud's solution making me the fool and proving my test wasn't me-proof.</sub></p>\n    "},{"t":"Can not deserialize instance of java.util.ArrayList out of START_OBJECT token","l":"http://stackoverflow.com/questions/20837856/can-not-deserialize-instance-of-java-util-arraylist-out-of-start-object-token","q":"\n\n<p>I'm trying to POST a <code>List</code> of custom objects. \nMy JSON in request body is this:</p>\n\n<pre><code>{\n    \"collection\": [\n        {\n            \"name\": \"Test order1\",\n            \"detail\": \"ahk ks\"\n        },\n        {\n            \"name\": \"Test order2\",\n            \"detail\": \"Fisteku\"\n        }\n    ]\n}\n</code></pre>\n\n<p>Server side code that handles the request:</p>\n\n<pre><code>import java.util.Collection;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\n\n@Path(value = \"/rest/corder\")\npublic class COrderRestService {\n\n    @POST\n    @Produces(MediaType.APPLICATION_JSON)\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response postOrder(Collection&lt;COrder&gt; orders) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (COrder c : orders) {\n            stringBuilder.append(c.toString());\n        }\n        System.out.println(stringBuilder);\n        return Response.ok(stringBuilder, MediaType.APPLICATION_JSON).build();\n    }\n}\n</code></pre>\n\n<p>Entity <code>COrder</code>:</p>\n\n<pre><code>import javax.xml.bind.annotation.XmlRootElement;\n\n@XmlRootElement\npublic class COrder {\n    String name;\n    String detail;\n\n    @Override\n    public String toString() {\n        return \"COrder [name=\" + name + \", detail=\" + detail\n                + \", getClass()=\" + getClass() + \", hashCode()=\" + hashCode()\n                + \", toString()=\" + super.toString() + \"]\";\n    }\n}\n</code></pre>\n\n<p>But an exception is thrown:</p>\n\n<pre><code>SEVERE: Failed executing POST /rest/corder\norg.jboss.resteasy.spi.ReaderException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token\n at [Source: org.apache.catalina.connector.CoyoteInputStream@6de8c535; line: 1, column: 1]\n    at org.jboss.resteasy.core.MessageBodyParameterInjector.inject(MessageBodyParameterInjector.java:183)\n    at org.jboss.resteasy.core.MethodInjectorImpl.injectArguments(MethodInjectorImpl.java:88)\n    at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:111)\n    at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:280)\n    at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:234)\n    at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:221)\n    at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:356)\n    at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:179)\n    at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service(ServletContainerDispatcher.java:220)\n    at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:56)\n    at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:51)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)\n    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:724)\n</code></pre>\n    ","a":"\n<p>The problem is the JSON - this cannot, by default, be deserialized into a <code>Collection</code> because it's not actually a JSON Array - that would look like this: </p>\n\n<pre><code>[\n    {\n        \"name\": \"Test order1\",\n        \"detail\": \"ahk ks\"\n    },\n    {\n        \"name\": \"Test order2\",\n        \"detail\": \"Fisteku\"\n    }\n]\n</code></pre>\n\n<p>Since you're not controlling the exact process of deserialization (RestEasy does) - <strong>a first option</strong> would be to simply inject the JSON as a <code>String</code> and then take control of the deserialization process: </p>\n\n<pre><code>Collection&lt;COrder&gt; readValues = new ObjectMapper().readValue(jsonAsString, new TypeReference&lt;Collection&lt;COrder&gt;&gt;() { });\n</code></pre>\n\n<p>You would loose a bit of the convenience of not having to do that yourself, but you would easily sort out the problem. </p>\n\n<p><strong>Another option</strong> - if you cannot change the JSON - would be to construct a wrapper to fit the structure of your JSON input - and use that instead of <code>Collection&lt;COrder&gt;</code>. </p>\n\n<p>Hope this helps. </p>\n    "},{"t":"Where should “@Transactional” be place Service Layer or DAO","l":"http://stackoverflow.com/questions/3886909/where-should-transactional-be-place-service-layer-or-dao","q":"\n\n<p>Firstly it is possible that I am asking something that has been asked and answered before but I could not get a search result back . Okay generally (or always so far:) ) We define transactional annotations on service layer typical spring hibernate crud is usually</p>\n\n<p><em>Controller-&gt;Manager-&gt;Dao-&gt;Orm .</em></p>\n\n<p>I now have a situation where I need to choose between the domain model based on client site . \nSay client A is using my domain model all is good but then an other client site would give me a web service and not be using our domain model .</p>\n\n<p>Which layer should I be replacing . I believe it has to be Dao which will be getting me data from web service and sending it back.i.e two separately written Dao layers and plugged in based on scenario .</p>\n\n<p>I have now realized that we have been doing tight coupling (if there is such a thing or say not having loose coupling) when we put @Transactional in Service layer . So many brains can not be wrong or are they (I doubt it). </p>\n\n<p>So question is \"Where should \"@Transactional\" be place Service Layer or DAO ?\" and is it service layer downwards I should be replacing .</p>\n    ","a":"\n<p>Ideally, Service layer(Manager) represents your business logic and hence it should be annotated with @Transactional.</p>\n\n<p>Service layer may call different DAO to perform DB operations. Lets assume a situations where you have 3 DAO operations in a service method. If your 1st DAO operation failed, other two may be still passed and you will end up inconsistent DB state. Annotating Service layer can save you from such situations.</p>\n    "},{"t":"Hibernate/Spring: failed to lazily initialize - no session or session was closed","l":"http://stackoverflow.com/questions/3041259/hibernate-spring-failed-to-lazily-initialize-no-session-or-session-was-closed","q":"\n\n<p><strong>For an answer scroll down to the end of this...</strong></p>\n\n<p>The basic problem is the same as asked multiple time. I have a simple program with two POJOs Event and User - where a user can have multiple events.</p>\n\n<pre><code>@Entity\n@Table\npublic class Event {\n private Long id;\n private String name;\n private User user;\n\n @Column\n @Id\n @GeneratedValue\n public Long getId() {return id;}\n public void setId(Long id) { this.id = id; }\n\n @Column\n public String getName() {return name;}\n public void setName(String name) {this.name = name;}\n\n @ManyToOne\n @JoinColumn(name=\"user_id\")\n public User getUser() {return user;}\n public void setUser(User user) {this.user = user;}\n\n}\n</code></pre>\n\n<p>The User:</p>\n\n<pre><code>@Entity\n@Table\npublic class User {\n private Long id;\n private String name;\n private List&lt;Event&gt; events;\n\n @Column\n @Id\n @GeneratedValue\n public Long getId() { return id; }\n public void setId(Long id) { this.id = id; }\n\n @Column\n public String getName() { return name; }\n public void setName(String name) { this.name = name; }\n\n @OneToMany(mappedBy=\"user\", fetch=FetchType.LAZY)\n public List&lt;Event&gt; getEvents() { return events; }\n public void setEvents(List&lt;Event&gt; events) { this.events = events; }\n\n}\n</code></pre>\n\n<p>Note: This is a sample project. I <strong>really</strong> want to use Lazy fetching here.</p>\n\n<p>Now we need to configure spring and hibernate and have a simple basic-db.xml for loading:</p>\n\n<pre><code>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n           http://www.springframework.org/schema/aop \n           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt;\n\n\n &lt;bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n  destroy-method=\"close\"  scope=\"thread\"&gt;\n  &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" /&gt;\n  &lt;property name=\"url\" value=\"jdbc:mysql://192.168.1.34:3306/hibernateTest\" /&gt;\n  &lt;property name=\"username\" value=\"root\" /&gt;\n  &lt;property name=\"password\" value=\"\" /&gt;\n  &lt;aop:scoped-proxy/&gt;\n &lt;/bean&gt;\n\n &lt;bean class=\"org.springframework.beans.factory.config.CustomScopeConfigurer\"&gt;\n  &lt;property name=\"scopes\"&gt;\n   &lt;map&gt;\n    &lt;entry key=\"thread\"&gt;\n     &lt;bean class=\"org.springframework.context.support.SimpleThreadScope\" /&gt;\n    &lt;/entry&gt;\n   &lt;/map&gt;\n  &lt;/property&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"mySessionFactory\"\n  class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\" scope=\"thread\"&gt;\n  &lt;property name=\"dataSource\" ref=\"myDataSource\" /&gt;\n  &lt;property name=\"annotatedClasses\"&gt;\n   &lt;list&gt;\n    &lt;value&gt;data.model.User&lt;/value&gt;\n    &lt;value&gt;data.model.Event&lt;/value&gt;\n   &lt;/list&gt;\n  &lt;/property&gt;\n  &lt;property name=\"hibernateProperties\"&gt;\n   &lt;props&gt;\n    &lt;prop key=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;\n    &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n    &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/prop&gt;\n   &lt;/props&gt;\n  &lt;/property&gt;\n  &lt;aop:scoped-proxy/&gt;\n\n &lt;/bean&gt;\n\n &lt;bean id=\"myUserDAO\" class=\"data.dao.impl.UserDaoImpl\"&gt;\n  &lt;property name=\"sessionFactory\" ref=\"mySessionFactory\" /&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"myEventDAO\" class=\"data.dao.impl.EventDaoImpl\"&gt;\n  &lt;property name=\"sessionFactory\" ref=\"mySessionFactory\" /&gt;\n &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code>\n</pre>\n\n<p>Note: I played around with the CustomScopeConfigurer and SimpleThreadScope, but that didnt change anything.</p>\n\n<p>I have a simple dao-impl (only pasting the userDao - the EventDao is pretty much the same - except with out the \"listWith\" function:</p>\n\n<pre><code>\npublic class UserDaoImpl implements UserDao{\n\n private HibernateTemplate hibernateTemplate;\n\n public void  setSessionFactory(SessionFactory sessionFactory) {\n  this.hibernateTemplate = new HibernateTemplate(sessionFactory);\n\n }\n\n @SuppressWarnings(\"unchecked\")\n @Override\n public List listUser() {\n  return hibernateTemplate.find(\"from User\");\n }\n\n @Override\n public void saveUser(User user) {\n  hibernateTemplate.saveOrUpdate(user);\n\n }\n\n @Override\n public List listUserWithEvent() {\n\n  List users = hibernateTemplate.find(\"from User\");\n  for (User user : users) {\n   System.out.println(\"LIST : \" + user.getName() + \":\");\n   user.getEvents().size();\n  }\n  return users;\n }\n\n}\n</code>\n</pre>\n\n<p>I am getting the org.hibernate.LazyInitializationException - failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed at the line with <em>user.getEvents().size()</em>;</p>\n\n<p>And last but not least here is the Test class I use:</p>\n\n<pre><code>\npublic class HibernateTest {\n\n public static void main(String[] args) {\n\n  ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\"basic-db.xml\");\n\n\n  UserDao udao = (UserDao) ac.getBean(\"myUserDAO\");\n  EventDao edao = (EventDao) ac.getBean(\"myEventDAO\");\n\n\n  System.out.println(\"New user...\");\n  User user = new User();\n  user.setName(\"test\");\n\n  Event event1 = new Event();\n  event1.setName(\"Birthday1\");\n  event1.setUser(user);\n\n  Event event2 = new Event();\n  event2.setName(\"Birthday2\");\n  event2.setUser(user);\n\n  udao.saveUser(user);\n  edao.saveEvent(event1);\n  edao.saveEvent(event2);\n\n  List users = udao.listUserWithEvent();\n  System.out.println(\"Events for users\");\n  for (User u : users) {\n\n   System.out.println(u.getId() + \":\" + u.getName() + \" --\");\n   for (Event e : u.getEvents())\n   {\n    System.out.println(\"\\t\" + e.getId() + \":\" + e.getName());\n   }\n  }\n\n  ((ConfigurableApplicationContext)ac).close();\n }\n\n}\n</code>\n</pre>\n\n<p>and here is the Exception:</p>\n\n<pre>1621 [main] ERROR org.hibernate.LazyInitializationException - failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:380)\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:372)\n at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:119)\n at org.hibernate.collection.PersistentBag.size(PersistentBag.java:248)\n at data.dao.impl.UserDaoImpl.listUserWithEvent(UserDaoImpl.java:38)\n at HibernateTest.main(HibernateTest.java:44)\nException in thread \"main\" org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:380)\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:372)\n at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:119)\n at org.hibernate.collection.PersistentBag.size(PersistentBag.java:248)\n at data.dao.impl.UserDaoImpl.listUserWithEvent(UserDaoImpl.java:38)\n at HibernateTest.main(HibernateTest.java:44)\n</pre>\n\n<p>Things tried but did not work:</p>\n\n<ul>\n<li>assign a threadScope and using beanfactory (I used \"request\" or \"thread\" - no difference noticed):</li>\n</ul>\n\n<pre>  // scope stuff\n  Scope threadScope = new SimpleThreadScope();\n  ConfigurableListableBeanFactory beanFactory = ac.getBeanFactory();\n  beanFactory.registerScope(\"request\", threadScope);\n  ac.refresh();\n...\n</pre>\n\n<ul>\n<li>Setting up a transaction by getting the session object from the deo:</li>\n</ul>\n\n<pre>...\n  Transaction tx = ((UserDaoImpl)udao).getSession().beginTransaction();\n  tx.begin();\n  users = udao.listUserWithEvent();\n...\n</pre>\n\n<ul>\n<li>getting a transaction within the listUserWithEvent()</li>\n</ul>\n\n<pre> public List listUserWithEvent() {\n  SessionFactory sf = hibernateTemplate.getSessionFactory();\n  Session s = sf.openSession();\n  Transaction tx = s.beginTransaction();\n  tx.begin();\n\n  List users = hibernateTemplate.find(\"from User\");\n  for (User user : users) {\n   System.out.println(\"LIST : \" + user.getName() + \":\");\n   user.getEvents().size();\n  }\n  tx.commit();\n  return users;\n }\n</pre>\n\n<p>I am really out of ideas by now. Also, using the listUser or listEvent just work fine. </p>\n\n<p><strong>Step forward:</strong></p>\n\n<p>Thanks to Thierry I got one step further (I think). I created the MyTransaction class and do my whole work in there, getting everything from spring. The new main looks like this:</p>\n\n<pre><code>\n public static void main(String[] args) {\n\n  ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\"basic-db.xml\");\n\n  // getting dao\n  UserDao udao = (UserDao) ac.getBean(\"myUserDAO\");\n  EventDao edao = (EventDao) ac.getBean(\"myEventDAO\");\n\n  // gettting transaction template\n  TransactionTemplate transactionTemplate = (TransactionTemplate) ac.getBean(\"transactionTemplate\");\n\n  MyTransaction mt = new MyTransaction(udao, edao);\n  transactionTemplate.execute(mt);\n\n  ((ConfigurableApplicationContext)ac).close();\n }\n</code>\n</pre>\n\n<p>Unfortunately now there is a null-pointer Exception @: user.getEvents().size(); (in the daoImpl). </p>\n\n<p>I know that it should not be null (neither from the output in the console nor from the db layout). </p>\n\n<p>Here is the console output for more information (I did a check for user.getEvent() == null and printed \"EVENT is NULL\"):</p>\n\n<pre>New user...\nHibernate: insert into User (name) values (?)\nHibernate: insert into User (name) values (?)\nHibernate: insert into Event (name, user_id) values (?, ?)\nHibernate: insert into Event (name, user_id) values (?, ?)\nHibernate: insert into Event (name, user_id) values (?, ?)\nList users:\nHibernate: select user0_.id as id0_, user0_.name as name0_ from User user0_\n1:User1\n2:User2\nList events:\nHibernate: select event0_.id as id1_, event0_.name as name1_, event0_.user_id as user3_1_ from Event event0_\n1:Birthday1 for 1:User1\n2:Birthday2 for 1:User1\n3:Wedding for 2:User2\nHibernate: select user0_.id as id0_, user0_.name as name0_ from User user0_\nEvents for users\n1:User1 --\nEVENT is NULL\n2:User2 --\nEVENT is NULL\n</pre>\n\n<p>You can get the sample project from <a href=\"http://www.gargan.org/code/hibernate-test1.tgz\" rel=\"nofollow noreferrer\">http://www.gargan.org/code/hibernate-test1.tgz</a> (it's an eclipse/maven project)</p>\n\n<p><strong>The solution (for console applications)</strong></p>\n\n<p>There are actually two solutions for this problem - depending on your environment:</p>\n\n<p>For a console application you need a transaction template which captures the actutal db logic and takes care of the transaction:</p>\n\n<pre><code>\npublic class UserGetTransaction implements TransactionCallback{\n\n public List users;\n\n protected ApplicationContext context;\n\n public UserGetTransaction (ApplicationContext context) {\n  this.context = context;\n }\n\n @Override\n public Boolean doInTransaction(TransactionStatus arg0) {\n  UserDao udao = (UserDao) ac.getBean(\"myUserDAO\");\n  users = udao.listUserWithEvent();\n  return null;\n }\n\n}\n</code>\n</pre>\n\n<p>You can use this by calling:</p>\n\n<pre><code>\n TransactionTemplate transactionTemplate = (TransactionTemplate) context.getBean(\"transactionTemplate\");\n UserGetTransaction mt = new UserGetTransaction(context);\n transactionTemplate.execute(mt);\n</code>\n</pre>\n\n<p>In order for this to work you need to define the template class for spring (ie. in your basic-db.xml):</p>\n\n<pre><code>&lt;bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\"&gt;\n    &lt;property name=\"transactionManager\" ref=\"transactionManager\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p><strong>Another (possible) solution</strong></p>\n\n<p>thanks andi</p>\n\n<pre><code>    PlatformTransactionManager transactionManager = (PlatformTransactionManager) applicationContext.getBean(\"transactionManager\");\n    DefaultTransactionAttribute transactionAttribute = new DefaultTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED);\n\ntransactionAttribute.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);\n    TransactionStatus status = transactionManager.getTransaction(transactionAttribute);\n    boolean success = false;\n    try {\n      new UserDataAccessCode().execute();\n      success = true;\n    } finally {\n      if (success) {\n        transactionManager.commit(status);\n      } else {\n        transactionManager.rollback(status);\n      }\n    }\n</code></pre>\n\n<p><strong>The solution (for servlets)</strong></p>\n\n<p>Servlets are not that big of a problem. When you have a servlet you can simply start and bind a transaction at the beginning of your function and unbind it again at the end:</p>\n\n<pre><code>public void doGet(...) {\n  SessionFactory sessionFactory = (SessionFactory) context.getBean(\"sessionFactory\");\n  Session session = SessionFactoryUtils.getSession(sessionFactory, true);\n  TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(session));\n\n// Your code....\n\n  TransactionSynchronizationManager.unbindResource(sessionFactory);\n}\n</code></pre>\n    ","a":"\n<p>I think you should not use the hibernate session transactional methods, but let spring do that.</p>\n\n<p>Add this to your spring conf:</p>\n\n<pre><code>&lt;bean id=\"txManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n    &lt;property name=\"sessionFactory\" ref=\"mySessionFactory\" /&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\"&gt;\n    &lt;property name=\"transactionManager\" ref=\"txManager\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>and then I would modify your test method to use the spring transaction template:</p>\n\n<pre><code>public static void main(String[] args) {\n    // init here (getting dao and transaction template)\n\n    transactionTemplate.execute(new TransactionCallback() {\n        @Override\n        public Object doInTransaction(TransactionStatus status) {\n          // do your hibernate stuff in here : call save, list method, etc\n        }\n    }\n}\n</code></pre>\n\n<p>as a side note, @OneToMany associations are lazy by default, so you don't need to annotate it lazy. (@*ToMany are LAZY by default, @*ToOne are EAGER by default)</p>\n\n<p>EDIT: here is now what is happening from hibernate point of view:</p>\n\n<ul>\n<li>open session (with transaction start)</li>\n<li>save a user and keep it in the session (see the session cache as an entity hashmap where the key is the entity id)</li>\n<li>save an event and keep it in the session</li>\n<li>save another event and keep it in the session</li>\n<li><p>... same with all the save operations ...</p></li>\n<li><p>then load all users (the \"from Users\" query)</p></li>\n<li>at that point hibernate see that it has already the object in its session, so discard the one it got from the request and return the one from the session.</li>\n<li>your user in the session does not have its event collection initialized, so you get null.</li>\n<li>...</li>\n</ul>\n\n<p>Here are some points to enhance your code:</p>\n\n<ul>\n<li>in your model, when collection ordering is not needed, use Set, not List for your collections (private Set events, not private List events)</li>\n<li>in your model, type your collections, otherwise hibernate won't which entity to fetch (private Set&lt;Event&gt; events)</li>\n<li>when you set one side of a bidirectional relation, and you wish to use the mappedBy side of the relation in the same transaction, set both sides. Hibernate will not do it for you before the next tx (when the session is a fresh view from the db state).</li>\n</ul>\n\n<p>So to address the point above, either do the save in one transaction, and the loading in another one :</p>\n\n<pre><code>public static void main(String[] args) {\n    // init here (getting dao and transaction template)\n    transactionTemplate.execute(new TransactionCallback() {\n        @Override\n        public Object doInTransaction(TransactionStatus status) {\n          // save here\n        }\n    }\n\n    transactionTemplate.execute(new TransactionCallback() {\n        @Override\n        public Object doInTransaction(TransactionStatus status) {\n          // list here\n        }\n    }\n}\n</code></pre>\n\n<p>or set both sides:</p>\n\n<pre><code>...\nevent1.setUser(user);\n...\nevent2.setUser(user);\n...\nuser.setEvents(Arrays.asList(event1,event2));\n...\n</code></pre>\n\n<p>(Also do not forget to address the code enhancement points above, Set not List, collection typing)</p>\n    "},{"t":"Getting started with Spring 3 Web MVC - Setting everything up","l":"http://stackoverflow.com/questions/2260552/getting-started-with-spring-3-web-mvc-setting-everything-up","q":"\n\n<p>I'm trying to get started with JAVA/Eclipse/Spring MVC but can't seem to find a \"dummies\" or \"step-by-step\" guide for setting everything up and creating the simplest proof-of-concept application.</p>\n\n<p>I found <a href=\"http://static.springsource.org/docs/...-step-by-step/\" rel=\"nofollow noreferrer\">http://static.springsource.org/docs/...-step-by-step/</a> but there seem to be differences between Spring 2.5 and Spring 3 so i'm looking for something for Spring 3. </p>\n\n<p>Also, the tutorial for Spring 2.5 focuses on building the application usign Ant - This i will certainly be doing for releasing but when working within Eclipse i want to have set up the project so that i can use breakpoints/debugging and this is not covered at all.</p>\n\n<p>I've downloaded Eclipse, Tomcat and the Spring 3 Framework but that's about it and within the downloaded Spring Framework documentation it states:</p>\n\n<blockquote>\n  <p>2.3 New getting started tutorial</p>\n  \n  <p>There is now a new getting started tutorial\n  for developing a basic Spring 3.0 MVC\n  web application. This tutorial is a\n  separate document that can be found at\n  the <a href=\"http://www.springsource.org/documentation\" rel=\"nofollow noreferrer\">Spring Documentation page</a></p>\n</blockquote>\n\n<p>However, i can't seem to find such a tutorial on the linked page. My main problem at the moment, as seems to be the case for many people trying to get started with Spring, is that i can't seem to get everything set up.</p>\n\n<p>I've got a copy of <a href=\"http://rads.stackoverflow.com/amzn/click/159059584X\" rel=\"nofollow noreferrer\">Expert Spring MVC and Web Flow</a> and i've also found <a href=\"http://www.vaannila.com/spring/spring-mvc-tutorial-1.html\" rel=\"nofollow noreferrer\">this tutorial</a> but i don't know if the setups they describe are still relevant and whether they will allow debugging.</p>\n\n<p>Can anyone please give some direction?</p>\n\n<p>Thanks </p>\n    ","a":"\n<p>There is a major difference in Spring 2.5 and Spring 3.x, Spring 3 or later introduces Annotations based bean wiring and dependency injection. \nThe nice step by step tutorial i found is <a href=\"http://www.journaldev.com/3531/spring-mvc-hibernate-mysql-integration-crud-example-tutorial\" rel=\"nofollow\">http://www.journaldev.com/3531/spring-mvc-hibernate-mysql-integration-crud-example-tutorial</a></p>\n    "},{"t":"Transaction marked as rollback only: How do I find the cause","l":"http://stackoverflow.com/questions/19302196/transaction-marked-as-rollback-only-how-do-i-find-the-cause","q":"\n\n<p>I am having issues with committing a transaction within my @Transactional method:</p>\n\n<pre><code>methodA() {\n    methodB()\n}\n\n@Transactional\nmethodB() {\n    ...\n    em.persist();\n    ...\n    em.flush();\n    log(\"OK\");\n}\n</code></pre>\n\n<p>When I call methodB() from methodA(), the method passes successfuly and I can see \"OK\" in my logs. But then I get </p>\n\n<pre><code>Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly\n    at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:521)\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393)\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n    at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:622)\n    at methodA()...\n</code></pre>\n\n<ol>\n<li>The context of methodB is completely missign in the exception - which is okay I suppose?</li>\n<li>Something within the methodB() marked the transaction as rollback only? How can I find it out? Is there for instance a way to check something like <code>getCurrentTransaction().isRollbackOnly()?</code> - like this I could step through the method and find the cause.</li>\n</ol>\n    ","a":"\n<p>I finally understood the problem:</p>\n\n<pre><code>methodA() {\n    methodB()\n}\n\n@Transactional(noRollbackFor = Exception.class)\nmethodB() {\n    ...\n    try {\n        methodC()\n    } catch (...) {...}\n    log(\"OK\");\n}\n\n@Transactional\nmethodC() {\n    throw new ...();\n}\n</code></pre>\n\n<p>What happens is that even though the <code>methodB</code> has the right annotation, the <code>methodC</code> does not. When the exception is thrown, the second <code>@Transactional</code> marks the first transaction as Rollback only anyway.</p>\n    "},{"t":"Telling IntelliJ IDEA which methods not to identify as unused","l":"http://stackoverflow.com/questions/5283972/telling-intellij-idea-which-methods-not-to-identify-as-unused","q":"\n\n<p>IntelliJ IDEA has a handy feature to detect unused methods and show them in grey, hinting a potential warning for dead code.</p>\n\n<p>Some methods, however, are not executed directly but via reflection. A good example would be <code>@RequestMapping</code>-annotated methods which are executed by Spring. IntelliJ has decent Spring integration hence it detects this annotation and does not mark such a method as unused.</p>\n\n<p>I have a tiny AJAX framework where I use my own annotation to point which method to execute based on certain HTTP request properties (very similar to what <code>@RequestMapping</code> is doing). Understandably, IntelliJ has no idea what does my annotation stand for and and marks such a method as unused, adding unnecessary noise.</p>\n\n<p>I was thinking of:</p>\n\n<ul>\n<li>annotating my annotation with another annotation, but are there any standard ones that would do the job without any extra effort?</li>\n<li>finding a particular setting in IntelliJ to identify custom annotation for marking methods as used, but this would require other team members to do the same, basically a pain.</li>\n</ul>\n\n<p>Can anyone suggest any ideas how to solve this problem?</p>\n    ","a":"\n<p>You can tell IntelliJ to not to warn about used for any method/field annotated with the annotation the \"unused\" method has. </p>\n\n<p>It should be a quick fix all you have to do is hit &lt;Alt&gt;+&lt;Enter&gt; and select <code>Suppress for methods annotated by ...</code></p>\n\n<p>You don't need to add anything to you code and you only have to do this once per annotation.</p>\n\n<p><img src=\"https://i.stack.imgur.com/1O95H.png\" alt=\"enter image description here\"></p>\n    "},{"t":"Avoid Jackson serialization on non fetched lazy objects","l":"http://stackoverflow.com/questions/21708339/avoid-jackson-serialization-on-non-fetched-lazy-objects","q":"\n\n<p>I have a simple controller that return a User object, this user have a attribute coordinates that have the hibernate property FetchType.LAZY.</p>\n\n<p>When I try to get this user, I always have to load all the coordinates to get the user object, otherwise when Jackson try to serialize the User throws the exception:</p>\n\n<blockquote>\n  <p>com.fasterxml.jackson.databind.JsonMappingException: could not initialize proxy - no Session</p>\n</blockquote>\n\n<p>This is due to Jackson is trying to fetch this unfetched object. Here are the objects:</p>\n\n<pre><code>public class User{\n\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\")\n    @JsonManagedReference(\"user-coordinate\")\n    private List&lt;Coordinate&gt; coordinates;\n}\n\npublic class Coordinate {\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\", nullable = false)\n    @JsonBackReference(\"user-coordinate\")\n    private User user;\n}\n</code></pre>\n\n<p>And the controller:</p>\n\n<pre><code>@RequestMapping(value = \"/user/{username}\", method=RequestMethod.GET)\npublic @ResponseBody User getUser(@PathVariable String username) {\n\n    User user = userService.getUser(username);\n\n    return user;\n\n}\n</code></pre>\n\n<p>There is a way to tell Jackson to not serialize the unfetched objects? I've been looking other answers posted 3 years ago implementing jackson-hibernate-module. But probably it could be achieved with a new jackson feature.</p>\n\n<p>My versions are:</p>\n\n<ul>\n<li>Spring 3.2.5 </li>\n<li>Hibernate 4.1.7 </li>\n<li>Jackson 2.2</li>\n</ul>\n\n<p>Thanks in advance.</p>\n    ","a":"\n<p>I finally found the solution! thanks to indybee for giving me a clue.</p>\n\n<p>The tutorial <a href=\"http://blog.pastelstudios.com/2012/03/12/spring-3-1-hibernate-4-jackson-module-hibernate/\">Spring 3.1, Hibernate 4 and Jackson-Module-Hibernate</a> have a good solution for Spring 3.1 and earlier versions. But since version 3.1.2 Spring have his own <strong>MappingJackson2HttpMessageConverter</strong> with almost the same functionality as the one in the tutorial, so we don't need to create this custom HTTPMessageConverter.</p>\n\n<p>With javaconfig we don't need to create a <strong>HibernateAwareObjectMapper</strong> too, we just need to add the <strong>Hibernate4Module</strong> to the default <strong>MappingJackson2HttpMessageConverter</strong> that Spring already have and add it to the HttpMessageConverters of the application, so we need to:</p>\n\n<ol>\n<li><p>Extend our spring config class from <strong>WebMvcConfigurerAdapter</strong> and override the method <strong>configureMessageConverters</strong>. </p></li>\n<li><p>On that method add the <strong>MappingJackson2HttpMessageConverter</strong> with the <strong>Hibernate4Module</strong> registered in a previus method.</p></li>\n</ol>\n\n<p>Our config class should look like this:</p>\n\n<pre><code>@Configuration\n@EnableWebMvc\npublic class MyConfigClass extends WebMvcConfigurerAdapter{\n\n    //More configuration....\n\n    /* Here we register the Hibernate4Module into an ObjectMapper, then set this custom-configured ObjectMapper\n     * to the MessageConverter and return it to be added to the HttpMessageConverters of our application*/\n    public MappingJackson2HttpMessageConverter jacksonMessageConverter(){\n        MappingJackson2HttpMessageConverter messageConverter = new MappingJackson2HttpMessageConverter();\n\n        ObjectMapper mapper = new ObjectMapper();\n        //Registering Hibernate4Module to support lazy objects\n        mapper.registerModule(new Hibernate4Module());\n\n        messageConverter.setObjectMapper(mapper);\n        return messageConverter;\n\n    }\n\n    @Override\n    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {\n        //Here we add our custom-configured HttpMessageConverter\n        converters.add(jacksonMessageConverter());\n        super.configureMessageConverters(converters);\n    }\n\n    //More configuration....\n}\n</code></pre>\n\n<p>If you have an xml configuration, you don't need to create your own MappingJackson2HttpMessageConverter either, but you do need to create the personalized mapper that appears in the tutorial (HibernateAwareObjectMapper), so your xml config should look like this:</p>\n\n<pre><code>&lt;mvc:message-converters&gt;\n    &lt;bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"&gt;\n        &lt;property name=\"objectMapper\"&gt;\n            &lt;bean class=\"com.pastelstudios.json.HibernateAwareObjectMapper\" /&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n&lt;/mvc:message-converters&gt;\n</code></pre>\n\n<p>Hope this answer be understandable and helps someone find the solution for this problem, any questions feel free to ask!</p>\n    "},{"t":"How do I configure Spring and SLF4J so that I can get logging?","l":"http://stackoverflow.com/questions/3387441/how-do-i-configure-spring-and-slf4j-so-that-i-can-get-logging","q":"\n\n<p>I've got a maven &amp; spring app that I want logging in. I'm keen to use SLF4J.</p>\n\n<p>I want to put all my config files into a directory {classpath}/config including log4j.xml and then init using a spring bean.</p>\n\n<p>e.g.</p>\n\n<pre><code>&lt;bean id=\"log4jInitialization\" class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;\n    &lt;property name=\"targetClass\" value=\"org.springframework.util.Log4jConfigurer\"/&gt;\n    &lt;property name=\"targetMethod\" value=\"initLogging\"/&gt;\n    &lt;property name=\"arguments\"&gt;\n        &lt;list&gt;\n            &lt;value&gt;classpath:config/log4j.xml&lt;/value&gt;\n        &lt;/list&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>However I get this warning and no logging.</p>\n\n<blockquote>\n  <p>log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext).\n  log4j:WARN Please initialize the log4j system properly.\n  log4j:WARN See <a href=\"http://logging.apache.org/log4j/1.2/faq.html#noconfig\" rel=\"nofollow noreferrer\">http://logging.apache.org/log4j/1.2/faq.html#noconfig</a> for more info.</p>\n</blockquote>\n\n<p>I've googled around and can't find a simple example on setting this up. Any ideas?</p>\n    ","a":"\n<p>In addition to Jatin's answer:</p>\n\n<p>Spring uses Jakarta Commons Logging as a logging API. In order to log to slf4j, you need to make sure <code>commons-logging</code> is not on the classpath. <code>jcl-over-slf4j</code> is a replacement jar for commons-logging.</p>\n\n<p>If you're using maven, you can detect where commons-logging comes from using <code>mvn dependency:tree</code> and exclude it from all dependencies that require it using dependency exclusions. You might need to run <code>mvn dependency:tree</code> several times though, because it only shows the first occurence of a transitive dependency.</p>\n\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n  &lt;version&gt;${org.springframework.version}&lt;/version&gt;\n  &lt;exclusions&gt;\n    &lt;exclusion&gt;\n      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n      &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n    &lt;/exclusion&gt;\n  &lt;/exclusions&gt;\n&lt;/dependency&gt;\n</code></pre>\n    "},{"t":"Difference between Spring annotations","l":"http://stackoverflow.com/questions/12229282/difference-between-spring-annotations","q":"\n\n<p><strong>Questions:</strong>  </p>\n\n<p>1) Difference between <code>@Component</code> and <code>@Configuration</code>?  </p>\n\n<p>I have read that both remove the necessity of wiring code to be put in XML, but did not get the difference between these.</p>\n\n<p>2) What are the differences between <code>@Autowired</code>, <code>@Inject</code> and <code>@Resource</code>?<br>\n- Which one to use when?<br>\n- What are the pros/cons of each?</p>\n    ","a":"\n<p><code>@Component</code> and <code>@Configuration</code> are indeed very different types of annotations.</p>\n\n<p><code>@Component</code> and similar annotations (<code>@Service</code>, <code>@Repository</code>, etc. )and its <a href=\"http://jcp.org/aboutJava/communityprocess/final/jsr330/index.html\">JSR-330</a> counterpart <code>@Named</code> allow you to declare beans that are to be picked up by autoscanning with  <code>&lt;context:component-scan/&gt;</code> or <code>@ComponentScan</code> they register the bean definition for the classes, so they are roughly equivalent to declaring the specified beans with the <code>&lt;bean ... /&gt;</code> tag in XML. This bean types will adhere to the standard proxy creation policies.   </p>\n\n<p><code>@Configuration</code> annotation was designed as the replacement of the XML configuration file. To create <code>@Configuration</code> annotated beans, Spring will always use <code>CGLIB</code> to subclass the <code>@Configuration</code> annotated class, overriding its <code>@Bean</code> annotated method to replace it with the bean lookup method to make singleton beans to be created only once. (Spring does not use <code>CGLIB</code> to intercept <em>internal</em> method calls of <em>normal</em> Spring beans, it creates a separate instance of proxy instead(same way like JDK proxy does). Doing so allows to use proxies to avoid cardinality mismatch - for example a proxy singleton can fetch current session bean, which is not possible with class inheritance only. ). Despite that, <code>@Configuration</code> annotated classes are still able to use annotated(<code>@Autowired</code>, <code>@Inject</code> etc.) fields and properties to request beans (and even other <code>@Configuration</code> annotated beans too) from the container.</p>\n\n<p><strong>Example</strong> from 4.12.5 section of the <a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-java\">documentation</a></p>\n\n<pre><code>@Configuration\npublic class AppConfig {\n\n  @Bean\n  public ClientService clientService1() {\n    ClientServiceImpl clientService = new ClientServiceImpl();\n    clientService.setClientDao(clientDao());\n    return clientService;\n  }\n  @Bean\n  public ClientService clientService2() {\n    ClientServiceImpl clientService = new ClientServiceImpl();\n    clientService.setClientDao(clientDao());\n    return clientService;\n  }\n\n  @Bean\n  public ClientDao clientDao() {\n    return new ClientDaoImpl();\n  }\n}\n</code></pre>\n\n<p>in the example above only one <code>ClientDao</code> instance will be created.        </p>\n\n<p><code>@Autowired</code> is Spring annotation, while <code>@Inject</code> is a JSR-330 annotation.\n<code>@Inject</code> is equivalent to <code>@Autowired</code> or <code>@Autowired(required=true)</code>, but you can't get <code>@Autowired(required=false)</code> behavior with the JSR-330 <code>@Inject</code>annotation. This annotation always uses by-type autowiring.</p>\n\n<p>Spring implements <a href=\"http://jcp.org/en/jsr/detail?id=250\">JSR-250</a> <code>@Resource</code> annotation in a rather special way. <code>@Resource</code> was originally designed for locating JNDI resources in Java EE, but Spring widens it applicability making it possible to wire to any bean in the container(JNDI resources are available as beans with the help of <a href=\"http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/jndi/support/SimpleJndiBeanFactory.html\">SimpleJndiBeanFactory</a>). \nThe name of the corresponding bean can be specified as <code>name</code> attribute of <code>@Resource</code> annotation, if no name was specified, then the name of the annotated field or property will be used. Another strange feature is that if no bean with the property name was found spring will fallback to by-type wiring.</p>\n\n<p><strong>Example</strong>\nImagine that we have an <code>AlphaClass</code> bean named <em>beanAlpha</em> and a <code>BetaClass</code> bean <em>beanBeta</em> in the container.</p>\n\n<pre><code>@Resource \nBetaClass something;  // Wires to beanBeta - by-type\n\n@Resource \nBetaClass beanAlpha;  // Will throw exception, because \"beanAlpha\" is not BetaClass -&gt; it's a bad idea to use @Resource as a replacement of @Autowired\n\n@Resource \nObject beanAlpha;  //Wires to beanAlpha - by-name\n</code></pre>\n\n<p>So it's a good practice to always specify resource name explicitly when using <code>@Resource</code> annotation. </p>\n\n<p><strong>Documentation</strong></p>\n\n<p><a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-java\">Spring annotations</a></p>\n\n<p><a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-standard-annotations\">Bean standard annotations</a></p>\n\n<p><strong>update</strong> fixed JSR references as <em>shevchik</em> has pointed out. DI specific annotations are provided by JSR-330, which was developed by Google (Guice Framework) and SpringSource(Spring Framework) engineers. <code>@Resource</code> is JNDI based and provided by <a href=\"http://jcp.org/en/jsr/detail?id=250\">JSR-250</a>.</p>\n    "}]