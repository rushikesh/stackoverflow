[{"t":"Hibernate hbm2ddl.auto possible values and what they do?","l":"http://stackoverflow.com/questions/438146/hibernate-hbm2ddl-auto-possible-values-and-what-they-do","q":"\n\n<p>I really want to know more about the update, export and the values that could be given to <code>hibernate.hbm2ddl.auto</code><br>\nI need to know when to use the update and when not? And what is the alternative?</p>\n\n<p>These are changes that could happen over DB:</p>\n\n<ul>\n<li>New tables</li>\n<li>new columns in old tables</li>\n<li>columns deleted</li>\n<li>data type of a column changed</li>\n<li>a type of a column changed it attributes</li>\n<li>tables have been dropped</li>\n<li>values of a column has changed </li>\n</ul>\n\n<p>In each case what is the best solution?</p>\n    ","a":"\n<p>In theory, you can set hibernate.hbm2ddl.auto=update to update your database with changes to your model, but I would not trust that on a production database. An earlier version of the documentation said that this was experimental, at least; I do not know the current status.</p>\n\n<p>Therefore, for our production database, do not set hibernate.hbm2ddl.auto - the default is to make no database changes. Instead, we manually create an SQL DDL update script that applies changes from one version to the next.</p>\n    "},{"t":"What's the difference between JPA and Hibernate?","l":"http://stackoverflow.com/questions/9881611/whats-the-difference-between-jpa-and-hibernate","q":"\n\n<p>I understand that JPA 2 is a specification and Hibernate is a tool for ORM. Also, I understand that Hibernate has more features than JPA 2. But from a practical point of view, what really is the difference? </p>\n\n<p>I have experience using iBatis and now I'm trying to learn either Hibernate or JPA2. I picked up Pro JPA2 book and it keeps referring to \"JPA provider\". For example:</p>\n\n<blockquote>\n  <p>If you think a feature should be standardized, you should speak up\n  and request it from your JPA provider</p>\n</blockquote>\n\n<p>This confuses me so I have a few questions:</p>\n\n<ul>\n<li>Using JPA2 alone can I fetch data from DB by simply annotating my POJO's</li>\n<li>Is JPA2 supposed to be used with a \"JPA Provider\" e.g TopLink or Hibernate? If so, then what's the benefit of using JPA2 + Hibernate as compared to Hibernate alone?</li>\n<li>Can you recommend a good practical JPA2 book. \"Pro JPA2\" seems more like a bible and reference on JPA2 (It doesn't get into Queries until the later half of the book). Is there a book that takes a problem/solution approach to JPA2?</li>\n</ul>\n    ","a":"\n<p><a href=\"http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html\">JPA</a> is the interface while Hibernate is the implementation.</p>\n\n<p>Traditionally there have been multiple Java ORM solutions:</p>\n\n<ul>\n<li><a href=\"http://hibernate.org/orm/documentation/\">Hibernate</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/TopLink\">TopLink</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Java_Data_Objects\">JDO</a></li>\n</ul>\n\n<p>each implementation defining its own mapping definition or client API. The JPA expert group gathered the best of all these tools and so they created the Java Persistence API standard.</p>\n\n<p>A standard persistence API is very convenient from a client point of view, making it <em>relatively</em> easy to switch one implementation with the other (although in practice it's not that simple, because on large projects you'll have to use specific non-standard features anyway).</p>\n\n<p>The standard JPA has pushed Java ORM competition to a new level and this can only lead to better implementations.</p>\n\n<p><a href=\"https://leanpub.com/high-performance-java-persistence/read#leanpub-auto-jpa-vs-hibernate\">Hibernate offers features that are not yet supported by JPA</a>:</p>\n\n<ul>\n<li>extended identifier generators (<a href=\"https://vladmihalcea.com/2014/06/23/the-hilo-algorithm/\">hi/lo</a>, <a href=\"http://vladmihalcea.com/2014/07/15/from-jpa-to-hibernates-legacy-and-enhanced-identifier-generators/\">pooled, pooled-lo</a>)</li>\n<li>transparent prepared statement batching</li>\n<li>customizable CRUD (<code>@SQLInsert</code>, <code>@SQLUpdate</code>, <code>@SQLDelete</code>) statements</li>\n<li>static or dynamic collection filters (e.g. <code>@FilterDef</code>, <code>@Filter</code>, <code>@Where</code>) and entity filters (e.g. <code>@Where</code>)</li>\n<li>mapping properties to SQL fragments (e.g. <code>@Formula</code>)</li>\n<li>immutable entities (e.g. <code>@Immutable</code>)</li>\n<li><a href=\"https://vladmihalcea.com/2016/01/19/how-does-jpa-and-hibernate-define-the-auto-flush-mode/\">more flush modes (e.g. <code>FlushMode.MANUAL</code>, <code>FlushMode.ALWAYS</code>)</a></li>\n<li>querying the second-level cache by the natural key of a given entity</li>\n<li>entity-level cache concurrency strategies\n(e.g. <a href=\"https://vladmihalcea.com/2015/05/25/how-does-hibernate-read_write-cacheconcurrencystrategy-work/\"><code>Cache(usage = CacheConcurrencyStrategy.READ_WRITE)</code></a>)</li>\n<li>versioned bulk updates through HQL</li>\n<li>exclude fields from optimistic locking check (e.g. <code>@OptimisticLock(excluded = true)</code>)</li>\n<li><a href=\"https://vladmihalcea.com/2014/12/08/the-downside-of-version-less-optimistic-locking/\">versionless optimistic locking</a> (e.g. <code>OptimisticLockType.ALL</code>, <code>OptimisticLockType.DIRTY</code>)</li>\n<li>support for skipping (without waiting) pessimistic lock requests</li>\n<li>support for Java 8 Date and Time</li>\n<li>support for multitenancy</li>\n</ul>\n\n<p>These extra features allow Hibernate to address many persistence requirements demanded by large enterprise applications.</p>\n    "},{"t":"What's the Hi/Lo algorithm?","l":"http://stackoverflow.com/questions/282099/whats-the-hi-lo-algorithm","q":"\n\n<p>What's the Hi/Lo algorithm?</p>\n\n<p>I've found this in the <a href=\"http://en.wikipedia.org/wiki/NHibernate\" rel=\"nofollow noreferrer\">NHibernate</a> documentation (it's one method to generate unique keys, section 5.1.4.2), but I haven't found a good explanation of how it works.</p>\n\n<p>I know that Nhibernate handles it, and I don't need to know the inside, but I'm just curious.</p>\n    ","a":"\n<p>The basic idea is that you have two numbers to make up a primary key- a \"high\" number and a \"low\" number. A client can basically increment the \"high\" sequence, knowing that it can then safely generate keys from the entire range of the previous \"high\" value with the variety of \"low\" values.</p>\n\n<p>For instance, supposing you have a \"high\" sequence with a current value of 35, and the \"low\" number is in the range 0-1023. Then the client can increment the sequence to 36 (for other clients to be able to generate keys while it's using 35) and know that keys 35/0, 35/1, 35/2, 35/3... 35/1023 are all available.</p>\n\n<p>It can be very useful (particularly with ORMs) to be able to set the primary keys on the client side, instead of inserting values without primary keys and then fetching them back onto the client. Aside from anything else, it means you can easily make parent/child relationships and have the keys all in place before you do <em>any</em> inserts, which makes batching them simpler.</p>\n    "},{"t":"Difference between FetchType LAZY and EAGER in Java Persistence API?","l":"http://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence-api","q":"\n\n<p>I am a newbie to Java Persistence API and Hibernate. </p>\n\n<p>What is the difference between <a href=\"http://docs.oracle.com/javaee/7/api/javax/persistence/FetchType.html\" rel=\"nofollow noreferrer\"><code>FetchType.LAZY</code></a> and <a href=\"http://docs.oracle.com/javaee/7/api/javax/persistence/FetchType.html\" rel=\"nofollow noreferrer\"><code>FetchType.EAGER</code></a> in Java Persistence API? </p>\n    ","a":"\n<p>Sometimes you have two entities and there's a relationship between them. For example, you might have an entity called University and another entity called Student.</p>\n\n<p>The University entity might have some basic properties such as id, name, address, etc. as well as a property called students:</p>\n\n<pre><code>public class University {\n private String id;\n private String name;\n private String address;\n private List&lt;Student&gt; students;\n\n // setters and getters\n}\n</code></pre>\n\n<p>Now when you load a University from the database, JPA loads its id, name, and address fields for you. But you have two options for students: to load it together with the rest of the fields (i.e. eagerly) or to load it on-demand (i.e. lazily) when you call the university's getStudents() method.</p>\n\n<p>When a university has many students it is not efficient to load all of its students with it when they are not needed. So in suchlike cases, you can declare that you want students to be loaded when they are actually needed. This is called lazy loading.</p>\n    "},{"t":"object references an unsaved transient instance - save the transient instance before flushing","l":"http://stackoverflow.com/questions/2302802/object-references-an-unsaved-transient-instance-save-the-transient-instance-be","q":"\n\n<p>I receive following error when I save the object using Hibernate </p>\n\n<blockquote>\n  <p>object references an unsaved transient\n  instance - save the transient instance\n  before flushing</p>\n</blockquote>\n    ","a":"\n<p>You should include <code>cascade=\"all\"</code> (if using xml) or <code>cascade=CascadeType.ALL</code> (if using annotations) on your collection mapping.</p>\n\n<p>This happens because you have a collection in your entity, and that collection has one or more items which are not present in the database. By specifying the above options you tell hibernate to save them to the database when saving their parent.</p>\n    "},{"t":"JPA JoinColumn vs mappedBy","l":"http://stackoverflow.com/questions/11938253/jpa-joincolumn-vs-mappedby","q":"\n\n<p>What is the difference between:</p>\n\n<pre><code>@Entity\npublic class Company {\n\n    @OneToMany(cascade = CascadeType.ALL , fetch = FetchType.LAZY)\n    @JoinColumn(name = \"companyIdRef\", referencedColumnName = \"companyId\")\n    private List&lt;Branch&gt; branches;\n    ...\n}\n</code></pre>\n\n<p>and </p>\n\n<pre><code>@Entity\npublic class Company {\n\n    @OneToMany(cascade = CascadeType.ALL , fetch = FetchType.LAZY,\n    mappedBy = \"companyIdRef\")\n    private List&lt;Branch&gt; branches;\n    ...\n}\n</code></pre>\n    ","a":"\n<p><strong><code>@JoinColumn</code> could be used on both sides of the relationship.</strong> The question was about using <code>@JoinColumn</code> on the <code>@OneToMany</code> side (rare case). And the point here is in <em>physical information duplication</em> (column name) along with <em>not optimized SQL query that will produce some additional UPDATE statements</em>.</p>\n\n<p>According to <a href=\"http://docs.jboss.org/hibernate/annotations/3.5/reference/en/html_single/\">documentation</a>:</p>\n\n<p>Since <strong>many to one are</strong> (almost) always the <strong>owner side</strong> of a bidirectional relationship in the JPA spec, the one to many association is annotated by @OneToMany(mappedBy=...)</p>\n\n<pre><code>@Entity\npublic class Troop {\n    @OneToMany(mappedBy=\"troop\")\n    public Set&lt;Soldier&gt; getSoldiers() {\n    ...\n}\n\n@Entity\npublic class Soldier {\n    @ManyToOne\n    @JoinColumn(name=\"troop_fk\")\n    public Troop getTroop() {\n    ...\n} \n</code></pre>\n\n<p>Troop has a bidirectional one to many relationship with Soldier through the troop property. You don't have to (must not) define any physical mapping in the mappedBy side.</p>\n\n<p>To map a bidirectional one to many, with the <strong>one-to-many side as the owning side</strong>, you have to remove the mappedBy element and set the many to one @JoinColumn as insertable and updatable to false. This solution is not optimized and will produce some additional UPDATE statements.</p>\n\n<pre><code>@Entity\npublic class Troop {\n    @OneToMany\n    @JoinColumn(name=\"troop_fk\") //we need to duplicate the physical information\n    public Set&lt;Soldier&gt; getSoldiers() {\n    ...\n}\n\n@Entity\npublic class Soldier {\n    @ManyToOne\n    @JoinColumn(name=\"troop_fk\", insertable=false, updatable=false)\n    public Troop getTroop() {\n    ...\n}\n</code></pre>\n    "},{"t":"Hibernate: Criteria vs. HQL","l":"http://stackoverflow.com/questions/197474/hibernate-criteria-vs-hql","q":"\n\n<p>What are the pros and cons of using <a href=\"http://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/ch17.html\" rel=\"nofollow noreferrer\">Criteria</a> or <a href=\"http://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/ch16.html\" rel=\"nofollow noreferrer\">HQL</a>? The Criteria API is a nice object-oriented way to express queries in Hibernate, but sometimes Criteria Queries are more difficult to understand/build than HQL. </p>\n\n<p>When do you use Criteria and when HQL? What do you prefer in which use cases? Or is it just a matter of taste?</p>\n    ","a":"\n<p>I mostly prefer Criteria Queries for dynamic queries. For example it is much easier to add some ordering dynamically or leave some parts (e.g. restrictions) out depending on some parameter. </p>\n\n<p>On the other hand I'm using HQL for static and complex queries, because it's much easier to understand/read HQL. Also, HQL is a bit more powerful, I think, e.g. for different join types.</p>\n    "},{"t":"Hibernate show real SQL [duplicate]","l":"http://stackoverflow.com/questions/2536829/hibernate-show-real-sql","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/1710476/print-query-string-in-hibernate-with-parameter-values\" dir=\"ltr\">Print query string in Hibernate with parameter values</a>\n                <span class=\"question-originals-answer-count\">\n                    22 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>if I set</p>\n\n<pre><code>&lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n</code></pre>\n\n<p>in my <strong>hibernate.cfg.xml</strong> configuration file in the console I can see the SQL.</p>\n\n<p>But it's not <em>real</em> SQL... Can I see the SQL code that will be passed directly to database?</p>\n\n<p>Example:</p>\n\n<p>I see </p>\n\n<pre><code>select this_.code from true.employee this_ where this_.code=?\n</code></pre>\n\n<p>Can I see</p>\n\n<pre><code>select employee.code from employee where employee.code=12\n</code></pre>\n\n<p>the <em>real</em> SQL?</p>\n    ","a":"\n<p><strong>log4j.properties</strong></p>\n\n<pre><code>log4j.logger.org.hibernate=INFO, hb\nlog4j.logger.org.hibernate.SQL=DEBUG\nlog4j.logger.org.hibernate.type=TRACE\nlog4j.logger.org.hibernate.hql.ast.AST=info\nlog4j.logger.org.hibernate.tool.hbm2ddl=warn\nlog4j.logger.org.hibernate.hql=debug\nlog4j.logger.org.hibernate.cache=info\nlog4j.logger.org.hibernate.jdbc=debug\n\nlog4j.appender.hb=org.apache.log4j.ConsoleAppender\nlog4j.appender.hb.layout=org.apache.log4j.PatternLayout\nlog4j.appender.hb.layout.ConversionPattern=HibernateLog --&gt; %d{HH:mm:ss} %-5p %c - %m%n\nlog4j.appender.hb.Threshold=TRACE\n</code></pre>\n\n<p><strong>hibernate.cfg.xml</strong></p>\n\n<pre><code>&lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n&lt;property name=\"format_sql\"&gt;true&lt;/property&gt;\n&lt;property name=\"use_sql_comments\"&gt;true&lt;/property&gt;\n</code></pre>\n    "},{"t":"Hibernate cannot simultaneously fetch multiple bags","l":"http://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags","q":"\n\n<p>Hibernate throws this exception during SessionFactory creation:</p>\n\n<blockquote>\n  <p>org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags</p>\n</blockquote>\n\n<p>This is my test case:</p>\n\n<p><strong>Parent.java</strong></p>\n\n<pre><code>@Entity\npublic Parent {\n\n @Id\n @GeneratedValue(strategy=GenerationType.IDENTITY)\n private Long id;\n\n @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n // @IndexColumn(name=\"INDEX_COL\") if I had this the problem solve but I retrieve more children than I have, one child is null.\n private List&lt;Child&gt; children;\n\n}\n</code></pre>\n\n<p><strong>Child.java</strong></p>\n\n<pre><code>@Entity\npublic Child {\n\n @Id\n @GeneratedValue(strategy=GenerationType.IDENTITY)\n private Long id;\n\n @ManyToOne\n private Parent parent;\n\n}\n</code></pre>\n\n<p>How about this problem? What can I do?</p>\n\n<hr>\n\n<p><strong>EDIT</strong></p>\n\n<p>OK, the problem I have is that another \"parent\" entity is inside my parent, my real behavior is this:</p>\n\n<p><strong>Parent.java</strong></p>\n\n<pre><code>@Entity\npublic Parent {\n\n @Id\n @GeneratedValue(strategy=GenerationType.IDENTITY)\n private Long id;\n\n @ManyToOne\n private AntoherParent anotherParent;\n\n @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n private List&lt;Child&gt; children;\n\n}\n</code></pre>\n\n<p><strong>AnotherParent.java</strong></p>\n\n<pre><code>@Entity\npublic AntoherParent {\n\n @Id\n @GeneratedValue(strategy=GenerationType.IDENTITY)\n private Long id;\n\n @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n private List&lt;AnotherChild&gt; anotherChildren;\n\n}\n</code></pre>\n\n<p>Hibernate doesn't like two collections with <code>FetchType.EAGER</code>, but this seems to be a bug, I'm not doing unusual things...</p>\n\n<p>Removing <code>FetchType.EAGER</code> from <code>Parent</code> or <code>AnotherParent</code> solves the problem, but I need it, so real solution is to use <code>@LazyCollection(LazyCollectionOption.FALSE)</code> instead of <code>FetchType</code> (thanks to <a href=\"http://stackoverflow.com/users/203907/bozho\">Bozho</a> for the solution).</p>\n    ","a":"\n<p>I think a newer version of hibernate (supporting JPA 2.0) should handle this. But otherwise you can work it around by annotating the collection fields with:</p>\n\n<pre><code>@LazyCollection(LazyCollectionOption.FALSE)\n</code></pre>\n\n<p>Remember to remove the <code>fetchType</code> attribute from the <code>@*ToMany</code> annotation.</p>\n\n<p>But note that in most cases a <code>Set&lt;Child&gt;</code> is more appropriate than <code>List&lt;Child&gt;</code>, so unless you really need a <code>List</code> - go for <code>Set</code></p>\n    "},{"t":"Hibernate: hbm2ddl.auto=update in production?","l":"http://stackoverflow.com/questions/221379/hibernate-hbm2ddl-auto-update-in-production","q":"\n\n<p>Is it okay to run Hibernate applications configured with <code>hbm2ddl.auto=update</code> to update the database schema in a production environment?</p>\n    ","a":"\n<p>No It's unsafe.</p>\n\n<p>Despite folks in Hibernate do their best, you simply cannot rely on automatic updates <strong>in production</strong>. Write you own patches, review them with DBA, test them, then apply them manually.</p>\n\n<p>Theoretically, if <strong>hbm2ddl update</strong> worked in development, it should work in production too. But in reality, it's not always the case. </p>\n\n<p>Even if it worked OK, it may be sub optimal. DBAs are paid that much for a reason.</p>\n    "},{"t":"Create the perfect JPA entity [closed]","l":"http://stackoverflow.com/questions/6033905/create-the-perfect-jpa-entity","q":"\n\n<p>I've been working with JPA (implementation Hibernate) for some time now and each time I need to create entities I find myself struggling with issues as AccessType, immutable properties, equals/hashCode, ... .<br>\nSo I decided to try and find out the general best practice for each issue and write this down for personal use.<br>\nI would not mind however for anyone to comment on it or to tell me where I'm wrong.</p>\n\n<h2>Entity Class</h2>\n\n<ul>\n<li><p>implement Serializable  </p>\n\n<p>Reason: <em>The specification says you have to, but some JPA providers do not enforce this. Hibernate as JPA provider does not enforce this, but it can fail somewhere deep in its stomach with ClassCastException, if Serializable has not been implemented.</em></p></li>\n</ul>\n\n<h2>Constructors</h2>\n\n<ul>\n<li><p>create a constructor with all required fields of the entity </p>\n\n<p><em>Reason: A constructor should always leave the instance created in a sane state.</em>  </p></li>\n<li><p>besides this constructor: have a package private default constructor  </p>\n\n<p><em>Reason: Default constructor is required to have Hibernate initialize the entity; private is allowed but package private (or public) visibility is required for runtime proxy generation and efficient data retrieval without bytecode instrumentation.</em></p></li>\n</ul>\n\n<h2>Fields/Properties</h2>\n\n<ul>\n<li><p>Use field access in general and property access when needed  </p>\n\n<p><em>Reason:  this is probably the most debatable issue since there are no clear and convincing  arguments for one or the other (property access vs field access); however, field access seems to be general favourite because of clearer code, better encapsulation and no need to create setters for immutable fields</em> </p></li>\n<li><p>Omit setters for immutable fields (not required for access type field)</p></li>\n<li>properties may be private<br>\nReason: I once heard that protected is better for (Hibernate) performance but all I can find on the web is: <em>Hibernate can access public, private, and protected accessor methods, as well as public, private and protected fields directly. The choice is up to you and you can match it to fit your application design.</em></li>\n</ul>\n\n<h2>Equals/hashCode</h2>\n\n<ul>\n<li>Never use a generated id if this id is only set when persisting the entity</li>\n<li>By preference: use immutable values to form a unique Business Key and use this to test equality</li>\n<li>if a unique Business Key is not available use a non-transient <strong>UUID</strong> which is created when the entity is initialised; See <a href=\"http://www.onjava.com/pub/a/onjava/2006/09/13/dont-let-hibernate-steal-your-identity.html\" rel=\"nofollow noreferrer\">this great article</a> for more information.</li>\n<li><strong>never</strong> refer to related entities (ManyToOne); if this entity (like a parent entity) needs to be part of the Business Key then compare the ID's only. Calling getId() on a proxy will not trigger the loading of the entity, as long as you're using <a href=\"http://stackoverflow.com/questions/3736818/hibernate-generating-sql-queries-when-accessing-associated-entitys-id/3739197#3739197\">property access type</a>.</li>\n</ul>\n\n<h2>Example Entity</h2>\n\n<pre><code>@Entity\n@Table(name = \"ROOM\")\npublic class Room implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue\n    @Column(name = \"room_id\")\n    private Integer id;\n\n    @Column(name = \"number\") \n    private String number; //immutable\n\n    @Column(name = \"capacity\")\n    private Integer capacity;\n\n    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n    @JoinColumn(name = \"building_id\")\n    private Building building; //immutable\n\n    Room() {\n        // default constructor\n    }\n\n    public Room(Building building, String number) {\n        // constructor with required field\n        notNull(building, \"Method called with null parameter (application)\");\n        notNull(number, \"Method called with null parameter (name)\");\n\n        this.building = building;\n        this.number = number;\n    }\n\n    @Override\n    public boolean equals(final Object otherObj) {\n        if ((otherObj == null) || !(otherObj instanceof Room)) {\n            return false;\n        }\n        // a room can be uniquely identified by it's number and the building it belongs to; normally I would use a UUID in any case but this is just to illustrate the usage of getId()\n        final Room other = (Room) otherObj;\n        return new EqualsBuilder().append(getNumber(), other.getNumber())\n                .append(getBuilding().getId(), other.getBuilding().getId())\n                .isEquals();\n        //this assumes that Building.id is annotated with @Access(value = AccessType.PROPERTY) \n    }\n\n    public Building getBuilding() {\n        return building;\n    }\n\n\n    public Integer getId() {\n        return id;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder().append(getNumber()).append(getBuilding().getId()).toHashCode();\n    }\n\n    public void setCapacity(Integer capacity) {\n        this.capacity = capacity;\n    }\n\n//no setters for number, building nor id\n    }\n</code></pre>\n\n<p>Other suggestions to add to this list are more than welcome...</p>\n    ","a":"\n<p>The <a href=\"http://www.jcp.org/en/jsr/detail?id=317\">JPA 2.0 Specification</a> states that:</p>\n\n<blockquote>\n  <ul>\n  <li>The entity class must have a no-arg constructor. It may have other constructors as well. The no-arg constructor must be public or protected.</li>\n  <li>The entity class must a be top-level class. An enum or interface must not    be\n  designated as an entity.</li>\n  <li>The entity class must not be final. No methods or persistent instance variables of the entity class may be final.</li>\n  <li><strong>If an entity instance is to be passed by value as a detached object</strong> (e.g., through a remote interface), the entity class must implement the Serializable interface.</li>\n  <li>Both abstract and concrete classes can be entities. Entities may extend non-entity classes as well as entity classes, and non-entity classes may extend entity classes.</li>\n  </ul>\n</blockquote>\n\n<p>The specification contains no requirements about the implementation of equals and hashCode methods for entities, only for primary key classes and map keys as far as I know.</p>\n    "},{"t":"Print query string in Hibernate with parameter values","l":"http://stackoverflow.com/questions/1710476/print-query-string-in-hibernate-with-parameter-values","q":"\n\n<p>Is it possible in Hibernate to print generated SQL queries with real values instead of question marks?</p>\n\n<p>How would you suggest to print queries with real values if it is not possible with Hibernate API?</p>\n    ","a":"\n<p>You need to enable <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-logging\" rel=\"nofollow noreferrer\">logging</a> for the the following categories at <code>debug</code> and <code>trace</code> levels respectively:</p>\n\n<ul>\n<li><code>org.hibernate.SQL</code> &nbsp;&nbsp;- Log all SQL DML statements as they are executed</li>\n<li><code>org.hibernate.type</code> - Log all JDBC parameters</li>\n</ul>\n\n<p>So a log4j configuration could look like:</p>\n\n<pre><code># logs the SQL statements\nlog4j.logger.org.hibernate.SQL=debug \n\n# Logs the JDBC parameters passed to a query\nlog4j.logger.org.hibernate.type=trace \n</code></pre>\n\n<p>The first is equivalent to <code>hibernate.show_sql=true</code> legacy <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-optional\" rel=\"nofollow noreferrer\">property</a>, the second <strong>prints the bound parameters among other things.</strong></p>\n\n<p>Another solution (non hibernate based) would be to use a JDBC proxy driver like <a href=\"https://github.com/p6spy/p6spy\" rel=\"nofollow noreferrer\">P6Spy</a>.</p>\n    "},{"t":"What is the difference between DAO and Repository patterns?","l":"http://stackoverflow.com/questions/8550124/what-is-the-difference-between-dao-and-repository-patterns","q":"\n\n<p>What is the difference between Data Access Objects (DAO) and Repository patterns? I am developing an application using Enterprise Java Beans (EJB3), Hibernate ORM as infrastructure, and Domain-Driven Design (DDD) and Test-Driven Development (TDD) as design techniques.</p>\n    ","a":"\n<p>DAO is an abstraction of data persistence.  Repository is an abstraction of a collection of objects.</p>\n\n<p>DAO would be considered closer to the database, often table-centric.  Repository would be considered closer to the Domain, dealing only in Aggregate Roots.  A Repository could be implemented using DAO's, but you wouldn't do the opposite.  </p>\n\n<p>Also, a Repository is generally a narrower interface.  It should be simply a collection of objects, with a <code>Get(id)</code>, <code>Find(ISpecification)</code>, <code>Add(Entity)</code>.  A method like <code>Update</code> is appropriate on a DAO, but not a Repository - when using a Repository, changes to entities would usually be tracked by separate UnitOfWork.</p>\n\n<p>It does seem common to see implementations called a Repository that are really more of a DAO, and hence I think there is some confusion about the difference between them.</p>\n    "},{"t":"The JPA hashCode() / equals() dilemma","l":"http://stackoverflow.com/questions/5031614/the-jpa-hashcode-equals-dilemma","q":"\n\n<p>There have been <a href=\"http://stackoverflow.com/questions/4762573/should-embeddable-jpa-class-implement-equals-and-hashcode\">some</a> <a href=\"http://stackoverflow.com/questions/3147166/how-to-implement-equals-and-hashcode-methods-in-baseentity-of-jpa\">discussions</a> here about JPA entities and which <code>hashCode()</code>/<code>equals()</code> implementation should be used for JPA entity classes.  Most (if not all) of them depend on Hibernate, but I'd like to discuss them JPA-implementation-neutrally (I am using EclipseLink, by the way).</p>\n\n<p>All possible implementations are having their own <strong>advantages</strong> and <strong>disadvantages</strong> regarding:</p>\n\n<ul>\n<li><strong><code>hashCode()</code>/<code>equals()</code></strong> contract <strong>conformity</strong> (immutability) for <code>List</code>/<code>Set</code> operations</li>\n<li>Whether <strong>identical</strong> objects (e.g. from different sessions, dynamic proxies from lazily-loaded data structures) can be detected</li>\n<li>Whether entities behave correctly in <strong>detached (or non-persisted) state</strong> \n<br></li>\n</ul>\n\n<p>As far I can see, there are <strong>three options</strong>: </p>\n\n<ol>\n<li>Do not override them; rely on <code>Object.equals()</code> and <code>Object.hashCode()</code>\n<ul>\n<li><code>hashCode()</code>/<code>equals()</code> work</li>\n<li>cannot identify identical objects, problems with dynamic proxies</li>\n<li>no problems with detached entities</li>\n</ul></li>\n<li>Override them, based on the <strong>primary key</strong>\n<ul>\n<li><code>hashCode()</code>/<code>equals()</code> are broken</li>\n<li>correct identity (for all managed entities)</li>\n<li>problems with detached entities</li>\n</ul></li>\n<li>Override them, based on the <strong>Business-Id</strong> (non-primary key fields; what about foreign keys?)\n<ul>\n<li><code>hashCode()</code>/<code>equals()</code> are broken</li>\n<li>correct identity (for all managed entities)</li>\n<li>no problems with detached entities</li>\n</ul></li>\n</ol>\n\n<p><strong>My questions are:</strong></p>\n\n<ol>\n<li>Did I miss an option and/or pro/con point?<br></li>\n<li>What option did you choose and why?</li>\n</ol>\n\n<p><br><br>\n<strong>UPDATE 1:</strong></p>\n\n<p>By \"<code>hashCode()</code>/<code>equals()</code> are broken\", I mean that successive <code>hashCode()</code> invocations may return differing values, which is (when correctly implemented) not broken in the sense of the <code>Object</code> API documentation, but which causes problems when trying to retrieve a changed entity from a <code>Map</code>,  <code>Set</code> or other hash-based <code>Collection</code>.  Consequently, JPA implementations (at least EclipseLink) will not work correctly in some cases.</p>\n\n<p><strong>UPDATE 2:</strong></p>\n\n<p>Thank you for your answers -- most of them have remarkable quality.<br>\nUnfortunately, I am still unsure which approach will be the best for a real-life application, or how to determine the best approach for my application.  So, I'll keep the question open and hope for some more discussions and/or opinions.</p>\n    ","a":"\n<ol>\n<li>If you have a <a href=\"http://vladmihalcea.com/2013/10/23/hibernate-facts-equals-and-hashcode/\" rel=\"nofollow\">business key</a>, then you should use that for <code>equals</code>/<code>hashCode</code>.</li>\n<li>If you don't have a business key, you should not leave it with the default <code>Object</code> equals and hashCode implementations because that does not work after you <code>merge</code> and entity.</li>\n<li><p>You can <a href=\"https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-entity-identifier/\" rel=\"nofollow\">use the entity identifier as suggested in this post</a>. The only catch is that you need to use a <code>hashCode</code> implementation that always returns the same value, like this:</p>\n\n<pre><code>@Entity\npublic class Book implements Identifiable&lt;Long&gt; {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String title;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Book)) return false;\n        Book book = (Book) o;\n        return getId() != null &amp;&amp; Objects.equals(getId(), book.getId());\n    }\n\n    @Override\n    public int hashCode() {\n        return 31;\n    }\n\n    //Getters and setters omitted for brevity\n}\n</code></pre></li>\n</ol>\n    "},{"t":"How do we count rows using Hibernate?","l":"http://stackoverflow.com/questions/1372317/how-do-we-count-rows-using-hibernate","q":"\n\n<p>For example, if we have a table Books, how would we count total number of book records with hibernate?</p>\n\n<p>Thanks</p>\n    ","a":"\n<p>Assuming the classname is Book:</p>\n\n<pre><code>return (Number) session.createCriteria(\"Book\").setProjection(Projections.rowCount()).uniqueResult();\n</code></pre>\n\n<p>It is at least a Number, most likely a Long.</p>\n    "},{"t":"Is buildSessionFactory() deprecated in hibernate 4?","l":"http://stackoverflow.com/questions/8621906/is-buildsessionfactory-deprecated-in-hibernate-4","q":"\n\n<p>When I updated version of Hibernate from 3.6.8.final to 4.0.0.final I got a warning about deprecated method <code>buildSessionFactory()</code> in this line:</p>\n\n<pre><code>private static final SessionFactory sessionFactory =\n         new Configuration().configure().buildSessionFactory();\n</code></pre>\n\n<p>the javadoc recommends use of another method </p>\n\n<p><code>buildSessionFactory(ServiceRegistry serviceRegistry)</code></p>\n\n<p>but in the <a href=\"http://docs.jboss.org/hibernate/core/4.0/manual/en-US/html/session-configuration.html#configuration-sessionfactory\">documentation</a> I found deprecated variant :(</p>\n\n<p>Can you help me with this little misunderstanding ?</p>\n    ","a":"\n<p>Yes it is deprecated. Replace your SessionFactory with the following:</p>\n\n<p>In <strong>Hibernate 4.0, 4.1, 4.2</strong></p>\n\n<pre><code>private static SessionFactory sessionFactory;\nprivate static ServiceRegistry serviceRegistry;\n\npublic static SessionFactory createSessionFactory() {\n    Configuration configuration = new Configuration();\n    configuration.configure();\n    ServiceRegistry serviceRegistry = new ServiceRegistryBuilder().applySettings(\n            configuration.getProperties()). buildServiceRegistry();\n    sessionFactory = configuration.buildSessionFactory(serviceRegistry);\n    return sessionFactory;\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>UPDATE:</strong></p>\n</blockquote>\n\n<p>In <strong>Hibernate 4.3</strong> ServiceRegistryBuilder is <strong>deprecated</strong>. Use the following instead.</p>\n\n<pre><code>serviceRegistry = new StandardServiceRegistryBuilder().applySettings(\n            configuration.getProperties()).build();\n</code></pre>\n    "},{"t":"What are First and Second Level caching in Hibernate?","l":"http://stackoverflow.com/questions/337072/what-are-first-and-second-level-caching-in-hibernate","q":"\n\n<p>Can anyone explain in simple words what First and Second Level caching in Hibernate are?</p>\n    ","a":"\n<p>1.1) First-level cache</p>\n\n<blockquote>\n  <p><strong>First-level cache</strong> always Associates with the <strong>Session object</strong>. Hibernate uses this cache by default. Here, it processes one\n  transaction after another one, means wont process one transaction many\n  times. Mainly it reduces the number of SQL queries it needs to\n  generate within a given transaction. That is instead of updating after\n  every modification done in the transaction, it updates the transaction\n  only at the end of the transaction.</p>\n</blockquote>\n\n<p>1.2) Second-level cache</p>\n\n<blockquote>\n  <p><strong>Second-level cache</strong> always associates with the <strong>Session Factory object</strong>. While running the transactions, in between it loads the\n  objects at the Session Factory level, so that those objects will be\n  available to the entire application, not bound to single user. Since\n  the objects are already loaded in the cache, whenever an object is\n  returned by the query, at that time no need to go for a database\n  transaction. In this way the second level cache works. Here we can use\n  query level cache also. Later we will discuss about it.</p>\n</blockquote>\n\n<p>Quoted from: <a href=\"http://www.javabeat.net/articles/37-introduction-to-hibernate-caching-1.html\" rel=\"nofollow noreferrer\">http://www.javabeat.net/articles/37-introduction-to-hibernate-caching-1.html</a></p>\n    "},{"t":"Hibernate SessionFactory vs. EntityManagerFactory","l":"http://stackoverflow.com/questions/5640778/hibernate-sessionfactory-vs-entitymanagerfactory","q":"\n\n<p>I am new to Hibernate and am unclear of whether to use a <code>SessionFactory</code> or <code>EntityManagerFactory</code> to obtain the hibernate session.  What is the difference between the two?  Pros &amp; Cons?</p>\n    ","a":"\n<p>Prefer <code>EntityManagerFactory</code> and <code>EntityManager</code>. They are defined by the JPA standard.</p>\n\n<p><code>SessionFactory</code> and <code>Session</code> are hibernate-specific. The <code>EntityManager</code> invokes the hibernate session under the hood. And if you need some specific features that are not available in the <code>EntityManager</code>, you can obtain the session by calling:</p>\n\n<pre><code>Session session = entityManager.unwrap(Session.class);\n</code></pre>\n    "},{"t":"Weaknesses of Hibernate [closed]","l":"http://stackoverflow.com/questions/1607819/weaknesses-of-hibernate","q":"\n\n<p>I would like to know which are the weak points of Hibernate 3. This is not pretended to be a thread against Hibernate. I think it will be a very useful knowledge for decide if Hibernate is the best option for a project or for estimating its time.</p>\n\n<p>A weakness can be:</p>\n\n<ul>\n<li>A bug</li>\n<li>Where JDBC or PLSQL are better</li>\n<li>Performance issues</li>\n<li>...</li>\n</ul>\n\n<p>Also, can be useful to know some solutions for that problems, better ORM or techniques, or it will be corrected in Hibernate 4.</p>\n\n<p>For example, AFAIK, Hibernate will have a very bad performance updating 10000 rows comparing to JDBC in this query:</p>\n\n<pre><code>update A set state=3 where state=2\n</code></pre>\n    ","a":"\n<p>Hibernate is really <strong>great</strong> but it definitely needs some skills and experience: knowledge of ORM concepts, mappings and relations are welcome, understanding of how the <code>Session</code> works, understanding of more advanced concepts like lazy-loading, fetching strategies, caching (first-level cache, second-level cache, query cache), etc. </p>\n\n<p>Sure, when used correctly, Hibernate is an awesome weapon: it's efficient, it will generate better SQL queries than lots (most?) of developers, it's very powerful, it has great performances, etc. However, I've seen many project using it very badly (e.g. not using associations because they were scared to \"fetch the whole database\" and this is far from the worst horror) and I'm thus always a bit suspicious when I hear \"we are doing Hibernate\". Actually, in the wrong hands, it can be a real disaster. </p>\n\n<p>So, if I had to mention one weakness, it would be the learning curve. Don't underestimate it.</p>\n    "},{"t":"Hibernate vs JPA vs JDO - pros and cons of each? [closed]","l":"http://stackoverflow.com/questions/530215/hibernate-vs-jpa-vs-jdo-pros-and-cons-of-each","q":"\n\n<p>I'm familiar with ORM as a concept, and I've even used nHibernate several years ago for a .NET project; however, I haven't kept up with the topic of ORM in Java and haven't had a chance to use any of these tools.</p>\n\n<p>But, now I may have the chance to begin to use some ORM tools for one of our applications, in an attempt to move away from a series of legacy web services.</p>\n\n<p>I'm having a hard time telling the difference betweeen the JPA spec, what you get with the Hibernate library itself, and what JDO has to offer.</p>\n\n<p>So, I understand that this question is a bit open-ended, but I was hoping to get some opinions on:</p>\n\n<ul>\n<li>What are the pros and cons of each?</li>\n<li>Which would you suggest for a new project?</li>\n<li>Are there certain conditions when it would make sense to use one framework vs the other?</li>\n</ul>\n    ","a":"\n<p>Some notes:</p>\n\n<ul>\n<li>JDO and JPA are both specifications, not implementations.</li>\n<li>The idea is you can swap JPA implementations, if you restrict your code to use standard JPA only.  (Ditto for JDO.)</li>\n<li>Hibernate can be used as one such implementation of JPA.</li>\n<li>However, Hibernate provides a native API, with features above and beyond that of JPA.</li>\n</ul>\n\n<p>IMO, I would recommend Hibernate.</p>\n\n<hr>\n\n<p>There have been some comments / questions about what you should do if you <em>need</em> to use Hibernate-specific features.  There are many ways to look at this, but my advice would be:</p>\n\n<ul>\n<li><p>If you are not worried by the prospect of vendor tie-in, then make your choice between Hibernate, and other JPA and JDO implementations <em>including</em> the various vendor specific extensions in your decision making.</p></li>\n<li><p>If you are worried by the prospect of vendor tie-in, and you can't use JPA without resorting to vendor specific extensions, then don't use JPA.  (Ditto for JDO).</p></li>\n</ul>\n\n<p>In reality, you will probably need to trade-off <em>how much</em> you are worried by vendor tie-in versus <em>how much</em> you need those vendor specific extensions.</p>\n\n<p>And there are other factors too, like how well you / your staff know the respective technologies, how much the products will cost in licensing, and whose story you believe about what is going to happen in the future for JDO and JPA.</p>\n    "},{"t":"How do you do a limit query in HQL?","l":"http://stackoverflow.com/questions/1239723/how-do-you-do-a-limit-query-in-hql","q":"\n\n<p>In Hibernate 3, is there a way to do the equivalent of the following MySQL limit in HQL?</p>\n\n<pre><code>select * from a_table order by a_table_column desc limit 0, 20;\n</code></pre>\n\n<p>I don't want to use setMaxResults if possible. This definitely was possible in the older version of Hibernate/HQL, but it seems to have disappeared.</p>\n    ","a":"\n<p><a href=\"https://forum.hibernate.org/viewtopic.php?f=9&amp;t=939314\" rel=\"nofollow noreferrer\">This was posted</a> on the Hibernate forum a few years back when asked about why this worked in Hibernate 2 but not in Hibernate 3:</p>\n\n<blockquote>\n  <p>Limit was <em>never</em> a supported clause\n  in HQL. You are meant to use\n  setMaxResults().</p>\n</blockquote>\n\n<p>So if it worked in Hibernate 2, it seems that was by coincidence, rather than by design. I <em>think</em> this was because the Hibernate 2 HQL parser would replace the bits of the query that it recognised as HQL, and leave the rest as it was, so you could sneak in some native SQL. Hibernate 3, however, has a proper AST HQL Parser, and it's a lot less forgiving.</p>\n\n<p>I think <code>Query.setMaxResults()</code> really is your only option.</p>\n    "},{"t":"Creation timestamp and last update timestamp with Hibernate and MySQL","l":"http://stackoverflow.com/questions/221611/creation-timestamp-and-last-update-timestamp-with-hibernate-and-mysql","q":"\n\n<p>For a certain Hibernate entity we have a requirement to store its creation time and the last time it was updated.  How would you design this?</p>\n\n<ul>\n<li><p>What data types would you use in the database (assuming MySQL, possibly in a different timezone that the JVM)?  Will the data types be timezone-aware?</p></li>\n<li><p>What data types would you use in Java (<code>Date</code>, <code>Calendar</code>, <code>long</code>, ...)?</p></li>\n<li><p>Whom would you make responsible for setting the timestamps—the database, the ORM framework (Hibernate), or the application programmer?</p></li>\n<li><p>What annotations would you use for the mapping (e.g. <code>@Temporal</code>)?</p></li>\n</ul>\n\n<p>I'm not only looking for a working solution, but for a safe and well-designed solution.</p>\n    ","a":"\n<p>You can just use <code>@CreationTimestamp</code> and <code>@UpdateTimestamp</code>:</p>\n\n<pre><code>@CreationTimestamp\n@Temporal(TemporalType.DATE)\n@Column(name = \"create_date\")\nprivate Date createDate;\n\n@UpdateTimestamp\n@Temporal(TemporalType.TIMESTAMP)\n@Column(name = \"modify_date\")\nprivate Date modifyDate;\n</code></pre>\n    "},{"t":"What are the differences between the different saving methods in Hibernate?","l":"http://stackoverflow.com/questions/161224/what-are-the-differences-between-the-different-saving-methods-in-hibernate","q":"\n\n<p>Hibernate has a handful of methods that, one way or another, takes your object and puts it into the database. What are the differences between them, when to use which, and why isn't there just one intelligent method that knows when to use what?</p>\n\n<p>The methods that I have identified thus far are:</p>\n\n<ul>\n<li>save()</li>\n<li>update()</li>\n<li>saveOrUpdate()</li>\n<li>saveOrUpdateCopy()</li>\n<li>merge()</li>\n<li>persist()</li>\n</ul>\n    ","a":"\n<p>Here's my understanding of the methods.  Mainly these are based on the <a href=\"http://www.hibernate.org/hib_docs/v3/api/org/hibernate/Session.html\" rel=\"nofollow noreferrer\">API</a> though as I don't use all of these in practice.</p>\n\n<p><strong>saveOrUpdate</strong>\nCalls either save or update depending on some checks.  E.g. if no identifier exists, save is called.  Otherwise update is called.</p>\n\n<p><strong>save</strong>\nPersists an entity.  Will assign an identifier if one doesn't exist.  If one does, it's essentially doing an update.  Returns the generated ID of the entity.</p>\n\n<p><strong>update</strong>\nAttempts to persist the entity using an existing identifier.  If no identifier exists, I believe an exception is thrown.</p>\n\n<p><strong>saveOrUpdateCopy</strong>\nThis is deprecated and should no longer be used.  Instead there is...</p>\n\n<p><strong>merge</strong>\nNow this is where my knowledge starts to falter.  The important thing here is the difference between transient, detached and persistent entities.  For more info on the object states, <a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/objectstate.html\" rel=\"nofollow noreferrer\">take a look here</a>.  With save &amp; update, you are dealing with persistent objects.  They are linked to a Session so Hibernate knows what has changed.  But when you have a transient object, there is no session involved.  In these cases you need to use merge for updates and persist for saving.</p>\n\n<p><strong>persist</strong>\nAs mentioned above, this is used on transient objects.  It does not return the generated ID.</p>\n    "},{"t":"What is the proper way to re-attach detached objects in Hibernate?","l":"http://stackoverflow.com/questions/912659/what-is-the-proper-way-to-re-attach-detached-objects-in-hibernate","q":"\n\n<p>I have a situation in which I need to re-attach detached objects to a hibernate session, although an object of the same identity MAY already exist in the session, which will cause errors.</p>\n\n<p>Right now, I can do one of two things.</p>\n\n<ol>\n<li><p><code>getHibernateTemplate().update( obj )</code>\nThis works if and only if an object doesn't already exist in the hibernate session. Exceptions are thrown stating an object with the given identifier already exists in the session when I need it later.</p></li>\n<li><p><code>getHibernateTemplate().merge( obj )</code>\nThis works if and only if an object exists in the hibernate session. Exceptions are thrown when I need the object to be in a session later if I use this.</p></li>\n</ol>\n\n<p>Given these two scenarios, how can I generically attach sessions to objects? I don't want to use exceptions to control the flow of this problem's solution, as there must be a more elegant solution...</p>\n    ","a":"\n<p>to reattach this object, you must use merge();</p>\n\n<p>this methode accept in parameter your entity detached and return an entity will be attached and reloaded from Database.</p>\n\n<pre><code>Example :\n    Lot objAttach = em.merge(oldObjDetached);\n    objAttach.setEtat(...);\n    em.persist(objAttach);\n</code></pre>\n    "},{"t":"Making a OneToOne-relation lazy","l":"http://stackoverflow.com/questions/1444227/making-a-onetoone-relation-lazy","q":"\n\n<p>In this application we are developing, we noticed that a view was particularly slow. I profiled the view and noticed that there was one query executed by hibernate which took 10 seconds even if there only were two object in the database to fetch. All <code>OneToMany</code> and <code>ManyToMany</code> relations were lazy so that wasn't the problem. When inspecting the actual SQL being executed, I noticed that there were over 80 joins in the query. </p>\n\n<p>Further inspecting the issue, I noticed that the problem was caused by the deep hierarchy of <code>OneToOne</code> and <code>ManyToOne</code> relations between entity classes. So, I thought, I'll just make them fetched lazy, that should solve the problem. But annotating either <code>@OneToOne(fetch=FetchType.LAZY)</code> or <code>@ManyToOne(fetch=FetchType.LAZY)</code> doesn't seem to work. Either I get an exception or then they are not actually replaced with a proxy object and thus being lazy.</p>\n\n<p>Any ideas how I'll get this to work? Note that I do not use the <code>persistence.xml</code> to define relations or configuration details, everything is done in java code.</p>\n    ","a":"\n<p>First off, some clarifications to <strong>KLE</strong>'s answer:</p>\n\n<ol>\n<li><p>Unconstrained (nullable) one-to-one association is the only one that can not be proxied without bytecode instrumentation. The reason for this is that owner entity MUST know whether association property should contain a proxy object or NULL and it can't determine that by looking at its base table's columns due to one-to-one normally being mapped via shared PK, so it has to be eagerly fetched anyway making proxy pointless. Here's a <a href=\"https://www.hibernate.org/162.html\" rel=\"nofollow noreferrer\">more detailed</a> explanation.</p></li>\n<li><p>many-to-one associations (and one-to-many, obviously) do not suffer from this issue. Owner entity can easily check its own FK (and in case of one-to-many, empty collection proxy is created initially and populated on demand), so the association can be lazy.</p></li>\n<li><p>Replacing one-to-one with one-to-many is pretty much never a good idea. You can replace it with unique many-to-one but there are other (possibly better) options.</p></li>\n</ol>\n\n<p><strong>Rob H.</strong> has a valid point, however you may not be able to implement it depending on your model (e.g. if your one-to-one association <em>is</em> nullable).</p>\n\n<p>Now, as far as original question goes:</p>\n\n<p>A) <code>@ManyToOne(fetch=FetchType.LAZY)</code> should work just fine. Are you sure it's not being overwritten in the query itself? It's possible to specify <code>join fetch</code> in HQL and / or explicitly set fetch mode via Criteria API which would take precedence over class annotation. If that's not the case and you're still having problems, please post your classes, query and resulting SQL for more to-the-point conversation.</p>\n\n<p>B) <code>@OneToOne</code> is trickier. If it's definitely not nullable, go with Rob H.'s suggestion and specify it as such:</p>\n\n<pre><code>@OneToOne(optional = false, fetch = FetchType.LAZY)\n</code></pre>\n\n<p>Otherwise, if you can change your database (add a foreign key column to owner table), do so  and map it as \"joined\":</p>\n\n<pre><code>@OneToOne(fetch = FetchType.LAZY)\n@JoinColumn(name=\"other_entity_fk\")\npublic OtherEntity getOther()\n</code></pre>\n\n<p>and in OtherEntity:</p>\n\n<pre><code>@OneToOne(mappedBy = \"other\")\npublic OwnerEntity getOwner()\n</code></pre>\n\n<p>If you can't do that (and can't live with eager fetching) bytecode instrumentation is your only option. I have to agree with <strong>CPerkins</strong>, however - if you have <strong>80!!!</strong> joins due to eager OneToOne associations, you've got bigger problems then this :-)</p>\n    "},{"t":"How do synchronized static methods work in Java?","l":"http://stackoverflow.com/questions/578904/how-do-synchronized-static-methods-work-in-java","q":"\n\n<p>If I have a util class with static methods that will call Hibernate functions to accomplish basic data access. I am wondering if making the method <code>synchronized</code> is the right approach to ensure thread-safety.</p>\n\n<p>I want this to prevent access of info to the same DB instance. However, I'm now sure if the following code are preventing <code>getObjectById</code> being called for all Classes when it is called by a particular class. </p>\n\n<pre><code>public class Utils {\n     public static synchronized Object getObjectById (Class objclass, Long id) {\n           // call hibernate class\n         Session session = new Configuration().configure().buildSessionFactory().openSession();\n         Object obj = session.load(objclass, id);\n         session.close();\n         return obj;\n     }\n\n     // other static methods\n}\n</code></pre>\n    ","a":"\n<p>By using synchronized on a static method lock you will <a href=\"http://stackoverflow.com/questions/437620/java-synchronized-methods-lock-on-object-or-class/437627#437627\">synchronize the class methods and attributes</a> ( as opposed to instance methods and attributes )</p>\n\n<p>So your assumption is correct. </p>\n\n<blockquote>\n  <p><em>I am wondering if making the method synchronized is the right approach to ensure thread-safety.</em></p>\n</blockquote>\n\n<p>Not really. You should let that work do your RDBMS instead. They are good at this kind of stuff. </p>\n\n<p>The only thing you will get by synchronizing the access to the database is to make your application terribly slow.  Further more, in the code you posted you're building a Session Factory each time, that way, your application will spend more time accessing the DB than performing the actual job. </p>\n\n<p>Imagine the following scenario: </p>\n\n<p>Client A and B attempt to insert different information into record X of table T.</p>\n\n<p>With your approach the only thing you're getting is to make sure one is called after the other, when this would happen anyway in the DB, because the RDBMS will prevent them from inserting half information from A and half from B at the same time. The result will be the same but only 5 times ( or more )  slower. </p>\n\n<p>Probably it could be better to take a look at the <a href=\"http://www.hibernate.org/hib_docs/v3/reference/en-US/html/transactions.html\" rel=\"nofollow noreferrer\">\"Transactions and Concurrency\"</a> chapter in the Hibernate documentation.  Most of the times the problems you're trying to solve, have been solved already and a much better way. </p>\n    "},{"t":"Apache Commons equals/hashCode builder","l":"http://stackoverflow.com/questions/5038204/apache-commons-equals-hashcode-builder","q":"\n\n<p>I'm curious to know, what people here think about using \n<code>org.apache.commons.lang.builder</code> <code>EqualsBuilder</code>/<code>HashCodeBuilder</code>\nfor implementing the <code>equals</code>/<code>hashCode</code>? Would it be a better practice than writing your own? Does it play well with Hibernate? What's your opinion?</p>\n    ","a":"\n<p>The commons/lang builders are great and I have been using them for years without noticeable performance overhead (with and without hibernate). But as Alain writes, the Guava way is even nicer:</p>\n\n<p>Here's a sample Bean:</p>\n\n<pre><code>public class Bean{\n\n    private String name;\n    private int length;\n    private List&lt;Bean&gt; children;\n\n}\n</code></pre>\n\n<p>Here's equals() and hashCode() implemented with Commons/Lang:</p>\n\n<pre><code>@Override\npublic int hashCode(){\n    return new HashCodeBuilder()\n        .append(name)\n        .append(length)\n        .append(children)\n        .toHashCode();\n}\n\n@Override\npublic boolean equals(final Object obj){\n    if(obj instanceof Bean){\n        final Bean other = (Bean) obj;\n        return new EqualsBuilder()\n            .append(name, other.name)\n            .append(length, other.length)\n            .append(children, other.children)\n            .isEquals();\n    } else{\n        return false;\n    }\n}\n</code></pre>\n\n<p>and here with Guava:</p>\n\n<pre><code>@Override\npublic int hashCode(){\n    return Objects.hashCode(name, length, children);\n}\n\n@Override\npublic boolean equals(final Object obj){\n    if(obj instanceof Bean){\n        final Bean other = (Bean) obj;\n        return Objects.equal(name, other.name)\n            &amp;&amp; length == other.length // special handling for primitives\n            &amp;&amp; Objects.equal(children, other.children);\n    } else{\n        return false;\n    }\n}\n</code></pre>\n\n<p>As you can see the Guava version is shorter and avoids superfluous helper objects. In case of equals, it even allows for short-circuiting the evaluation if an earlier <code>Object.equal()</code> call returns false (to be fair: commons / lang has an <code>ObjectUtils.equals(obj1, obj2)</code> method with identical semantics which could be used instead of <code>EqualsBuilder</code> to allow short-circuiting as above).</p>\n\n<p>So: yes, the commons lang builders are very preferable over manually constructed <code>equals()</code> and <code>hashCode()</code> methods (or those awful monsters Eclipse will generate for you), but the Guava versions are even better.</p>\n\n<p>And a note about Hibernate:</p>\n\n<p>be careful about using lazy collections in your equals(), hashCode() and toString() implementations. That will fail miserably if you don't have an open Session.</p>\n\n<hr>\n\n<p>Note (about equals()):</p>\n\n<p>a) in both versions of equals() above, you might want to use one or both of these shortcuts also:</p>\n\n<pre><code>@Override\npublic boolean equals(final Object obj){\n    if(obj == this) return true;  // test for reference equality\n    if(obj == null) return false; // test for null\n    // continue as above\n</code></pre>\n\n<p>b) depending on your interpretation of the equals() contract, you might also change the line(s)</p>\n\n<pre><code>    if(obj instanceof Bean){\n</code></pre>\n\n<p>to</p>\n\n<pre><code>    // make sure you run a null check before this\n    if(obj.getClass() == getClass()){ \n</code></pre>\n\n<p>If you use the second version, you probably also want to call <code>super(equals())</code> inside your <code>equals()</code> method. Opinions differ here, the topic is discussed in this question: </p>\n\n<blockquote>\n  <p><a href=\"http://stackoverflow.com/q/8248970/342852\">right way to incorporate superclass into a Guava Objects.hashcode() implementation?</a></p>\n</blockquote>\n\n<p>(although it's about <code>hashCode()</code>, the same applies to <code>equals()</code>)</p>\n\n<hr>\n\n<p><strong>Note (inspired by Comment from <a href=\"http://stackoverflow.com/users/274473/kayahr\">kayahr</a>)</strong></p>\n\n<p><code>Objects.hashCode(..)</code> (just as the underlying <code>Arrays.hashCode(...)</code>) might perform badly if you have many primitive fields. In such cases, <code>EqualsBuilder</code> may actually be the better solution.</p>\n    "},{"t":"In a bidirectional JPA OneToMany/ManyToOne association, what is meant by “the inverse side of the association”?","l":"http://stackoverflow.com/questions/2584521/in-a-bidirectional-jpa-onetomany-manytoone-association-what-is-meant-by-the-in","q":"\n\n<p>In these examples on <a href=\"http://www.oracle.com/technetwork/middleware/ias/toplink-jpa-annotations-096251.html#OneToMany\" rel=\"nofollow noreferrer\">TopLink JPA Annotation Reference</a>:</p>\n\n<p><strong>Example 1-59 @OneToMany - Customer Class With Generics</strong></p>\n\n<pre><code>@Entity\npublic class Customer implements Serializable {\n    ...\n    @OneToMany(cascade=ALL, mappedBy=\"customer\")\n    public Set&lt;Order&gt; getOrders() { \n        return orders; \n    }\n    ...\n}\n</code></pre>\n\n<p><strong>Example 1-60 @ManyToOne - Order Class With Generics</strong></p>\n\n<pre><code>@Entity\npublic class Order implements Serializable {\n    ...\n    @ManyToOne\n    @JoinColumn(name=\"CUST_ID\", nullable=false)\n    public Customer getCustomer() { \n        return customer; \n    }\n    ...\n}\n</code></pre>\n\n<p>It seems to me that the <code>Customer</code> entity is the owner of the association. However, in the explanation for the <code>mappedBy</code> attribute in the same document, it is written that:</p>\n\n<blockquote>\n  <p>if the relationship is bidirectional,\n  then set the mappedBy element on the\n  inverse (non-owning) side of the\n  association to the name of the field\n  or property that owns the relationship\n  as Example 1-60 shows.</p>\n</blockquote>\n\n<p>However, if I am not wrong, it looks like in the example, the <code>mappedBy</code> is actually specified on the owning side of the association, rather than the non-owning side.</p>\n\n<p>So my question is basically:</p>\n\n<ol>\n<li><p>In a bidirectional (one-to-many/many-to-one) association, which of the entities is the owner? How can we designate the One side as the owner? How can we designate the Many side as the owner?</p></li>\n<li><p>What is meant by \"the inverse side of the association\"? How can we designate the One side as the inverse? How can we designate the Many side as the inverse?</p></li>\n</ol>\n    ","a":"\n<p>To understand this, you must take a step back. In OO, the customer owns the orders (orders are a list in the customer object). There can't be an order without a customer. So the customer seems to be the owner of the orders.</p>\n\n<p>But in the SQL world, one item will actually contain a pointer to the other. Since there is 1 customer for N orders, each order contains a foreign key to the customer it belongs to. This is the \"connection\" and this means the order \"owns\" (or literally contains) the connection (information). This is exactly the opposite from the OO/model world.</p>\n\n<p>This may help to understand:</p>\n\n<pre><code>public class Customer {\n     // This field doesn't exist in the database\n     // It is simulated with a SQL query\n     // \"OO speak\": Customer owns the orders\n     private List&lt;Order&gt; orders;\n}\n\npublic class Order {\n     // This field actually exists in the DB\n     // In a purely OO model, we could omit it\n     // \"DB speak\": Order contains a foreign key to customer\n     private Customer customer;\n}\n</code></pre>\n\n<p>The inverse side is the OO \"owner\" of the object, in this case the customer. The customer has no columns in the table to store the orders, so you must tell it where in the order table it can save this data (which happens via <code>mappedBy</code>).</p>\n    "},{"t":"JPA fastest way to ignore a field during persistence?","l":"http://stackoverflow.com/questions/1281952/jpa-fastest-way-to-ignore-a-field-during-persistence","q":"\n\n<p>I'm essentially looking for a \"@Ignore\" type annotation with which I can stop a particular field from being persisted. How can this be achieved?</p>\n    ","a":"\n<p><a href=\"http://docs.oracle.com/javaee/7/api/javax/persistence/Transient.html\" rel=\"nofollow noreferrer\"><code>@Transient</code></a> complies with your needs.</p>\n    "},{"t":"How to install Hibernate Tools in Eclipse?","l":"http://stackoverflow.com/questions/351640/how-to-install-hibernate-tools-in-eclipse","q":"\n\n<p>What is the proper way to install Hibernate Tools in Eclipse as a plugin?\nThe <a href=\"http://www.hibernate.org/255.html\" rel=\"nofollow noreferrer\" title=\"Hibernate site\">Hibernate site</a> doesn't really give any instructions.</p>\n\n<p>Looking at the Hibernate Tools binary <code>HibernateTools-3.2.4.Beta1-R200810311334.zip</code>, it appears that I can just unzip this in my eclipse directory. Do I just unzip it in my eclipse directory? This seems like a hacky was to install it.</p>\n    ","a":"\n<p>Well, most convenient and safest way is to use JBoss update site within Eclipse software updates (Help -&gt; Software Updates... -&gt; Add Site...):</p>\n\n<p><a href=\"http://download.jboss.org/jbosstools/updates/stable/\" rel=\"nofollow noreferrer\">The latest stable release update site for JBoss Tools</a></p>\n\n<p>There you can find Hibernate tools together with other handy JBoss plugins.</p>\n    "},{"t":"Make hibernate ignore class variables that are not mapped [duplicate]","l":"http://stackoverflow.com/questions/4662582/make-hibernate-ignore-class-variables-that-are-not-mapped","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/1281952/jpa-fastest-way-to-ignore-a-field-during-persistence\" dir=\"ltr\">JPA fastest way to ignore a field during persistence?</a>\n                <span class=\"question-originals-answer-count\">\n                    4 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I thought hibernate takes into consideration only class variables that are annotated with <code>@Column</code>.  But strangely today when I added a variable (that is not mapped to any column, just a variable i need in the class), it is trying to include that variable in the select statement as a column name and throws the error - </p>\n\n<blockquote>\n  <p>Unknown column 'team1_.agencyName' in 'field list'</p>\n</blockquote>\n\n<p>My class - </p>\n\n<pre><code>@Entity\n@Table(name=\"team\")\npublic class Team extends BaseObject implements Serializable {\n\n@Id  @GeneratedValue(strategy=GenerationType.AUTO)\nprivate Long id;\n\n@Column(length=50)\nprivate String name;\n\n@Column(length=10)\nprivate String code;\n\n@Column(name = \"agency_id\")\nprivate Long agencyId;\n\nprivate String agencyName; //note: not annotated.\n\n}\n</code></pre>\n\n<p>FYI...I use the above class in another class with many to many mapping</p>\n\n<pre><code>@ManyToMany(fetch = FetchType.EAGER) \n@JoinTable(\n        name=\"user_team\",\n        joinColumns = { @JoinColumn( name=\"user_id\") },\n        inverseJoinColumns = @JoinColumn( name=\"team_id\")\n)    \npublic Set&lt;Team&gt; getTeams() {\n    return teams;\n}\n</code></pre>\n\n<p>Why is this happening?!</p>\n    ","a":"\n<p>JPA will use <em>all</em> properties of the class, unless you specifically mark them with <code>@Transient</code>:</p>\n\n<pre><code>@Transient\nprivate String agencyName;\n</code></pre>\n\n<p>The <code>@Column</code> annotation is purely optional, and is there to let you override the auto-generated column name. Furthermore, the <code>length</code> attribute of <code>@Column</code>  is only used when auto-generating table definitions, it has no effect on the runtime.</p>\n    "},{"t":"Converting Hibernate proxy to real object","l":"http://stackoverflow.com/questions/2216547/converting-hibernate-proxy-to-real-object","q":"\n\n<p>During Hibernate session I am loading some objects and some of them are loaded as proxies due to lazy loading. It's all OK and I don't want to turn lazy loading off.</p>\n\n<p>But later I need to send some of the objects (actually one object) to the GWT client via RPC. And it happens that this concrete object is a proxy. So I need to turn it to real object. I can't find a method like \"materialize\" in Hibernate.</p>\n\n<p>How can I turn some of the objects from proxies to reals knowing their class and ID?</p>\n\n<p>At the moment the only solution I see is to evict that object from Hibernate's cache and reload it, but it is really bad for many reasons.</p>\n    ","a":"\n<p>Here's a method I'm using.    </p>\n\n<pre><code>public static &lt;T&gt; T initializeAndUnproxy(T entity) {\n    if (entity == null) {\n        throw new \n           NullPointerException(\"Entity passed for initialization is null\");\n    }\n\n    Hibernate.initialize(entity);\n    if (entity instanceof HibernateProxy) {\n        entity = (T) ((HibernateProxy) entity).getHibernateLazyInitializer()\n                .getImplementation();\n    }\n    return entity;\n}\n</code></pre>\n    "},{"t":"What is lazy loading in Hibernate?","l":"http://stackoverflow.com/questions/2192242/what-is-lazy-loading-in-hibernate","q":"\n\n<p>What is lazy loading in Java? I don't understand the process. Can anybody help me to understand the process of lazy loading?</p>\n    ","a":"\n<p>In layman's language it is like you are making a cake and you will need 5-10 ingredients from fridge. You have two options get all ingredients from fridge and put it on your kitchen platform or bring the item you want when you need..\nSimilarly in eager loading you fetch all information about bean and its related classes (not  child or is-a relation but has a relationship, i.e. cake has flour, has milk, has cream etc) and in case of lazy loading first you bring only its identifier and values that are coming from same table (necessary ingredients that first you will need in your bowl in case of cake)..all information that is coming from other tables will be fetched as and when required/used.</p>\n\n<p>Hope this helps :)</p>\n    "},{"t":"Confusion: @NotNull vs @Column(nullable = false)","l":"http://stackoverflow.com/questions/7439504/confusion-notnull-vs-columnnullable-false","q":"\n\n<ol>\n<li><p>When they appear on a field/getter of an @Entity, what is the difference between them? (I persist the Entity through <strong>Hibernate</strong>).</p></li>\n<li><p>What framework and/or specification each one of them belongs to?</p></li>\n<li><p>@NotNull is located within javax.validation.constraints. In its javax.validation.constraints.NotNull javadoc it says \"The annotated element must not be null\" but it does not speak of the element's representation in the database, so why would it add the constraint \"Nullable=false\" to the column...?</p></li>\n</ol>\n\n<p>Thanks!</p>\n    ","a":"\n<p><a href=\"http://docs.jboss.org/ejb3/app-server/HibernateAnnotations/api/org/hibernate/validator/NotNull.html\"><code>@NotNull</code></a> is a <a href=\"http://download.oracle.com/otndocs/jcp/bean_validation-1.0-fr-oth-JSpec/\">JSR 303 Bean Validation</a> annotation. It has nothing to do with database constraints itself. As Hibernate is the reference implementation of JSR 303, however, it intelligently picks up on these constraints and translates them into database constraints for you, so you get two for the price of one. <a href=\"http://java.sun.com/javaee/6/docs/api/javax/persistence/Column.html#nullable%28%29\"><code>@Column(nullable = false)</code></a> is the JPA way of declaring a column to be not-null. I.e. the former is intended for validation and the latter for indicating database schema details. You're just getting some extra (and welcome!) help from Hibernate on the validation annotations.</p>\n    "},{"t":"Setting up maven dependency for SQL Server","l":"http://stackoverflow.com/questions/6942407/setting-up-maven-dependency-for-sql-server","q":"\n\n<p>I am developing a portlet where I have Hibernate access to SQL Server database. I set up <strong>maven dependencies</strong> for it and try to find out SQL Server connector on the same way I know MySql has it.</p>\n\n<p>Still my Google-search gives only Mysql if I search for SQL Server connector. What is the right <strong>maven dependency</strong> value?</p>\n    ","a":"\n<p>Download the driver JAR from the link provided by Olaf and <a href=\"http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html\">add it to your local Maven repository</a> with;</p>\n\n<p><code>mvn install:install-file -Dfile=sqljdbc4.jar -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=4.0 -Dpackaging=jar</code></p>\n\n<p>Then add it to your project with;</p>\n\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;\n  &lt;artifactId&gt;sqljdbc4&lt;/artifactId&gt;\n  &lt;version&gt;4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n    "},{"t":"JPA CascadeType.ALL does not delete orphans","l":"http://stackoverflow.com/questions/306144/jpa-cascadetype-all-does-not-delete-orphans","q":"\n\n<p>I am having trouble deleting orphan nodes using JPA with the following mapping</p>\n\n<pre><code>@OneToMany (cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"owner\")\nprivate List&lt;Bikes&gt; bikes;\n</code></pre>\n\n<p>I am having the issue of the orphaned roles hanging around the database.</p>\n\n<p>I can use the annotation <code>org.hibernate.annotations.Cascade</code> Hibernate specific tag but obviously I don't want to tie my solution into a Hibernate implementation.</p>\n\n<p><strong>EDIT</strong>: It seems JPA 2.0 will include support for this.</p>\n    ","a":"\n<p>If you are using it with Hibernate, you'll have to explicitly define the annotation <code>CascadeType.DELETE_ORPHAN</code>, which can be used in conjunction with JPA <code>CascadeType.ALL</code>. </p>\n\n<p>If you don't plan to use Hibernate, you'll have to explicitly first delete the child elements and then delete the main record to avoid any orphan records.</p>\n\n<p>execution sequence</p>\n\n<ol>\n<li>fetch main row to be deleted </li>\n<li>fetch child elements </li>\n<li>delete all child elements</li>\n<li>delete main row </li>\n<li>close session</li>\n</ol>\n\n<p>With JPA 2.0, you can now use the option <strong>orphanRemoval = true</strong></p>\n\n<pre><code>@OneToMany(mappedBy=\"foo\", orphanRemoval=true)\n</code></pre>\n    "},{"t":"Light weight alternative to Hibernate? [closed]","l":"http://stackoverflow.com/questions/296587/light-weight-alternative-to-hibernate","q":"\n\n<p>I have a single user java program that I would like to have store data in a light weight database such as Derby or Sqlite. I would like to use a data abstraction layer in my program. Hibernate appears to require a lot of configuration and is overkill for what I need. What are light weight alternatives to Hibernate?</p>\n    ","a":"\n<p>Hibernate requires next to zero configuration if you use annotations. It even can auto-discover mapped beans in the classpath! I don't see any alternative to it from both simplicity <strong>and</strong> power point of view.</p>\n\n<p>It can also expose itself as JPA, which is (IMHO) even simpler.</p>\n    "},{"t":"How to map a composite key with Hibernate?","l":"http://stackoverflow.com/questions/3585034/how-to-map-a-composite-key-with-hibernate","q":"\n\n<p>In this code, how to generate a Java class for the composite key (how to composite key in hibernate):</p>\n\n<pre><code>create table Time (\n        levelStation int(15) not null,\n        src varchar(100) not null,\n        dst varchar(100) not null,\n        distance int(15) not null,\n        price int(15) not null,\n        confPathID int(15) not null,\n        constraint ConfPath_fk foreign key(confPathID) references ConfPath(confPathID),\n        primary key (levelStation, confPathID)\n)ENGINE=InnoDB  DEFAULT CHARSET=utf8;\n</code></pre>\n    ","a":"\n<p>To map a composite key, you can use the <code>EmbeddedId</code> <strong>or</strong> the <code>IdClass</code> annotations. I know this question is not strictly about JPA but the rules defined by the specification also applies. So here they are:</p>\n\n<blockquote>\n  <h3>2.1.4 Primary Keys and Entity Identity</h3>\n  \n  <p>...</p>\n  \n  <p>A composite primary key must\n  correspond to either a single\n  persistent field or property or to a\n  set of such fields or properties as\n  described below. A primary key class\n  must be defined to represent a\n  composite primary key. Composite\n  primary keys typically arise when\n  mapping from legacy databases when the\n  database key is comprised of several\n  columns. <strong>The <code>EmbeddedId</code> and\n  <code>IdClass</code> annotations are used to\n  denote composite primary keys.</strong> See\n  sections 9.1.14 and 9.1.15.</p>\n  \n  <p>...</p>\n  \n  <p>The following rules apply for\n  composite primary keys:</p>\n  \n  <ul>\n  <li><strong>The primary key class must be public and must have a public no-arg\n  constructor.</strong></li>\n  <li>If property-based access is used, the properties of the primary key\n  class must be public or protected.</li>\n  <li><strong>The primary key class must be <code>serializable</code>.</strong> </li>\n  <li><strong>The primary key class\n  must define <code>equals</code> and <code>hashCode</code>\n  methods.</strong> The semantics of value\n  equality for these methods must be\n  consistent with the database equality\n  for the database types to which the\n  key is mapped.</li>\n  <li>A composite primary key must either be represented and mapped as an\n  embeddable class (see Section 9.1.14,\n  “EmbeddedId Annotation”) or must be\n  represented and mapped to multiple\n  fields or properties of the entity\n  class (see Section 9.1.15, “IdClass\n  Annotation”).</li>\n  <li>If the composite primary key class is mapped to multiple fields or\n  properties of the entity class, the\n  names of primary key fields or\n  properties in the primary key class\n  and those of the entity class must\n  correspond and their types must be the\n  same.</li>\n  </ul>\n</blockquote>\n\n<h3>With an <code>IdClass</code></h3>\n\n<p>The class for the composite primary key could look like (could be a static inner class):</p>\n\n<pre><code>public class TimePK implements Serializable {\n    protected Integer levelStation;\n    protected Integer confPathID;\n\n    public TimePK() {}\n\n    public TimePK(Integer levelStation, Integer confPathID) {\n        this.levelStation = levelStation;\n        this.confPathID = confPathID;\n    }\n    // equals, hashCode\n}\n</code></pre>\n\n<p>And the entity:</p>\n\n<pre><code>@Entity\n@IdClass(TimePK.class)\nclass Time implements Serializable {\n    @Id\n    private Integer levelStation;\n    @Id\n    private Integer confPathID;\n\n    private String src;\n    private String dst;\n    private Integer distance;\n    private Integer price;\n\n    // getters, setters\n}\n</code></pre>\n\n<p>The <code>IdClass</code> annotation maps multiple fields to the table PK. </p>\n\n<h3>With <code>EmbeddedId</code></h3>\n\n<p>The class for the composite primary key could look like (could be a static inner class):</p>\n\n<pre><code>@Embeddable\npublic class TimePK implements Serializable {\n    protected Integer levelStation;\n    protected Integer confPathID;\n\n    public TimePK() {}\n\n    public TimePK(Integer levelStation, Integer confPathID) {\n        this.levelStation = levelStation;\n        this.confPathID = confPathID;\n    }\n    // equals, hashCode\n}\n</code></pre>\n\n<p>And the entity:</p>\n\n<pre><code>@Entity\nclass Time implements Serializable {\n    @EmbeddedId\n    private TimePK timePK;\n\n    private String src;\n    private String dst;\n    private Integer distance;\n    private Integer price;\n\n    //...\n}\n</code></pre>\n\n<p>The <code>@EmbeddedId</code> annotation maps a PK class to table PK.</p>\n\n<h3>Differences:</h3>\n\n<ul>\n<li>From the physical model point of view, there are no differences</li>\n<li><code>@EmbeddedId</code> somehow communicates more clearly that the key is a composite key and IMO makes sense <em>when the combined pk is either a meaningful entity itself or it reused in your code</em>.</li>\n<li><code>@IdClass</code> <em>is useful to specify that some combination of fields is unique but these do not have a special meaning</em>.</li>\n</ul>\n\n<p>They also affect the way you write queries (making them more or less verbose):</p>\n\n<ul>\n<li><p>with <code>IdClass</code></p>\n\n<pre><code>select t.levelStation from Time t\n</code></pre></li>\n<li><p>with <code>EmbeddedId</code></p>\n\n<pre><code>select t.timePK.levelStation from Time t\n</code></pre></li>\n</ul>\n\n<h3>References</h3>\n\n<ul>\n<li>JPA 1.0 specification\n\n<ul>\n<li>Section 2.1.4 \"Primary Keys and Entity Identity\"</li>\n<li>Section 9.1.14 \"EmbeddedId Annotation\"</li>\n<li>Section 9.1.15 \"IdClass Annotation\"      </li>\n</ul></li>\n</ul>\n    "},{"t":"Solve “failed to lazily initialize a collection of role” exception","l":"http://stackoverflow.com/questions/11746499/solve-failed-to-lazily-initialize-a-collection-of-role-exception","q":"\n\n<p>I have this problem:</p>\n\n<blockquote>\n  <p>org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: mvc3.model.Topic.comments, no session or session was closed</p>\n</blockquote>\n\n<p>Here is the model:  </p>\n\n<pre><code>@Entity\n@Table(name = \"T_TOPIC\")\npublic class Topic {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name=\"USER_ID\")\n    private User author;\n\n    @Enumerated(EnumType.STRING)    \n    private Tag topicTag;\n\n    private String name;\n    private String text;\n\n    @OneToMany(mappedBy = \"topic\", cascade = CascadeType.ALL)\n    private Collection&lt;Comment&gt; comments = new LinkedHashSet&lt;Comment&gt;();\n\n    ...\n\n    public Collection&lt;Comment&gt; getComments() {\n           return comments;\n    }\n\n}\n</code></pre>\n\n<p>The controller, which calls model looks like the following:</p>\n\n<pre><code>@Controller\n@RequestMapping(value = \"/topic\")\npublic class TopicController {\n\n    @Autowired\n    private TopicService service;\n\n    private static final Logger logger = LoggerFactory.getLogger(TopicController.class);\n\n\n    @RequestMapping(value = \"/details/{topicId}\", method = RequestMethod.GET)\n    public ModelAndView details(@PathVariable(value=\"topicId\") int id)\n    {\n\n            Topic topicById = service.findTopicByID(id);\n            Collection&lt;Comment&gt; commentList = topicById.getComments();\n\n            Hashtable modelData = new Hashtable();\n            modelData.put(\"topic\", topicById);\n            modelData.put(\"commentList\", commentList);\n\n            return new ModelAndView(\"/topic/details\", modelData);\n\n     }\n\n}\n</code></pre>\n\n<p>The jsp-page looks li the following:</p>\n\n<pre><code>&lt;%@page import=\"com.epam.mvc3.helpers.Utils\"%&gt;\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;\n&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;\n&lt;%@ page session=\"false\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n      &lt;title&gt;View Topic&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n&lt;c:forEach items=\"${commentList}\" var=\"item\"&gt;\n&lt;jsp:useBean id=\"item\" type=\"mvc3.model.Comment\"/&gt;\n&lt;li&gt;${item.getText()}&lt;/li&gt;\n\n&lt;/c:forEach&gt;\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Exception is rised, when viewing jsp. In the line with <em>c:forEach</em> loop</p>\n    ","a":"\n<p>If you know that you'll want to see all <code>Comment</code>s every time you retrieve a <code>Topic</code> then change your field mapping for <code>comments</code> to:</p>\n\n<pre><code>@OneToMany(fetch = FetchType.EAGER, mappedBy = \"topic\", cascade = CascadeType.ALL)\nprivate Collection&lt;Comment&gt; comments = new LinkedHashSet&lt;Comment&gt;();\n</code></pre>\n\n<p>Collections are lazy-loaded by default, take a look at <a href=\"http://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence\">this</a> if you want to know more.</p>\n    "},{"t":"Mapping many-to-many association table with extra column(s)","l":"http://stackoverflow.com/questions/5127129/mapping-many-to-many-association-table-with-extra-columns","q":"\n\n<p>My database contains 3 tables:\nUser and Service entities have many-to-many relationship and are joined with the SERVICE_USER table as follows:</p>\n\n<p>USERS - SERVICE_USER - SERVICES</p>\n\n<p>SERVICE_USER table contains additional BLOCKED column.</p>\n\n<p>What is the best way to perform such a mapping?\nThese are my Entity classes</p>\n\n<pre><code>@Entity\n@Table(name = \"USERS\")\npublic class User implements java.io.Serializable {\n\nprivate String userid;\nprivate String email;\n\n@Id\n@Column(name = \"USERID\", unique = true, nullable = false,)\npublic String getUserid() {\nreturn this.userid;\n}\n\n.... some get/set methods\n}\n\n@Entity\n@Table(name = \"SERVICES\")\npublic class CmsService implements java.io.Serializable {\nprivate String serviceCode;\n\n@Id\n@Column(name = \"SERVICE_CODE\", unique = true, nullable = false, length = 100)\npublic String getServiceCode() {\nreturn this.serviceCode;\n}\n.... some additional fields and get/set methods\n}\n</code></pre>\n\n<p>I followed this example <a href=\"http://giannigar.wordpress.com/2009/09/04/m\">http://giannigar.wordpress.com/2009/09/04/m</a> ... using-jpa/\nHere is some test code:</p>\n\n<pre><code>User user = new User();\nuser.setEmail(\"e2\");\nuser.setUserid(\"ui2\");\nuser.setPassword(\"p2\");\n\nCmsService service= new CmsService(\"cd2\",\"name2\");\n\nList&lt;UserService&gt; userServiceList = new ArrayList&lt;UserService&gt;();\n\nUserService userService = new UserService();\nuserService.setService(service);\nuserService.setUser(user);\nuserService.setBlocked(true);\nservice.getUserServices().add(userService);\n\nuserDAO.save(user);\n</code></pre>\n\n<p>The problem is that hibernate persists User object and UserService one. No success with the CmsService object</p>\n\n<p>I tried to use EAGER fetch - no progress</p>\n\n<p>Is it possible to achieve the behaviour I'm expecting with the mapping provided above?</p>\n\n<p>Maybe there is some more elegant way of mapping many to many join table with additional column?</p>\n    ","a":"\n<p>Since the SERVICE_USER table is not a pure join table, but has additional functional fields (blocked), you must map it as an entity, and decompose the many to many association between User and Service into two OneToMany associations : One User has many UserServices, and one Service has many UserServices.</p>\n\n<p>You haven't shown us the most important part : the mapping and initialization of the relationships between your entities (i.e. the part you have problems with). So I'll show you how it should look like.</p>\n\n<p>If you make the relationships bidirectional, you should thus have</p>\n\n<pre><code>class User {\n    @OneToMany(mappedBy = \"user\")\n    private Set&lt;UserService&gt; userServices = new HashSet&lt;UserService&gt;();\n}\n\nclass UserService {\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"service_code\")\n    private Service service;\n\n    @Column(name = \"blocked\")\n    private boolean blocked;\n}\n\nclass Service {\n    @OneToMany(mappedBy = \"service\")\n    private Set&lt;UserService&gt; userServices = new HashSet&lt;UserService&gt;();\n}\n</code></pre>\n\n<p>If you don't put any cascade on your relationships, then you must persist/save all the entities. Although only the owning side of the relationship (here, the UserService side) must be initialized, it's also a good practice to make sure both sides are in coherence. </p>\n\n<pre><code>User user = new User();\nService service = new Service();\nUserService userService = new UserService();\n\nuser.addUserService(userService);\nuserService.setUser(user);\n\nservice.addUserService(userService);\nuserService.setService(service);\n\nsession.save(user);\nsession.save(service);\nsession.save(userService);\n</code></pre>\n    "},{"t":"What's the advantage of persist() vs save() in Hibernate?","l":"http://stackoverflow.com/questions/5862680/whats-the-advantage-of-persist-vs-save-in-hibernate","q":"\n\n<p>Can anyone tell me what's the advantage of <code>persist()</code> vs <code>save()</code> in Hibernate?</p>\n    ","a":"\n<p>From <a href=\"https://forum.hibernate.org/viewtopic.php?t=951275&amp;highlight=difference%20persist%20save\" rel=\"nofollow\">this forum post</a></p>\n\n<blockquote>\n  <p><code>persist()</code> is well defined. It makes a\n  transient instance persistent.\n  However, it doesn't guarantee that the\n  identifier value will be assigned to\n  the persistent instance immediately,\n  the assignment might happen at flush\n  time. The spec doesn't say that, which\n  is the problem I have with <code>persist()</code>. </p>\n  \n  <p><code>persist()</code> also guarantees that it will\n  not execute an INSERT statement if it\n  is called outside of transaction\n  boundaries. This is useful in\n  long-running conversations with an\n  extended Session/persistence context. </p>\n  \n  <p>A method like <code>persist()</code> is required. </p>\n  \n  <p><code>save()</code> does not guarantee the same, it\n  returns an identifier, and if an\n  INSERT has to be executed to get the\n  identifier (e.g. \"identity\" generator,\n  not \"sequence\"), this INSERT happens\n  immediately, no matter if you are\n  inside or outside of a transaction.\n  This is not good in a long-running\n  conversation with an extended\n  Session/persistence context.</p>\n</blockquote>\n    "},{"t":"Hibernate Annotations - Which is better, field or property access?","l":"http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access","q":"\n\n<p>This question is somewhat related to <a href=\"http://stackoverflow.com/questions/305880/hibernate-annotation-placement-question\">Hibernate Annotation Placement Question</a>.</p>\n\n<p>But I want to know which is <strong>better</strong>? Access via properties or access via fields?\nWhat are the advantages and disadvantages of each?</p>\n    ","a":"\n<p>I prefer accessors, since I can add some business logic to my accessors whenever I need.\nHere's an example:</p>\n\n<pre><code>@Entity\npublic class Person {\n\n  @Column(\"nickName\")\n  public String getNickName(){\n     if(this.name != null) return generateFunnyNick(this.name);\n     else return \"John Doe\";\n  }\n}\n</code></pre>\n\n<p>Besides, if you throw another libs into the mix (like some JSON-converting lib or BeanMapper or Dozer or other bean mapping/cloning lib based on getter/setter properties) you'll have the guarantee that the lib is in sync with the persistence manager (both use the getter/setter).</p>\n    "},{"t":"Exception NoClassDefFoundError for CacheProvider","l":"http://stackoverflow.com/questions/7528862/exception-noclassdeffounderror-for-cacheprovider","q":"\n\n<p>I'm kind of new in Spring and hibernate so I'm trying to implement some simple web application based on Spring 3 + hibernate 4\nwhile I start tomcat I have this exception:</p>\n\n<pre><code>java.lang.NoClassDefFoundError: org/hibernate/cache/CacheProvider\nat java.lang.Class.getDeclaredMethods0(Native Method)\nat java.lang.Class.privateGetDeclaredMethods(Class.java:2427)\nat java.lang.Class.getDeclaredMethods(Class.java:1791)\n    ...\nCaused by: java.lang.ClassNotFoundException: org.hibernate.cache.CacheProvider\nat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678)\nat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523)\n</code></pre>\n\n<p>I've found that this class was in hibernate-core for hibernate 3 but I've not found it in hibernate 4. </p>\n\n<p>The part of my context.xml for persistence:</p>\n\n<pre><code>&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"&gt;\n    &lt;property name=\"driverClassName\" value=\"org.hsqldb.jdbcDriver\"/&gt;\n    &lt;property name=\"url\" value=\"jdbc:oracle:thin:@IP_Address:SID\"/&gt;\n    &lt;property name=\"username\" value=\"xxx\"/&gt;\n    &lt;property name=\"password\" value=\"xxx\"/&gt;\n    &lt;property name=\"initialSize\" value=\"5\"/&gt;\n    &lt;property name=\"maxActive\" value=\"20\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"&gt;\n    &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n    &lt;property name=\"packagesToScan\" value=\"com.huawei.vms.user\"/&gt;\n    &lt;property name=\"hibernateProperties\"&gt;\n        &lt;props&gt;\n            &lt;prop key=\"dialect\"&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;\n        &lt;/props&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Please help me to figure out why it's trying to load CashProvider because I dont have any settings for that in context.xml and which jar I have to add in my project.\nThanks!</p>\n    ","a":"\n<p>Change your AnnotationSessionFactoryBean to <code>org.springframework.orm.hibernate4.LocalSessionFactoryBean</code> (Hibernate 4) and you'll be good to go.  The AnnotationSessionFactoryBean was replaced with the LocalSessionFactoryBean as it does class path scanning now.</p>\n    "},{"t":"Can someone please explain mappedBy in hibernate?","l":"http://stackoverflow.com/questions/9108224/can-someone-please-explain-mappedby-in-hibernate","q":"\n\n<p>I am new to hibernate and need to use 1-Many and Many-1 relation. It is a bi-directional relationship in my objects, so that I can traverse from either direction. mappedBy is the recommended way to go about it. However, I couldn't understand it. Can someone please explain it to me, </p>\n\n<ul>\n<li>what is the recommended way to use it ?</li>\n<li>what purpose does it solve ?</li>\n</ul>\n\n<p>For the sake of my example, here are my classes with annotations:</p>\n\n<ul>\n<li><code>Airline</code> <strong>OWNS many</strong> <code>AirlineFlights</code></li>\n<li><strong>Many</strong> <code>AirlineFlights</code> belong to <strong>ONE</strong> <code>Airline</code></li>\n</ul>\n\n<p><strong>Airline</strong>:</p>\n\n<pre><code>@Entity \n@Table(name=\"Airline\")\npublic class Airline {\n    private Integer idAirline;\n    private String name;\n\n    private String code;\n\n    private String aliasName;\n    private Set&lt;AirlineFlight&gt; airlineFlights = new HashSet&lt;AirlineFlight&gt;(0);\n\n    public Airline(){}\n\n    public Airline(String name, String code, String aliasName, Set&lt;AirlineFlight&gt; flights) {\n        setName(name);\n        setCode(code);\n        setAliasName(aliasName);\n        setAirlineFlights(flights);\n    }\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    @Column(name=\"IDAIRLINE\", nullable=false)\n    public Integer getIdAirline() {\n        return idAirline;\n    }\n\n    private void setIdAirline(Integer idAirline) {\n        this.idAirline = idAirline;\n    }\n\n    @Column(name=\"NAME\", nullable=false)\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = DAOUtil.convertToDBString(name);\n    }\n\n    @Column(name=\"CODE\", nullable=false, length=3)\n    public String getCode() {\n        return code;\n    }\n    public void setCode(String code) {\n        this.code = DAOUtil.convertToDBString(code);\n    }\n\n    @Column(name=\"ALIAS\", nullable=true)\n    public String getAliasName() {\n        return aliasName;\n    }\n    public void setAliasName(String aliasName) {\n        if(aliasName != null)\n            this.aliasName = DAOUtil.convertToDBString(aliasName);\n    }\n\n    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL})\n    @JoinColumn(name=\"IDAIRLINE\")\n    public Set&lt;AirlineFlight&gt; getAirlineFlights() {\n        return airlineFlights;\n    }\n\n    public void setAirlineFlights(Set&lt;AirlineFlight&gt; flights) {\n        this.airlineFlights = flights;\n    }\n}\n</code></pre>\n\n<p><strong>AirlineFlights:</strong></p>\n\n<pre><code>@Entity\n@Table(name=\"AirlineFlight\")\npublic class AirlineFlight {\n    private Integer idAirlineFlight;\n    private Airline airline;\n    private String flightNumber;\n\n    public AirlineFlight(){}\n\n    public AirlineFlight(Airline airline, String flightNumber) {\n        setAirline(airline);\n        setFlightNumber(flightNumber);\n    }\n\n    @Id\n    @GeneratedValue(generator=\"identity\")\n    @GenericGenerator(name=\"identity\", strategy=\"identity\")\n    @Column(name=\"IDAIRLINEFLIGHT\", nullable=false)\n    public Integer getIdAirlineFlight() {\n        return idAirlineFlight;\n    }\n    private void setIdAirlineFlight(Integer idAirlineFlight) {\n        this.idAirlineFlight = idAirlineFlight;\n    }\n\n    @ManyToOne(fetch=FetchType.LAZY)\n    @JoinColumn(name=\"IDAIRLINE\", nullable=false)\n    public Airline getAirline() {\n        return airline;\n    }\n    public void setAirline(Airline airline) {\n        this.airline = airline;\n    }\n\n    @Column(name=\"FLIGHTNUMBER\", nullable=false)\n    public String getFlightNumber() {\n        return flightNumber;\n    }\n    public void setFlightNumber(String flightNumber) {\n        this.flightNumber = DAOUtil.convertToDBString(flightNumber);\n    }\n}\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Database schema:</p>\n\n<p>AirlineFlights has the idAirline as ForeignKey and Airline has no idAirlineFlights. This makes, AirlineFlights as the owner/identifying entity ?</p>\n\n<p>Theoretically, I would like airline to be the owner of airlineFlights.</p>\n\n<p><img src=\"https://i.stack.imgur.com/gQvDs.png\" alt=\"enter image description here\"></p>\n    ","a":"\n<p>By specifying the <code>@JoinColumn</code> on both models you don't have a two way relationship.  You have two one way relationships, and a very confusing mapping of it at that.  You're telling both models that they \"own\" the IDAIRLINE column.  Really only one of them actually should!  The 'normal' thing is to take the <code>@JoinColumn</code> off of the <code>@OneToMany</code> side entirely, and instead add mappedBy to the <code>@OneToMany</code>.</p>\n\n<pre><code>@OneToMany(cascade = CascadeType.ALL, mappedBy=\"airline\")\npublic Set&lt;AirlineFlight&gt; getAirlineFlights() {\n    return airlineFlights;\n}\n</code></pre>\n\n<p>That tells Hibernate \"Go look over on the bean property named 'airline' on the thing I have a collection of to find the configuration.\"</p>\n    "},{"t":"Hibernate openSession() vs getCurrentSession()","l":"http://stackoverflow.com/questions/8046662/hibernate-opensession-vs-getcurrentsession","q":"\n\n<p>I have some questions about using Hibernate in JSP web application.</p>\n\n<ol>\n<li><p>What should be the value for <code>hibernate.current_session_context_class</code>?</p></li>\n<li><p>Then, which of the following statements should be used? And why?</p>\n\n<pre><code> Session s = HibernateUtil.getSessionFactory().openSession();\n Session s = HibernateUtil.getSessionFactory().getCurrentSession()\n</code></pre></li>\n<li><p>Lastly, which one is better \"one session per web app\" or \"one session per request\"? </p></li>\n</ol>\n    ","a":"\n<p>As explained in this forum <a href=\"https://forum.hibernate.org/viewtopic.php?p=2384979&amp;sid=8367751b54bf160003b867f858393398#p2384979\">post</a>, 1 and 2 are related. If you set <code>hibernate.current_session_context_class</code> to thread and then implement something like a servlet filter that opens the session - then you can access that session anywhere else by using the <code>SessionFactory.getCurrentSession()</code>.</p>\n\n<p><code>SessionFactory.openSession()</code> always opens a new session that you have to close once you are done with the operations. <code>SessionFactory.getCurrentSession()</code> returns a session bound to a context - you don't need to close this.</p>\n\n<p>If you are using Spring or EJBs to manage transactions you can configure them to open / close sessions along with the transactions.</p>\n\n<p>You should never use <code>one session per web app</code> - session is not a thread safe object - cannot be shared by multiple threads. You should always use \"one session per request\" or \"one session per transaction\"</p>\n    "},{"t":"What's new in Hibernate 4?","l":"http://stackoverflow.com/questions/6830501/whats-new-in-hibernate-4","q":"\n\n<p>I just saw that a beta of Hibernate 4 was released. What's new in 4 compared to 3(.6)? I couldn't find this info in the beta announcement, nor when Googling the title of this question.</p>\n    ","a":"\n<p>I can't paste the answers here, due to I don't have enough reputations to add more then two links in the answer(I really need spend more time on this site) :( </p>\n\n<p>so, please to go  and \nso, I wrote a <a href=\"http://in.relation.to/Bloggers/WhatsNewInHibernateCore40\">blog post</a>, please go there and find the answers, sorry for the inconvenience.\n</p><hr>\nEDIT: Quoted from <a href=\"http://in.relation.to/Bloggers/WhatsNewInHibernateCore40\">http://in.relation.to/Bloggers/WhatsNewInHibernateCore40</a>.<p></p>\n\n<blockquote>\n  <h1>What's new in Hibernate Core 4.0</h1>\n  \n  <p>I saw someone is asking \"what new in Hibernate Core 4.0\", so I take\n  sometime and try to summary it here. first of all, please see:</p>\n  \n  <ul>\n  <li>The migration <a href=\"http://community.jboss.org/wiki/HibernateCoreMigrationGuide40\">guide for 4.0</a></li>\n  <li>JIRA <a href=\"https://hibernate.onjira.com/secure/IssueNavigator.jspa?mode=hide&amp;requestId=11567\">filter</a> link which lists all *improvements- and <em>new features</em> in <em>Hibernate Core 4.0.0</em>, you can get all details from this link :)</li>\n  </ul>\n  \n  <p>Some highlights:</p>\n  \n  <ul>\n  <li>Move to <a href=\"http://www.gradle.org/\">gradle</a> for builds</li>\n  <li>Redesign SessionFactory building</li>\n  <li>Introduction of services (see <a href=\"http://sourceforge.net/apps/mediawiki/hibernate/index.php?title=Category%3aServices\">this</a> for more details)</li>\n  <li>Improved metamodel (not in 4.0.0.Final yet, we planned this, but due to the tasks are more than we expected, and it would take too long\n  to get 4.0 out, so we decided to move this out of 4.0.0.Final but will\n  be upcoming release soon see <a href=\"http://in.relation.to/Bloggers/HibernateCore400CR1Release\">this</a> for more details, and <a href=\"http://sourceforge.net/apps/mediawiki/hibernate/index.php?title=Category%3aMetamodel\">this</a> is a\n  design document)</li>\n  <li>Initial osgi-fication by package splitting (public, internal, spi)</li>\n  <li>Support for multi-tenant databases (see <a href=\"http://community.jboss.org/wiki/Multi-tenancyDesign\">this</a> for more details)</li>\n  <li>Migration to i18n logging framework (using <a href=\"https://github.com/jbossas/jboss-logging\">jboss logging</a>)</li>\n  <li>JDK 1.6 (JDBC4) as baseline</li>\n  <li>and more (I can't remember all the things :)</li>\n  </ul>\n</blockquote>\n    "},{"t":"JPA: what is the proper pattern for iterating over large result sets?","l":"http://stackoverflow.com/questions/5067619/jpa-what-is-the-proper-pattern-for-iterating-over-large-result-sets","q":"\n\n<p>Let's say I have a table with millions of rows. Using JPA, what's the proper way to iterate over a query against that table, such that <strong>I don't have all an in-memory List</strong> with millions of objects?</p>\n\n<p>For example, I suspect that the following will blow up if the table is large:</p>\n\n<pre><code>List&lt;Model&gt; models = entityManager().createQuery(\"from Model m\", Model.class).getResultList();\n\nfor (Model model : models)\n{\n     System.out.println(model.getId());\n}\n</code></pre>\n\n<p>Is pagination (looping and manually updating <code>setFirstResult()</code>/<code>setMaxResult()</code>) really the best solution?</p>\n\n<p><strong>Edit</strong>: the primary use-case I'm targeting is a kind of batch job. It's fine if it takes a long time to run. There is no web client involved; I just need to \"do something\" for each row, one (or some small N) at a time. I'm just trying to avoid having them all in memory at the same time.</p>\n    ","a":"\n<p>Page 537 of <a href=\"http://rads.stackoverflow.com/amzn/click/1932394885\">Java Persistence with Hibernate</a> gives a solution using <code>ScrollableResults</code>, but alas it's only for Hibernate.  </p>\n\n<p>So it seems that using <code>setFirstResult</code>/<code>setMaxResults</code> and manual iteration really is necessary. Here's my solution using JPA:</p>\n\n<pre><code>private List&lt;Model&gt; getAllModelsIterable(int offset, int max)\n{\n    return entityManager.createQuery(\"from Model m\", Model.class).setFirstResult(offset).setMaxResults(max).getResultList();\n}\n</code></pre>\n\n<p>then, use it like this:</p>\n\n<pre><code>private void iterateAll()\n{\n    int offset = 0;\n\n    List&lt;Model&gt; models;\n    while ((models = Model.getAllModelsIterable(offset, 100)).size() &gt; 0)\n    {\n        entityManager.getTransaction().begin();\n        for (Model model : models)\n        {\n            log.info(\"do something with model: \" + model.getId());\n        }\n\n        entityManager.flush();\n        entityManager.clear();\n        em.getTransaction().commit();\n        offset += models.size();\n    }\n}\n</code></pre>\n    "},{"t":"How do you configure logging in Hibernate 4 to use SLF4J","l":"http://stackoverflow.com/questions/11639997/how-do-you-configure-logging-in-hibernate-4-to-use-slf4j","q":"\n\n<p>Hibernate 3.x used <a href=\"/questions/tagged/slf4j\" class=\"post-tag\" title=\"show questions tagged 'slf4j'\" rel=\"tag\">slf4j</a> for logging. Hibernate 4.x uses <a href=\"/questions/tagged/jboss-logging\" class=\"post-tag\" title=\"show questions tagged 'jboss-logging'\" rel=\"tag\">jboss-logging</a>. I am writing a standalone application which uses Hibernate 4, and SLF4J for logging.</p>\n\n<p>How can i configure Hibernate to log to SLF4J?</p>\n\n<p>If that's not possible, how can i configure Hibernate's logging at all?</p>\n\n<p>The Hibernate 4.1 manual <a href=\"http://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/ch03.html#configuration-logging\">section on logging</a> starts with the warning that it is ...</p>\n\n<blockquote>\n  <p>Completely out of date. Hibernate uses JBoss Logging starting in 4.0. This will get documented as we migrate this content to the Developer Guide.</p>\n</blockquote>\n\n<p>... goes on to talk about SLF4J, and so is useless. Neither the <a href=\"http://docs.jboss.org/hibernate/orm/4.1/quickstart/en-US/html/\">getting started guide</a> nor the <a href=\"http://docs.jboss.org/hibernate/orm/4.1/devguide/en-US/html/\">developer guide</a> talk about logging at all. Nor does the <a href=\"https://community.jboss.org/wiki/HibernateCoreMigrationGuide40\">migration guide</a>.</p>\n\n<p>I have looked for documentation on jboss-logging itself, but i haven't been able to find any at all. The <a href=\"https://github.com/jboss-logging/jboss-logging\">GitHub page is silent</a>, and JBoss's <a href=\"http://www.jboss.org/projects\">community projects page</a> doesn't even list jboss-logging. I wondered if th project's <a href=\"https://issues.jboss.org/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project%20=%20JBLOGGING%20AND%20resolution%20=%20Unresolved%20AND%20component%20is%20EMPTY%20ORDER%20BY%20priority%20DESC&amp;mode=hide\">bug tracker</a> might have any issues relating to providing documentation, but it doesn't.</p>\n\n<p>The good news is that when using Hibernate 4 inside an application server, such as JBoss AS7, logging is largely taken care of for you. But how can i configure it in a standalone application?</p>\n    ","a":"\n<p>I had an issue making hibernate 4 logging work with weblogic 12c and log4j. The solution is to put the following in your weblogic-application.xml:</p>\n\n<pre><code>&lt;prefer-application-packages&gt;\n    &lt;package-name&gt;org.apache.log4j.*&lt;/package-name&gt;\n    &lt;package-name&gt;org.jboss.logging.*&lt;/package-name&gt;\n&lt;/prefer-application-packages&gt;\n</code></pre>\n    "},{"t":"Why is hibernate open session in view considered a bad practice?","l":"http://stackoverflow.com/questions/1103363/why-is-hibernate-open-session-in-view-considered-a-bad-practice","q":"\n\n<p>And what kind of alternative strategies do you use for avoiding LazyLoadExceptions?</p>\n\n<p>I do understand that open session in view has issues with:</p>\n\n<ul>\n<li>Layered applications running in different jvm's</li>\n<li>Transactions are committed only at the end, and most probably you would like the results before.</li>\n</ul>\n\n<p>But, if you know that your application is running on a single vm, why not ease your pain by using an open session in view strategy?</p>\n    ","a":"\n<p>For a longer description, you can read my <a href=\"https://vladmihalcea.com/2016/05/30/the-open-session-in-view-anti-pattern/\" rel=\"nofollow noreferrer\">Open Session In View Anti-Pattern</a> article. Otherwise, here's a summary for why you shouldn't use Open Session In View.</p>\n\n<p>Open Session In View takes a bad approach to fetching data. Instead of letting the business layer decide how it’s best to fetch all the associations that are needed by the View layer, it forces the Persistence Context to stay open so that the View layer can trigger the Proxy initialization.</p>\n\n<p><a href=\"https://i.stack.imgur.com/6jtkC.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/6jtkC.png\" alt=\"enter image description here\"></a></p>\n\n<ul>\n<li>The <code>OpenSessionInViewFilter</code> calls the <code>openSession</code> method of the underlying <code>SessionFactory</code> and obtains a new <code>Session</code>.</li>\n<li>The <code>Session</code> is bound to the <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronizationManager.html\" rel=\"nofollow noreferrer\"><code>TransactionSynchronizationManager</code></a>.</li>\n<li>The <code>OpenSessionInViewFilter</code> calls the <code>doFilter</code> of the <code>javax.servlet.FilterChain</code> object reference and the request is further processed</li>\n<li>The <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html\" rel=\"nofollow noreferrer\"><code>DispatcherServlet</code></a> is called, and it routes the HTTP request to the underlying <code>PostController</code>.</li>\n<li>The <code>PostController</code> calls the <code>PostService</code> to get a list of <code>Post</code> entities.</li>\n<li>The <code>PostService</code> opens a new transaction, and the <code>HibernateTransactionManager</code> reuses the same <code>Session</code> that was opened by the <code>OpenSessionInViewFilter</code>.</li>\n<li>The <code>PostDAO</code> fetches the list of <code>Post</code> entities without initializing any lazy association.</li>\n<li>The <code>PostService</code> commits the underlying transaction, but the <code>Session</code> is not closed because it was opened externally.</li>\n<li>The <code>DispatcherServlet</code> starts rendering the UI, which, in turn, navigates the lazy associations and triggers their initialization.</li>\n<li>The <code>OpenSessionInViewFilter</code> can close the <code>Session</code>, and the underlying database connection is released as well.</li>\n</ul>\n\n<p>At a first glance, this might not look like a terrible thing to do, but, once you view it from a database perspective, a series of flaws start to become more obvious.</p>\n\n<p>The service layer opens and closes a database transaction, but afterward, there is no explicit transaction going on. For this reason, every additional statement issued from the UI rendering phase is executed in auto-commit mode. Auto-commit puts pressure on the database server because each statement must flush the transaction log to disk, therefore causing a lot of I/O traffic on the database side. One optimization would be to mark the <code>Connection</code> as read-only which would allow the database server to avoid writing to the transaction log.</p>\n\n<p>There is no separation of concerns anymore because statements are generated both by the service layer and by the UI rendering process. Writing integration tests that <a href=\"/2014/02/01/taming-jpa-with-the-sql-statement-count-validator/\">assert the number of statements being generated</a> requires going through all layers (web, service, DAO), while having the application deployed on a web container. Even when using an in-memory database (e.g. HSQLDB) and a lightweight web server (e.g. Jetty), these integration tests are going to be slower to execute than if layers were separated and the back-end integration tests used the database, while the front-end integration tests were mocking the service layer altogether.</p>\n\n<p>The UI layer is limited to navigating associations which can, in turn, trigger N+1 query problems. Although Hibernate offers <a href=\"https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/annotations/BatchSize.html\" rel=\"nofollow noreferrer\"><code>@BatchSize</code></a> for fetching associations in batches, and <a href=\"https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/annotations/FetchMode.html#SUBSELECT\" rel=\"nofollow noreferrer\"><code>FetchMode.SUBSELECT</code></a> to cope with this scenario, the annotations are affecting the default fetch plan, so they get applied to every business use case. For this reason, a data access layer query is much more suitable because it can be tailored for the current use case data fetch requirements.</p>\n\n<p>Last but not least, the database connection could be held throughout the UI rendering phase(depending on your connection release mode) which increases connection lease time and limits the overall transaction throughput due to congestion on the database connection pool. The more the connection is held, the more other concurrent requests are going to wait to get a connection from the pool.</p>\n\n<p>So, either you get the connection held for too long, either you acquire/release multiple connections for a single HTTP request, therefore putting pressure on the underlying connection pool and limiting scalability.</p>\n    "},{"t":"Do I need <class> elements in persistence.xml?","l":"http://stackoverflow.com/questions/1780341/do-i-need-class-elements-in-persistence-xml","q":"\n\n<p>I have very simple persistance.xml file:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence version=\"1.0\"\n    xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"&gt;\n\n    &lt;persistence-unit name=\"eventractor\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n        &lt;class&gt;pl.michalmech.eventractor.domain.User&lt;/class&gt;\n        &lt;class&gt;pl.michalmech.eventractor.domain.Address&lt;/class&gt;\n        &lt;class&gt;pl.michalmech.eventractor.domain.City&lt;/class&gt;\n        &lt;class&gt;pl.michalmech.eventractor.domain.Country&lt;/class&gt;\n\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"validate\" /&gt;\n            &lt;property name=\"hibernate.show_sql\" value=\"true\" /&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n\n&lt;/persistence&gt;\n</code></pre>\n\n<p>and it works.</p>\n\n<p>But when I remove <code>&lt;class&gt;</code> elements application doesn't see entities (all classes are annotated with <code>@Entity</code>).</p>\n\n<p>Is there any automatic mechanism to scan for <code>@Entity</code> classes?</p>\n    ","a":"\n<p>The persistence.xml has a <code>jar-file</code> that you can use. From <a href=\"http://docs.sun.com/app/docs/doc/819-3669/bnbrk?a=view\" rel=\"nofollow noreferrer\">the Java EE  5 tutorial</a>:</p>\n\n<blockquote>\n  <pre class=\"lang-xml prettyprint-override\"><code>&lt;persistence&gt;\n    &lt;persistence-unit name=\"OrderManagement\"&gt;\n        &lt;description&gt;This unit manages orders and customers.\n            It does not rely on any vendor-specific features and can\n            therefore be deployed to any persistence provider.\n        &lt;/description&gt;\n        &lt;jta-data-source&gt;jdbc/MyOrderDB&lt;/jta-data-source&gt;\n        &lt;jar-file&gt;MyOrderApp.jar&lt;/jar-file&gt;\n        &lt;class&gt;com.widgets.Order&lt;/class&gt;\n        &lt;class&gt;com.widgets.Customer&lt;/class&gt;\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre>\n</blockquote>\n\n<p>This file defines a persistence unit\nnamed <code>OrderManagement</code>, which uses a\nJTA-aware data source <code>jdbc/MyOrderDB</code>. The <code>jar-file</code> and <code>class</code> elements specify managed persistence classes: entity classes, embeddable classes, and mapped superclasses. The <code>jar-file</code> element specifies JAR files that are visible to the packaged persistence unit that contain managed persistence classes, while the <code>class</code> element explicitly names managed persistence classes.</p>\n\n<p>In the case of Hibernate, have a look at the <a href=\"http://docs.jboss.org/hibernate/stable/entitymanager/reference/en/html/configuration.html\" rel=\"nofollow noreferrer\">Chapter2. Setup and configuration</a> too for more details.</p>\n\n<p><strong>EDIT:</strong> Actually, If you don't mind not being spec compliant, Hibernate supports auto-detection even in Java SE. To do so, add the <code>hibernate.archive.autodetection</code> property:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;persistence-unit name=\"eventractor\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n  &lt;!-- This is required to be spec compliant, Hibernate however supports\n       auto-detection even in JSE.\n  &lt;class&gt;pl.michalmech.eventractor.domain.User&lt;/class&gt;\n  &lt;class&gt;pl.michalmech.eventractor.domain.Address&lt;/class&gt;\n  &lt;class&gt;pl.michalmech.eventractor.domain.City&lt;/class&gt;\n  &lt;class&gt;pl.michalmech.eventractor.domain.Country&lt;/class&gt;\n   --&gt;\n\n  &lt;properties&gt;\n    &lt;!-- Scan for annotated classes and Hibernate mapping XML files --&gt;\n    &lt;property name=\"hibernate.archive.autodetection\" value=\"class, hbm\"/&gt;\n\n    &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"validate\" /&gt;\n    &lt;property name=\"hibernate.show_sql\" value=\"true\" /&gt;\n  &lt;/properties&gt;\n&lt;/persistence-unit&gt;\n</code></pre>\n    "},{"t":"JPA 2.0 orphanRemoval=true VS on delete Cascade","l":"http://stackoverflow.com/questions/4329577/jpa-2-0-orphanremoval-true-vs-on-delete-cascade","q":"\n\n<p>I am a little confused about the JPA 2.0 <code>orphanRemoval</code> attribute.</p>\n\n<p>I think I can see its is needed when I use my JPA provider's DB generation tools to create the underlying database DDL to have an <code>ON DELETE CASCADE</code> on the particular relation.</p>\n\n<p>However, if the DB exists and it already has an <code>ON DELETE CASCADE</code> on the relation, is this not enough to cascade the deletion appropriately? What does the <code>orphanRemoval</code> do in addition?</p>\n\n<p>Cheers</p>\n    ","a":"\n<p><code>orphanRemoval</code> has nothing to do with <code>ON DELETE CASCADE</code>.</p>\n\n<p><code>orphanRemoval</code> is an entirely ORM-specific thing. It marks \"child\" entity to be removed when it's no longer referenced from the \"parent\" entity, e.g. when you remove the child entity from the corresponding collection of the parent entity.</p>\n\n<p><code>ON DELETE CASCADE</code> is a database-specific thing, it deletes the \"child\" row in the database when the \"parent\" row is deleted.</p>\n    "},{"t":"Hibernate: Difference between session.get and session.load","l":"http://stackoverflow.com/questions/608947/hibernate-difference-between-session-get-and-session-load","q":"\n\n<p>From the API, I could see it has something to do with proxy. But I couldn't find a lot of information on proxy and do not understand the  difference between calling <code>session.get</code> and <code>session.load</code>. Could someone please explain or direct me to a reference page?</p>\n\n<p>Thank you!!</p>\n    ","a":"\n<p>From the <a href=\"http://forum.hibernate.org/viewtopic.php?p=2387456\" rel=\"nofollow noreferrer\">Hibernate forum</a>:</p>\n\n<blockquote>\n  <p>This from the book Hibernate in Action. Good one read this..</p>\n</blockquote>\n\n<hr>\n\n<p>Retrieving objects by identifier\nThe following Hibernate code snippet retrieves a User object from the database:</p>\n\n<pre><code>User user = (User) session.get(User.class, userID);\n</code></pre>\n\n<p>The get() method is special because the identifier uniquely identifies a single\ninstance of a class. Hence it’s common for applications to use the identifier as a\nconvenient handle to a persistent object. Retrieval by identifier can use the cache\nwhen retrieving an object, avoiding a database hit if the object is already cached.\nHibernate also provides a load() method:</p>\n\n<pre><code>User user = (User) session.load(User.class, userID);\n</code></pre>\n\n<p>The load() method is older; get() was added to Hibernate’s API due to user\nrequest. The difference is trivial:</p>\n\n<p>If load() can’t find the object in the cache or database, an exception is\nthrown. The load() method never returns null. The get() method returns\nnull if the object can’t be found.</p>\n\n<p>The load() method may return a proxy instead of a real persistent instance.\nA proxy is a placeholder that triggers the loading of the real object when it’s\naccessed for the first time; On the\nother hand, get() never returns a proxy.\nChoosing between get() and load() is easy: If you’re certain the persistent\nobject exists, and nonexistence would be considered exceptional, load() is a\ngood option. If you aren’t certain there is a persistent instance with the given\nidentifier, use get() and test the return value to see if it’s null. Using load() has\na further implication: The application may retrieve a valid reference (a proxy) to a\npersistent instance without hitting the database to retrieve its persistent state. So\nload() might not throw an exception when it doesn’t find the persistent object\nin the cache or database; the exception would be thrown later, when the proxy\nis accessed.\nOf course, retrieving an object by identifier isn’t as flexible as using arbitrary\nqueries. </p>\n    "},{"t":"What is the difference between persist() and merge() in hibernate?","l":"http://stackoverflow.com/questions/4509086/what-is-the-difference-between-persist-and-merge-in-hibernate","q":"\n\n<p>What is the difference between persist() and merge() in Hibernate?</p>\n\n<p><code>persist()</code> can create a UPDATE &amp; INSERT query, eg:</p>\n\n<pre><code>SessionFactory sef = cfg.buildSessionFactory();\nSession session = sef.openSession();\nA a=new A();\nsession.persist(a);\na.setName(\"Mario\");\nsession.flush();\n</code></pre>\n\n<p>in this case <strong>query</strong> will be generated like this:</p>\n\n<pre><code>Hibernate: insert into A (NAME, ID) values (?, ?)\nHibernate: update A set NAME=? where ID=?\n</code></pre>\n\n<p>so <code>persist()</code> method can <strong>generate</strong> an Insert and an Update.</p>\n\n<p>Now with <code>merge()</code>:</p>\n\n<pre><code>SessionFactory sef = cfg.buildSessionFactory();\nSession session = sef.openSession();\nSinger singer = new Singer();\nsinger.setName(\"Luciano Pavarotti\");\nsession.merge(singer);\nsession.flush();\n</code></pre>\n\n<p>This is what I see in the database:</p>\n\n<pre><code>SINGER_ID   SINGER_NAME\n1           Ricky Martin\n2           Madonna\n3           Elvis Presley\n4           Luciano Pavarotti\n</code></pre>\n\n<p>Now update a record using <code>merge()</code></p>\n\n<pre><code>SessionFactory sef = cfg.buildSessionFactory();\nSession session = sef.openSession();\nSinger singer = new Singer();\nsinger.setId(2);\nsinger.setName(\"Luciano Pavarotti\");\nsession.merge(singer);\nsession.flush();\n</code></pre>\n\n<p>This is what I see in the database:</p>\n\n<pre><code>SINGER_ID   SINGER_NAME\n1           Ricky Martin\n2           Luciano Pavarotti\n3           Elvis Presley\n</code></pre>\n    ","a":"\n<p><a href=\"http://www.jcp.org/en/jsr/detail?id=317\">JPA specification</a> contains a very precise description of semantics of these operations, better than in javadoc:</p>\n\n<blockquote>\n  <p>The semantics of the <strong>persist</strong>\n  operation, applied to an entity X are\n  as follows: </p>\n  \n  <ul>\n  <li><p>If X is a new entity, it\n  becomes managed. The entity X will be\n  entered into the database at or before\n  transaction commit or as a result of\n  the flush operation.</p></li>\n  <li><p>If X is a\n  preexisting managed entity, it is\n  ignored by the persist operation.\n  However, the persist operation is\n  cascaded to entities referenced by X,\n  if the relationships from X to these\n  other entities are annotated with the\n  <code>cascade=PERSIST</code> or <code>cascade=ALL</code>\n  annotation element value or specified\n  with the equivalent XML descriptor\n  element.</p></li>\n  <li><p>If X is a removed entity,\n  it becomes managed.</p></li>\n  <li><p>If X is a\n  detached object, the\n  <code>EntityExistsException</code> may be thrown\n  when the persist operation is invoked,\n  or the <code>EntityExistsException</code> or\n  another <code>PersistenceException</code> may be\n  thrown at flush or commit time.</p></li>\n  <li><p>For\n  all entities Y referenced by a\n  relationship from X, if the\n  relationship to Y has been annotated\n  with the cascade element value\n  <code>cascade=PERSIST</code> or <code>cascade=ALL</code>, the\n  persist operation is applied to Y.</p></li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p>The semantics of the <strong>merge</strong> operation\n  applied to an entity X are as follows:</p>\n  \n  <ul>\n  <li><p>If X is a detached entity, the state\n  of X is copied onto a pre-existing\n  managed entity instance X' of the same\n  identity or a new managed copy X' of X\n  is created.</p></li>\n  <li><p>If X is a new entity\n  instance, a new managed entity\n  instance X' is created and the state\n  of X is copied into the new managed\n  entity instance X'.</p></li>\n  <li><p>If X is a\n  removed entity instance, an\n  <code>IllegalArgumentException</code> will be\n  thrown by the merge operation (or the\n  transaction commit will fail).</p></li>\n  <li><p>If X\n  is a managed entity, it is ignored by\n  the merge operation, however, the\n  merge operation is cascaded to\n  entities referenced by relationships\n  from X if these relationships have\n  been annotated with the cascade\n  element value <code>cascade=MERGE</code> or\n  <code>cascade=ALL</code> annotation.</p></li>\n  <li><p>For all\n  entities Y referenced by relationships\n  from X having the cascade element\n  value <code>cascade=MERGE</code> or <code>cascade=ALL</code>, Y\n  is merged recursively as Y'. For all\n  such Y referenced by X, X' is set to\n  reference Y'. (Note that if X is\n  managed then X is the same object as\n  X'.)</p></li>\n  <li><p>If X is an entity merged to X',\n  with a reference to another entity Y,\n  where <code>cascade=MERGE</code> or <code>cascade=ALL</code> is\n  not specified, then navigation of the\n  same association from X' yields a\n  reference to a managed object Y' with\n  the same persistent identity as Y.</p></li>\n  </ul>\n</blockquote>\n    "},{"t":"JPA eager fetch does not join","l":"http://stackoverflow.com/questions/463349/jpa-eager-fetch-does-not-join","q":"\n\n<p>What exactly does JPA's fetch strategy control? I can't detect any difference between eager and lazy. In both cases JPA/Hibernate does not automatically join many-to-one relationships.</p>\n\n<p>Example: Person has a single address. An address can belong to many people. The JPA annotated entity classes look like:</p>\n\n<pre><code>@Entity\npublic class Person {\n    @Id\n    public Integer id;\n\n    public String name;\n\n    @ManyToOne(fetch=FetchType.LAZY or EAGER)\n    public Address address;\n}\n\n@Entity\npublic class Address {\n    @Id\n    public Integer id;\n\n    public String name;\n}\n</code></pre>\n\n<p>If I use the JPA query:</p>\n\n<pre><code>select p from Person p where ...\n</code></pre>\n\n<p>JPA/Hibernate generates one SQL query to select from Person table, and then a distinct address query for <strong>each</strong> person:</p>\n\n<pre><code>select ... from Person where ...\nselect ... from Address where id=1\nselect ... from Address where id=2\nselect ... from Address where id=3\n</code></pre>\n\n<p>This is very bad for large result sets. If there are 1000 people it generates 1001 queries (1 from Person and 1000 distinct from Address). I know this because I'm looking at MySQL's query log. It was my understanding that setting address's fetch type to eager will cause JPA/Hibernate to automatically query with a join. However, regardless of the fetch type, it still generates distinct queries for relationships.</p>\n\n<p>Only when I explicitly tell it to join does it actually join:</p>\n\n<pre><code>select p, a from Person p left join p.address a where ...\n</code></pre>\n\n<p>Am I missing something here? I now have to hand code every query so that it left joins the many-to-one relationships. I'm using Hibernate's JPA implementation with MySQL.</p>\n\n<p><strong>Edit:</strong> It appears (see Hibernate FAQ <a href=\"http://www.hibernate.org/117.html#A13\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://www.hibernate.org/118.html#A23\" rel=\"nofollow noreferrer\">here</a>) that <code>FetchType</code> does not impact JPA queries. So in my case I have explicitly tell it to join.</p>\n    ","a":"\n<p>to join you can do multiple things (using eclipselink)</p>\n\n<ul>\n<li><p>in jpql you can do left join fetch</p></li>\n<li><p>in named query you can specify query hint</p></li>\n<li><p>in TypedQuery you can say something like</p>\n\n<p><code>query.setHint(\"eclipselink.join-fetch\", \"e.projects.milestones\");</code></p></li>\n<li><p>there is also batch fetch hint</p>\n\n<p><code>query.setHint(\"eclipselink.batch\", \"e.address\");</code></p></li>\n</ul>\n\n<p>see</p>\n\n<p><a href=\"http://java-persistence-performance.blogspot.com/2010/08/batch-fetching-optimizing-object-graph.html\" rel=\"nofollow\">http://java-persistence-performance.blogspot.com/2010/08/batch-fetching-optimizing-object-graph.html</a></p>\n    "},{"t":"@Column(s) not allowed on a @ManyToOne property","l":"http://stackoverflow.com/questions/4121485/columns-not-allowed-on-a-manytoone-property","q":"\n\n<p>I have a JPA entity with a property set as </p>\n\n<pre><code>@ManyToOne\n@Column(name=\"LicenseeFK\")\nprivate Licensee licensee;\n</code></pre>\n\n<p>But when I deploy on JBoss 6 the application throws an error saying: </p>\n\n<pre><code>org.hibernate.AnnotationException: @Column(s) not allowed on a @ManyToOne property\n</code></pre>\n\n<p>I use Hibernate 3.5 as the JPA 2.0 implementation.</p>\n\n<p>What should I use to reference the foreign key column?</p>\n    ","a":"\n<p>Use <code>@JoinColumn</code> instead of <code>@Column</code>:</p>\n\n<pre><code>@ManyToOne\n@JoinColumn(name=\"LicenseeFK\")\nprivate Licensee licensee;\n</code></pre>\n    "},{"t":"hibernate exception: org.hibernate.AnnotationException: No identifier specified for entity: com..domain.idea.MAE_MFEView","l":"http://stackoverflow.com/questions/4381290/hibernate-exception-org-hibernate-annotationexception-no-identifier-specified","q":"\n\n<p>Why am I getting this exception?</p>\n\n<pre><code>package com.domain.idea;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.OneToOne;\nimport javax.persistence.Table;\n\nimport org.hibernate.annotations.AccessType;\n\n/**\n * object model for the view [InvestmentReturn].[vMAE_MFE]\n */\n@Entity\n@Table(name=\"vMAE_MFE\", schema=\"InvestmentReturn\")\n@AccessType(\"field\")\npublic class MAE_MFEView\n{\n    /**\n     * trade property is a SuggestdTradeRecommendation object\n     */\n    @OneToOne(fetch = FetchType.LAZY , cascade = { CascadeType.PERSIST })\n    @JoinColumn(name = \"suggestedTradeRecommendationID\")\n    private SuggestedTradeRecommendation trade;\n\n    /**\n     * Most Adeverse Excursion value\n     */\n    private int MAE;\n\n    public int getMAE()\n    {\n        return MAE;\n    }\n\n    /**\n     * Most Favorable Excursion value\n     */\n    private int MFE;\n\n    public int getMFE()\n    {\n        return MFE;\n    }\n\n    /**\n     * @return trade property\n     * see #trade\n     */\n    public SuggestedTradeRecommendation getTrade()\n    {\n        return trade;\n    }\n}\n</code></pre>\n\n<p>Update: I've changed my code to look like this:  </p>\n\n<pre><code>package com.domain.idea;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.FetchType;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.OneToOne;\nimport javax.persistence.Table;\n\nimport org.hibernate.annotations.AccessType;\n\n/**\n * object model for the view [InvestmentReturn].[vMAE_MFE]\n */\n@Entity\n@Table(name=\"vMAE_MFE\", schema=\"InvestmentReturn\")\n@AccessType(\"field\")\npublic class MAE_MFEView\n{\n    /**\n     * trade property is a SuggestdTradeRecommendation object\n     */\n    @Id\n    @OneToOne(fetch = FetchType.LAZY , cascade = { CascadeType.PERSIST })\n    @JoinColumn(name = \"suggestedTradeRecommendationID\")\n    private SuggestedTradeRecommendation trade;\n\n    /**\n     * Most Adeverse Excursion value\n     */\n    private int MAE;\n\n    public int getMAE()\n    {\n        return MAE;\n    }\n\n    /**\n     * Most Favorable Excursion value\n     */\n    private int MFE;\n\n    public int getMFE()\n    {\n        return MFE;\n    }\n\n    /**\n     * @return trade property\n     * see #trade\n     */\n    public SuggestedTradeRecommendation getTrade()\n    {\n        return trade;\n    }\n}\n</code></pre>\n\n<p>but now I'm getting this exception:  </p>\n\n<pre><code>Caused by: org.hibernate.MappingException: Could not determine type for: com.domain.idea.SuggestedTradeRecommendation, at table: vMAE_MFE, for columns: [org.hibernate.mapping.Column(trade)]\n    at org.hibernate.mapping.SimpleValue.getType(SimpleValue.java:292)\n    at org.hibernate.mapping.SimpleValue.isValid(SimpleValue.java:276)\n    at org.hibernate.mapping.RootClass.validate(RootClass.java:216)\n    at org.hibernate.cfg.Configuration.validate(Configuration.java:1135)\n    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1320)\n    at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:867)\n    at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:669)\n    ... 145 more\n</code></pre>\n    ","a":"\n<p>You are missing a field annotated with <code>@Id</code>. Each <code>@Entity</code> needs an <code>@Id</code> - this is the primary key in the database. </p>\n\n<p>If you don't want your entity to be persisted in a separate table, but rather be a part of other entities, you can use <code>@Embeddable</code> instead of <code>@Entity</code>.</p>\n\n<p>If you want simply a data transfer object to hold some data from the hibernate entity, use no annotations on it whatsoever - leave it a simple pojo.</p>\n\n<p>Update: In regards to SQL views, Hibernate docs write:</p>\n\n<blockquote>\n  <p>There is no difference between a view and a base table for a Hibernate mapping. This is transparent at the database level</p>\n</blockquote>\n    "},{"t":"How do you create a Distinct query in HQL","l":"http://stackoverflow.com/questions/263850/how-do-you-create-a-distinct-query-in-hql","q":"\n\n<p>Is there a way to create a Distinct query in HQL.  Either by using the \"distinct\" keyword or some other method.  I am not sure if distinct is a valid keywork for HQL, but I am looking for the HQL equivalent of the SQL keyword \"distinct\".</p>\n    ","a":"\n<p>Here's a snippet of hql that we use. (Names have been changed to protect identities)</p>\n\n<pre><code>String queryString = \"select distinct f from Foo f inner join foo.bars as b\" +\n                \" where f.creationDate &gt;= ? and f.creationDate &lt; ? and b.bar = ?\";\n        return getHibernateTemplate().find(queryString, new Object[] {startDate, endDate, bar});\n</code></pre>\n    "},{"t":"How to avoid type safety warnings with Hibernate HQL results?","l":"http://stackoverflow.com/questions/115692/how-to-avoid-type-safety-warnings-with-hibernate-hql-results","q":"\n\n<p>For example I have such query:</p>\n\n<pre><code>Query q = sess.createQuery(\"from Cat cat\");\nList cats = q.list();\n</code></pre>\n\n<p>If I try to make something like this it will show warning \"Type safety: The expression of type List needs unchecked conversion to conform to List\":</p>\n\n<pre><code>List&lt;Cat&gt; cats = q.list();\n</code></pre>\n\n<p>Is there a way to avoid it?</p>\n    ","a":"\n<p>Using <code>@SuppressWarnings</code> everywhere, as suggested, is a good way to do it, though it does involve a bit of finger typing each time you call <code>q.list()</code>.</p>\n\n<p>There are two other techniques I'd suggest:</p>\n\n<p><strong><code>Collections.checkedList()</code></strong></p>\n\n<p>Replace your assignment with this:</p>\n\n<pre><code>List&lt;Cat&gt; cats = Collections.checkedList(q.list(), Cat.class);\n</code></pre>\n\n<p>You might want to check the the <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collections.html\" rel=\"nofollow noreferrer\">javadoc for that method</a>, especially with regards to <code>equals</code> and <code>hashCode</code>.</p>\n\n<p><strong>Write a cast-helper</strong></p>\n\n<p>Simply refactor all your <code>@SuppressWarnings</code> into one place:</p>\n\n<pre><code>List&lt;Cat&gt; cats = MyHibernateUtils.listAndCast(q);\n\n...\n\npublic static &lt;T&gt; List&lt;T&gt; listAndCast(Query q) {\n    @SuppressWarnings(\"unchecked\")\n    List list = q.list();\n    return list;\n}\n</code></pre>\n\n<p>Some comments:</p>\n\n<ul>\n<li>I chose to pass in the <code>Query</code> instead of the result of <code>q.list()</code> because that way this \"cheating\" method can only be used to cheat with Hibernate, and not for cheating any <code>List</code> in general.</li>\n<li>You could add similar methods for <code>.iterate()</code> etc.</li>\n</ul>\n    "},{"t":"Enumerations in Hibernate","l":"http://stackoverflow.com/questions/417062/enumerations-in-hibernate","q":"\n\n<p>It is often useful to have a field in a DAO whose value comes from a Java enumeration. A typical example is a login DAO where you usually have a field that characterises the user as \"NORMAL\" or \"ADMIN\". In Hibernate, I would use the following 2 objects to represent this relationship in a (semi-)typesafe way:</p>\n\n<pre><code>class User {\n    String username;\n    String passwd;\n    UserType type;\n}\n\nclass UserType {\n    private enum Type {ADMIN, NORMAL};\n    private String type;\n\n    //Setters/Getters for Hibernate\n    public void setType(String type);\n    public String getType();\n\n    //Setters/Getters for user\n    public void setUserType(UserType.Type t);\n    public UserType.Type getUserType();\n\n    public static UserType fromType(UserType.Type t);\n}\n</code></pre>\n\n<p>This works, but I find the UserType class ungly and requiring too much bureaucracy just to store a couple of values. Ideally, Hibernate should support enum fields directly and would create an extra table to store the enumeration values.</p>\n\n<p>My question is: Is there any way to directly map an enumeration class in Hibernate? If not, is my pattern for representing enumerations good enough or am I missing something? What other patterns do people use? </p>\n    ","a":"\n<p>using hibernate or JPA annotations:</p>\n\n<pre><code>class User {\n   @Enumerated(EnumType.STRING)\n   UserType type\n}\n</code></pre>\n\n<p>UserType is just a standard java 5 enum. </p>\n\n<p>I can't imagine this is just limited to just annotations but I don't actually know how to do this with hbm files. It may be very version dependant, I'm guessing but I'm pretty sure that hibernate 3.2+ is required.</p>\n\n<p>edit: it is possible in a hbm, but is a little messy, have a look at this <a href=\"http://forum.hibernate.org/viewtopic.php?p=2377095\" rel=\"nofollow noreferrer\">forum thread</a></p>\n    "},{"t":"Can javax.persistence.Query.getResultList() return null?","l":"http://stackoverflow.com/questions/1115480/can-javax-persistence-query-getresultlist-return-null","q":"\n\n<p>And if so, under what circumstances?</p>\n\n<p>Javadoc and JPA spec says nothing. </p>\n    ","a":"\n<p>You are right. JPA specification says nothing about it. But <strong>Java Persistence with Hibernate book, 2nd edition</strong>, says:</p>\n\n<blockquote>\n  <p>If the query result is empty, a null is returned</p>\n</blockquote>\n\n<p>Hibernate JPA implementation (Entity Manager) return null when you call query.getResultList() with no result.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>As pointed out by some users, it seems that a newest version of Hibernate returns an empty list instead.</p>\n    "},{"t":"Hibernate lazy-load application design","l":"http://stackoverflow.com/questions/5027013/hibernate-lazy-load-application-design","q":"\n\n<p>I tend to use <a href=\"http://www.hibernate.org/docs\">Hibernate</a> in combination with <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate\">Spring</a> framework and it's declarative transaction demarcation capabilities (e.g., <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#transaction-declarative-annotations\">@Transactional</a>). </p>\n\n<p>As we all known, hibernate tries to be as <em>non-invasive</em> and as <em>transparent</em> as possible, however this proves <strong>a bit more challenging</strong> when employing <strong><code>lazy-loaded</code></strong> relationships. </p>\n\n<hr>\n\n<p>I see a number of design alternatives with different levels of transparency. </p>\n\n<ol>\n<li>Make relationships not lazy-loaded (e.g., <code>fetchType=FetchType.EAGER)</code>\n<ul>\n<li>This vioalites the entire idea of lazy loading .. </li>\n</ul></li>\n<li>Initialize collections using <code>Hibernate.initialize(proxyObj);</code>\n<ul>\n<li>This implies relatively high-coupling to the DAO</li>\n<li>Although we can define an interface with <code>initialize</code>, other implementations are not guaranteed to provide any equivalent. </li>\n</ul></li>\n<li>Add transaction behaviour to the persistent <code>Model</code> objects themselves (using either <a href=\"http://download.oracle.com/javase/6/docs/api/\">dynamic proxy</a> or <code>@Transactional</code>)\n<ul>\n<li>I've not tried the dynamic proxy approach, although I never seemed to get @Transactional working on the persistent objects themselves. Probably due to that hibernate is operation on a proxy to bein with. </li>\n<li>Loss of control when transactions are actually taking place</li>\n</ul></li>\n<li>Provide both lazy/non-lazy API, e.g, <code>loadData()</code> and <code>loadDataWithDeps()</code>\n<ul>\n<li>Forces the application to know when to employ which routine, again tight coupling</li>\n<li>Method overflow, <code>loadDataWithA()</code>, ...., <code>loadDataWithX()</code></li>\n</ul></li>\n<li>Force lookup for dependencies, e.g., by only providing <code>byId()</code> operations\n<ul>\n<li>Requires alot of non-object oriented routines, e.g., <code>findZzzById(zid)</code>, and then <code>getYyyIds(zid)</code> instead of <code>z.getY()</code></li>\n<li>It can be useful to fetch each object in a collection one-by-one if there's a large processing overhead between the transactions. </li>\n</ul></li>\n<li>Make part of the <em>application</em> @Transactional instead of only the <a href=\"http://en.wikipedia.org/wiki/Data_access_object\">DAO</a>\n<ul>\n<li>Possible considerations of nested transactions</li>\n<li>Requires routines adapted for transaction management (e.g., suffiently small)</li>\n<li>Small programmatic impact, although might result in large transactions</li>\n</ul></li>\n<li>Provide the DAO with dynamic <a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e3524\">fetch profiles</a>, e.g., <code>loadData(id, fetchProfile);</code>\n<ul>\n<li>Applications must know which profile to use when</li>\n</ul></li>\n<li>AoP type of transactions, e.g., intercept operations and perform transactions when necessary\n<ul>\n<li>Requires byte-code manipulation or proxy usage</li>\n<li>Loss of control when transactions are performed</li>\n<li>Black magic, as always :)</li>\n</ul></li>\n</ol>\n\n<p>Did I miss any option?</p>\n\n<hr>\n\n<p>Which is your preferred approach when trying to minimize the impact of <code>lazy-loaded</code> relationships in your application design? </p>\n\n<p>(Oh, and sorry for <a href=\"http://www.urbandictionary.com/define.php?term=wall%20of%20text\">WoT</a>)</p>\n    ","a":"\n<blockquote>\n  <p>As we all known, hibernate tries to be as non-invasive and as transparent as possible</p>\n</blockquote>\n\n<p>I would say the initial assumption is wrong. Transaparent persistence is a myth, since application always should take care of entity lifecycle and of size of object graph being loaded.</p>\n\n<p>Note that Hibernate can't read thoughts, therefore if you know that you need a particular set of dependencies for a particular operation, you need to express your intentions to Hibernate somehow.</p>\n\n<p>From this point of view, solutions that express these intentions explicitly (namely, 2, 4 and 7) look reasonable and don't suffer from the lack of transparency.</p>\n    "},{"t":"Correct use of flush() in JPA/Hibernate","l":"http://stackoverflow.com/questions/4275111/correct-use-of-flush-in-jpa-hibernate","q":"\n\n<p>I was gathering information about the flush() method, but I'm not quite clear when to use it and how to use it correctly. From what I read, my understanding is that the contents of the persistence context will be synchronized with the database, i. e. issuing outstanding statements or refreshing entity data.</p>\n\n<p>Now I got following scenario with two entities <code>A</code> and <code>B</code> (in a one-to-one relationship, but not enforced or modelled by JPA). <code>A</code> has a composite PK, which is manually set, and also has an auto-generated IDENTITY field <code>recordId</code>. This <code>recordId</code> should be written to entity <code>B</code> as a foreign-key to <code>A</code>. I'm saving <code>A</code> and <code>B</code> in a single transaction. The problem is that the auto-generated value <code>A.recordId</code> is not available within the transaction, unless I make an explicit call of <code>em.flush()</code> after calling <code>em.persist()</code> on <code>A</code>. (If I have an auto-generated IDENTITY PK then the value is directly updated in the entity, but that's not the case here.)</p>\n\n<p><strong>Can <code>em.flush()</code> cause any harm when using it within a transaction?</strong></p>\n    ","a":"\n<p>Probably the exact details of <code>em.flush()</code> are implementation-dependent.\nIn general anyway, JPA providers like Hibernate can cache the SQL instructions they are supposed to send to the database, often until you actually commit the transaction.\nFor example, you call <code>em.persist()</code>, Hibernate remembers it has to make a database INSERT, but does not actually execute the instruction until you commit the transaction. Afaik, this is mainly done for performance reasons.</p>\n\n<p>In some cases anyway you want the SQL instructions to be executed immediately; generally when you need the result of some side effects, like an autogenerated key, or a database trigger.</p>\n\n<p>What <code>em.flush()</code> does is to empty the internal SQL instructions cache, and execute it immediately to the database.</p>\n\n<p>Bottom line: no harm is done, only you could have a (minor) performance hit since you are overriding the JPA provider decisions as regards the best timing to send SQL instructions to the database.</p>\n    "},{"t":"Hibernate JPA Sequence (non-Id)","l":"http://stackoverflow.com/questions/277630/hibernate-jpa-sequence-non-id","q":"\n\n<p>Is it possible to use a DB sequence for some column that <strong>is not the identifier/is not part of a composite identifier</strong>? </p>\n\n<p>I'm using hibernate as jpa provider, and I have a table that has some columns that are generated values (using a sequence), although they are not part of the identifier.</p>\n\n<p>What I want is to use a sequence to create a new value for an entity, where the column for the sequence is <strong>NOT</strong> (part of) the primary key:</p>\n\n<pre><code>@Entity\n@Table(name = \"MyTable\")\npublic class MyEntity {\n\n    //...\n    @Id //... etc\n    public Long getId() {\n        return id;\n    }\n\n   //note NO @Id here! but this doesn't work...\n    @GeneratedValue(strategy = GenerationType.AUTO, generator = \"myGen\")\n    @SequenceGenerator(name = \"myGen\", sequenceName = \"MY_SEQUENCE\")\n    @Column(name = \"SEQ_VAL\", unique = false, nullable = false, insertable = true, updatable = true)\n    public Long getMySequencedValue(){\n      return myVal;\n    }\n\n}\n</code></pre>\n\n<p>Then when I do this:</p>\n\n<pre><code>em.persist(new MyEntity());\n</code></pre>\n\n<p>the id will be generated, but the <code>mySequenceVal</code> property will be also generated by my JPA provider.</p>\n\n<p>Just to make things clear: I want <strong>Hibernate</strong> to generate the value for the <code>mySequencedValue</code> property. I know Hibernate can handle database-generated values, but I don't want to use a trigger or any other thing other than Hibernate itself to generate the value for my property. If Hibernate can generate values for primary keys, why can't it generate for a simple property?</p>\n    ","a":"\n<p>Looking for answers to this problem, I stumbled upon <a href=\"http://forum.hibernate.org/viewtopic.php?p=2405140\" rel=\"nofollow noreferrer\">this link</a></p>\n\n<p>It seems that Hibernate/JPA isn't able to automatically create a value for your non-id-properties. The <code>@GeneratedValue</code> annotation is only used in conjunction with <code>@Id</code> to create auto-numbers.</p>\n\n<p>The <code>@GeneratedValue</code> annotation just tells Hibernate that the database is generating this value itself.</p>\n\n<p>The solution (or work-around) suggested in that forum is to create a separate entity with a generated Id, something like this:</p>\n\n<pre>@Entity\npublic class GeneralSequenceNumber {\n  @Id\n  @GeneratedValue(...)\n  private Long number;\n}\n\n@Entity \npublic class MyEntity {\n  @Id ..\n  private Long id;\n\n  @OneToOne(...)\n  private GeneralSequnceNumber myVal;\n}\n</pre>\n    "},{"t":"JPA “@JoinTable” annotation","l":"http://stackoverflow.com/questions/5478328/jpa-jointable-annotation","q":"\n\n<p>In which case do you use JPA @JoinTable annotation?</p>\n    ","a":"\n<p>Let's pretend that you have an entity named <code>Project</code> and another entity named <code>Task</code> and each project can have many tasks.</p>\n\n<p>You can design the database schema for this scenario in two ways.</p>\n\n<p>The first solution is to create a table named <code>Project</code> and another table named <code>Task</code> and add a foreign key column to the task table named <code>project_id</code>: </p>\n\n<pre><code>Project      Task\n-------      ----\nid           id\nname         name\n             project_id\n</code></pre>\n\n<p>This way, it will be possible to determine the project for each row in the task table. If you use this approach, in your entity classes you won't need a join table:</p>\n\n<pre><code>@Entity\npublic class Project {\n\n @OneToMany(mappedBy = \"project\")\n private Collection&lt;Task&gt; tasks;\n\n}\n\n@Entity\npublic class Task {\n\n @ManyToOne\n private Project project;\n\n}\n</code></pre>\n\n<p>The other solution is to use a third table, e.g. <code>Project_Tasks</code>, and store the relationship between projects and tasks in that table:</p>\n\n<pre><code>Project      Task      Project_Tasks\n-------      ----      -------------\nid           id        project_id\nname         name      task_id\n</code></pre>\n\n<p>The <code>Project_Tasks</code> table is called a \"Join Table\". To map this second solution to JPA, you need to use the <code>@JoinTable</code> annotation:</p>\n\n<pre><code>@Entity\npublic class Project {\n\n @Id\n private Long id;\n\n @OneToMany(mappedBy = \"project\")\n @JoinTable(\n   name = \"Project_Tasks\", \n   joinColumns = @JoinColumn(name = \"project_id\"), \n   inverseJoinColumns = @JoinColumn(name = \"task_id\")\n )\n private Collection&lt;Task&gt; tasks;\n\n}\n\n@Entity\npublic class Task {\n\n @Id\n private Long id;\n\n @ManyToOne\n private Project project;\n\n}\n</code></pre>\n\n<p>Finally, if you want to create a schema for a many-to-many association, using a join table is the only available solution.</p>\n    "},{"t":"ConcurrentModificationException and a HashMap","l":"http://stackoverflow.com/questions/602636/concurrentmodificationexception-and-a-hashmap","q":"\n\n<p>I am persisting objects using JPA.  The Main object has an owning One-Many relationship with another object.  The other object is stored in a HashMap.  What sort of synchronization would fix this problem?  It seems to happen at completely random times and is very unpredictable.  Here is the exception I get:</p>\n\n<pre><code>Exception in thread \"pool-1-thread-1\" java.util.ConcurrentModificationException\n        at java.util.HashMap$HashIterator.nextEntry(Unknown Source)\n        at java.util.HashMap$ValueIterator.next(Unknown Source)\n        at org.hibernate.collection.AbstractPersistentCollection$IteratorProxy.next(AbstractPersistentCollection.java:555)\n        at org.hibernate.engine.Cascade.cascadeCollectionElements(Cascade.java:296)\n        at org.hibernate.engine.Cascade.cascadeCollection(Cascade.java:242)\n        at org.hibernate.engine.Cascade.cascadeAssociation(Cascade.java:219)\n        at org.hibernate.engine.Cascade.cascadeProperty(Cascade.java:169)\n        at org.hibernate.engine.Cascade.cascade(Cascade.java:130)\n</code></pre>\n    ","a":"\n<p>This is not a synchronization problem.  This will occur if the underlying collection that is being iterated over is modified by anything other than the Iterator itself.</p>\n\n<pre><code>Iterator it = map.entrySet().iterator();\nwhile (it.hasNext())\n{\n   Entry item = it.next();\n   map.remove(item.getKey());\n}\n</code></pre>\n\n<p>This will throw a ConcurrentModificationException when the it.hasNext() is called the second time.</p>\n\n<p>The correct approach would be </p>\n\n<pre><code>   Iterator it = map.entrySet().iterator();\n   while (it.hasNext())\n   {\n      Entry item = it.next();\n      it.remove();\n   }\n</code></pre>\n\n<p>Assuming this iterator supports the remove() operation.</p>\n    "},{"t":"Hibernate - A collection with cascade=”all-delete-orphan” was no longer referenced by the owning entity instance","l":"http://stackoverflow.com/questions/5587482/hibernate-a-collection-with-cascade-all-delete-orphan-was-no-longer-referenc","q":"\n\n<p>I'm having the following issue when trying to update my entity:</p>\n\n<pre><code>\"A collection with cascade=”all-delete-orphan” was no longer referenced by the owning entity instance\".\n</code></pre>\n\n<p>I have a parent entity and it has a Set&lt;...&gt; of some children entities. When I try to update it, I get all the references to be setted to this collections and set it.</p>\n\n<p>The following code represents my mapping:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@OneToMany(mappedBy = \"parentEntity\", fetch = FetchType.EAGER)\n@Cascade({ CascadeType.ALL, CascadeType.DELETE_ORPHAN })\npublic Set&lt;ChildEntity&gt; getChildren() {\n    return this.children;\n}\n</code></pre>\n\n<p>I've tried to clean the Set&lt;..&gt; only, according to this: <a href=\"http://www.onkarjoshi.com/blog/188/hibernateexception-a-collection-with-cascade-all-delete-orphan-was-no-longer-referenced-by-the-owning-entity-instance/comment-page-1/#comment-9994\" rel=\"nofollow\">How to \"possible\" solve the problem</a> but it didn't work.</p>\n\n<p>If you have any ideas, please let me know.</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>Actually, my problem was about equals and hashcode of my entities. A legacy code can bring a lot of problems, never forget to check it out. All I've done was just keep delete-orphan strategy and correct equals and hashcode.</p>\n    "},{"t":"proper hibernate annotation for byte[]","l":"http://stackoverflow.com/questions/3677380/proper-hibernate-annotation-for-byte","q":"\n\n<p>I have an application using hibernate 3.1 and JPA annotations.  It has a few objects with byte[] attributes (1k - 200k in size).  It uses the JPA @Lob annotation, and hibernate 3.1 can read these just fine on all major databases -- it seems to hide the JDBC Blob vendor peculiarities (as it should do).</p>\n\n<pre><code>@Entity\npublic class ConfigAttribute {\n  @Lob\n  public byte[] getValueBuffer() {\n    return m_valueBuffer;\n  }\n}\n</code></pre>\n\n<p>We had to upgrade to 3.5, when we discovered that hibernate 3.5  <a href=\"http://hibernate.atlassian.net/browse/HHH-4876\" rel=\"nofollow noreferrer\">breaks (and won't fix)</a> this annotation combination in postgresql (with no workaround).  I have not found a clear fix so far, but I did notice that if I just remove the @Lob, it uses the postgresql type bytea (which works, but only on postgres).</p>\n\n<pre><code>annotation                   postgres     oracle      works on\n-------------------------------------------------------------\nbyte[] + @Lob                oid          blob        oracle\nbyte[]                       bytea        raw(255)    postgresql\nbyte[] + @Type(PBA)          oid          blob        oracle\nbyte[] + @Type(BT)           bytea        blob        postgresql\n\nonce you use @Type, @Lob seems to not be relevant\nnote: oracle seems to have deprecated the \"raw\" type since 8i.\n</code></pre>\n\n<p>I am looking for a way to have a single annotated class (with a blob property) which is portable across major databases.</p>\n\n<ul>\n<li>What is the portable way to annotate a byte[] property?</li>\n<li>Is this fixed in some recent version of hibernate?</li>\n</ul>\n\n<p><strong>Update:</strong>\nAfter reading <a href=\"http://in.relation.to/Bloggers/PostgreSQLAndBLOBs#comment15505\" rel=\"nofollow noreferrer\">this blog</a> I have finally figured out what the original workaround in the JIRA issue was: Apparently you are supposed to drop @Lob and annotate the property as:</p>\n\n<pre><code>@Type(type=\"org.hibernate.type.PrimitiveByteArrayBlobType\") \nbyte[] getValueBuffer() {...\n</code></pre>\n\n<p>However, this does not work <em>for me</em> -- I still get OIDs instead of bytea; it did however work for the author of the JIRA issue, who seemed to want oid.</p>\n\n<p>After the answer from A. Garcia, I then tried this combo, which actually does work on postgresql, but not on oracle.</p>\n\n<pre><code>@Type(type=\"org.hibernate.type.BinaryType\") \nbyte[] getValueBuffer() {...\n</code></pre>\n\n<p>What I really need to do is control which @org.hibernate.annotations.Type the combination (@Lob + byte[] gets mapped) to (on postgresql).</p>\n\n<hr>\n\n<p>Here is the snippet from 3.5.5.Final from MaterializedBlobType (sql type Blob).  According to Steve's blog, postgresql wants you to use Streams for bytea (don't ask me why) and postgresql's custom Blob type for oids.  Note also that using setBytes() on JDBC is also for bytea (from past experience).  So this explains why use-streams has no affect they both assume 'bytea'.</p>\n\n<pre><code>public void set(PreparedStatement st, Object value, int index) {\n byte[] internalValue = toInternalFormat( value );\n if ( Environment.useStreamsForBinary() ) {\n  // use streams = true\n   st.setBinaryStream( index, \n    new ByteArrayInputStream( internalValue ), internalValue.length );\n }\n else {\n  // use streams = false\n  st.setBytes( index, internalValue );\n }\n}\n</code></pre>\n\n<p>This results in:</p>\n\n<pre><code>ERROR: column \"signature\" is of type oid but expression is of type bytea\n</code></pre>\n\n<p><strong>Update</strong>\nThe next logical question is: \"why not just change the table definitions manually to bytea\" and keep the (@Lob + byte[])?  This <em>does</em> work, <strong>UNTIL</strong> you try to store a null byte[].  Which the postgreSQL driver thinks is an OID type expression and the column type is bytea -- this is because hibernate (rightly) calls JDBC.setNull() instead of JDBC.setBytes(null) which PG driver expects. </p>\n\n<pre><code>ERROR: column \"signature\" is of type bytea but expression is of type oid\n</code></pre>\n\n<p>The type system in hibernate is currently a 'work in progress' (according to 3.5.5 deprecation comment).  In fact so much of the 3.5.5 code is deprecated, it is hard to know what to look at when sub-classing the PostgreSQLDialect).  </p>\n\n<p>AFAKT, Types.BLOB/'oid' on postgresql should be mapped to some custom type which uses OID style JDBC access (i.e. PostgresqlBlobType object and NOT MaterializedBlobType).  I've never actually successfully used Blobs with postgresql, but I do know that bytea just simply works as one / I would expect.</p>\n\n<p>I am currently looking at the BatchUpdateException -- its possible that the driver doesn't support batching.  </p>\n\n<hr>\n\n<p>Great quote from 2004:\n \"To sum up my ramblings, I'd say they we should wait for the JDBC driver to do LOBs properly before changing Hibernate.\"</p>\n\n<p><strong>References:</strong></p>\n\n<ul>\n<li><a href=\"https://forum.hibernate.org/viewtopic.php?p=2393203\" rel=\"nofollow noreferrer\">https://forum.hibernate.org/viewtopic.php?p=2393203</a></li>\n<li><a href=\"https://forum.hibernate.org/viewtopic.php?p=2435174\" rel=\"nofollow noreferrer\">https://forum.hibernate.org/viewtopic.php?p=2435174</a></li>\n<li><a href=\"http://hibernate.atlassian.net/browse/HHH-4617\" rel=\"nofollow noreferrer\">http://hibernate.atlassian.net/browse/HHH-4617</a></li>\n<li><a href=\"http://postgresql.1045698.n5.nabble.com/Migration-to-Hibernate-3-5-final-td2175339.html\" rel=\"nofollow noreferrer\">http://postgresql.1045698.n5.nabble.com/Migration-to-Hibernate-3-5-final-td2175339.html</a></li>\n<li><a href=\"https://jira.springframework.org/browse/SPR-2318\" rel=\"nofollow noreferrer\">https://jira.springframework.org/browse/SPR-2318</a></li>\n<li><a href=\"https://forums.hibernate.org/viewtopic.php?p=2203382&amp;sid=b526a17d9cf60a80f13d40cf8082aafd\" rel=\"nofollow noreferrer\">https://forums.hibernate.org/viewtopic.php?p=2203382&amp;sid=b526a17d9cf60a80f13d40cf8082aafd</a></li>\n<li><a href=\"http://virgo47.wordpress.com/2008/06/13/jpa-postgresql-and-bytea-vs-oid-type/\" rel=\"nofollow noreferrer\">http://virgo47.wordpress.com/2008/06/13/jpa-postgresql-and-bytea-vs-oid-type/</a></li>\n</ul>\n    ","a":"\n<blockquote>\n  <p>What is the portable way to annotate a byte[] property?</p>\n</blockquote>\n\n<p>It depends on what you want. JPA can persist a non annotated <code>byte[]</code>. From the JPA 2.0 spec: </p>\n\n<blockquote>\n  <h3>11.1.6 Basic Annotation</h3>\n  \n  <p>The <code>Basic</code> annotation is the simplest\n  type of mapping to a database column.\n  The <code>Basic</code> annotation can be applied\n  to a persistent property or instance\n  variable of any of the following\n  types: Java primitive, types, wrappers\n  of the primitive types,\n  <code>java.lang.String</code>,\n  <code>java.math.BigInteger</code>,\n  <code>java.math.BigDecimal</code>,\n  <code>java.util.Date</code>,\n  <code>java.util.Calendar</code>, <code>java.sql.Date</code>,\n  <code>java.sql.Time</code>, <code>java.sql.Timestamp</code>,\n  <strong><code>byte[]</code>, <code>Byte[]</code></strong>, <code>char[]</code>, <code>Character[]</code>, enums, and any other\n  type that implements <code>Serializable</code>.\n  As described in Section 2.8, the use\n  of the <code>Basic</code> annotation is optional\n  for persistent fields and properties\n  of these types. If the Basic\n  annotation is not specified for such a\n  field or property, the default values\n  of the Basic annotation will apply.</p>\n</blockquote>\n\n<p>And Hibernate will map a it \"by default\" to a SQL <code>VARBINARY</code> (or a SQL <code>LONGVARBINARY</code> depending on the <code>Column</code> size?) that PostgreSQL handles with a <code>bytea</code>.</p>\n\n<p>But if you want the <code>byte[]</code> to be stored in a Large Object, you should use a <code>@Lob</code>. From the spec:</p>\n\n<blockquote>\n  <h3>11.1.24 Lob Annotation</h3>\n  \n  <p>A <code>Lob</code> annotation specifies that a\n  persistent property or field should be\n  persisted as a large object to a\n  database-supported large object type.\n  Portable applications should use the\n  <code>Lob</code> annotation when mapping to a\n  database <code>Lob</code> type. The <code>Lob</code> annotation\n  may be used in conjunction with the\n  Basic annotation or with the\n  <code>ElementCollection</code> annotation when the\n  element collection value is of basic\n  type. A <code>Lob</code> may be either a binary or\n  character type. The <code>Lob</code> type is\n  inferred from the type of the\n  persistent field or property and,\n  except for string and character types,\n  defaults to Blob.</p>\n</blockquote>\n\n<p>And Hibernate will map it to a SQL <code>BLOB</code> that PostgreSQL handles with a <code>oid</code>\n.</p>\n\n<blockquote>\n  <p>Is this fixed in some recent version of hibernate?</p>\n</blockquote>\n\n<p>Well, the problem is that I don't know what the problem is exactly. But I can at least say that nothing has changed since 3.5.0-Beta-2 (which is where a changed has been introduced)in the 3.5.x branch.</p>\n\n<p>But my understanding of issues like <a href=\"http://opensource.atlassian.com/projects/hibernate/browse/HHH-4876\" rel=\"nofollow noreferrer\">HHH-4876</a>, <a href=\"http://opensource.atlassian.com/projects/hibernate/browse/HHH-4617\" rel=\"nofollow noreferrer\">HHH-4617</a> and of <a href=\"http://relation.to/Bloggers/PostgreSQLAndBLOBs\" rel=\"nofollow noreferrer\">PostgreSQL and BLOBs</a> (mentioned in the javadoc of the  <code>PostgreSQLDialect</code>) is that you are supposed to set the following property</p>\n\n<pre><code>hibernate.jdbc.use_streams_for_binary=false\n</code></pre>\n\n<p>if you want to use <code>oid</code> i.e. <code>byte[]</code> with <code>@Lob</code> (which is my understanding since <code>VARBINARY</code> is not what you want with Oracle). Did you try this?</p>\n\n<p>As an alternative, <a href=\"http://opensource.atlassian.com/projects/hibernate/browse/HHH-4876\" rel=\"nofollow noreferrer\">HHH-4876</a> suggests using the deprecated <code>PrimitiveByteArrayBlobType</code> to get the old behavior (pre Hibernate 3.5).</p>\n\n<h3>References</h3>\n\n<ul>\n<li>JPA 2.0 Specification\n\n<ul>\n<li>Section 2.8 \"Mapping Defaults for Non-Relationship Fields or Properties\"</li>\n<li>Section 11.1.6 \"Basic Annotation\"</li>\n<li>Section 11.1.24 \"Lob Annotation\"</li>\n</ul></li>\n</ul>\n\n<h3>Resources</h3>\n\n<ul>\n<li><a href=\"http://opensource.atlassian.com/projects/hibernate/browse/HHH-4876\" rel=\"nofollow noreferrer\">http://opensource.atlassian.com/projects/hibernate/browse/HHH-4876</a></li>\n<li><a href=\"http://opensource.atlassian.com/projects/hibernate/browse/HHH-4617\" rel=\"nofollow noreferrer\">http://opensource.atlassian.com/projects/hibernate/browse/HHH-4617</a></li>\n<li><a href=\"http://relation.to/Bloggers/PostgreSQLAndBLOBs\" rel=\"nofollow noreferrer\">http://relation.to/Bloggers/PostgreSQLAndBLOBs</a></li>\n</ul>\n    "},{"t":"Hibernate: Automatically creating/updating the db tables based on entity classes","l":"http://stackoverflow.com/questions/306806/hibernate-automatically-creating-updating-the-db-tables-based-on-entity-classes","q":"\n\n<p>I have the following entity class (in Groovy):</p>\n\n<pre><code>import javax.persistence.Entity\nimport javax.persistence.Id\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\n\n@Entity\npublic class ServerNode {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  Long id\n\n  String firstName\n  String lastName\n\n\n}\n</code></pre>\n\n<p>and my persistence.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\"&gt;\n\n    &lt;persistence-unit name=\"NewPersistenceUnit\"&gt;\n        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.connection.url\" value=\"jdbc:mysql://localhost:3306/Icarus\"/&gt;\n            &lt;property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\"/&gt;\n            &lt;property name=\"hibernate.connection.username\" value=\"root\"/&gt;\n            &lt;property name=\"hibernate.connection.password\" value=\"\"/&gt;\n            &lt;property name=\"hibernate.archive.autodetection\" value=\"class\"/&gt;\n            &lt;property name=\"hibernate.show_sql\" value=\"true\"/&gt;\n            &lt;property name=\"hibernate.format_sql\" value=\"true\"/&gt;\n            &lt;property name=\"hbm2ddl.auto\" value=\"create\"/&gt;\n        &lt;/properties&gt;\n        &lt;class&gt;net.interaxia.icarus.data.models.ServerNode&lt;/class&gt;\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre>\n\n<p>and the script:</p>\n\n<pre><code>import javax.persistence.EntityManager\nimport javax.persistence.EntityManagerFactory\nimport javax.persistence.Persistence\nimport net.interaxia.icarus.data.models.ServerNode\n\ndef factory = Persistence.createEntityManagerFactory(\"NewPersistenceUnit\")\ndef manager = factory.createEntityManager()\n\nmanager.getTransaction().begin()\n\nmanager.persist new ServerNode(firstName: \"Test\", lastName: \"Server\")\n\nmanager.getTransaction().commit()\n</code></pre>\n\n<p>the database 'Icarus' exists, but currently has no tables. I would like Hibernate to automatically create and/or update the tables based on the entity classes. How would i accomplish this?</p>\n    ","a":"\n<p>I don't know if leaving <code>hibernate</code> off the front makes a difference.</p>\n\n<p>The <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-misc-properties\" rel=\"nofollow noreferrer\">reference</a> suggests it should be <code>hibernate.hbm2ddl.auto</code></p>\n\n<p>A value of <code>create</code> will create your tables at sessionFactory creation, and leave them intact.</p>\n\n<p>A value of <code>create-drop</code> will create your tables, and then drop them when you close the sessionFactory.</p>\n\n<p>Perhaps you should set the <a href=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Table.html\" rel=\"nofollow noreferrer\"><code>javax.persistence.Table</code></a> annotation explicitly?</p>\n\n<p>Hope this helps.</p>\n    "},{"t":"Hibernate Criteria returns children multiple times with FetchType.EAGER","l":"http://stackoverflow.com/questions/1995080/hibernate-criteria-returns-children-multiple-times-with-fetchtype-eager","q":"\n\n<p>I have an <code>Order</code> class that has a list of <code>OrderTransactions</code> and I mapped it with a one-to-many Hibernate mapping like so:</p>\n\n<pre><code>@OneToMany(targetEntity = OrderTransaction.class, cascade = CascadeType.ALL)\npublic List&lt;OrderTransaction&gt; getOrderTransactions() {\n    return orderTransactions;\n}\n</code></pre>\n\n<p>These <code>Order</code>'s also have a field <code>orderStatus</code> that are used for filtering with the following Criteria: </p>\n\n<pre><code>public List&lt;Order&gt; getOrderForProduct(OrderFilter orderFilter) {\n    Criteria criteria = getHibernateSession()\n            .createCriteria(Order.class)\n            .add(Restrictions.in(\"orderStatus\", orderFilter.getStatusesToShow()));\n    return criteria.list();\n}\n</code></pre>\n\n<p>This works and the result is as excpected.</p>\n\n<p>Now <strong>here is my question</strong>: Why, when I set the fetch type explicitly to <code>EAGER</code>, do the <code>Order</code>'s appear multiple times in the resulting list?</p>\n\n<pre><code>@OneToMany(targetEntity = OrderTransaction.class, fetch = FetchType.EAGER, cascade = CascadeType.ALL)\npublic List&lt;OrderTransaction&gt; getOrderTransactions() {\n    return orderTransactions;\n}\n</code></pre>\n\n<p>How would I have to change my Criteria code to reach the same result with the new setting?</p>\n    ","a":"\n<p>This is actually the expected behaviour if I understood your configuration correctly.</p>\n\n<p>You get the same <code>Order</code> instance in any of the results, but since now you are doing a join with the <code>OrderTransaction</code>, it has to return the same amount of results a regular sql join will return</p>\n\n<p>So actually it <em>should</em> apear multiple times. this is explained very well by the author (Gavin King) himself <a href=\"http://community.jboss.org/wiki/HibernateFAQ-AdvancedProblems#Hibernate_does_not_return_distinct_results_for_a_query_with_outer_join_fetching_enabled_for_a_collection_even_if_I_use_the_distinct_keyword\" rel=\"nofollow noreferrer\">here</a>: \nIt both explains why, and how to still get distinct results</p>\n\n<p></p><hr>\nAlso mentioned in the Hibernate <a href=\"http://community.jboss.org/wiki/HibernateFAQ-AdvancedProblems#Hibernate_does_not_return_distinct_results_for_a_query_with_outer_join_fetching_enabled_for_a_collection_even_if_I_use_the_distinct_keyword\" rel=\"nofollow noreferrer\">FAQ</a> :<p></p>\n\n<blockquote>\n  <p><strong>Hibernate does not return distinct results for a query with outer join fetching enabled for a collection</strong> (even if I use the distinct\n  keyword)? First, you need to understand SQL and how OUTER JOINs work\n  in SQL. If you do not fully understand and comprehend outer joins in\n  SQL, do not continue reading this FAQ item but consult a SQL manual or\n  tutorial. Otherwise you will not understand the following explanation\n  and you will complain about this behavior on the Hibernate forum.</p>\n  \n  <p>Typical examples that might return duplicate references of the same\n  Order object:</p>\n\n<pre><code>List result = session.createCriteria(Order.class)\n                    .setFetchMode(\"lineItems\", FetchMode.JOIN)\n                    .list();\n</code></pre>\n  \n  <hr>\n\n<pre><code>&lt;class name=\"Order\"&gt;\n    ...\n    &lt;set name=\"lineItems\" fetch=\"join\"&gt;\n</code></pre>\n  \n  <hr>\n\n<pre><code>List result = session.createCriteria(Order.class)\n                       .list();\nList result = session.createQuery(\"select o from Order o left join fetch o.lineItems\").list();\n</code></pre>\n  \n  <p>All of these examples produce the same SQL statement:</p>\n\n<pre><code>SELECT o.*, l.* from ORDER o LEFT OUTER JOIN LINE_ITEMS l ON o.ID = l.ORDER_ID\n</code></pre>\n  \n  <p>Want to know why the duplicates are there? Look at the SQL resultset,\n  Hibernate does not hide these duplicates on the left side of the outer\n  joined result but returns all the duplicates of the driving table. If\n  you have 5 orders in the database, and each order has 3 line items,\n  the resultset will be 15 rows. The Java result list of these queries\n  will have 15 elements, all of type Order. Only 5 Order instances will\n  be created by Hibernate, but duplicates of the SQL resultset are\n  preserved as duplicate references to these 5 instances. If you do not\n  understand this last sentence, you need to read up on Java and the\n  difference between an instance on the Java heap and a reference to\n  such an instance.</p>\n  \n  <p>(Why a left outer join? If you'd have an additional order with no line\n  items, the result set would be 16 rows with NULL filling up the right\n  side, where the line item data is for other order. You want orders\n  even if they don't have line items, right? If not, use an inner join\n  fetch in your HQL).</p>\n  \n  <p>Hibernate does not filter out these duplicate references by default.\n  Some people (not you) actually want this. How can you filter them out?</p>\n  \n  <p>Like this:</p>\n\n<pre><code>Collection result = new LinkedHashSet( session.create*(...).list() );\n</code></pre>\n</blockquote>\n    "},{"t":"How to set default value in Hibernate","l":"http://stackoverflow.com/questions/3110266/how-to-set-default-value-in-hibernate","q":"\n\n<p>How do I set default value in Hibernate field?</p>\n    ","a":"\n<p>If you want a real database default value, use columnDefinition - <code>@Column(name = “myColumn”, nullable = false, columnDefinition = “int default 100\")</code>. Notice that the string in <code>columnDefinition</code> is database dependent. Also if you choose this option, you have to use <code>dynamic-insert</code>, so <code>Hibernate</code> doesn't include columns with <code>null</code> values on insert. Otherwise talking about default is irrelevant.</p>\n\n<p>But if you don't want database default value, but simply a default value in your Java code, just initialize your variable like that - <code>private Integer myColumn = 100;</code></p>\n    "},{"t":"Configuring Hibernate logging using Log4j XML config file?","l":"http://stackoverflow.com/questions/436276/configuring-hibernate-logging-using-log4j-xml-config-file","q":"\n\n<p>I haven't been able to find any documentation on how to configure Hibernate's logging using the XML style configuration file for Log4j.</p>\n\n<p>Is this even possible or do I have use a properties style configuration file to control Hibernate's logging?</p>\n\n<p>If anyone has any information or links to documentation it would appreciated.</p>\n\n<p><strong>EDIT:</strong><br>\nJust to clarify, I am looking for an example of the actual XML syntax to control Hibernate.</p>\n\n<p><strong>EDIT2:</strong><br>\nHere is what I have in my XML config file.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"&gt;\n\n&lt;log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"&gt;\n    &lt;appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\"&gt;\n        &lt;param name=\"Threshold\" value=\"info\"/&gt;\n        &lt;param name=\"Target\" value=\"System.out\"/&gt;\n        &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\n            &lt;param name=\"ConversionPattern\" value=\"%d{ABSOLUTE} [%t] %-5p %c{1} - %m%n\"/&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n    &lt;appender name=\"rolling-file\" class=\"org.apache.log4j.RollingFileAppender\"&gt;\n        &lt;param name=\"file\" value=\"Program-Name.log\"/&gt;\n        &lt;param name=\"MaxFileSize\" value=\"1000KB\"/&gt;\n    &lt;!-- Keep one backup file --&gt;\n        &lt;param name=\"MaxBackupIndex\" value=\"4\"/&gt;\n        &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\n            &lt;param name=\"ConversionPattern\" value=\"%d [%t] %-5p %l - %m%n\"/&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n\n    &lt;root&gt;\n        &lt;priority value =\"debug\" /&gt;\n        &lt;appender-ref ref=\"console\" /&gt;\n        &lt;appender-ref ref=\"rolling-file\" /&gt;\n    &lt;/root&gt;\n&lt;/log4j:configuration&gt;\n</code></pre>\n\n<p>Logging works fine but I am looking for a way to step down and control the hibernate logging in way that separate from my application level logging, as it currently is flooding my logs. I have found examples of using the preference file to do this, I was just wondering how I can do this in a XML file.</p>\n    ","a":"\n<p>From <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-logging\" rel=\"nofollow noreferrer\">http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-logging</a></p>\n\n<p>Here's the list of logger categories:</p>\n\n<pre><code>Category                    Function\n\norg.hibernate.SQL           Log all SQL DML statements as they are executed\norg.hibernate.type          Log all JDBC parameters\norg.hibernate.tool.hbm2ddl  Log all SQL DDL statements as they are executed\norg.hibernate.pretty        Log the state of all entities (max 20 entities) associated with the session at flush time\norg.hibernate.cache         Log all second-level cache activity\norg.hibernate.transaction   Log transaction related activity\norg.hibernate.jdbc          Log all JDBC resource acquisition\norg.hibernate.hql.ast.AST   Log HQL and SQL ASTs during query parsing\norg.hibernate.secure        Log all JAAS authorization requests\norg.hibernate               Log everything (a lot of information, but very useful for troubleshooting) \n</code></pre>\n\n<p>Formatted for pasting into a log4j XML configuration file:</p>\n\n<pre><code>&lt;!-- Log all SQL DML statements as they are executed --&gt;\n&lt;Logger name=\"org.hibernate.SQL\" level=\"debug\" /&gt;\n&lt;!-- Log all JDBC parameters --&gt;\n&lt;Logger name=\"org.hibernate.type\" level=\"debug\" /&gt;\n&lt;!-- Log all SQL DDL statements as they are executed --&gt;\n&lt;Logger name=\"org.hibernate.tool.hbm2ddl\" level=\"debug\" /&gt;\n&lt;!-- Log the state of all entities (max 20 entities) associated with the session at flush time --&gt;\n&lt;Logger name=\"org.hibernate.pretty\" level=\"debug\" /&gt;\n&lt;!-- Log all second-level cache activity --&gt;\n&lt;Logger name=\"org.hibernate.cache\" level=\"debug\" /&gt;\n&lt;!-- Log transaction related activity --&gt;\n&lt;Logger name=\"org.hibernate.transaction\" level=\"debug\" /&gt;\n&lt;!-- Log all JDBC resource acquisition --&gt;\n&lt;Logger name=\"org.hibernate.jdbc\" level=\"debug\" /&gt;\n&lt;!-- Log HQL and SQL ASTs during query parsing --&gt;\n&lt;Logger name=\"org.hibernate.hql.ast.AST\" level=\"debug\" /&gt;\n&lt;!-- Log all JAAS authorization requests --&gt;\n&lt;Logger name=\"org.hibernate.secure\" level=\"debug\" /&gt;\n&lt;!-- Log everything (a lot of information, but very useful for troubleshooting) --&gt;\n&lt;Logger name=\"org.hibernate\" level=\"debug\" /&gt;\n</code></pre>\n\n<p>NB: Most of the loggers use the DEBUG level, however org.hibernate.type uses TRACE.  In previous versions of Hibernate org.hibernate.type also used DEBUG, but as of Hibernate 3 you must set the level to TRACE (or ALL) in order to see the JDBC parameter binding logging.</p>\n\n<p>And a category is specified as such:</p>\n\n<pre><code>&lt;logger name=\"org.hibernate\"&gt;\n    &lt;level value=\"ALL\" /&gt;\n    &lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n</code></pre>\n\n<p>It must be placed before the root element.</p>\n    "},{"t":"JPA/Hibernate: detached entity passed to persist","l":"http://stackoverflow.com/questions/13370221/jpa-hibernate-detached-entity-passed-to-persist","q":"\n\n<p>I have a JPA-persisted object model that contains a many-to-one relationship: an Account has many Transactions. A Transaction has one Account.</p>\n\n<p>Here's a snippet of the code:</p>\n\n<pre><code>@Entity\npublic class Transaction {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @ManyToOne(cascade = {CascadeType.ALL},fetch= FetchType.EAGER)\n    private Account fromAccount;\n....\n\n@Entity\npublic class Account {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    @OneToMany(cascade = {CascadeType.ALL},fetch= FetchType.EAGER, mappedBy = \"fromAccount\")\n    private Set&lt;Transaction&gt; transactions;\n</code></pre>\n\n<p>I am able to create an Account object, add transactions to it, and persist the Account object correctly. But, when I create a transaction, <em>using an existing already persisted Account</em>,  and persisting the <em>the Transaction</em>, I get an exception:</p>\n\n<pre><code>Caused by: org.hibernate.PersistentObjectException: detached entity passed to persist: com.paulsanwald.Account\n    at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:141) \n</code></pre>\n\n<p>So, I am able to persist an Account that contains transactions, but not a Transaction that has an Account. I thought this was because the Account might not be attached, but this code still gives me the same exception:</p>\n\n<pre><code>if (account.getId()!=null) {\n    account = entityManager.merge(account);\n}\nTransaction transaction = new Transaction(account,\"other stuff\");\n // the below fails with a \"detached entity\" message. why?\nentityManager.persist(transaction);\n</code></pre>\n\n<p>How can I correctly save a Transaction, associated with an already persisted Account object?</p>\n    ","a":"\n<p>This is a typical bidirectional consistency problem. It is well discussed in <a href=\"http://meri-stuff.blogspot.com/2012/03/jpa-tutorial.html#RelationshipsBidirectionalOneToManyManyToOneConsistency\">this link</a> as well as <a href=\"http://notesonjava.wordpress.com/2008/11/03/managing-the-bidirectional-relationship/\">this link.</a></p>\n\n<p>As per the articles in the previous 2 links you need to fix your setters in both sides of the bidirectional relationship. An example setter for the One side is in <a href=\"https://github.com/SomMeri/org.meri.jpa.tutorial/blob/master/src/main/java/org/meri/jpa/relationships/entities/bestpractice/SafePerson.java\">this link.</a></p>\n\n<p>An example setter for the Many side is in <a href=\"https://github.com/SomMeri/org.meri.jpa.tutorial/blob/master/src/main/java/org/meri/jpa/relationships/entities/bestpractice/SafeTwitterAccount.java\">this link.</a></p>\n\n<h3>Edit</h3>\n\n<p>I hope this edit is not too late for anybody. After you correct your setters you want to declare the Entity access type to be \"Property\". Best practice to declare \"Property\" access type is to move ALL the annotations from the member properties to the corresponding getters. A big word of caution is not to mix \"Field\" and \"Property\" access types within the entity class otherwise the behavior is undefined by the JSR-317 specifications.</p>\n    "},{"t":"What is the difference between Unidirectional and Bidirectional associations?","l":"http://stackoverflow.com/questions/5360795/what-is-the-difference-between-unidirectional-and-bidirectional-associations","q":"\n\n<p>What is the difference between Unidirectional and Bidirectional associations?</p>\n\n<p>Since the table generated in the db are all the same,so the only difference I found is that each side of the bidiretional assocations will have a refer to the other,and the unidirectional not.</p>\n\n<p><strong>This is a Unidirectional association</strong></p>\n\n<pre><code>public class User {\n    private int     id;\n    private String  name;\n    @ManyToOne\n    @JoinColumn(\n            name = \"groupId\")\n    private Group   group;\n}\n\npublic class Group {\n    private int     id;\n    private String  name;\n}\n</code></pre>\n\n<p><strong>The Bidirectional association</strong></p>\n\n<pre><code>public class User {\n    private int     id;\n    private String  name;\n    @ManyToOne\n    @JoinColumn(\n            name = \"groupId\")\n    private Group   group;\n}\npublic class Group {\n    private int         id;\n    private String      name;\n    @OneToMany(mappedBy=\"group\")\n    private List&lt;User&gt;  users;\n}\n</code></pre>\n\n<p>The difference is whether the group holds a reference of the user.</p>\n\n<p>So I wonder if this is the only difference? which is recommended?</p>\n    ","a":"\n<p>The main differenece is that bidirectional relationship provides navigational access in both directions, so that you can access the other side without explicit queries. Also it allows you to apply cascading options to both directions.</p>\n\n<p>Note that navigational access is not always good, especially for \"one-to-very-many\" and \"many-to-very-many\" relationships. Imagine a <code>Group</code> that contains thousands of <code>User</code>s:</p>\n\n<ul>\n<li><p>How would you access them? With so many <code>User</code>s, you usually need to apply some filtering and/or pagination, so that you need to execute a query anyway (unless you use <a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/filters.html\">collection filtering</a>, which looks like a hack for me). Some developers may tend to apply filtering in memory in such cases, which is obviously not good for performance. Note that having such a relationship can encourage this kind of developers to use it without considering performance implications.</p></li>\n<li><p>How would you add new <code>User</code>s to the <code>Group</code>? Fortunately, Hibernate looks at the owning side of relationship when persisting it, so you can only set <code>User.group</code>. However, if you want to keep objects in memory consistent, you also need to add <code>User</code> to <code>Group.users</code>. But it would make Hibernate to fetch all elements of <code>Group.users</code> from the database!</p></li>\n</ul>\n\n<p>So, I can't agree with the recommendation from the <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/best-practices.html\">Best Practices</a>. You need to design bidirectional relationships carefully, considering use cases (do you need navigational access in both directions?) and possible performance implications.</p>\n\n<p><strong>See also:</strong></p>\n\n<ul>\n<li><a href=\"http://java.dzone.com/articles/deterring-%E2%80%9Ctomany%E2%80%9D?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3a+javalobby/frontpage+%28Javalobby+/+Java+Zone%29\">Deterring “ToMany” Relationships in JPA models</a></li>\n<li><a href=\"http://www.javacodegeeks.com/2011/02/hibernate-mapped-collections.html\">Hibernate mapped collections performance problems</a> </li>\n</ul>\n    "},{"t":"Hibernate dialect for Oracle Database 11g?","l":"http://stackoverflow.com/questions/4369944/hibernate-dialect-for-oracle-database-11g","q":"\n\n<p>Is there a Hibernate dialect for Oracle Database 11g? Or should I use the <code>org.hibernate.dialect.Oracle10gDialect</code> that ships with Hibernate?</p>\n    ","a":"\n<p>Use the Oracle 10g dialect. Also Hibernate 3.3.2+ is required for recent JDBC drivers (the internal class structure changed - symptoms will be whining about an abstract class).</p>\n\n<p>Dialect of Oracle 11g is same as Oracle 10g (<em>org.hibernate.dialect.Oracle10gDialect</em>). Source: <a href=\"http://docs.jboss.org/hibernate/orm/3.6/reference/en-US/html/session-configuration.html#configuration-optional-dialects\" rel=\"nofollow\">http://docs.jboss.org/hibernate/orm/3.6/reference/en-US/html/session-configuration.html#configuration-optional-dialects</a></p>\n    "},{"t":"Hibernate Error: org.hibernate.NonUniqueObjectException: a different object with the same identifier value was already associated with the session","l":"http://stackoverflow.com/questions/1074081/hibernate-error-org-hibernate-nonuniqueobjectexception-a-different-object-with","q":"\n\n<p>I have two user Objects and while I try to save the object using </p>\n\n<pre><code>session.save(userObj);\n</code></pre>\n\n<p>I am getting the following error:</p>\n\n<pre><code>Caused by: org.hibernate.NonUniqueObjectException: a different object with the same identifier value was already associated with the session:\n[com.pojo.rtrequests.User#com.pojo.rtrequests.User@d079b40b]\n</code></pre>\n\n<p>I am creating the session using </p>\n\n<pre><code>BaseHibernateDAO dao = new BaseHibernateDAO();          \n\nrtsession = dao.getSession(userData.getRegion(),\n                           BaseHibernateDAO.RTREQUESTS_DATABASE_NAME);\n\nrttrans = rtsession.beginTransaction();\nrttrans.begin();\n\nrtsession.save(userObj1);\nrtsession.save(userObj2);\n\nrtsession.flush();\nrttrans.commit();\n\nrtsession.close(); // in finally block\n</code></pre>\n\n<p>I also tried doing the <code>session.clear()</code> before saving, still no luck.</p>\n\n<p>This is for the first I am getting the session object when a user request comes, so I am getting why is saying that object is present in session.</p>\n\n<p>Any suggestions?</p>\n    ","a":"\n<p>I have had this error many times and it can be quite hard to track down...</p>\n\n<p>Basically, what hibernate is saying is that you have two objects which have the same identifier (same primary key) but they are not the same object.</p>\n\n<p>I would suggest you break down your code, i.e. comment out bits until the error goes away and then put the code back until it comes back and you should find the error it.</p>\n\n<p>It most often happens via cascading saves where there is a cascade save between object A and B, but object B has already been associated with the session but not on the same instance of B.</p>\n\n<p>What primary key generator are you using? </p>\n\n<p>The reason I ask is this error is related to how you're telling hibernate to ascertain the persistent state of an object (i.e. whether an object is persistent or not). The error could be happening because hibernate is trying to persist and object that is already persistent. In fact, if you use save hibernate will try and persist that object, and maybe there is already an object with that same primary key associated with the session.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Assuming you have a hibernate class object for a table with 10 rows based on a primary key combination (column 1 and column 2). Now, you have removed 5 rows from the table at some point of time. Now, if you try to add the same 10 rows again, while hibernate tries to persist the objects in database, 5 rows which were already removed will be added without errors. Now the remaining 5 rows which are already existing, will throw this exception. </p>\n\n<p>So the easy approach would be checking if you have updated/removed any value in a table which is part of something and later are you trying to insert the same objects again</p>\n    "},{"t":"How to load lazy fetched items from Hibernate/JPA in my controller","l":"http://stackoverflow.com/questions/15359306/how-to-load-lazy-fetched-items-from-hibernate-jpa-in-my-controller","q":"\n\n<p>I have a Person class:</p>\n\n<pre><code>@Entity\npublic class Person {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    private List&lt;Role&gt; roles;\n    // etc\n}\n</code></pre>\n\n<p>With a many-to-many relation that is lazy.</p>\n\n<p>In my controller I have</p>\n\n<pre><code>@Controller\n@RequestMapping(\"/person\")\npublic class PersonController {\n    @Autowired\n    PersonRepository personRepository;\n\n    @RequestMapping(\"/get\")\n    public @ResponseBody Person getPerson() {\n        Person person = personRepository.findOne(1L);\n        return person;\n    }\n}\n</code></pre>\n\n<p>And the PersonRepository is just this code, written according to <a href=\"http://blog.springsource.org/2011/02/10/getting-started-with-spring-data-jpa/\">this guide</a></p>\n\n<pre><code>public interface PersonRepository extends JpaRepository&lt;Person, Long&gt; {\n}\n</code></pre>\n\n<p>However, in this controller <strong>I actually need the lazy-data. How can I trigger its loading?</strong></p>\n\n<p>Trying to access it will fail with </p>\n\n<blockquote>\n  <p>failed to lazily initialize a collection of role:\n  no.dusken.momus.model.Person.roles, could not initialize proxy - no\n  Session</p>\n</blockquote>\n\n<p>or other exceptions depending on what I try.</p>\n\n<p>I've tried adding @Tranactional, to no use. Is it something I need to include/setup for it to work?</p>\n\n<p>My <a href=\"https://gist.github.com/Matsemann/958b29aef642fa1c2f95\">xml-description</a>, in case needed.</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>You will have to make an explicit call on the lazy collection in order to initialize it (common practice is to call <code>.size()</code> for this purpose). In Hibernate there is a dedicated method for this (<code>Hibernate.initialize()</code>), but JPA has no equivalent of that. Of course you will have to make sure that the invocation is done, when the session is still available, so annotate your controller method with <code>@Transactional</code>. An alternative is to create an intermediate Service layer between the Controller and the Repository that could expose methods which initialize lazy collections.</p>\n\n<h3>Update:</h3>\n\n<p>Please note that the above solution is easy, but results in two distinct queries to the database (one for the user, another one for its roles). If you want to achieve better performace add the following method to your Spring Data JPA repository interface:</p>\n\n<pre><code>public interface PersonRepository extends JpaRepository&lt;Person, Long&gt; {\n\n    @Query(\"SELECT p FROM Person p JOIN FETCH p.roles WHERE p.id = (:id)\")\n    public Person findByIdAndFetchRolesEagerly(@Param(\"id\") Long id);\n\n}\n</code></pre>\n\n<p>This method will use JPQL's <a href=\"http://docs.oracle.com/html/E24396_01/ejb3_langref.html#ejb3_langref_fetch_joins\">fetch join</a> clause to eagerly load the roles association in a single round-trip to the database, and will therefore mitigate the performance penalty incurred by the two distinct queries in the above solution. </p>\n    "},{"t":"Spring Data-JPA versus JPA: Whats the difference?","l":"http://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference","q":"\n\n<p>I am bit confused about difference between Spring Data-JPA and JPA. I know about JPA that it is a specification for persisting the Java Objects to relational database using popular ORM technology i.e. in other words JPA provides interfaces and other ORM technologies implements those interfaces known as JPA provider eg Hibernate.</p>\n\n<p>Now what exactly is Spring Data JPA. Is Spring Data JPA has added some more functionality (Interfaces) over JPA and still it is specification only or it is also a JPA provider ?</p>\n\n<p>I saw Spring Data JPA works around repositories (DAO layer: if I am not wrong). So I mean how it is different using 'Spring Data JPA + Hibernate' or only using 'Hibernate' directly ?</p>\n\n<p>I might be totally wrong in asking question but I appreciate your help in resolving my confusion. Kindly also post any useful links of documentation that helps.\nThanks in advance....</p>\n    ","a":"\n<blockquote>\n  <p>I saw Spring JPA works around repositories (DAO layer: if I am not wrong). So I mean how it is different using 'Spring JPA + Hibernate' or only using 'Hibernate' directly ?</p>\n</blockquote>\n\n<p>As you said, <strong>JPA</strong> is an <em>specification</em> while <strong>Hibernate</strong> is a particular implementation of that specification (these implementations are usually referred to as <em>Providers</em>). By using Hibernate you tie yourself to that provider restricting your freedom to switch to another option when required (for example, you want to use EclipseLink or ObjectDB instead because Hibernate has a bug that halts your development process).</p>\n\n<p>Quoting <strong><a href=\"http://static.springsource.org/spring-data/jpa/docs/1.0.0.M1/reference/html/\">Spring Data JPA</a>'s</strong> documentation:</p>\n\n<blockquote>\n  <p>Implementing a data access layer of an application has been cumbersome for quite a while. Too much boilerplate code had to be written. Domain classes were anemic and haven't been designed in a real object oriented or domain driven manner.</p>\n  \n  <p>Using both of these technologies makes developers life a lot easier regarding rich domain model's persistence. Nevertheless the amount of boilerplate code to implement repositories especially is still quite high. So the goal of the repository abstraction of Spring Data is to reduce the effort to implement data access layers for various persistence stores significantly.</p>\n</blockquote>\n\n<p>To sum it up, it is on top of JPA adding another layer of abstraction, kind of defining a \"standarized\" design for the support of your <em>Persistence Layer</em> in a Spring context. Those defined interfaces (known to Spring) provide the services that the framework handles using JPA to serve the results. You define a repository in a way Spring can scan the project and find it</p>\n\n<pre><code>&lt;repositories base-package=\"com.acme.repositories\" /&gt;\n</code></pre>\n\n<p>Allowing you to use it in the context of a container or outside of it.</p>\n\n<blockquote>\n  <p>Now what exactly is Spring JPA. Is Spring JPA has added some more functionality (Interfaces) over JPA and still it is specification only or it is also a JPA provider ?</p>\n</blockquote>\n\n<p>Long story short, then, Spring Data JPA provides a definition to implement repositories that is supported under the hood by referencing the JPA specification, using the provider you define.</p>\n    "},{"t":"Cannot use identity column key generation with <union-subclass> ( TABLE_PER_CLASS )","l":"http://stackoverflow.com/questions/916169/cannot-use-identity-column-key-generation-with-union-subclass-table-per-clas","q":"\n\n<p><strong>com.something.SuperClass:</strong></p>\n\n<pre><code>@Entity\n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\npublic abstract class SuperClass implements Serializable {\n    private static final long serialVersionUID = -695503064509648117L;\n\n    long confirmationCode;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO) // Causes exception!!!\n    public long getConfirmationCode() {\n        return confirmationCode;\n    }\n\n    public void setConfirmationCode(long confirmationCode) {\n        this.confirmationCode = confirmationCode;\n    }\n}\n</code></pre>\n\n<p><strong>com.something.SubClass:</strong></p>\n\n<pre><code>@Entity\npublic abstract class Subclass extends SuperClass {\n    private static final long serialVersionUID = 8623159397061057722L;\n\n    String name;\n\n    @Column(nullable = false)\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n</code></pre>\n\n<p><strong>Gives me this exception:</strong></p>\n\n<pre><code>Caused by: org.hibernate.MappingException: Cannot use identity column key\ngeneration with &lt;union-subclass&gt; mapping for: com.something.SuperClass\n</code></pre>\n\n<p>What's the best and most convenient way for me to generate the ID's? <em>I do not want to change my inheritance strategy.</em></p>\n    ","a":"\n<p>The problem here is that you mix \"table-per-class\" inheritance and <code>GenerationType.Auto</code>.\nConsider an identity column in MsSQL. It is column based. In a \"table-per-class\" strategy you use one table per class and each one has an ID. </p>\n\n<p>Try:</p>\n\n<p><code>@GeneratedValue(strategy = GenerationType.TABLE)</code></p>\n    "},{"t":"How does Spring Data JPA differ from Hibernate for large projects?","l":"http://stackoverflow.com/questions/12790853/how-does-spring-data-jpa-differ-from-hibernate-for-large-projects","q":"\n\n<p>I am having a hard time deciding if I should stick with Hibernate for a new project, or get my feet wet with JPA and the new Spring Data implementation.</p>\n\n<p>Is the Spring Data framework intended for large projects or small projects with modest query requirements? </p>\n\n<p>While I certainly see the advantage in code reduction by using the <code>@Query</code> annotation, what do you do for dynamic queries? What about when you want to implement a save() method that's quite complex? </p>\n\n<p>The documentation says to make a Custom interface and implementation that your main repository implements, but what if you need to access any super methods on the crud repository itself? The crud repository implements the custom one - not the other way around. It seems like an odd design.</p>\n\n<p>I am very uncertain whether this framework will meet the challenges of complex and large applications. I've never ran into many problems with Hibernate, and I'm considering sticking with the good old reliable rather than go with Spring Data JPA. </p>\n\n<p>What should I do? What unforeseen complications and costs will I encounter if I go with Spring Data JPA?</p>\n    ","a":"\n<p>So, <code>spring-data</code> does some extra magic that helps with complex queries. It is strange at first and you totally skip it in the docs but it is really powerful and useful.</p>\n\n<p>It involves creating a custom <code>Repository</code> and a custom `RepositoryImpl' and telling Spring where to find it. Here is an example:</p>\n\n<p>Configuration class - <s>point to your still-needed xml config</s> with annotation pointing to your repositories package (it looks for <code>*Impl</code> classes automatically now):</p>\n\n<pre><code>@Configuration\n@EnableJpaRepositories(basePackages = {\"com.examples.repositories\"})\n@EnableTransactionManagement\npublic class MyConfiguration {\n}\n</code></pre>\n\n<p><s>jpa-repositories.xml - tell <code>Spring</code> where to find your repositories. Also tell <code>Spring</code> to look for custom repositories with the <code>CustomImpl</code> file name:</s></p><s>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/jpa/spring-jpa.xsd\n    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"&gt;\n\n&lt;jpa:repositories base-package=\"com.example.repositories\" repository-impl-postfix=\"CustomImpl\" /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n</s><p><s></s></p>\n\n<p><code>MyObjectRepository</code> - this is where you can put annotated and unannotated query methods. Note how this repository interface extends the <code>Custom</code> one:</p>\n\n<pre><code>@Transactional\npublic interface MyObjectRepository extends JpaRepository&lt;MyObject, Integer&gt;, MyObjectRepositoryCustom {\n\n    List&lt;MyObject&gt; findByName(String name);\n\n    @Query(\"select * from my_object where name = ?0 or middle_name = ?0\")\n    List&lt;MyObject&gt; findByFirstNameOrMiddleName(String name);\n</code></pre>\n\n<p>}</p>\n\n<p><code>MyObjectRepositoryCustom</code> - repository methods that are more complex and cannot be handled with a simple query or an annotation:</p>\n\n<pre><code>public interface MyObjectRepositoryCustom {\n\n    List&lt;MyObject&gt; findByNameWithWeirdOrdering(String name);\n}\n</code></pre>\n\n<p><code>MyObjectRepositoryCustomImpl</code> - where you actually implement those methods with an autowired <code>EntityManager</code>:</p>\n\n<pre><code>public class MyObjectRepositoryCustomImpl implements MyObjectRepositoryCustom {\n\n    @Autowired\n    private EntityManager entityManager;\n\n    public final List&lt;MyObject&gt; findByNameWithWeirdOrdering(String name) {\n        Query query = query(where(\"name\").is(name));\n        query.sort().on(\"whatever\", Order.ASC);\n        return entityManager.find(query, MyObject.class);\n    }\n}\n</code></pre>\n\n<p>Amazingly, this all comes together and methods from both interfaces (and the CRUD interface you implement) all show up when you do:</p>\n\n<pre><code>myObjectRepository.\n</code></pre>\n\n<p>You will see:</p>\n\n<pre><code>myObjectRepository.save()\nmyObjectRepository.findAll()\nmyObjectRepository.findByName()\nmyObjectRepository.findByFirstNameOrMiddleName()\nmyObjectRepository.findByNameWithWeirdOrdering()\n</code></pre>\n\n<p>It really does work. And you get one interface for querying. <code>spring-data</code> really is ready for a large application. And the more queries you can push into simple or annotation only the better off you are.</p>\n\n<p>All of this is documented at the <a href=\"http://docs.spring.io/spring-data/data-jpa/docs/1.4.x/reference/htmlsingle/#repositories.custom-implementations\">Spring Data Jpa site</a>.</p>\n\n<p>Good luck.</p>\n    "},{"t":"org.hibernate.LazyInitializationException - could not initialize proxy - no Session","l":"http://stackoverflow.com/questions/21574236/org-hibernate-lazyinitializationexception-could-not-initialize-proxy-no-sess","q":"\n\n<p>I get the following exception:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Exception in thread \"main\" org.hibernate.LazyInitializationException: could not initialize proxy - no Session\n    at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:167)\n    at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:215)\n    at org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:190)\n    at sei.persistence.wf.entities.Element_$$_jvstc68_47.getNote(Element_$$_jvstc68_47.java)\n    at JSON_to_XML.createBpmnRepresantation(JSON_to_XML.java:139)\n    at JSON_to_XML.main(JSON_to_XML.java:84)\n</code></pre>\n\n<p>when I try to call from main the following lines:</p>\n\n<pre><code>Model subProcessModel = getModelByModelGroup(1112);\nSystem.out.println(subProcessModel.getElement().getNote());\n</code></pre>\n\n<p>I implemented the <code>getModelByModelGroup(int modelgroupid)</code> method firstly like this :</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>    public static Model getModelByModelGroup(int modelGroupId, boolean openTransaction) {\n\n        Session session = SessionFactoryHelper.getSessionFactory().getCurrentSession();     \n        Transaction tx = null;\n\n        if (openTransaction)\n            tx = session.getTransaction();\n\n        String responseMessage = \"\";\n\n        try {\n            if (openTransaction)            \n                tx.begin();\n            Query query = session.createQuery(\"from Model where modelGroup.id = :modelGroupId\");\n            query.setParameter(\"modelGroupId\", modelGroupId);\n            @SuppressWarnings(\"unchecked\")\n            List&lt;Model&gt; modelList = (List&lt;Model&gt;)query.list(); \n            Model model = null;\n            // Cerco il primo Model che è in esercizio: idwf_model_type = 3\n            for (Model m : modelList)\n                if (m.getModelType().getId() == 3) {\n                    model = m;\n                    break;\n                }\n\n            if (model == null) {\n                Object[] arrModels = modelList.toArray();\n                if (arrModels.length == 0) \n                    throw new Exception(\"Non esiste \");\n\n                model = (Model)arrModels[0];\n            }\n\n            if (openTransaction)\n                tx.commit();\n            return model;\n\n        } catch(Exception ex) {\n            if (openTransaction)\n                tx.rollback();\n            ex.printStackTrace();\n            if (responseMessage.compareTo(\"\") == 0)\n                responseMessage = \"Error\" + ex.getMessage();\n            return null;        \n        }\n</code></pre>\n\n<p>and got the exception. Then a friend suggested me to always test the session and get the current session to avoid this error. So i did this:</p>\n\n<pre><code>public static Model getModelByModelGroup(int modelGroupId) {\n\n        Session session = null;\n        boolean openSession = session == null;\n        Transaction tx = null;\n        if (openSession){\n          session = SessionFactoryHelper.getSessionFactory().getCurrentSession();   \n            tx = session.getTransaction();\n        }\n        String responseMessage = \"\";\n\n        try {\n            if (openSession)            \n                tx.begin();\n            Query query = session.createQuery(\"from Model where modelGroup.id = :modelGroupId\");\n            query.setParameter(\"modelGroupId\", modelGroupId);\n            @SuppressWarnings(\"unchecked\")\n            List&lt;Model&gt; modelList = (List&lt;Model&gt;)query.list(); \n            Model model = null;\n            for (Model m : modelList)\n                if (m.getModelType().getId() == 3) {\n                    model = m;\n                    break;\n                }\n\n            if (model == null) {\n                Object[] arrModels = modelList.toArray();\n                if (arrModels.length == 0) \n                    throw new RuntimeException(\"Non esiste\");\n\n                model = (Model)arrModels[0];\n\n            if (openSession)\n                tx.commit();\n            return model;\n\n        } catch(RuntimeException ex) {\n            if (openSession)\n                tx.rollback();\n            ex.printStackTrace();\n            if (responseMessage.compareTo(\"\") == 0)\n                responseMessage = \"Error\" + ex.getMessage();\n            return null;        \n        }\n\n    }\n</code></pre>\n\n<p>but still get the same error. \nI have been reading a lot for this error and found some possible solutions. One of them was to set lazyLoad to false but I am not allowed to do this thats why i was suggested to control the session</p>\n    ","a":"\n<p>What is wrong here is that your session management configuration is set to close session when you commit transaction. Check if you have something like:</p>\n\n<pre><code>&lt;property name=\"current_session_context_class\"&gt;thread&lt;/property&gt; \n</code></pre>\n\n<p>in your configuration.</p>\n\n<p>In order to overcome this problem you could change the configuration of session factory or open another session and only than ask for those lazy loaded objects. But what I would suggest here is to initialize this lazy collection in getModelByModelGroup itself and call:</p>\n\n<pre><code>Hibernate.initialize(subProcessModel.getElement());\n</code></pre>\n\n<p>when you are still in active session.</p>\n\n<p>And one last thing. A friendly advice. You have something like this in your method:</p>\n\n<pre><code>            for (Model m : modelList)\n            if (m.getModelType().getId() == 3) {\n                model = m;\n                break;\n            }\n</code></pre>\n\n<p>Please insted of this code just filter those models with type id equal to 3 in the query statement just couple of lines above. </p>\n\n<p>Some more reading:</p>\n\n<p><a href=\"http://www.coderanch.com/t/428509/ORM/databases/committing-transaction-closes-session\">session factory configuration</a></p>\n\n<p><a href=\"http://forum.zkoss.org/question/45772/hibernate-problem-session-is-closed/\">problem with closed session</a></p>\n    "},{"t":"When to use inverse=false on NHibernate / Hibernate OneToMany relationships?","l":"http://stackoverflow.com/questions/1061179/when-to-use-inverse-false-on-nhibernate-hibernate-onetomany-relationships","q":"\n\n<p>I have been trying to get to grips with Hibernate's inverse attribute, and it seems to be just one of those things that is conceptually difficult. </p>\n\n<p>The gist that I get is that when you have a parent entity (e.g. Parent) that has a collection of Child objects using a <strong>one-to-many</strong> mapping, setting inverse=true on the mapping tells Hibernate that 'the other side (the Child) has responsibility to update itself to maintain the foreign key reference in its table'. </p>\n\n<p>Doing this appears to have 2 benefits when it comes to adding Children to the collection in your code, and then saving the Parent (with cascade-all set): <a href=\"http://nhprof.com/Learn/Alert?name=SuperfluousManyToOneUpdate\" rel=\"nofollow noreferrer\">you save an unneccessary hit on the database</a> (because without inverse set, Hibernate thinks it has two places to update the FK relationship), and according to the official docs:</p>\n\n<blockquote>\n  <p>If the  column of a\n   association is declared\n  NOT NULL, NHibernate may cause\n  constraint violations when it creates\n  or updates the association. To prevent\n  this problem, you must use a\n  bidirectional association with the\n  many valued end (the set or bag)\n  marked as inverse=\"true\".</p>\n</blockquote>\n\n<p>This all seems to make sense so far. What I don't get is this: when would you <strong>NOT</strong> want to use inverse=true on a one-to-many relationship?</p>\n    ","a":"\n<p>As Matthieu says, the only case where you wouldn't want to set inverse = true is where it does not make sense for the child to be responsible for updating itself, such as in the case where the child has no knowledge of its parent.</p>\n\n<p>Lets try a real world, and not at all contrived example:</p>\n\n<pre><code>&lt;class name=\"SpyMaster\" table=\"SpyMaster\" lazy=\"true\"&gt;\n  &lt;id name=\"Id\"&gt;\n    &lt;generator class=\"identity\"/&gt;\n  &lt;/id&gt;\n  &lt;property name=\"Name\"/&gt;\n  &lt;set name=\"Spies\" table=\"Spy\" cascade=\"save-update\"&gt;\n    &lt;key column=\"SpyMasterId\"/&gt;\n    &lt;one-to-many class=\"Spy\"/&gt;\n  &lt;/set&gt;\n&lt;/class&gt;\n\n&lt;class name=\"Spy\" table=\"Spy\" lazy=\"true\"&gt;\n  &lt;id name=\"Id\"&gt;\n    &lt;generator class=\"identity\"/&gt;\n  &lt;/id&gt;\n  &lt;property name=\"Name\"/&gt;\n&lt;/class&gt;\n</code></pre>\n\n<p>Spymasters can have spies, but spies never know who their spymaster is, because we have not included the many-to-one relationship in the spy class. Also (conveniently) a spy may turn rogue and so does not need to be associated with a spymaster. We can create entities as follows:</p>\n\n<pre><code>var sm = new SpyMaster\n{\n    Name = \"Head of Operation Treadstone\"\n};\nsm.Spies.Add(new Spy\n{\n    Name = \"Bourne\",\n    //SpyMaster = sm // Can't do this\n});\nsession.Save(sm);\n</code></pre>\n\n<p>In such a case you would set the FK column to be nullable because the act of saving sm would insert into the SpyMaster table and the Spy table, and only after that would it then update the Spy table to set the FK. In this case, if we were to set inverse = true, the FK would never get updated.</p>\n    "},{"t":"When and why JPA entities should implement Serializable interface?","l":"http://stackoverflow.com/questions/2020904/when-and-why-jpa-entities-should-implement-serializable-interface","q":"\n\n<p>The question is in the title. Below I just described some of my thoughts and findings.</p>\n\n<p>When I had very simple domain model (3 tables without any relations) all my entities did NOT implement Serializable.</p>\n\n<p>But when domain model became more complex I got RuntimeException which said that one of my entities didn't implement Serializable.</p>\n\n<p>I use Hibernate as a JPA implementation.</p>\n\n<p>I wonder:</p>\n\n<ol>\n<li>Is it vendor-specific requirement/behavior?</li>\n<li>What happens with my serializable entities? Should they be serializable for storing or for transferring?</li>\n<li>At which moment it becomes necessary to make my entity serializable? </li>\n</ol>\n    ","a":"\n<p>This usually happens if you mix HQL and native SQL queries. In HQL, Hibernate maps the types you pass in to whatever the DB understands. When you run native SQL, then you must do the mapping yourself. If you don't, then the default mapping is to serialize the parameter and send it to the database (in the hope that it does understand it).</p>\n    "},{"t":"equals and hashcode in Hibernate","l":"http://stackoverflow.com/questions/1638723/equals-and-hashcode-in-hibernate","q":"\n\n<p>How should model class's equals and hashcode be implemented in Hibernate? What are the common pitfalls? Is the default implementation good enough for most cases? Is there any sense to use business keys?</p>\n\n<p>It seems to me that it's pretty hard to get it right to work in every situation, when lazy fetching, id generation, proxy, etc are taken into account.</p>\n    ","a":"\n<p>Hibernate has a nice and long description of when / how to override <code>equals()</code> / <code>hashCode()</code> in <a href=\"http://docs.jboss.org/hibernate/core/4.0/manual/en-US/html/persistent-classes.html#persistent-classes-equalshashcode\" rel=\"nofollow noreferrer\">documentation</a></p>\n\n<p>The gist of it is you only need to worry about it if your entity will be part of a <code>Set</code> or if you're going to be detaching / attaching its instances. The latter is not that common. The former is usually best handled via:</p>\n\n<ol>\n<li>Basing <code>equals()</code> / <code>hashCode()</code> on a business key - e.g. a unique combination of attributes that is not going to change during object (or, at least, session) lifetime.</li>\n<li>If the above is impossible, base <code>equals()</code> / <code>hashCode()</code> on primary key IF it's set and object identity / <code>System.identityHashCode()</code> otherwise. The <strong>important</strong> part here is that you need to <strong>reload</strong> your Set after new entity has been added to it and persisted; otherwise you may end up with strange behavior (ultimately resulting in errors and / or data corruption) because your entity may be allocated to a bucket not matching its current <code>hashCode()</code>.</li>\n</ol>\n    "},{"t":"Spring Security 3 database authentication with Hibernate","l":"http://stackoverflow.com/questions/2683308/spring-security-3-database-authentication-with-hibernate","q":"\n\n<p>I need to authenticate users from database, Spring Security documents don't tell how to authenticate with hibernate. Is that possible and how can I do that?</p>\n    ","a":"\n<p>You have to make your own custom authentication-provider.</p>\n\n<p><strong>Example code:</strong></p>\n\n<p><em>Service to load Users from Hibernate:</em></p>\n\n<pre><code>import org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;    \n\n@Service(\"userDetailsService\") \npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n  @Autowired private UserDao dao;\n  @Autowired private Assembler assembler;\n\n  @Transactional(readOnly = true)\n  public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException, DataAccessException {\n\n    UserDetails userDetails = null;\n    UserEntity userEntity = dao.findByName(username);\n    if (userEntity == null)\n      throw new UsernameNotFoundException(\"user not found\");\n\n    return assembler.buildUserFromUserEntity(userEntity);\n  }\n}\n</code></pre>\n\n<p><em>Service to convert your entity to a spring user object:</em></p>\n\n<pre><code>import org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.GrantedAuthorityImpl;\nimport org.springframework.security.core.userdetails.User;\n\n@Service(\"assembler\")\npublic class Assembler {\n\n  @Transactional(readOnly = true)\n  User buildUserFromUserEntity(UserEntity userEntity) {\n\n    String username = userEntity.getName();\n    String password = userEntity.getPassword();\n    boolean enabled = userEntity.isActive();\n    boolean accountNonExpired = userEntity.isActive();\n    boolean credentialsNonExpired = userEntity.isActive();\n    boolean accountNonLocked = userEntity.isActive();\n\n    Collection&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;GrantedAuthority&gt;();\n    for (SecurityRoleEntity role : userEntity.getRoles()) {\n      authorities.add(new GrantedAuthorityImpl(role.getRoleName()));\n    }\n\n    User user = new User(username, password, enabled,\n      accountNonExpired, credentialsNonExpired, accountNonLocked, authorities, id);\n    return user;\n  }\n}\n</code></pre>\n\n<p><em>The namespace-based application-context-security.xml would look something like:</em></p>\n\n<pre><code>&lt;http&gt;\n  &lt;intercept-url pattern=\"/login.do*\" filters=\"none\"/&gt;\n  &lt;intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" /&gt;\n  &lt;form-login login-page=\"/login.do\"\n              authentication-failure-url=\"/login.do?error=failed\"\n              login-processing-url=\"/login-please.do\" /&gt;\n  &lt;logout logout-url=\"/logoff-please.do\"\n          logout-success-url=\"/logoff.html\" /&gt;\n&lt;/http&gt;\n\n&lt;beans:bean id=\"daoAuthenticationProvider\"\n class=\"org.springframework.security.authentication.dao.DaoAuthenticationProvider\"&gt;\n  &lt;beans:property name=\"userDetailsService\" ref=\"userDetailsService\"/&gt;\n&lt;/beans:bean&gt;\n\n&lt;beans:bean id=\"authenticationManager\"\n    class=\"org.springframework.security.authentication.ProviderManager\"&gt;\n  &lt;beans:property name=\"providers\"&gt;\n    &lt;beans:list&gt;\n      &lt;beans:ref local=\"daoAuthenticationProvider\" /&gt;\n    &lt;/beans:list&gt;\n  &lt;/beans:property&gt;\n&lt;/beans:bean&gt;\n\n&lt;authentication-manager&gt;\n  &lt;authentication-provider user-service-ref=\"userDetailsService\"&gt;\n    &lt;password-encoder hash=\"md5\"/&gt;\n  &lt;/authentication-provider&gt;\n&lt;/authentication-manager&gt;\n</code></pre>\n    "},{"t":"Trouble using ScrollableResults-backed Stream as return type in Spring MVC","l":"http://stackoverflow.com/questions/26324112/trouble-using-scrollableresults-backed-stream-as-return-type-in-spring-mvc","q":"\n\n<hr>\n\n<h3>Important note: this has been accepted as a <a href=\"https://jira.spring.io/browse/SPR-12349\">Spring issue</a> with a target fix version of 4.1.2.</h3>\n\n<hr>\n\n<p>My goal is to achieve O(1) space complexity when generating an HTTP response from Hibernate's <code>ScrollableResults</code>. I want to keep the standard mechanism where a <code>MessageConverter</code> is dispatched to handle an object returned from a <code>@Controller</code>. I have set up the following:</p>\n\n<ol>\n<li><code>MappingJackson2HttpMessageConverter</code> enriched with a <code>JsonSerializer</code> which handles a Java 8 <code>Stream</code>;</li>\n<li>a custom <code>ScrollableResultSpliterator</code> needed to wrap <code>ScrollableResults</code> into a <code>Stream</code>;</li>\n<li><code>OpenSessionInViewInterceptor</code> needed to keep the Hibernate session open within the <code>MessageConverter</code>;</li>\n<li>set <code>hibernate.connection.release_mode</code> to <code>ON_CLOSE</code>;</li>\n<li>ensure that the JDBC connection has the necessary ResultSet holdability: <code>con.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT)</code>.</li>\n</ol>\n\n<p>Additionally, I need a database which supports that kind of holdability. PostgreSQL is such a database and I have no trouble with this.</p>\n\n<p>The final stumbling point I have encountered is the policy used by <code>HibernateTransactionManager</code> on transaction commit: unless the underlying session is \"Hibernate-managed\", it will <code>disconnect()</code> it, closing my cursor along with everything else. Such a policy is useful in some special scenarios, specifically \"conversation-scoped sessions\", which  are far removed from my requirements.</p>\n\n<p>I have managed to work around this with a bad hack: I had to override the offending method with a method which is effectively a copy-paste of the original except for the removed <code>disconnect()</code> call, but it must resort to reflection to access private API.</p>\n\n<pre><code>public class NoDisconnectHibernateTransactionManager extends HibernateTransactionManager\n{\n  private static final Logger logger = LoggerFactory.getLogger(NoDisconnectHibernateTransactionManager.class);\n\n  public NoDisconnectHibernateTransactionManager(SessionFactory sf) { super(sf); }\n\n  @Override\n  protected void doCleanupAfterCompletion(Object transaction) {\n    final JdbcTransactionObjectSupport txObject = (JdbcTransactionObjectSupport) transaction;\n    final Class&lt;?&gt; c = txObject.getClass();\n    try {\n      // Remove the session holder from the thread.\n      if ((Boolean)jailBreak(c.getMethod(\"isNewSessionHolder\")).invoke(txObject))\n        TransactionSynchronizationManager.unbindResource(getSessionFactory());\n\n      // Remove the JDBC connection holder from the thread, if exposed.\n      if (getDataSource() != null)\n        TransactionSynchronizationManager.unbindResource(getDataSource());\n\n      final SessionHolder sessionHolder = (SessionHolder)jailBreak(c.getMethod(\"getSessionHolder\")).invoke(txObject);\n      final Session session = sessionHolder.getSession();\n      if ((Boolean)jailBreak(HibernateTransactionManager.class.getDeclaredField(\"prepareConnection\")).get(this)\n          &amp;&amp; session.isConnected() &amp;&amp; isSameConnectionForEntireSession(session))\n      {\n        // We're running with connection release mode \"on_close\": We're able to reset\n        // the isolation level and/or read-only flag of the JDBC Connection here.\n        // Else, we need to rely on the connection pool to perform proper cleanup.\n        try {\n          final Connection con = ((SessionImplementor) session).connection();\n          DataSourceUtils.resetConnectionAfterTransaction(con, txObject.getPreviousIsolationLevel());\n        }\n        catch (HibernateException ex) {\n          logger.debug(\"Could not access JDBC Connection of Hibernate Session\", ex);\n        }\n      }\n      if ((Boolean)jailBreak(c.getMethod(\"isNewSession\")).invoke(txObject)) {\n        logger.debug(\"Closing Hibernate Session [{}] after transaction\",  session);\n        SessionFactoryUtils.closeSession(session);\n      }\n      else {\n        logger.debug(\"Not closing pre-bound Hibernate Session [{}] after transaction\", session);\n        if (sessionHolder.getPreviousFlushMode() != null)\n          session.setFlushMode(sessionHolder.getPreviousFlushMode());\n      }\n      sessionHolder.clear();\n    }\n    catch (ReflectiveOperationException e) { throw new RuntimeException(e); }\n  }\n\n  static &lt;T extends AccessibleObject&gt; T jailBreak(T o) { o.setAccessible(true); return o; }\n}\n</code></pre>\n\n<p>Since I regard my approach as the \"right way\" to generate ResultSet-backed responses, and since the Streams API makes this approach very convenient, I would like to solve this in a supported way.</p>\n\n<p>Is there a way to get the same behavior without my hack? If not, would this be a good thing to request via Spring's Jira?</p>\n    ","a":"\n<p>Cleaning up. As Marko Topolnik had said <a href=\"https://jira.spring.io/browse/SPR-12349\" rel=\"nofollow\">here</a> </p>\n\n<blockquote>\n  <p>Yes, I missed this part that the holdability setting is only applied when encountering a pre-existing session. This means that my \"idea\" how it could be done is already the way it is done. It also means that my comment about failures doesn't apply: you either want holdability and skipping the session disconnection — or you don't need either. So if you can't get holdability, there is no reason not to disconnect the session at commit, therefore there's no reason to activate the \"allowResultSetAccessAfterCompletion\" in that case.</p>\n</blockquote>\n    "},{"t":"Change field name in JSON using Jackson","l":"http://stackoverflow.com/questions/7263282/change-field-name-in-json-using-jackson","q":"\n\n<p>I'm using jackson to convert an object of mine to json.\nThe object has 2 fields:</p>\n\n<pre><code>@Entity\npublic class City {\n   @id\n   Long id;\n   String name;\n   public String getName() { return name; }\n   public void setName(String name){ this.name = name; }\n   public Long getId() { return id; }\n   public void setName(Long id){ this.id = id; }\n}\n</code></pre>\n\n<p>Since I want to use this with the jQuery auto complete feature I want 'id' to appear as 'value' in the json and 'name' to appear as 'label'. The documentation of jackson is not clear on this and I've tried every annotation that even remotely seems like it does what I need but I can't get <code>name</code> to appear as <code>label</code> and <code>id</code> to appear as <code>value</code> in the json.</p>\n\n<p>Does anyone know how to do this or if this is possible?</p>\n    ","a":"\n<p>Have you tried using @JsonProperty?</p>\n\n<pre><code>@Entity\npublic class City {\n   @id\n   Long id;\n   String name;\n\n   @JsonProperty(\"label\")\n   public String getName() { return name; }\n\n   public void setName(String name){ this.name = name; }\n\n   @JsonProperty(\"value\")\n   public Long getId() { return id; }\n\n   public void setName(Long id){ this.id = id; }\n}\n</code></pre>\n    "},{"t":"Hibernate, iBatis, Java EE or other Java ORM tool","l":"http://stackoverflow.com/questions/716532/hibernate-ibatis-java-ee-or-other-java-orm-tool","q":"\n\n<p>We're in the process of planning a large, enterprise application. We're focusing our efforts on evaluating hibernate after experiencing the pains of J2EE.</p>\n\n<p>It looks like the new Java EE API is simpler.  I've also read some good things about Hibernate and iBatis.  Our team has little experience with any of the frameworks.</p>\n\n<p>There are 5 main comparisong points I'd like to determine</p>\n\n<ul>\n<li>Learning Curve/Ease of Use</li>\n<li>Productivity</li>\n<li>Maintainability/Stability</li>\n<li>Performance/Scalability</li>\n<li>Ease of Troubleshooting </li>\n</ul>\n\n<p>If you were to manage a team of ~6 developers with J2EE experience which ORM tool would you use and why?</p>\n    ","a":"\n<p>Let me take a crack at this. First of, I've written some on this subject in <a href=\"http://stackoverflow.com/questions/494816/using-an-orm-or-plain-sql/494853#494853\">Using an ORM or plain SQL?</a>. Specifically to address your points:</p>\n\n<p><strong>Learning Curve/Ease of Use</strong></p>\n\n<p>Ibatis is about SQL. If you know SQL the learning curve for ibatis is trivial. Ibatis does some things on top of SQL such as:</p>\n\n<ul>\n<li>group by;</li>\n<li>discriminated types; and</li>\n<li>dynamic SQL.</li>\n</ul>\n\n<p>that you'll still need to learn but the biggest hurdle is SQL.</p>\n\n<p>JPA (which includes Hibernate) on the other hand tries to distance itself from SQL and present things in an object rather than a relational way. As Joel points out however, <a href=\"http://www.joelonsoftware.com/articles/LeakyAbstractions.html\" rel=\"nofollow noreferrer\">abstractions are leaky</a> and JPA is no exception. To do JPA you'll still need to know about relational models, SQL, performance tuning of queries and so forth.</p>\n\n<p>Whereas Ibatis will simply having you apply the SQL you know or are learning, JPA will require you to know something else: how to configure it (either XML or annotations). By this I mean figuring out that foreign key relationships are a relationship (one-to-one, one-to-many or many-to-many) of some kind, the type mapping, etc.</p>\n\n<p>If you know SQL I would say the barrier to learning JPA is actually higher. If you don't, it's more of a mixed result with JPA allowing you to effectively defer learning SQL for a time (but it doesn't put it off indefinitely).</p>\n\n<p>With JPA once you setup your entities and their relationships then other developers can simply use them and don't need to learn everything about configuring JPA. This could be an advantage but a developer will still need to know about entity managers, transaction management, managed vs unmanaged objects and so on.</p>\n\n<p>It's worth noting that JPA also has its own query language (JPA-SQL), which you will need to learn whether or not you know SQL. You will find situations where JPA-SQL just can't do things that SQL can.</p>\n\n<p><strong>Productivity</strong></p>\n\n<p>This is a hard one to judge. Personally I think I'm more productive in ibatis but I'm also really comfortable with SQL. Some will argue they're way more productive with Hibernate but this is possibly due--at least in part--to unfamiliarity with SQL.</p>\n\n<p>Also the productivity with JPA is deceptive because you will occasionally come across a problem with your data model or queries that takes you a half a day to a day to solve as you turn up logging and watch what SQL your JPA provider is producing and then working out the combination of settings and calls to get it to produce something that's both correct and performant.</p>\n\n<p>You just don't have this kind of problem with Ibatis because you've written the SQL yourself. You test it by running the SQL inside PL/SQL Developer, SQL Server Management Studio, Navicat for MySQL or whatever. After the query is right, all you're doing is mapping inputs and outputs.</p>\n\n<p>Also I found JPA-QL to be more awkward than pure SQL. You need separate tools to just run a JPA-QL query to see the results and it's something more you have to learn. I actually found this whole part of JPA rather awkward and unwieldy although some people love it.</p>\n\n<p><strong>Maintainability/Stability</strong></p>\n\n<p>The danger with Ibatis here is proliferation meaning your dev team may just keep adding value objects and queries as they need them rather than looking for reuse whereas JPA has one entitty per table and once you have that entity, that's it. Named queries tend to go on that entity so are hard to miss. Ad-hoc queries can still be repeated but I think it's less of a potential problem.</p>\n\n<p>That comes at the cost of rigidity however. Often in an application you will need bits and pieces of data from different tables. With SQL it's easy because you can write a single query (or a small number of queries) to get all that data in one hit and put it in a custom value object just for that purpose.</p>\n\n<p>With JPA you are moving up that logic into your business layer. Entities are basically all or nothing. Now that's not strictly true. Various JPA providers will allow you to partially load entities and so forth but even there you're talking about the same discrete entitites. If you need data from 4 tables you either need 4 entities or you need to combine the data you want into some kind of custom value object in the business or presentation layer.</p>\n\n<p>One other thing I like about ibatis is that all your SQL is external (in XML files). Some will cite this is as a disadvantage but not me. You can then find uses of a table and/or column relatively easy by searching your XML files. With SQL embedded in code (or where there is no SQL at all) it can be a lot harder to find. You can also cut and paste SQL into a database tool and run it. I can't overstate enough how many times this has been useful to me over the years.</p>\n\n<p><strong>Performance/Scalability</strong></p>\n\n<p>Here I think ibatis wins hands down. It's straight SQL and low cost. By its nature JPA simply won't be able to manage the same level of latency or throughput. Now what JPA has going for it is that latency and throughput are only rarely problems. High performance systems however do exist and will tend to disfavour more heavyweight solutions like JPA.</p>\n\n<p>Plus with ibatis you can write a query that returns exactly the data you want with the exact columns that you need. Fundamentally there's no way JPA can beat (or even match) that when it's returning discrete entities.</p>\n\n<p><strong>Ease of Troubleshooting</strong></p>\n\n<p>I think this one is a win for Ibatis too. Like I mentioned above, with JPA you will sometimes spend half a day getting a query or entity produce the SQL you want or diagnosing a problem where a transaction fails because the entity manager tried to persist an unmanaged object (which could be part of a batch job where you've committed a lot of work so it might be nontrivial to find).</p>\n\n<p>Both of them will fail if you try to use a table or column that doesn't exist, which is good.</p>\n\n<p><strong>Other criteria</strong></p>\n\n<p>Now you didn't mention portability as one of your requirements (meaning moving between database vendors). It's worth noting that here JPA has the advantage. The annotations are less portable than, say, Hibernate XML (eg standard JPA annotations don't have an equivalent for Hibernate's \"native\" ID type) but both of them are more portable than ibatis / SQL.</p>\n\n<p>Also I've seen JPA / Hibernate used as a form of portable DDL, meaning you run a small Java program that creates the database schema from JPA configuration. With ibatis you'll need a script for each supported database.</p>\n\n<p>The downside of portability is that JPA is, in some ways, lowest common denominator, meaning the supported behaviour is largely the common supported behaviour across a wide range of database vendors. If you want to use Oracle Analytics in ibatis, no problem. In JPA? Well, that's a problem.</p>\n    "},{"t":"How can i get the session object if i have the entitymanager","l":"http://stackoverflow.com/questions/4148231/how-can-i-get-the-session-object-if-i-have-the-entitymanager","q":"\n\n<p>I have </p>\n\n<pre><code>private EntityManager em;\n\npublic List getAll(DetachedCriteria detachedCriteria)   {\n\n    return detachedCriteria.getExecutableCriteria( ??? ).list();\n}\n</code></pre>\n\n<p>How can i retrieve the session if am using entitymanager or how can i get the result from my detachedcriteria ?</p>\n    ","a":"\n<p>To be totally exhaustive, things are different if you're using a JPA 1.0 or a JPA 2.0 implementation.</p>\n\n<h3>JPA 1.0</h3>\n\n<p>With JPA 1.0, you'd have to use <a href=\"http://download.oracle.com/javaee/5/api/javax/persistence/EntityManager.html#getDelegate%28%29\"><code>EntityManager#getDelegate()</code></a>. But keep in mind that  <strong><em>the result of this method is implementation specific</em></strong> i.e. non portable from application server using Hibernate to the other. For example <a href=\"http://bill.burkecentral.com/2007/07/06/co-existence-with-hibernate-jpa-and-ejb3/\">with JBoss</a> you would do:</p>\n\n<pre><code>org.hibernate.Session session = (Session) manager.getDelegate();\n</code></pre>\n\n<p>But <a href=\"http://weblogs.java.net/blog/2009/05/25/be-careful-while-using-entitymanagergetdelegate\">with GlassFish</a>, you'd have to do:</p>\n\n<pre><code>org.hibernate.Session session = ((org.hibernate.ejb.EntityManagerImpl) em.getDelegate()).getSession(); \n</code></pre>\n\n<p>I agree, that's horrible, and the spec is to blame here (not clear enough).</p>\n\n<h3>JPA 2.0</h3>\n\n<p>With JPA 2.0, there is a new (and much better) <a href=\"http://download.oracle.com/javaee/6/api/javax/persistence/EntityManager.html#unwrap%28java.lang.Class%29\"><code>EntityManager#unwrap(Class&lt;T&gt;)</code></a> method that is to be preferred over <a href=\"http://download.oracle.com/javaee/5/api/javax/persistence/EntityManager.html#getDelegate%28%29\"><code>EntityManager#getDelegate()</code></a> for new applications.</p>\n\n<p>So with Hibernate as JPA 2.0 implementation (see <a href=\"http://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html/objectstate.html#d0e1799\">3.15. Native Hibernate API</a>), you would do:</p>\n\n<pre><code>Session session = entityManager.unwrap(Session.class);\n</code></pre>\n    "},{"t":"How do you “OR” criteria together when using a criteria query with hibernate?","l":"http://stackoverflow.com/questions/57484/how-do-you-or-criteria-together-when-using-a-criteria-query-with-hibernate","q":"\n\n<p>I'm trying to do a basic \"OR\" on three fields using a hibernate criteria query.</p>\n\n<p>Example</p>\n\n<pre><code>class Whatever{\n string name;\n string address;\n string phoneNumber;\n}\n</code></pre>\n\n<p>I'd like to build a criteria query where my search string could match \"name\" or \"address\" or \"phoneNumber\".</p>\n    ","a":"\n<p>You want to use <code>Restrictions.disjuntion()</code>. Like so</p>\n\n<pre><code>session.createCriteria(Whatever.class)\n    .add(Restrictions.disjunction()\n        .add(Restrictions.eq(\"name\", queryString))\n        .add(Restrictions.eq(\"address\", queryString))\n        .add(Restrictions.eq(\"phoneNumber\", queryString))\n    );\n</code></pre>\n\n<p>See the Hibernate doc <a href=\"http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querycriteria.html#querycriteria-narrowing\" rel=\"nofollow noreferrer\">here</a>.</p>\n    "},{"t":"hibernate: LazyInitializationException: could not initialize proxy","l":"http://stackoverflow.com/questions/345705/hibernate-lazyinitializationexception-could-not-initialize-proxy","q":"\n\n<p>Here's one that has me perplexed. I'm trying to implement a basic Hibernate DAO structure, but am having a problem.</p>\n\n<p>Here's the essential code:</p>\n\n<pre><code>    int startingCount = sfdao.count();\n\n    sfdao.create( sf );\n\n    SecurityFiling sf2 = sfdao.read( sf.getId() );\n\n    sfdao.delete( sf );\n\n    int endingCount = sfdao.count();\n\n    assertTrue( startingCount == endingCount );\n    assertTrue( sf.getId().longValue() == sf2.getId().longValue() );\n    assertTrue( sf.getSfSubmissionType().equals( sf2.getSfSubmissionType() ) );\n    assertTrue( sf.getSfTransactionNumber().equals( sf2.getSfTransactionNumber() ) );\n</code></pre>\n\n<p>It fails on the third assertTrue where it's trying to compare a value in sf to the corresponding value in sf2. Here's the exception:</p>\n\n<pre><code>org.hibernate.LazyInitializationException: could not initialize proxy - no Session\n    at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:86)\n    at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:140)\n    at org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:190)\n    at com.freightgate.domain.SecurityFiling_$$_javassist_7.getSfSubmissionType(SecurityFiling_$$_javassist_7.java)\n    at com.freightgate.dao.SecurityFilingTest.test(SecurityFilingTest.java:73)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\n</code></pre>\n\n<p>I can post my DAO and annotation code if necessary. Please advise what else is needed.</p>\n\n<p>TIA</p>\n\n<p>Piko</p>\n    ","a":"\n<p>If you are using hibernate with JPA annotations then this will be useful. In your service class there should be a setter for entity manager with @PersistenceContext. change this to @PersistenceContext(type = PersistenceContextType.EXTENDED). Then you can access lazy property in any where.</p>\n    "},{"t":"what are good blogs to read relating java, spring, hibernate, maven? [closed]","l":"http://stackoverflow.com/questions/2553654/what-are-good-blogs-to-read-relating-java-spring-hibernate-maven","q":"\n\n<p>To continue to question further I'm more interested in blogs, websites who once in a while release a tutorial, tip or best-practice on the topics I mentioned. For ex : \n<a href=\"http://net.tutsplus.com/\" rel=\"nofollow noreferrer\">http://net.tutsplus.com/</a> is very good website to follow if you wanna learn about or upgrade your knowledge about CSS, HTML, Javascript, PHP .. Is there a website like this for Java and related technologies?</p>\n    ","a":"\n<p>I'll list some of the ones I'm reading, via RSS:</p>\n\n<p>Blog aggregators:</p>\n\n<ul>\n<li><a href=\"http://java.dzone.com\" rel=\"nofollow noreferrer\">http://java.dzone.com</a></li>\n<li><a href=\"http://javacodegeeks.com\" rel=\"nofollow noreferrer\">http://javacodegeeks.com</a></li>\n<li><a href=\"http://www.programcreek.com/2012/11/top-100-java-developers-blogs/\" rel=\"nofollow noreferrer\">http://www.programcreek.com/2012/11/top-100-java-developers-blogs/</a></li>\n</ul>\n\n<p>Blogs:</p>\n\n<ul>\n<li><a href=\"http://relation.to/Bloggers/Gavin\" rel=\"nofollow noreferrer\">http://relation.to/Bloggers/Gavin</a> - Gavin King - the guy behind Hibernate, Seam, Weld</li>\n<li><a href=\"http://vladmihalcea.com/\" rel=\"nofollow noreferrer\">http://vladmihalcea.com/</a> - Vlad Mihalcea's blog (Hibernate Developer Advocate)</li>\n<li><a href=\"http://blog.springsource.com/\" rel=\"nofollow noreferrer\">http://blog.springsource.com/</a> - Spring source team blog</li>\n<li><a href=\"http://developers-blog.org/\" rel=\"nofollow noreferrer\">http://developers-blog.org/</a></li>\n<li><a href=\"http://misko.hevery.com/\" rel=\"nofollow noreferrer\">http://misko.hevery.com/</a> - Misko Hevery, on testability and tdd</li>\n<li><a href=\"http://krams915.blogspot.in/\" rel=\"nofollow noreferrer\">http://krams915.blogspot.in/</a></li>\n<li><a href=\"http://programcreek.com/\" rel=\"nofollow noreferrer\">http://programcreek.com/</a></li>\n<li><a href=\"http://mkyong.com\" rel=\"nofollow noreferrer\">http://mkyong.com</a></li>\n<li><a href=\"http://techblog.bozho.net\" rel=\"nofollow noreferrer\">my blog</a></li>\n</ul>\n\n<p>Websites:</p>\n\n<ul>\n<li>A couple of JavaLobby forum sections - you can follow whichever section of <a href=\"http://www.javalobby.org/java/forums/c5601.html\" rel=\"nofollow noreferrer\">the forum</a> you like</li>\n<li><a href=\"http://www.theserverside.com/\" rel=\"nofollow noreferrer\">http://www.theserverside.com/</a> - The Server Side</li>\n<li><a href=\"http://www.devx.com/Java/Door/6972\" rel=\"nofollow noreferrer\">http://www.devx.com/Java/Door/6972</a> - DevX Java zone</li>\n<li><a href=\"http://www.javaworld.com/\" rel=\"nofollow noreferrer\">http://www.javaworld.com/</a> - JavaWorld</li>\n<li><a href=\"http://www.infoq.com/java/\" rel=\"nofollow noreferrer\">http://www.infoq.com/java/</a> - InfoQ</li>\n<li><a href=\"http://www.java.net/articles\" rel=\"nofollow noreferrer\">http://www.java.net/articles</a> - java.net articles</li>\n<li><a href=\"http://onjava.com/\" rel=\"nofollow noreferrer\">http://onjava.com/</a></li>\n<li><a href=\"http://www.javased.com\" rel=\"nofollow noreferrer\">http://www.javased.com</a> - Search Engine for Java Code Examples</li>\n<li><a href=\"http://modernpathshala.com\" rel=\"nofollow noreferrer\">http://modernpathshala.com</a>  - Java</li>\n</ul>\n    "},{"t":"Multiple unique constraints in JPA","l":"http://stackoverflow.com/questions/3404853/multiple-unique-constraints-in-jpa","q":"\n\n<p>Is there a way to specify using JPA that there should be multiple unique constraints on different sets of columns?</p>\n\n<pre><code>@Entity\n@Table(name=\"person\", \n       uniqueConstraints=@UniqueConstraint(columnNames={\"code\", \"uid\"}))\npublic class Person {\n    // Unique on code and uid\n    public String code;\n    public String uid;\n\n    // Unique on username\n    public String username;\n\n    public String name;\n    public String email;\n}\n</code></pre>\n\n<p>I have seen a hibernate specific annotation but I am trying to avoid vendor specific solutions as we are still deciding between hibernate and datanucleus.</p>\n    ","a":"\n<p>The <code>@Table</code>'s attribute <code>uniqueConstraints</code> actually accepts an array of these. Your example is just a shorthand for an array with a single element. Otherewise it would look like:</p>\n\n<pre><code>@Table(name=\"person\",  uniqueConstraints={\n   @UniqueConstraint(columnNames={\"code\", \"uid\"}),\n   @UniqueConstraint(columnNames={\"anotherField\", \"uid\"})\n})\n</code></pre>\n\n<p>Whenever the unique constraint is based only on one field, you can use <code>@Column(unique=true)</code> on that column. </p>\n    "},{"t":"How to choose the id generation strategy when using Hibernate","l":"http://stackoverflow.com/questions/10041938/how-to-choose-the-id-generation-strategy-when-using-hibernate","q":"\n\n<p>I was going through Id generation section of the Hibernate reference guide and \"java persistence with Hibernate\"</p>\n\n<p>There are quite a few options available with Hibernate and JPA combined.</p>\n\n<p>I was looking for a further documentation on how to choose the specific id generation strategy.</p>\n\n<p>I am also looking for tipping points.</p>\n\n<p>For example, hilo strategy is expected to reduce contention. I am assuming there must be a trade off associated with this choice. </p>\n\n<p>I want to be educated about the trade offs.</p>\n\n<p>Is there any literature available? </p>\n    ","a":"\n<p>Basically, you have two major choices:</p>\n\n<ul>\n<li>You can generate the identifier yourself, in which case you can use an <a href=\"https://vladmihalcea.com/2016/03/01/how-to-combine-the-hibernate-assigned-generator-with-a-sequence-or-an-identity-column/comment-page-1/#comment-7574\">assigned identifier</a>.</li>\n<li>You can use the <code>@GeneratedValue</code> annotation and Hibernate will assign the identifier for you.</li>\n</ul>\n\n<p>For the generated identifiers you have two options:</p>\n\n<ul>\n<li><a href=\"https://vladmihalcea.com/2014/07/01/hibernate-and-uuid-identifiers/\">UUID identifiers</a>.</li>\n<li>Numerical identifiers.</li>\n</ul>\n\n<p>For numerical identifiers <a href=\"https://vladmihalcea.com/2014/07/08/hibernate-identity-sequence-and-table-sequence-generator/\">you have three options</a>:</p>\n\n<ul>\n<li>IDENTITY</li>\n<li>SEQUENCE</li>\n<li>TABLE</li>\n</ul>\n\n<p>IDENTITY is only a good choice when you cannot use SEQUENCE (e.g. MySQL) because <a href=\"https://vladmihalcea.com/2015/03/18/how-to-batch-insert-and-update-statements-with-hibernate/\">it disables JDBC batch updates</a>.</p>\n\n<p>SEQUENCE is the preferred option, especially when used with an identifier optimizer like <a href=\"https://vladmihalcea.com/2014/07/21/hibernate-hidden-gem-the-pooled-lo-optimizer/\">pooled or pooled-lo</a>.</p>\n\n<p>TABLE is to be avoided at any cost since it uses a separate transaction to fetch the identifier and row-level locks which scales poorly.</p>\n    "},{"t":"What is the “owning side” in an ORM mapping?","l":"http://stackoverflow.com/questions/2749689/what-is-the-owning-side-in-an-orm-mapping","q":"\n\n<p>I'm new to <a href=\"http://en.wikipedia.org/wiki/Java_Persistence_API\" rel=\"nofollow noreferrer\">JPA</a>. Now I have a question: what exactly does the <strong><em>owning side</em></strong> mean? I only have a rough idea of it. What is an explanation with some mapping examples (<strong><em>one to many, one to one, many to one</em></strong>)?</p>\n\n<p>PS: the following text is an excerpt from the description of <strong><em>@OneToOne</em></strong> in Java EE 6 documentation. You can see the concept <strong><em>owning side</em></strong> in it.</p>\n\n<blockquote>\n  <p>Defines a single-valued association to\n  another entity that has one-to-one\n  multiplicity. It is not normally\n  necessary to specify the associated\n  target entity explicitly since it can\n  usually be inferred from the type of\n  the object being referenced. If the\n  relationship is bidirectional, <strong><em>the\n  non-owning side</em></strong> must use the mappedBy\n  element of the OneToOne annotation to\n  specify the relationship field or\n  property of the owning side.</p>\n</blockquote>\n    ","a":"\n<p>You can imagine that the <em>owning side</em> is the entity that has the reference to the other one. In your excerpt, you have an one-to-one relationship. Since it's a <em>symmetric</em> relation, you'll end up having that if object A is in relation with object B then also the vice-versa is true.</p>\n\n<p>This means that saving into object A a reference to object B and saving in object B a reference to object A will be redundant: that's why you choose which object \"owns\" the other having the reference to it.</p>\n\n<p>When you have got an one-to-many relationship, the objects related to the \"many\" part will be the owning side, otherwise you would have to store many references from a single object to a multitude. To avoid that, every object in the second class will have a pointer to the single one they refer to (so they are the owning side).</p>\n\n<p>For a many-to-many relationship, since you will need a separate mapping table anyway there won't be any owning side.</p>\n\n<p>In conclusion the <strong>owning side</strong> is the entity that has the reference to the other.</p>\n    "},{"t":"hibernate 4 and joda-time","l":"http://stackoverflow.com/questions/8974747/hibernate-4-and-joda-time","q":"\n\n<p>are they happily married ?</p>\n\n<p>I am using the latest version of hibernate (4) and version 1.3 of <a href=\"http://www.joda.org/joda-time-hibernate/\">joda-time hibernate support</a>, which I also believe to be the current latest release. </p>\n\n<p>Everything seems to be working OK (date columns created as expected) when using annotations :</p>\n\n<pre><code>@Column\n@Type(type=\"org.joda.time.contrib.hibernate.PersistentLocalDate\")\nprivate LocalDate myDate; \n</code></pre>\n\n<p>Are their any known problems with using these versions together ?</p>\n\n<p><strong>Update</strong>\nWell turns out the columns get created but unable to populate with any data :</p>\n\n<p><em>Handler processing failed; nested exception is java.lang.AbstractMethodError: org.joda.time.contrib.hibernate.PersistentLocalDateTime.nullSafeSet</em></p>\n\n<p><strong>They are incompatible, and I should be using <a href=\"http://usertype.sourceforge.net/\">usertype</a>.</strong> See answer below.</p>\n    ","a":"\n<p>A distinct paucity of documentation, means it might be helpful for me to write down the steps required for integration.  Make sure your libraries are up to date.</p>\n\n<p>You'll need : [assuming you already have hibernate4] </p>\n\n<p>Latest version of joda-time</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;joda-time&lt;/groupId&gt;\n    &lt;artifactId&gt;joda-time&lt;/artifactId&gt;\n    &lt;version&gt;2.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>and usertype lib</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.jadira.usertype&lt;/groupId&gt;\n    &lt;artifactId&gt;usertype.core&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0.CR1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>Then use the following in entity classes (doesn't have to be LocalDateTime, could be any of the persisted classes available) :</p>\n\n<pre><code>import org.joda.time.LocalDateTime;\n</code></pre>\n\n<p>and for column definition:</p>\n\n<pre><code>@Column(name=\"updated\", nullable = false)\n@Type(type=\"org.jadira.usertype.dateandtime.joda.PersistentLocalDateTime\")\nprivate LocalDateTime updated;\n</code></pre>\n    "},{"t":"Hibernate criteria: Joining table without a mapped association","l":"http://stackoverflow.com/questions/720502/hibernate-criteria-joining-table-without-a-mapped-association","q":"\n\n<p>I'd like to use Hibernate's criteria api to formulate a particular query that joins two entities. Let's say I have two entities, Pet and Owner with a owner having many pets, but crucially that association is not mapped in the Java annotations or xml.</p>\n\n<p>With hql, I could select owners that have a pet called 'fido' by specifying the join in the query (rather than adding a set of pets to the owner class).</p>\n\n<p>Can the same be done using hibernate criteria? If so how?</p>\n\n<p>Thanks,\nJ</p>\n    ","a":"\n<p>My understanding is that if you do this using HQL, you are creating a Cartesian join with a filter, rather than an inner join. Criteria queries do not support doing this.</p>\n    "},{"t":"Hibernate problem - “Use of @OneToMany or @ManyToMany targeting an unmapped class”","l":"http://stackoverflow.com/questions/4956855/hibernate-problem-use-of-onetomany-or-manytomany-targeting-an-unmapped-clas","q":"\n\n<p>I'm finding my feet with Hibernate Annotations and I've hit a problem I hope some one can help with.</p>\n\n<p>I have 2 entities, Section and ScopeTopic. Section has a List class member, so a One to Many relationship. When I run my unit test I am getting this exception:</p>\n\n<blockquote>\n  <p>Use of @OneToMany or @ManyToMany targeting an unmapped class: com.xxx.domain.Section.scopeTopic[com.xxx.domain.ScopeTopic]</p>\n</blockquote>\n\n<p>I would assume that the error implies that my ScopeTopic entity isn't mapped to a table? I can't see with I have done wrong. Here are the Entity classes:</p>\n\n<hr>\n\n<pre><code>@Entity\npublic class Section {\n    private Long id;\n    private List&lt;ScopeTopic&gt; scopeTopics;\n\n    public Section() {}\n\n    @Id\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    @OneToMany\n    @JoinTable(name = \"section_scope\", joinColumns = {@JoinColumn(name=\"section_id\")},\n               inverseJoinColumns = {@JoinColumn(name=\"scope_topic_id\")} )\n    public List&lt;ScopeTopic&gt; getScopeTopic() {\n        return scopeTopic;\n    }\n\n    public void setScopeTopic(List&lt;ScopeTopic&gt; scopeTopic) {\n        this.scopeTopic = scopeTopic;\n    }\n}\n</code></pre>\n\n<hr>\n\n<pre><code>@Entity\n@Table(name = \"scope_topic\")\npublic class ScopeTopic {\n    private Long id;\n    private String topic;\n\n    public ScopeTopic() {}\n\n    @Id\n    public Long getId() {\n        return id;\n    }\n\n    public void setId() {\n        this.id = id;\n    }\n\n    public String getTopic() {\n        return topic;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>I'm pretty sure it's my own lack of understanding that's at fault so some guidance would be great, thanks!</p>\n    ","a":"\n<p>Your annotations look fine. Here are the things to check:</p>\n\n<ul>\n<li><p>make sure the annotation is <code>javax.persistence.Entity</code>, and not <code>org.hibernate.annotations.Entity</code>. The former makes the entity detectable. The latter is just an addition.</p></li>\n<li><p>if you are manually listing your entities (in persistence.xml, in hibernate.cfg.xml, or when configuring your session factory), then make sure you have also listed the <code>ScopeTopic</code> entity</p></li>\n<li><p>make sure you don't have multiple <code>ScopeTopic</code> classes in different packages, and you've imported the wrong one.</p></li>\n</ul>\n    "},{"t":"JPA/Hibernate store date in UTC time zone","l":"http://stackoverflow.com/questions/508019/jpa-hibernate-store-date-in-utc-time-zone","q":"\n\n<p>How can I configure JPA/Hibernate to store a date/time in the database as UTC (GMT) time zone? Consider this annotated JPA entity:</p>\n\n<pre><code>public class Event {\n    @Id\n    public int id;\n\n    @Temporal(TemporalType.TIMESTAMP)\n    public java.util.Date date;\n}\n</code></pre>\n\n<p>If the date is 2008-Feb-03 9:30am Pacific Standard Time (PST), then I want the UTC time of 2008-Feb-03 5:30pm stored in the database. Likewise, when the date is retrieved from the database, I want it interpreted as UTC. So in this case 530pm is 530pm UTC. When it's displayed it will be formatted as 9:30am PST.</p>\n    ","a":"\n<p>To the best of my knowledge, you need to put your entire Java app in UTC timezone (so that Hibernate will store dates in UTC), and you'll need to convert to whatever timezone desired when you display stuff (at least we do it this way).</p>\n\n<p>At startup, we do:</p>\n\n<pre><code>TimeZone.setDefault(TimeZone.getTimeZone(\"Etc/UTC\"));\n</code></pre>\n\n<p>And set the desired timezone to the DateFormat:</p>\n\n<pre><code>fmt.setTimeZone(TimeZone.getTimeZone(\"Europe/Budapest\"))\n</code></pre>\n    "},{"t":"NoSuchMethodError in javax.persistence.Table.indexes()[Ljavax/persistence/Index","l":"http://stackoverflow.com/questions/20734540/nosuchmethoderror-in-javax-persistence-table-indexesljavax-persistence-index","q":"\n\n<p>I have a Play Framework application and I <em>was</em> using Hibernate 4.2.5.Final (which is retrieved via the Maven dependency manager).  I decided to upgrade to Hibernate 4.3.0.Final, recompile my application successfully, and ran it.</p>\n\n<p>I got the exception below, and haven't been able to figure out why.  I downgraded back to 4.2.5 and this issue did not occur.  I then, tried upgrading Hibernate with each Final release after 4.2.5.  That is, I went from 4.2.5.Final to 4.2.6.Final, to 4.2.7.Final, to 4.2.8.Final and then to 4.3.Final.  The issue does not occur until I upgrade to 4.3.0.Final.</p>\n\n<p><strong>Java version information</strong></p>\n\n<pre><code>java version \"1.7.0_45\"\nJava(TM) SE Runtime Environment (build 1.7.0_45-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n</code></pre>\n\n<p><strong>And exception</strong>:</p>\n\n<pre><code>play.api.UnexpectedException: Unexpected exception[NoSuchMethodError: javax.persistence.Table.indexes()[Ljavax/persistence/Index;]\n    at play.core.ReloadableApplication$$anonfun$get$1$$anonfun$apply$1$$anonfun$1.apply(ApplicationProvider.scala:152) ~[play_2.10.jar:2.2.1]\n    at play.core.ReloadableApplication$$anonfun$get$1$$anonfun$apply$1$$anonfun$1.apply(ApplicationProvider.scala:112) ~[play_2.10.jar:2.2.1]\n    at scala.Option.map(Option.scala:145) ~[scala-library.jar:na]\n    at play.core.ReloadableApplication$$anonfun$get$1$$anonfun$apply$1.apply(ApplicationProvider.scala:112) ~[play_2.10.jar:2.2.1]\n    at play.core.ReloadableApplication$$anonfun$get$1$$anonfun$apply$1.apply(ApplicationProvider.scala:110) ~[play_2.10.jar:2.2.1]\n    at scala.util.Success.flatMap(Try.scala:200) ~[scala-library.jar:na]\nCaused by: java.lang.NoSuchMethodError: javax.persistence.Table.indexes()[Ljavax/persistence/Index;\n    at org.hibernate.cfg.annotations.EntityBinder.processComplementaryTableDefinitions(EntityBinder.java:936) ~[hibernate-core-4.3.0.Final.jar:4.3.0.Final]\n    at org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:781) ~[hibernate-core-4.3.0.Final.jar:4.3.0.Final]\n    at org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3762) ~[hibernate-core-4.3.0.Final.jar:4.3.0.Final]\n    at org.hibernate.cfg.Configuration$MetadataSourceQueue.processMetadata(Configuration.java:3716) ~[hibernate-core-4.3.0.Final.jar:4.3.0.Final]\n    at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1410) ~[hibernate-core-4.3.0.Final.jar:4.3.0.Final]\n    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1844) ~[hibernate-core-4.3.0.Final.jar:4.3.0.Final]\n</code></pre>\n    ","a":"\n<p>I've ran into the same problem. The question here is that play-java-jpa artifact (javaJpa key in the build.sbt file) depends on a different version of the spec (version 2.0 -&gt; \"org.hibernate.javax.persistence\" % \"hibernate-jpa-2.0-api\" % \"1.0.1.Final\").</p>\n\n<p>When you added hibernate-entitymanager 4.3 this brought the newer spec (2.1) and a different factory provider for the entitymanager. Basically you ended up having both jars in the classpath as transitive dependencies.</p>\n\n<p>Edit your build.sbt file like this and it will temporarily fix you problem until play releases a new version of the jpa plugin for the newer api dependency.</p>\n\n<pre><code>libraryDependencies ++= Seq(\njavaJdbc,\njavaJpa.exclude(\"org.hibernate.javax.persistence\", \"hibernate-jpa-2.0-api\"),\n\"org.hibernate\" % \"hibernate-entitymanager\" % \"4.3.0.Final\"\n)\n</code></pre>\n\n<p>This is for play 2.2.x. In previous versions there were some differences in the build files.</p>\n    "},{"t":"What's the use of session.flush() in Hibernate","l":"http://stackoverflow.com/questions/3220336/whats-the-use-of-session-flush-in-hibernate","q":"\n\n<p>When we are updating a record, we can use <code>session.flush()</code> with Hibernate. What's the need for <code>flush()</code>?</p>\n    ","a":"\n<p>Calling <code>EntityManager#flush</code> does have <em>side-effects</em>. It is conveniently used for entity types with generated ID values (sequence values): such an ID is available only upon synchronization with underlying persistence layer. If this ID is required before the current transaction ends (for logging purposes for instance), flushing the session is required.</p>\n    "},{"t":"Why is HibernateDaoSupport not recommended?","l":"http://stackoverflow.com/questions/5104765/why-is-hibernatedaosupport-not-recommended","q":"\n\n<p>I've been doing some work with Hibernate 3.5 and Spring 3 recently, I'm fairly new with Hibernate and thought the <code>HibernateDaoSupport</code> class in Spring made it nice and easy to use Hibernate with my domain classes.</p>\n\n<p>However, while searching for an unrelated question I saw someone mention that the <code>HibernateDaoSupport</code> is not the best way to use Spring and Hibernate. Can anyone shed any light on:</p>\n\n<ul>\n<li>Why is it not recommended?</li>\n<li>What is the best (or at least the accepted) way to integrate Hibernate and Spring?</li>\n</ul>\n    ","a":"\n<p>Using <code>HibernateDaoSupport</code>/<code>HibernateTemplate</code> is not recommended since it unnecessarily\nties your code to Spring classes.</p>\n\n<p>Using these classes was inevitable with older versions of Hibernate in order to integrate support of Spring-managed transactions.</p>\n\n<p>However, since Hibernate 3.0.1 you don't need it any more - you can write a code against a plain Hibernate API while using Spring-managed transactions. All you need is to configure Spring transaction support, inject <code>SessionFactory</code> and call <code>getCurrentSession()</code> on it when you need to work with session. </p>\n\n<p>Another benefit of <code>HibernateTemplate</code> is exception translation. Without <code>HibernateTemplate</code> the same functionality can be achieved by using <code>@Repository</code> annotation, as shown in Gareth Davis's answer.</p>\n\n<p><strong>See also:</strong></p>\n\n<ul>\n<li><a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate-straight\">13.3.2 Implementing DAOs based on plain Hibernate 3 API</a></li>\n</ul>\n    "},{"t":"JPA Multiple Embedded fields","l":"http://stackoverflow.com/questions/331744/jpa-multiple-embedded-fields","q":"\n\n<p>Is it possible for a JPA entity class to contain two embedded (<code>@Embedded</code>) fields? An example would be:</p>\n\n<pre><code>@Entity\npublic class Person {\n    @Embedded\n    public Address home;\n\n    @Embedded\n    public Address work;\n}\n\npublic class Address {\n    public String street;\n    ...\n}\n</code></pre>\n\n<p>In this case a <code>Person</code> can contain two <code>Address</code> instances - home and work. I'm using JPA with Hibernate's implementation. When I generate the schema using Hibernate Tools, it only embeds one <code>Address</code>. What I'd like is two embedded <code>Address</code> instances, each with its column names distinguished or pre-pended with some prefix (such as home and work). I know of <code>@AttributeOverrides</code>, but this requires that each attribute be individually overridden. This can get cumbersome if the embedded object (<code>Address</code>) gets big as each column needs to be individually overridden.</p>\n    ","a":"\n<p>If you want to have the same embeddable object type twice in the same entity, the column name defaulting will not work: at least one of the columns will have to be explicit. Hibernate goes beyond the EJB3 spec and allows you to enhance the defaulting mechanism through the NamingStrategy. DefaultComponentSafeNamingStrategy is a small improvement over the default EJB3NamingStrategy that allows embedded objects to be defaulted even if used twice in the same entity.</p>\n\n<p>From Hibernate Annotations Doc: <a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e714\" rel=\"nofollow noreferrer\">http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e714</a></p>\n    "},{"t":"How to solve circular reference in json serializer caused by hibernate bidirectional mapping?","l":"http://stackoverflow.com/questions/3340485/how-to-solve-circular-reference-in-json-serializer-caused-by-hibernate-bidirecti","q":"\n\n<p>I am writing a serializer to serialize POJO to JSON but stuck in circular reference problem. In  hibernate bidirectional one-to-many relation, parent references child and child references back to parent and here my serializer dies. (see example code below)<br>\nHow to break this cycle? Can we get owner tree of an object to see whether object itself exists somewhere in its own owner hierarchy? Any other way to find if the reference is going to be circular? or any other idea to resolve this problem?</p>\n    ","a":"\n<p>Can a bi-directional relationship even be represented in JSON? Some data formats are not good fits for some types of data modelling. </p>\n\n<p>One method for dealing with cycles when dealing with traversing object graphs is to keep track of which objects you've seen so far (using identity comparisons), to prevent yourself from traversing down an infinite cycle.</p>\n    "},{"t":"Hibernate error - QuerySyntaxException: users is not mapped [from users]","l":"http://stackoverflow.com/questions/9954590/hibernate-error-querysyntaxexception-users-is-not-mapped-from-users","q":"\n\n<p>I'm trying to get a list of all the users from \"users\" table and I get the following error:</p>\n\n<pre><code>org.hibernate.hql.internal.ast.QuerySyntaxException: users is not mapped [from users]\norg.hibernate.hql.internal.ast.util.SessionFactoryHelper.requireClassPersister(SessionFactoryHelper.java:180)\norg.hibernate.hql.internal.ast.tree.FromElementFactory.addFromElement(FromElementFactory.java:110)\norg.hibernate.hql.internal.ast.tree.FromClause.addFromElement(FromClause.java:93)\n</code></pre>\n\n<p>This is the code I wrote to add/get users:</p>\n\n<pre><code>public List&lt;User&gt; getUsers() {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List&lt;User&gt; result = (List&lt;User&gt;) session.createQuery(\"from users\").list();\n    session.getTransaction().commit();\n    return result;\n}\n\npublic void addUser(User user) {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    session.save(user);\n    session.getTransaction().commit();\n}\n\npublic void addUser(List&lt;User&gt; users) {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    for (User user : users) {\n        session.save(user);\n    }\n    session.getTransaction().commit();\n}\n</code></pre>\n\n<p>Adding users works, but when I use the getUsers function I get these error.</p>\n\n<p>This is my hibernate config file:</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n&lt;session-factory&gt;\n    &lt;property name=\"connection.url\"&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;\n    &lt;property name=\"connection.username\"&gt;root&lt;/property&gt;\n    &lt;property name=\"connection.password\"&gt;root&lt;/property&gt;\n    &lt;property name=\"connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n    &lt;property name=\"hibernate.default_schema\"&gt;test&lt;/property&gt;\n    &lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt;\n\n    &lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n\n    &lt;property name=\"format_sql\"&gt;true&lt;/property&gt;\n    &lt;property name=\"hbm2ddl.auto\"&gt;create-drop&lt;/property&gt;\n\n    &lt;!-- JDBC connection pool (use the built-in) --&gt;\n    &lt;property name=\"connection.pool_size\"&gt;1&lt;/property&gt;\n    &lt;property name=\"current_session_context_class\"&gt;thread&lt;/property&gt;\n\n    &lt;!-- Mapping files will go here.... --&gt;\n\n    &lt;mapping class=\"model.Company\" /&gt;\n    &lt;mapping class=\"model.Conference\" /&gt;\n    &lt;mapping class=\"model.ConferencesParticipants\" /&gt;\n    &lt;mapping class=\"model.ConferenceParticipantStatus\" /&gt;\n    &lt;mapping class=\"model.ConferencesUsers\" /&gt;\n    &lt;mapping class=\"model.Location\" /&gt;\n    &lt;mapping class=\"model.User\" /&gt;\n\n&lt;/session-factory&gt;\n</code></pre>\n\n<p></p>\n\n<p>and this is my User class:</p>\n\n<pre><code>@Entity\n@Table( name = \"Users\" )\npublic class User implements Serializable{\n\n    private long userID;\n    private int pasportID;\n    private Company company; \n    private String name;\n    private String email;\n    private String phone1;\n    private String phone2;\n    private String password; //may be null/empty , will be kept hashed\n    private boolean isAdmin;\n    private Date lastLogin;\n\n    User() {} //not public on purpose!\n\n    public User(int countryID, Company company, String name, String email,\n            String phone1, String phone2, String password, boolean isAdmin) {\n        this.pasportID = countryID;\n        this.company = company;\n        this.name = name;\n        this.email = email;\n        this.phone1 = phone1;\n        this.phone2 = phone2;\n        this.password = password;\n        this.isAdmin = isAdmin;\n    }\n\n    @Id\n    @GeneratedValue(generator=\"increment\")\n    @GenericGenerator(name=\"increment\", strategy = \"increment\")\n    public long getUserID() {\n        return userID;\n    }\n    public void setUserID(long userID) {\n        this.userID = userID;\n    }\n    ...    \n}\n</code></pre>\n\n<p>Any idea why I get this error?</p>\n    ","a":"\n<p>In the HQL , you should use the java class name and property name of the mapped <code>@Entity</code> instead of the actual table name and column name , so the HQL should be :</p>\n\n<pre><code>List&lt;User&gt; result = (List&lt;User&gt;) session.createQuery(\"from User\").list();\n</code></pre>\n    "},{"t":"Configure hibernate (using JPA) to store Y/N for type Boolean instead of 0/1","l":"http://stackoverflow.com/questions/1154833/configure-hibernate-using-jpa-to-store-y-n-for-type-boolean-instead-of-0-1","q":"\n\n<p>Can I setup JPA/hibernate to persist <code>Boolean</code> types as <code>Y/N</code>? In the database (the column is defined as <code>varchar2(1)</code>. It currently stores them as <code>0/1</code>. The database is Oracle.</p>\n    ","a":"\n<p>The only way I've figured out how to do this is to have two properties for my class. One as the boolean for the programming API which is not included in the mapping. It's getter and setter reference a private char variable which is Y/N. I then have another protected property which is included in the hibernate mapping and it's getters and setters reference the private char variable directly.</p>\n    "},{"t":"Hibernate HQL Query : How to set a Collection as a named parameter of a Query?","l":"http://stackoverflow.com/questions/570229/hibernate-hql-query-how-to-set-a-collection-as-a-named-parameter-of-a-query","q":"\n\n<p>Given the following HQL Query:</p>\n\n<pre><code>FROM\n    Foo\nWHERE\n    Id = :id AND\n    Bar IN (:barList)\n</code></pre>\n\n<p>I set <code>:id</code> using the Query object's <code>setInteger()</code> method. </p>\n\n<p>I would like to set <code>:barList</code> using a <code>List</code> of objects, but looking at the Hibernate documentation and list of methods I cannot see an obvious choice of which to use. Any ideas?</p>\n    ","a":"\n<p>Use <code>Query.setParameterList()</code>, <a href=\"http://docs.jboss.org/hibernate/core/3.2/api/org/hibernate/Query.html#setParameterList%28java.lang.String,%20java.util.Collection%29\" rel=\"nofollow noreferrer\">Javadoc here</a>.</p>\n\n<p>There are four variants to pick from.</p>\n    "},{"t":"Proper way of writing a HQL in ( … ) query","l":"http://stackoverflow.com/questions/961816/proper-way-of-writing-a-hql-in-query","q":"\n\n<p>Assuming that I want to write the following HQL query:</p>\n\n<pre><code>FROM Cat c WHERE c.id IN (1,2,3)\n</code></pre>\n\n<p>what is the proper way of writing this as a parametrized query, e.g.</p>\n\n<pre><code>FROM Cat c WHERE c.id IN (?)\n</code></pre>\n    ","a":"\n<p>I am unsure how to do this with positional parameter, but if you can use named parameters instead of positional, then named parameter can be placed inside brackets and <a href=\"https://www.hibernate.org/hib_docs/v3/api/org/hibernate/Query.html#setParameterList(java.lang.String,%20java.util.Collection)\" rel=\"nofollow noreferrer\">setParameterList</a> method from <a href=\"https://www.hibernate.org/hib_docs/v3/api/org/hibernate/Query.html\" rel=\"nofollow noreferrer\">Query</a> interface can be used to bind the list of values to this parameter. </p>\n\n<pre><code>...\nQuery query = session.createQuery(\"FROM Cat c WHERE c.id IN (:ids)\");\nquery.setParameterList(\"ids\", listOfIds);\n...\n</code></pre>\n    "},{"t":"Hibernate: “Field 'id' doesn't have a default value”","l":"http://stackoverflow.com/questions/804514/hibernate-field-id-doesnt-have-a-default-value","q":"\n\n<p>I'm facing what I think is a simple problem with Hibernate, but can't solve it (Hibernate forums being unreachable certainly doesn't help).</p>\n\n<p>I have a simple class I'd like to persist, but keep getting:</p>\n\n<pre><code>SEVERE: Field 'id' doesn't have a default value\nException in thread \"main\" org.hibernate.exception.GenericJDBCException: could not insert: [hibtest.model.Mensagem]\n    at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103)\n    at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91)\n    [ a bunch more ]\nCaused by: java.sql.SQLException: Field 'id' doesn't have a default value\n    [ a bunch more ]\n</code></pre>\n\n<p>The relevant code for the persisted class is:</p>\n\n<pre><code>package hibtest.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Inheritance;\nimport javax.persistence.InheritanceType;\n\n@Entity\n@Inheritance(strategy = InheritanceType.JOINED)\npublic class Mensagem  {\n    protected Long id;\n\n    protected Mensagem() { }\n\n    @Id\n    @GeneratedValue\n    public Long getId() {\n        return id;\n}\n\n    public Mensagem setId(Long id) {\n        this.id = id;\n        return this;\n    }\n}\n</code></pre>\n\n<p>And the actual running code is just plain:</p>\n\n<pre><code>SessionFactory factory = new AnnotationConfiguration()\n    .configure()\n    .buildSessionFactory();\n\n{\n    Session session = factory.openSession();\n    Transaction tx = session.beginTransaction();\n\n    Mensagem msg = new Mensagem(\"YARR!\");\n\n    session.save(msg);\n\n    tx.commit();\n    session.close();\n}\n</code></pre>\n\n<p>I tried some \"strategies\" within the <code>GeneratedValue</code> annotation but it just doesn't seem to work. Initializing <code>id</code> doesn't help either! (eg <code>Long id = 20L</code>).</p>\n\n<p>Could anyone shed some light?</p>\n\n<p><strong>EDIT 2:</strong> confirmed: messing with<code>@GeneratedValue(strategy = GenerationType.XXX)</code> doesn't solve it</p>\n\n<p><strong>SOLVED:</strong> recreating the database solved the problem</p>\n    ","a":"\n<p>Sometimes changes made to the model or to the ORM may not reflect accurately on the database even after an execution of <code>SchemaUpdate</code>.</p>\n\n<p>If the error actually seems to lack a sensible explanation, try recreating the database (or at least creating a new one) and scaffolding it with <code>SchemaExport</code>.</p>\n    "},{"t":"Calculated property with JPA / Hibernate","l":"http://stackoverflow.com/questions/2986318/calculated-property-with-jpa-hibernate","q":"\n\n<p>My Java bean has a childCount property. This property is <strong>not mapped to a database column</strong>. Instead, it should be <strong>calculated by the database with a <code>COUNT()</code> function</strong> operating on the join of my Java bean and its children. It would be even better if this property could be calculated on demand / \"lazily\", but this is not mandatory.</p>\n\n<p>In the worst case scenario, I can set this bean's property with HQL or the Criteria API, but I would prefer not to.</p>\n\n<p>The Hibernate <code>@Formula</code> annotation may help, but I could barely find any documentation.</p>\n\n<p>Any help greatly appreciated. Thanks.</p>\n    ","a":"\n<p>JPA doesn't offer any support for derived property so you'll have to use a provider specific extension. As you mentioned, <code>@Formula</code> is perfect for this when using Hibernate. You can use an SQL fragment:</p>\n\n<pre><code>@Formula(\"PRICE*1.155\")\nprivate float finalPrice;\n</code></pre>\n\n<p>Or even complex queries on other tables:</p>\n\n<pre><code>@Formula(\"(select min(o.creation_date) from Orders o where o.customer_id = id)\")\nprivate Date firstOrderDate;\n</code></pre>\n\n<p>Where <code>id</code> is the <code>id</code> of the current entity.</p>\n\n<p>The following blog post is worth the read: <a href=\"http://www.jroller.com/eyallupu/entry/hibernate_derived_properties_performance_and\" rel=\"nofollow noreferrer\">Hibernate Derived Properties - Performance and Portability</a>.</p>\n\n<p>Without more details, I can't give a more precise answer but the above link should be helpful.</p>\n\n<h3>See also</h3>\n\n<ul>\n<li>section <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/mapping.html#mapping-column\" rel=\"nofollow noreferrer\">5.1.22. Column and formula elements</a> (Hiberante Core documentation)</li>\n<li>section <a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e2785\" rel=\"nofollow noreferrer\">2.4.3.1. Formula</a> (Hibernate Annotations documentation)</li>\n</ul>\n    "},{"t":"Difference Between One-to-Many, Many-to-One and Many-to-Many?","l":"http://stackoverflow.com/questions/3113885/difference-between-one-to-many-many-to-one-and-many-to-many","q":"\n\n<p>Ok so this is probably a trivial question but I'm having trouble visualizing and understanding the differences and when to use each. I'm also a little unclear as to how concepts like uni-directional and bi-directional mappings affect the one-to-many/many-to-many relationships. I'm using Hibernate right now so any explanation that's ORM related will be helpful. </p>\n\n<p>As an example let's say I have the following set-up:</p>\n\n<pre><code>public class Person{\n    private Long personId;\n    private Set&lt;Skill&gt; skills;\n    //Getters and setters\n}\n\npublic class Skill{\n    private Long skillId;\n    private String skillName;\n    //Getters and setters\n}\n</code></pre>\n\n<p>So in this case what kind of mapping would I have? Answers to this specific example are definitely appreciated but I would also really like an overview of when to use either one-to-many and many-to-many and when to use a join table versus a join column and unidirectional versus bidirectional.</p>\n    ","a":"\n<p><strong>One-to-Many</strong>:   One Person Has Many Skills, a Skill is not reused between Person(s)</p>\n\n<ul>\n<li><strong>Unidirectional</strong>:    A Person can directly reference Skills via its Set</li>\n<li><strong>Bidirectional</strong>:     Each \"child\" Skill has a single pointer back up to the\nPerson (which is not shown in your code)</li>\n</ul>\n\n<p><strong>Many-to-Many</strong>:   One Person Has Many Skills, a Skill is reused between Person(s)</p>\n\n<ul>\n<li><strong>Unidirectional</strong>:    A Person can directly reference Skills via its Set</li>\n<li><strong>Bidirectional</strong>:     A Skill has a Set of Person(s) which relate to it.</li>\n</ul>\n\n<p>In a One-To-Many relationship, one object is the \"parent\" and one is the \"child\".  The parent controls the existence of the child.   In a Many-To-Many, the existence of either type is dependent on something outside the both of them (in the larger application context).</p>\n\n<p>Your subject matter (domain) should dictate whether or not the relationship is One-To-Many or Many-To-Many -- however, I find that making the relationship unidirectional or bidirectional is an engineering decision that trades off memory, processing, performance, etc.</p>\n\n<p>What can be confusing is that a Many-To-Many Bidirectional relationship does not need to be symmetric!  That is, a bunch of People could point to a skill, but the skill need not relate back to just those people.  Typically it would, but such symmetry is not a requirement. Take love, for example -- it is bi-directional (\"I-Love\", \"Loves-Me\"), but often asymmetric (\"I love her, but she doesn't love me\")!</p>\n\n<p>All of these are well supported by Hibernate and JPA.  Just remember that Hibernate or any other ORM doesn't give a hoot about maintaining symmetry when managing bi-directional many-to-many relationships...thats all up to the application.</p>\n    "},{"t":"Control the hibernate session(when to close it manually)","l":"http://stackoverflow.com/questions/4040761/control-the-hibernate-sessionwhen-to-close-it-manually","q":"\n\n<p>I am new in  hibernate,after read the hibernate api and tutorial,it seems that the session should closed when not used.</p>\n\n<p>Like this:</p>\n\n<pre><code>Session sess=getSession();\nTranscration tx=sess.beginTranscration();\n//do something using teh session\nsess.save(obj);\ntx.commit();\nsess.close;\n</code></pre>\n\n<p>I have no question when using it in a standlone application.\nHowever I am not sure when using in the web app.</p>\n\n<p>For example, I have a servlet: <code>TestServlet</code> to receive the parameters from the client, then I call a Manager to query something according to the parameters, just like this:</p>\n\n<pre><code>class TestServlet{\n  doGet(HttpServletRequset,httpServletResponse){\n    String para1=request.getParam...();\n    String para2=.....\n    new Manager().query(para1,para2);\n  }\n}\n\nclass Manager{\n  public String query(String pa1,String pa2){\n    Session=....// get the session\n    //do query using para1 and 1\n    session.close() //Here, I wonder if I should close it.\n  }\n}\n</code></pre>\n\n<p>Should I close the session in the query method?</p>\n\n<p>Since someone told me that session in hibernate is just like the connection in jdbc. So opening and closing it so frequently is the correct way?</p>\n\n<p>BTW, does the tx.commit() is required each time?</p>\n\n<p>Also what's the thread problem about using session in servlet, since I saw the session is not thread safe in api.</p>\n    ","a":"\n<blockquote>\n  <p>I am new in hibernate,after read the hibernate api and tutorial,it seems that the session should cloesd when not used.</p>\n</blockquote>\n\n<p>It should be closed when you're done with (but this can be done automatically for you as we'll see).</p>\n\n<blockquote>\n  <p>I have no question when using it in a standalone application. However I am not sure when using in the web app.</p>\n</blockquote>\n\n<p>Well, as explained in the section <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/transactions.html#transactions-basics-uow\">11.1.1. Unit of work</a> of the documentation, <em>the <strong>most common</strong> pattern in a multi-user client/server application is <strong>session-per-request</strong></em>.</p>\n\n<blockquote>\n  <p>For example, I have a servlet:TestServlet to recieve the parameters from the client,then I call a Manager to query something according to the parameters: just like this (...) Should I close the session in the query method?</p>\n</blockquote>\n\n<p>It all depends on how you obtain the session.</p>\n\n<ul>\n<li>if you use <code>sessionFactory.getCurrentSession()</code>, you'll obtain a \"current session\" which is bound to the lifecycle of the transaction and will be automatically flushed and closed when the transaction ends (commit or rollback).</li>\n<li>if you decide to use <code>sessionFactory.openSession()</code>, you'll have to manage the session yourself and to flush and close it \"manually\".</li>\n</ul>\n\n<p>To implement a <em>session-per-request</em> pattern, prefer the first approach (much easier and less verbose). Use the second approach to implement <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/transactions.html#transactions-basics-apptx\"><em>long conversations</em></a>. </p>\n\n<p>The wiki page <a href=\"http://community.jboss.org/wiki/Sessionsandtransactions\">Sessions and transactions</a> is a good complement to the documentation on this topic.</p>\n\n<blockquote>\n  <p>BTW, does the tx.commit() is required each time?</p>\n</blockquote>\n\n<p>You might want to read <a href=\"http://community.jboss.org/wiki/Non-transactionaldataaccessandtheauto-commitmode\">Non-transactional data access and the auto-commit mode</a> to clarify a few things but, to put it simply, your Hibernate code has to be executed within a transaction and I'd suggest to use explicit transaction boundaries (i.e. explicit <code>beginTransaction</code> and <code>commit</code>).</p>\n\n<blockquote>\n  <p>Also what's the thread problem about using session in servlet, since I saw the session is not thread safe in api.</p>\n</blockquote>\n\n<p>Just don't make it an instance variable of the Servlet and you won't have any problem.</p>\n\n<h3>References</h3>\n\n<ul>\n<li>Hibernate Core 3.3 Reference Guide\n\n<ul>\n<li><a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/transactions.html\">Chapter 11. Transactions and Concurrency</a></li>\n</ul></li>\n<li>Hibernate wiki\n\n<ul>\n<li><a href=\"http://community.jboss.org/wiki/Sessionsandtransactions\">Sessions and transactions</a> </li>\n<li><a href=\"http://community.jboss.org/wiki/Non-transactionaldataaccessandtheauto-commitmode\">Non-transactional data access and the auto-commit mode</a></li>\n</ul></li>\n</ul>\n    "},{"t":"Difference between JOIN and JOIN FETCH in Hibernate","l":"http://stackoverflow.com/questions/17431312/difference-between-join-and-join-fetch-in-hibernate","q":"\n\n<p>Please help me understand where to use a regular JOIN and where a JOIN FETCH.</p>\n\n<p>For example, if we have these two queries</p>\n\n<pre><code>FROM Employee emp\nJOIN emp.department dep\n</code></pre>\n\n<p>and</p>\n\n<pre><code>FROM Employee emp\nJOIN FETCH emp.department dep\n</code></pre>\n\n<p>Is there any difference between them? If yes, which one to use when?</p>\n    ","a":"\n<p>In this two queries, you are using JOIN to query all employees that have at least one department associated.</p>\n\n<p>But, the difference is: in the first query you are returning only the Employes for the Hibernate. In the second query, you are returning the Employes <strong>and</strong> all Departments associated. </p>\n\n<p>So, if you use the second query, you will not need to do a new query to hit the database again to see the Departments of each Employee.</p>\n\n<p>You can use the second query when you are sure that you will need the Department of each Employee. If you not need the Department, use the first query.</p>\n\n<p>I recomend read this link if you will need apply some WHERE condition (what you probably need): <a href=\"http://stackoverflow.com/questions/5816417/how-to-properly-express-jpql-join-fetch-with-where-clause-as-jpa-2-criteriaq\">How to properly express JPQL \"join fetch\" with \"where\" clause as JPA 2 CriteriaQuery?</a></p>\n\n<p><strong>Update</strong></p>\n\n<p>If you don't use <code>fetch</code> and the Departments continue to be returned, is because your mapping between Employee and Department (a <code>@OneToMany</code>) are setted with <code>FetchType.EAGER</code>. In this case, any HQL (with <code>fetch</code> or not) query with <code>FROM Employee</code> will bring all Departments. Remember that all mapping *ToOne (<code>@ManyToOne</code> and <code>@OneToOne</code>) are EAGER by default.</p>\n    "},{"t":"JPA Hibernate One-to-One relationship","l":"http://stackoverflow.com/questions/787698/jpa-hibernate-one-to-one-relationship","q":"\n\n<p>I have a one-to-one relationship but hibernatetool complains when generating the schema. Here's an example that shows the problem:</p>\n\n<pre><code>@Entity\npublic class Person {\n    @Id\n    public int id;\n\n    @OneToOne\n    public OtherInfo otherInfo;\n\n    rest of attributes ...\n}\n</code></pre>\n\n<p>Person has a one-to-one relationship with OtherInfo:</p>\n\n<pre><code>@Entity\npublic class OtherInfo {\n    @Id\n    @OneToOne(mappedBy=\"otherInfo\")\n    public Person person;\n\n    rest of attributes ...\n}\n</code></pre>\n\n<p>Person is owning side of OtherInfo. OtherInfo is the owned side so person uses <code>mappedBy</code> to specify the attribute name \"otherInfo\" in Person.</p>\n\n<p>I get the following error when using hibernatetool to generate the database schema:</p>\n\n<pre><code>org.hibernate.MappingException: Could not determine type for: Person, at table: OtherInfo, for columns: [org.hibernate.mapping.Column(person)]\n        at org.hibernate.mapping.SimpleValue.getType(SimpleValue.java:292)\n        at org.hibernate.mapping.SimpleValue.createIdentifierGenerator(SimpleValue.java:175)\n        at org.hibernate.cfg.Configuration.iterateGenerators(Configuration.java:743)\n        at org.hibernate.cfg.Configuration.generateDropSchemaScript(Configuration.java:854)\n        at org.hibernate.tool.hbm2ddl.SchemaExport.&lt;init&gt;(SchemaExport.java:128)\n        ...\n</code></pre>\n\n<p>Any idea why? Am I a doing something wrong or is this a Hibernate bug?</p>\n    ","a":"\n<p>JPA doesn't allow the <em>@Id</em> annotation on a <em>OneToOne</em> or <em>ManyToOne</em> mapping. What you are trying to do is one-to-one entity association <strong>with shared primary key</strong>. The simplest case is unidirectional one-to-one with shared key:</p>\n\n<pre><code>@Entity\npublic class Person {\n    @Id\n    private int id;\n\n    @OneToOne\n    @PrimaryKeyJoinColumn\n    private OtherInfo otherInfo;\n\n    rest of attributes ...\n}\n</code></pre>\n\n<p>The main problem with this is that JPA provides no support for shared primary key generation in <em>OtherInfo</em> entity. The classic book <a href=\"http://rads.stackoverflow.com/amzn/click/1932394885\" rel=\"nofollow noreferrer\">Java Persistence with Hibernate by Bauer and King</a> gives the following solution to the problem using Hibernate extension:</p>\n\n<pre><code>@Entity\npublic class OtherInfo {\n    @Id @GeneratedValue(generator = \"customForeignGenerator\")\n    @org.hibernate.annotations.GenericGenerator(\n        name = \"customForeignGenerator\",\n        strategy = \"foreign\",\n        parameters = @Parameter(name = \"property\", value = \"person\")\n    )\n    private Long id;\n\n    @OneToOne(mappedBy=\"otherInfo\")\n    @PrimaryKeyJoinColumn\n    public Person person;\n\n    rest of attributes ...\n}\n</code></pre>\n\n<p>Also, see <a href=\"http://en.wikibooks.org/wiki/Java_Persistence/Identity_and_Sequencing#Primary_Keys_through_OneToOne_Relationships\" rel=\"nofollow noreferrer\">here</a>.</p>\n    "},{"t":"Create session factory in Hibernate 4","l":"http://stackoverflow.com/questions/7986750/create-session-factory-in-hibernate-4","q":"\n\n<p>I'm having trouble generating a session factory in Hibernate 4. In Hibernate 3 I simple did:</p>\n\n<pre><code>org.hibernate.cfg.Configuration conf= HibernateUtil\n    .getLimsInitializedConfiguration(systemConfiguration\n.getHibernateconfFile());\n\nSessionFactory sf = conf.configure().buildSessionFactory();\n</code></pre>\n\n<p>Now I need to pass a ServiceRegistry class to buildSessionFactory, but the Javadocs are extremely vague on how to go about this. Any tips?</p>\n    ","a":"\n<p>Yes, they have deprecated the previous buildSessionFactory API, and it's quite easy to do well.. you can do something like this..</p>\n\n<p><strong>EDIT</strong> : ServiceRegistryBuilder is deprecated. you must use StandardServiceRegistryBuilder</p>\n\n<pre><code>public void testConnection() throws Exception {\n\n            logger.info(\"Trying to create a test connection with the database.\");\n            Configuration configuration = new Configuration();\n            configuration.configure(\"hibernate_sp.cfg.xml\");\n            StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());\n            SessionFactory sessionFactory = configuration.buildSessionFactory(ssrb.build());\n            Session session = sessionFactory.openSession();\n            logger.info(\"Test connection with the database created successfuly.\");\n    }\n</code></pre>\n\n<p>For more reference and in depth detail, you can check the hibernate's official test case at <a href=\"https://github.com/hibernate/hibernate-orm/blob/master/hibernate-testing/src/main/java/org/hibernate/testing/junit4/BaseCoreFunctionalTestCase.java\">https://github.com/hibernate/hibernate-orm/blob/master/hibernate-testing/src/main/java/org/hibernate/testing/junit4/BaseCoreFunctionalTestCase.java</a> function (buildSessionFactory()).</p>\n    "},{"t":"Hibernate Vs iBATIS","l":"http://stackoverflow.com/questions/1984548/hibernate-vs-ibatis","q":"\n\n<p>For our new product re-engineering, we are in the process of selecting the best framework from Java. As the consideration is to go for database agnostic approach for model, we are working on options between Struts + Spring with iBATIS or Hibernate. Please advice which is best as both offer persistence.</p>\n    ","a":"\n<p>Ibatis and Hibernate are quite different beasts.</p>\n\n<p>The way I tend to look at it is this: Hibernate works better if your view is more <em>object-centric</em>. If however you view is more <em>database-centric</em> then Ibatis is a much stronger choice.</p>\n\n<p>If you're in complete control of your schema and you don't have an extremely high throughput requirement then Hibernate can work quite well. The object model makes for fairly convenient code but at a <em>huge</em> complexity cost.</p>\n\n<p>If you're dealing with a \"legacy\" database schema where you need to write fairly complicated SQL queries then chances are Ibatis will work better.</p>\n\n<p>HQL (Hibernate Query Language) is another language you'll have to learn and even then you'll probably find cases where you <em>still</em> need to write SQL. What's more, chances are you will at some spend half a day figuring out the right combination of XML, properties, annotations, etc to get Hibernate to generate a performant SQL query.</p>\n\n<p>There is no universal \"A is better than B\" answer for this question.</p>\n    "},{"t":"Strange Jackson exception being thrown when serializing Hibernate object","l":"http://stackoverflow.com/questions/4362104/strange-jackson-exception-being-thrown-when-serializing-hibernate-object","q":"\n\n<p>Jackson is throwing a weird exception that I don't know how to fix. I'm using Spring, Hibernate and Jackson.</p>\n\n<p>I have already considered that lazy-loading is causing the problem, but I have taken measures to tell Jackson to NOT process various properties as follows:</p>\n\n<pre><code>@JsonIgnoreProperties({ \"sentMessages\", \"receivedMessages\", \"educationFacility\" })\npublic class Director extends UserAccount implements EducationFacilityUser {\n   ....\n}\n</code></pre>\n\n<p>I have done the same thing for all the other UserAccount subclasses as well.</p>\n\n<p>Here's the exception being thrown:</p>\n\n<pre><code>org.codehaus.jackson.map.JsonMappingException: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: java.util.ArrayList[46]-&gt;jobprep.domain.educationfacility.Director_$$_javassist_2[\"handler\"])\n    at org.codehaus.jackson.map.ser.StdSerializerProvider$1.serialize(StdSerializerProvider.java:62)\n    at org.codehaus.jackson.map.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:268)\n    at org.codehaus.jackson.map.ser.BeanSerializer.serializeFields(BeanSerializer.java:146)\n    at org.codehaus.jackson.map.ser.BeanSerializer.serialize(BeanSerializer.java:118)\n    at org.codehaus.jackson.map.ser.ContainerSerializers$IndexedListSerializer.serializeContents(ContainerSerializers.java:236)\n    at org.codehaus.jackson.map.ser.ContainerSerializers$IndexedListSerializer.serializeContents(ContainerSerializers.java:189)\n    at org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer.serialize(ContainerSerializers.java:111)\n    at org.codehaus.jackson.map.ser.StdSerializerProvider._serializeValue(StdSerializerProvider.java:296)\n    at org.codehaus.jackson.map.ser.StdSerializerProvider.serializeValue(StdSerializerProvider.java:224)\n    at org.codehaus.jackson.map.ObjectMapper.writeValue(ObjectMapper.java:925)\n    at org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.writeInternal(MappingJacksonHttpMessageConverter.java:153)\n</code></pre>\n\n<p>Suggestions on how I can get more info to see what's causing this? Anyone know how to fix it?</p>\n\n<p><strong>EDIT:</strong> I discovered that getHander() and other get*() methods exist on the proxy object. GRR!! Is there any way I can tell Jackson to not process anything on the proxy, or am I sol? This is really weird because the method that spits out the JSON only crashes under certain circumstances, not all the time. Nonetheless, it's due to the get*() methods on the proxy object.</p>\n\n<p>Aside: Proxies are evil. They disrupt Jackson, equals() and many other parts of regular Java programming. I am tempted to ditch Hibernate altogether :/</p>\n    ","a":"\n<p>It's not ideal, but you could disable Jackson's auto-discovery of JSON properties, using <code>@JsonAutoDetect</code> at the class level. This would prevent it from trying to handle the Javassist stuff (and failing).</p>\n\n<p>This means that you then have to annotate each getter manually (with <code>@JsonProperty</code>), but that's not necessarily a bad thing, since it keeps things explicit.</p>\n    "},{"t":"Case-insensitive equals using Hibernate Criteria","l":"http://stackoverflow.com/questions/624604/case-insensitive-equals-using-hibernate-criteria","q":"\n\n<p>I've seen Restrictions.ilike('property', '%value%'), but would like to generate SQL like:  lower(property) = 'value'.  Any ideas?</p>\n\n<p>I used:  </p>\n\n<pre><code>Restrictions.eq(\"email\", email).ignoreCase()\n</code></pre>\n\n<p>since Expression is deprecated.  The SimpleExpression will call toLowerCase() on the value, so it is not necessary to do it beforehand.</p>\n\n<p>See:  <a href=\"http://viewvc.jboss.org/cgi-bin/viewvc.cgi/hibernate/core/trunk/core/src/main/java/org/hibernate/criterion/SimpleExpression.java?view=markup\" rel=\"nofollow noreferrer\">SimpleExpression source</a></p>\n    ","a":"\n<p>Be careful of using ilike because it would allow someone to enter things like \"test%\" and match.  I use the following to do a case-insensitive equal in one app:</p>\n\n<pre><code>...\nCriteria crit=session.createCriteria(Event.class);\ncrit.add(Expression.eq(\"rsvpCode\",\"test1\").ignoreCase());\n...\n</code></pre>\n    "},{"t":"session.connection() deprecated on Hibernate?","l":"http://stackoverflow.com/questions/3526556/session-connection-deprecated-on-hibernate","q":"\n\n<p>We need to be able to get the associated <code>java.sql.Connection</code> of a hibernate session. No other connection will work, as this connection may be associated with a running transaction. </p>\n\n<p>If session.connection() is now deprecated, how am I supposed to do that?</p>\n    ","a":"\n<p>You now have to use the Work API:</p>\n\n<pre><code>session.doWork(\n    new Work() {\n        public void execute(Connection connection) throws SQLException \n        { \n            doSomething(connection); \n        }\n    }\n);\n</code></pre>\n\n<p>Or, in Java 8 :</p>\n\n<pre><code>session.doWork(connection -&gt; doSomething(connection)); \n</code></pre>\n    "},{"t":"IN-clause in HQL or Java Persistence Query Language","l":"http://stackoverflow.com/questions/4828049/in-clause-in-hql-or-java-persistence-query-language","q":"\n\n<p>I have the following parametrised JPA, or Hibernate, query:</p>\n\n<pre><code>SELECT entity FROM Entity entity WHERE name IN (?)\n</code></pre>\n\n<p>I want to pass the parameter as an ArrayList&lt;String&gt;, is this possible? Hibernate current tells me, that</p>\n\n<pre><code>java.lang.ClassCastException: java.util.ArrayList cannot be cast to java.lang.String\n</code></pre>\n\n<p>Is this possible at all?</p>\n\n<p><strong>ANSWER</strong>: Collections as parameters only work with named parameters like \"<code>:name</code>\", not with JDBC style parameters like \"<code>?</code>\".</p>\n    ","a":"\n<p>Are you using Hibernate's <code>Query</code> object, or JPA? For JPA, it should work fine:</p>\n\n<pre><code>String jpql = \"from A where name in (:names)\";\nQuery q = em.createQuery(jpql);\nq.setParameter(\"names\", l);\n</code></pre>\n\n<p>For Hibernate's, you'll need to use the setParameterList:</p>\n\n<pre><code>String hql = \"from A where name in (:names)\";\nQuery q = s.createQuery(hql);\nq.setParameterList(\"names\", l);\n</code></pre>\n    "},{"t":"Retrieving all rows of a table without HQL?","l":"http://stackoverflow.com/questions/9084143/retrieving-all-rows-of-a-table-without-hql","q":"\n\n<p>I am using Hibernate 4 and would like to simply list all rows of a table. All solutions I found suggest using something like \"from tablename\", but I would like to avoid hardcoding tablenames in strings.</p>\n    ","a":"\n<p>You can use </p>\n\n<pre><code>session.createCriteria(MyEntity.class).list();\n</code></pre>\n\n<p>for example.</p>\n    "},{"t":"Is Hibernate an overkill for an Android application? [duplicate]","l":"http://stackoverflow.com/questions/4257374/is-hibernate-an-overkill-for-an-android-application","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/371538/any-good-orm-tools-for-android-development\" dir=\"ltr\">Any good ORM tools for Android development? [closed]</a>\n                <span class=\"question-originals-answer-count\">\n                    17 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I'm looking for a good ORM for my android application and at first glance it seems like for a mobile device I would prefer to use something simpler maybe. The thing is I'm just assuming here with no real evidence, so I thought I would ask the community's opinion (maybe there's is someone that has been through the experience). It is a fairly large(for mobile) application and will be run on a dedicated tablet.</p>\n\n<p>What does everyone else think ? Is Hibernate too much for an android application ? Will there be performance problems ?</p>\n\n<p>What would you use instead if you think it is too much ?</p>\n\n<p>I am aware there are other questions asking for alternatives, but I decided to ask since most of those questions simply assumed it was an overkill and asked for other options and I started wondering \"Is it really and overkill ? Why ?\" Due to my lack of experience I simply think it it, but can't really provide an answer if I'm asked to explain why. Is it performance ? Is it too much configuration (Which I don't mind) ? </p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>I'd like to recommend my <a href=\"http://ormlite.com/\">ORMLite</a> package.  It was designed to be <em>much</em> less heavy compared to Hibernate (and iBatis).  I think that Hibernate <em>is</em> too much for Android applications -- especially considering the size of the code and the number of dependencies.  </p>\n\n<blockquote>\n  <p><a href=\"http://ormlite.com/sqlite_java_android_orm.shtml\">http://ormlite.com/sqlite_java_android_orm.shtml</a></p>\n</blockquote>\n\n<p>The Android port of ORMLite makes direct calls to the Android database API.  A number of applications have been delivered using ORMLite successfully.</p>\n\n<p>Hibernate provides a number of features that cannot be supported by the Android database calls so you will be paying for complexity that you cannot even use.  I'm also not sure it has a native Android backend.  Using SQLite over JDBC is not officially supported by Android and I was unable to get it to work reliably.</p>\n    "},{"t":"How to get distinct results in hibernate with joins and row-based limiting (paging)?","l":"http://stackoverflow.com/questions/300491/how-to-get-distinct-results-in-hibernate-with-joins-and-row-based-limiting-pagi","q":"\n\n<p>I'm trying to implement paging using row-based limiting (for example: <code>setFirstResult(5)</code> and <code>setMaxResults(10)</code>) on a Hibernate Criteria query that has joins to other tables.</p>\n\n<p>Understandably, data is getting cut off randomly; and the reason for that is explained <a href=\"https://developer.jboss.org/wiki/HibernateFAQ-AdvancedProblems#jive_content_id_Hibernate_does_not_return_distinct_results_for_a_query_with_outer_join_fetching_enabled_for_a_collection_even_if_I_use_the_distinct_keyword\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>As a solution, the page suggests using a \"second sql select\" instead of a join. </p>\n\n<p>How can I convert my existing criteria query (which has joins using <code>createAlias()</code>) to use a nested select instead?</p>\n    ","a":"\n<p>You can achieve the desired result by requesting a list of distinct ids instead of a list of distinct hydrated objects.</p>\n\n<p>Simply add this to your criteria:</p>\n\n<pre><code>criteria.setProjection(Projections.distinct(Projections.property(\"id\")));\n</code></pre>\n\n<p>Now you'll get the correct number of results according to your row-based limiting. The reason this works is because the projection will perform the distinctness check <strong>as part of</strong> the sql query, instead of what a ResultTransformer does which is to filter the results for distinctness <strong>after</strong> the sql query has been performed.</p>\n\n<p>Worth noting is that instead of getting a list of objects, you will now get a list of ids, which you can use to hydrate objects from hibernate later.</p>\n    "},{"t":"In Hibernate Validator 4.1+, what is the difference between @NotNull, @NotEmpty, and @NotBlank?","l":"http://stackoverflow.com/questions/17137307/in-hibernate-validator-4-1-what-is-the-difference-between-notnull-notempty","q":"\n\n<p>I can't seem to be able to find a summary that distinguishes the difference between these three annotations.</p>\n    ","a":"\n<p><code>@NotNull</code>: The CharSequence, Collection, Map or Array object <strong>is not null</strong>, but <em>can</em> be empty.<br>\n<code>@NotEmpty</code>: The CharSequence, Collection, Map or Array object is not null <strong>and size &gt; 0</strong>.<br>\n<code>@NotBlank</code>: The string is not null <strong>and the trimmed length is greater than zero</strong>.   </p>\n\n<p>To help you understand, let's look into how these constraints are defined and carried out (I'm using version 4.1):</p>\n\n<ol>\n<li><p>The <code>@NotNull</code> constraint is defined as:  </p>\n\n<pre><code>@Constraint(validatedBy = {NotNullValidator.class})  \n</code></pre>\n\n<p>This class has an <code>isValid</code> method defined as:  </p>\n\n<pre><code>public boolean isValid(Object object, ConstraintValidatorContext constraintValidatorContext) {\n return object != null;  \n}\n</code></pre></li>\n<li><p>The <code>@NotEmpty</code> constraint is defined as:  </p>\n\n<pre><code>@NotNull  \n@Size(min = 1)    \n</code></pre>\n\n<p>So this constraint <em>uses</em> the <code>@NotNull</code> constraint above, <strong>and</strong> <code>@Size</code> whose definition differs based on the object but should be self explanitory.  </p></li>\n<li><p>Finally, the <code>@NotBlank</code> constraint is defined as:  </p>\n\n<pre><code>@NotNull  \n@Constraint(validatedBy = {NotBlankValidator.class})        \n</code></pre>\n\n<p>So this constraint also uses the <code>@NotNull</code> constraint, but also constrains with the NotBlankValidator class. This class has an <code>isValid</code> method defined as:     </p>\n\n<pre><code>if ( charSequence == null ) {  //curious \n  return true;   \n}   \nreturn charSequence.toString().trim().length() &gt; 0;  \n</code></pre>\n\n<p>Interestingly, this method returns true if the string is null, but false if and only if the length of the trimmed string is 0. It's ok that it returns true if it's null because, as I mentioned, the <code>@NotEmpty</code> definition also requires <code>@NotNull</code>.  </p></li>\n</ol>\n\n<p>Here are a few examples:  </p>\n\n<ol>\n<li><p>String name = null;<br>\n    <code>@NotNull</code>: false<br>\n    <code>@NotEmpty</code>: false<br>\n    <code>@NotBlank</code>: false  </p></li>\n<li><p>String name = \"\";<br>\n    <code>@NotNull</code>: <strong>true</strong><br>\n    <code>@NotEmpty</code>: false<br>\n    <code>@NotBlank</code>: false  </p></li>\n<li><p>String name = \" \";<br>\n    <code>@NotNull</code>: <strong>true</strong><br>\n    <code>@NotEmpty</code>: <strong>true</strong><br>\n    <code>@NotBlank</code>: false    </p></li>\n<li><p>String name = \"Great answer!\";<br>\n    <code>@NotNull</code>: <strong>true</strong><br>\n    <code>@NotEmpty</code>: <strong>true</strong><br>\n    <code>@NotBlank</code>: <strong>true</strong> </p></li>\n</ol>\n    "},{"t":"org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set","l":"http://stackoverflow.com/questions/26548505/org-hibernate-hibernateexception-access-to-dialectresolutioninfo-cannot-be-null","q":"\n\n<p>I am trying run a spring-boot application which uses hibernate via spring-jpa, but i am getting this error:</p>\n\n<pre><code>Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set\n        at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:104)\n        at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:71)\n        at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:205)\n        at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:111)\n        at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:234)\n        at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)\n        at org.hibernate.cfg.Configuration.buildTypeRegistrations(Configuration.java:1885)\n        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1843)\n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:850)\n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:843)\n        at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.withTccl(ClassLoaderServiceImpl.java:398)\n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:842)\n        at org.hibernate.jpa.HibernatePersistenceProvider.createContainerEntityManagerFactory(HibernatePersistenceProvider.java:152)\n        at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:336)\n        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:318)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1613)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1550)\n        ... 21 more\n</code></pre>\n\n<p>my pom.xml file is this:</p>\n\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;1.1.8.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;\n       &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n\n<p>my hibernate configuration is that (the dialect configuration is in the last method from this class):</p>\n\n<pre><code>@Configuration\n@EnableTransactionManagement\n@ComponentScan({ \"com.spring.app\" })\npublic class HibernateConfig {\n\n   @Bean\n   public LocalSessionFactoryBean sessionFactory() {\n      LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();\n\n      sessionFactory.setDataSource(restDataSource());\n      sessionFactory.setPackagesToScan(new String[] { \"com.spring.app.model\" });\n      sessionFactory.setHibernateProperties(hibernateProperties());\n\n      return sessionFactory;\n   }\n\n   @Bean\n   public DataSource restDataSource() {\n      BasicDataSource dataSource = new BasicDataSource();\n\n      dataSource.setDriverClassName(\"org.postgresql.Driver\");\n      dataSource.setUrl(\"jdbc:postgresql://localhost:5432/teste?charSet=LATIN1\");\n      dataSource.setUsername(\"klebermo\");\n      dataSource.setPassword(\"123\");\n\n      return dataSource;\n   }\n\n   @Bean\n   @Autowired\n   public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {\n      HibernateTransactionManager txManager = new HibernateTransactionManager();\n      txManager.setSessionFactory(sessionFactory);\n      return txManager;\n   }\n\n   @Bean\n   public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {\n      return new PersistenceExceptionTranslationPostProcessor();\n   }\n\n   Properties hibernateProperties() {\n      return new Properties() {\n         /**\n         * \n         */\n        private static final long serialVersionUID = 1L;\n\n        {\n            setProperty(\"hibernate.hbm2ddl.auto\", \"create\");\n            setProperty(\"hibernate.show_sql\", \"false\");\n            setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\n         }\n      };\n   }\n}\n</code></pre>\n\n<p>what I am doing wrong here?</p>\n    ","a":"\n<p>First remove all of your configuration Spring Boot will start it for you. If you really need a <code>SessionFactory</code> instead of an <code>EntityManagerFactory</code> add a <code>HibernateJpaSessionFactoryBean</code>. </p>\n\n<p>Make sure you have an <code>application.properties</code> in your classpath and add the following properties.</p>\n\n<pre><code>spring.datasource.driverClassName=org.postgresql.Driver\nspring.datasource.url=jdbc:postgresql://localhost:5432/teste?charSet=LATIN1\nspring.datasource.username=klebermo\nspring.datasource.password=123\n\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.show-sql=false\nspring.jpa.hibernate.ddl-auto=create\n</code></pre>\n\n<p>Now if you really need access to a <code>SessionFactory</code> and that is basically for the same datasource you can do the following (Which is also docmented <a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#\">here</a> although for XML not JavaConfig).</p>\n\n<pre><code>@Configuration        \npublic class HibernateConfig {\n\n    @Bean\n    public HibernateJpaSessionFactoryBean sessionFactory(EntityManagerFactory emf) {\n         HibernateJpaSessionFactoryBean factory = new HibernateJpaSessionFactoryBean();\n         factory.setEntityManagerFactory(emf);\n         return factory;\n    }\n}\n</code></pre>\n\n<p>That way you have both an <code>EntityManagerFactory</code> and a <code>SessionFactory</code>.</p>\n\n<p>Assuming you have an class with a <code>main</code> method with <code>@EnableAutoConfiguration</code> you don't need the <code>@EnableTransactionManagement</code> annotation as that will be enabled by Spring Boot for you. A basic application class in the <code>com.spring.app</code> package should be enough.</p>\n\n<pre><code>@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic class Application {\n\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n\n} \n</code></pre>\n\n<p>Something like that should be enough to have all your classes (including entities and Spring Data based repositories detected).</p>\n\n<p>I would also suggest removing the <code>commons-dbcp</code> dependency as that would allow Spring Boot to configure the faster and more robust <a href=\"http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html\"><code>tomcat-jdbc</code></a> implemenation.</p>\n    "},{"t":"Does Java have a using statement?","l":"http://stackoverflow.com/questions/2016299/does-java-have-a-using-statement","q":"\n\n<p>Does Java have a using statement that can be used when opening a session in hibernate?</p>\n\n<p>In C# it is something like:</p>\n\n<pre><code>using (var session = new Session())\n{\n\n\n}\n</code></pre>\n\n<p>So the object goes out of scope and closes automatically.</p>\n    ","a":"\n<p>Java 7 introduced <a href=\"http://www.infoq.com/news/2010/08/arm-blocks\" rel=\"nofollow noreferrer\">Automatic Resource Block Management</a> which brings this feature to the Java platform. Prior versions of Java didn't have anything resembling <code>using</code>.</p>\n\n<p>As an example, you can use any variable implementing <code>java.lang.AutoCloseable</code> in the following way:</p>\n\n<pre><code>try(ClassImplementingAutoCloseable obj = new ClassImplementingAutoCloseable())\n{\n    ...\n}\n</code></pre>\n\n<p>Java's <code>java.io.Closeable</code> interface, implemented by streams, automagically extends <code>AutoCloseable</code>, so you can already use streams in a <code>try</code> block the same way you would use them in a C# <code>using</code> block. This is equivalent to C#'s <code>using</code>.</p>\n\n<p>As of <a href=\"http://docs.jboss.org/hibernate/orm/5.0/javadocs/index.html?org/hibernate/internal/SessionImpl.html\" rel=\"nofollow noreferrer\">version 5.0, Hibernate Sessions implement <code>AutoCloseable</code></a> and can be auto-closed in ARM blocks. In previous versions of Hibernate <a href=\"http://docs.jboss.org/hibernate/orm/4.3/javadocs/index.html?org/hibernate/internal/SessionImpl.html\" rel=\"nofollow noreferrer\">Session did not implement <code>AutoCloseable</code></a>. So you'll need to be on Hibernate &gt;= 5.0 in order to use this feature.</p>\n    "},{"t":"Mapping postgreSQL JSON column to Hibernate value type","l":"http://stackoverflow.com/questions/15974474/mapping-postgresql-json-column-to-hibernate-value-type","q":"\n\n<p>I have a table with a column of type json in my postgreSQL DB (9.2). I have a hard time to map this column to a JPA2 Entity field type. </p>\n\n<p>I tried to use String but when I save the entity I get an exception that it can't convert character varying to json. </p>\n\n<p>What is the correct value type to use when dealing with a JSON column?</p>\n\n<pre><code>@Entity\npublic class MyEntity {\n\n    private String jsonPayload; // this maps to a json column\n\n    public MyEntity() {\n    }\n}\n</code></pre>\n\n<p>A simple workaround would be to define a text column. </p>\n    ","a":"\n<p><a href=\"https://github.com/pgjdbc/pgjdbc/issues/265\">See PgJDBC bug #265</a>.</p>\n\n<p>PostgreSQL is excessively, annoyingly strict about data type conversions. It won't implicitly cast <code>text</code> even to text-like values such as <code>xml</code> and <code>json</code>.</p>\n\n<p>The strictly correct way to solve this problem is to write a custom Hibernate mapping type that uses the JDBC <code>setObject</code> method. This can be a fair bit of hassle, so you might just want to make PostgreSQL less strict by creating a weaker cast.</p>\n\n<p>As noted by @markdsievers in the comments and <a href=\"http://www.pateldenish.com/2013/05/inserting-json-data-into-postgres-using-jdbc-driver.html\">this blog post</a>, the original solution in this answer bypasses JSON validation. So it's not really what you want. It's safer to write:</p>\n\n<pre><code>CREATE OR REPLACE FUNCTION json_intext(text) RETURNS json AS $$\nSELECT json_in($1::cstring); \n$$ LANGUAGE SQL IMMUTABLE;\n\nCREATE CAST (text AS json) WITH FUNCTION json_intext(text) AS IMPLICIT;\n</code></pre>\n\n<p><code>AS IMPLICIT</code> tells PostgreSQL it can convert without being explicitly told to, allowing things like this to work:</p>\n\n<pre><code>regress=# CREATE TABLE jsontext(x json);\nCREATE TABLE\nregress=# PREPARE test(text) AS INSERT INTO jsontext(x) VALUES ($1);\nPREPARE\nregress=# EXECUTE test('{}')\nINSERT 0 1\n</code></pre>\n\n<p>Thanks to @markdsievers for pointing out the issue.</p>\n    "},{"t":"What are detached, persistent and transient objects in hibernate?","l":"http://stackoverflow.com/questions/2573739/what-are-detached-persistent-and-transient-objects-in-hibernate","q":"\n\n<p>What are detached, persistent and transient objects in hibernate? Please explain with an example.</p>\n    ","a":"\n<p>A <code>new</code> instance of a a persistent class which is not associated with a <code>Session</code>, has no representation in the database and no identifier value is considered <strong><em>transient</em></strong> by Hibernate: </p>\n\n<pre><code>Person person = new Person();\nperson.setName(\"Foobar\");\n// person is in a transient state\n</code></pre>\n\n<p>A <strong><em>persistent</em></strong> instance has a representation in the database, an identifier value and is associated with a <code>Session</code>. You can make a transient instance <strong><em>persistent</em></strong> by associating it with a <code>Session</code>:</p>\n\n<pre><code>Long id = (Long) session.save(person);\n// person is now in a persistent state\n</code></pre>\n\n<p>Now, if we <code>close</code> the Hibernate <code>Session</code>, the persistent instance will become a <strong><em>detached</em></strong> instance: it isn't attached to a <code>Session</code> anymore (but can still be modified and reattached to a new <code>Session</code> later though).</p>\n\n<p>All this is clearly explained  is the whole <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/objectstate.html\" rel=\"nofollow noreferrer\">Chapter 10. Working with objects</a> of the Hibernate documentation that I'm only paraphrasing above. Definitely a must read.</p>\n    "},{"t":"Why does Hibernate require no argument constructor?","l":"http://stackoverflow.com/questions/2935826/why-does-hibernate-require-no-argument-constructor","q":"\n\n<blockquote>\n  <p>The no-argument constructor is a\n  requirement (tools like Hibernate use\n  reflection on this constructor to\n  instantiate objects).</p>\n</blockquote>\n\n<p>I got this hand-wavy answer but could somebody explain further? Thanks</p>\n    ","a":"\n<p>Hibernate, and code in general that creates objects via reflection use <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/Class.html#newInstance()\" rel=\"nofollow noreferrer\"><code>Class&lt;T&gt;.newInstance()</code></a> to create a new instance of your classes. This method requires a public no-arg constructor to be able to instantiate the object. For most use cases, providing a no-arg constructor is not a problem.</p>\n\n<p>There are hacks based on serialization that can work around not having a no-arg constructor, since serialization uses jvm magic to create objects without invoking the constructor. But this is not available across all VMs. For example, <a href=\"http://xstream.codehaus.org/faq.html\" rel=\"nofollow noreferrer\">XStream</a> can create instances of objects that don't have a public no-arg constructor, but only by running in a so-called \"enhanced\" mode which is available only on certain VMs. (See the link for details.) Hibernate's designers surely chose to maintain compatibility with all VMs and so avoids such tricks, and uses the officially supported reflection method <code>Class&lt;T&gt;.newInstance()</code> requiring a no-arg constructor.</p>\n    "},{"t":"When and how to use hibernate second level cache?","l":"http://stackoverflow.com/questions/7058843/when-and-how-to-use-hibernate-second-level-cache","q":"\n\n<p>I have trouble understanding when hibernate hits the second level cache and when does it invalidate the cache.</p>\n\n<p>This is what I currently understand:</p>\n\n<ul>\n<li>Second level cache stores entities between sessions, scope is the SessionFactory</li>\n<li>You have to tell which entities to cache, no entity will get cached by default</li>\n<li>Query cache stores results of queries in the cache.</li>\n</ul>\n\n<p>What I don't understand is </p>\n\n<ul>\n<li>When does hibernate hit this cache? </li>\n<li>Let's say I've set up the second level cache but not the query caching. I want to cache my customers, there's 50000 of them. In what ways can I retrieve the customers from the cache? </li>\n<li>I assume I can get them by id from cache. That would be easy but also not worthy of caching. But what if I want to do some calculation with all my customers. Let's say I want to show a list of the customers then how would I access them? </li>\n<li>How would I get all my customers if query caching is disabled? </li>\n<li>What would happen if someone updated one of the customers? \n\n<ul>\n<li>Would that customer get invalidated in the cache or would all customers get invalidated? </li>\n</ul></li>\n</ul>\n\n<p>Or am I thinking caching totally wrong? What would be more appropriate uses of second level cache in that case? The hibernate documentation is not at all clear how the cache works in reality. There are only instructions on how to get it set up.</p>\n\n<p><strong>Update:</strong>\nSo I've come to understand that second level cache(without query cache) would be good for loading data by id's. For example I have user object that I want to check for permissions in every request in a web application. Would this be a good case to reduce database access by caching the user in the second level cache? Like I would store the user id in the session or wherever and when I need to check for permissions I would load the user by it's id and check permissions.</p>\n    ","a":"\n<p>First of all, let's talk about process level cache (or 2nd level cache as they call it in Hibernate). To make it work, you should</p>\n\n<ol>\n<li>configure cache provider</li>\n<li>tell hibernate what entities to cache (right in hbm.xml file if you use this kind of mapping). </li>\n</ol>\n\n<p>You tell to the cache provider how many objects it should store and when/why they should be invalidated. So let's say you have a Book and an Author entities, each time you're getting them from the DB, only those that are not in cache will be selected from actually DB. This increases performance significantly. It's useful when:</p>\n\n<ul>\n<li>You write to the database only via Hibernate (because it needs a way to know when to change or invalidate entities in the cache)</li>\n<li>You read objects often</li>\n<li>You have a single node, and you don't have replication. Otherwise you'll need to replicate the cache itself (use distributed caches like JGroups) which adds more complexity, and it doesn't scale as good as share-nothing apps.</li>\n</ul>\n\n<p>So when does cache work?</p>\n\n<ul>\n<li>When you <code>session.get()</code> or <code>session.load()</code> the object that was previously selected and resides in cache. Cache is a storage where ID is the key and the properties are the values. So only when there is a possibility to search by ID you could eliminate hitting the DB.</li>\n<li>When your associations are lazy-loaded (or eager-loaded with selects instead of joins)</li>\n</ul>\n\n<p>But it doesn't work when:</p>\n\n<ul>\n<li>If you don't select by ID. Again - 2nd level cache stores a map of entities' IDs to other properties (it doesn't actually store objects, but the data itself), so if your lookup looks like this: <code>from Authors where name = :name</code>, then you don't hit cache.</li>\n<li>When you use HQL (even if you use <code>where id = ?</code>). </li>\n<li>If in your mapping you set <code>fetch=\"join\"</code>, this means that to load associations joins will be used everywhere instead of separate select statements. Process level cache works on children objects only if <code>fetch=\"select\"</code> is used.</li>\n<li>Even if you have <code>fetch=\"select\"</code> but then in HQL you use joins to select associations - those joins will be issued right away and they will overwrite whatever you specified in hbm.xml or annotations.</li>\n</ul>\n\n<p>Now, about Query Cache. You should note that it's not a separate cache, it's an addition to the process level cache. Let's say you have a Country entity. It's static, so you know that each time there will be the same result set when you say <code>from Country</code>. This is a perfect candidate for query cache, it will store a list of <em>IDs</em> in itself and when you next time select all countries, it will return this list to the process level cache and the latter, in turn, will return objects for each ID as these objects are stored already in the 2nd level cache.\nQuery cache is invalidated each time anything related to the entity changes. So let's say you configured <code>from Authors</code> to be placed into a Query Cache. It won't be effective as Author changes often. So you should use Query Cache only for more or less static data.</p>\n    "},{"t":"Hibernate - Batch update returned unexpected row count from update: 0 actual row count: 0 expected: 1","l":"http://stackoverflow.com/questions/2743130/hibernate-batch-update-returned-unexpected-row-count-from-update-0-actual-row","q":"\n\n<p>I get following hibernate error. I am able to identify the function which causes the issue. Unfortunately there are several DB calls in the function. I am unable to find the line which causes the issue since hibernate flush the session at the end of the transaction. The below mentioned hibernate error looks like a general error. it doesn't even mentioned which Bean causes the issue. Anyone familiar with this hibernate error? Looking forward your help.</p>\n\n<p>Thanks in advance.</p>\n\n<p>Sujee.</p>\n\n<pre><code>org.hibernate.StaleStateException: Batch update returned unexpected row count from update: 0 actual row count: 0 expected: 1\n        at org.hibernate.jdbc.BatchingBatcher.checkRowCount(BatchingBatcher.java:93)\n        at org.hibernate.jdbc.BatchingBatcher.checkRowCounts(BatchingBatcher.java:79)\n        at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:58)\n        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:195)\n        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:235)\n        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:142)\n        at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:297)\n        at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)\n        at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:985)\n        at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:333)\n        at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)\n        at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:584)\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransacti\nonManager.java:500)\n        at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManag\ner.java:473)\n        at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(Transaction\nAspectSupport.java:267)\n        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176)\n</code></pre>\n    ","a":"\n<p>Without code and mappings for your transactions, it'll be next to impossible to investigate the problem.</p>\n\n<p>However, to get a better handle as to what causes the problem, try the following:</p>\n\n<ul>\n<li>In your hibernate configuration, set hibernate.show_sql to true. This should show you the SQL that is executed and causes the problem.</li>\n<li>Set the log levels for Spring and Hibernate to DEBUG, again this will give you a better idea as to which line causes the problem.</li>\n<li>Create a unit test which replicates the problem without configuring a transaction manager in Spring. This should give you a better idea of the offending line of code.</li>\n</ul>\n\n<p>Hope that helps.</p>\n    "},{"t":"Caching with Hibernate + Spring - some Questions!","l":"http://stackoverflow.com/questions/5405417/caching-with-hibernate-spring-some-questions","q":"\n\n<p>Im working on developing a webapplication with Spring 3 and Hibernate 3.6. At the moment I try to understand how Caching with Spring and Hibernate works. I found some sources about Caching with Hibernate and some about Spring and I try to bring my informations together now. I still got some questions to both frameworks and Id be glad if someone could answer them or tell me if the facts listed here are correct.</p>\n\n<p>Most of the time, short answers (yes/no) would be sufficient. I think that this list can be useful for others too, who want to understand how caching with spring and hibernate works.</p>\n\n<p><code>General</code></p>\n\n<p><strong>1)</strong> Hibernate supports the following Caches: 1st Level Cache, 2nd Level Cache, Query Cache</p>\n\n<p><strong>2)</strong> Spring itself supports the following Caching possibilities: just Method Caching </p>\n\n<p><code>1st Level Cache</code></p>\n\n<p><strong>3)</strong> The 1st Level Cache is part of EVERY Hibernate application. </p>\n\n<p><strong>4)</strong> The 1st Level Cache is created for EVERY hibernate-session. </p>\n\n<p><strong>5)</strong> What is saved in the 1st Level Cache? Objects or just the values of their properties? queries and their results?</p>\n\n<p><code>2nd Level Cache</code></p>\n\n<p><strong>6)</strong> I found out: the 2nd Level Cache is used ONCE per application. isn't that false? isn't it used ONCE per sessionfactory? and: multiple sessionfactorys = multiple 2nd level caches possible?</p>\n\n<p><strong>7)</strong> what is saved in the 2nd Level Cache: in my opinion just the values belonging to one record, not the objects itself.</p>\n\n<p><strong>8)</strong> when storing values from one record in 2nd Level Cache, its possible to store related values (from objects connected over a foreign key) with it too?</p>\n\n<p><strong>9)</strong> when updating the values of one object in the 2nd level cache, its possible to update the values of objects connected with it in the cache too?</p>\n\n<p><strong>10)</strong> when values of an object are changing, how can I update the 2nd level cache? flush? can I just update a part of the cache or must the whole cache be updated?</p>\n\n<p><strong>11)</strong> where does the 2nd level cache make sense and where doesnt it?</p>\n\n<p><strong>12)</strong> the Cache Mode: does each cache mode provide a different strategy of caching? for example with cache mode \"read only\" no synchronization of database and cache is ever necessary? do other cache modes provide synchronization? I thought synchronization must be done by the developer himself?</p>\n\n<p><code>Query Cache</code></p>\n\n<p><strong>13)</strong> what is the difference between the Query Cache and the 2nd Level Cache? in my opinion: in the Query Cache result sets are saved, but not with their values, just with their ids. when the query is used again and the result set is still \"correct\", the values belonging to the ids are queried from the 2nd Level Cache</p>\n\n<p><strong>14)</strong> For the Query Cache a 2nd Level Cache MUST be used?</p>\n\n<p><strong>15)</strong> where does the Query Cache make sense and where doesnt it?</p>\n\n<p><code>Spring</code></p>\n\n<p><strong>16)</strong> Does Spring provide more Caching possibilities than method caching?</p>\n\n<p><strong>17)</strong> method caching is not linked to hibernate caching</p>\n\n<p><strong>18)</strong> but: for method caching a 2nd level is necessary, like ehcache (which can be used by hibernate too)</p>\n\n<p><strong>19)</strong> can method caching be used without database queries?</p>\n\n<p><code>Getting mixed up</code></p>\n\n<p><strong>20)</strong> if using ehcache for hibernate as 2nd level cache and ehcache for spring for method caching, can I use the same ehcache-instance? is there a chance that something gets mixed up?</p>\n\n<p><strong>21)</strong> when using 1st level cache and 2nd level cache, can they get mixed up? when querying the database, where does the result then come from, the 1st or 2nd level cache? does the 1st level cache work with the 2nd level cache?</p>\n\n<p><strong>22)</strong> anything else that can get mixed up by using the caches I mentioned? :-)</p>\n\n<p>Thanks for answering, not matter what question! :-)</p>\n    ","a":"\n<blockquote>\n  <p>Hibernate supports the following Caches: 1st Level Cache, 2nd Level Cache, Query Cache</p>\n</blockquote>\n\n<p>Yes.</p>\n\n<blockquote>\n  <p>Spring itself supports the following Caching possibilities: just Method Caching</p>\n</blockquote>\n\n<p>Spring 3.1 introduces the new caching abstraction based on annotations around methods, yes.</p>\n\n<blockquote>\n  <p>The 1st Level Cache is part of EVERY Hibernate application.</p>\n</blockquote>\n\n<p>Yes.</p>\n\n<blockquote>\n  <p>The 1st Level Cache is created for EVERY hibernate-session.</p>\n</blockquote>\n\n<p>Yes, although you can manually clear it at any given moment.</p>\n\n<blockquote>\n  <p>What is saved in the 1st Level Cache? Objects or just the values of their properties? queries and their results?</p>\n</blockquote>\n\n<p>It's a map of all objects fetched during the life of a session, if you load the same object by id for the second time, it will be loaded from L1.</p>\n\n<blockquote>\n  <p>I found out: the 2nd Level Cache is used ONCE per application. isn't that false? isn't it used ONCE per sessionfactory? and: multiple sessionfactorys = multiple 2nd level caches possible?</p>\n</blockquote>\n\n<p>You are right, typically there is just one session factory per application (database), hence the shortcut.</p>\n\n<blockquote>\n  <p>what is saved in the 2nd Level Cache: in my opinion just the values belonging to one record, not the objects itself.</p>\n</blockquote>\n\n<p>The same things as in L1, but they live longer. L2 is typically backed by some industrial-strength cache, while L1 is just a map (it doesn't even have to be thread-safe). It stores full entities, including lazily loaded relationships.</p>\n\n<blockquote>\n  <p>when storing values from one record in 2nd Level Cache, its possible to store related values (from objects connected over a foreign key) with it too?</p>\n</blockquote>\n\n<p>You do not manage L2 manually, it happens automatically.</p>\n\n<blockquote>\n  <p>when updating the values of one object in the 2nd level cache, its possible to update the values of objects connected with it in the cache too?</p>\n</blockquote>\n\n<p>See above.</p>\n\n<blockquote>\n  <p>when values of an object are changing, how can I update the 2nd level cache? flush? can I just update a part of the cache or must the whole cache be updated?</p>\n</blockquote>\n\n<p>See above - Hibernate will figure this out for you. You never interact with L2 directly.</p>\n\n<blockquote>\n  <p>where does the 2nd level cache make sense and where doesnt it?</p>\n</blockquote>\n\n<p>Measure. In application that read a lot of data by primary key and read-to-write factor is very high, L2 has a significant impact on your performance.</p>\n\n<blockquote>\n  <p>the Cache Mode: does each cache mode provide a different strategy of caching? for example with cache mode \"read only\" no synchronization of database and cache is ever necessary? do other cache modes provide synchronization? I thought synchronization must be done by the developer himself?</p>\n</blockquote>\n\n<p>Cache mode helps Hibernate to choose best strategy for caching and invalidating. For instance if cache is read only, Hibernate won't bother invalidating it (or it won't do this that often). But read only cache (read only entity) will of course forbid any updates.</p>\n\n<blockquote>\n  <p>what is the difference between the Query Cache and the 2nd Level Cache? in my opinion: in the Query Cache result sets are saved, but not with their values, just with their ids. when the query is used again and the result set is still \"correct\", the values belonging to the ids are queried from the 2nd Level Cache.</p>\n</blockquote>\n\n<p>Exactly, but this is a very broad topic. Especially the <em>result set is still \"correct\"</em> part.</p>\n\n<blockquote>\n  <p>For the Query Cache a 2nd Level Cache MUST be used?</p>\n</blockquote>\n\n<p>Yes, without L2 query cache has no sense and will slow down the application dramatically.</p>\n\n<blockquote>\n  <p>where does the Query Cache make sense and where doesnt it?</p>\n</blockquote>\n\n<p>Hard question, typically when you are executing the same query a lot of times and the universe of query parameters is low (for each set of query parameters new query cache is created with all ids of records being the results).</p>\n\n<blockquote>\n  <p>Does Spring provide more Caching possibilities than method caching?</p>\n</blockquote>\n\n<p>No, Spring is more-or-less just a glue for your own code.</p>\n\n<blockquote>\n  <p>method caching is not linked to hibernate caching.</p>\n</blockquote>\n\n<p>Spring is not linked to Hibernate, so...</p>\n\n<blockquote>\n  <p>but: for method caching a 2nd level is necessary, like ehcache (which can be used by hibernate too)</p>\n</blockquote>\n\n<p>L2 is Hibernate concept. If you want to cache methods, you need <em>some</em> underlying cache. Let it be EhCache, never mind. of course it must be thread-safe. </p>\n\n<blockquote>\n  <p>can method caching be used without database queries?</p>\n</blockquote>\n\n<p>Spring has nothing to do with Hibernate. You may cache computations that have nothing to do with database.</p>\n\n<blockquote>\n  <p>if using ehcache for hibernate as 2nd level cache and ehcache for spring for method caching, can I use the same ehcache-instance? is there a chance that something gets mixed up?</p>\n</blockquote>\n\n<p>You may use the same <code>CacheManager</code> and cache configuration as Hibernate to ease deployment. As long as cache names do not overlap, they are completely independent, even thought working within the same manager.</p>\n\n<blockquote>\n  <p>when using 1st level cache and 2nd level cache, can they get mixed up? when querying the database, where does the result then come from, the 1st or 2nd level cache? does the 1st level cache work with the 2nd level cache?</p>\n</blockquote>\n\n<p>They just work, as long as some abstraction does not leak :-). When you query by primary key, first L1 is examined (it is faster), then L2.</p>\n\n<blockquote>\n  <p>anything else that can get mixed up by using the caches I mentioned? :-)</p>\n</blockquote>\n\n<p>See above, abstractions tend to leak. But the worst problems come when you change the database and Hibernate does not no about it. Also clustering without proper replication will cause you a headache. And the biggest problem - very often incorrect caching actually slows down the application (query cache is the most dangerous here).</p>\n    "},{"t":"Turning off hibernate logging console output","l":"http://stackoverflow.com/questions/311408/turning-off-hibernate-logging-console-output","q":"\n\n<p>I'm using hibernate 3 and want to stop it from dumping all the startup messages to the console. I tried commenting out the stdout lines in log4j.properties but no luck. I've pasted my log file below. Also I'm using eclipse with the standard project structure and have a copy of log4j.properties in both the root of the project folder and the bin folder.</p>\n\n<pre>### direct log messages to stdout ###\n#log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n#log4j.appender.stdout.Target=System.out\n#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n#log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n\n\n### direct messages to file hibernate.log ###\nlog4j.appender.file=org.apache.log4j.FileAppender\nlog4j.appender.file.File=hibernate.log\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n\n\n### set log levels - for more verbose logging change 'info' to 'debug' ###\n\nlog4j.rootLogger=warn, stdout\n\n#log4j.logger.org.hibernate=info\nlog4j.logger.org.hibernate=debug\n\n### log HQL query parser activity\n#log4j.logger.org.hibernate.hql.ast.AST=debug\n\n### log just the SQL\n#log4j.logger.org.hibernate.SQL=debug\n\n### log JDBC bind parameters ###\nlog4j.logger.org.hibernate.type=info\n#log4j.logger.org.hibernate.type=debug\n\n### log schema export/update ###\nlog4j.logger.org.hibernate.tool.hbm2ddl=debug\n\n### log HQL parse trees\n#log4j.logger.org.hibernate.hql=debug\n\n### log cache activity ###\n#log4j.logger.org.hibernate.cache=debug\n\n### log transaction activity\n#log4j.logger.org.hibernate.transaction=debug\n\n### log JDBC resource acquisition\n#log4j.logger.org.hibernate.jdbc=debug\n\n### enable the following line if you want to track down connection ###\n### leakages when using DriverManagerConnectionProvider ###\n#log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=trac5</pre>\n    ","a":"\n<p>Try to set more reasonable logging level. Setting logging level to <code>info</code> means that only log event at <code>info</code> or higher level (<code>warn</code>, <code>error</code> and <code>fatal</code>) are logged, that is <code>debug</code> logging events are ignored.</p>\n\n<pre><code>log4j.logger.org.hibernate=info\n</code></pre>\n\n<p>or in <a href=\"http://wiki.apache.org/logging-log4j/Log4jXmlFormat\" rel=\"nofollow noreferrer\">XML version</a> of log4j config file:</p>\n\n<pre><code>&lt;logger name=\"org.hibernate\"&gt;\n  &lt;level value=\"info\"/&gt; \n&lt;/logger&gt;\n</code></pre>\n\n<p>See also <a href=\"http://logging.apache.org/log4j/1.2/manual.html\" rel=\"nofollow noreferrer\">log4j manual</a>.</p>\n    "},{"t":"ORDER BY using Criteria API","l":"http://stackoverflow.com/questions/1780129/order-by-using-criteria-api","q":"\n\n<p>When I write a HQL query</p>\n\n<pre><code>Query q = session.createQuery(\"SELECT cat from Cat as cat ORDER BY cat.mother.kind.value\");\nreturn q.list();\n</code></pre>\n\n<p>Everything is fine. However, when I write a Criteria</p>\n\n<pre><code>Criteria c = session.createCriteria(Cat.class);\nc.addOrder(Order.asc(\"mother.kind.value\"));\nreturn c.list();\n</code></pre>\n\n<p>I get an exception <code>org.hibernate.QueryException: could not resolve property: kind.value of: my.sample.data.entities.Cat</code></p>\n\n<p>If I want to use Criteria and Order, how should I express my \"order by\"?</p>\n    ","a":"\n<p>You need to create an alias for the <code>mother.kind</code>. You do this like so.</p>\n\n<pre><code>Criteria c = session.createCriteria(Cat.class);\nc.createAlias(\"mother.kind\", \"motherKind\");\nc.addOrder(Order.asc(\"motherKind.value\"));\nreturn c.list();\n</code></pre>\n    "},{"t":"org.hibernate.PersistentObjectException: detached entity passed to persist","l":"http://stackoverflow.com/questions/6378526/org-hibernate-persistentobjectexception-detached-entity-passed-to-persist","q":"\n\n<p>I had successfully written my first master child example with hibernate. After few days I took it again and upgraded some libraries. No sure what did I do but I could never make it run again. Would somebody help my figure out what is wrong in code that is returning following error message:</p>\n\n<pre><code>org.hibernate.PersistentObjectException: detached entity passed to persist: example.forms.InvoiceItem\n    at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:127)\n    at org.hibernate.impl.SessionImpl.firePersist(SessionImpl.java:799)\n    at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:791)\n    .... (truncated)\n</code></pre>\n\n<p>hibernate mapping:</p>\n\n<pre><code>&lt;hibernate-mapping package=\"example.forms\"&gt;\n    &lt;class name=\"Invoice\" table=\"Invoices\"&gt;\n        &lt;id name=\"id\" type=\"long\"&gt;\n            &lt;generator class=\"native\" /&gt;\n        &lt;/id&gt;\n        &lt;property name=\"invDate\" type=\"timestamp\" /&gt;\n        &lt;property name=\"customerId\" type=\"int\" /&gt;\n        &lt;set cascade=\"all\" inverse=\"true\" lazy=\"true\" name=\"items\" order-by=\"id\"&gt;\n            &lt;key column=\"invoiceId\" /&gt;\n            &lt;one-to-many class=\"InvoiceItem\" /&gt;\n        &lt;/set&gt;\n    &lt;/class&gt;\n    &lt;class name=\"InvoiceItem\" table=\"InvoiceItems\"&gt;\n        &lt;id column=\"id\" name=\"itemId\" type=\"long\"&gt;\n            &lt;generator class=\"native\" /&gt;\n        &lt;/id&gt;\n        &lt;property name=\"productId\" type=\"long\" /&gt;\n        &lt;property name=\"packname\" type=\"string\" /&gt;\n        &lt;property name=\"quantity\" type=\"int\" /&gt;\n        &lt;property name=\"price\" type=\"double\" /&gt;\n        &lt;many-to-one class=\"example.forms.Invoice\" column=\"invoiceId\" name=\"invoice\" not-null=\"true\" /&gt;\n    &lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre>\n\n<p><strong>EDIT:</strong> InvoiceManager.java</p>\n\n<pre><code>class InvoiceManager {\n\n    public Long save(Invoice theInvoice) throws RemoteException {\n        Session session = HbmUtils.getSessionFactory().getCurrentSession();\n        Transaction tx = null;\n        Long id = null;\n        try {\n            tx = session.beginTransaction();\n            session.persist(theInvoice);\n            tx.commit();\n            id = theInvoice.getId();\n        } catch (RuntimeException e) {\n            if (tx != null)\n                tx.rollback();\n            e.printStackTrace();\n            throw new RemoteException(\"Invoice could not be saved\");\n        } finally {\n            if (session.isOpen())\n                session.close();\n        }\n        return id;\n    }\n\n    public Invoice getInvoice(Long cid) throws RemoteException {\n        Session session = HbmUtils.getSessionFactory().getCurrentSession();\n        Transaction tx = null;\n        Invoice theInvoice = null;\n        try {\n            tx = session.beginTransaction();\n            Query q = session\n                    .createQuery(\n                            \"from Invoice as invoice \" +\n                            \"left join fetch invoice.items as invoiceItems \" +\n                            \"where invoice.id = :id \")\n                    .setReadOnly(true);\n            q.setParameter(\"id\", cid);\n            theInvoice = (Invoice) q.uniqueResult();\n            tx.commit();\n        } catch (RuntimeException e) {\n            tx.rollback();\n        } finally {\n            if (session.isOpen())\n                session.close();\n        }\n        return theInvoice;\n    }\n}\n</code></pre>\n\n<p>Invoice.java</p>\n\n<pre><code>public class Invoice implements java.io.Serializable {\n\n    private Long id;\n    private Date invDate;\n    private int customerId;\n    private Set&lt;InvoiceItem&gt; items;\n\n    public Long getId() {\n        return id;\n    }\n\n    public Date getInvDate() {\n        return invDate;\n    }\n\n    public int getCustomerId() {\n        return customerId;\n    }\n\n    public Set&lt;InvoiceItem&gt; getItems() {\n        return items;\n    }\n\n    void setId(Long id) {\n        this.id = id;\n    }\n\n    void setInvDate(Date invDate) {\n        this.invDate = invDate;\n    }\n\n    void setCustomerId(int customerId) {\n        this.customerId = customerId;\n    }\n\n    void setItems(Set&lt;InvoiceItem&gt; items) {\n        this.items = items;\n    }\n}\n</code></pre>\n\n<p>InvoiceItem.java</p>\n\n<pre><code>public class InvoiceItem implements java.io.Serializable {\n\n    private Long itemId;\n    private long productId;\n    private String packname;\n    private int quantity;\n    private double price;\n    private Invoice invoice;\n\n    public Long getItemId() {\n        return itemId;\n    }\n\n    public long getProductId() {\n        return productId;\n    }\n\n    public String getPackname() {\n        return packname;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public Invoice getInvoice() {\n        return invoice;\n    }\n\n    void setItemId(Long itemId) {\n        this.itemId = itemId;\n    }\n\n    void setProductId(long productId) {\n        this.productId = productId;\n    }\n\n    void setPackname(String packname) {\n        this.packname = packname;\n    }\n\n    void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    void setPrice(double price) {\n        this.price = price;\n    }\n\n    void setInvoice(Invoice invoice) {\n        this.invoice = invoice;\n    }\n}\n</code></pre>\n\n<p><strong>EDIT:</strong> JSON object sent from client:</p>\n\n<pre><code>{\"id\":null,\"customerId\":3,\"invDate\":\"2005-06-07T04:00:00.000Z\",\"items\":[\n{\"itemId\":1,\"productId\":1,\"quantity\":10,\"price\":100},\n{\"itemId\":2,\"productId\":2,\"quantity\":20,\"price\":200},\n{\"itemId\":3,\"productId\":3,\"quantity\":30,\"price\":300}]}\n</code></pre>\n\n<p><strong>EDIT:</strong> Some details:<br>\nI have tried to save invoice by following two ways:</p>\n\n<ol>\n<li><p>Manually fabricated above mentioned\njson object and passed it to fresh\nsession of server. In this case absolutely \nno activity has been made prior to calling \nsave method so there should not be any open session\nexcept the one opened in save method</p></li>\n<li><p>Loaded existing data by using\ngetInvoice method and them passed same \ndata after removing key value. This too I believe\nshould close the session before saving as\ntransaction is being committed in getInvoice method.</p></li>\n</ol>\n\n<p>In both cases I am getting same error message that is forcing me to believe that something is wrong either with hibernate configuration file or entity classes or save method.  </p>\n\n<p><strong>Please let me know if I should provide more details</strong></p>\n    ","a":"\n<p>You didn't provide many relevant details so I will guess that you called <code>getInvoice</code> and then you used result object to set some values and call <code>save</code> with assumption that your object changes will be saved. </p>\n\n<p>However, <code>persist</code> operation is intended for brand new transient objects and it fails if id is already assigned. In your case you probably want to call <code>saveOrUpdate</code> instead of <code>persist</code>. </p>\n\n<p>You can find some discussion and references here <a href=\"http://stackoverflow.com/questions/2441598/detached-entity-passed-to-persist-error-with-jpa-ejb-code\">\"detached entity passed to persist error\" with JPA/EJB code</a></p>\n    "},{"t":"How to get SQL from Hibernate Criteria API (*not* for logging)","l":"http://stackoverflow.com/questions/554481/how-to-get-sql-from-hibernate-criteria-api-not-for-logging","q":"\n\n<p>is there an easy way to get the (to-be-generated) sql from a Hibernate Criteria?</p>\n\n<p>Ideally I would have something like:</p>\n\n<pre><code>Criteria criteria = session.createCriteria(Operator.class);\n\n... build up the criteria ...\n... and then do something like ...\n\nString sql = criteria.toSql()\n\n(But this of course does not exist)\n</code></pre>\n\n<p>The idea would then be to use the sql as part of a huge 'MINUS' query (I need to find the differences between 2 identical schemas - identical in structure, not in data - and the MINUS is not supported by Hibernate)</p>\n\n<p>(BTW I know I can check the SQL from the log files)</p>\n    ","a":"\n<p>I've done something like this using Spring AOP so I could grab the sql, parameters, errors, and execution time for any query run in the application whether it was HQL, Criteria, or native SQL.</p>\n\n<p>This is obviously fragile, insecure, subject to break with changes in Hibernate, etc, but it illustrates that it's possible to get the SQL:</p>\n\n<pre><code>CriteriaImpl c = (CriteriaImpl)query;\nSessionImpl s = (SessionImpl)c.getSession();\nSessionFactoryImplementor factory = (SessionFactoryImplementor)s.getSessionFactory();\nString[] implementors = factory.getImplementors( c.getEntityOrClassName() );\nCriteriaLoader loader = new CriteriaLoader((OuterJoinLoadable)factory.getEntityPersister(implementors[0]),\n    factory, c, implementors[0], s.getEnabledFilters());\nField f = OuterJoinLoader.class.getDeclaredField(\"sql\");\nf.setAccessible(true);\nString sql = (String)f.get(loader);\n</code></pre>\n\n<p>Wrap the entire thing in a try/catch and use at your own risk.</p>\n    "},{"t":"not-null property references a null or transient value","l":"http://stackoverflow.com/questions/6389600/not-null-property-references-a-null-or-transient-value","q":"\n\n<p>Facing trouble in saving parent/child object with hibernate. Any idea would be highly appreciated.</p>\n\n<pre><code>org.hibernate.PropertyValueException: not-null property references a null or transient value: example.forms.InvoiceItem.invoice\n    at org.hibernate.engine.Nullability.checkNullability(Nullability.java:100)\n        .... (truncated)\n</code></pre>\n\n<p>hibernate mapping:</p>\n\n<pre><code>&lt;hibernate-mapping package=\"example.forms\"&gt;\n    &lt;class name=\"Invoice\" table=\"Invoices\"&gt;\n        &lt;id name=\"id\" type=\"long\"&gt;\n            &lt;generator class=\"native\" /&gt;\n        &lt;/id&gt;\n        &lt;property name=\"invDate\" type=\"timestamp\" /&gt;\n        &lt;property name=\"customerId\" type=\"int\" /&gt;\n        &lt;set cascade=\"all\" inverse=\"true\" lazy=\"true\" name=\"items\" order-by=\"id\"&gt;\n            &lt;key column=\"invoiceId\" /&gt;\n            &lt;one-to-many class=\"InvoiceItem\" /&gt;\n        &lt;/set&gt;\n    &lt;/class&gt;\n    &lt;class name=\"InvoiceItem\" table=\"InvoiceItems\"&gt;\n        &lt;id column=\"id\" name=\"itemId\" type=\"long\"&gt;\n            &lt;generator class=\"native\" /&gt;\n        &lt;/id&gt;\n        &lt;property name=\"productId\" type=\"long\" /&gt;\n        &lt;property name=\"packname\" type=\"string\" /&gt;\n        &lt;property name=\"quantity\" type=\"int\" /&gt;\n        &lt;property name=\"price\" type=\"double\" /&gt;\n        &lt;many-to-one class=\"example.forms.Invoice\" column=\"invoiceId\" name=\"invoice\" not-null=\"true\" /&gt;\n    &lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre>\n\n<p>InvoiceManager.java</p>\n\n<pre><code>class InvoiceManager {\n\n    public Long save(Invoice theInvoice) throws RemoteException {\n        Session session = HbmUtils.getSessionFactory().getCurrentSession();\n        Transaction tx = null;\n        Long id = null;\n        try {\n            tx = session.beginTransaction();\n            session.persist(theInvoice);\n            tx.commit();\n            id = theInvoice.getId();\n        } catch (RuntimeException e) {\n            if (tx != null)\n                tx.rollback();\n            e.printStackTrace();\n            throw new RemoteException(\"Invoice could not be saved\");\n        } finally {\n            if (session.isOpen())\n                session.close();\n        }\n        return id;\n    }\n}\n</code></pre>\n\n<p>Invoice.java</p>\n\n<pre><code>public class Invoice implements java.io.Serializable {\n    private Long id;\n    private Date invDate;\n    private int customerId;\n    private Set&lt;InvoiceItem&gt; items;\n\n    public Long getId() {\n        return id;\n    }\n    public Date getInvDate() {\n        return invDate;\n    }\n    public int getCustomerId() {\n        return customerId;\n    }\n    public Set&lt;InvoiceItem&gt; getItems() {\n        return items;\n    }\n    void setId(Long id) {\n        this.id = id;\n    }\n    void setInvDate(Date invDate) {\n        this.invDate = invDate;\n    }\n    void setCustomerId(int customerId) {\n        this.customerId = customerId;\n    }\n    void setItems(Set&lt;InvoiceItem&gt; items) {\n        this.items = items;\n    }\n}\n</code></pre>\n\n<p>InvoiceItem.java</p>\n\n<pre><code>public class InvoiceItem implements java.io.Serializable {\n    private Long itemId;\n    private long productId;\n    private String packname;\n    private int quantity;\n    private double price;\n    private Invoice invoice;\n\n    public Long getItemId() {\n        return itemId;\n    }\n    public long getProductId() {\n        return productId;\n    }\n    public String getPackname() {\n        return packname;\n    }\n    public int getQuantity() {\n        return quantity;\n    }\n    public double getPrice() {\n        return price;\n    }\n    public Invoice getInvoice() {\n        return invoice;\n    }\n    void setItemId(Long itemId) {\n        this.itemId = itemId;\n    }\n    void setProductId(long productId) {\n        this.productId = productId;\n    }\n    void setPackname(String packname) {\n        this.packname = packname;\n    }\n    void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n    void setPrice(double price) {\n        this.price = price;\n    }\n    void setInvoice(Invoice invoice) {\n        this.invoice = invoice;\n    }\n}\n</code></pre>\n    ","a":"\n<p>Every InvoiceItem must have an Invoice attached to it because of the <code>not-null=\"true\"</code> in the many-to-one mapping.  So the basic idea is you need to set up that explicit relationship in code.  There are many ways to do that.  On your class I see a <code>setItems</code> method.  I do NOT see an <code>addInvoiceItem</code> method.  When you set items, you need to loop through the set and call <code>item.setInvoice(this)</code> on all of the items.  If you implement an <code>addItem</code> method, you need to do the same thing.  Or you need to otherwise set the Invoice of every <code>InvoiceItem</code> in the collection.</p>\n    "},{"t":"Difference between save and saveAndFlush in Spring data jpa","l":"http://stackoverflow.com/questions/21203875/difference-between-save-and-saveandflush-in-spring-data-jpa","q":"\n\n<p>I am trying to learn spring data JPA by testing some CRUD operation via <code>JpaRepository</code>.</p>\n\n<p>I came across two methods <code>save</code> and <code>saveAndFlush</code>.\nI don't get the difference between these two. On calling <code>save</code> also my changes are getting saved into database so what is the use of <code>saveAndFlush</code>.</p>\n    ","a":"\n<p>On <code>saveAndFlush</code>, changes will be flushed to DB immediately in this command. With <code>save</code>, this is not necessarily true, and might stay just in memory, until <code>flush</code> or <code>commit</code> commands are issued. </p>\n\n<p>But be aware, that even if you flush the changes in transaction and do not commit them, the changes still won't be visible to the outside transactions until the commit in this transaction.</p>\n\n<p>In your case, you probably use some sort of transactions mechanism, which issues <code>commit</code> command for you if everything works out fine.</p>\n    "},{"t":"How to import initial data to database with Hibernate?","l":"http://stackoverflow.com/questions/673802/how-to-import-initial-data-to-database-with-hibernate","q":"\n\n<p>When deploying applications, I often use Hibernate’s capacity to create database schema in order to simplify the deployment. This is easily achievable by configuring hibernate.hbm2ddl.auto property. </p>\n\n<p>However, on occasion I also need to insert some initial data to database, for example root user. Is there a way I could achieve this via hibernate with some kind of load textual file?</p>\n\n<p>I know I could easily program the code that will do so, but just wondering if there is already some utility that can help me achieve the same via configuration?</p>\n    ","a":"\n<p>After a couple of hours stumbling with this, I decided to share what I've found, though it's a very old post.</p>\n\n<p>To make it work properly, i had to do the following:</p>\n\n<ul>\n<li><code>hbmddl</code> set to <code>create</code> or <code>create-drop</code></li>\n<li>file.sql in classpath root; in my case, i just put it in <code>resources</code> folder, i'm using maven.</li>\n<li>each sql command in one line</li>\n<li><strong>each file.sql must have a blank line at the beggining of the file</strong> ==&gt; don't know the reason for this one, but if i don't insert that blank line, at the time of execution the servers tells me there's a syntax error near the first character.</li>\n</ul>\n\n<p>Hope that helps.</p>\n    "},{"t":"No matching bean of type … found for dependency","l":"http://stackoverflow.com/questions/8961275/no-matching-bean-of-type-found-for-dependency","q":"\n\n<p>after some days of trying and waitin' for answers on the springsource forums I'll try it here.\nRunning my application results in these exception:</p>\n\n<pre><code>org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [com.example.my.services.user.UserService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:924)\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:793)\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707)\n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478)\n    org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)\n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284)\n    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106)\n    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n    org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n    org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)\n    org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n    org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n    org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585)\n    org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913)\n    org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)\n    org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)\n    org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)\n    org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)\n    org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)\n    org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)\n    org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)\n    javax.servlet.GenericServlet.init(GenericServlet.java:212)\n    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n    org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n    org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602)\n    org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n    java.lang.Thread.run(Thread.java:662)\n</code></pre>\n\n<p>Here's the relevant code</p>\n\n<p>application context:</p>\n\n<pre><code>&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\"&gt;\n  &lt;property name=\"driverClassName\" value=\"org.postgresql.Driver\" /&gt;\n  &lt;property name=\"url\" value=\"jdbc:postgresql://localhost:5432/test\" /&gt;\n  &lt;property name=\"username\" value=\"test\" /&gt;\n  &lt;property name=\"password\" value=\"test\" /&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate3.LocalSessionFactoryBean\"&gt;\n  &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n  &lt;property name=\"packagesToScan\" value=\"com.example.my.entities.*\" /&gt;\n  &lt;property name=\"configurationClass\" value=\"org.hibernate.cfg.AnnotationConfiguration\" /&gt;\n  &lt;property name=\"hibernateProperties\"&gt;\n    &lt;props&gt;\n      &lt;prop key=\"hibernate.dialect\"&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/prop&gt;\n      &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n    &lt;/props&gt;\n  &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;tx:annotation-driven /&gt;\n&lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n  &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>com.example.my.entities.user:</p>\n\n<pre><code>@Entity\n@Table( name = \"tbl_users\" )\npublic class User\n{\n  @Id\n  @Column( name = \"id\" )\n  @GeneratedValue\n  private int id;\n\n  @Column( name = \"username\" )\n  private String username;\n\n  @Column( name = \"password\" )\n  private String password;\n\n  public void setId( int id )\n  {\n    this.id = id;\n  }\n\n  public int getId()\n  {\n    return id;\n  }\n\n  public void setUsername( String username )\n  {\n    this.username = username;\n  }\n\n  public String getUsername()\n  {\n    return username;\n  }\n\n  public void setPassword( String password )\n  {\n    this.password = password;\n  }\n\n  public String getPassword()\n  {\n    return password;\n  }\n}\n</code></pre>\n\n<p>service:</p>\n\n<pre><code>@Service\npublic class UserServiceImpl implements UserService\n{\n  @Autowired\n  private UserDAO userDAO;\n\n  @Override\n  @Transactional\n  public void addUser( User user )\n  {\n    userDAO.addUser( user );\n  }\n\n  @Override\n  @Transactional\n  public List&lt;User&gt; listUsers()\n  {\n    return userDAO.listUsers();\n  }\n\n  @Override\n  @Transactional\n  public void removeUser( int id )\n  {\n    userDAO.removeUser( id );\n  }\n}\n</code></pre>\n    ","a":"\n<p>Multiple things can cause this, I didn't bother to check your entire repository, so I'm going out on a limb here.</p>\n\n<p>First off, you could be missing an annotation (@Service or @Component) from the implementation of <code>com.example.my.services.user.UserService</code>, if you're using annotations for configuration. If you're using (only) xml, you're probably missing the <code>&lt;bean&gt;</code> -definition for the UserService-implementation.</p>\n\n<p>If you're using annotations and the implementation is annotated correctly, check that the package where the implementation is located in is scanned (check your <code>&lt;context:component-scan base-package=</code> -value).</p>\n    "},{"t":"Hibernate Criteria Join with 3 Tables","l":"http://stackoverflow.com/questions/8726396/hibernate-criteria-join-with-3-tables","q":"\n\n<p>I am looking for a hibernate criteria to get following:</p>\n\n<p>Dokument.class\nis mapped to Role\nroleId</p>\n\n<p>Role.class\nhas a ContactPerson\ncontactId</p>\n\n<p>Contact.class\nFirstName\nLastName</p>\n\n<p>I want to search for First or LastName on the Contact class and retrieve a list of Dokuments connected.</p>\n\n<p>I have tried something like this:</p>\n\n<pre><code>session.createCriteria(Dokument.class)\n.setFetchMode(\"role\",FetchMode.JOIN)\n.setFetchMode(\"contact\",FetchMode.JOIN)\n.add(Restrictions.eq(\"LastName\",\"Test\")).list();\n</code></pre>\n\n<p>I get an error could not resolve property \"LastName\" for class \"Dokument\"</p>\n\n<p>Can someone explain why the join searches on Dokument and not on all joined tables? Thanks in advance for all the help!</p>\n    ","a":"\n<p>The fetch mode only says that the association must be fetched. If you want to add restrictions on an associated entity, you must create an alias, or a subcriteria. I generally prefer using aliases, but YMMV:</p>\n\n<pre><code>Criteria c = session.createCriteria(Dokument.class, \"dokument\");\nc.createAlias(\"dokument.role\", \"role\"); // inner join by default\nc.createAlias(\"role.contact\", \"contact\");\nc.add(Restrictions.eq(\"contact.lastName\", \"Test\"));\nreturn c.list();\n</code></pre>\n\n<p>This is of course well explain in the <a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/querycriteria.html#querycriteria-associations\">Hibernate reference manual</a>, and the <a href=\"http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/Criteria.html\">javadoc for Criteria</a> even has examples. Read the documentation: it has plenty of useful information.</p>\n    "},{"t":"Why do I need Transaction in Hibernate for read only operation?","l":"http://stackoverflow.com/questions/13539213/why-do-i-need-transaction-in-hibernate-for-read-only-operation","q":"\n\n<p>Why do I need Transaction in Hibernate for read only operation?<br>\nDoes the following transaction put a lock on db? </p>\n\n<p>Example code to fetch from db:</p>\n\n<pre><code>Transcation tx = HibernateUtil.getCurrentSession().beginTranscation(); //why begin transcation?\n//readonly operation here\n\ntx.commit() // why tx.commit? i dont want to write anything\n</code></pre>\n\n<p><br>\nCan I use <code>session.close()</code>  instead of <code>tx.commit()</code>??</p>\n    ","a":"\n<p>You might actually have reasons to mark transactions as read-only.</p>\n\n<ol>\n<li>Transactions for reading might look indeed strange and often people don't mark methods for transactions in this case. But JDBC will create transaction anyway, it's just it will be working in <code>autocommit=true</code> if different option wasn't set explicitly.</li>\n<li>But there is no guarantee that your method doesn't write into the database. If you mark method as <code>@Transactional(readonly=true)</code>, Spring will set the JDBC transaction into a read-only mode, thus you'll dictate whether it's <em>actually</em> possible to write into DB in scope of this transaction. If you architecture is pretty cumbersome and some team members might not follow reasonable path, this flag would point you to the problematic place.</li>\n<li>Also read-only transactions can be optimized by DBs, but this of course is DB specific. E.g. MySQL added support for this only in InnoDB starting from 5.6.4 version.</li>\n<li>If you're not using JDBC directly, but rather an ORM, that might be problematic. For instance Hibernate community says that working outside of transaction might cause unpredictable behavior. This is because Hibernate will open transaction, but it won't close it on its own, thus connection will be returned to the Connection Pool with transaction being not committed. What happens then? JDBC keeps silence, thus this is implementation specific (MySQL rolls back transaction, Oracle afair commits it). This also can be configured on Connection Pool level (e.g. C3P0 gives you such an option, rollback by default).</li>\n<li>Another thing when it comes to Hibernate, Spring sets the FlushMode to MANUAL in case of read-only transactions, which leads to other optimizations like no need for dirty checks.</li>\n<li>You may want to override or set explicitly the transaction isolation level. This impacts read-transactions as well since you do or don't want to read uncommitted changes, be exposed to phantom reads, etc.</li>\n</ol>\n\n<p>To sum up - you can go both ways, but you need to understand consequences.</p>\n    "},{"t":"What's wrong with this HQL? “No data type for node”","l":"http://stackoverflow.com/questions/1012408/whats-wrong-with-this-hql-no-data-type-for-node","q":"\n\n<pre><code>session.createQuery(\"Select attribute from GoodsSection tgs \" +\n    \"join gs.ascendants ags join ags.attributes attribute \" +\n    \"where attribute.outerId = :outerId and tgs = :section \")\n.setString(\"outerId\", pOuterId)\n.setEntity(\"section\", section)\n.setMaxResults(1)\n.uniqueResult();\n</code></pre>\n\n<p>Looks fine to me, but the result is</p>\n\n<pre><code>java.lang.IllegalStateException: No data type for node: org.hibernate.hql.ast.tree.IdentNode \n \\-[IDENT] IdentNode: 'attribute' {originalText=attribute}\n\n    at org.hibernate.hql.ast.tree.SelectClause.initializeExplicitSelectClause(SelectClause.java:145)\n    at org.hibernate.hql.ast.HqlSqlWalker.useSelectClause(HqlSqlWalker.java:705)\n    at org.hibernate.hql.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:529)\n    at org.hibernate.hql.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:645)\n    at org.hibernate.hql.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:281)\n    at org.hibernate.hql.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:229)\n</code></pre>\n\n<p>Why? What's wrong?</p>\n    ","a":"\n<p>You haven't defined the \"gs\" alias. You only have \"ags\" and \"tgs\".</p>\n    "},{"t":"Hibernate: How to set NULL query-parameter value with HQL?","l":"http://stackoverflow.com/questions/2123438/hibernate-how-to-set-null-query-parameter-value-with-hql","q":"\n\n<p>how can I set a Hibernate Parameter to \"null\"? Example:</p>\n\n<pre><code>Query query = getSession().createQuery(\"from CountryDTO c where c.status = :status  and c.type =:type\")\n.setParameter(\"status\", status, Hibernate.STRING)\n.setParameter(\"type\", type, Hibernate.STRING);\n</code></pre>\n\n<p>In my case, the status String can be null. I have debugged this and hibernate then generates an SQL string/query like this ....<code>status = null</code>... This however does not Work in MYSQL, as the correct SQL statement must be \"<code>status is null</code>\" (Mysql does not understand status=null and evaluates this to false so that no records will ever be returned for the query, according to the mysql docs i have read...) </p>\n\n<p>My Questions:</p>\n\n<ol>\n<li><p>Why doesnt <code>Hibernate</code> translate a null string correctly to \"is null\" (and rather and wrongly creates \"=null\")?</p></li>\n<li><p>What is the best way to rewrite this query so that it is null-safe? With nullsafe I mean that in the case that the \"status\" String is null than it should create an \"is null\"?</p></li>\n</ol>\n\n<p>Thank you very much!\nTim</p>\n    ","a":"\n<ol>\n<li><p>I believe hibernate first translates your HQL query to SQL and only after that it tries to bind your parameters. Which means that it won't be able to rewrite query from <code>param = ?</code> to <code>param is null</code>.</p></li>\n<li><p>Try using Criteria api:</p>\n\n<pre><code>Criteria c = session.createCriteria(CountryDTO.class);\nc.add(Restrictions.eq(\"type\", type));\nc.add(status == null ? Restrictions.isNull(\"status\") : Restrictions.eq(\"status\", status));\nList result = c.list();\n</code></pre></li>\n</ol>\n    "},{"t":"Hibernate 4.1Final alternative for Hibernate.STRING","l":"http://stackoverflow.com/questions/10255506/hibernate-4-1final-alternative-for-hibernate-string","q":"\n\n<p>I was using Hibernate 3.6 where I have a code like this: </p>\n\n<pre><code>list =getSession().createSQLQuery(queryString)\n        .addScalar(\"UNAME\",Hibernate.STRING)\n        .addScalar(\"COM\",Hibernate.STRING)\n        .addScalar(\"COM_DATE\",Hibernate.DATE) \n        .setString(\"id\", Id).list();\n</code></pre>\n\n<p>now I change the jar from 3.6 to 4.1Final</p>\n\n<p>it seems like the addScalar method is askying for Type in stead of Hibernate.STRING\nI couldn't find any example hot to resolve this. if there is anyone that who know please help me thank you. </p>\n    ","a":"\n<p>Type fields in <a href=\"http://docs.jboss.org/hibernate/orm/4.1/javadocs/org/hibernate/Hibernate.html\">org.hibernate.Hibernate</a> are deprecated (and actually removed) as result of <a href=\"https://hibernate.onjira.com/browse/HHH-5196\">HHH-5196</a></p>\n\n<p>Now different Hibernate types can be found from javadocs for <a href=\"http://docs.jboss.org/hibernate/orm/4.1/javadocs/org/hibernate/type/Type.html\">Type</a>. In your case following should work:</p>\n\n<pre><code>    .addScalar(\"UNAME\", StringType.INSTANCE)\n    .addScalar(\"COM\", StringType.INSTANCE)\n    .addScalar(\"COM_DATE\", DateType.INSTANCE) \n</code></pre>\n    "},{"t":"Specifying an Index (Non-Unique Key) Using JPA","l":"http://stackoverflow.com/questions/3405229/specifying-an-index-non-unique-key-using-jpa","q":"\n\n<p>How do you define a field, eg <code>email</code> as having an index using JPA annotations. We need a non-unique key on <code>email</code> because there are literally millions of queries on this field per day, and its a bit slow without the key.</p>\n\n<pre><code>@Entity\n@Table(name=\"person\", \n       uniqueConstraints=@UniqueConstraint(columnNames={\"code\", \"uid\"}))\npublic class Person {\n    // Unique on code and uid\n    public String code;\n    public String uid;\n\n    public String username;\n    public String name;\n    public String email;\n}\n</code></pre>\n\n<p>I have seen a hibernate specific annotation but I am trying to avoid vendor specific solutions as we are still deciding between hibernate and datanucleus.</p>\n\n<p>UPDATE:</p>\n\n<p>As of JPA 2.1, you can do this. See: <a href=\"http://stackoverflow.com/questions/17620405/the-annotation-index-is-disallowed-for-this-location\">The annotation @Index is disallowed for this location</a></p>\n    ","a":"\n<p>As far as I know, there isn't a cross-JPA-Provider way to specify indexes. However, you can always create them by hand directly in the database, most databases will pick them up automatically during query planning.</p>\n    "},{"t":"Hibernate Auto Increment ID","l":"http://stackoverflow.com/questions/2011528/hibernate-auto-increment-id","q":"\n\n<p>I have a j2ee application using hibernate with annotation. How do I annotate the Id field in my pojo class to set it as auto increment or auto generated. and in adding the bean do I leave that field in my bean null?</p>\n    ","a":"\n<pre><code>@Id\n@GeneratedValue(strategy=GenerationType.AUTO)\nprivate int id;\n</code></pre>\n\n<p>and you leave it <code>null</code> (<code>0</code>) when persisting. (<code>null</code> if you use the <code>Integer</code> / <code>Long</code> wrappers)</p>\n\n<p>In some cases the <code>AUTO</code> strategy is resoved to <code>SEQUENCE</code> rathen than to <code>IDENTITY</code> or <code>TABLE</code>, so you might want to manually set it to <code>IDENTITY</code> or <code>TABLE</code> (depending on the underlying database).</p>\n\n<p>It seems <code>SEQUENCE</code> + specifying the sequence name worked for you.</p>\n    "},{"t":"Hibernate Criteria vs HQL: which is faster?","l":"http://stackoverflow.com/questions/4401240/hibernate-criteria-vs-hql-which-is-faster","q":"\n\n<p>I have been reading some anwers, but i'm still confused. ¿Why? because the differences that you have mentioned do not relate with the performance. they are related with easy use.(Objetc(criteria) and SQL(hql)). But I would like to know if \"criteria\" is slower than hql for some reason.</p>\n\n<p>I read this in another anwers</p>\n\n<p>\"There is a difference in terms of performance between HQL and criteriaQuery, everytime you fire a query using criteriaQuery, it creates a new alias for the table name which does not reflect in the last queried cache for any DB. This leads to an overhead of compiling the generated SQL, taking more time to execute.\" by Varun Mehta.</p>\n\n<p>This is very close BUT! i read in another website(http://gary-rowe.com/agilestack/tag/hibernate/) This is no longer the case with Hibernate 3.3 and above(please read this: 9) Hibernate is slow because the SQL generated by the Criteria interface is not consistent)</p>\n\n<p>I have done some test trying to find out the differences but both generate qry's and it doesn't change the alias to the table.</p>\n\n<p>I'm very confused. If somebody knows the main reason please, could you help us. Thanks</p>\n    ","a":"\n<p>You are wright and not.\nResult list is retrieved from database or cache with the org.hibernate.loader.Loader class. When  cache is not enabled, prepared statement is build using the Dialect object which is created in SessionFactoryImp. So, statements either initialized per list call. \nBesides, low level query is generated automatically. Basically,it is an aid, but there may be a case when a specific query will be more effective, when manually written.</p>\n    "},{"t":"CreateProcess error=206, The filename or extension is too long when running main() method","l":"http://stackoverflow.com/questions/10519558/createprocess-error-206-the-filename-or-extension-is-too-long-when-running-main","q":"\n\n<p>I have this error in eclipse helios:</p>\n\n<p><strong>Exception occurred executing command line.\nCannot run program \"C:\\Program Files (x86)\\Java\\jre6\\bin\\javaw.exe\" (in directory \"C:\\Users\\motiver\\helios_workspace\\TimeTracker\"): CreateProcess error=206, The filename or extension is too long</strong></p>\n\n<p>I researched a bit but most of the issues were related to DataNucleus when working on Google App Engine. But I am not using anything remotely related to Google App Engine. I am doing a small project with Servlet 3.0 on JBOSS 6. I am using Hibernate 4.1.2 for ORM and RESTEasy to expose a web service. I created a util file that has a main() method that basically drops and re-creates the schema. I run the main() methos when I need a clean database for testing purposes. It worked fine on Tomcat 7 but it stopped working when I moved to JBoss 6.</p>\n\n<p>Any hint or solution would be greatly appreciated.</p>\n    ","a":"\n<p>There is no simple (as in a couple of clicks or a simple command) solution to this issue.</p>\n\n<p>Quoting from some answers in <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=327193\">this bug report in Eclipse.org</a>, these are the work-arounds. Pick the one that's the least painful to you:</p>\n\n<ul>\n<li>Reduce the classpath</li>\n<li>Use directories instead of jar files</li>\n<li>Use a packed jar files which contains all other jars, use the classpath variable inside the manifest file to point to the other jars</li>\n<li>Use a special class loader which reads the classpath from a config file</li>\n<li>Try to use one of the attached patches in the bug report document</li>\n<li>Use an own wrapper e.g. ant</li>\n<li>Move to IntelliJ (Update: as @nitind points out, this is not an option)</li>\n</ul>\n\n<p><strong>Update</strong>: After July 2014, there is a better way (thanks to <a href=\"http://stackoverflow.com/a/23299746/106342\">@Brad-Mace's answer below</a>:</p>\n\n<p>If you have created your own build file instead of using <code>Project -&gt; Generate Javadocs</code>, then you can add <code>useexternalfile=\"yes\"</code> to the Javadoc task, which is designed specifically to solve this problem.</p>\n    "},{"t":"JPA: difference between @JoinColumn and @PrimaryKeyJoinColumn?","l":"http://stackoverflow.com/questions/3417097/jpa-difference-between-joincolumn-and-primarykeyjoincolumn","q":"\n\n<p>What's the exact difference between <code>@JoinColumn</code> and <code>@PrimaryKeyJoinColumn</code>?</p>\n\n<p>You use <code>@JoinColumn</code> for columns that are part of a foreign key. A typical column could look like (e.g. in a join table with additional attributes):</p>\n\n<pre><code>@ManyToOne\n@JoinColumn(name = \"...\")\nprivate OtherClass oc;\n</code></pre>\n\n<p>What happens if I promote the column to be a/the PK, too (a.k.a. identifying relationship)? As the column is now the PK, I must tag it with <code>@Id</code>:</p>\n\n<pre><code>@Id\n@ManyToOne\n@JoinColumn(name = \"...\")\nprivate OtherClass oc;\n</code></pre>\n\n<p>Now the question is:</p>\n\n<p>Are <code>@Id</code> + <code>@JoinColumn</code> the same as just <code>@PrimaryKeyJoinColumn</code>?:</p>\n\n<pre><code>@ManyToOne\n@PrimaryKeyJoinColumn(name = \"...\")\nprivate OtherClass oc;\n</code></pre>\n\n<p>If not, what's <code>@PrimaryKeyJoinColumn</code> there for?</p>\n    ","a":"\n<blockquote>\n  <p>What happens if I promote the column to be a/the PK, too (a.k.a. identifying relationship)? As the column is now the PK, I must tag it with @Id (...).</p>\n</blockquote>\n\n<p>This enhanced support of <strong>derived identifiers</strong> is actually part of the <a href=\"http://stackoverflow.com/questions/2435253/a-concise-clear-list-of-what-is-new-in-jpa2/2440516#2440516\">new stuff in JPA 2.0</a> (see the section <strong>2.4.1 Primary Keys Corresponding to Derived Identities</strong> in the JPA 2.0 specification), JPA 1.0 doesn't allow <code>Id</code> on a <code>OneToOne</code> or <code>ManyToOne</code>. With JPA 1.0, you'd have to use <code>PrimaryKeyJoinColumn</code> and also define a <code>Basic</code> <code>Id</code> mapping for the foreign key column.</p>\n\n<blockquote>\n  <p>Now the question is: are @Id + @JoinColumn the same as just @PrimaryKeyJoinColumn?</p>\n</blockquote>\n\n<p>You can obtain a similar result but using an <code>Id</code> on <code>OneToOne</code> or <code>ManyToOne</code> is <strong>much simpler</strong> and is the preferred way to map derived identifiers with JPA 2.0. <code>PrimaryKeyJoinColumn</code> might still be used in a <strong>JOINED</strong> inheritance strategy. Below the relevant section from the JPA 2.0 specification:</p>\n\n<blockquote>\n  <h3>11.1.40 PrimaryKeyJoinColumn Annotation</h3>\n  \n  <p>The <code>PrimaryKeyJoinColumn</code> annotation\n  specifies a primary key column that is\n  used as a foreign key to join to\n  another table.</p>\n  \n  <p>The <code>PrimaryKeyJoinColumn</code> annotation\n  is used to join the primary table of\n  an entity subclass in the <code>JOINED</code>\n  mapping strategy to the primary table\n  of its superclass; it is used within a\n  <code>SecondaryTable</code> annotation to join a\n  secondary table to a primary table;\n  and it may be used in a <code>OneToOne</code>\n  mapping in which the primary key of\n  the referencing entity is used as a\n  foreign key to the referenced\n  entity<sup>[108]</sup>.</p>\n  \n  <p>...</p>\n  \n  <p>If no <code>PrimaryKeyJoinColumn</code>\n  annotation is specified for a subclass\n  in the JOINED mapping strategy, the\n  foreign key columns are assumed to\n  have the same names as the primary key\n  columns of the primary table of the\n  superclass.</p>\n  \n  <p>...</p>\n  \n  <p><strong>Example:</strong> Customer and ValuedCustomer subclass</p>\n\n<pre><code>@Entity\n@Table(name=\"CUST\")\n@Inheritance(strategy=JOINED)\n@DiscriminatorValue(\"CUST\")\npublic class Customer { ... }\n\n@Entity\n@Table(name=\"VCUST\")\n@DiscriminatorValue(\"VCUST\")\n@PrimaryKeyJoinColumn(name=\"CUST_ID\")\npublic class ValuedCustomer extends Customer { ... }\n</code></pre>\n  \n  <p><sub>[108] <strong>The derived id mechanisms\n  described in section 2.4.1.1 are now\n  to be preferred over\n  <code>PrimaryKeyJoinColumn</code> for the\n  OneToOne mapping case.</strong></sub></p>\n</blockquote>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://en.wikibooks.org/wiki/Java_Persistence/Identity_and_Sequencing#Primary_Keys_through_OneToOne_and_ManyToOne_Relationships\" rel=\"nofollow noreferrer\">Primary Keys through OneToOne Relationships</a></li>\n</ul>\n\n<hr>\n\n<blockquote>\n  <p>This source <a href=\"http://weblogs.java.net/blog/felipegaucho/archive/2009/10/24/jpa-join-table-additional-state\" rel=\"nofollow noreferrer\">http://weblogs.java.net/blog/felipegaucho/archive/2009/10/24/jpa-join-table-additional-state</a> states that using @ManyToOne and @Id works with JPA 1.x. Who's correct now?</p>\n</blockquote>\n\n<p>The author is using a pre release <strong>JPA 2.0</strong> compliant version of EclipseLink (version <a href=\"http://kenai.com/projects/puj/sources/arena/revision/188\" rel=\"nofollow noreferrer\">2.0.0-M7</a> at the time of the article) to write an article about JPA 1.0(!). This article is misleading, the author is using something that is <strong>NOT</strong> part of JPA 1.0.</p>\n\n<p>For the record, support of <code>Id</code> on <code>OneToOne</code> and <code>ManyToOne</code> has been added in EclipseLink 1.1 (see <a href=\"http://www.eclipse.org/forums/index.php?t=msg&amp;S=76391a8b637ac8124704d1775fce0fea&amp;th=124643&amp;goto=381663#msg_381663\" rel=\"nofollow noreferrer\">this message</a> from <a href=\"http://wiki.eclipse.org/User:James.sutherland.oracle.com\" rel=\"nofollow noreferrer\">James Sutherland</a>, EclipseLink comitter and main contributor of the <a href=\"http://en.wikibooks.org/wiki/Java_Persistence\" rel=\"nofollow noreferrer\">Java Persistence</a> wiki book). But let me insist, this is <strong>NOT</strong> part of JPA 1.0.</p>\n    "},{"t":"Hibernate Criteria Restrictions AND / OR combination","l":"http://stackoverflow.com/questions/8126589/hibernate-criteria-restrictions-and-or-combination","q":"\n\n<p>How would I achieve this using Hibernate Restrictions?</p>\n\n<pre><code>(((A='X') and (B in('X',Y))) or ((A='Y') and (B='Z')))\n</code></pre>\n    ","a":"\n<p>think works </p>\n\n<pre><code>Criteria criteria = getSession().createCriteria(clazz); \nCriterion rest1= Restrictions.and(Restrictions.eq(A, \"X\"), \n           Restrictions.in(\"B\", Arrays.asList(\"X\",Y)));\nCriterion rest2= Restrictions.and(Restrictions.eq(A, \"Y\"), \n           Restrictions.eq(B, \"Z\"));\ncriteria.add(Restrictions.or(rest1, rest2));\n</code></pre>\n    "},{"t":"JPQL Create new Object In Select Statement - avoid or embrace?","l":"http://stackoverflow.com/questions/2355728/jpql-create-new-object-in-select-statement-avoid-or-embrace","q":"\n\n<p>I've learnt recently that it is possible to create new objects in JPQL statements as follows:</p>\n\n<pre><code>select new Family(mother, mate, offspr)\nfrom DomesticCat as mother\n    join mother.mate as mate\n    left join mother.kittens as offspr\n</code></pre>\n\n<p>Is this something to be avoided or rather to embrace? When is usage of this feature justified in the light of good practices?</p>\n    ","a":"\n<p><strong>Don't avoid it</strong>, the SELECT NEW is there because there are perfectly valid use cases for it as reminded in the <em>§10.2.7.2. JPQL Constructor Expressions in the SELECT Clause</em> of the <a href=\"http://docs.oracle.com/cd/E12839_01/apirefs.1111/e13946/ejb3_langref.html#ejb3_langref_constructor\" rel=\"nofollow noreferrer\">EJB 3.0 JPA Specification</a>: </p>\n\n<blockquote>\n  <p>A constructor may be used in the\n  SELECT list to return one or more Java\n  instances. The specified class is not\n  required to be an entity or to be\n  mapped to the database. <strong>The\n  constructor name must be fully\n  qualified.</strong></p>\n  \n  <p>If an entity class name is specified\n  in the SELECT NEW clause, the\n  resulting entity instances are in the\n  new state.</p>\n\n<pre><code>SELECT NEW com.acme.example.CustomerDetails(c.id, c.status, o.count)\nFROM Customer c JOIN c.orders o\nWHERE o.count &gt; 100\n</code></pre>\n</blockquote>\n\n<p>In short, use the SELECT NEW when you don't want to retrieve a full entity or a full graph of objects in a type safe way (as opposed to an <code>Object[]</code>). Whether you map the result of a query in an entity class or a non mapped class will depend on your select. A typical example would be a list screen (where you might not want all the details).</p>\n\n<p>In other words, don't use it everywhere but don't forbid its use (few things are only black or white).</p>\n    "},{"t":"How to remove entity with ManyToMany relationship in JPA (and corresponding join table rows)?","l":"http://stackoverflow.com/questions/1082095/how-to-remove-entity-with-manytomany-relationship-in-jpa-and-corresponding-join","q":"\n\n<p>Let's say I have two entities: Group and User. Every user can be member of many groups and every group can have many users.</p>\n\n<pre><code>@Entity\npublic class User {\n    @ManyToMany\n    Set&lt;Group&gt; groups;\n    //...\n}\n\n@Entity\npublic class Group {\n    @ManyToMany(mappedBy=\"groups\")\n    Set&lt;User&gt; users;\n    //...\n}\n</code></pre>\n\n<p>Now I want to remove a group (let's say it has many members).</p>\n\n<p>Problem is that when I call EntityManager.remove() on some Group, JPA provider (in my case Hibernate) <strong>does not remove rows from join table</strong> and delete operation fails due to foreign key constrains. Calling remove() on User works fine (I guess this has something to do with owning side of relationship).</p>\n\n<p>So how can I remove a group in this case? </p>\n\n<p>Only way I could come up with is to load all users in the group, then for every user remove current group from his groups and update user. But it seems ridiculous to me to call update() on every user from the group just to be able to delete this group.</p>\n    ","a":"\n<ul>\n<li>The ownership of the relation is determined by where you place the 'mappedBy' attribute to the annotation. The entity you put 'mappedBy' is the one which is NOT the owner. There's no chance for both sides to be owners. If you don't have a 'delete user' use-case you could simply move the ownership to the <code>Group</code> entity, as currently the <code>User</code> is the owner.</li>\n<li>On the other hand, you haven't been asking about it, but one thing worth to know. The <code>groups</code> and <code>users</code> are not combined with each other. I mean, after deleting User1 instance from Group1.users, the User1.groups collections is not changed automatically (which is quite surprising for me),</li>\n<li>All in all, I would suggest you decide who is the owner. Let say the <code>User</code> is the owner. Then when deleting a user the relation user-group will be updated automatically. But when deleting a group you have to take care of deleting the relation yourself like this:</li>\n</ul>\n\n<hr>\n\n<pre><code>entityManager.remove(group)\nfor (User user : group.users) {\n     user.groups.remove(group);\n}\n...\n// then merge() and flush()\n</code></pre>\n    "},{"t":"Using Hibernate UUIDGenerator via annotations","l":"http://stackoverflow.com/questions/6356834/using-hibernate-uuidgenerator-via-annotations","q":"\n\n<p>I'm using my uuid as following:</p>\n\n<pre><code>@Id\n@GeneratedValue(generator = \"uuid\")\n@GenericGenerator(name = \"uuid\", strategy = \"uuid\")\n@Column(name = \"uuid\", unique = true)\nprivate String uuid;\n</code></pre>\n\n<p>but I'm getting a smart Hibernate warning:</p>\n\n<blockquote>\n  <p>Using\n  org.hibernate.id.UUIDHexGenerator\n  which does not generate IETF RFC 4122\n  compliant UUID values; consider using\n  org.hibernate.id.UUIDGenerator instead</p>\n</blockquote>\n\n<p>So I want to switch to <code>org.hibernate.id.UUIDGenerator</code>, now my question is how should I tell it to Hibernate's generator. I saw some guy used it as a \"hibernate-uuid\" - so this is what I've tried, but with negative result:</p>\n\n<pre><code>@Id\n@GeneratedValue(generator = \"hibernate-uuid\")\n@GenericGenerator(name = \"hibernate-uuid\", strategy = \"hibernate-uuid\")\n@Column(name = \"uuid\", unique = true)\nprivate String uuid;\n</code></pre>\n    ","a":"\n<p>It should be <code>uuid2</code>:</p>\n\n<pre><code>...\n@GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n...\n</code></pre>\n\n<p>See <a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/mapping.html#d0e5294\">5.1.2.2.1. Various additional generators</a>.</p>\n    "},{"t":"Hibernate, @SequenceGenerator and allocationSize","l":"http://stackoverflow.com/questions/12745751/hibernate-sequencegenerator-and-allocationsize","q":"\n\n<p>We all know the default behaviour of Hibernate when using <code>@SequenceGenerator</code> - it increases real database sequence by <strong>one</strong>, multiple this value by 50 (default <code>allocationSize</code> value) - and then uses this value as entity ID.</p>\n\n<p>This is incorrect behaviour and conflicts with <a href=\"http://docs.oracle.com/javaee/5/api/javax/persistence/SequenceGenerator.html\">specification</a> which says:</p>\n\n<blockquote>\n  <p>allocationSize - (Optional) The amount to increment by when allocating sequence numbers from the sequence.</p>\n</blockquote>\n\n<p>To be clear: I do not bother about gaps between generated IDs.</p>\n\n<p>I care about IDs that are <strong>not consistent</strong> with underlying database sequence. For example: any other application (that e.g. uses plain JDBC) may want to insert new rows under IDs obtained from sequence - but all those values may be already used by Hibernate! Madness.</p>\n\n<p>Do somebody know any solution to this problem (without setting <code>allocationSize=1</code> and thus degrading performance)?</p>\n\n<p><strong>EDIT:</strong><br>\nTo make things clear.\nIf last inserted record had ID = <code>1</code>, then HB use values <code>51, 52, 53...</code> for its new entities BUT at the same time: sequence's value in database will be set to <code>2</code>. Which can easily leads to errors when other applications are using that sequence.  <br></p>\n\n<p>On the othe hand: specification says (in my understanding) that database sequence should have been set to <code>51</code> and in the meantime HB should use values from range  <code>2, 3 ... 50</code></p>\n\n<p><br><strong>UPDATE:</strong>  <br>\nAs Steve Ebersole mentioned below: the behaviour described by me (and also the most intuitive for many) can be enabled by setting <code>hibernate.id.new_generator_mappings=true</code>.</p>\n\n<p>Thanks all of You.</p>\n\n<p><strong>UPDATE 2:</strong><br>\nFor future readers, below you can find a working example.</p>\n\n<pre><code>@Entity\n@Table(name = \"users\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"USERS_SEQ\")\n    @SequenceGenerator(name = \"USERS_SEQ\", sequenceName = \"SEQUENCE_USERS\")\n    private Long id;\n}\n</code></pre>\n\n<p>persistence.xml</p>\n\n<pre><code>&lt;persistence-unit name=\"testPU\"&gt;\n  &lt;properties&gt;\n    &lt;property name=\"hibernate.id.new_generator_mappings\" value=\"true\" /&gt;\n  &lt;/properties&gt;\n&lt;/persistence-unit&gt;\n</code></pre>\n    ","a":"\n<p>To be absolutely clear... what you describe does <em>not</em> conflict with the spec in any way.  The spec talks about the values Hibernate assigns to your entities, not the values actually stored in the database sequence.</p>\n\n<p>However, there is the option to get the behavior you are looking for.  First see my reply on <a href=\"http://stackoverflow.com/questions/12737092/is-there-a-way-to-dynamically-choose-a-generatedvalue-strategy-using-jpa-annota\">Is there a way to dynamically choose a @GeneratedValue strategy using JPA annotations and Hibernate?</a>  That will give you the basics.  As long as you are set up to use that SequenceStyleGenerator, Hibernate will interpret <code>allocationSize</code> using the \"pooled optimizer\" in the SequenceStyleGenerator.  The \"pooled optimizer\" is for use with databases that allow an \"increment\" option on the creation of sequences (not all databases that support sequences support an increment).  Anyway, read up about the various optimizer strategies there.</p>\n    "},{"t":"How to force Hibernate to return dates as java.util.Date instead of Timestamp?","l":"http://stackoverflow.com/questions/9533935/how-to-force-hibernate-to-return-dates-as-java-util-date-instead-of-timestamp","q":"\n\n<p><strong>Situation</strong>:</p>\n\n<p>I have a persistable class with variable of java.util.Date type:</p>\n\n<pre><code>import java.util.Date;\n\n@Entity\n@Table(name = \"prd_period\")\n@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\npublic class Period extends ManagedEntity implements Interval {\n\n   @Column(name = \"startdate_\", nullable = false)\n   private Date startDate;\n\n}\n</code></pre>\n\n<p>Corresponding table in DB:</p>\n\n<pre><code>CREATE TABLE 'prd_period' (\n  'id_' bigint(20) NOT NULL AUTO_INCREMENT,\n ...\n  'startdate_' datetime NOT NULL\n)\n</code></pre>\n\n<p>Then I save my Period object to DB:</p>\n\n<pre><code>Period p = new Period();\nDate d = new Date();\np.setStartDate();\nmyDao.save(p);\n</code></pre>\n\n<p>After then if I'm trying to extract my object from DB, it is returned with variable startDate of Timestamp type - and all the places where I'm trying to use equals(...) are returning false.</p>\n\n<p><strong>Question</strong>: are there any means to force Hibernate to return dates as object of java.util.Date type instead of Timestamp without explicit modification of every such variable (e.g it must be able just work, without explicit modification of existed variables of java.util.Date type)?</p>\n\n<p><strong>NOTE:</strong></p>\n\n<p>I found number of explicit solutions, where annotations are used or setter is modified - but I have many classes with Date-variables - so I need some centralized solution and all that described below is not good enough:</p>\n\n<ol>\n<li><p><strong>Using annotation @Type:</strong> - java.sql.Date will be returned</p>\n\n<pre><code>@Column\n@Type(type=\"date\")\nprivate Date startDate;\n</code></pre></li>\n<li><p><strong>Using annotation @Temporal(TemporalType.DATE)</strong> - java.sql.Date will be returned</p>\n\n<pre><code>@Temporal(TemporalType.DATE)\n@Column(name=”CREATION_DATE”)\nprivate Date startDate;\n</code></pre></li>\n<li><p><strong>By modifying setter (deep copy)</strong> - java.util.Date will be returned</p>\n\n<pre><code>public void setStartDate(Date startDate) {\n    if (startDate != null) {\n        this.startDate = new Date(startDate.getTime());\n    } else {\n        this.startDate = null;\n    }\n}\n</code></pre></li>\n<li><p><strong>By creation of my own type:</strong> - java.util.Date will be returned</p></li>\n</ol>\n\n<p>Details are given here: \n<a href=\"http://blogs.sourceallies.com/2012/02/hibernate-date-vs-timestamp/\">http://blogs.sourceallies.com/2012/02/hibernate-date-vs-timestamp/</a></p>\n    ","a":"\n<p>So, I spent some time with this issue and found a solution. It is not pretty one, but at least a start point - maybe someone will supplement this with some useful comments.</p>\n\n<p><strong>Some info about mapping that I found in process:</strong></p>\n\n<ul>\n<li><p>Class that contains basic mapping of Hibernate types to property types is org.hibernate.type.TypeFactory. All this mappings are stored in unmodifiable map  </p>\n\n<pre><code>private static final Map BASIC_TYPES;\n...\nbasics.put( java.util.Date.class.getName(), Hibernate.TIMESTAMP );\n...\nBASIC_TYPES = Collections.unmodifiableMap( basics );\n</code></pre></li>\n</ul>\n\n<p>As you can see with java.util.Date type assosited with Hibernate type org.hibernate.type.TimestampType</p>\n\n<ul>\n<li><p>Next interesting moment - creation of Hibernate org.hibernate.cfg.Configuration - object that contains all info about mapped classes. This classes and their properties can be extracted like this:</p>\n\n<pre><code>Iterator clsMappings = cfg.getClassMappings();\nwhile(clsMappings.hasNext()){\n    PersistentClass mapping = (PersistentClass) clsMappings.next();\n    handleProperties(mapping.getPropertyIterator(), map);\n}\n</code></pre></li>\n<li><p>Vast majority of properties are the objects of org.hibernate.mapping.SimpleValue types. Our point of interest is the method SimpleValue.getType() - in this method is defined what type will be used to convert properties values back-and-forth while working with DB</p>\n\n<pre><code>Type result = TypeFactory.heuristicType(typeName, typeParameters);\n</code></pre></li>\n</ul>\n\n<p>At this point I understand that I am unable to modify BASIC_TYPES - so the only way - to replace SimpleValue object to the properties of java.util.Date types to my custom Object that will be able to know the exact type to convert.</p>\n\n<p><strong>The solution:</strong></p>\n\n<ul>\n<li><p>Create custom container entity manager factory by extending HibernatePersistence class and overriding its method createContainerEntityManagerFactory:</p>\n\n<pre><code>public class HibernatePersistenceExtensions extends HibernatePersistence {\n\n    @Override\n    public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info, Map map) {\n\n        if (\"true\".equals(map.get(\"hibernate.use.custom.entity.manager.factory\"))) {\n            return CustomeEntityManagerFactoryFactory.createCustomEntityManagerFactory(info, map);\n        } else {\n            return super.createContainerEntityManagerFactory(info, map);\n        }\n    }\n}\n</code></pre></li>\n<li><p>Create Hibernate configuration object, modify value ojects for java.util.Date properties and then create custom entity manager factory.</p>\n\n<pre><code>public class ReattachingEntityManagerFactoryFactory {\n\n\n    @SuppressWarnings(\"rawtypes\")\n    public static EntityManagerFactory createContainerEntityManagerFactory(\n    PersistenceUnitInfo info, Map map) {\n        Ejb3Configuration cfg = new Ejb3Configuration();\n\n        Ejb3Configuration configured = cfg.configure( info, map );\n\n        handleClassMappings(cfg, map);\n\n        return configured != null ? configured.buildEntityManagerFactory() : null;\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private static void handleClassMappings(Ejb3Configuration cfg, Map map) {\n        Iterator clsMappings = cfg.getClassMappings();\n        while(clsMappings.hasNext()){\n             PersistentClass mapping = (PersistentClass) clsMappings.next();\n             handleProperties(mapping.getPropertyIterator(), map);\n        }\n    } \n\n\n\n    private static void handleProperties(Iterator props, Map map) {\n\n        while(props.hasNext()){\n             Property prop = (Property) props.next();\n             Value value = prop.getValue();\n             if (value instanceof Component) {\n                 Component c = (Component) value;\n                 handleProperties(c.getPropertyIterator(), map);\n             } else {\n\n                 handleReturnUtilDateInsteadOfTimestamp(prop, map);\n\n             }\n         }\n\n    private static void handleReturnUtilDateInsteadOfTimestamp(Property prop, Map map) {\n        if (\"true\".equals(map.get(\"hibernate.return.date.instead.of.timestamp\"))) {\n            Value value = prop.getValue();\n\n            if (value instanceof SimpleValue) {\n                SimpleValue simpleValue = (SimpleValue) value;\n                String typeName = simpleValue.getTypeName();\n                if (\"java.util.Date\".equals(typeName)) {\n                    UtilDateSimpleValue udsv = new UtilDateSimpleValue(simpleValue);\n                    prop.setValue(udsv);\n                }\n            }\n        }\n    }\n\n}\n</code></pre></li>\n</ul>\n\n<p>As you can see I just iterate over every property and substitute SimpleValue-object for UtilDateSimpleValue for properties of type java.util.Date. This is very simple class - it implements the same interface as SimpleValue object, e.g org.hibernate.mapping.KeyValue. In constructor original SimpleValue object is passed - so every call to UtilDateSimpleValue is redirected to the original object with one exception - method getType(...) return my custom Type.</p>\n\n<pre><code>public class UtilDateSimpleValue implements KeyValue{\n\n    private SimpleValue value;\n\n    public UtilDateSimpleValue(SimpleValue value) {\n        this.value = value;\n    }\n\n    public SimpleValue getValue() {\n        return value;\n    }\n\n    @Override\n    public int getColumnSpan() {\n        return value.getColumnSpan();\n    }\n\n    ...\n\n    @Override\n    public Type getType() throws MappingException {\n        final String typeName = value.getTypeName();\n\n        if (typeName == null) {\n                throw new MappingException(\"No type name\");\n        }\n\n        Type result = new UtilDateUserType();\n\n        return result;\n    }\n    ...\n}\n</code></pre>\n\n<ul>\n<li><p>And the last step is implementation of UtilDateUserType. I just extend original org.hibernate.type.TimestampType and override its method get() like this:</p>\n\n<pre><code>public class UtilDateUserType extends TimestampType{\n\n    @Override\n    public Object get(ResultSet rs, String name) throws SQLException {\n        Timestamp ts = rs.getTimestamp(name);\n\n        Date result = null;\n        if(ts != null){\n            result = new Date(ts.getTime());\n        }\n\n        return result;\n    }\n}\n</code></pre></li>\n</ul>\n\n<p>That is all. A little bit tricky, but now every java.util.Date property is returned as java.util.Date without any additional modifications of existing code (annotations or modifying setters). As I find out in Hibernate 4 or above there is a much more easier way to substitute your own type (see details here: <a href=\"http://stackoverflow.com/questions/4725719/hibernate-typeresolver\">Hibernate TypeResolver</a>). Any suggestions or criticism are welcome.</p>\n    "},{"t":"f:convertDateTime displays wrong Date [duplicate]","l":"http://stackoverflow.com/questions/2689245/fconvertdatetime-displays-wrong-date","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/12351244/jsf-convertdatetime-renders-the-previous-day\" dir=\"ltr\">JSF convertDateTime renders the previous day</a>\n                <span class=\"question-originals-answer-count\">\n                    1 answer\n                </span>\n        </li>\n    </ul>\n</div>\n<p>In my Web Application I retrieve data using Hibernate and display it in a RichFaces dataTable.</p>\n\n<p>In my MySQL-table there is a field of type \"date\". When I print this field to the log in my Bean, it shows the correct date from database (e.g. 2010-04-21). But in the rich:dataTable it shows up like this: </p>\n\n<blockquote>\n  <p>4/20/10</p>\n</blockquote>\n\n<p><em>So there is a discrepancy of 1 day!</em></p>\n\n<p>I added the \"f:convertDateTime\" converter and set the \"type\" attribute to \"both\" in order to display time too. So now it shows:</p>\n\n<blockquote>\n  <p>4/20/10 10:00:00 PM</p>\n</blockquote>\n\n<p>The Code for \"f:convertDateTime\" I've used:</p>\n\n<pre><code>&lt;f:convertDateTime locale=\"locale.US\" type=\"both\" dateStyle=\"short\"/&gt;\n</code></pre>\n\n<p>So it seems like f:convertDateTime dreams up some time because there is no time information in the MySQL-table field!</p>\n\n<p><b>What am I doing wrong? What do I need to do to display the correct date?</b></p>\n\n<p>Thanks Tom</p>\n    ","a":"\n<pre><code>&lt;h:outputText id=\"dateId\" value=\"#{item.date}\"&gt;\n &lt;f:convertDateTime for=\"dateId\" type=\"date\" dateStyle=\"long\" locale=\"pl\"/&gt;   &lt;/h:outputText&gt;\n</code></pre>\n    "},{"t":"Difference between @OneToMany and @ElementCollection?","l":"http://stackoverflow.com/questions/8969059/difference-between-onetomany-and-elementcollection","q":"\n\n<p>What is the difference between using a <code>@OneToMany</code> and <code>@ElementCollection</code> annotation since both work on the one-to-many relationship?</p>\n    ","a":"\n<p>I believe @ElementCollection is mainly for mapping non-entities (embeddable or basic) while @OneToMany is used to map entities. So which one to use depend on what you want to achieve. </p>\n    "},{"t":"Case-insensitive search using Hibernate","l":"http://stackoverflow.com/questions/120588/case-insensitive-search-using-hibernate","q":"\n\n<p>I'm using Hibernate for ORM of my Java app to an Oracle database (not that the database vendor matters, we may switch to another database one day), and I want to retrieve objects from the database according to user-provided strings. For example, when searching for people, if the user is looking for people who live in 'fran', I want to be able to give her people in San Francisco.</p>\n\n<p>SQL is not my strong suit, and I prefer Hibernate's <code>Criteria</code> building code to hard-coded strings as it is. Can anyone point me in the right direction about how to do this in code, and if impossible, how the hard-coded SQL should look like?</p>\n\n<p>Thanks,</p>\n\n<p>Yuval =8-)</p>\n    ","a":"\n<p>For the simple case you describe, look at Restrictions.ilike(), which does a case-insensitive search.</p>\n\n<pre><code>Criteria crit = session.createCriteria(Person.class);\ncrit.add(Restrictions.ilike('town', '%fran%');\nList results = crit.list();\n</code></pre>\n    "},{"t":"Spring Hibernate - Could not obtain transaction-synchronized Session for current thread","l":"http://stackoverflow.com/questions/26203446/spring-hibernate-could-not-obtain-transaction-synchronized-session-for-current","q":"\n\n<p>I created an application with spring + hibernate, but I always get this error. This is my first application with hibernate, I read some guides but I can not solve this problem. Where am I doing wrong?</p>\n\n<p>This is the code of my application</p>\n\n<pre><code>ott 05, 2014 4:03:06 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\nInformazioni: Refreshing   org.springframework.context.support.ClassPathXmlApplicationContext@1eab16b: startup date  [Sun Oct 05 16:03:06 CEST 2014]; root of context hierarchy\nott 05, 2014 4:03:06 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nInformazioni: Loading XML bean definitions from class path resource [springConfig.xml]\nott 05, 2014 4:03:08 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt;\nINFO: HCANN000001: Hibernate Commons Annotations {4.0.5.Final}\nott 05, 2014 4:03:08 PM org.hibernate.Version logVersion\nINFO: HHH000412: Hibernate Core {4.3.6.Final}\nott 05, 2014 4:03:08 PM org.hibernate.cfg.Environment &lt;clinit&gt;\nINFO: HHH000206: hibernate.properties not found\nott 05, 2014 4:03:08 PM org.hibernate.cfg.Environment buildBytecodeProvider\nINFO: HHH000021: Bytecode provider name : javassist\nott 05, 2014 4:03:09 PM org.hibernate.dialect.Dialect &lt;init&gt;\nINFO: HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect\nott 05, 2014 4:03:09 PM org.hibernate.engine.transaction.internal.TransactionFactoryInitiator initiateService\nINFO: HHH000399: Using default transaction strategy (direct JDBC transactions)\nott 05, 2014 4:03:09 PM org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory &lt;init&gt;\nINFO: HHH000397: Using ASTQueryTranslatorFactory\nException in thread \"main\" org.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread\nat org.springframework.orm.hibernate4.SpringSessionContext.currentSession(SpringSessionContext.java:134)\nat org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014)\nat coreservlets.StudentDAOImpl.create(StudentDAOImpl.java:19)\nat coreservlets.MainApp.main(MainApp.java:14)\n</code></pre>\n\n<p>student.java</p>\n\n<pre><code>package coreservlets;\n\npublic class Student {\n\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public Integer getId(){return id;}//getId\n\n    public void setId(Integer id){this.id=id;}//setId\n\n    public String getName(){return name;}//getName\n\n    public void setName(String name){this.name=name;}//setName\n\n    public Integer getAge(){return age;}//getAge\n\n    public void setAge(Integer age){this.age=age;}//setAge\n\n}//Student\n</code></pre>\n\n<p>studentDAO.java</p>\n\n<pre><code>package coreservlets;\n\nimport org.hibernate.SessionFactory;\n\npublic interface StudentDAO {\n\n    public void setSessionFactory(SessionFactory sessionFactory);\n\n    public void create(String name,Integer age);\n\n}//StudentDAO\n</code></pre>\n\n<p>StudentDAOImpl.java</p>\n\n<pre><code>package coreservlets;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class StudentDAOImpl implements StudentDAO {\n\n    private SessionFactory sessionFactory;\n\n    @Autowired\n    public void setSessionFactory(SessionFactory sessionFactory){\n        this.sessionFactory=sessionFactory;\n    }//setSessionFactory\n\n    public void create(String name,Integer age){\n        Session session=sessionFactory.getCurrentSession();\n        Student student=new Student();\n        student.setName(name);\n        student.setAge(age);\n        session.save(student);\n    }//create\n\n}//StudentDAOImpl\n</code></pre>\n\n<p>MainApp.java</p>\n\n<pre><code>package coreservlets;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MainApp {\n\n    public static void main(String[] args) {\n\n        ApplicationContext context=new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\n        StudentDAOImpl student=(StudentDAOImpl) context.getBean(\"studentDAOImpl\");\n\n        student.create(\"Alessandro\", new Integer(33));\n\n\n    }//main\n\n}//MainApp\n</code></pre>\n\n<p>springConfig.xml</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:mvc=\"http://www.springframework.org/schema/mvc\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd\"&gt;\n\n&lt;context:annotation-config/&gt;\n\n&lt;context:component-scan base-package=\"coreservlets\"/&gt;\n\n&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"&gt;\n  &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/&gt;\n  &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/spring_hibernate\"/&gt;\n  &lt;property name=\"username\" value=\"root\"/&gt;\n  &lt;property name=\"password\" value=\"password\"/&gt;\n  &lt;property name=\"initialSize\" value=\"5\"/&gt;\n  &lt;property name=\"maxTotal\" value=\"10\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt;\n&lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n&lt;property name=\"hibernateProperties\"&gt;\n    &lt;value&gt;\n            hibernate.dialect=org.hibernate.dialect.MySQLDialect\n    &lt;/value&gt;\n&lt;/property&gt;\n\n&lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>sql</p>\n\n<pre><code>create table student\n(\nid integer not null auto_increment,\nname varchar(20) not null,\nage integer not null,\nprimary key(id)\n);\n</code></pre>\n    ","a":"\n<p>You must <strong>enable</strong> the transaction support (<code>&lt;tx:annotation-driven&gt;</code> or <code>@EnableTransactionManagement</code>) and <strong>declare</strong> the <code>transactionManager</code> and it should work through the <code>SessionFactory</code>.</p>\n\n<p>You must add <code>@Transactional</code> into your <code>@Repository</code></p>\n\n<p>With <code>@Transactional</code> in your <code>@Repository</code> Spring is able to apply transactional support into your repository.</p>\n\n<p>Your <code>Student</code> class has no the @javax.persistence.* annotations how <code>@Entity</code>, I am assuming the Mapping Configuration for that class has been defined through XML.</p>\n    "},{"t":"How do you add PostgreSQL Driver as a dependency in Maven?","l":"http://stackoverflow.com/questions/13242196/how-do-you-add-postgresql-driver-as-a-dependency-in-maven","q":"\n\n<p>I'm trying to develop a Java application with Maven while using Hibernate with Postgresql database for persistence. I don't understand how I'm supposed to connect the Postgresql drivers to my application. I get that you add dependencies in Maven's pom.xml file, which finds jars from a remote repository, but what about other jars?</p>\n    ","a":"\n<p>PostgreSQL drivers jars are included in Central Repository of Maven:</p>\n\n<ul>\n<li><a href=\"http://search.maven.org/#search%7Cga%7C1%7C%28g%3A%22org.postgresql%22%20OR%20g%3A%22postgresql%22%29%20AND%20a%3A%22postgresql%22\">List of included versions of PostgreSQL drivers.</a></li>\n</ul>\n\n<p>For PostgreSQL up to 9.1, use:</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>or for 9.2+</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p><em>(Thanks to @Caspar for the correction)</em></p>\n    "},{"t":"Connecting PostgreSQL 9.2.1 with Hibernate","l":"http://stackoverflow.com/questions/16572039/connecting-postgresql-9-2-1-with-hibernate","q":"\n\n<p>I have a blank Spring MVC project, and I've installed Hibernate and the PostgreSQL drivers using Maven.</p>\n\n<p>I'm running short on complete tutorials that show how to connect PostgreSQL with Hibernate.</p>\n\n<p>Any help here?</p>\n    ","a":"\n<p>This is a hibernate.cfg.xml for posgresql and it will help you with basic hibernate configurations for posgresql.</p>\n\n<pre><code>&lt;!DOCTYPE hibernate-configuration PUBLIC\n        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;\n\n&lt;hibernate-configuration&gt;\n    &lt;session-factory&gt;\n        &lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.driver_class\"&gt;org.postgresql.Driver&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.username\"&gt;postgres&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.password\"&gt;password&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.url\"&gt;jdbc:postgresql://localhost:5432/hibernatedb&lt;/property&gt;\n\n\n\n        &lt;property name=\"connection_pool_size\"&gt;1&lt;/property&gt;\n\n        &lt;property name=\"hbm2ddl.auto\"&gt;create&lt;/property&gt;\n\n        &lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n\n\n\n       &lt;mapping class=\"org.javabrains.sanjaya.dto.UserDetails\"/&gt;\n\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n    "},{"t":"What does the length attribute do when set on the @Column JPA annontation?","l":"http://stackoverflow.com/questions/2875149/what-does-the-length-attribute-do-when-set-on-the-column-jpa-annontation","q":"\n\n<p>What exactly does setting the length on a column do in JPA?</p>\n\n<pre><code>@Column(name = \"middle_name\", nullable = false, length = 32)\npublic String getMiddleName() {\n    return this.middleName;\n}\n</code></pre>\n\n<p>I understand that you can use the annotations to generate the database schema (DDL) based on the entity objects, but does length do any sort of check or truncation when persistence happens, or it solely used for schema creation?</p>\n\n<p>I also realize that JPA can sit on top of various implementations, the implementation I am concerned with in this case is Hibernate.</p>\n    ","a":"\n<blockquote>\n  <p>Does length do any sort of check or truncation when persistence happens, or it solely used for schema creation?</p>\n</blockquote>\n\n<p>The <a href=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Column.html#length%28%29\" rel=\"nofollow noreferrer\"><code>length</code></a> attribute of the <a href=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Column.html\" rel=\"nofollow noreferrer\"><code>Column</code></a> annotation is used to specify: </p>\n\n<blockquote>\n  <p>The column length. (Applies only if a string-valued column is used.)</p>\n</blockquote>\n\n<p>And is only used in the generated DDL. In your example, the resulting column would be generated as a <code>VARCHAR(32)</code> and trying to insert a longer string would result in an SQL error.</p>\n\n<hr>\n\n<p>For validation, you could add a <code>@Size(max=32)</code> <a href=\"http://docs.jboss.org/hibernate/stable/validator/reference/en/html/validator-usingvalidator.html#validator-usingvalidator-annotate\" rel=\"nofollow noreferrer\">constraint</a> from the Bean Validation API (<a href=\"http://jcp.org/en/jsr/detail?id=303\" rel=\"nofollow noreferrer\">JSR 303</a>). I provided a sample with a runnable test <a href=\"http://stackoverflow.com/questions/2725111/hibernate-onetoone-notnull/2726224#2726224\">here</a>.</p>\n\n<p>Providing both <code>Size</code> and <code>length</code> may seem redundant but according to the <a href=\"http://people.redhat.com/~ebernard/validation/#appendix-jpa\" rel=\"nofollow noreferrer\">Appendix D.</a> of the Bean Validation spec, generating Bean Validation-aware DDL is not mandatory for Persistence Providers. So use <code>length</code> for the DDL, <code>@Size</code> for validation. </p>\n\n<p>In case you're interested, just put a Bean Validation implementation on the classpath with JPA 2.0. With JPA 1.0, refer to this <a href=\"http://stackoverflow.com/questions/2410074/using-hibernate-validator-with-jpa-and-spring/2410160#2410160\">previous answer</a>.</p>\n    "},{"t":"Hibernate or JDBC","l":"http://stackoverflow.com/questions/1353137/hibernate-or-jdbc","q":"\n\n<p>I have a thick client, java swing application with a schema of 25 tables and ~15 JInternalFrames (data entry forms for the tables).  I need to make a design choice of straight JDBC or ORM (hibernate with spring framework in this case) for DBMS interaction.  Build out of the application will occur in the future.</p>\n\n<p>Would hibernate be overkill for a project of this size?  An explanation of either yes or no answer would be much appreciated (or even a different approach if warranted).</p>\n\n<p>TIA.</p>\n    ","a":"\n<p>Good question with no single simple answer.</p>\n\n<p>I used to be a big fan of Hibernate after using it in multiple projects over multiple years. \nI used to believe that any project should default to hibernate.</p>\n\n<p>Today I am not so sure.</p>\n\n<p>Hibernate (and JPA) is great for some things, especially early in the development cycle.\nIt is much faster to get to something working with Hibernate than it is with JDBC.\nYou get a lot of features for free - caching, optimistic locking and so on.</p>\n\n<p>On the other hand it has some hidden costs. <strong>Hibernate is deceivingly simple when you start</strong>. Follow some tutorial, put some annotations on your class - and you've got yourself persistence. But it's not simple and to be able to write good code in it requires good understanding of both it's internal workings and database design. If you are just starting you may not be aware of some issues that may bite you later on, so here is an incomplete list.</p>\n\n<p><strong>Performance</strong></p>\n\n<p>The runtime performance is good enough, I have yet to see a situation where hibernate was the reason for poor performance in <em>production</em>. The problem is the startup performance and how it affects your unit tests time and development performance. When hibernate loads it analyzes all entities and does a lot of pre-caching - it can take about 5-10-15 seconds for a not very big application. So your 1 second unit test is going to take 11 secods now. Not fun.</p>\n\n<p><strong>Database Independency</strong></p>\n\n<p>It is very cool as long as you don't need to do some fine tuning on the database.</p>\n\n<p><strong>In-memory Session</strong></p>\n\n<p>For every transaction Hibernate will store an object in memory for every database row it \"touches\". It's a nice optimization when you are doing some simple data entry. If you need to process lots of objects for some reason though, it can seriously affect performance, unless you explicitly and carefully clean up the in-memory session on your own.</p>\n\n<p><strong>Cascades</strong></p>\n\n<p>Cascades allow you to simplify working with object graphs. For example if you have a root object and some children and you save root object, you can configure hibernate to save children as well. The problem starts when your object graph grow complex. Unless you are extremely careful and have a good understanding of what goes on internally, it's easy to mess this up. And when you do it is very hard to debug those problems.</p>\n\n<p><strong>Lazy Loading</strong></p>\n\n<p>Lazy Loading means that every time you load an object, hibernate will not load all it's related objects but instead will provide place holders which will be resolved as soon as you try to access them. Great optimization right? It is, except you need to be aware of this behaviour otherwise you will get cryptic errors. Google \"LazyInitializationException\" for an example. And be careful with performance. Depending on the order of how you load your objects and your object graph you may hit \"n+1 selects problem\". Google it for more information.</p>\n\n<p><strong>Schema Upgrades</strong></p>\n\n<p>Hibernate allows easy schema changes by just refactoring java code and restarting. It's great when you start. But then you release version one. And unless you want to lose your customers you need to provide them schema upgrade scripts. Which means no more simple refactoring as all schema changes must be done in SQL. </p>\n\n<p><strong>Views and Stored Procedures</strong></p>\n\n<p>Hibernate requires exclusive write access to the data it works with. Which means you can't really use views, stored procedures and triggers as those can cause changes to data with hibernate not aware of them. You can have some external processes writing data to the database in a separate transactions. But if you do, your cache will have invalid data. Which is one more thing to care about.</p>\n\n<p><strong>Single Threaded Sessions</strong></p>\n\n<p>Hibernate sessions are single threaded. Any object loaded through a session can only be accessed (including reading) from the same thread. This is acceptable for server side applications but might complicate things unnecessary if you are doing GUI based application.</p>\n\n<p>I guess my point is that <strong>there are no free meals.</strong></p>\n\n<p>Hibernate is a good tool, but it's a complex tool, and it requires time to understand it properly. If you or your team members don't have such knowledge it might be simpler and faster to go with pure JDBC (or Spring JDBC) for a single application. On the other hand if you are willing to invest time into learning it (including learning by doing and debugging) than in the future you will be able to understand the tradeoffs better.</p>\n    "},{"t":"How to solve lazy initialization exception using JPA and Hibernate as provider","l":"http://stackoverflow.com/questions/578433/how-to-solve-lazy-initialization-exception-using-jpa-and-hibernate-as-provider","q":"\n\n<p>I am working on a project for a customer who wants to use lazy initialization.\nThey always get \"lazy initialization exception\" when mapping classes with the default lazy loading mode.</p>\n\n<pre><code>@JoinTable(name = \"join_profilo_funzionalita\", joinColumns = {@JoinColumn(name =    \"profilo_id\", referencedColumnName = \"profilo_id\")}, inverseJoinColumns = {@JoinColumn(name = \"funzionalita_id\", referencedColumnName = \"funzionalita_id\")})\n//@ManyToMany(fetch=FetchType.EAGER) - no exceptions if uncommented\n@ManyToMany \nprivate Collection&lt;Funzionalita&gt; funzionalitaIdCollection;\n</code></pre>\n\n<p>Is there a standard pattern using JPA classes to avoid this error?</p>\n\n<p>Snippets are welcome, thanks a lot for your time. </p>\n    ","a":"\n<p><a href=\"https://vladmihalcea.com/2016/09/13/the-best-way-to-handle-the-lazyinitializationexception/\" rel=\"nofollow\">The best way to solve the LazyInitializationException</a> is to use the JOIN FETCH directive in your entity queries. </p>\n\n<p><a href=\"https://vladmihalcea.com/2014/12/15/eager-fetching-is-a-code-smell/\" rel=\"nofollow\">EAGER loading</a> is bad for performance. Also, there are anti-patterns such as:</p>\n\n<ul>\n<li><a href=\"https://vladmihalcea.com/2016/05/30/the-open-session-in-view-anti-pattern/\" rel=\"nofollow\">Open Session in View</a></li>\n<li><a href=\"https://vladmihalcea.com/2016/09/05/the-hibernate-enable_lazy_load_no_trans-anti-pattern/\" rel=\"nofollow\"><code>hibernate.enable_lazy_load_no_trans</code></a></li>\n</ul>\n\n<p>Which you should never use since they either require the database connection to be open for the UI rendering (Open Session in View), or a database connection is needed for every lazy association that is fetched outside of the initial Persistence Context (<code>hibernate.enable_lazy_load_no_trans</code>).</p>\n\n<p>Sometimes, you don't even need entities, and a DTO projection is even better.\nYou should fetch entities only when you need to modify them. For read-only transactions, DTO projections are better.</p>\n    "},{"t":"JPA, Mysql Blob returns data too long","l":"http://stackoverflow.com/questions/3503841/jpa-mysql-blob-returns-data-too-long","q":"\n\n<p>I've got some <code>byte[]</code> fields in my entities, e.g.:</p>\n\n<pre><code>@Entity\npublic class ServicePicture implements Serializable {\n    private static final long serialVersionUID = 2877629751219730559L;\n    // seam-gen attributes (you should probably edit these)\n    @Id\n    @GeneratedValue\n    private Long id;\n    private String description;\n\n    @Lob\n    @Basic(fetch = FetchType.LAZY)\n    private byte[] picture;\n</code></pre>\n\n<p>On my database schema the field is set to <code>BLOB</code> so this should be fine. Anyway: Everytime when I try to insert a picture or pdf - nothing bigger than <code>1mb</code>, I only recieve this</p>\n\n<pre><code>16:52:27,327 WARN  [JDBCExceptionReporter] SQL Error: 0, SQLState: 22001\n16:52:27,327 ERROR [JDBCExceptionReporter] Data truncation: Data too long for column 'picture' at row 1\n16:52:27,328 ERROR [STDERR] javax.persistence.PersistenceException: org.hibernate.exception.DataException: could not insert: [de.ac.dmg.productfinder.entity.ServicePicture]\n16:52:27,328 ERROR [STDERR]     at org.hibernate.ejb.AbstractEntityManagerImpl.throwPersistenceException(AbstractEntityManagerImpl.java:629)\n16:52:27,328 ERROR [STDERR]     at org.hibernate.ejb.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:218)\n16:52:27,328 ERROR [STDERR]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n16:52:27,328 ERROR [STDERR]     at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n16:52:27,328 ERROR [STDERR]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n16:52:27,328 ERROR [STDERR]     at java.lang.reflect.Method.invoke(Unknown Source)\n16:52:27,328 ERROR [STDERR]     at org.jboss.seam.persistence.EntityManagerInvocationHandler.invoke(EntityManagerInvocationHandler.java:46)\n16:52:27,328 ERROR [STDERR]     at $Proxy142.persist(Unknown Source)\n</code></pre>\n\n<p>I've checked my MySQL cnf and the <code>max_allowed</code>param is set to <code>16M</code> - am I missing something?</p>\n    ","a":"\n<p>It all depends on the column type used for the <code>picture</code> column. Depending on your needs, use a:</p>\n\n<ul>\n<li><code>TINYBLOB</code>: maximum length of 255 bytes</li>\n<li><code>BLOB</code>: maximum length of 65,535 bytes</li>\n<li><code>MEDIUMBLOB</code>: maximum length of 16,777,215 bytes</li>\n<li><code>LONGBLOB</code>: maximum length of 4,294,967,295 bytes</li>\n</ul>\n\n<p>Note that if you generate your table from the JPA annotations, you can \"control\" the type MySQL will use by specifying the <code>length</code> attribute of the <code>Column</code>, for example:</p>\n\n<pre><code>@Lob @Basic(fetch = FetchType.LAZY)\n@Column(length=100000)\nprivate byte[] picture;\n</code></pre>\n\n<p>Depending on the <code>length</code>, you'll get:</p>\n\n<pre><code>       0 &lt; length &lt;=      255  --&gt;  `TINYBLOB`\n     255 &lt; length &lt;=    65535  --&gt;  `BLOB`\n   65535 &lt; length &lt;= 16777215  --&gt;  `MEDIUMBLOB`\n16777215 &lt; length &lt;=    2³¹-1  --&gt;  `LONGBLOB`\n</code></pre>\n    "},{"t":"Spring hibernate template when to use and why?","l":"http://stackoverflow.com/questions/4067775/spring-hibernate-template-when-to-use-and-why","q":"\n\n<p>Greetings,\nCurrently developing small web service application where response from web service (using CXF + Spring) processed and saved to database. To work with database I am using Hibernate(3.5). Browsing some Hibernate + Spring example on web, I often can see the usage of HibernateTemplate so I am a bit confused about this moment and wanted to ask:</p>\n\n<p>Do you use HibernateTemplate in your Hibernate3 applications? \nWhen does HibernateTemplate can make your development life better and based on what points can I decide do I need to use it or not ? </p>\n\n<p>Thanks. </p>\n    ","a":"\n<p>All spring templates (hibernate, jdbc, rest, jpa etc.) have the same pros and cons:</p>\n\n<p><strong>Pro:</strong> They perform common setup routines for you, let you skip the boilerplate and concentrate on the logic you want.</p>\n\n<p><strong>Con:</strong> you are coupling your application tightly to the spring framework. For this reason, Spring recommends that <code>HibernateTemplate</code> no longer be used.</p>\n\n<p>Specifically, what <code>HibernateTemplate</code> did for you was to automatically open and close sessions and commit or rollback transactions after your code executed. However, all of this can be achieved in an aspect-oriented way using Spring's <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#transaction-declarative\" rel=\"nofollow\">Declarative Transaction Management</a>.</p>\n\n<p><strong>Reference:</strong></p>\n\n<ul>\n<li>Spring Reference: <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate\" rel=\"nofollow\">ORM: Hibernate</a> for the current suggested Spring Hibernate usage patterns</li>\n<li>Spring Reference: <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/classic-spring.html#orm-hibernate-template\" rel=\"nofollow\">Classic Spring Usage: HibernateTemplate</a></li>\n</ul>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>As of Spring 3.1 (and newer versions), <a href=\"https://jira.springsource.org/browse/SPR-8096\" rel=\"nofollow\"><code>HibernateTemplate</code> has been removed</a>. See <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/orm.html#orm-hibernate\" rel=\"nofollow\">Hibernate</a> for the currently suggested usage patterns.</p>\n    "},{"t":"How can I create a foreign key constraint using hibernate annotations?","l":"http://stackoverflow.com/questions/15426736/how-can-i-create-a-foreign-key-constraint-using-hibernate-annotations","q":"\n\n<p>I am trying to use hibernate annotation for writing a model class for my database tables.</p>\n\n<p>I have two tables each having a primary key User and Question. </p>\n\n<pre><code>@Entity\n@Table(name=\"USER\")\npublic class User \n{\n    @Id\n    @Column(name=\"user_id\")\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private Long id;\n\n    @Column(name=\"username\")\n    private String username;\n\n    // getter and setter\n}\n</code></pre>\n\n<p>Question Table.</p>\n\n<pre><code>@Entity\n@Table(name=\"QUESTION\")\npublic class Questions extends BaseEntity{\n\n    @Id\n    @Column(name=\"question_id\")\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int id;\n\n    @Column(name=\"question_text\")\n    private String question_text;\n\n    // getter and setter\n\n}\n</code></pre>\n\n<p>And I have one more table, UserAnswer, which has userId and questionId as foreign keys from the above two tables.</p>\n\n<p>But I am unable to find how I can reference these constraints in the UserAnswer table.</p>\n\n<pre><code>@Entity\n@Table(name=\"UserAnswer \")\npublic class UserAnswer \n{\n\n    @Column(name=\"user_id\")\n    private User user;\n\n    //@ManyToMany\n    @Column(name=\"question_id\")\n    private Questions questions ;\n\n    @Column(name=\"response\")\n    private String response;\n\n    //getter and setter \n}\n</code></pre>\n\n<p>Please help me achieve this?\nThanks in advance.</p>\n    ","a":"\n<p><code>@Column</code> is not the appropriate annotation. You don't want to store a whole User or Question in a column. You want to create an association between the entities. Start by renaming <code>Questions</code> to <code>Question</code>, since an instance represents a single question, and not several ones. Then create the association:</p>\n\n<pre><code>@Entity\n@Table(name = \"UserAnswer\")\npublic class UserAnswer {\n\n    // this entity needs an ID:\n    @Id\n    @Column(name=\"useranswer_id\")\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"question_id\")\n    private Question question;\n\n    @Column(name = \"response\")\n    private String response;\n\n    //getter and setter \n}\n</code></pre>\n\n<p>The <a href=\"http://docs.jboss.org/hibernate/core/4.2/manual/en-US/html_single\">Hibernate documentation</a> explains that. Read it. And also read the javadoc of the annotations.</p>\n    "},{"t":"Hibernate Union alternatives","l":"http://stackoverflow.com/questions/201023/hibernate-union-alternatives","q":"\n\n<p>What alternatives do I have to implement a union query using hibernate? I know hibernate does not support union queries at the moment, right now the only way I see to make a union is to use a view table.</p>\n\n<p>The other option is to use plain jdbc, but this way I would loose all my example/criteria queries goodies, as well as the hibernate mapping validation that hibernate performs against the tables/columns.</p>\n    ","a":"\n<p>Use VIEW. The same classes can be mapped to different tables/views using entity name, so you won't even have much of a duplication. Being there, done that, works OK.</p>\n\n<p>Plain JDBC has another hidden problem: it's unaware of Hibernate session cache, so if something got cached till the end of the transaction and not flushed from Hibernate session, JDBC query won't find it. Could be very puzzling sometimes.</p>\n    "},{"t":"Could not serialize object cause of HibernateProxy","l":"http://stackoverflow.com/questions/13459718/could-not-serialize-object-cause-of-hibernateproxy","q":"\n\n<p>I am getting the following error response from the server.</p>\n\n<blockquote>\n  <p>HTTP Status 500 -</p>\n  \n  <p>type Exception report</p>\n  \n  <p>message</p>\n  \n  <p>descriptionThe server encountered an internal error () that prevented\n  it from fulfilling this request.</p>\n  \n  <p>exception</p>\n  \n  <p>javax.servlet.ServletException:\n  java.lang.UnsupportedOperationException: Attempted to serialize\n  java.lang.Class: org.hibernate.proxy.HibernateProxy. Forgot to\n  register a type adapter?</p>\n  \n  <p>root cause</p>\n  \n  <p>java.lang.UnsupportedOperationException: Attempted to serialize\n  java.lang.Class: org.hibernate.proxy.HibernateProxy. Forgot to\n  register a type adapter?</p>\n</blockquote>\n\n<p>From Java debugger:</p>\n\n<pre><code>org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer@7632012e\n</code></pre>\n\n<p>I am using Gson to convert my Java objects to JSON. Below I have pasted some of my code.</p>\n\n<p>This is my resource:</p>\n\n<pre><code>@Stateless\n@LocalBean\n@Path(\"/autos\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class AutoResource {\n\n    @EJB\n    private CarAssembler warehouse;\n    @Context\n    private UriInfo uriInfo;\n\n    @GET\n    public Response allAutos() {\n        // Building a context, lots of code...\n        // Creating a Gson instance and configures it...\n\n        final Auto auto = warehouse.list(context);\n        final String autoJson = gson.toJson(auto);\n\n        return Response.ok(autoJson).build();\n    }\n}\n</code></pre>\n\n<p>The CarAssembler is just an service which invokes a repository. I have not pasted the code of the service here.</p>\n\n<p>Repository:</p>\n\n<pre><code>@Override\npublic Question findById(final int id, final FetchType fetchType) {\n\n    final Auto question = getEntityManager().find(Auto.class, id);\n\n    if (fetchType == FetchType.LAZY) {\n        return auto;\n    }\n\n    Hibernate.initialize(auto.getManufacturer());\n    Hibernate.initialize(auto.getAssemblyHouse());\n\n    return auto;\n}\n</code></pre>\n\n<p>As you see, I provide both lazy and eager loading of objects. I use Hibernate.initialize to eager fetch JPA associations. However, the question is how I can fix the proxy error I am getting. Why come there is only AssemblyHouse that is still attached to JavaAssist, while Manufacturer is not (I have seen the type in Java Debugger). How do I know when to unproxy objects? Should I unproxy all associations this auto may have? And in which layer of my code? Does it affect the performance of my application when I unproxy? Are there other solutions? I see from the error message that I can make a type adapter. Yes, I could but then I have to do that for all domain objects to be sure that conversion is done correctly. Maybe other objects in my domain starts failing when I try to convert it into JSON representation too, but I don't know when or why. Is it just luck that the other objects are fine? </p>\n\n<p>This is the way I am unproxing objects, but I have not implemented it yet, because I don't know if this is good or bad, and in what layer to do this, and when I should do it. Should I unproxy objects all the time?</p>\n\n<pre><code>public class HibernateUtilities {\n\n    public static &lt;T&gt; T unproxy(T proxy) {\n        if (proxy == null) {\n            return null;\n        }\n\n        if (proxy instanceof HibernateProxy) {\n            Hibernate.initialize(proxy);\n\n            HibernateProxy hibernateProxy = (HibernateProxy) proxy;\n            T unproxiedObject = (T) hibernateProxy.getHibernateLazyInitializer().getImplementation();\n\n            return unproxiedObject;\n        }\n\n        return proxy;\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Stacktrace as requested:</p>\n\n<pre>[#|2012-11-22T17:17:13.285+0100|WARNING|glassfish3.1.2|javax.enterprise.system.container.web.com.sun.enterprise.web|_ThreadID=71;_ThreadName=Thread-8;|StandardWrapperValve[javax.ws.rs.core.Application]:\nPWC1406: Servlet.service() for servlet javax.ws.rs.core.Application\nthrew exception java.lang.UnsupportedOperationException: Attempted to\nserialize java.lang.Class: org.hibernate.proxy.HibernateProxy. Forgot\nto register a type adapter?\n    at com.google.gson.internal.bind.TypeAdapters$1.write(TypeAdapters.java:64)\n    at com.google.gson.internal.bind.TypeAdapters$1.write(TypeAdapters.java:61)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.ArrayTypeAdapter.write(ArrayTypeAdapter.java:93)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:89)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:195)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:89)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:195)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:89)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:195)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:96)\n    at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:60)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:89)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:195)\n    at com.google.gson.Gson.toJson(Gson.java:586)\n    at com.google.gson.Gson.toJson(Gson.java:565)\n    at com.google.gson.Gson.toJson(Gson.java:520)\n    at com.myapp.AutoResource.produceAuto(AutoResource.java:48)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.glassfish.ejb.security.application.EJBSecurityManager.runMethod(EJBSecurityManager.java:1052)\n    at org.glassfish.ejb.security.application.EJBSecurityManager.invoke(EJBSecurityManager.java:1124)\n    at com.sun.ejb.containers.BaseContainer.invokeBeanMethod(BaseContainer.java:5388)\n    at com.sun.ejb.EjbInvocation.invokeBeanMethod(EjbInvocation.java:619)\n    at com.sun.ejb.containers.interceptors.AroundInvokeChainImpl.invokeNext(InterceptorManager.java:800)\n    at com.sun.ejb.EjbInvocation.proceed(EjbInvocation.java:571)\n    at com.sun.ejb.containers.interceptors.SystemInterceptorProxy.doAround(SystemInterceptorProxy.java:162)\n    at com.sun.ejb.containers.interceptors.SystemInterceptorProxy.aroundInvoke(SystemInterceptorProxy.java:144)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at com.sun.ejb.containers.interceptors.AroundInvokeInterceptor.intercept(InterceptorManager.java:861)\n    at com.sun.ejb.containers.interceptors.AroundInvokeChainImpl.invokeNext(InterceptorManager.java:800)\n    at com.sun.ejb.containers.interceptors.InterceptorManager.intercept(InterceptorManager.java:370)\n    at com.sun.ejb.containers.BaseContainer.__intercept(BaseContainer.java:5360)\n    at com.sun.ejb.containers.BaseContainer.intercept(BaseContainer.java:5348)\n    at com.sun.ejb.containers.EJBLocalObjectInvocationHandler.invoke(EJBLocalObjectInvocationHandler.java:214)\n    at com.sun.ejb.containers.EJBLocalObjectInvocationHandlerDelegate.invoke(EJBLocalObjectInvocationHandlerDelegate.java:89)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)\n    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)\n    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)\n    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)\n    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)\n    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)\n    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1469)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1400)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1349)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1339)\n    at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)\n    at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537)\n    at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:708)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)\n    at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1550)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:281)\n    at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:175)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)\n    at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:655)\n    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:595)\n    at org.apache.catalina.core.StandardHostValve.__invoke(StandardHostValve.java:161)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)\n    at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:331)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:231)\n    at com.sun.enterprise.v3.services.impl.ContainerMapper$AdapterCallable.call(ContainerMapper.java:317)\n    at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:195)\n    at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:860)\n    at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:757)\n    at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:1056)\n    at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:229)\n    at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:137)\n    at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:104)\n    at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:90)\n    at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:79)\n    at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:54)\n    at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:59)\n    at com.sun.grizzly.ContextTask.run(ContextTask.java:71)\n    at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:532)\n    at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:513)\n    at java.lang.Thread.run(Thread.java:722) |#]\n</pre>\n    ","a":"\n<p>You can do without manually unproxying everything by using a custom <code>TypeAdapter</code>.\nSomething along these lines:</p>\n\n<pre><code>/**\n * This TypeAdapter unproxies Hibernate proxied objects, and serializes them\n * through the registered (or default) TypeAdapter of the base class.\n */\npublic class HibernateProxyTypeAdapter extends TypeAdapter&lt;HibernateProxy&gt; {\n\n    public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; type) {\n            return (HibernateProxy.class.isAssignableFrom(type.getRawType()) ? (TypeAdapter&lt;T&gt;) new HibernateProxyTypeAdapter(gson) : null);\n        }\n    };\n    private final Gson context;\n\n    private HibernateProxyTypeAdapter(Gson context) {\n        this.context = context;\n    }\n\n    @Override\n    public HibernateProxy read(JsonReader in) throws IOException {\n        throw new UnsupportedOperationException(\"Not supported\");\n    }\n\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override\n    public void write(JsonWriter out, HibernateProxy value) throws IOException {\n        if (value == null) {\n            out.nullValue();\n            return;\n        }\n        // Retrieve the original (not proxy) class\n        Class&lt;?&gt; baseType = Hibernate.getClass(value);\n        // Get the TypeAdapter of the original class, to delegate the serialization\n        TypeAdapter delegate = context.getAdapter(TypeToken.get(baseType));\n        // Get a filled instance of the original class\n        Object unproxiedValue = ((HibernateProxy) value).getHibernateLazyInitializer()\n                .getImplementation();\n        // Serialize the value\n        delegate.write(out, unproxiedValue);\n    }\n}\n</code></pre>\n\n<p>To use it you must first register it:</p>\n\n<pre><code>GsonBuilder b = new GsonBuilder();\n...\nb.registerTypeAdapterFactory(HibernateProxyTypeAdapter.FACTORY);\n...\nGson gson = b.create();\n</code></pre>\n\n<p>Notice that this will recursively initialize every proxy you have in the object hierarchy; since however you have to serialize the whole data, you should have done that anyway.</p>\n\n<p><strong>How does this work?</strong></p>\n\n<p>GSON contains a number of <code>TypeAdapterFactory</code> implementations, for various types (primitive types, common types like <code>String</code> or <code>Date</code>, lists, arrays...). Each factory is asked if it is able to serialize a certain Java type (the parameter to <code>create</code> is a <code>TypeToken</code> instead of a <code>Class</code> in order to capture possible information about generic types, which <code>Class</code> does not have). If the factory is able to serialize/deserialize a type, it responds with a <code>TypeAdapter</code> instance; otherwise it responds with <code>null</code>.</p>\n\n<p><code>HibernateProxyTypeAdapter.FACTORY</code> verifies whether <em>type</em> implements <code>HibernateProxy</code>; in that case, it returns an instance of <code>HibernateProxyTypeAdapter</code> for serialization.\nThe <code>write</code> method is called when an actual object has to be serialized; the adapter extracts the original type of the underlying object, and asks GSON for the standard <code>TypeAdapter</code> for the original type, which generally is a <code>ReflectiveTypeAdapter</code>.</p>\n\n<p>Then it retrieves an instance of the original class, instead of directly using the proxy. This is necessary because <code>ReflectiveTypeAdapter</code> accesses <a href=\"http://code.google.com/p/google-gson/issues/detail?id=5\">directly to fields</a>, instead of using getters; accessing to the fields of a proxied object does not work, and is a classical <a href=\"http://blog.xebia.com/2008/03/08/advanced-hibernate-proxy-pitfalls/\">Hibernate pitfall</a>.</p>\n\n<p>As a possible performance improvement, the delegate <code>TypeAdapter</code> should be acquired in the <code>create</code> method. I found out that calling <code>getSuperclass()</code> on the proxy <code>Class</code> appears to yield the original base class. The code can then become:</p>\n\n<pre><code>public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; type) {\n        return (HibernateProxy.class.isAssignableFrom(type.getRawType())\n                ? (TypeAdapter&lt;T&gt;) new HibernateProxyTypeAdapter((TypeAdapter)gson.getAdapter(TypeToken.get(type.getRawType().getSuperclass()))) \n     : null);\n    }\n};\nprivate final TypeAdapter&lt;Object&gt; delegate;\n\nprivate HibernateProxyTypeAdapter(TypeAdapter&lt;Object&gt; delegate) {\n    this.delegate = delegate;\n}\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n@Override\npublic void write(JsonWriter out, HibernateProxy value) throws IOException {\n    if (value == null) {\n        out.nullValue();\n        return;\n    }\n    delegate.write(out, ((HibernateProxy) value).getHibernateLazyInitializer()\n            .getImplementation());\n}\n</code></pre>\n    "},{"t":"Spring 3.1, Hibernate 4, SessionFactory","l":"http://stackoverflow.com/questions/8565051/spring-3-1-hibernate-4-sessionfactory","q":"\n\n<p>This was working:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;bean id=\"sessionFactory\"  \n      class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"&gt;\n...\n</code></pre>\n\n<p>but upgrading to the aforementioned versions breaks it. What is the correct method to create a <a href=\"https://docs.jboss.org/hibernate/orm/4.0/javadocs/org/hibernate/SessionFactory.html\" rel=\"nofollow noreferrer\"><em>SessionFactory</em></a> bean with <strong>Spring 3.1.Release</strong> and <strong>Hibernate 4.0.0.FINAL</strong>?</p>\n\n<p>The error on deploy is:</p>\n\n<blockquote>\n  <p>nested exception is java.lang.NoClassDefFoundError:\n  Lorg/hibernate/cache/CacheProvider;</p>\n</blockquote>\n\n<p><br>\n<strong>EDIT</strong><br>\nHave added my own answer, which fixed it for me.</p>\n    ","a":"\n<p>I think you should use <code>org.springframework.orm.hibernate4.LocalSessionFactoryBean</code> instead of \n<code>org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean</code></p>\n\n<p>From <code>LocalSessionFactoryBean</code> javadoc:</p>\n\n<blockquote>\n  <p>NOTE: This variant of LocalSessionFactoryBean requires Hibernate 4.0 or higher. It is similar in role to the same-named class in the orm.hibernate3 package. However, in practice, it is closer to AnnotationSessionFactoryBean since its core purpose is to bootstrap a SessionFactory from annotation scanning.</p>\n</blockquote>\n    "},{"t":"Clarifying terminology : “Hydrating” an entity : Fetching properties from the DB","l":"http://stackoverflow.com/questions/4929243/clarifying-terminology-hydrating-an-entity-fetching-properties-from-the-db","q":"\n\n<p>In the context of ORM / Lazy loading of entities, my understanding of the term \"Hydration\" is as follows:</p>\n\n<p>\"Hydrating\" describes the process of populating some or all of the previously unpopulated attributes of an entity fetched using lazy loading.</p>\n\n<p>Eg:  class <code>Author</code> is loaded from the database:</p>\n\n<pre><code>@Entity\nclass Author\n{\n     @Id\n     long id;\n     List&lt;Book&gt; books;\n}\n</code></pre>\n\n<p>Initially, the <code>books</code> collection is not populated.</p>\n\n<p>It is my understanding that the process of loading the <code>books</code> collection from the database is referred to as \"Hydrating\" the collection.</p>\n\n<p>Is this definition correct, and is the term common place?  Is there another more common term I should be using for this process?</p>\n    ","a":"\n<p>Hydrate began as a term for populating an instantiated (but empty) value-object/model from a db, (specifically in Hibernate.)</p>\n\n<p>Various other ORM's and tools like BizTalk use Hydrate and other related terminology these days, (e.g. BizTalk uses the term Dehydrated to mean an instance is available but not yet populated.)</p>\n\n<p>Personally I'm averse to redundant terminology, <strong>populated</strong> means the exact same thing, without the pointless metaphorical language, which adds nothing except confusion.</p>\n\n<p>The BizTalk extension of this style of language, specifically <strong>Dehydrated</strong> is completely redundant.  Have people really forgotten how to say, <strong><em>empty</em></strong>?</p>\n\n<p><em>Hydrated</em> and its related collection of redundant metaphors are just pure marketing fluff; they really have no place as technical terms. Sadly though, Hibernate and other tools which use these terms are well entrenched in the development world, so Hydrate and the rest are here to stay.</p>\n    "},{"t":"hibernate query.list() method is returning empty list instead of null value","l":"http://stackoverflow.com/questions/3599318/hibernate-query-list-method-is-returning-empty-list-instead-of-null-value","q":"\n\n<p>When there are no rows, both query.list() and criteria.list() are returning empty list instead of a null value.\nWhat is the reason behind this?</p>\n    ","a":"\n<p>The reason is not to force null checks in client code, in consistency with <a href=\"http://www.amazon.co.uk/Effective-Java-Second-Joshua-Bloch/dp/0321356683\" rel=\"nofollow noreferrer\">Effective Java 2nd Edition</a>, Item 43: <strong>Return empty arrays or collections, not nulls</strong>.</p>\n\n<p>This makes the client code simpler and less error-prone (and most likely the method implementation as well).</p>\n\n<blockquote>\n  <p>The null-return idiom is likely a holdover from the C programming language, in\n  which array lengths are returned separately from actual arrays. In C, there is no\n  advantage to allocating an array if zero is returned as the length.</p>\n</blockquote>\n    "},{"t":"Text Field using Hibernate Annotation","l":"http://stackoverflow.com/questions/1281188/text-field-using-hibernate-annotation","q":"\n\n<p>I am having trouble setting the type of a String, it goes like</p>\n\n<pre><code>public void setTextDesc(String textDesc) {\n    this.textDesc = textDesc;\n}\n\n@Column(name=\"DESC\")\n@Lob\npublic String getTextDesc() {\n    return textDesc;\n}\n</code></pre>\n\n<p>and it didn't work, I checked the mysql schema and it remains varchar(255), I also tried, </p>\n\n<pre><code>@Column(name=\"DESC\", length=\"9000\")\n</code></pre>\n\n<p>or</p>\n\n<pre><code>@Column(name=\"DESC\")\n@Type(type=\"text\")\n</code></pre>\n\n<p>I am trying to make the type to be TEXT, any idea would be well appreciated!</p>\n    ","a":"\n<p>You said \"I checked the mysql schema and it remains varchar(255)\" - did you expect Hibernate to automatically alter your database? It won't. Even if you have <code>hibernate.hbm2ddl.auto</code> set, I don't believe Hibernate would alter the existing column definition.</p>\n\n<p>If you were to generate new database creation script, <code>@Lob</code> should generate \"TEXT\" type column if you don't specify length explicitly (or if you do and it's less that 65536). You can always force that by explicitly declaring type in <code>@Column</code> annotation, though keep in mind that's not portable between databases:</p>\n\n<pre><code>@Column(name=\"DESC\", columnDefinition=\"TEXT\")\n</code></pre>\n    "},{"t":"How to use JPA2's @Cacheable instead of Hibernate's @Cache","l":"http://stackoverflow.com/questions/3663979/how-to-use-jpa2s-cacheable-instead-of-hibernates-cache","q":"\n\n<p>Typically , I use Hibernate's <strong>@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)</strong> to cache an @Entity class , and it works well. </p>\n\n<p>In JPA2 , there's another @Cacheable annotation that seems to be the same functionality with Hibernate's @Cache. To make my entity class independent of hibernate's package , I want to give it a try. But I cannot make it work. Each time a simple id query still hits the DB.</p>\n\n<p>Can anybody tell me where goes wrong ? Thanks.</p>\n\n<p>Entity class :</p>\n\n<pre><code>@Entity\n//@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n@Cacheable(true) \npublic class User implements Serializable\n{\n // properties\n}\n</code></pre>\n\n<p>Test class :</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations={\"classpath:app.xml\"})\n@TransactionConfiguration(transactionManager=\"transactionManager\")\npublic class UserCacheTest\n{\n  @Inject protected UserDao userDao;\n\n  @Transactional\n  @Test\n  public void testGet1()\n  {\n    assertNotNull(userDao.get(2L));\n  }\n\n  @Transactional\n  @Test\n  public void testGet2()\n  {\n    assertNotNull(userDao.get(2L));\n  }\n\n  @Transactional\n  @Test\n  public void testGet3()\n  {\n    assertNotNull(userDao.get(2L));\n  }\n}\n</code></pre>\n\n<p>The test result shows each \"get\" hits DB layer (with hibernate.show_sql=true).</p>\n\n<p>Persistence.xml :</p>\n\n<pre><code>&lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQLDialect\"/&gt;\n&lt;property name=\"hibernate.show_sql\" value=\"true\"/&gt;\n&lt;property name=\"hibernate.format_sql\" value=\"true\" /&gt;\n&lt;property name=\"hibernate.use_outer_join\" value=\"true\"/&gt;\n\n&lt;property name=\"hibernate.cache.provider_class\" value=\"org.hibernate.cache.SingletonEhCacheProvider\"/&gt;\n&lt;property name=\"hibernate.cache.use_second_level_cache\" value=\"true\"/&gt;\n&lt;property name=\"hibernate.cache.use_query_cache\" value=\"true\"/&gt;\n</code></pre>\n\n<p>JPA code :</p>\n\n<pre><code>@Override\npublic T get(Serializable id)\n{\n  return em.find(clazz, id);\n}\n</code></pre>\n    ","a":"\n<p>According to the JPA 2.0 specification, if you want to selectively cache entities using the <code>@Cacheable</code> annotation, you're supposed to specify a <code>&lt;shared-cache-mode&gt;</code> in the <code>persistence.xml</code> (or the equivalent <code>javax.persistence.sharedCache.mode</code>  when creating the <code>EntityManagerFactory</code>).</p>\n\n<p>Below, a sample <code>persistence.xml</code> with the relevant element and properties:</p>\n\n<pre><code>&lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\" version=\"2.0\"&gt;\n  &lt;persistence-unit name=\"FooPu\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n    ...\n    &lt;shared-cache-mode&gt;ENABLE_SELECTIVE&lt;/shared-cache-mode&gt;\n    &lt;properties&gt;\n      ...\n      &lt;property name=\"hibernate.cache.provider_class\" value=\"org.hibernate.cache.SingletonEhCacheProvider\"/&gt;\n      &lt;property name=\"hibernate.cache.use_second_level_cache\" value=\"true\"/&gt;\n      &lt;property name=\"hibernate.cache.use_query_cache\" value=\"true\"/&gt;\n    &lt;/properties&gt;\n  &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre>\n\n<p>Note that I've seen at least one issue <a href=\"https://hibernate.atlassian.net/browse/HHH-5303\" rel=\"nofollow noreferrer\">HHH-5303</a> related to caching. So the above is not guaranteed :)</p>\n\n<h3>References</h3>\n\n<ul>\n<li>Hibernate EntityManager reference guide\n\n<ul>\n<li><a href=\"http://docs.jboss.org/hibernate/stable/entitymanager/reference/en/html/configuration.html#setup-configuration-packaging\" rel=\"nofollow noreferrer\">2.2.1 Packaging</a></li>\n</ul></li>\n<li>JPA 2.0 Specification\n\n<ul>\n<li>Section 3.7.1 \"The shared-cache-mode Element\"</li>\n<li>Section 11.1.7 \"Cacheable Annotation\"</li>\n</ul></li>\n</ul>\n    "},{"t":"javax.validation.ValidationException: HV000183: Unable to load 'javax.el.ExpressionFactory'","l":"http://stackoverflow.com/questions/24386771/javax-validation-validationexception-hv000183-unable-to-load-javax-el-express","q":"\n\n<p>I try to write very simple application with hibernate validator:</p>\n\n<p>my steps:</p>\n\n<p>add following dependency in pom.xml:</p>\n\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n    &lt;version&gt;5.1.1.Final&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>write code:</p>\n\n<pre><code>class Configuration {\n    Range(min=1,max=100)\n    int threadNumber;\n    //...\n\n    public static void main(String[] args) {\n        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n\n        Validator validator = factory.getValidator();\n\n        Configuration configuration = new Configuration();\n        configuration.threadNumber = 12;\n            //...\n\n        Set&lt;ConstraintViolation&lt;Configuration&gt;&gt; constraintViolations = validator.validate(configuration);\n        System.out.println(constraintViolations);\n\n    }\n}\n</code></pre>\n\n<p>And I gets following stacktrace:</p>\n\n<pre><code>Exception in thread \"main\" javax.validation.ValidationException: Unable to instantiate Configuration.\n    at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:279)\n    at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:110)\n    ...\n    at org.hibernate.validator.internal.engine.ConfigurationImpl.&lt;init&gt;(ConfigurationImpl.java:110)\n    at org.hibernate.validator.internal.engine.ConfigurationImpl.&lt;init&gt;(ConfigurationImpl.java:86)\n    at org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:41)\n    at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)\n    ... 2 more\n</code></pre>\n\n<p>What do I wrong?</p>\n    ","a":"\n<p>it is working after adding to pom.xml following dependies:</p>\n\n<pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;javax.el&lt;/groupId&gt;\n   &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;\n   &lt;version&gt;2.2.4&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;\n   &lt;artifactId&gt;javax.el&lt;/artifactId&gt;\n   &lt;version&gt;2.2.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p><a href=\"http://hibernate.org/validator/documentation/getting-started/\">Getting started with Hibernate Validator</a></p>\n    "},{"t":"JPA/Hibernate Native Queries do not recognize Parameters","l":"http://stackoverflow.com/questions/3144235/jpa-hibernate-native-queries-do-not-recognize-parameters","q":"\n\n<p>I am using Hibernate/JPA to execute native PostGIS queries. The problem with these queries is that they need parameters that are not of the classical X = 'value' form.</p>\n\n<p>For example, the following lines crash</p>\n\n<pre><code> String queryString = \"select * from Cell c where ST_DWithin(c.shape, SetSRID(ST_GeomFromEWKT('POINT(:lon :lat)'),4326), 0.1)\";\n  Query query = Cell.em().createNativeQuery(queryString, Cell.class);\n  query.setParameter(\"lon\", longitude);\n  query.setParameter(\"lat\", latitude);\n\nplay.exceptions.JavaExecutionException: org.hibernate.QueryParameterException: could not locate named parameter [lon]\n at play.mvc.ActionInvoker.invoke(ActionInvoker.java:259)\n at Invocation.HTTP Request(Play!)\nCaused by: java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter [lon]\n at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:358)\n</code></pre>\n\n<p>The following query works however :</p>\n\n<pre><code>String queryString = String.format(\"select * from Cell c where ST_DWithin(c.shape, SetSRID(ST_GeomFromEWKT('POINT(%f %f)'),4326), 0.1)\", longitude, latitude);\nQuery query = Cell.em().createNativeQuery(queryString, Cell.class);\n</code></pre>\n\n<p>(but it is SQL-injection-prone...)   </p>\n\n<p>Does anyone know how to use <code>setParameter()</code> in this case ?</p>\n    ","a":"\n<p>The use of named parameters is not defined for native queries. From the JPA specification (section <strong>3.6.3 Named Parameters</strong>):</p>\n\n<blockquote>\n  <p>Named parameters follow the rules for\n  identifiers defined in Section 4.4.1.\n  The use of named parameters applies to\n  the Java Persistence query language,\n  and is not defined for native queries.\n  <strong>Only positional parameter binding may\n  be portably used for native queries</strong>.</p>\n</blockquote>\n\n<p>So try the following instead:</p>\n\n<pre><code>String queryString = \"select * from Cell c where ST_DWithin(c.shape, SetSRID(ST_GeomFromEWKT('POINT(?1 ?2)'),4326), 0.1)\";\nQuery query = Cell.em().createNativeQuery(queryString, Cell.class);\nquery.setParameter(1, longitude);\nquery.setParameter(2, latitude);\n</code></pre>\n\n<hr>\n\n<p>Note that in JPA &gt;= 2.0 you <strong>can use</strong> named parameters in native queries.</p>\n    "},{"t":"What is referencedColumnName used for in JPA?","l":"http://stackoverflow.com/questions/11244569/what-is-referencedcolumnname-used-for-in-jpa","q":"\n\n<p>In JPA there is an attribute called <code>referencedColumnName</code> that can be set on <code>@JoinColumn, @PrimaryKeyJoinColumn</code> what is the idea behind this setting, can someone give a good example of where this can be used?</p>\n    ","a":"\n<p>It is there to specify another column as the default <em>id</em> column of the other table, e.g. consider the following</p>\n\n<pre><code>TableA\n  id int identity\n  tableb_key varchar\n\n\nTableB\n  id int identity\n  key varchar unique\n\n// in class for TableA\n@JoinColumn(column=\"tableb_key\", referencedColumnName=\"key\")\n</code></pre>\n    "},{"t":"What is the “proper” way to cast Hibernate Query.list() to List<Type>?","l":"http://stackoverflow.com/questions/15913150/what-is-the-proper-way-to-cast-hibernate-query-list-to-listtype","q":"\n\n<p>I'm a newbie with Hibernate, and I'm writing a simple method to return a list of objects\nmatching a specific filter. <code>List&lt;Foo&gt;</code> seemed a natural return type.</p>\n\n<p>Whatever I do, I can't seem to make the compiler happy, unless I employ an ugly <code>@SuppressWarnings</code>.</p>\n\n<pre><code>import java.util.List;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Foo {\n\n    public Session acquireSession() {\n        // All DB opening, connection etc. removed,\n        // since the problem is in compilation, not at runtime.\n        return null;\n    }\n\n    @SuppressWarnings(\"unchecked\") /* &lt;----- */\n\n    public List&lt;Foo&gt; activeObjects() {\n        Session s = acquireSession();\n        Query   q = s.createQuery(\"from foo where active\");\n        return (List&lt;Foo&gt;) q.list();\n    }\n}\n</code></pre>\n\n<p><strong>I would like to get rid of that <code>SuppressWarnings</code></strong>. But if I do, I get the warning</p>\n\n<pre><code>Warning: Unchecked cast from List to List&lt;Foo&gt;\n</code></pre>\n\n<p>(I can ignore it, but I'd like to not get it in the first place), and if I remove the  generic to conform to <code>.list()</code> return type, I get the warning</p>\n\n<pre><code>Warning: List is a raw type. References to generic type List&lt;E&gt;\nshould be parameterized.\n</code></pre>\n\n<p>I noticed that <code>org.hibernate.mapping</code> <em>does</em> declare a <code>List</code>; but it is a different type altogether - <code>Query</code> returns a <code>java.util.List</code>, as a raw type. I find it odd that a recent Hibernate (4.0.x) would not implement parameterized types, so I suspect that it's me instead doing something wrong.</p>\n\n<p>It looks very much like <a href=\"http://stackoverflow.com/questions/4864093/cast-hibernate-result-to-a-list-of-objects\">Cast Hibernate result to a list of objects</a>, but here I have no \"hard\" errors (the system knows type Foo, and I'm not using a SQLQuery but a straight Query). So no joy.</p>\n\n<p>I have also looked at <a href=\"http://stackoverflow.com/questions/10754777/hibernate-class-cast-exception\">Hibernate Class Cast Exception</a> since it looked promising, but then I realized that I do <em>not</em> actually get any <code>Exception</code>... my problem is just that of a warning - a coding style, if you will.</p>\n\n<p>Documentation on jboss.org, Hibernate manuals and several tutorials do not seem to cover the topic in <em>such</em> detail (or I didn't search in the right places?). When they do enter into detail, they use on-the-fly casting - and this on tutorials that weren't on the official jboss.org site, so I'm a bit wary.</p>\n\n<p>The code, once compiled, runs with no <em>apparent</em> problem... that I know of... yet; and the results are the expected ones.</p>\n\n<p>So: am I doing this right? Am I missing something obvious? Is there an \"official\"\nor \"recommended\" <em>Way To Do It</em>?</p>\n    ","a":"\n<p>Short answer <code>@SuppressWarnings</code> is the right way to go.</p>\n\n<p>Long answer, Hibernate returns a  raw <code>List</code> from the <code>Query.list</code> method, see <a href=\"http://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html#list()\">here</a>. This is not a bug with Hibernate or something the can be solved, the type returned by the query is <em>not known</em> at compile time.</p>\n\n<p>Therefore when you write</p>\n\n<pre><code>final List&lt;MyObject&gt; list = query.list();\n</code></pre>\n\n<p>You are doing an unsafe cast from <code>List</code> to <code>List&lt;MyObject&gt;</code> - this cannot be avoided.</p>\n\n<p>There is no way you can safely carry out the cast as the <code>List</code> <em>could</em> contain anything.</p>\n\n<p>The only way to make the error go away is the even more ugly</p>\n\n<pre><code>final List&lt;MyObject&gt; list = new LinkedList&lt;&gt;();\nfor(final Object o : query.list()) {\n    list.add((MyObject)o);\n}\n</code></pre>\n    "},{"t":"Hibernate: best practice to pull all lazy collections","l":"http://stackoverflow.com/questions/19928568/hibernate-best-practice-to-pull-all-lazy-collections","q":"\n\n<p><em><strong>What I have:</strong></em></p>\n\n<pre><code>@Entity\npublic class MyEntity {\n  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n  @JoinColumn(name = \"myentiy_id\")\n  private List&lt;Address&gt; addreses;\n\n  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n  @JoinColumn(name = \"myentiy_id\")\n  private List&lt;Person&gt; persons;\n\n  //....\n}\n\npublic void handle() {\n\n   Session session = createNewSession();\n   MyEntity entity = (MyEntity) session.get(MyEntity.class, entityId);\n   proceed(session); // FLUSH, COMMIT, CLOSE session!\n\n   Utils.objectToJson(entity); //TROUBLES, because it can't convert to json lazy collections\n}\n</code></pre>\n\n<p><em><strong>What a problem:</strong></em></p>\n\n<p>The problem is that I can't pull lazy collection after session has been closed. But I also can't not close a session in <em>proceed</em> method. </p>\n\n<p><em><strong>What a solution (coarse solution):</strong></em></p>\n\n<p>a) Before session is closed, force hibernate to pull lazy collections</p>\n\n<pre><code>entity.getAddresses().size();\nentity.getPersons().size();\n</code></pre>\n\n<p>....</p>\n\n<p>b) Maybe more ellegant way is to use <code>@Fetch(FetchMode.SUBSELECT)</code> annotation</p>\n\n<p><em><strong>Question:</strong></em></p>\n\n<p>What is a best practice/common way/more ellegant way to do it? Means convert my object to JSON.</p>\n    ","a":"\n<p>Use  Hibernate.initialize() within Transactional to initialize lazy objects. </p>\n\n<pre><code> start Transaction \n      Hibernate.initialize(entity.getAddresses());\n      Hibernate.initialize(entity.getPersons());\n end Transaction \n</code></pre>\n\n<p>Now out side of the Transaction you are able to get lazy objects. </p>\n\n<pre><code>entity.getAddresses().size();\nentity.getPersons().size();\n</code></pre>\n    "},{"t":"Hibernate Error: a different object with the same identifier value was already associated with the session","l":"http://stackoverflow.com/questions/16246675/hibernate-error-a-different-object-with-the-same-identifier-value-was-already-a","q":"\n\n<p>I essentially have some objects in this configuration (the real data model is a bit more complex):</p>\n\n<ul>\n<li>A has a many-to-many relationship with B. (B has <code>inverse=\"true\"</code>)</li>\n<li>B has a many-to-one relationship with C. (I have <code>cascade</code> set to <code>\"save-update\"</code>)</li>\n<li>C is a kind of type/category table.</li>\n</ul>\n\n<p>Also, I should probably mention that the primary keys are generated by the database on save.</p>\n\n<p>With my data, I sometimes run into problems where A has a set of different B objects, and these B objects refer to the same C object.</p>\n\n<p>When I call <code>session.saveOrUpdate(myAObject)</code>, I get a hibernate error saying: <code>\"a different object with the same identifier value was already associated with the session: C\"</code>. I know that hibernate can't insert/update/delete the same object twice in the same session, but is there some way around this? This doesn't seem like it would be that uncommon of a situation.</p>\n\n<p>During my research of this problem, I have seen folks suggest the use of <code>session.merge()</code>, but when I do that, any \"conflicting\" objects get inserted into the database as blank objects with all values set to null. Clearly that isn't what we want.</p>\n\n<p>[Edit] Another thing I forgot to mention is that (for architectural reasons beyond my control), each read or write needs to be done in a separate session.</p>\n    ","a":"\n<p>Most probably its because the B objects are not referring to the same Java C object instance. They are referring to the same row in the database (i.e. the same primary key) but they're different copies of it. </p>\n\n<p>So what is happening is that the Hibernate session, which is managing the entities would be keeping track of which Java object corresponds to the row with the same primary key.</p>\n\n<p>One option would be to make sure that the Entities of objects B that refer to the same row are actually referring to the same object instance of C. Alternatively turn off cascading for that member variable. This way when B is persisted C is not. You will have to save C manually separately though. If C is a type/category table, then it probably makes sense to be that way.</p>\n    "},{"t":"What jar should I include to use javax.persistence package in a hibernate based application?","l":"http://stackoverflow.com/questions/737496/what-jar-should-i-include-to-use-javax-persistence-package-in-a-hibernate-based","q":"\n\n<p>Is it ok to take it from Glassfish project ( glassfish-persistence-api) or may be there is a Hibernate jar?</p>\n    ","a":"\n<p>If you are developing an OSGi system I would recommend you to download the \"bundlefied\" version from <a href=\"http://www.springsource.com/repository/app/\" rel=\"nofollow noreferrer\">Springsource Enterprise Bundle Repository</a>. </p>\n\n<p>Otherwise its ok to use a regular jar-file containing the <strong>javax.persistence</strong> package</p>\n    "},{"t":"How do I call the default deserializer from a custom deserializer in Jackson","l":"http://stackoverflow.com/questions/18313323/how-do-i-call-the-default-deserializer-from-a-custom-deserializer-in-jackson","q":"\n\n<p>I have a problem in my custom deserializer in Jackson. I want to access the default serializer to populate the object i am deserializing into. After the population I will do som custom things but first I want to deserialize the object with the default jackson behaviour.</p>\n\n<p>This is the code that I have at the moment.</p>\n\n<pre><code>public class UserEventDeserializer extends StdDeserializer&lt;User&gt; {\n\n  private static final long serialVersionUID = 7923585097068641765L;\n\n  public UserEventDeserializer() {\n    super(User.class);\n  }\n\n  @Override\n  @Transactional\n  public User deserialize(JsonParser jp, DeserializationContext ctxt)\n      throws IOException, JsonProcessingException {\n\n    ObjectCodec oc = jp.getCodec();\n    JsonNode node = oc.readTree(jp);\n    User deserializedUser = null;\n    deserializedUser = super.deserialize(jp, ctxt, new User()); \n    // The previous line generates an exception java.lang.UnsupportedOperationException\n    // Because there is no implementation of the deserializer.\n    // I want a way to access the default spring deserializer for my User class.\n    // How can I do that?\n\n    //Special logic\n\n    return deserializedUser;\n  }\n\n}\n</code></pre>\n\n<p>What I need is a way to initialize the default deserializer so that I can prepopulate my POJO before I start my special logic.</p>\n\n<p>When calling deserialize from within the custom deserializer It seams the method is called from the current context no matter how I construct the serializer class. Because of the annotation in my POJO. This causes a Stack Overflow exception for obvious reasons. I have tried initalizing a beandeserializer but the process is extreamly complex and I haven't managed to find the right way to do it. I have also tried overloading the annotaiton introspector to no avail, thinking that it might help me ignore the annotaiton in the DeserializerContext. Finaly it seams I might have had some success using JsonDeserializerBuilders allthough this required me to do some magic stuff to get ahold of the application context from spring. I would appreciate any thing that could lead me to a cleaner solution for example how Can I construct a Deserialization context without reading the JsonDeserializer annotaiton.</p>\n    ","a":"\n<p>As StaxMan already suggested you can do this by writing a <code>BeanDeserializerModifier</code> and registering it via <code>SimpleModule</code>. The following example should work:</p>\n\n<pre><code>public class UserEventDeserializer extends StdDeserializer&lt;User&gt; implements ResolvableDeserializer\n{\n  private static final long serialVersionUID = 7923585097068641765L;\n\n  private final JsonDeserializer&lt;?&gt; defaultDeserializer;\n\n  public UserEventDeserializer(JsonDeserializer&lt;?&gt; defaultDeserializer)\n  {\n    super(User.class);\n    this.defaultDeserializer = defaultDeserializer;\n  }\n\n  @Override public User deserialize(JsonParser jp, DeserializationContext ctxt)\n      throws IOException, JsonProcessingException\n  {\n    User deserializedUser = (User) defaultDeserializer.deserialize(jp, ctxt);\n\n    // Special logic\n\n    return deserializedUser;\n  }\n\n  // for some reason you have to implement ResolvableDeserializer when modifying BeanDeserializer\n  // otherwise deserializing throws JsonMappingException??\n  @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException\n  {\n    ((ResolvableDeserializer) defaultDeserializer).resolve(ctxt);\n  }\n\n\n  public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException\n  {\n    SimpleModule module = new SimpleModule();\n    module.setDeserializerModifier(new BeanDeserializerModifier()\n    {\n      @Override public JsonDeserializer&lt;?&gt; modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc, JsonDeserializer&lt;?&gt; deserializer)\n      {\n        if (beanDesc.getBeanClass() == User.class)\n          return new UserEventDeserializer(deserializer);\n        return deserializer;\n      }\n    });\n\n\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.registerModule(module);\n    User user = mapper.readValue(new File(\"test.json\"), User.class);\n  }\n}\n</code></pre>\n    "},{"t":"What's new in Hibernate 5?","l":"http://stackoverflow.com/questions/31965179/whats-new-in-hibernate-5","q":"\n\n<p>I just saw that the 4th candidate got released for Hibernate 5. What's new in 5 compared to earlier versions?</p>\n    ","a":"\n<p>Some exciting features has been added/enhanced in Hibernate 5.x. Have a quick look.</p>\n\n<h2>1. Hibernate Search</h2>\n\n<blockquote>\n  <p>Hibernate Search transparently indexes your objects and offers fast regular, full-text and geolocation search. Ease of use and easy clustering are core.</p>\n</blockquote>\n\n<ul>\n<li>Full-text search for entities - <em>find by approximation (fuzzy search)</em></li>\n<li>Cluster-friendly - <em>offers several easy to setup clustering strategies</em></li>\n<li>Faceting and geolocation - <em>Geolocalized entities are as easy as @Spatial</em></li>\n</ul>\n\n<p><a href=\"http://hibernate.org/search/\">For more details on Hibernate Search view this.</a></p>\n\n<h2>2. Hibernate Validator</h2>\n\n<p>Hibernate Validator comes with a handful of built-in validation rules like Email, Length, NotBlank etc.</p>\n\n<blockquote>\n  <p>Express validation rules in a standardized way using annotation-based constraints and benefit from transparent integration with a wide variety of frameworks.</p>\n</blockquote>\n\n<p><a href=\"http://hibernate.org/validator/\">For more details on Hibernate Validator view this.</a></p>\n\n<h2>3. Improved Java 8 Support</h2>\n\n<p>Java 8 date/time data types (JSR 310) are supported and can be validated via @Past and @Future. Also Optional and JavaFX types are supported via an improved ValidatedValueUnwrapper.</p>\n\n<h2>4. Hibernate OGM</h2>\n\n<p>Just released the first stable version.</p>\n\n<h2>5. Bootstrapping API</h2>\n\n<p>New bootstrapping API - better determinism, better integration</p>\n\n<hr>\n\n<p>A few other things:</p>\n\n<ul>\n<li>Scanning support for non-JPA usage</li>\n<li>NamingStrategy has been removed in favor of a better designed API</li>\n<li>Ability to handle additional Java types for id attributes marked as GenerationType#AUTO. Built-in support for Number and UUID. Expandable via new org.hibernate.boot.model.IdGeneratorStrategyInterpreter extension.</li>\n<li>Additionally, support for AttributeConverters has been expanded and more fully realized</li>\n</ul>\n\n<p>Check <a href=\"http://hibernate.org/orm/roadmap/#hibernate-orm-5-x\">Hibernate ORM Roadmap</a> for more details.</p>\n    "},{"t":"Hibernate fetching strategy - when to use “join” and when to use “select”?","l":"http://stackoverflow.com/questions/617145/hibernate-fetching-strategy-when-to-use-join-and-when-to-use-select","q":"\n\n<p>Most Hibernate associations support \"fetch\" parameter:</p>\n\n<pre><code>fetch=\"join|select\"\n</code></pre>\n\n<p>with \"select\" being default value. </p>\n\n<p>How to decide which one to use for which association?</p>\n\n<p>I tried changing all from \"select\" to \"join\" application wide - number of generated queries decreased probably 10 times but performance stayed exactly the same (even become a tiny bit worse). </p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>Join is supposed to solve the n+1 problem.  If you have 10 parents, each with 10 children, join will require one query and select will require 11 (one for the parents and one for the children of each parent).  This may not be a big deal if the database is on the same server as the application or if the network is really fast, but if there is latency in each database call, it can add up.  The join method is a little less efficient on the initial query because you're duplicating the parent  columns in every row, but you only make one round-trip to the database.</p>\n\n<p>Generally, if I know I'm going to need the children of all the parents, I go with join.  If I'm only going to need the children of a few parents, I use select.</p>\n    "},{"t":"Spring Boot + JPA : Column name annotation ignored","l":"http://stackoverflow.com/questions/25283198/spring-boot-jpa-column-name-annotation-ignored","q":"\n\n<p>I have a Spring Boot application with dependency \"spring-boot-starter-data-jpa\". My entity class has a column annotation with column name. For example:</p>\n\n<pre><code>@Column(name=\"TestName\")\nprivate String testName;\n</code></pre>\n\n<p>SQL generated by this created test_name as column name. After looking for solution I have found that <code>spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.EJB3NamingStrategy</code> solved the problem (column name is taken from column annotation).</p>\n\n<p>Still, my question is why without naming_strategy set to <code>EJB3NamingStrategy</code> JPA is ignoring column annotation? Maybe hibernate dialect has something to do with it? I'm connecting to MS SQL 2014 Express and my logs contains:</p>\n\n<pre><code>Unknown Microsoft SQL Server major version [12] using SQL Server 2000 dialect\nUsing dialect: org.hibernate.dialect.SQLServerDialect \n</code></pre>\n    ","a":"\n<p>By default Spring uses <code>org.springframework.boot.orm.jpa.SpringNamingStrategy</code> to generate table names. This is a very thin extension of <code>org.hibernate.cfg.ImprovedNamingStrategy</code>. The <code>tableName</code> method in that class is passed a source <code>String</code> value but it is unaware if it comes from a <code>@Column.name</code> attribute or if it has been implicitly generated from the field name.</p>\n\n<p>The <code>ImprovedNamingStrategy</code> will convert <code>CamelCase</code> to <code>SNAKE_CASE</code> where as the <code>EJB3NamingStrategy</code> just uses the table name unchanged.</p>\n\n<p>If you don't want to change the naming strategy you could always just specify your column name in lowercase:</p>\n\n<pre><code>@Column(name=\"testname\")\n</code></pre>\n    "},{"t":"Difference between JTA, JPA and Plain JDBC in hibernate","l":"http://stackoverflow.com/questions/3903477/difference-between-jta-jpa-and-plain-jdbc-in-hibernate","q":"\n\n<p>Can anyone tell me what is the difference between JTA, JPA, and Plain JDBC in terms of hibernate? I have been asked continuously this question and I fumble while giving the answer.\n<br>\nBest Regards,<br>\nAashutosh</p>\n    ","a":"\n<p>JDBC is a Java standard for database connection. </p>\n\n<p>JPA isolates the Java developer from the inner workings of JDBC and database operations. </p>\n\n<p>Hibernate, EclipseLink, OpenJPA and Data Nucleus are famous JPA implementations.</p>\n\n<p>JTA is a standard for transactions, allowing for management of multiple transactions among multiple databases. </p>\n\n<p>JPA utilizes JDBC for database connections and SQL-related operations, and  -optionally- utilizes JTA for delegating distributed transaction management details to it.</p>\n    "},{"t":"what is the purpose of two config files for Hibernate?","l":"http://stackoverflow.com/questions/3807503/what-is-the-purpose-of-two-config-files-for-hibernate","q":"\n\n<p>This is my current project structure:</p>\n\n<pre><code>pom.xml\n/src\n  /main\n    /resources\n      hibernate.cfg.xml\n      /META-INF\n        persistence.xml\n</code></pre>\n\n<p>I have very similar configuration params in both files (<code>hibernate.cfg.xml</code> and <code>persistence.xml</code>), which looks strange, but this is what I saw in many online examples and tutorials. I can't understand why do I need to have two files. Is it possible to work just with one? Please explain.</p>\n\n<p>ps. For example, should I declare <code>hibernate.dialect</code> in both files, or just one will be enough? If so, which one to use?</p>\n    ","a":"\n<p>If you are using Hibernate's proprietary API, you'll need the <code>hibernate.cfg.xml</code>. If you are using JPA i.e. Hibernate EntityManager, you'll need the <code>persistence.xml</code>. </p>\n\n<p>So you generally don't need both as you use <strong>either</strong> Hibernate proprietary API or JPA.</p>\n\n<p>However, if you <strong>were using</strong> Hibernate Proprietary API and already have a <code>hibernate.cfg.xml</code> (and <code>hbm.xml</code> XML mapping files) but want to start using JPA,  you can reuse the existing configuration files by referencing the <code>hibernate.cfg.xml</code> in the <code>persistence.xml</code> in the <code>hibernate.ejb.cfgfile</code> property - and thus have both files. Reusing existing <code>hbm.xml</code> files is IMO a realistic scenario that could justify keeping both (even if I'd probably migrate to JPA annotations on the long run).</p>\n\n<h3>References</h3>\n\n<ul>\n<li>Hibernate EntityManager\n<ul>\n<li><a href=\"http://docs.jboss.org/hibernate/stable/entitymanager/reference/en/html_single/#setup-configuration-bootstrapping\">2.2.2. Bootstrapping</a> </li>\n</ul></li>\n</ul>\n    "},{"t":"Hibernate/Spring: failed to lazily initialize - no session or session was closed","l":"http://stackoverflow.com/questions/3041259/hibernate-spring-failed-to-lazily-initialize-no-session-or-session-was-closed","q":"\n\n<p><strong>For an answer scroll down to the end of this...</strong></p>\n\n<p>The basic problem is the same as asked multiple time. I have a simple program with two POJOs Event and User - where a user can have multiple events.</p>\n\n<pre><code>@Entity\n@Table\npublic class Event {\n private Long id;\n private String name;\n private User user;\n\n @Column\n @Id\n @GeneratedValue\n public Long getId() {return id;}\n public void setId(Long id) { this.id = id; }\n\n @Column\n public String getName() {return name;}\n public void setName(String name) {this.name = name;}\n\n @ManyToOne\n @JoinColumn(name=\"user_id\")\n public User getUser() {return user;}\n public void setUser(User user) {this.user = user;}\n\n}\n</code></pre>\n\n<p>The User:</p>\n\n<pre><code>@Entity\n@Table\npublic class User {\n private Long id;\n private String name;\n private List&lt;Event&gt; events;\n\n @Column\n @Id\n @GeneratedValue\n public Long getId() { return id; }\n public void setId(Long id) { this.id = id; }\n\n @Column\n public String getName() { return name; }\n public void setName(String name) { this.name = name; }\n\n @OneToMany(mappedBy=\"user\", fetch=FetchType.LAZY)\n public List&lt;Event&gt; getEvents() { return events; }\n public void setEvents(List&lt;Event&gt; events) { this.events = events; }\n\n}\n</code></pre>\n\n<p>Note: This is a sample project. I <strong>really</strong> want to use Lazy fetching here.</p>\n\n<p>Now we need to configure spring and hibernate and have a simple basic-db.xml for loading:</p>\n\n<pre><code>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n           http://www.springframework.org/schema/aop \n           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\"&gt;\n\n\n &lt;bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n  destroy-method=\"close\"  scope=\"thread\"&gt;\n  &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" /&gt;\n  &lt;property name=\"url\" value=\"jdbc:mysql://192.168.1.34:3306/hibernateTest\" /&gt;\n  &lt;property name=\"username\" value=\"root\" /&gt;\n  &lt;property name=\"password\" value=\"\" /&gt;\n  &lt;aop:scoped-proxy/&gt;\n &lt;/bean&gt;\n\n &lt;bean class=\"org.springframework.beans.factory.config.CustomScopeConfigurer\"&gt;\n  &lt;property name=\"scopes\"&gt;\n   &lt;map&gt;\n    &lt;entry key=\"thread\"&gt;\n     &lt;bean class=\"org.springframework.context.support.SimpleThreadScope\" /&gt;\n    &lt;/entry&gt;\n   &lt;/map&gt;\n  &lt;/property&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"mySessionFactory\"\n  class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\" scope=\"thread\"&gt;\n  &lt;property name=\"dataSource\" ref=\"myDataSource\" /&gt;\n  &lt;property name=\"annotatedClasses\"&gt;\n   &lt;list&gt;\n    &lt;value&gt;data.model.User&lt;/value&gt;\n    &lt;value&gt;data.model.Event&lt;/value&gt;\n   &lt;/list&gt;\n  &lt;/property&gt;\n  &lt;property name=\"hibernateProperties\"&gt;\n   &lt;props&gt;\n    &lt;prop key=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/prop&gt;\n    &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n    &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/prop&gt;\n   &lt;/props&gt;\n  &lt;/property&gt;\n  &lt;aop:scoped-proxy/&gt;\n\n &lt;/bean&gt;\n\n &lt;bean id=\"myUserDAO\" class=\"data.dao.impl.UserDaoImpl\"&gt;\n  &lt;property name=\"sessionFactory\" ref=\"mySessionFactory\" /&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"myEventDAO\" class=\"data.dao.impl.EventDaoImpl\"&gt;\n  &lt;property name=\"sessionFactory\" ref=\"mySessionFactory\" /&gt;\n &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code>\n</pre>\n\n<p>Note: I played around with the CustomScopeConfigurer and SimpleThreadScope, but that didnt change anything.</p>\n\n<p>I have a simple dao-impl (only pasting the userDao - the EventDao is pretty much the same - except with out the \"listWith\" function:</p>\n\n<pre><code>\npublic class UserDaoImpl implements UserDao{\n\n private HibernateTemplate hibernateTemplate;\n\n public void  setSessionFactory(SessionFactory sessionFactory) {\n  this.hibernateTemplate = new HibernateTemplate(sessionFactory);\n\n }\n\n @SuppressWarnings(\"unchecked\")\n @Override\n public List listUser() {\n  return hibernateTemplate.find(\"from User\");\n }\n\n @Override\n public void saveUser(User user) {\n  hibernateTemplate.saveOrUpdate(user);\n\n }\n\n @Override\n public List listUserWithEvent() {\n\n  List users = hibernateTemplate.find(\"from User\");\n  for (User user : users) {\n   System.out.println(\"LIST : \" + user.getName() + \":\");\n   user.getEvents().size();\n  }\n  return users;\n }\n\n}\n</code>\n</pre>\n\n<p>I am getting the org.hibernate.LazyInitializationException - failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed at the line with <em>user.getEvents().size()</em>;</p>\n\n<p>And last but not least here is the Test class I use:</p>\n\n<pre><code>\npublic class HibernateTest {\n\n public static void main(String[] args) {\n\n  ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\"basic-db.xml\");\n\n\n  UserDao udao = (UserDao) ac.getBean(\"myUserDAO\");\n  EventDao edao = (EventDao) ac.getBean(\"myEventDAO\");\n\n\n  System.out.println(\"New user...\");\n  User user = new User();\n  user.setName(\"test\");\n\n  Event event1 = new Event();\n  event1.setName(\"Birthday1\");\n  event1.setUser(user);\n\n  Event event2 = new Event();\n  event2.setName(\"Birthday2\");\n  event2.setUser(user);\n\n  udao.saveUser(user);\n  edao.saveEvent(event1);\n  edao.saveEvent(event2);\n\n  List users = udao.listUserWithEvent();\n  System.out.println(\"Events for users\");\n  for (User u : users) {\n\n   System.out.println(u.getId() + \":\" + u.getName() + \" --\");\n   for (Event e : u.getEvents())\n   {\n    System.out.println(\"\\t\" + e.getId() + \":\" + e.getName());\n   }\n  }\n\n  ((ConfigurableApplicationContext)ac).close();\n }\n\n}\n</code>\n</pre>\n\n<p>and here is the Exception:</p>\n\n<pre>1621 [main] ERROR org.hibernate.LazyInitializationException - failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:380)\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:372)\n at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:119)\n at org.hibernate.collection.PersistentBag.size(PersistentBag.java:248)\n at data.dao.impl.UserDaoImpl.listUserWithEvent(UserDaoImpl.java:38)\n at HibernateTest.main(HibernateTest.java:44)\nException in thread \"main\" org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: data.model.User.events, no session or session was closed\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:380)\n at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:372)\n at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:119)\n at org.hibernate.collection.PersistentBag.size(PersistentBag.java:248)\n at data.dao.impl.UserDaoImpl.listUserWithEvent(UserDaoImpl.java:38)\n at HibernateTest.main(HibernateTest.java:44)\n</pre>\n\n<p>Things tried but did not work:</p>\n\n<ul>\n<li>assign a threadScope and using beanfactory (I used \"request\" or \"thread\" - no difference noticed):</li>\n</ul>\n\n<pre>  // scope stuff\n  Scope threadScope = new SimpleThreadScope();\n  ConfigurableListableBeanFactory beanFactory = ac.getBeanFactory();\n  beanFactory.registerScope(\"request\", threadScope);\n  ac.refresh();\n...\n</pre>\n\n<ul>\n<li>Setting up a transaction by getting the session object from the deo:</li>\n</ul>\n\n<pre>...\n  Transaction tx = ((UserDaoImpl)udao).getSession().beginTransaction();\n  tx.begin();\n  users = udao.listUserWithEvent();\n...\n</pre>\n\n<ul>\n<li>getting a transaction within the listUserWithEvent()</li>\n</ul>\n\n<pre> public List listUserWithEvent() {\n  SessionFactory sf = hibernateTemplate.getSessionFactory();\n  Session s = sf.openSession();\n  Transaction tx = s.beginTransaction();\n  tx.begin();\n\n  List users = hibernateTemplate.find(\"from User\");\n  for (User user : users) {\n   System.out.println(\"LIST : \" + user.getName() + \":\");\n   user.getEvents().size();\n  }\n  tx.commit();\n  return users;\n }\n</pre>\n\n<p>I am really out of ideas by now. Also, using the listUser or listEvent just work fine. </p>\n\n<p><strong>Step forward:</strong></p>\n\n<p>Thanks to Thierry I got one step further (I think). I created the MyTransaction class and do my whole work in there, getting everything from spring. The new main looks like this:</p>\n\n<pre><code>\n public static void main(String[] args) {\n\n  ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\"basic-db.xml\");\n\n  // getting dao\n  UserDao udao = (UserDao) ac.getBean(\"myUserDAO\");\n  EventDao edao = (EventDao) ac.getBean(\"myEventDAO\");\n\n  // gettting transaction template\n  TransactionTemplate transactionTemplate = (TransactionTemplate) ac.getBean(\"transactionTemplate\");\n\n  MyTransaction mt = new MyTransaction(udao, edao);\n  transactionTemplate.execute(mt);\n\n  ((ConfigurableApplicationContext)ac).close();\n }\n</code>\n</pre>\n\n<p>Unfortunately now there is a null-pointer Exception @: user.getEvents().size(); (in the daoImpl). </p>\n\n<p>I know that it should not be null (neither from the output in the console nor from the db layout). </p>\n\n<p>Here is the console output for more information (I did a check for user.getEvent() == null and printed \"EVENT is NULL\"):</p>\n\n<pre>New user...\nHibernate: insert into User (name) values (?)\nHibernate: insert into User (name) values (?)\nHibernate: insert into Event (name, user_id) values (?, ?)\nHibernate: insert into Event (name, user_id) values (?, ?)\nHibernate: insert into Event (name, user_id) values (?, ?)\nList users:\nHibernate: select user0_.id as id0_, user0_.name as name0_ from User user0_\n1:User1\n2:User2\nList events:\nHibernate: select event0_.id as id1_, event0_.name as name1_, event0_.user_id as user3_1_ from Event event0_\n1:Birthday1 for 1:User1\n2:Birthday2 for 1:User1\n3:Wedding for 2:User2\nHibernate: select user0_.id as id0_, user0_.name as name0_ from User user0_\nEvents for users\n1:User1 --\nEVENT is NULL\n2:User2 --\nEVENT is NULL\n</pre>\n\n<p>You can get the sample project from <a href=\"http://www.gargan.org/code/hibernate-test1.tgz\" rel=\"nofollow noreferrer\">http://www.gargan.org/code/hibernate-test1.tgz</a> (it's an eclipse/maven project)</p>\n\n<p><strong>The solution (for console applications)</strong></p>\n\n<p>There are actually two solutions for this problem - depending on your environment:</p>\n\n<p>For a console application you need a transaction template which captures the actutal db logic and takes care of the transaction:</p>\n\n<pre><code>\npublic class UserGetTransaction implements TransactionCallback{\n\n public List users;\n\n protected ApplicationContext context;\n\n public UserGetTransaction (ApplicationContext context) {\n  this.context = context;\n }\n\n @Override\n public Boolean doInTransaction(TransactionStatus arg0) {\n  UserDao udao = (UserDao) ac.getBean(\"myUserDAO\");\n  users = udao.listUserWithEvent();\n  return null;\n }\n\n}\n</code>\n</pre>\n\n<p>You can use this by calling:</p>\n\n<pre><code>\n TransactionTemplate transactionTemplate = (TransactionTemplate) context.getBean(\"transactionTemplate\");\n UserGetTransaction mt = new UserGetTransaction(context);\n transactionTemplate.execute(mt);\n</code>\n</pre>\n\n<p>In order for this to work you need to define the template class for spring (ie. in your basic-db.xml):</p>\n\n<pre><code>&lt;bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\"&gt;\n    &lt;property name=\"transactionManager\" ref=\"transactionManager\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p><strong>Another (possible) solution</strong></p>\n\n<p>thanks andi</p>\n\n<pre><code>    PlatformTransactionManager transactionManager = (PlatformTransactionManager) applicationContext.getBean(\"transactionManager\");\n    DefaultTransactionAttribute transactionAttribute = new DefaultTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED);\n\ntransactionAttribute.setIsolationLevel(TransactionDefinition.ISOLATION_SERIALIZABLE);\n    TransactionStatus status = transactionManager.getTransaction(transactionAttribute);\n    boolean success = false;\n    try {\n      new UserDataAccessCode().execute();\n      success = true;\n    } finally {\n      if (success) {\n        transactionManager.commit(status);\n      } else {\n        transactionManager.rollback(status);\n      }\n    }\n</code></pre>\n\n<p><strong>The solution (for servlets)</strong></p>\n\n<p>Servlets are not that big of a problem. When you have a servlet you can simply start and bind a transaction at the beginning of your function and unbind it again at the end:</p>\n\n<pre><code>public void doGet(...) {\n  SessionFactory sessionFactory = (SessionFactory) context.getBean(\"sessionFactory\");\n  Session session = SessionFactoryUtils.getSession(sessionFactory, true);\n  TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(session));\n\n// Your code....\n\n  TransactionSynchronizationManager.unbindResource(sessionFactory);\n}\n</code></pre>\n    ","a":"\n<p>I think you should not use the hibernate session transactional methods, but let spring do that.</p>\n\n<p>Add this to your spring conf:</p>\n\n<pre><code>&lt;bean id=\"txManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n    &lt;property name=\"sessionFactory\" ref=\"mySessionFactory\" /&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\"&gt;\n    &lt;property name=\"transactionManager\" ref=\"txManager\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>and then I would modify your test method to use the spring transaction template:</p>\n\n<pre><code>public static void main(String[] args) {\n    // init here (getting dao and transaction template)\n\n    transactionTemplate.execute(new TransactionCallback() {\n        @Override\n        public Object doInTransaction(TransactionStatus status) {\n          // do your hibernate stuff in here : call save, list method, etc\n        }\n    }\n}\n</code></pre>\n\n<p>as a side note, @OneToMany associations are lazy by default, so you don't need to annotate it lazy. (@*ToMany are LAZY by default, @*ToOne are EAGER by default)</p>\n\n<p>EDIT: here is now what is happening from hibernate point of view:</p>\n\n<ul>\n<li>open session (with transaction start)</li>\n<li>save a user and keep it in the session (see the session cache as an entity hashmap where the key is the entity id)</li>\n<li>save an event and keep it in the session</li>\n<li>save another event and keep it in the session</li>\n<li><p>... same with all the save operations ...</p></li>\n<li><p>then load all users (the \"from Users\" query)</p></li>\n<li>at that point hibernate see that it has already the object in its session, so discard the one it got from the request and return the one from the session.</li>\n<li>your user in the session does not have its event collection initialized, so you get null.</li>\n<li>...</li>\n</ul>\n\n<p>Here are some points to enhance your code:</p>\n\n<ul>\n<li>in your model, when collection ordering is not needed, use Set, not List for your collections (private Set events, not private List events)</li>\n<li>in your model, type your collections, otherwise hibernate won't which entity to fetch (private Set&lt;Event&gt; events)</li>\n<li>when you set one side of a bidirectional relation, and you wish to use the mappedBy side of the relation in the same transaction, set both sides. Hibernate will not do it for you before the next tx (when the session is a fresh view from the db state).</li>\n</ul>\n\n<p>So to address the point above, either do the save in one transaction, and the loading in another one :</p>\n\n<pre><code>public static void main(String[] args) {\n    // init here (getting dao and transaction template)\n    transactionTemplate.execute(new TransactionCallback() {\n        @Override\n        public Object doInTransaction(TransactionStatus status) {\n          // save here\n        }\n    }\n\n    transactionTemplate.execute(new TransactionCallback() {\n        @Override\n        public Object doInTransaction(TransactionStatus status) {\n          // list here\n        }\n    }\n}\n</code></pre>\n\n<p>or set both sides:</p>\n\n<pre><code>...\nevent1.setUser(user);\n...\nevent2.setUser(user);\n...\nuser.setEvents(Arrays.asList(event1,event2));\n...\n</code></pre>\n\n<p>(Also do not forget to address the code enhancement points above, Set not List, collection typing)</p>\n    "},{"t":"Getting Database connection in pure JPA setup","l":"http://stackoverflow.com/questions/3493495/getting-database-connection-in-pure-jpa-setup","q":"\n\n<p>We have a JPA application (using hibernate) and we need to pass a call to a legacy reporting tool that needs a JDBC database connection as a parameter. Is there a simple way to get access to the JDBC connection hibernate has setup?</p>\n    ","a":"\n<p>Where you want to get that connection is unclear. One possibility would be to get it from the underlying Hibernate <code>Session</code> used by the <code>EntityManager</code>. With JPA 1.0, you'll have to do something like this:</p>\n\n<pre><code>Session session = (Session)em.getDelegate();\nConnection conn = session.connection();\n</code></pre>\n\n<p>Note that the <a href=\"http://download.oracle.com/javaee/5/api/javax/persistence/EntityManager.html#getDelegate%28%29\" rel=\"nofollow noreferrer\"><code>getDelegate()</code></a> is not portable, the result of this method is implementation specific: the above code works in JBoss, for GlassFish you'd have to adapt it - have a look at <a href=\"http://weblogs.java.net/blog/2009/05/25/be-careful-while-using-entitymanagergetdelegate\" rel=\"nofollow noreferrer\">Be careful while using EntityManager.getDelegate()</a>.</p>\n\n<p>In JPA 2.0, things are a bit better and you can do the following:</p>\n\n<pre><code>Connection conn = em.unwrap(Session.class).connection();\n</code></pre>\n\n<p>If you are running inside a container, you could also perform a lookup on the configured <code>DataSource</code>.</p>\n    "},{"t":"Transaction marked as rollback only: How do I find the cause","l":"http://stackoverflow.com/questions/19302196/transaction-marked-as-rollback-only-how-do-i-find-the-cause","q":"\n\n<p>I am having issues with committing a transaction within my @Transactional method:</p>\n\n<pre><code>methodA() {\n    methodB()\n}\n\n@Transactional\nmethodB() {\n    ...\n    em.persist();\n    ...\n    em.flush();\n    log(\"OK\");\n}\n</code></pre>\n\n<p>When I call methodB() from methodA(), the method passes successfuly and I can see \"OK\" in my logs. But then I get </p>\n\n<pre><code>Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly\n    at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:521)\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393)\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n    at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:622)\n    at methodA()...\n</code></pre>\n\n<ol>\n<li>The context of methodB is completely missign in the exception - which is okay I suppose?</li>\n<li>Something within the methodB() marked the transaction as rollback only? How can I find it out? Is there for instance a way to check something like <code>getCurrentTransaction().isRollbackOnly()?</code> - like this I could step through the method and find the cause.</li>\n</ol>\n    ","a":"\n<p>I finally understood the problem:</p>\n\n<pre><code>methodA() {\n    methodB()\n}\n\n@Transactional(noRollbackFor = Exception.class)\nmethodB() {\n    ...\n    try {\n        methodC()\n    } catch (...) {...}\n    log(\"OK\");\n}\n\n@Transactional\nmethodC() {\n    throw new ...();\n}\n</code></pre>\n\n<p>What happens is that even though the <code>methodB</code> has the right annotation, the <code>methodC</code> does not. When the exception is thrown, the second <code>@Transactional</code> marks the first transaction as Rollback only anyway.</p>\n    "},{"t":"How to turn off hbm2ddl?","l":"http://stackoverflow.com/questions/3179765/how-to-turn-off-hbm2ddl","q":"\n\n<p>I couldn't find a reference on how to switch hbm2ddl off.</p>\n    ","a":"\n<p>Just omitting <code>hibernate.hbm2ddl.auto</code> defaults to Hibernate not doing anything. From the reference documentation:</p>\n\n<blockquote>\n  <h3><a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/tutorial.html#tutorial-firstapp-configuration\" rel=\"nofollow noreferrer\">1.1.4. Hibernate configuration</a></h3>\n  \n  <p>The <code>hbm2ddl.auto</code> option turns on\n  automatic generation of database\n  schemas directly into the database.\n  <strong>This can also be turned off by removing the configuration option</strong>,\n  or redirected to a file with the help\n  of the SchemaExport Ant task.</p>\n</blockquote>\n\n<p>Setting <code>hbm2ddl.auto</code> to <code>none</code> (undocumented) might generate a warning, such as: <code>org.hibernate.cfg.SettingsFactory - Unrecognized value for \"hibernate.hbm2ddl.auto\": none</code></p>\n    "},{"t":"java mapping enum to string in hibernate","l":"http://stackoverflow.com/questions/15988342/java-mapping-enum-to-string-in-hibernate","q":"\n\n<p>I've got a Category Hibernate model:</p>\n\n<pre><code>@Entity\n@Table(name = \"category\")\npublic class Category {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    @Column(name = \"id\")\n    private long id;\n\n    @Column(name = \"type\")\n    private String type;\n</code></pre>\n\n<p>which have a type string field. Also I've got a Java enum which represent a type of a category:</p>\n\n<pre><code>public enum CategoryType {\n    INCOME, OUTCOME;\n}\n</code></pre>\n\n<p>which I would like to use instead of the string type. The SQL accepts two distinct values in the varchar parameter: either <code>CategoryIncome</code> or <code>CategoryOutcome</code>. I would like the Category model class to accept an enum variable - and map it somehow to the string whenever hibernate asks for it.</p>\n\n<p>Is it possible?</p>\n    ","a":"\n<p>Yes, is possible. It should be:</p>\n\n<pre><code>@Enumerated(EnumType.STRING)\n@Column(name = \"category_type\")\nprivate CategoryType categoryType;\n</code></pre>\n    "},{"t":"Avoid Jackson serialization on non fetched lazy objects","l":"http://stackoverflow.com/questions/21708339/avoid-jackson-serialization-on-non-fetched-lazy-objects","q":"\n\n<p>I have a simple controller that return a User object, this user have a attribute coordinates that have the hibernate property FetchType.LAZY.</p>\n\n<p>When I try to get this user, I always have to load all the coordinates to get the user object, otherwise when Jackson try to serialize the User throws the exception:</p>\n\n<blockquote>\n  <p>com.fasterxml.jackson.databind.JsonMappingException: could not initialize proxy - no Session</p>\n</blockquote>\n\n<p>This is due to Jackson is trying to fetch this unfetched object. Here are the objects:</p>\n\n<pre><code>public class User{\n\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\")\n    @JsonManagedReference(\"user-coordinate\")\n    private List&lt;Coordinate&gt; coordinates;\n}\n\npublic class Coordinate {\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\", nullable = false)\n    @JsonBackReference(\"user-coordinate\")\n    private User user;\n}\n</code></pre>\n\n<p>And the controller:</p>\n\n<pre><code>@RequestMapping(value = \"/user/{username}\", method=RequestMethod.GET)\npublic @ResponseBody User getUser(@PathVariable String username) {\n\n    User user = userService.getUser(username);\n\n    return user;\n\n}\n</code></pre>\n\n<p>There is a way to tell Jackson to not serialize the unfetched objects? I've been looking other answers posted 3 years ago implementing jackson-hibernate-module. But probably it could be achieved with a new jackson feature.</p>\n\n<p>My versions are:</p>\n\n<ul>\n<li>Spring 3.2.5 </li>\n<li>Hibernate 4.1.7 </li>\n<li>Jackson 2.2</li>\n</ul>\n\n<p>Thanks in advance.</p>\n    ","a":"\n<p>I finally found the solution! thanks to indybee for giving me a clue.</p>\n\n<p>The tutorial <a href=\"http://blog.pastelstudios.com/2012/03/12/spring-3-1-hibernate-4-jackson-module-hibernate/\">Spring 3.1, Hibernate 4 and Jackson-Module-Hibernate</a> have a good solution for Spring 3.1 and earlier versions. But since version 3.1.2 Spring have his own <strong>MappingJackson2HttpMessageConverter</strong> with almost the same functionality as the one in the tutorial, so we don't need to create this custom HTTPMessageConverter.</p>\n\n<p>With javaconfig we don't need to create a <strong>HibernateAwareObjectMapper</strong> too, we just need to add the <strong>Hibernate4Module</strong> to the default <strong>MappingJackson2HttpMessageConverter</strong> that Spring already have and add it to the HttpMessageConverters of the application, so we need to:</p>\n\n<ol>\n<li><p>Extend our spring config class from <strong>WebMvcConfigurerAdapter</strong> and override the method <strong>configureMessageConverters</strong>. </p></li>\n<li><p>On that method add the <strong>MappingJackson2HttpMessageConverter</strong> with the <strong>Hibernate4Module</strong> registered in a previus method.</p></li>\n</ol>\n\n<p>Our config class should look like this:</p>\n\n<pre><code>@Configuration\n@EnableWebMvc\npublic class MyConfigClass extends WebMvcConfigurerAdapter{\n\n    //More configuration....\n\n    /* Here we register the Hibernate4Module into an ObjectMapper, then set this custom-configured ObjectMapper\n     * to the MessageConverter and return it to be added to the HttpMessageConverters of our application*/\n    public MappingJackson2HttpMessageConverter jacksonMessageConverter(){\n        MappingJackson2HttpMessageConverter messageConverter = new MappingJackson2HttpMessageConverter();\n\n        ObjectMapper mapper = new ObjectMapper();\n        //Registering Hibernate4Module to support lazy objects\n        mapper.registerModule(new Hibernate4Module());\n\n        messageConverter.setObjectMapper(mapper);\n        return messageConverter;\n\n    }\n\n    @Override\n    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {\n        //Here we add our custom-configured HttpMessageConverter\n        converters.add(jacksonMessageConverter());\n        super.configureMessageConverters(converters);\n    }\n\n    //More configuration....\n}\n</code></pre>\n\n<p>If you have an xml configuration, you don't need to create your own MappingJackson2HttpMessageConverter either, but you do need to create the personalized mapper that appears in the tutorial (HibernateAwareObjectMapper), so your xml config should look like this:</p>\n\n<pre><code>&lt;mvc:message-converters&gt;\n    &lt;bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"&gt;\n        &lt;property name=\"objectMapper\"&gt;\n            &lt;bean class=\"com.pastelstudios.json.HibernateAwareObjectMapper\" /&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n&lt;/mvc:message-converters&gt;\n</code></pre>\n\n<p>Hope this answer be understandable and helps someone find the solution for this problem, any questions feel free to ask!</p>\n    "},{"t":"Using Hibernate's ScrollableResults to slowly read 90 million records","l":"http://stackoverflow.com/questions/2826319/using-hibernates-scrollableresults-to-slowly-read-90-million-records","q":"\n\n<p>I simply need to read each row in a table in my MySQL database using Hibernate and write a file based on it.  But there are 90 million rows and they are pretty big.  So it seemed like the following would be appropriate:</p>\n\n<pre><code>ScrollableResults results = session.createQuery(\"SELECT person FROM Person person\")\n            .setReadOnly(true).setCacheable(false).scroll(ScrollMode.FORWARD_ONLY);\nwhile (results.next())\n    storeInFile(results.get()[0]);\n</code></pre>\n\n<p>The problem is the above will try and load all 90 million rows into RAM before moving on to the while loop... and that will kill my memory with OutOfMemoryError: Java heap space exceptions :(.</p>\n\n<p>So I guess ScrollableResults isn't what I was looking for?  What is the proper way to handle this?  I don't mind if this while loop takes days (well I'd love it to not).</p>\n\n<p>I guess the only other way to handle this is to use setFirstResult and setMaxResults to iterate through the results and just use regular Hibernate results instead of ScrollableResults.  That feels like it will be inefficient though and will start taking a ridiculously long time when I'm calling setFirstResult on the 89 millionth row...</p>\n\n<p>UPDATE: setFirstResult/setMaxResults doesn't work, it turns out to take an unusably long time to get to the offsets like I feared.  There must be a solution here!  Isn't this a pretty standard procedure??  I'm willing to forgo Hibernate and use JDBC or whatever it takes.</p>\n\n<p>UPDATE 2: the solution I've come up with which works ok, not great, is basically of the form:</p>\n\n<pre><code>select * from person where id &gt; &lt;offset&gt; and &lt;other_conditions&gt; limit 1\n</code></pre>\n\n<p>Since I have other conditions, even all in an index, it's still not as fast as I'd like it to be...  so still open for other suggestions..</p>\n    ","a":"\n<p>Using setFirstResult and setMaxResults is your only option that I'm aware of.</p>\n\n<p>Traditionally a scrollable resultset would only transfer rows to the client on an as required basis. Unfortunately the MySQL Connector/J actually fakes it, it executes the entire query and transports it to the client, so the driver actually has the entire result set loaded in RAM and will drip feed it to you (evidenced by your out of memory problems). You had the right idea, it's just shortcomings in the MySQL java driver.</p>\n\n<p>I found no way to get around this, so went with loading large chunks using the regular setFirst/max methods. Sorry to be the bringer of bad news.</p>\n\n<p>Just make sure to use a stateless session so there's no session level cache or dirty tracking etc.</p>\n\n<p>EDIT:</p>\n\n<p>Your UPDATE 2 is the best you're going to get unless you break out of the MySQL J/Connector. Though there's no reason you can't up the limit on the query. Provided you have enough RAM to hold the index this should be a somewhat cheap operation. I'd modify it slightly, and grab a batch at a time, and use the highest id of that batch to grab the next batch.</p>\n\n<p>Note: this will only work if <strong>other_conditions</strong> use equality (no range conditions allowed) and have the last column of the index as <strong>id</strong>. </p>\n\n<pre><code>select * \nfrom person \nwhere id &gt; &lt;max_id_of_last_batch&gt; and &lt;other_conditions&gt; \norder by id asc  \nlimit &lt;batch_size&gt;\n</code></pre>\n    "},{"t":"What are the required C3P0 settings for hibernate in order to avoid Deadlocks","l":"http://stackoverflow.com/questions/475893/what-are-the-required-c3p0-settings-for-hibernate-in-order-to-avoid-deadlocks","q":"\n\n<p>I use Hibernate together with MySQL 5.1.30.</p>\n\n<p>I have the next libraries:  </p>\n\n<ul>\n<li><strong>c3p0-0.0.1.2.jar</strong> </li>\n<li><strong>mysql-connector-java-5.0.3-bin.jar</strong></li>\n<li><strong>hibernate3.jar</strong></li>\n</ul>\n\n<p>I use a hibernate.cfg.xml for configuration:  </p>\n\n<pre><code>&lt;!DOCTYPE hibernate-configuration PUBLIC\n    \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n    \"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd\"&gt;\n\n&lt;hibernate-configuration&gt;\n    &lt;session-factory&gt;\n        &lt;!-- Database connection settings --&gt;\n        &lt;property name=\"connection.driver_class\"&gt;org.gjt.mm.mysql.Driver&lt;/property&gt; \n\n        &lt;property name=\"connection.url\"&gt;jdbc:mysql://localhost/fooDatatbase&lt;/property&gt;\n    &lt;property name=\"connection.username\"&gt;foo&lt;/property&gt;\n    &lt;property name=\"connection.password\"&gt;foo123&lt;/property&gt;\n\n        &lt;!-- Use the C3P0 connection pool provider --&gt;\n    &lt;property name=\"hibernate.c3p0.min_size\"&gt;5&lt;/property&gt;\n    &lt;property name=\"hibernate.c3p0.max_size\"&gt;20&lt;/property&gt;\n    &lt;property name=\"hibernate.c3p0.timeout\"&gt;300&lt;/property&gt;\n    &lt;property name=\"hibernate.c3p0.max_statements\"&gt;50&lt;/property&gt;\n    &lt;property name=\"hibernate.c3p0.idle_test_periods\"&gt;3000&lt;/property&gt;       \n\n        &lt;!-- SQL dialect --&gt;\n        &lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n\n        &lt;!-- Enable Hibernate's automatic session context management --&gt;\n        &lt;property name=\"current_session_context_class\"&gt;thread&lt;/property&gt;\n\n        &lt;!-- Disable the second-level cache  --&gt;\n        &lt;property name=\"cache.provider_class\"&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;\n\n        &lt;!-- Echo all executed SQL to stdout --&gt;\n        &lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n\n        &lt;mapping resource=\"databaselayer/mail/Mail.hbm.xml\"/&gt;\n        &lt;mapping resource=\"databaselayer/courses/Course.hbm.xml\"/&gt;\n        &lt;mapping resource=\"databaselayer/price/Price.hbm.xml\"/&gt;        \n        &lt;mapping resource=\"databaselayer/contact/Contact.hbm.xml\"/&gt;\n        &lt;mapping resource=\"databaselayer/artists/Musician.hbm.xml\"/&gt;\n        &lt;mapping resource=\"databaselayer/concerts/Concert.hbm.xml\"/&gt;     \n        &lt;mapping resource=\"databaselayer/welcome/Welcome.hbm.xml\"/&gt;\n        &lt;mapping resource=\"databaselayer/information/Information.hbm.xml\"/&gt;                             \n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<p>In the <strong>JAVA persistance with hibernate</strong> book, c3p0 configuration options are explained: </p>\n\n<ul>\n<li><strong>hibernate.c3p0.min_size</strong> This is the minimum number of JDBC connections that C3P0 keeps ready at all times</li>\n<li><strong>hibernate.c3p0.max_size</strong> This is the maximum number of connections in the pool. An exception is thrown at runtime if this number is exhausted.</li>\n<li><strong>hibernate.c3p0.timeout</strong> You specify the timeout period (in this case, 300 seconds) after which an idle connection is removed from the pool).</li>\n<li><strong>hibernate.c3p0.max_statements</strong> Maximum Number of statements that will be cached. Caching of prepared statements is essential for best performance with Hibernate. </li>\n<li><strong>hibernate.c3p0.idle_test_periods</strong> This is the iddle time in seconds before a connection is automatically validated. </li>\n</ul>\n\n<p>I use Java 1.5.0_09 and <strong>tomcat 6.0</strong>. I have three applications deployed in tomcat. Each of them uses hibernate with a configuration file almost equivalent the shown above (only username, databasename, password and the mapping resoruces change). </p>\n\n<p>Unfortunately with the above settings, after some hours running i get some nasty <strong>Deadlock errors</strong> which end killing tomcat. </p>\n\n<pre><code>Jan 22, 2009 3:29:07 PM com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector run\nWARNING: com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector@2437d -- APPARENT DEADLOCK!!! Creating emergency threads for unassigned pending tasks!\nJan 22, 2009 3:29:07 PM com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector run\nWARNING: com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector@1dc5cb7 -- APPARENT DEADLOCK!!! Creating emergency threads for unassigned pending tasks!\nJan 22, 2009 3:29:07 PM com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector run\nWARNING: com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector@9cd2ef -- APPARENT DEADLOCK!!! Creating emergency threads for unassigned pending tasks!\nJan 22, 2009 3:29:07 PM com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector run\nWARNING: com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector@4af355 -- APPARENT DEADLOCK!!! Creating emergency threads for unassigned pending tasks!\nJan 22, 2009 3:29:07 PM com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector run\nWARNING: com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector@1275fcb -- APPARENT DEADLOCK!!! Creating emergency threads for unassigned pending tasks!\nJan 22, 2009 3:29:35 PM com.mchange.v2.async.ThreadPoolAsynchronousRunner$DeadlockDetector run\n</code></pre>\n\n<p>This seems to be an error several people already got. I changed my settings trying to follow the workaround described here<a href=\"http://forum.hibernate.org/viewtopic.php?p=2386237\" rel=\"nofollow noreferrer\">http://forum.hibernate.org/viewtopic.php?p=2386237</a> to:</p>\n\n<pre><code>&lt;property name=\"hibernate.c3p0.acquire_increment\"&gt;1&lt;/property&gt;\n&lt;property name=\"hibernate.c3p0.min_size\"&gt;0&lt;/property&gt;\n&lt;property name=\"hibernate.c3p0.max_size\"&gt;48&lt;/property&gt;\n&lt;property name=\"hibernate.c3p0.timeout\"&gt;0&lt;/property&gt;\n&lt;property name=\"hibernate.c3p0.max_statements\"&gt;0&lt;/property&gt;\n</code></pre>\n\n<p>With the new settings, I do not get Deadlocks, but I get: </p>\n\n<pre><code>WARNING: SQL Error: 0, SQLState: 08S01\nJan 24, 2009 5:53:37 AM org.hibernate.util.JDBCExceptionReporter logExceptions\nSEVERE: Communications link failure due to underlying exception: \n\n** BEGIN NESTED EXCEPTION ** \n\njava.io.EOFException\n\nSTACKTRACE:\n\njava.io.EOFException\n    at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:1913)\n</code></pre>\n\n<p>Does anyone knows what I am doing wrong, and how I can setup c3p0 correctly?</p>\n    ","a":"\n<p>The <strong>hibernate.c3p0.idle_test_periods</strong> have to be less than h*<em>ibernate.c3p0.timeout</em>* because the first is just only a time value where hibernate check for idle connections and try to close it.</p>\n\n<p>Meanwhile the second is just how much time a connection need to be ejected.</p>\n\n<p>If the idle_test_periods is bigger than timeout parameter than hibernate look for anything that is null or not exist in the system. At least I understood in this way.</p>\n    "},{"t":"Hibernate 2nd level cache in a Grails app","l":"http://stackoverflow.com/questions/9344907/hibernate-2nd-level-cache-in-a-grails-app","q":"\n\n<h2>Part I</h2>\n\n<p>In a Grails app, I understand that you enable the 2nd level cache per domain class by adding</p>\n\n<pre><code>static mapping {\n  cache true\n}\n</code></pre>\n\n<p>By default the 2nd level cache is only used when <code>get()</code> is called, but it can also be used for criteria queries and dynamic finders by adding <code>cache true</code> to the query.</p>\n\n<p>However, I'm still not sure I understand how the query cache works. My best guess is that:</p>\n\n<ul>\n<li>there are separate query caches for each domain class, e.g. one for Book and another for Author</li>\n<li>before a query like <code>Author.findByName('bob', [cache: true])</code> is executed, a cache key is computed, which is based on the domain class (Author), the query (findByName) and the query parameters ('bob'). If that key is found in the Author query cache, the cached results are returned instead of executing the query</li>\n<li>any time an Author is saved, deleted, or updated, the Author query cache is flushed</li>\n</ul>\n\n<p>This seems reasonable until we consider that a query that returns Book instances may join to the Author table. In that case, it would be necessary to flush both the Book and Author query caches when an Author is saved, deleted, or updated. This leads me to suspect that perhaps there is just one single query cache and it is cleared whenever any cached domain class is saved?</p>\n\n<h2>Part II</h2>\n\n<p>In the Grails docs it mentions that </p>\n\n<blockquote>\n  <p>As well as the ability to use Hibernate's second level cache to cache instances you can also cache collections (associations) of objects. </p>\n</blockquote>\n\n<p>For example:</p>\n\n<pre><code>class Author {    \n\n  static hasMany = [books: Book]\n\n  static mapping = { \n    cache true        // Author uses the 2nd level cache\n    books cache: true // associated books use the 2nd level cache\n  } \n}\n\nclass Book {\n  static belongsTo = [author: Author]\n\n  static mapping = {\n    cache true // Book uses the 2nd level cache\n  }\n}\n</code></pre>\n\n<p>Does the configuration above make sense, i.e. if Author and Book are themselves using the 2nd level cache, is there any benefit to making the Author-Book association also use the 2nd level cache?</p>\n\n<h2>Part III</h2>\n\n<p>Finally, I've read <a href=\"http://stackoverflow.com/a/6414366/2648\">this advice</a> about using the 2nd level query cache, which suggests that it should only be used for infrequently changing domain classes. Are there any circumstances under which one should not enable the 2nd level cache for <code>get()</code> operations, i.e. any reason why one wouldn't add the following to a domain class</p>\n\n<pre><code>static mapping = {\n  cache true // Book uses the 2nd level cache\n}\n</code></pre>\n    ","a":"\n<p>Part 1: </p>\n\n<p>Hibernate does the right thing. The query cache is not per entity. There is a single query cache region, shared by all queries, unless you set a specific region for a query. Each time a table is updated, its timestamp in the timestamps cache is updated. Each time a query is executed, the timestamp of each of the tables where the query searches is compared to the timestamp of the cached result. And of course, the cached result is returned only if itstimestamp is more recent than all the table timestamps.</p>\n\n<p>Part 2: </p>\n\n<p>Yes, it makes sense. The cache for the author remembers that the author with ID 456 has the name \"foo\" and the birth date 1975/07/19. Only the data stored in the author table is remembered. So, caching the association  is also useful: instead of making an additional query to get the set of books of the author when calling <code>author.getBooks()</code>, Hibernate will get the IDs of the books of the author from its cache, and then load each book from the second-level cache. Make sure to cache the Books, though. </p>\n\n<p>Part 3: </p>\n\n<p>I can imagine several reasons:</p>\n\n<ul>\n<li>there are so many entities and they are so changing that the number of cache hits would be very low, and that the second-level cache handling would in fact consume more time and memory than a solution without cache</li>\n<li>the application is clustered, and the cost and complexity of a distributed second-level cache is too high, for a low gain</li>\n<li>other non-hibernate applications write to the same database, and the cache has thus a big risk of returning stale data, which is not acceptable</li>\n<li>everything goes very well without a second-level cache, and there is no reason to make the application more complex than it is.</li>\n</ul>\n    "},{"t":"JPA Hibernate many-to-many cascading","l":"http://stackoverflow.com/questions/4935095/jpa-hibernate-many-to-many-cascading","q":"\n\n<p>I am using JPA 2.0 and hibernate. I have a User class and a Group class as follows:</p>\n\n<pre><code>public class User implements Serializable\n{\n    @Id\n    @Column(name=\"USER_ID\")\n    private String userId;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_GROUP\",\n    joinColumns =\n    {\n        @JoinColumn(name = \"GROUP_ID\")\n    },\n    inverseJoinColumns =\n    {\n        @JoinColumn(name = \"USER_ID\")\n    })\n    private Set&lt;Group&gt; groupList;\n\n    //get set methods\n}\n\npublic class Group\n{\n    @Id\n    @Column(name=\"GROUP_ID\")\n    private String groupId;\n\n    @ManyToMany(mappedBy=\"groupList\")\n    private Set&lt;User&gt; memberList;\n    //get set methods\n}\n</code></pre>\n\n<p>And then, I create a user and group and then assign the user to the group.</p>\n\n<p>What I want to have is when I delete the group, the group will be deleted (of course) and all the user-group relationship that the group has will be automatically deleted from the USER_GROUP join table but the user itself is not deleted from the USER table.</p>\n\n<p>With the code I have above, only the row in the GROUP table will be deleted when I delete a group and the user will still have an entry to the deleted group in the USER_GROUP join table.</p>\n\n<p>If I put cascade in the User class like this:</p>\n\n<pre><code>@ManyToMany(cascade=CascadeType.ALL)\n@JoinTable(name = \"USER_GROUP\",\njoinColumns =\n{\n    @JoinColumn(name = \"GROUP_ID\")\n},\ninverseJoinColumns =\n{\n    @JoinColumn(name = \"USER_ID\")\n})\nprivate Set&lt;Group&gt; groupList;\n</code></pre>\n\n<p>When I delete the group, the user will be deleted as well!</p>\n\n<p>Is there any way to achieve what I want?</p>\n    ","a":"\n<p>The way you have it mapped, the <code>User</code> is the managing side of the relationship, therefore it will be responsible for updating the join table.  </p>\n\n<p>Change the <code>JoinTable</code> mapping from <code>User</code> to <code>Group</code>, and make the <code>groupList</code> property of <code>User</code> so it has the <code>mappedBy</code> attribute.  That will change the group to the managing side of the relationship, and make persist/update calls to the group manage the join table.  </p>\n\n<p>But take note of that, you won't be able to simply add a group to a user, save the user, and continue, you'll instead have to add a user to the group and save the group to see the changes, but having the bi-directional many-to-many hopefully you'll be closely managing that relationship anyway.</p>\n    "},{"t":"JPA mapping: “QuerySyntaxException: foobar is not mapped…”","l":"http://stackoverflow.com/questions/8230309/jpa-mapping-querysyntaxexception-foobar-is-not-mapped","q":"\n\n<p>I've been playing around with a very simple JPA example and am trying to tweak it to an existing database.  But I can't get past this error.  (Below.)  It just has to be some simple thing I am not seeing.</p>\n\n<pre><code>org.hibernate.hql.internal.ast.QuerySyntaxException: FooBar is not mapped [SELECT r FROM FooBar r]\n  org.hibernate.hql.internal.ast.util.SessionFactoryHelper.requireClassPersister(SessionFactoryHelper.java:180)\n  org.hibernate.hql.internal.ast.tree.FromElementFactory.addFromElement(FromElementFactory.java:110)\n  org.hibernate.hql.internal.ast.tree.FromClause.addFromElement(FromClause.java:93)\n</code></pre>\n\n<p>In the DocumentManager class below (a simple servlet, as that is my target goal) does two things:</p>\n\n<ol>\n<li>insert a row</li>\n<li>return all rows</li>\n</ol>\n\n<p>The insertion works perfectly--all is good there.  The problem is with the retrieval.  I've tried all sorts of values for the <code>Query q = entityManager.createQuery</code> parameters, but no luck, and I've tried variously more explicate annotations of the class (like column types), all without success.</p>\n\n<p>Please save me from myself.  I'm certain it is something small.  My inexperience with JPA is preventing me from going any farther.</p>\n\n<p><strong>My ./src/ch/geekomatic/jpa/FooBar.java file:</strong></p>\n\n<pre><code>@Entity\n@Table( name = \"foobar\" )\npublic class FooBar {\n    @Id \n    @GeneratedValue(strategy=GenerationType.IDENTITY) \n    @Column(name=\"id\")\n    private int id;\n\n    @Column(name=\"rcpt_who\")\n    private String rcpt_who;\n\n    @Column(name=\"rcpt_what\")\n    private String rcpt_what;\n\n    @Column(name=\"rcpt_where\")\n    private String rcpt_where;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getRcpt_who() {\n        return rcpt_who;\n    }\n    public void setRcpt_who(String rcpt_who) {\n        this.rcpt_who = rcpt_who;\n    }\n\n    //snip...the other getters/setters are here\n}\n</code></pre>\n\n<p><strong>My ./src/ch/geekomatic/jpa/DocumentManager.java class</strong></p>\n\n<pre><code>public class DocumentManager extends HttpServlet {\n    private EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory( \"ch.geekomatic.jpa\" );\n\n    protected void tearDown() throws Exception {\n        entityManagerFactory.close();\n    }\n\n   @Override\n   public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n       FooBar document = new FooBar();\n       document.setRcpt_what(\"my what\");\n       document.setRcpt_who(\"my who\");\n\n       persist(document);\n\n       retrieveAll(response);\n   }\n\n   public void persist(FooBar document) {\n       EntityManager entityManager = entityManagerFactory.createEntityManager();\n       entityManager.getTransaction().begin();\n       entityManager.persist( document );\n       entityManager.getTransaction().commit();\n       entityManager.close();\n   }\n\n    public void retrieveAll(HttpServletResponse response) throws IOException {\n        EntityManager entityManager = entityManagerFactory.createEntityManager();\n        entityManager.getTransaction().begin();\n\n        //  *** PROBLEM LINE ***\n        Query q = entityManager.createQuery( \"SELECT r FROM foobar r\", FooBar.class );\n        List&lt;FooBar&gt; result = q.getResultList();\n\n        for ( FooBar doc : result ) {\n            response.getOutputStream().write(event.toString().getBytes());\n            System.out.println( \"Document \" + doc.getId()  );\n        }\n        entityManager.getTransaction().commit();\n        entityManager.close();\n    }\n}\n</code></pre>\n\n<p><strong>The {tomcat-home}/webapps/ROOT/WEB-INF/classes/METE-INF/persistance.xml file</strong></p>\n\n<pre><code>&lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n    version=\"2.0\"&gt;\n\n&lt;persistence-unit name=\"ch.geekomatic.jpa\"&gt;\n    &lt;description&gt;test stuff for dc&lt;/description&gt;\n\n    &lt;class&gt;ch.geekomatic.jpa.FooBar&lt;/class&gt;\n\n    &lt;properties&gt;\n        &lt;property name=\"javax.persistence.jdbc.driver\"   value=\"com.mysql.jdbc.Driver\" /&gt;\n        &lt;property name=\"javax.persistence.jdbc.url\"      value=\"jdbc:mysql://svr:3306/test\" /&gt;\n        &lt;property name=\"javax.persistence.jdbc.user\"     value=\"wafflesAreYummie\" /&gt;\n        &lt;property name=\"javax.persistence.jdbc.password\" value=\"poniesRock\" /&gt;\n\n        &lt;property name=\"hibernate.show_sql\"     value=\"true\" /&gt;\n        &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"create\" /&gt;\n    &lt;/properties&gt;\n\n&lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre>\n\n<p><strong>The MySQL table description:</strong></p>\n\n<pre><code>mysql&gt; describe foobar;\n+------------+--------------+------+-----+---------+----------------+\n| Field      | Type         | Null | Key | Default | Extra          |\n+------------+--------------+------+-----+---------+----------------+\n| id         | int(11)      | NO   | PRI | NULL    | auto_increment |\n| rcpt_what  | varchar(255) | YES  |     | NULL    |                |\n| rcpt_where | varchar(255) | YES  |     | NULL    |                |\n| rcpt_who   | varchar(255) | YES  |     | NULL    |                |\n+------------+--------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n    ","a":"\n<p>JPQL <em>mostly</em> is case-insensitive. One of the things that is case-sensitive is Java entity names. Change your query to:</p>\n\n<pre><code>\"SELECT r FROM FooBar r\"\n</code></pre>\n    "},{"t":"Why are composite keys discouraged in hibernate?","l":"http://stackoverflow.com/questions/14112839/why-are-composite-keys-discouraged-in-hibernate","q":"\n\n<p>This is from <a href=\"http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/mapping.html\">Hibernate official tutorial</a>:</p>\n\n<blockquote>\n  <p>There is an alternative <code>&lt;composite-id&gt;</code> declaration that allows access to legacy data with composite keys. Its use is strongly discouraged for anything else.</p>\n</blockquote>\n\n<p>Why are composite keys discouraged? I am considering using a 3-column table where all of the columns are foreign keys and together form a primary key that is a meaningful relationship in my model. I don't see why this is a bad idea, espicially that I will be using an index on them.</p>\n\n<p>What's the alternative? Create an additional automatically generated column and use it as a primary key? I still need to query my 3 columns anyways!?</p>\n\n<p>In short, why is this statement true? and what's the better alternative?</p>\n    ","a":"\n<p>They discourage them for several reasons:</p>\n\n<ul>\n<li>they're cumbersome to use. Each time you need to reference an object (or row), for eexample in your web application, you need to pass 3 parameters instead of just one.</li>\n<li>they're inefficient. Instead of simply hashing an integer, the database needs to hash a composite of 3 columns.</li>\n<li>they lead to bugs: developers inevitably implement the equals and hashCode methods of the primary key class incorrectly. Or they make it mutable, and modify their value once stored in a HashSet or HashMap</li>\n<li>they pollute the schema. If another table needs to reference this 3-column table, it will need to have a 3 columns instead of just one as a foreign key. Now suppose you follow the same design and make this 3-column foreign key part of the primary key of this new table, you'll quickly have a 4-column primary key, and then a 5-column PK in the next table, etc. etc., leading to duplication of data, and a dirty schema.</li>\n</ul>\n\n<p>The alternative is to have a single-column, auto-generated primary key, in addition to the other three columns. If you want to make the tuple of three columns unique, then use a unique constraint.</p>\n    "},{"t":"I found JPA, or alike, don't encourage DAO pattern","l":"http://stackoverflow.com/questions/2100115/i-found-jpa-or-alike-dont-encourage-dao-pattern","q":"\n\n<p>I found JPA, or alike, don't encourage DAO pattern. I don't know, but I feel like that, especially with server managed JTA managers.</p>\n\n<p>After adequate hands-on using DAO pattern, I started designing JPA based application around that pattern. But it doesn't fit in, IMO. I tend to lose quite a features of JPA and all.</p>\n\n<p>Well, suppose you fire a query with pessimistic locking and it returned a list of entites from a DAO method. Upon returning, transaction ends and lock is gone (a case with server managed JTA manager). So, no point, loosely speaking. There are valid cases, though.</p>\n\n<p>Another example is much more trivial. Suppose you fire a query to get some entity, that has a lazy loading one-to-many association with some other entity. Upon returning the DAO method, transaction ends. Lazy loading wouldn't work anymore, you simply get <code>null</code> or something. To cope with that we load it eagerly manually. we do something like <code>a.getBList().size()</code>.</p>\n\n<p>Thus, IMO its better to not make a DAO exclusively, and do it in your business bean, this way you will be able to take advantage of those useful features. Or ORM API can be considered a DAO/Data-layer itself, arguably. So, we don't need to make another.</p>\n\n<p>What you folks think about it?</p>\n\n<p><strong>Note: I don't say, by any means, that the DAO pattern is obsolete. Indeed it depends case to case.</strong></p>\n    ","a":"\n<p>For simple applications, I don't see any problem in using the <code>EntityManager</code> directly from EJBs and skipping the DAO pattern (I'm tired of writing too much code). And my feeling is indeed that this is what JPA and the Java EE API encourage. But it may still be justified for more complex applications (for data access from stored procedure, flat files...). So you are right, it depends :)</p>\n\n<p>You'll find some other enlightened point of views in <a href=\"http://www.infoq.com/news/2007/09/jpa-dao\" rel=\"nofollow noreferrer\">Has JPA Killed the DAO?</a> on InfoQ but you won't be surprised by the content and the conclusion that can be summarized as: you don't really need the DAO pattern anymore for standard data access, you may however need it for some more complex situations, but we live better without it.</p>\n    "},{"t":"Persist Joda-time's DateTime via Hibernate","l":"http://stackoverflow.com/questions/6284098/persist-joda-times-datetime-via-hibernate","q":"\n\n<p>I'm using Jodatime in my Play app, but currently having to do a bunch of converting back and forth  from/to <code>java.util.Date</code> and <code>java.sql.Time</code>.</p>\n\n<p>Since jodatime is included in the Play distribution, I'm thinking there's probably a better way to do this. Is there any way I can make my Model fields <code>DateTime</code>s instead of <code>java.util.Date</code> and <code>java.sql.Time</code> so the conversion is done automatically?  Is there another way of streamlining this?</p>\n    ","a":"\n<p>For Hibernate 3 add the following annotation to your date field: </p>\n\n<pre><code>@Type(type=\"org.joda.time.contrib.hibernate.PersistentDateTime\")\n</code></pre>\n\n<p>Hibernate will now do the dirty work for you.</p>\n\n<p>(Make sure you have <a href=\"http://mvnrepository.com/artifact/joda-time/joda-time-hibernate\">joda-time-hibernate.jar</a> in your classpath)</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>For Hibernate 4 add the following annotation:</p>\n\n<pre><code>@Type(type=\"org.jadira.usertype.dateandtime.joda.PersistentLocalDateTime\")\n</code></pre>\n\n<p>(Make sure you have <a href=\"http://mvnrepository.com/artifact/org.jadira.usertype/usertype.core\">jadira-usertype-core.jar</a> in your classpath)</p>\n    "},{"t":"Hibernate one-to-one: getId() without fetching entire object","l":"http://stackoverflow.com/questions/2593722/hibernate-one-to-one-getid-without-fetching-entire-object","q":"\n\n<p>I want to fetch the id of a one-to-one relationship without loading the entire object.  I thought I could do this using lazy loading as follows:</p>\n\n<pre><code>class Foo { \n    @OneToOne(fetch = FetchType.LAZY, optional = false)\n    private Bar bar; \n}\n\n\nFoo f = session.get(Foo.class, fooId);  // Hibernate fetches Foo \n\nf.getBar();  // Hibernate fetches full Bar object\n\nf.getBar().getId();  // No further fetch, returns id\n</code></pre>\n\n<p>I want f.getBar() to <em>not</em> trigger another fetch.  I want hibernate to give me a proxy object that allows me to call .getId() without actually fetching the Bar object.  </p>\n\n<p>What am I doing wrong?  </p>\n    ","a":"\n<p>Use <strong>property access strategy</strong></p>\n\n<p>Instead of</p>\n\n<pre><code>@OneToOne(fetch=FetchType.LAZY, optional=false)\nprivate Bar bar;\n</code></pre>\n\n<p>Use</p>\n\n<pre><code>private Bar bar;\n\n@OneToOne(fetch=FetchType.LAZY, optional=false)\npublic Bar getBar() {\n    return this.bar;\n}\n</code></pre>\n\n<p>Now it works fine!</p>\n\n<p>A proxy is initialized if you call any method <strong>that is not the identifier getter method</strong>. But it just works when using property access strategy. Keep it in mind.</p>\n    "},{"t":"No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here","l":"http://stackoverflow.com/questions/4961636/no-hibernate-session-bound-to-thread-and-configuration-does-not-allow-creation","q":"\n\n<p>I am getting this exception when I call a DAO method which uses <code>SessionFactory.getCurrentSession()</code>.  The DAO class is annotated with <code>@Transactional</code> and I also have <code>&lt;tx:annotation-driven/&gt;</code> declared in the application context configuration file.</p>\n\n<p>I can call my DAO methods which perform HQL queries, but whenever I call a DAO method which first gets the Hibernate session then I run into this exception:</p>\n\n<pre><code>SEVERE: Failed to save the object.\norg.hibernate.HibernateException: No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here\n    at org.springframework.orm.hibernate3.SpringSessionContext.currentSession(SpringSessionContext.java:63)\n    at org.hibernate.impl.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:622)\n    at gov.noaa.ncdc.cmb.persistence.dao.GenericDaoHibernateImpl.getCurrentSession(GenericDaoHibernateImpl.java:56)\n    at gov.noaa.ncdc.cmb.persistence.dao.GenericDaoHibernateImpl.saveOrUpdate(GenericDaoHibernateImpl.java:187)\n</code></pre>\n\n<p>I have the following application context configuration file:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:flex=\"http://www.springframework.org/schema/flex\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n                           http://www.springframework.org/schema/flex\n                           http://www.springframework.org/schema/flex/spring-flex-1.0.xsd\n                           http://www.springframework.org/schema/tx\n                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd\"&gt;\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  load values used for bean properties  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\n        &lt;property name=\"locations\"&gt;\n            &lt;value&gt;applicationContext.properties&lt;/value&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  DataSource where objects will be persisted  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"&gt;\n        &lt;property name=\"username\" value=\"${datasource.username}\" /&gt;\n        &lt;property name=\"password\" value=\"${datasource.password}\" /&gt;\n        &lt;property name=\"url\" value=\"${datasource.url}\" /&gt;\n        &lt;property name=\"driverClassName\" value=\"${datasource.driver}\" /&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!-- Factory bean for Hibernate Sessions --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean id=\"hibernateSessionFactory\" class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n        &lt;property name=\"annotatedClasses\"&gt;\n            &lt;list&gt;\n                &lt;value&gt;gov.noaa.ncdc.cmb.esrl.domain.entity.EsrlDailyAvg&lt;/value&gt;\n                &lt;value&gt;gov.noaa.ncdc.cmb.esrl.domain.entity.EsrlObservations&lt;/value&gt;\n                &lt;value&gt;gov.noaa.ncdc.cmb.esrl.domain.entity.EsrlStation&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n        &lt;property name=\"hibernateProperties\"&gt;\n            &lt;props&gt;\n                &lt;prop key=\"hibernate.dialect\"&gt;${hibernate.dialect}&lt;/prop&gt;\n                &lt;prop key=\"hibernate.show_sql\"&gt;false&lt;/prop&gt;\n                &lt;prop key=\"hibernate.format_sql\"&gt;true&lt;/prop&gt;\n                &lt;prop key=\"hibernate.use_sql_comments\"&gt;true&lt;/prop&gt;\n                &lt;prop key=\"hibernate.jdbc.batch_size\"&gt;50&lt;/prop&gt;\n                &lt;prop key=\"hibernate.query.substitutions\"&gt;true 1, false 0&lt;/prop&gt;\n                &lt;prop key=\"hibernate.max_fetch_depth\"&gt;6&lt;/prop&gt;\n                &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;${hibernate.hbm2ddlauto}&lt;/prop&gt;\n                &lt;prop key=\"hibernate.cache.use_second_level_cache\"&gt;${hibernate.use_second_level_cache}&lt;/prop&gt;\n            &lt;/props&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  Transaction Manager bean  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n        &lt;property name=\"sessionFactory\" ref=\"hibernateSessionFactory\" /&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  enable the configuration of transactional behavior based on annotations  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;tx:annotation-driven transaction-manager=\"transactionManager\" /&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  DAO for ESRL Station objects  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean id=\"esrlStationDao\" class=\"gov.noaa.ncdc.cmb.esrl.domain.dao.EsrlStationDaoHibernateImpl\"&gt;\n        &lt;property name=\"sessionFactory\" ref=\"hibernateSessionFactory\" /&gt;\n        &lt;property name=\"persistentClass\" value=\"gov.noaa.ncdc.cmb.esrl.domain.entity.EsrlStation\" /&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  DAO for ESRL Observations objects  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean id=\"esrlObservationsDao\" class=\"gov.noaa.ncdc.cmb.esrl.domain.dao.EsrlObservationsDaoHibernateImpl\"&gt;\n        &lt;property name=\"sessionFactory\" ref=\"hibernateSessionFactory\" /&gt;\n        &lt;property name=\"persistentClass\" value=\"gov.noaa.ncdc.cmb.esrl.domain.entity.EsrlObservations\" /&gt;\n    &lt;/bean&gt;\n\n\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;!--  DAO for ESRL daily average objects  --&gt;\n    &lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;\n    &lt;bean id=\"esrlDailyAvgDao\" class=\"gov.noaa.ncdc.cmb.esrl.domain.dao.EsrlDailyAvgDaoHibernateImpl\"&gt;\n        &lt;property name=\"sessionFactory\" ref=\"hibernateSessionFactory\" /&gt;\n        &lt;property name=\"persistentClass\" value=\"gov.noaa.ncdc.cmb.esrl.domain.entity.EsrlDailyAvg\" /&gt;\n    &lt;/bean&gt;\n\n\n&lt;/beans&gt; \n</code></pre>\n\n<p>The generic DAO class (from which the DAO being used in my program is extended) looks like this:</p>\n\n<pre><code>package gov.noaa.ncdc.cmb.persistence.dao;\n\nimport gov.noaa.ncdc.cmb.persistence.entity.PersistentEntity;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.Criteria;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.criterion.Criterion;\nimport org.hibernate.criterion.Example;\n\n/**\n * This class is an implementation of GenericDao&lt;T, PK&gt; using Hibernate.\n */\npublic class GenericDaoHibernateImpl&lt;T extends PersistentEntity&lt;PK&gt;, PK extends Serializable&gt;\n    implements GenericDao&lt;T, PK&gt;\n{\n    private SessionFactory sessionFactory;\n\n    static private Log log = LogFactory.getLog(GenericDaoHibernateImpl.class);\n\n    private Class&lt;T&gt; persistentClass;\n\n    /**\n     * Can be used within subclasses as a convenience method.\n     * \n     * @param criterionList the criteria to find by\n     * @return the list of elements that match the specified criteria\n     */\n    protected List&lt;T&gt; findByCriteria(final List&lt;Criterion&gt; criterionList)\n    {\n        Criteria criteria = getCurrentSession().createCriteria(persistentClass);\n        for (Criterion criterion : criterionList)\n        {\n            criteria.add(criterion);\n        }\n        return criteria.list();\n    }\n\n    protected String getCanonicalPersistentClassName()\n    {\n        return persistentClass.getCanonicalName();\n    }\n\n    /**\n     * Gets the current Hibernate Session object.\n     * \n     * @return\n     */\n    protected Session getCurrentSession()\n    {\n        return sessionFactory.getCurrentSession();\n    }\n\n    /*\n     * This method only provided for interface compatibility.  Not recommended for use with large batches \n     * (this is an inefficient implementation, and it's somewhat difficult to perform batch operations with Hibernate).\n     * \n     * (non-Javadoc)\n     * @see gov.noaa.ncdc.cmb.persistence.dao.GenericDao#batchInsert(java.util.Collection)\n     */\n    @Override\n    public int[] batchInsert(final Collection&lt;T&gt; entityCollection)\n    {\n        int[] updateCounts = new int[entityCollection.size()];\n        int i = 0;\n        for (T entity : entityCollection)\n        {\n            try\n            {\n                saveOrUpdate(entity);\n                updateCounts[i] = 1;\n                i++;\n            }\n            catch (Exception ex)\n            {\n                clear();\n                throw new RuntimeException(ex);\n            }\n        }\n        flush();\n        clear();\n\n        return updateCounts;\n    }\n\n    /*\n     * This method only provided for interface compatibility.  Not recommended for use with large batches \n     * (this is an inefficient implementation, and it's somewhat difficult to perform batch operations with Hibernate).\n     * \n     * (non-Javadoc)\n     * @see gov.noaa.ncdc.cmb.persistence.dao.GenericDao#batchUpdate(java.util.Collection)\n     */\n    @Override\n    public int[] batchUpdate(final Collection&lt;T&gt; entityCollection)\n    {\n        return batchInsert(entityCollection);\n    }\n\n    /**\n     * Completely clear the session. Evict all loaded instances and cancel all pending saves, updates and deletions. Do\n     * not close open iterators or instances of ScrollableResults.\n     */\n    public void clear()\n    {\n        getCurrentSession().clear();\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see gov.noaa.ncdc.cmb.persistence.dao.GenericDao#delete(gov.noaa.ncdc.cmb.persistence.entity.PersistentEntity)\n     */\n    @Override\n    public void delete(final T persistentObject)\n    {\n        getCurrentSession().delete(persistentObject);\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see gov.noaa.ncdc.cmb.persistence.dao.GenericDao#findAll()\n     */\n    @Override\n    public List&lt;T&gt; findAll()\n    {\n        return getCurrentSession().createQuery(\"from \" + persistentClass.getName()).list();\n    }\n\n    /**\n     * Finds a collection of entity objects which match to the example instance, minus any specified properties which should be excluded from the matching.\n     * \n     * @param exampleInstance\n     * @param excludeProperty\n     * @return\n     */\n    public List&lt;T&gt; findByExample(final T exampleInstance,\n                                 final String[] excludeProperty)\n    {\n        Criteria criteria = getCurrentSession().createCriteria(persistentClass);\n        Example example = Example.create(exampleInstance);\n        if (excludeProperty != null)\n        {\n            for (String exclude : excludeProperty)\n            {\n                example.excludeProperty(exclude);\n            }\n        }\n        criteria.add(example);\n        return criteria.list();\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see com.sun.cloud.lifecycle.core.persistence.dao.GenericDao#findById(java.io.Serializable)\n     */\n    @Override\n    public T findById(final PK id)\n    {\n        return (T) getCurrentSession().load(persistentClass, id);\n    }\n\n    /**\n     * Force this session to flush. Must be called at the end of a unit of work, before commiting the transaction and\n     * closing the session (depending on flush-mode, Transaction.commit() calls this method).\n     * \n     * Flushing is the process of synchronizing the underlying persistent store with persistable state held in memory.\n     */\n    public void flush()\n    {\n        getCurrentSession().flush();\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see gov.noaa.ncdc.cmb.persistence.dao.GenericDao#saveOrUpdate(gov.noaa.ncdc.cmb.persistence.entity.PersistentEntity)\n     */\n    @Override\n    public T saveOrUpdate(final T entity)\n    {\n        try\n        {\n            entity.setUpdatedDate(new Date());\n            getCurrentSession().saveOrUpdate(entity);\n            return entity;\n        }\n        catch (Exception ex)\n        {\n            String errorMessage = \"Failed to save the object.\";\n            log.error(errorMessage, ex);\n            throw new RuntimeException(errorMessage, ex);\n        }\n    }\n\n    /**\n     * Setter for the persistentClass property.\n     * \n     * @param persistentClass\n     */\n    public void setPersistentClass(final Class&lt;T&gt; persistentClass)\n    {\n        this.persistentClass = persistentClass;\n    }\n\n    /**\n     * Property setter.\n     * \n     * @param sessionFactory\n     */\n    public void setSessionFactory(final SessionFactory sessionFactory)\n    {\n        this.sessionFactory = sessionFactory;\n    }\n\n}\n</code></pre>\n\n<p>My application gets the DAO from the application context:</p>\n\n<pre><code>// load the Spring application context, get the DAOs\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(new String[] { \"dailyAveragingApplicationContext.xml\" });\nesrlDailyAvgDao = (EsrlDailyAvgDao) applicationContext.getBean(\"esrlDailyAvgDao\");\nesrlObservationsDao = (EsrlObservationsDao) applicationContext.getBean(\"esrlObservationsDao\");\n</code></pre>\n\n<p>And the exception is encountered when I try to save an entity:</p>\n\n<pre><code>esrlDailyAvgDao.saveOrUpdate(esrlDailyAvg);\n</code></pre>\n\n<p>The DAO class itself uses the Transactional annotation:</p>\n\n<pre><code>@Transactional\npublic class EsrlDailyAvgDaoHibernateImpl\n    extends GenericDaoHibernateImpl&lt;EsrlDailyAvg, Long&gt;\n    implements EsrlDailyAvgDao\n</code></pre>\n\n<p>The exception stack trace looks like this:</p>\n\n<pre><code>SEVERE: Failed to save the object.\norg.hibernate.HibernateException: No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here\n    at org.springframework.orm.hibernate3.SpringSessionContext.currentSession(SpringSessionContext.java:63)\n    at org.hibernate.impl.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:622)\n    at gov.noaa.ncdc.cmb.persistence.dao.GenericDaoHibernateImpl.getCurrentSession(GenericDaoHibernateImpl.java:56)\n    at gov.noaa.ncdc.cmb.persistence.dao.GenericDaoHibernateImpl.saveOrUpdate(GenericDaoHibernateImpl.java:187)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)\n    at $Proxy19.saveOrUpdate(Unknown Source)\n    at gov.noaa.ncdc.cmb.esrl.ingest.EsrlDailyAvgProcessor.main(EsrlDailyAvgProcessor.java:469)\n</code></pre>\n    ","a":"\n<p>I resolved this by adding <code>@Transactional</code> to the base/generic Hibernate DAO implementation class (the parent class which implements the saveOrUpdate() method inherited by the DAO I use in the main program), i.e. the <code>@Transactional</code> needs to be specified on the actual class which implements the method.  My assumption was instead that if I declared <code>@Transactional</code> on the child class then it included all of the methods that were inherited by the child class.  However it seems that the <code>@Transactional</code> annotation only applies to methods implemented within a class and not to methods inherited by a class.</p>\n    "},{"t":"HQL left join of un-related entities","l":"http://stackoverflow.com/questions/9892008/hql-left-join-of-un-related-entities","q":"\n\n<p>I have 2 entities, <code>A</code> and <code>B</code>. They are related but I do not want to add the relationship mapping to the beans.</p>\n\n<p>How can we use <strong>left outer join between <code>A</code> and <code>B</code> using HQL or criteria</strong>?</p>\n\n<p>There are some workarounds available for this,</p>\n\n<ol>\n<li>Use Native SQL as told <a href=\"http://stackoverflow.com/q/3753004/507864\">here</a>.</li>\n<li>Add a relationship and use <strong>select a from A a left join a.b</strong>.</li>\n<li>We can do a <strong>inner join</strong> in the HQL as <strong>select * from A a, B b where a.some=b.some</strong></li>\n</ol>\n\n<p>I was always going back these 2 options, is there any alternative for this? Or this in not possible?</p>\n    ","a":"\n<p>Currently, the theta-style on joining the unrelated classes in the where clause using HQL only supports inner join.</p>\n\n<p>The <a href=\"https://hibernate.atlassian.net/projects/HHH/issues/HHH-16\">request</a> for supporting the outer join for such situation is <a href=\"https://hibernate.atlassian.net/projects/HHH/issues/HHH-16?filter=allopenissues&amp;orderby=votes+DESC%2C+priority+DESC%2C+updated+DESC\">currently the 3-rd most voted enhancement</a>  but I don't think this feature will be implemented in the near feature as it  requires the <a href=\"https://hibernate.atlassian.net/projects/HHH/issues/HHH-2407\">re-implementation of the current ANTLER-based query parser</a> first which seems to be a gigantic task IMO.</p>\n\n<p>If you insist to use the HQL to perform left join without adding the relationship between A and B , you can use option 3 to do the inner join first, then use the following HQL  </p>\n\n<pre><code>from A a where a.some not in ( select b.some from B)\n</code></pre>\n\n<p>to find out all the A that cannot join B and combine the results programmatically .</p>\n\n<p><em>Update</em></p>\n\n<p>As of release 5.1.0 <a href=\"https://hibernate.atlassian.net/projects/HHH/issues/HHH-16?filter=allopenissues&amp;orderby=votes+DESC%2C+priority+DESC%2C+updated+DESC\">HHH-16 (Explicit joins on unrelated classes)</a> is fixed and we should be able to join the unrelated entities.</p>\n    "},{"t":"Is there a more efficient way of making pagination in Hibernate than executing select and count queries?","l":"http://stackoverflow.com/questions/168084/is-there-a-more-efficient-way-of-making-pagination-in-hibernate-than-executing-s","q":"\n\n<p>Usually pagination queries look like this. Is there a better way instead of making two almost equal methods, one of which executing \"select *...\" and the other one \"count *...\"?</p>\n\n<pre><code>public List&lt;Cat&gt; findCats(String name, int offset, int limit) {\n\n    Query q = session.createQuery(\"from Cat where name=:name\");\n\n    q.setString(\"name\", name);\n\n    if (offset &gt; 0) {\n        q.setFirstResult(offset);\n    }\n    if (limit &gt; 0) {\n        q.setMaxResults(limit);\n    }\n\n    return q.list();\n\n}\n\npublic Long countCats(String name) {\n    Query q = session.createQuery(\"select count(*) from Cat where name=:name\");\n    q.setString(\"name\", name);\n    return (Long) q.uniqueResult();\n}\n</code></pre>\n    ","a":"\n<p><a href=\"http://blog.kennardconsulting.com/2011/03/mysql-performance-leveraging.html\" rel=\"nofollow\">Here is a solution</a> by Dr Richard Kennard (mind the bug fix in the blog comment!), using <a href=\"http://www.oreillynet.com/onjava/blog/2007/05/interceptors_in_hibernate.html\" rel=\"nofollow\">Hibernate Interceptors</a></p>\n\n<p>For summary, you bind your sessionFactory to your interceptor class, so that your interceptor can give you the number of found rows later. </p>\n\n<p>You can find the code on the solution link. And below is an example usage.</p>\n\n<pre><code>SessionFactory sessionFactory = ((org.hibernate.Session) mEntityManager.getDelegate()).getSessionFactory();\nMySQLCalcFoundRowsInterceptor foundRowsInterceptor = new MySQLCalcFoundRowsInterceptor( sessionFactory );\nSession session = sessionFactory.openSession( foundRowsInterceptor );\n\ntry {\n   org.hibernate.Query query = session.createQuery( ... )   // Note: JPA-QL, not createNativeQuery!\n   query.setFirstResult( ... );\n   query.setMaxResults( ... );\n\n   List entities = query.list();\n   long foundRows = foundRowsInterceptor.getFoundRows();\n\n   ...\n\n} finally {\n\n   // Disconnect() is good practice, but close() causes problems. Note, however, that\n   // disconnect could lead to lazy-loading problems if the returned list of entities has\n   // lazy relations\n\n   session.disconnect();\n}\n</code></pre>\n    "},{"t":"Whats the advantage of load() vs get() in Hibernate?","l":"http://stackoverflow.com/questions/5370482/whats-the-advantage-of-load-vs-get-in-hibernate","q":"\n\n<p>Can anyone tell me whats the advantage of load() vs get() in Hibernate ?</p>\n    ","a":"\n<blockquote>\n  <p>Whats the advantage of load() vs get() in Hibernate? </p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/8jVve.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/8jVve.jpg\" alt=\"enter image description here\"></a><br>\n<a href=\"http://www.developersbook.com/hibernate/interview-questions/hibernate-interview-questions-faqs-2.php\" rel=\"nofollow noreferrer\">source</a>  </p>\n\n<p><strong>Proxy</strong> means, hibernate will prepare some fake object with given identifier value in the memory without hitting the database, </p>\n\n<p><strong>For Example:</strong><br>\nIf we call <code>session.load(Student.class,new Integer(107));</code>   </p>\n\n<p>hibernate will create one fake Student object [row] in the memory with id 107, but remaining properties of Student class will not even be initialized.</p>\n\n<p><a href=\"http://www.java4s.com/hibernate/difference-between-hibernate-get-and-load-methods/\" rel=\"nofollow noreferrer\">Source</a></p>\n    "},{"t":"How to set up default schema name in JPA configuration?","l":"http://stackoverflow.com/questions/2737420/how-to-set-up-default-schema-name-in-jpa-configuration","q":"\n\n<p>I found that in hibernate config file we could set up parameter <code>hibernate.default_schema</code>:</p>\n\n<pre><code>&lt;hibernate-configuration&gt; \n   &lt;session-factory&gt;\n      ...\n      &lt;property name=\"hibernate.default_schema\"&gt;myschema&lt;/property&gt;\n      ...\n   &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<p>Now I'm using JPA and I want to do the same. Otherwise I have to add parameter <code>schema</code> to each @Table annotation like:</p>\n\n<pre><code>@Entity\n@Table (name = \"projectcategory\", schema = \"SCHEMANAME\")\npublic class Category implements Serializable { ... }\n</code></pre>\n\n<p>As I understand this parameter should be somewhere in this part of configuration:</p>\n\n<pre><code>&lt;bean id=\"domainEntityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"&gt;\n    &lt;property name=\"persistenceUnitName\" value=\"JiraManager\"/&gt;\n    &lt;property name=\"dataSource\" ref=\"domainDataSource\"/&gt;\n    &lt;property name=\"jpaVendorAdapter\"&gt;\n        &lt;bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"&gt;\n            &lt;property name=\"generateDdl\" value=\"false\"/&gt;\n            &lt;property name=\"showSql\" value=\"false\"/&gt;\n            &lt;property name=\"databasePlatform\" value=\"${hibernate.dialect}\"/&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"domainDataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" destroy-method=\"close\"&gt;\n    &lt;property name=\"driverClass\" value=\"${db.driver}\" /&gt;\n    &lt;property name=\"jdbcUrl\" value=\"${datasource.url}\" /&gt;\n    &lt;property name=\"user\" value=\"${datasource.username}\" /&gt;\n    &lt;property name=\"password\" value=\"${datasource.password}\" /&gt;\n    &lt;property name=\"initialPoolSize\" value=\"5\"/&gt;\n    &lt;property name=\"minPoolSize\" value=\"5\"/&gt;\n    &lt;property name=\"maxPoolSize\" value=\"15\"/&gt;\n    &lt;property name=\"checkoutTimeout\" value=\"10000\"/&gt;\n    &lt;property name=\"maxStatements\" value=\"150\"/&gt;\n    &lt;property name=\"testConnectionOnCheckin\" value=\"true\"/&gt;\n    &lt;property name=\"idleConnectionTestPeriod\" value=\"50\"/&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>... but I can't find its name in google. Any ideas?</p>\n    ","a":"\n<p>Don't know of JPA property for this either. But you could just add the Hibernate property (assuming you use Hibernate as provider) as </p>\n\n<pre><code>...\n\n&lt;property name=\"hibernate.default_schema\" value=\"myschema\"/&gt;\n\n...\n</code></pre>\n\n<p>Hibernate should pick that up</p>\n    "},{"t":"Hibernate : Disabling contextual LOB creation as createClob() method threw error","l":"http://stackoverflow.com/questions/4588755/hibernate-disabling-contextual-lob-creation-as-createclob-method-threw-error","q":"\n\n<p>I am using using hibernate 3.5.6 with Oracle 10g. I am seeing the below exception during initialization but the application itself is working fine. What is the cause for this exception? and how it can be corrected?</p>\n\n<p><strong>Exception</strong><br>\nDisabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException</p>\n\n<p><strong>Info</strong><br>\nOracle version: Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 \nJDBC driver: Oracle JDBC driver, version: 11.1.0.7.0</p>\n\n<p>Thanks,\nGirish</p>\n    ","a":"\n<p>Remove @Temporal annotations if you use it with java.sql.* classes.  </p>\n    "},{"t":"PersistenceContext EntityManager injection NullPointerException","l":"http://stackoverflow.com/questions/4708035/persistencecontext-entitymanager-injection-nullpointerexception","q":"\n\n<p>I have a war containing the following:</p>\n\n<pre><code>META-INF/MANIFEST.MF\nWEB-INF/classes/META-INF/persistence.xml\nWEB-INF/classes/com/test/service/TestServlet.class\nWEB-INF/classes/com/test/service/TestEntity.class\nWEB-INF/classes/jndi.properties\nWEB-INF/classes/postgresql-ds.xml\nWEB-INF/jboss-web.xml\nWEB-INF/web.xml\nindex.jsp</code></pre>\n\n<p>persistence.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\"&gt;\n    &lt;persistence-unit name=\"test\"&gt;\n        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n        &lt;jta-data-source&gt;java:/TestDS&lt;/jta-data-source&gt;\n\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQLDialect\"/&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"update\" /&gt;\n            &lt;property name=\"hibernate.show_sql\" value=\"true\" /&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre>\n\n<p>web.xml:</p>\n\n<pre><code>&lt;!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;\n\n&lt;web-app&gt;\n  &lt;display-name&gt;Test Web Application&lt;/display-name&gt;\n\n    &lt;context-param&gt;\n        &lt;param-name&gt;resteasy.scan&lt;/param-name&gt;\n        &lt;param-value&gt;true&lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&lt;/listener-class&gt;\n    &lt;/listener&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;Resteasy&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&lt;/servlet-class&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;Resteasy&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/service/*&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n    &lt;resource-ref&gt;\n        &lt;res-ref-name&gt;TestDS&lt;/res-ref-name&gt;\n        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;\n        &lt;res-auth&gt;Container&lt;/res-auth&gt;\n        &lt;res-sharing-scope&gt;Shareable&lt;/res-sharing-scope&gt;\n    &lt;/resource-ref&gt;\n&lt;/web-app&gt;\n</code></pre>\n\n<p>My TestServlet class is as follows:</p>\n\n<pre><code>package com.test.service;\n\nimport java.util.*;\nimport javax.persistence.*;\nimport javax.ws.rs.*;\n\n@Path(\"/service\")\npublic class TestService {\n\n    @PersistenceContext(unitName = \"test\")\n    private EntityManager em;\n\n    @GET\n    @Path(\"/get\")\n    @Produces(\"application/json\")\n    public List get() {\n        return em.createQuery(\"from TestEntity\").getResultList();\n    }\n}</code></pre>\n\n<p>When the get() method is invoked I get a NullPointerException; the EntityManager hasn't been injected. Any suggestions on what I might be missing or how I can diagnose it? There's very little in the server log.</p>\n\n<p>I'm sure I had this working without the jboss-web.xml or the datasource entry in web.xml. I've deployed the ds.xml to the deploy directory separately too and that's definitely picked up - I can see it in the JMX console.</p>\n\n<p>Tried using JBoss 4.2.3 and a 6.0 build with the same result.</p>\n    ","a":"\n<p>An entity manager can only be injected in classes running inside a transaction. In other words, it can only be injected in a EJB. Other classe must use an EntityManagerFactory to create and destroy an EntityManager.</p>\n\n<p>Since your TestService is not an EJB, the annotation @PersistenceContext is simply ignored. Not only that, in JavaEE 5, it's not possible to inject an EntityManager nor an EntityManagerFactory in a JAX-RS Service. You have to go with a JavaEE 6 server (JBoss 6, Glassfish 3, etc).</p>\n\n<p>Here's an example of injecting an EntityManagerFactory:</p>\n\n<pre><code>package com.test.service;\n\nimport java.util.*;\nimport javax.persistence.*;\nimport javax.ws.rs.*;\n\n@Path(\"/service\")\npublic class TestService {\n\n    @PersistenceUnit(unitName = \"test\")\n    private EntityManagerFactory entityManagerFactory;\n\n    @GET\n    @Path(\"/get\")\n    @Produces(\"application/json\")\n    public List get() {\n        EntityManager entityManager = entityManagerFactory.createEntityManager();\n        try {\n            return entityManager.createQuery(\"from TestEntity\").getResultList();\n        } finally {\n            entityManager.close();\n        }\n    }\n}\n</code></pre>\n\n<p>The easiest way to go here is to declare your service as a EJB 3.1, assuming you're using a JavaEE 6 server.</p>\n\n<p>Related question:\n<a href=\"http://stackoverflow.com/questions/3027834/inject-a-ejb-into-jax-rs-restfull-service\">Inject a EJB into JAX-RS (RESTfull service)</a></p>\n    "},{"t":"Hibernate and Scala [closed]","l":"http://stackoverflow.com/questions/1494792/hibernate-and-scala","q":"\n\n<p>I have been toying with Scala and I was wondering if anyone had had any experience with using hibernate and mysql as a persistent store for scala objects? Does it work out of the box or is there a lot to do?</p>\n    ","a":"\n<p>Most of the time, Scala + Hibernate works quite well, with minor bumps which could be overcome easily. For exmaple, when dealing with collections, Hibernate requires the use of java.util interfaces. But you could import scala.collection.jcl.Conversions._ if you want to tap on Scala's more powerful library.</p>\n\n<p>You may want to check out <a href=\"http://www.artima.com/forums/flat.jsp?forum=276&amp;thread=222229\" rel=\"nofollow noreferrer\">Frank Sommers</a>' post for more information.</p>\n    "},{"t":"How can I use Maven to get the latest Hibernate release?","l":"http://stackoverflow.com/questions/1230249/how-can-i-use-maven-to-get-the-latest-hibernate-release","q":"\n\n<p>I am having trouble getting the latest release of Hibernate via Maven dependency.  It appears that the latest I can fetch from a Maven central repository is 3.2.6.GA, and I am interested in using 3.3.2.GA, which is the latest release shown on the hibernate.org site.  When I modify my hibernate dependency to this latest version in my project's pom.xml I get the following error when I run a Maven build:</p>\n\n<pre><code>Missing:\n----------\n1) org.hibernate:hibernate:jar:3.3.2.GA\n\n  Try downloading the file manually from the project website.\n\n  Then, install it using the command:\n      mvn install:install-file -DgroupId=org.hibernate -DartifactId=hibernate -D\nversion=3.3.2.GA -Dpackaging=jar -Dfile=/path/to/file\n\n  Alternatively, if you host your own repository you can deploy the file there:\n\n      mvn deploy:deploy-file -DgroupId=org.hibernate -DartifactId=hibernate -Dve\nrsion=3.3.2.GA -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[\nid]\n</code></pre>\n\n<p>Once I do that I continue to get errors indicating that I need to add a javassist dependency, then I need to update my hibernate-validator dependency, which also needs to be installed locally, and at that point I stopped and looked around to see if there is a better way, maybe pointing Maven to a JBoss/Hibernate repository, etc.  This really seems to be a headache compared to other significant open cource packages that I use such as Spring or JUnit -- when there's a new version released all I do is update the version number in the dependency element and it just works.</p>\n\n<p>I have tried adding the below repository declaration into my pom.xml but with no joy:</p>\n\n<pre><code>&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;jboss&lt;/id&gt;\n        &lt;url&gt;http://repository.jboss.org/maven2&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre>\n\n<p>I searched Google and didn't find much which helps.  Can someone suggest the most straight-forward way of going about using the latest releases of hibernate or hibernate-core (3.3.2.GA), hibernate-validator (3.1.0), and hibernate-annotations (3.4.0)?  </p>\n    ","a":"\n<p>This question is outdated since a long time now:\nall Hibernate releases are available in Maven central since years.</p>\n\n<p>Check www.hibernate.org for latest Maven coordinates (do not trust your IDE's suggestions).</p>\n    "},{"t":"com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed","l":"http://stackoverflow.com/questions/7565143/com-mysql-jdbc-exceptions-jdbc4-mysqlnontransientconnectionexception-no-operati","q":"\n\n<p>I built an application and deployed locally ... and it was working perfectly. I deployed it on a remote server and started getting the exception mentioned in the subject line. It's not because of any firewall issues.</p>\n\n<p>I changed my <code>hibernate.xml</code> to connect via my IP address rather then localhost and now I get the same timeouts on my locally deployed application. I get this error when I keep the application running for more than one day.</p>\n\n<p>I am not performing any operations after committing transactions or closing sessions myself. I am using the following properties in <code>hibernate.cfg.xml</code></p>\n\n<pre><code>&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://myremotehost:3306/akp&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.password\"&gt;root&lt;/property&gt;\n        &lt;property name=\"hibernate.show_sql\"&gt;false&lt;/property&gt;\n        &lt;property name=\"hibernate.current_session_context_class\"&gt;thread&lt;/property&gt;\n        &lt;property name=\"hibernate.query.factory_class\"&gt;org.hibernate.hql.ast.ASTQueryTranslatorFactory&lt;/property&gt;\n</code></pre>\n\n<blockquote>\n  <p>Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed.Connection was implicitly closed by the driver.</p>\n</blockquote>\n\n<p><strong>Detailed:</strong> </p>\n\n<pre><code> Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed.Connection was implicitly closed by the driver.\n      at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n      at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n      at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n      at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n      at com.mysql.jdbc.Util.handleNewInstance(Util.java:409)\n      at com.mysql.jdbc.Util.getInstance(Util.java:384)\n      at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1015)\n      at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:989)\n      at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:984)\n      at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:929)\n      at com.mysql.jdbc.ConnectionImpl.throwConnectionClosedException(ConnectionImpl.java:1193)\n      at com.mysql.jdbc.ConnectionImpl.checkClosed(ConnectionImpl.java:1180)\n      at com.mysql.jdbc.ConnectionImpl.prepareStatement(ConnectionImpl.java:4137)\n      at com.mysql.jdbc.ConnectionImpl.prepareStatement(ConnectionImpl.java:4103)\n      at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:505)\n      at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:423)\n      at org.hibernate.jdbc.AbstractBatcher.prepareQueryStatement(AbstractBatcher.java:139)\n      at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1547)\n      at org.hibernate.loader.Loader.doQuery(Loader.java:673)\n      at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:236)\n      at org.hibernate.loader.Loader.doList(Loader.java:2220)\n      ... 36 more\nCaused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: The last packet successfully received from the server was 34,247,052 milliseconds ago.  The last packet sent successfully to the server was 34,247,052 milliseconds ago. is longer than the server configured value of 'wait_timeout'. You should consider either expiring and/or testing connection validity before use in your application, increasing the server configured values for client timeouts, or using the Connector/J connection property 'autoReconnect=true' to avoid this problem.\n      at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n      at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n      at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n      at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n      at com.mysql.jdbc.Util.handleNewInstance(Util.java:409)\n      at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1118)\n      at com.mysql.jdbc.MysqlIO.send(MysqlIO.java:3321)\n      at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1940)\n      at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2113)\n      at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568)\n      at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2113)\n      at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2275)\n      at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:186)\n      at org.hibernate.loader.Loader.getResultSet(Loader.java:1787)\n      at org.hibernate.loader.Loader.doQuery(Loader.java:674)\n      at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:236)\n      at org.hibernate.loader.Loader.doList(Loader.java:2220)\n      at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2104)\n      at org.hibernate.loader.Loader.list(Loader.java:2099)\n      at org.hibernate.loader.criteria.CriteriaLoader.list(CriteriaLoader.java:94)\n      at org.hibernate.impl.SessionImpl.list(SessionImpl.java:1569)\n      at org.hibernate.impl.CriteriaImpl.list(CriteriaImpl.java:283)\n      at com.xyz.abc.DAO.GenericHibernateDAO.findByField(GenericHibernateDAO.java:119)\n      at com.xyz.abc.DAO.JobDAO.getJobsByLdap(JobDAO.java:115)\n      at com.xyz.abc.business.Jcr.getMyruns(Jcr.java:272)\n      at com.xyz.abc.business.abcService.getMyruns(abcService.java:54)\n      at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source)\n      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n      at java.lang.reflect.Method.invoke(Method.java:597)\n      at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:194)\n      at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:102)\n      at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)\n      at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114)\n      at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:173)\n      at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:173)\n      at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:142)\n      at javax.servlet.http.HttpServlet.service(HttpServlet.java:641)\n      at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n      at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)\n      at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n      at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)\n      at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:203)\n      at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)\n      at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)\n      at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n      at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)\n      at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:242)\n      at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)\n      at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:237)\n      ... 4 more\nCaused by: java.net.SocketException: Software caused connection abort: socket write error\n</code></pre>\n\n<p>Does anyone have any ideas what might cause this behavior?</p>\n\n<p>EDIT:\nNow am using folloing in my hibernate.cfg.xml file.Is it correct?</p>\n\n<pre><code>&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost:3306/xyz&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.password\"&gt;root&lt;/property&gt;\n    &lt;property name=\"hibernate.show_sql\"&gt;false&lt;/property&gt;\n    &lt;property name=\"hibernate.current_session_context_class\"&gt;thread&lt;/property&gt;\n    &lt;property name=\"hibernate.query.factory_class\"&gt;org.hibernate.hql.ast.ASTQueryTranslatorFactory&lt;/property&gt;\n    &lt;property name=\"hibernate.c3p0.min_size\"&gt;5&lt;/property&gt;\n    &lt;property name=\"hibernate.c3p0.max_size\"&gt;20&lt;/property&gt;\n&lt;!-- &lt;property name=\"hibernate.c3p0.max_size\"&gt;1800&lt;/property&gt;--&gt;\n    &lt;property name=\"hibernate.c3p0.max_statements\"&gt;50&lt;/property&gt;\n\n    &lt;property name=\"connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt;\n    &lt;property name=\"c3p0.max_statements\"&gt;0&lt;/property&gt;\n    &lt;property name=\"c3p0.maxIdleTimeExcessConnections\"&gt;3600&lt;/property&gt;\n    &lt;property name=\"c3p0.idleConnectionTestPeriod\"&gt;3600&lt;/property&gt; \n    &lt;property name=\"c3p0.maxIdleTime\"&gt;3600&lt;/property&gt;\n</code></pre>\n    ","a":"\n<p>As @swanliu pointed out it is due to a bad connection.<br>\n<strong>However before adjusting the server timing  and client timeout , I would first try and use a better connection pooling strategy.</strong> </p>\n\n<h2>Connection Pooling</h2>\n\n<p><em>Hibernate itself admits that its connection pooling strategy is minimal</em></p>\n\n<blockquote>\n  <p>Hibernate's own connection pooling algorithm is, however, quite\n  rudimentary. It is intended to help you get started and is not\n  intended for use in a production system, or even for performance\n  testing. You should use a third party pool for best performance and\n  stability. Just replace the hibernate.connection.pool_size property\n  with connection pool specific settings. This will turn off Hibernate's\n  internal pool. For example, you might like to use c3p0.\n  <br><strong>As stated in Reference</strong> : <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html\">http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html</a></p>\n</blockquote>\n\n<p>I personally use <code>C3P0</code>. however there are other alternatives available including <code>DBCP</code>.<br>\nCheck out </p>\n\n<ul>\n<li><a href=\"http://www.mchange.com/projects/c3p0/index.html\">http://www.mchange.com/projects/c3p0/index.html</a></li>\n<li><a href=\"http://commons.apache.org/dbcp/\">http://commons.apache.org/dbcp/</a></li>\n</ul>\n\n<p>Below is a minimal configuration of C3P0 used in my application:</p>\n\n<pre><code>&lt;property name=\"connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt;\n&lt;property name=\"c3p0.acquire_increment\"&gt;1&lt;/property&gt; \n&lt;property name=\"c3p0.idle_test_period\"&gt;100&lt;/property&gt; &lt;!-- seconds --&gt; \n&lt;property name=\"c3p0.max_size\"&gt;100&lt;/property&gt; \n&lt;property name=\"c3p0.max_statements\"&gt;0&lt;/property&gt; \n&lt;property name=\"c3p0.min_size\"&gt;10&lt;/property&gt; \n&lt;property name=\"c3p0.timeout\"&gt;1800&lt;/property&gt; &lt;!-- seconds --&gt; \n</code></pre>\n\n<blockquote>\n  <p>By default, pools will never expire Connections. If you wish\n  Connections to be expired over time in order to maintain \"freshness\",\n  set maxIdleTime and/or maxConnectionAge. maxIdleTime defines how many\n  seconds a Connection should be permitted to go unused before being\n  culled from the pool. maxConnectionAge forces the pool to cull any\n  Connections that were acquired from the database more than the set\n  number of seconds in the past.\n  <br>\n  <strong>As stated in Reference :</strong> <a href=\"http://www.mchange.com/projects/c3p0/index.html#managing_pool_size\">http://www.mchange.com/projects/c3p0/index.html#managing_pool_size</a></p>\n</blockquote>\n\n<p><em><strong>Edit:</strong></em><br>\nI updated the configuration file (<a href=\"http://community.jboss.org/wiki/HowToConfigureTheC3P0ConnectionPool\">Reference</a>), as I had just copy pasted the one for my project earlier.\nThe timeout should ideally solve the problem, If that doesn't work for you there is an <strong>expensive solution</strong> which I think you could have a look at:<br></p>\n\n<p>Create a file “c3p0.properties” which must be in the root of the classpath (i.e. no way to override it for particular parts of the application). (<a href=\"http://www.databasesandlife.com/automatic-reconnect-from-hibernate-to-mysql/\">Reference</a>)</p>\n\n<pre><code># c3p0.properties\nc3p0.testConnectionOnCheckout=true\n</code></pre>\n\n<p>With this configuration each connection is tested before being used. It however might affect the performance of the site.</p>\n    "},{"t":"Why not to use Spring's OpenEntityManagerInViewFilter","l":"http://stackoverflow.com/questions/1538222/why-not-to-use-springs-openentitymanagerinviewfilter","q":"\n\n<p>While a lot of posts have been written on the subject of Spring's OpenSession/EntityManagerInViewFilter, I couldn't find any that mentions its flaws. From what I understand, and assuming a typical layered web application architecture using a @Transactional service layer, the filter works as follows:</p>\n\n<ol>\n<li>The filter intercepts a servlet request</li>\n<li>The filter opens an EntityManager and binds it to the current thread</li>\n<li>Web controller is called</li>\n<li>Web controller calls service</li>\n<li>Transaction interceptor begins a new transaction, retrieves the thread-bound EntityManager and binds it to the transaction</li>\n<li>Service is called, does some stuff with EntityManager, then returns</li>\n<li>Transaction interceptor flushes the EntityManager then commits the transaction</li>\n<li>Web controller prepares view, then returns</li>\n<li>View is built</li>\n<li>Filter closes the EntityManager and unbinds it from current thread</li>\n</ol>\n\n<p>In steps 8 and 9, objects that were loaded by the thread's EntityManager are still managed. Consequently, if lazy associations are touched in these steps, they will be loaded from the database using the still open EntityManager. From what I understand, each such access will require that the database open a transaction. Spring's transaction management will be unaware of this, hence my calling it \"implicit transaction\".</p>\n\n<p>I see 2 problems with this:</p>\n\n<ol>\n<li>Loading several lazy associations will result in multiple database transactions, a possible hit on performance</li>\n<li>The root object and its lazy associations are loaded in different database transactions, so the data may possibly be stale (e.g. root loaded by thread 1, root associations updated by thread 2, root associations loaded by thread 1)</li>\n</ol>\n\n<p>On the one hand, these 2 issues seem enough to reject using this filter (performance hit, data inconsistency). On the other hand, this solution is very convenient, avoids writing several lines of code, problem 1 may not be that noticeable and problem 2 may be pure paranoia.</p>\n\n<p>What do you think?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>If your application is a multi layered architecture ( view layer deployed on different JVM and service layer will be deployed on different VM), then keep the session in open state doesn't make sense. I would see not use any OpenSessionViewFilter if your service layer independent of you app layer.</p>\n    "},{"t":"HIbernate commit() and flush()","l":"http://stackoverflow.com/questions/14581865/hibernate-commit-and-flush","q":"\n\n<p>I googled a lot and read about <code>org.hibernate.Transaction.commit()</code> and <code>org.hibernate.Session.flush()</code> a lot, know purpose of each method, but still have a question. </p>\n\n<p>Is it good practice to call <code>org.hibernate.Session.flush()</code> method by hand? As said in <code>org.hibernate.Session</code> docs, </p>\n\n<blockquote>\n  <p>Must be called at the end of a unit of work, before commiting the transaction and closing the session (depending on flush-mode, Transaction.commit() calls this method).</p>\n</blockquote>\n\n<p>Could you explain me purpose of calling <code>org.hibernate.Session.flush()</code> by hand if <code>org.hibernate.Transaction.commit()</code> will call it automatically?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>In the Hibernate Manual you can see this example</p>\n\n<pre><code>Session session = sessionFactory.openSession();\nTransaction tx = session.beginTransaction();\n\n\nfor ( int i=0; i&lt;100000; i++ ) {\n    Customer customer = new Customer(.....);\n    session.save(customer);\n    if ( i % 20 == 0 ) { //20, same as the JDBC batch size\n        //flush a batch of inserts and release memory:\n        session.flush();\n        session.clear();\n    }\n}\n\ntx.commit();\nsession.close();\n</code></pre>\n\n<p>Without the call to the flush method, your first-level cache would throw an OutOfMemoryException </p>\n\n<p><a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/objectstate.html#objectstate-flushing\">Also you can look at this post about flushing</a></p>\n    "},{"t":"How to get jdbc connection from hibernate session? [duplicate]","l":"http://stackoverflow.com/questions/9482731/how-to-get-jdbc-connection-from-hibernate-session","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/3526556/session-connection-deprecated-on-hibernate\" dir=\"ltr\">session.connection() deprecated on Hibernate?</a>\n                <span class=\"question-originals-answer-count\">\n                    12 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I want to get jdbc connection from hibernate session.There is  method inside hibernate session\ni.e session.connection(); but it has been deprecated. i know this works still but i dont want to use deprecated method as i am sure they must have provide some alternative for this?\nAt <a href=\"http://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/Session.html\">http://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/Session.html</a> connection method api says using org.hibernate.jdbc.Work for this purpose but i dont find any example for that?</p>\n    ","a":"\n<p>Here is how you can use it:</p>\n\n<pre><code>session.doWork(new Work() {\n    @Override\n    public void execute(Connection connection) throws SQLException {\n        //connection, finally!\n    }\n});\n</code></pre>\n    "},{"t":"Why are people continuing to use xml mapping files instead of annotations? [closed]","l":"http://stackoverflow.com/questions/1862666/why-are-people-continuing-to-use-xml-mapping-files-instead-of-annotations","q":"\n\n<p>I've observed the strange fact (based on the questions in the hibernate tag) that people are still actively using xml files instead of annotations to specify their ORM (Hibernate/JPA) mappings.</p>\n\n<p>There are a few cases, where this is necessary:</p>\n\n<ul>\n<li>you are using classes that are provided, and you want to map them.</li>\n<li>you are writing an API, whose domain classes can be used without a JPA provider, so you don't want to force a JPA/Hibernate dependency.</li>\n</ul>\n\n<p>But these are not common cases, I think.</p>\n\n<p>My assumptions are:</p>\n\n<ul>\n<li>people are used to xml files and don't feel comfortable / don't want to bother learning to use the annotation approach.</li>\n<li>Java pre-1.5 is forced upon the project and there is nothing to do about it</li>\n<li>people don't know that annotations are a full-featured replacement of xml mapping.</li>\n<li>legacy systems are supported and hence changing the approach is considered risky</li>\n<li>people fear that mixing annotations (meta-information) with their classes is wrong.</li>\n</ul>\n\n<p>Any other possible explanations?</p>\n    ","a":"\n<p>The domain layer and the persistence layer are considered by some to be separate concerns. Using the pure XML approach keeps the two layers as loosely coupled as possible; using annotations couples the two layers more tightly as you have persistence-related code embedded in the domain code.</p>\n    "},{"t":"Hibernate and no PK","l":"http://stackoverflow.com/questions/767277/hibernate-and-no-pk","q":"\n\n<p>Is it possible to create a table (from a JPA annotated Hibernate <code>@Entity</code>) that does not contain a primary key / Id?</p>\n\n<p>I know this is not a good idea; a table should have a primary key.</p>\n    ","a":"\n<p>I found that its not possible to do so. So bad luck for those working with legacy systems.</p>\n\n<p>If you reverse engineer (create JPA annotated entities from existing JDBC connection) the table will create two Java classes, one Entity and with one field; id, and one embeddable id containing all the columns from your relation.</p>\n    "},{"t":"MySQL throws Incorrect string value error","l":"http://stackoverflow.com/questions/8709892/mysql-throws-incorrect-string-value-error","q":"\n\n<p>I'm trying to store the following tweet into a longtext column / utf8 charset / MySQL 5.5. database with MyISAM storage on.</p>\n\n<p>We also tried utf8mb4, utf16, utf32 charsets but are unable to get past this issue.</p>\n\n<pre><code>tweet=\"@Dorable_Dimples: Okay enough of those #IfYouWereMines I'm getting dep\nressed. #foreveralone ?\" lol yes\n\nmysql&gt; ALTER DATABASE foo CHARACTER SET utf8 COLLATE utf8_bin;\n\nmysql&gt; show variables like 'char%';\n+--------------------------+-------------------------------------------+\n| Variable_name | Value |\n+--------------------------+-------------------------------------------+\n| character_set_client | utf8 |\n| character_set_connection | utf8 |\n| character_set_database | utf8 |\n| character_set_filesystem | binary |\n| character_set_results | utf8 |\n| character_set_server | latin1 |\n| character_set_system | utf8 |\n| character_sets_dir | /rdsdbbin/mysql-5.5.12.R1/share/charsets/ |\n\nIncorrect string value: '\\xF0\\x9F\\x98\\x94\\xE2\\x80...' for column 'tweet' at row 1\n\nUnable to store tweet \"@Dorable_Dimples: Okay enough of those #IfYouWereM\nines I'm getting depressed. #foreveralone ?\" lol yes\njavax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCExcept\nion: could not insert\nat org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityMana\ngerImpl.java:1387)\nat org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityMana\ngerImpl.java:1315)\nat org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityMana\ngerImpl.java:1321)\nat org.hibernate.ejb.AbstractEntityManagerImpl.persist(AbstractEntityMana\ngerImpl.java:843)\nat java.util.TimerThread.mainLoop(Timer.java:512)\nat java.util.TimerThread.run(Timer.java:462)\n\nat org.hibernate.exception.SQLStateConverter.handledNonSpecificException(\nSQLStateConverter.java:140)\nat org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.ja\nva:128)\nat org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelpe\nr.java:66)\nat org.hibernate.id.insert.AbstractReturningDelegate.performInsert(Abstra\nctReturningDelegate.java:64)\nat org.hibernate.persister.entity.AbstractEntityPersister.insert(Abstract\nEntityPersister.java:2345)\nat org.hibernate.persister.entity.AbstractEntityPersister.insert(Abstract\nEntityPersister.java:2852)\nat org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentity\nInsertAction.java:71)\nat org.hibernate.engine.ActionQueue.execute(ActionQueue.java:273)\nat org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplica\nte(AbstractSaveEventListener.java:320)\nat org.hibernate.event.def.AbstractSaveEventListener.performSave(Abstract\nSaveEventListener.java:203)\nat org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(\nAbstractSaveEventListener.java:129)\nat org.hibernate.ejb.event.EJB3PersistEventListener.saveWithGeneratedId(E\nJB3PersistEventListener.java:69)\nat org.hibernate.event.def.DefaultPersistEventListener.entityIsTransient(\nDefaultPersistEventListener.java:179)\nat org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultP\nersistEventListener.java:135)\nat org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultP\nersistEventListener.java:61)\nat org.hibernate.impl.SessionImpl.firePersist(SessionImpl.java:808)\nat org.hibernate.impl.SessionImpl.persist(SessionImpl.java:782)\nat org.hibernate.impl.SessionImpl.persist(SessionImpl.java:786)\nat org.hibernate.ejb.AbstractEntityManagerImpl.persist(AbstractEntityMana\ngerImpl.java:837)\n... 5 more\nCaused by: java.sql.SQLException: Incorrect string value: '\\xF0\\x9F\\x98\\x94\\xE2\\x\n80...' for column 'tweet' at row 1\nat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073)\nat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3609)\nat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3541)\nat com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2002)\nat com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2163)\nat com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2624)\nat com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.jav\na:2127)\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:\n2427)\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:\n2345)\nat com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:\n2330)\nat org.hibernate.id.IdentityGenerator$GetGeneratedKeysDelegate.executeAnd\nExtract(IdentityGenerator.java:94)\nat org.hibernate.id.insert.AbstractReturningDelegate.performInsert(Abstra\nctReturningDelegate.java:57)\n</code></pre>\n    ","a":"\n<p>I had this exact issue. To solve, change the default encoding on the mysql server side to utf8mb4 following this excellent guide: <a href=\"http://mathiasbynens.be/notes/mysql-utf8mb4\">http://mathiasbynens.be/notes/mysql-utf8mb4</a> .</p>\n\n<p>Remember to restart your mysqld service after making changes to the configuration file.</p>\n\n<p>For me, I also needed to update the mysql jdbc driver to version 5.1.18 (from version 5.1.6). I have read somewhere that you must use at least version 5.1.14 for the mysql jdbc driver to play nicely with utf8mb4 character encoding. Hope this helps!</p>\n    "},{"t":"org.hibernate.MappingException: Could not determine type for: java.util.Set","l":"http://stackoverflow.com/questions/6164123/org-hibernate-mappingexception-could-not-determine-type-for-java-util-set","q":"\n\n<p>Although this question asked many times and I have already used all the suggestion but still I am getting this error.</p>\n\n<p>The User.java is</p>\n\n<pre><code>@Entity\n@Table(name = \"USER\")\npublic class User implements UserDetails, Serializable {\n\n    private static final long serialVersionUID = 2L;\n\n    @Id\n    @Column(name = \"USER_ID\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n    @Column(name = \"USERNAME\")\n    private String username;\n    @Column(name = \"PASSWORD\")\n    private String password;\n    @Column(name = \"NAME\")\n    private String name;\n    @Column(name = \"EMAIL\")\n    private String email;\n    @Column(name = \"LOCKED\")\n    private boolean locked;\n    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER)\n    @ElementCollection(targetClass=Role.class)\n    @Column(name = \"ROLE_ID\")\n    private Set&lt;Role&gt; roles;\n\n    @Override\n    public GrantedAuthority[] getAuthorities() {\n        List&lt;GrantedAuthorityImpl&gt; list = new ArrayList&lt;GrantedAuthorityImpl&gt;(0);\n        for (Role role : roles) {\n            list.add(new GrantedAuthorityImpl(role.getRole()));\n        }\n        return (GrantedAuthority[]) list.toArray(new GrantedAuthority[list.size()]);\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return !isLocked();\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public boolean isLocked() {\n        return locked;\n    }\n\n    public void setLocked(boolean locked) {\n        this.locked = locked;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public void setRoles(Set&lt;Role&gt; roles) {\n        this.roles = roles;\n    }\n\n    public Set&lt;Role&gt; getRoles() {\n        return roles;\n    }\n}\n</code></pre>\n\n<p>And the Role.java is</p>\n\n<pre><code>@Entity\n@Table(name=\"ROLE\")\npublic class Role implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name=\"ROLE_ID\")\n    private long id;\n    @Column(name=\"USERNAME\")\n    private String username;\n    @Column(name=\"ROLE\")\n    private String role;\n\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n}\n</code></pre>\n\n<p>This is my first attempt in hibernate annotation with JPA. So any suggestions will be very helpful. </p>\n\n<p>For hibernate the pom.xml's dependencies are:</p>\n\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;\n        &lt;version&gt;3.5.4-Final&lt;/version&gt;\n        &lt;type&gt;pom&lt;/type&gt;\n        &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;\n        &lt;version&gt;3.5.4-Final&lt;/version&gt;\n        &lt;type&gt;jar&lt;/type&gt;\n        &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n        &lt;version&gt;3.5.4-Final&lt;/version&gt;\n        &lt;type&gt;jar&lt;/type&gt;\n        &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n        &lt;version&gt;3.1.0.GA&lt;/version&gt;\n        &lt;type&gt;jar&lt;/type&gt;\n        &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;\n        &lt;version&gt;3.5.4-Final&lt;/version&gt;\n        &lt;type&gt;jar&lt;/type&gt;\n        &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n</code></pre>\n\n<p>I have no clue about the fault.</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>Solution:</p>\n\n<pre><code>@Entity\n@Table(name = \"USER\")\n@Access(AccessType.FIELD)\npublic class User implements UserDetails, Serializable {\n\n    private static final long serialVersionUID = 2L;\n\n    @Id\n    @Column(name = \"USER_ID\", updatable=false, nullable=false)\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    @Column(name = \"USERNAME\")\n    private String username;\n\n    @Column(name = \"PASSWORD\")\n    private String password;\n\n    @Column(name = \"NAME\")\n    private String name;\n\n    @Column(name = \"EMAIL\")\n    private String email;\n\n    @Column(name = \"LOCKED\")\n    private boolean locked;\n\n    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = Role.class)\n    @JoinTable(name = \"USER_ROLE\", joinColumns = { @JoinColumn(name = \"USER_ID\") }, inverseJoinColumns = { @JoinColumn(name = \"ROLE_ID\") })\n    private Set&lt;Role&gt; roles;\n\n    @Override\n    public GrantedAuthority[] getAuthorities() {\n        List&lt;GrantedAuthorityImpl&gt; list = new ArrayList&lt;GrantedAuthorityImpl&gt;(0);\n        for (Role role : roles) {\n            list.add(new GrantedAuthorityImpl(role.getRole()));\n        }\n        return (GrantedAuthority[]) list.toArray(new GrantedAuthority[list.size()]);\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return !isLocked();\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public boolean isLocked() {\n        return locked;\n    }\n\n    public void setLocked(boolean locked) {\n        this.locked = locked;\n    }\n\n    public Set&lt;Role&gt; getRoles() {\n        return roles;\n    }\n\n    public void setRoles(Set&lt;Role&gt; roles) {\n        this.roles = roles;\n    }\n}\n</code></pre>\n\n<p>Role.java same as above.</p>\n    "},{"t":"deleted object would be re-saved by cascade (remove deleted object from associations)","l":"http://stackoverflow.com/questions/11649249/deleted-object-would-be-re-saved-by-cascade-remove-deleted-object-from-associat","q":"\n\n<p>i have the following two entities:</p>\n\n<p><strong>1- PlayList:</strong></p>\n\n<pre><code>@OneToMany(fetch = FetchType.EAGER, mappedBy = \"playlist\", orphanRemoval = true, cascade =   CascadeType.ALL)\n@OrderBy(\"adOrder\")\nprivate Set&lt;PlaylistadMap&gt; PlaylistadMaps = new HashSet&lt;PlaylistadMap&gt;(0);\n</code></pre>\n\n<ul>\n<li><strong>CascadeType.ALL</strong>: is needed for save and update on the PlaylistadMap collection when saving or updating the playlist entity.</li>\n<li><strong>orphanRemoval = true</strong>: is needed when deleting the playlist entity, the PlaylistadMap references should be deleteed too.</li>\n</ul>\n\n<p><strong>2- PlaylistadMap:</strong></p>\n\n<pre><code>@ManyToOne(fetch = FetchType.EAGER)\n@JoinColumn(name = \"fk_playlist\", referencedColumnName = \"pkid\", nullable = false)\nprivate Playlist playlist;\n</code></pre>\n\n<p>when deleting a playlist by using <code>getCurrentSession().delete();</code> i am getting the following exception:</p>\n\n<pre><code>org.springframework.dao.InvalidDataAccessApiUsageException: deleted object would be re-saved by cascade (remove deleted object from associations): [com.xeno.advertisingsuite.web.domain.PlaylistadMap#6]; nested exception is org.hibernate.ObjectDeletedException: deleted object would be re-saved by cascade (remove deleted object from associations): [com.xeno.advertisingsuite.web.domain.PlaylistadMap#6]\n    at org.springframework.orm.hibernate3.SessionFactoryUtils.convertHibernateAccessException(SessionFactoryUtils.java:657)\n    at org.springframework.orm.hibernate3.HibernateTransactionManager.convertHibernateAccessException(HibernateTransactionManager.java:793)\n    at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:664)\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393)\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)\n    at $Proxy54.deletePlayList(Unknown Source)\n    at com.xeno.advertisingsuite.web.beans.PlayListBean.deletePlaylist(PlayListBean.java:282)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.el.parser.AstValue.invoke(AstValue.java:262)\n    at org.apache.el.MethodExpressionImpl.invoke(MethodExpressionImpl.java:278)\n    at com.sun.faces.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:105)\n    at javax.faces.component.MethodBindingMethodExpressionAdapter.invoke(MethodBindingMethodExpressionAdapter.java:88)\n    ... 103 more\nCaused by: org.hibernate.ObjectDeletedException: deleted object would be re-saved by cascade (remove deleted object from associations): [com.xeno.advertisingsuite.web.domain.PlaylistadMap#6]\n    at org.hibernate.impl.SessionImpl.forceFlush(SessionImpl.java:1220)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:188)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:117)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:93)\n    at org.hibernate.impl.SessionImpl.fireSaveOrUpdate(SessionImpl.java:677)\n    at org.hibernate.impl.SessionImpl.saveOrUpdate(SessionImpl.java:669)\n    at org.hibernate.engine.CascadingAction$5.cascade(CascadingAction.java:252)\n    at org.hibernate.engine.Cascade.cascadeToOne(Cascade.java:392)\n    at org.hibernate.engine.Cascade.cascadeAssociation(Cascade.java:335)\n    at org.hibernate.engine.Cascade.cascadeProperty(Cascade.java:204)\n    at org.hibernate.engine.Cascade.cascadeCollectionElements(Cascade.java:425)\n    at org.hibernate.engine.Cascade.cascadeCollection(Cascade.java:362)\n    at org.hibernate.engine.Cascade.cascadeAssociation(Cascade.java:338)\n    at org.hibernate.engine.Cascade.cascadeProperty(Cascade.java:204)\n    at org.hibernate.engine.Cascade.cascade(Cascade.java:161)\n    at org.hibernate.event.def.AbstractFlushingEventListener.cascadeOnFlush(AbstractFlushingEventListener.java:154)\n    at org.hibernate.event.def.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:145)\n    at org.hibernate.event.def.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:88)\n    at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50)\n    at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1206)\n    at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:375)\n    at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137)\n    at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:656)\n</code></pre>\n\n<p>please advise how to fix this exception.</p>\n    ","a":"\n<p>problem solved after changing the <strong>FetchType</strong> to <strong>Lazy</strong></p>\n    "},{"t":"JPA & Criteria API - Select only specific columns","l":"http://stackoverflow.com/questions/12618489/jpa-criteria-api-select-only-specific-columns","q":"\n\n<p>I would like to select only specific columns (ex. <code>SELECT a FROM b</code>). I have a generic DAO and what i came up with is:</p>\n\n<pre><code>public List&lt;T&gt; getAll(boolean idAndVersionOnly) {\n    CriteriaBuilder builder = manager.getCriteriaBuilder();\n    CriteriaQuery&lt;T&gt; criteria = builder.createQuery(entityClazz);\n    Root&lt;T&gt; root = criteria.from(entityClazz);\n    if (idAndVersionOnly) {\n        criteria.select(root.get(\"ID\").get(\"VERSION\")); // HERE IS ERROR\n    } else {\n        criteria.select(root);\n    }\n    return manager.createQuery(criteria).getResultList();\n}\n</code></pre>\n\n<p>And the error is:\n<code>The method select(Selection&lt;? extends T&gt;) in the type CriteriaQuery&lt;T&gt; is not applicable for the arguments (Path&lt;Object&gt;)</code>. How should I change that? I want to get a type <code>T</code> object that has only <code>ID</code> and <code>VERSION</code> fields, and all others are <code>null</code>.</p>\n\n<p>Type <code>T</code> extends <code>AbstractEntity</code> which has those 2 fields.</p>\n\n<p><code>entityClazz</code> is <code>T.class</code>.</p>\n    ","a":"\n<p>One of the JPA ways for getting only particular columns is to ask for a <a href=\"http://docs.oracle.com/javaee/6/api/javax/persistence/Tuple.html\">Tuple</a> object.</p>\n\n<p>In your case you would need to write something like this:</p>\n\n<pre><code>CriteriaQuery&lt;Tuple&gt; cq = builder.createTupleQuery();\n// write the Root, Path elements as usual\nRoot&lt;EntityClazz&gt; root = cq.from(EntityClazz.class);\ncq.multiselect(root.get(EntityClazz_.ID), root.get(EntityClazz_.VERSION));  //using metamodel\nList&lt;Tuple&gt; tupleResult = em.createQuery(cq).getResultList();\nfor (Tuple t : tupleResult) {\n    Long id = (Long) t.get(0);\n    Long version = (Long) t.get(1);\n}\n</code></pre>\n\n<p>Another approach is possible if you have a class representing the result, like <code>T</code> in your case. <code>T</code> doesn't need to be an Entity class. If <code>T</code> has a constructor like:</p>\n\n<pre><code>public T(Long id, Long version)\n</code></pre>\n\n<p>then you can use <code>T</code> directly in your <code>CriteriaQuery</code> constructor:</p>\n\n<pre><code>CriteriaQuery&lt;T&gt; cq = builder.createQuery(T.class);\n// write the Root, Path elements as usual\nRoot&lt;EntityClazz&gt; root = cq.from(EntityClazz.class);\ncq.multiselect(root.get(EntityClazz_.ID), root.get(EntityClazz_.VERSION));  //using metamodel\nList&lt;T&gt; result = em.createQuery(cq).getResultList();\n</code></pre>\n\n<p>See this <a href=\"http://www.ibm.com/developerworks/java/library/j-typesafejpa/\">link</a> for further reference.</p>\n    "},{"t":"Hibernate: one-to-one lazy loading, optional = false","l":"http://stackoverflow.com/questions/17987638/hibernate-one-to-one-lazy-loading-optional-false","q":"\n\n<p>I faced the problem that <strong>one-to-one lazy loading</strong> doesn't work in hibernate. I've <strong>already solved it</strong>, but still <strong>don't</strong> properly <strong>understand</strong> what happens. </p>\n\n<p>My code (<strong>lazy loading doesn't work here</strong>, when I pull Person - Address is also fetched):</p>\n\n<pre><code>@Entity\npublic class Person{\n\n  @Id\n  @SequenceGenerator(name = \"person_sequence\", sequenceName = \"sq_person\")\n  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"person_sequence\")\n  @Column(name = \"id\")\n  private long personID;\n\n  @OneToOne(mappedBy=\"person\", cascade=CascadeType.ALL, fetch = FetchType.LAZY)\n  private Adress address;\n  //.. getters, setters\n}\n\n@Entity\npublic class Address {\n\n  @Id\n  @Column(name=\"id\", unique=true, nullable=false)\n  @GeneratedValue(generator=\"gen\")\n  @GenericGenerator(name=\"gen\", strategy=\"foreign\", parameters=@Parameter(name=\"property\", value=\"person\"))\n  private long personID;\n\n  @PrimaryKeyJoinColumn\n  @OneToOne\n  private FileInfo person;\n}\n</code></pre>\n\n<p><strong>But</strong>: if I add <strong><code>optional=false</code></strong> in OneToOne relationship, lazy loading <strong>works fine</strong>!</p>\n\n<pre><code>@OneToOne(mappedBy=\"person\", cascade=CascadeType.ALL, optional = false, fetch = FetchType.LAZY)\nprivate Adress address;\n</code></pre>\n\n<p><strong>Question/Entreaty:</strong> please, explain to me how <code>optional=false</code> annotation helps to achieve lazy loading.</p>\n\n<p><strong>P.S.</strong> I've read posts <a href=\"http://stackoverflow.com/questions/1444227/making-a-onetoone-relation-lazy\">post1</a> and <a href=\"https://community.jboss.org/wiki/SomeExplanationsOnLazyLoadingone-to-one\">post2</a>, and understand why simple OneToOne can't be lazy, but I still can't grasp <code>optional=false</code> magic.</p>\n    ","a":"\n<p>If the association is optional, Hibernate has no way to know if an address exists for a given person without issuing a query. So it can't populate the address field with a proxy, because there could be no addres referencing the person, and it can't populate it with null, because there might be an address referencing the person.</p>\n\n<p>When you make the associatio mandatory (i.e. <code>optional=false</code>), it trusts you and assumes that an address exists, since the association is mandatory. So it directly populates the address field with a proxy, knowing that there is an address referencing the person.</p>\n    "},{"t":"Hibernate/JPA DB Schema Generation Best Practices","l":"http://stackoverflow.com/questions/2585641/hibernate-jpa-db-schema-generation-best-practices","q":"\n\n<p>I just wanted to hear the opinion of Hibernate experts about DB schema generation best practices for Hibernate/JPA based projects. Especially:</p>\n\n<ol>\n<li><p>What strategy to use when the project has just started? Is it recommended to let Hibernate automatically generate the schema in this phase or is it better to create the database tables manually from earliest phases of the project?</p></li>\n<li><p>Pretending that throughout the project the schema was being generated using Hibernate, is it better to disable automatic schema generation and manually create the database schema just before the system is released into production?</p></li>\n<li><p>And after the system has been released into production, what is the best practice for maintaining the entity classes and the DB schema (e.g. adding/renaming/updating columns, renaming tables, etc.)?</p></li>\n</ol>\n\n<p>Thanks in advance.</p>\n    ","a":"\n<ol>\n<li><p>It's always recommended to generate the schema manually, preferably by a tool supporting database schema revisions, such as the great <a href=\"http://liquibase.org/\" rel=\"nofollow noreferrer\">Liquibase</a>. Generating the schema from the entities is great in theory, but were fragile in practice and causes lots of problems in the long run(trust me on this).</p></li>\n<li><p>In productions it's always best to have manually generated and review the schema.</p></li>\n<li><p>You make an update to an entity and create a matching update script(revision) to update your database schema to reflect the entity change. You can create a custom solution(I've written a few) or use something more popular like liquibase(it even supports schema changes rollbacks). If you're using a build tool such as maven or ant - it's recommend to plug the db schema update util into the build process so that fresh builds stay in sync with the schema.</p></li>\n</ol>\n    "},{"t":"Auto generate data schema from JPA annotated entity classes","l":"http://stackoverflow.com/questions/297438/auto-generate-data-schema-from-jpa-annotated-entity-classes","q":"\n\n<p>I'm using JPA (Hibernate's implementation) to annotate entity classes to persist to a relational database (MySQL or SQL Server). Is there an easy way to auto generate the database schema (table creation scripts) from the annotated classes?</p>\n\n<p>I'm still in the prototyping phase and anticipate frequent schema changes. I would like to be able to specify and change the data model from the annotated code. Grails is similar in that it generates the database from the domain classes.</p>\n    ","a":"\n<p>You can use <a href=\"http://www.jroller.com/eyallupu/entry/hibernate_s_hbm2ddl_tool\" rel=\"nofollow noreferrer\">hbm2dll</a> from Hibernate. The docs are <a href=\"https://web.archive.org/web/20120606064202/http://docs.jboss.org/tools/2.1.0.Beta1/hibernatetools/html/ant.html#d0e2726\" rel=\"nofollow noreferrer\">here</a>.</p>\n    "},{"t":"Hibernate Mapping Package","l":"http://stackoverflow.com/questions/1413190/hibernate-mapping-package","q":"\n\n<p>I'm using Hibernate Annotations.</p>\n\n<p>In all my model classes I annotate like this:</p>\n\n<pre><code>@Entity\n@Table\npublic class SomeModelClass {\n//\n}\n</code></pre>\n\n<p>My hibernate.cfg.xml is</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n   &lt;session-factory&gt;\n      &lt;!-- some properties --&gt;\n\n      &lt;mapping package=\"com.fooPackage\" /&gt;\n      &lt;mapping class=\"com.fooPackage.SomeModelClass\" /&gt;\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<p>For every class I add to the com.fooPackage I have to add a line in the hibernate.cfg.xml like this:</p>\n\n<pre><code>&lt;mapping class=\"com.fooPackage.AnotherModelClass\" /&gt;\n</code></pre>\n\n<p>Is there a way I can add new model classes but don't need to add this line to hibernate.cfg.xml?</p>\n    ","a":"\n<p>I have done some investigations of class scanning approaches, using answers from StackOverflow. So I gather all it together, using a Hibernate entities scanning as a test, in the one test project: <a href=\"https://github.com/v-ladynev/hibernate-scanners-test\" rel=\"nofollow\">hibernate-scanners-test</a>.</p>\n\n<p><strong>Using fluent-hibernate</strong></p>\n\n<p>If you are looking for a quick scanning approach without additional dependencies, you can try <a href=\"https://github.com/v-ladynev/fluent-hibernate\" rel=\"nofollow\">fluent-hibernate</a> library (you will not need to have other jars, except the library).\nApart this, it has some useful features for Hibernate 5 and Hibernate 4, including entities scanning, a Hibernate 5 implicit naming strategy, a nested transformer and others.</p>\n\n<p>Just download the library from the project page: <a href=\"https://github.com/v-ladynev/fluent-hibernate\" rel=\"nofollow\">fluent-hibernate</a> and use <a href=\"https://github.com/v-ladynev/fluent-hibernate/blob/master/fluent-hibernate-core/src/main/java/com/github/fluent/hibernate/cfg/scanner/EntityScanner.java\" rel=\"nofollow\">EntityScanner</a>:</p>\n\n<p><em>For Hibernate 4 and Hibernate 5:</em></p>\n\n<pre><code>Configuration configuration = new Configuration();\nEntityScanner.scanPackages(\"my.com.entities\", \"my.com.other.entities\")\n    .addTo(configuration);\nSessionFactory sessionFactory = configuration.buildSessionFactory();\n</code></pre>\n\n<p><em>Using a new Hibernate 5 bootstrapping API:</em></p>\n\n<pre><code>List&lt;Class&lt;?&gt;&gt; classes = EntityScanner\n        .scanPackages(\"my.com.entities\", \"my.com.other.entities\").result();\n\nMetadataSources metadataSources = new MetadataSources();\nfor (Class&lt;?&gt; annotatedClass : classes) {\n    metadataSources.addAnnotatedClass(annotatedClass);\n}\n\nSessionFactory sessionFactory = metadataSources.buildMetadata()\n    .buildSessionFactory();\n</code></pre>\n    "},{"t":"Is it possible to detach Hibernate entity, so that changes to object are not automatically saved to database?","l":"http://stackoverflow.com/questions/5800814/is-it-possible-to-detach-hibernate-entity-so-that-changes-to-object-are-not-aut","q":"\n\n<p>I have Hibernate entity that I have to convert to JSON, and I have to translate some values in entity, but when I translate values, these values are instantly saved to database, but I don't want to save these changes to database. Is there any workaround for this porblem?</p>\n    ","a":"\n<p>You can detach an entity by calling <a href=\"http://docs.jboss.org/hibernate/orm/4.1/javadocs/org/hibernate/Session.html#evict%28java.lang.Object%29\"><code>Session.evict()</code></a>.</p>\n\n<p>Other options are create a defensive copy of your entity before translation of values, or use a DTO instead of the entity in that code. I think these options are more elegant since they don't couple conversion to JSON and persistence layer.</p>\n    "},{"t":"Spring 3.1 Hibernate 4 exception for Inheritance [cannot be cast to org.hibernate.mapping.RootClass]","l":"http://stackoverflow.com/questions/12087011/spring-3-1-hibernate-4-exception-for-inheritance-cannot-be-cast-to-org-hibernat","q":"\n\n<p>Hi I have just started using Spring , with Hibernate4 and maven. Basically my class hierarchy is HUmanMicroTask extends from MicroTask . In future there may be several other classes extending from MicroTask. I was trying to have a one table per concrete class which is the simplest way to get up and running with spring3 and hibernate 4.  However when i run my code. I keep getting the following exception</p>\n\n<pre><code>13:11:52,260 ERROR TestContextManager:324 - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@6ef137d] to prepare test instance [HumanMicroTaskBaseHibernateTest@52c05d3b]\njava.lang.IllegalStateException: Failed to load ApplicationContext\n    at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:157)\n    at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)\n    at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)\n    at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [database-config.xml]: Invocation of init method failed; nested exception is java.lang.ClassCastException: org.hibernate.mapping.UnionSubclass cannot be cast to org.hibernate.mapping.RootClass\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:567)\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)\n    at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103)\n    at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1)\n    at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228)\n    at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124)\n    at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148)\n    ... 24 more\nCaused by: java.lang.ClassCastException: org.hibernate.mapping.UnionSubclass cannot be cast to org.hibernate.mapping.RootClass\n    at org.hibernate.cfg.annotations.PropertyBinder.bind(PropertyBinder.java:212)\n    at org.hibernate.cfg.annotations.PropertyBinder.makePropertyValueAndBind(PropertyBinder.java:203)\n    at org.hibernate.cfg.AnnotationBinder.processElementAnnotations(AnnotationBinder.java:2013)\n    at org.hibernate.cfg.AnnotationBinder.processIdPropertiesIfNotAlready(AnnotationBinder.java:768)\n    at org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:687)\n    at org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3431)\n    at org.hibernate.cfg.Configuration$MetadataSourceQueue.processMetadata(Configuration.java:3385)\n    at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1337)\n    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1727)\n    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1778)\n    at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:184)\n    at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:314)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)\n    ... 38 more\n</code></pre>\n\n<p>Although I have seen quite a few forums, I am unabelt o decide on where I am making the mistake. \nMy MicroTask class looks as follows : </p>\n\n<pre><code>@Entity\n@Table(name = \"MICROTASK\")\n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\npublic class MicroTask {\n    @Id\n    @GeneratedValue(generator = \"system-uuid\")\n    @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n    @Column(name = \"MICROTASKID\")\n    private String microTaskId;\n    @Column(name = \"CREATIONDATE\")\n    private Date creationDate;\n    @Column(name = \"DESCRIPTION\")\n    private String description;\n\n    public Date getCreationDate() {\n        return creationDate;\n    }\n//More Getters and setters \n</code></pre>\n\n<p>My HumanMicroTask Class looks as follows : </p>\n\n<pre><code>    @Entity\n    @Table(name = \"HUMANMICROTASK\")\n    @AttributeOverrides({\n        @AttributeOverride(name=\"microTaskId\", column=@Column(name=\"MICROTASKID\")),\n        @AttributeOverride(name=\"creationDate\", column=@Column(name=\"CREATIONDATE\")),\n        @AttributeOverride(name=\"description\", column=@Column(name=\"DESCRIPTION\"))\n    })\n    public class HumanMicroTask extends MicroTask {\n\n\n        @Column(name = \"TITLE\")\n        private String title;\n        @Column(name = \"CHANNEL\")\n        private String channel;\n        @Id\n        @Column(name = \"HMTID\")\n        private String humanMicroTaskid;\n\n        public String getId() {\n            return humanMicroTaskid;\n        }\n//More Getters and setters\n</code></pre>\n\n<p>And my config.xml looks as follows : </p>\n\n<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\n        \"&gt;\n\n    &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"\n        destroy-method=\"close\"&gt;\n        &lt;property name=\"driverClass\"&gt;\n            &lt;value&gt;${jdbc.driver.className}&lt;/value&gt;\n        &lt;/property&gt;\n        &lt;property name=\"jdbcUrl\"&gt;\n            &lt;value&gt;${jdbc.url}&lt;/value&gt;\n        &lt;/property&gt;\n        &lt;property name=\"user\"&gt;\n            &lt;value&gt;${jdbc.username}&lt;/value&gt;\n        &lt;/property&gt;\n        &lt;property name=\"password\"&gt;\n            &lt;value&gt;${jdbc.password}&lt;/value&gt;\n        &lt;/property&gt;\n\n    &lt;/bean&gt;\n\n    &lt;bean id=\"sessionFactory\"\n        class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt;\n        &lt;property name=\"dataSource\"&gt;\n            &lt;ref bean=\"dataSource\"/&gt;\n        &lt;/property&gt;\n        &lt;property name=\"packagesToScan\" value=\"com.hp.hpl.crowdcloud\" /&gt;\n        &lt;property name=\"hibernateProperties\"&gt;\n            &lt;props&gt;\n                &lt;prop key=\"hibernate.dialect\"&gt;${jdbc.hibernate.dialect}&lt;/prop&gt;\n                &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/prop&gt;\n                &lt;!-- uncomment this for first time run --&gt;\n                &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/prop&gt;\n                &lt;prop key=\"hibernate.show_sql\"&gt;true&lt;/prop&gt;\n            &lt;/props&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n    &lt;bean id=\"transactionManager\"\n        class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\"&gt;\n        &lt;property name=\"sessionFactory\"&gt;\n            &lt;ref bean=\"sessionFactory\" /&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n    &lt;tx:annotation-driven /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>My Maven Configuration </p>\n\n<pre><code>    &lt;maven.test.failure.ignore&gt;true&lt;/maven.test.failure.ignore&gt;\n    &lt;org.springframework.version&gt;3.1.0.RELEASE&lt;/org.springframework.version&gt;\n    &lt;hibernate.version&gt;4.1.1.Final&lt;/hibernate.version&gt;\n    &lt;sl4j.version&gt;1.5.6&lt;/sl4j.version&gt;\n</code></pre>\n\n<p>Kindly help me out. I am not sure where I making the mistake.</p>\n    ","a":"\n<p>It is due to Id column in both classes. Remove the Id from HumanMicroTask.</p>\n    "},{"t":"Hibernate Slow to Acquire Postgres Connection","l":"http://stackoverflow.com/questions/10075081/hibernate-slow-to-acquire-postgres-connection","q":"\n\n<p>I'm having a really difficult time debugging this problem. Whenever I try to establish a connection with postgres, it takes a whole minute. After the connection is established, everything is fine. I've tried disabling all the mappings and not loading any, but still the connection takes a long time to aquire. I've also tried disabling validation, no difference. When I use a simple a simple JDBC connection, it's instantaneous. Hibernate is doing something which takes considerable amount of time and I can't seem to narrow it down. Any input is greatly appreciated!</p>\n\n<p>Postgres Driver:</p>\n\n<pre><code>postgresql-9.1-901.jdbc4.jar\n</code></pre>\n\n<p>Configuration settings:</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n    &lt;session-factory&gt;\n    &lt;!-- properties --&gt;\n        &lt;property name=\"dialect\"&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/property&gt;\n        &lt;property name=\"connection.driver_class\"&gt;org.postgresql.Driver&lt;/property&gt;\n\n        &lt;property name=\"connection.url\"&gt;jdbc:postgresql://xxxx.com:5432/xxxxx&lt;/property&gt;\n        &lt;property name=\"connection.username\"&gt;xxxxxxx&lt;/property&gt;\n        &lt;property name=\"connection.password\"&gt;xxxxxxx&lt;/property&gt;\n\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<p>Additional settings in code:</p>\n\n<pre><code>    config.setProperty(\"hibernate.hbm2ddl.auto\", hbm2ddlMode);\n    //config.setProperty(\"hibernate.cache.use_query_cache\", \"true\");\n    config.setProperty(\"hibernate.cache.use_second_level_cache\", \"true\");\n    //config.setProperty(\"hibernate.cache.region.factory_class\", \"net.sf.ehcache.hibernate.EhCacheRegionFactory\");\n    config.setProperty(\"hibernate.cache.provider_class\", \"org.hibernate.cache.EhCacheProvider\");\n    //config.setProperty(\"hibernate.cache.provider_class\", \"org.hibernate.cache.NoCacheProvider\");\n    config.setProperty(\"hibernate.jdbc.fetch_size\", \"100\");\n    config.setProperty(\"hibernate.jdbc.batch_size\", \"30\");\n    config.setProperty(\"hibernate.jdbc.use_scrollable_resultset\", \"true\");\n    config.setProperty(\"hibernate.connection.provider_class\", \"org.hibernate.connection.C3P0ConnectionProvider\");\n\n    config.setProperty(\"hibernate.c3p0.acquire_increment\", \"1\");\n    config.setProperty(\"hibernate.c3p0.idle_test_period\", \"0\");\n    config.setProperty(\"hibernate.c3p0.min_size\", \"1\");\n    config.setProperty(\"hibernate.c3p0.max_size\", \"2\");\n    config.setProperty(\"hibernate.c3p0.timeout\", \"0\");\n    config.setProperty(\"javax.persistence.validation.mode\", \"none\");\n</code></pre>\n\n<p>Here's the segment of code where the delay occurs:</p>\n\n<pre><code>private SessionFactory buildSessionFactory() throws Exception {\n        ServiceRegistry serviceRegistry  = new ServiceRegistryBuilder().applySettings(config.getProperties()).buildServiceRegistry();\n\n            //Building session takes a whole minute without mappings!!!\n        sessionFactory = config.buildSessionFactory(serviceRegistry);\n\n        validateConnection();\n\n        return sessionFactory;\n    }\n</code></pre>\n\n<p>Here's the log results:</p>\n\n<pre><code>[main] 2012-04-09 10:40:32,823 110391 INFO  C3P0ConnectionProvider - HHH000046: \nConnection properties: {user=hgaidb_test, password=****}\n[main] 2012-04-09 10:40:32,823 110391 INFO  C3P0ConnectionProvider - HHH000006: \nAutocommit mode: false\n[main] 2012-04-09 10:40:34,100 111668 DEBUG JdbcServicesImpl - Database -&gt;\n       name : PostgreSQL\n    version : 8.3.3\n      major : 8\n      minor : 3\n[main] 2012-04-09 10:40:34,101 111669 DEBUG JdbcServicesImpl - Driver -&gt;\n       name : PostgreSQL Native Driver\n    version : PostgreSQL 9.1 JDBC4 (build 901)\n      major : 9\n      minor : 1\n*******************************************************************************\n// 1 MINUTE DELAY\n*******************************************************************************\n[main] 2012-04-09 10:40:34,102 111670 DEBUG JdbcServicesImpl - JDBC version : 4.\n0\n[main] 2012-04-09 10:41:21,632 159200 INFO  Dialect - HHH000400: Using dialect: \norg.hibernate.dialect.PostgreSQLDialect\n*******************************************************************************\n[main] 2012-04-09 10:41:21,669 159237 INFO  LobCreatorBuilder - HHH000424: Disab\nling contextual LOB creation as createClob() method threw error : java.lang.refl\nect.InvocationTargetException\n[main] 2012-04-09 10:41:21,814 159382 DEBUG SettingsFactory - Automatic flush du\nring beforeCompletion(): disabled\n[main] 2012-04-09 10:41:21,814 159382 DEBUG SettingsFactory - Automatic session \nclose at end of transaction: disabled\n[main] 2012-04-09 10:41:21,815 159383 DEBUG SettingsFactory - JDBC batch size: 3\n0\n[main] 2012-04-09 10:41:21,816 159384 DEBUG SettingsFactory - JDBC batch updates\n for versioned data: disabled\n[main] 2012-04-09 10:41:21,816 159384 DEBUG SettingsFactory - Scrollable result \nsets: enabled\n[main] 2012-04-09 10:41:21,817 159385 DEBUG SettingsFactory - Wrap result sets: \ndisabled\n[main] 2012-04-09 10:41:21,818 159386 DEBUG SettingsFactory - JDBC3 getGenerated\nKeys(): enabled\n[main] 2012-04-09 10:41:21,818 159386 DEBUG SettingsFactory - JDBC result set fe\ntch size: 100\n[main] 2012-04-09 10:41:21,819 159387 DEBUG SettingsFactory - Connection release\n mode: auto\n[main] 2012-04-09 10:41:21,819 159387 INFO  TransactionFactoryInitiator - HHH000\n399: Using default transaction strategy (direct JDBC transactions)\n[main] 2012-04-09 10:41:21,844 159412 DEBUG SettingsFactory - Default batch fetc\nh size: 1\n[main] 2012-04-09 10:41:21,844 159412 DEBUG SettingsFactory - Generate SQL with \ncomments: disabled\n[main] 2012-04-09 10:41:21,845 159413 DEBUG SettingsFactory - Order SQL updates \nby primary key: disabled\n[main] 2012-04-09 10:41:21,846 159414 DEBUG SettingsFactory - Order SQL inserts \nfor batching: disabled\n[main] 2012-04-09 10:41:21,846 159414 DEBUG SettingsFactory - Query translator: \norg.hibernate.hql.internal.ast.ASTQueryTranslatorFactory\n[main] 2012-04-09 10:41:21,867 159435 INFO  ASTQueryTranslatorFactory - HHH00039\n7: Using ASTQueryTranslatorFactory\n[main] 2012-04-09 10:41:21,867 159435 DEBUG SettingsFactory - Query language sub\nstitutions: {}\n[main] 2012-04-09 10:41:21,867 159435 DEBUG SettingsFactory - JPA-QL strict comp\nliance: disabled\n[main] 2012-04-09 10:41:21,868 159436 DEBUG SettingsFactory - Second-level cache\n: enabled\n[main] 2012-04-09 10:41:21,868 159436 DEBUG SettingsFactory - Query cache: disab\nled\n[main] 2012-04-09 10:41:21,869 159437 DEBUG SettingsFactory - Cache region facto\nry : org.hibernate.cache.internal.NoCachingRegionFactory\n[main] 2012-04-09 10:41:21,872 159440 DEBUG SettingsFactory - org.hibernate.cach\ne.internal.NoCachingRegionFactory did not provide constructor accepting java.uti\nl.Properties; attempting no-arg constructor.\n[main] 2012-04-09 10:41:21,873 159441 DEBUG SettingsFactory - Optimize cache for\n minimal puts: disabled\n[main] 2012-04-09 10:41:21,873 159441 DEBUG SettingsFactory - Structured second-\nlevel cache entries: disabled\n[main] 2012-04-09 10:41:21,873 159441 DEBUG SettingsFactory - Statistics: disabl\ned\n[main] 2012-04-09 10:41:21,874 159442 DEBUG SettingsFactory - Deleted entity syn\nthetic identifier rollback: disabled\n[main] 2012-04-09 10:41:21,874 159442 DEBUG SettingsFactory - Default entity-mod\ne: pojo\n[main] 2012-04-09 10:41:21,875 159443 DEBUG SettingsFactory - Named query checki\nng : enabled\n[main] 2012-04-09 10:41:21,875 159443 DEBUG SettingsFactory - Check Nullability \nin Core (should be disabled when Bean Validation is on): enabled\n[main] 2012-04-09 10:41:21,876 159444 DEBUG SettingsFactory - multi-tenancy stra\ntegy : NONE\n</code></pre>\n\n<p>I've done a little more research on this, stepping through the debugger. I don't have all the source in my classpath, but i can still see the variables. Durring that one minute wait, Hibernate is querying the pg_catalog.pg_type table:</p>\n\n<pre><code>[SELECT typname FROM pg_catalog.pg_type WHERE oid = , ]\n</code></pre>\n\n<p>Here's a screenshot:</p>\n\n<p><img src=\"https://i.stack.imgur.com/DKiBX.jpg\" alt=\"DebugWindow\"></p>\n    ","a":"\n<p>I fixed it =) I really had to root around to find the answer for this one. Basically, it comes down to loading metadata and the JDBC driver. It's loading ALL META DATA, including comments beside sql columns and other various constructs, which are not needed for operation. I don't know why this is on by default but you should definitely turn this feature off unless you explicitly need it:</p>\n\n<pre><code>config.setProperty(\"hibernate.temp.use_jdbc_metadata_defaults\",\"false\");\n</code></pre>\n\n<p>Instant connection now!</p>\n\n<p>The only info I could find on this is in code:</p>\n\n<pre><code>107     // 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value.\n108     // The need for it is intended to be alleviated with future development, thus it is\n109     // not defined as an Environment constant...\n110     //\n111     // it is used to control whether we should consult the JDBC metadata to determine\n112     // certain Settings default values; it is useful to *not* do this when the database\n113     // may not be available (mainly in tools usage).\n114     boolean useJdbcMetadata = ConfigurationHelper.getBoolean( \"hibernate.temp.use_jdbc_metadata_defaults\", configValues, true );\n</code></pre>\n\n<p><a href=\"http://grepcode.com/file/repo1.maven.org/maven2/org.hibernate/hibernate-core/4.1.1.Final/org/hibernate/engine/jdbc/internal/JdbcServicesImpl.java#JdbcServicesImpl\">http://grepcode.com/file/repo1.maven.org/maven2/org.hibernate/hibernate-core/4.1.1.Final/org/hibernate/engine/jdbc/internal/JdbcServicesImpl.java#JdbcServicesImpl</a></p>\n    "},{"t":"What is difference between setMaxResults and setFetchSize in org.hibernate.Query?","l":"http://stackoverflow.com/questions/6087728/what-is-difference-between-setmaxresults-and-setfetchsize-in-org-hibernate-query","q":"\n\n<p>What is difference between <code>setMaxResults</code> and <code>setFetchSize</code> in org.hibernate.Query? I just can no get it =)</p>\n    ","a":"\n<p><strong>setMaxResults</strong> is the same as LIMIT in SQL-  you are <em>setting the maximum number of rows you want</em> returned.  This is a very common use case of course.</p>\n\n<p><strong>setFetchSize</strong> is about <em>optimization</em>, which can change <em>how</em> Hibernate goes about sending the results to the caller (example: buffered, in different size chunks). \nsetFetchSize is NOT implemented by all database drivers.  </p>\n    "},{"t":"Another Repeated column in mapping for entity error","l":"http://stackoverflow.com/questions/15076463/another-repeated-column-in-mapping-for-entity-error","q":"\n\n<p>Despite all of the others post, i can't find a solution for this error with Glassfish, on MacOSX, Netbeans 7.2.</p>\n\n<pre><code>Here the error :\nSEVERE: Exception while invoking class org.glassfish.persistence.jpa.JPADeployer\nprepare method\nSEVERE: Exception while preparing the app\nSEVERE: [PersistenceUnit: supmarket] Unable to build EntityManagerFactory\n\n...\n\nCaused by: org.hibernate.MappingException: Repeated column in mapping for entity:\ncom.supmarket.entity.Sale column: customerId\n(should be mapped with insert=\"false\" update=\"false\")\n</code></pre>\n\n<p>Here the code :</p>\n\n<p><strong>Sale.java</strong></p>\n\n<pre><code>@Entity\npublic class Sale {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @Column(nullable=false)\n    private Long idFromAgency;\n\n    private float amountSold;\n\n    private String agency;\n\n    @Temporal(javax.persistence.TemporalType.DATE)\n    private Date createdate;\n\n    @Column(nullable=false)\n    private Long productId;\n\n    @Column(nullable=false)\n    private Long customerId;\n\n    @ManyToOne(optional=false)\n    @JoinColumn(name=\"productId\",referencedColumnName=\"id_product\")\n    private Product product;\n\n    @ManyToOne(optional=false)\n    @JoinColumn(name=\"customerId\",referencedColumnName=\"id_customer\")\n    private Customer customer;\n\n\n    public void Sale(){}    \n    public void Sale(Long idFromAgency, float amountSold, String agency\n            , Date createDate, Long productId, Long customerId){        \n        ...\n    }\n\n    // then getters/setters\n}\n</code></pre>\n\n<p><strong>Customer.java</strong></p>\n\n<pre><code>@Entity\npublic class Customer {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name=\"id_customer\")\n    private Long id_customer;\n\n    @Column(nullable=false)\n    private Long idFromAgency;\n\n    private String  gender,\n                    maritalState,\n                    firstname,\n                    lastname,\n                    incomeLevel;\n\n    @OneToMany(mappedBy=\"customer\",targetEntity=Sale.class, fetch=FetchType.EAGER)\n    private Collection sales;\n\n\n    public void Customer(){}\n\n    public void Customer(Long idFromAgency, String gender, String maritalState,\n            String firstname, String lastname, String incomeLevel) {\n        ...\n    }\n\n}\n</code></pre>\n\n<p><strong>Product.java</strong></p>\n\n<pre><code>public class Product {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name=\"id_product\")\n    private Long id_product;\n\n    @Column(nullable=false)\n    private Long idFromAgency;\n\n    private String name;\n\n    @OneToMany(mappedBy=\"product\",targetEntity=Sale.class, fetch=FetchType.EAGER)\n    private Collection sales;\n\n    //constructors + getters +setters\n}\n</code></pre>\n\n<p>Thank you in advance for your time !</p>\n    ","a":"\n<p>The message is clear: you have a repeated column in the mapping. That means that you mapped the same database column twice. And indeed, you have</p>\n\n<pre><code>@Column(nullable=false)\nprivate Long customerId;\n</code></pre>\n\n<p>and also</p>\n\n<pre><code>@ManyToOne(optional=false)\n@JoinColumn(name=\"customerId\",referencedColumnName=\"id_customer\")\nprivate Customer customer;\n</code></pre>\n\n<p>(and the same goes for <code>productId</code>/<code>product</code>).</p>\n\n<p>You shouldn't reference other entities by their ID, but by a direct reference to the entity. Remove the <code>customerId</code> field, it's useless. And do the same for <code>productId</code>. If you want the cutomer ID of a sale, you just need to do </p>\n\n<pre><code>sale.getCustomer().getId()\n</code></pre>\n    "},{"t":"Hibernate query a foreign key field with ID","l":"http://stackoverflow.com/questions/1787086/hibernate-query-a-foreign-key-field-with-id","q":"\n\n<p>For example, I have two entities: Employee and Address. Of these enitities, Employee has a foreign key AddressID references the ID column on Address. In the Java domain objects, Hibernate nicely wraps the forgein key integer field with a Address object field. But now, how could I query the Employee with a certain AddressID? </p>\n\n<p>I have tried to create a table alias. That seems to work, but it is fairly awkward. </p>\n\n<p>I had also tried to do something like this: </p>\n\n<pre><code>criteria.add(restriction.eq(\"TheAddressObjectFieldName\", 123);\n</code></pre>\n\n<p>It works some time but not always. I am not sure this is the right way, but I was hoping it could all the time. </p>\n\n<p>So what is the right way to query on a foreign key column in hibernate? </p>\n    ","a":"\n<p>Hibernate \"nicely wraps\" only what you tell it to wrap. So, assuming that your <code>Employee</code> mapping looks something like:</p>\n\n<pre><code>@Entity\npublic class Employee {\n  ...\n  @ManyToOne\n  @JoinColumn(name=\"address_id\")\n  private Address address;\n  ...\n}\n</code></pre>\n\n<p>and your <code>Address</code> has an <code>id</code> property, you can query based on <code>address_id</code> via:</p>\n\n<pre><code>session.createCriteria(Employee.class)\n .add(Restrictions.eq(\"address.id\", addressId));\n</code></pre>\n\n<p>In order to query based on <code>Address</code> properties, you'll have to <a href=\"http://docs.jboss.org/hibernate/stable/core/reference/en/html/querycriteria.html#querycriteria-associations\" rel=\"nofollow noreferrer\">create aliases or nested criteria</a>:</p>\n\n<pre><code>session.createCriteria(Employee.class)\n .createAlias(\"address\", \"a\")\n .add(Restrictions.eq(\"a.postalCode\", postalCode));\n</code></pre>\n    "},{"t":"mappedBy reference an unknown target entity property","l":"http://stackoverflow.com/questions/4011472/mappedby-reference-an-unknown-target-entity-property","q":"\n\n<p>I am having an issue in setting up a one to many relationship in my annotated object.</p>\n\n<p>I have the following:</p>\n\n<pre><code>@MappedSuperclass\npublic abstract class MappedModel\n{\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    @Column(name=\"id\",nullable=false,unique=true)\n    private Long mId;\n</code></pre>\n\n<p>then this</p>\n\n<pre><code>@Entity\n@Table(name=\"customer\")\npublic class Customer extends MappedModel implements Serializable\n{\n\n    /**\n   * \n   */\n  private static final long serialVersionUID = -2543425088717298236L;\n\n\n  /** The collection of stores. */\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n  private Collection&lt;Store&gt; stores;\n</code></pre>\n\n<p>and this</p>\n\n<pre><code>@Entity\n@Table(name=\"store\")\npublic class Store extends MappedModel implements Serializable\n{\n\n    /**\n   * \n   */\n  private static final long serialVersionUID = -9017650847571487336L;\n\n  /** many stores have a single customer **/\n  @ManyToOne(fetch = FetchType.LAZY)\n  @JoinColumn (name=\"customer_id\",referencedColumnName=\"id\",nullable=false,unique=true)\n  private Customer mCustomer;\n</code></pre>\n\n<p>what am i doing incorrect here</p>\n    ","a":"\n<p>The <code>mappedBy</code> attribute is referencing <code>customer</code> while the property is <code>mCustomer</code>, hence the error message. So either change your mapping into:</p>\n\n<pre><code>/** The collection of stores. */\n@OneToMany(mappedBy = \"mCustomer\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\nprivate Collection&lt;Store&gt; stores;\n</code></pre>\n\n<p>Or change the entity property into <code>customer</code> (which is what I would do).</p>\n\n<p>The mappedBy reference indicates \"Go look over on the bean property named 'customer' on the thing I have a collection of to find the configuration.\"</p>\n    "},{"t":"Hibernate - AnnotationConfiguration deprecated","l":"http://stackoverflow.com/questions/3942880/hibernate-annotationconfiguration-deprecated","q":"\n\n<p>I am using Hibernate in version 3.6.0 and the AnnotationConfiguration is marked as deprecated.</p>\n\n<p>Here is the the line in my HibernateUtil.java class:</p>\n\n<pre><code>sessionFactory = new AnnotationConfiguration().configure(\"/hib.cfg.xml\").buildSessionFactory();\n</code></pre>\n\n<p>What's the replacement for AnnotationConfiguration?</p>\n\n<p>Best Regards Tim.</p>\n    ","a":"\n<p>\"All functionality has been moved to Configuration\":\n<a href=\"http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/cfg/AnnotationConfiguration.html\">http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/cfg/AnnotationConfiguration.html</a></p>\n\n<p>And here is Configuration:</p>\n\n<p><a href=\"http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/cfg/Configuration.html\">http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/cfg/Configuration.html</a></p>\n    "},{"t":"Hibernate 4 bytecode enhancement not working for dirty checking optimization","l":"http://stackoverflow.com/questions/25702382/hibernate-4-bytecode-enhancement-not-working-for-dirty-checking-optimization","q":"\n\n<p>I am using the Hibernate 4.3.6 and I made use of the latest <a href=\"http://vladmihalcea.com/2014/09/08/hibernate-bytecode-enhancement/\">Maven bytecode enhancement</a> to instrument all entities for self dirtiness awareness.</p>\n\n<p>I added the maven plugin:</p>\n\n<pre><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.hibernate.orm.tooling&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-enhance-maven-plugin&lt;/artifactId&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;phase&gt;process-test-resources&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;enhance&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>\n\n<p>and I see my entities are being enhanced:</p>\n\n<pre><code>@Entity\npublic class EnhancedOrderLine\nimplements ManagedEntity, PersistentAttributeInterceptable, SelfDirtinessTracker\n{\n    @Id\n  @GeneratedValue(strategy=GenerationType.AUTO)\n  private Long id;\n  private Long number;\n  private String orderedBy;\n  private Date orderedOn;\n\n  @Transient\n  private transient PersistentAttributeInterceptor $$_hibernate_attributeInterceptor;\n\n  @Transient\n  private transient Set $$_hibernate_tracker;\n\n  @Transient\n  private transient CollectionTracker $$_hibernate_collectionTracker;\n\n  @Transient\n  private transient EntityEntry $$_hibernate_entityEntryHolder;\n\n  @Transient\n  private transient ManagedEntity $$_hibernate_previousManagedEntity;\n\n  @Transient\n  private transient ManagedEntity $$_hibernate_nextManagedEntity;\n\n  ...\n</code></pre>\n\n<p>While debugging, I am checking <code>org.hibernate.event.internal.DefaultFlushEntityEventListener#dirtyCheck</code> method:</p>\n\n<pre><code>        if ( entity instanceof SelfDirtinessTracker ) {\n            if ( ( (SelfDirtinessTracker) entity ).$$_hibernate_hasDirtyAttributes() ) {\n                dirtyProperties = persister.resolveAttributeIndexes( ( (SelfDirtinessTracker) entity ).$$_hibernate_getDirtyAttributes() );\n            }\n        }\n</code></pre>\n\n<p>and the <code>$$_hibernate_hasDirtyAttributes()</code> always returns <strong>false</strong>.</p>\n\n<p>This is because <code>$$_hibernate_attributeInterceptor</code> is always null, so when setting any property:</p>\n\n<pre><code>private void $$_hibernate_write_number(Long paramLong)\n{\n if (($$_hibernate_getInterceptor() == null) || ((this.number == null) || (this.number.equals(paramLong))))\n  break label39;\n $$_hibernate_trackChange(\"number\");\n label39: Long localLong = paramLong;\n if ($$_hibernate_getInterceptor() != null)\n  localLong = (Long)$$_hibernate_getInterceptor().writeObject(this, \"number\", this.number, paramLong);\n this.number = localLong;\n}\n</code></pre>\n\n<p>because the <code>$$_hibernate_getInterceptor()</code> is null the trackChange will be bypassed, hence the bytecode enhancement will not resolve the dirty properties and the default deep-comparison algorithm will be used.</p>\n\n<p>What am I missing? How can I get the <code>$$_hibernate_attributeInterceptor</code> to be properly set so that the dirty properties are tracked by the bytecode instrumentation methods?</p>\n    ","a":"\n<p><a href=\"http://vladmihalcea.com/2016/02/11/how-to-enable-bytecode-enhancement-dirty-checking-in-hibernate/\" rel=\"nofollow\">Hibernate 5 fixes this issue</a> and now the dirty checking for a setter looks like this:</p>\n\n<pre><code>public void $$_hibernate_write_title(String paramString)\n{\n    if (!EqualsHelper.areEqual(this.title, paramString)) {\n      $$_hibernate_trackChange(\"title\");\n    }\n    this.title = paramString;\n}\n\npublic void $$_hibernate_trackChange(String paramString)\n{\n    if (this.$$_hibernate_tracker == null) {\n      this.$$_hibernate_tracker = new SimpleFieldTracker();\n    }\n    this.$$_hibernate_tracker.add(paramString);\n}\n</code></pre>\n\n<p>So, the solution is an upgrade to Hibernate 5.</p>\n    "},{"t":"DAO vs ORM(hibernate) pattern [closed]","l":"http://stackoverflow.com/questions/4037251/dao-vs-ormhibernate-pattern","q":"\n\n<p>i read in some articles DAO is not mandatory with hibernate and its implementation is by \"it depends\", in other words, we can choose between ORM vs DAO pattern.</p>\n\n<p>Ok, let's assume that i don't want use a DAO pattern, so im using only session CRUD and query operation provided by hibernate(my ORM).</p>\n\n<p>Especially for the \"search\" and \"find\" queries is not correct to rewrite them always, so is reasonable think to put them into a class.</p>\n\n<p>But then this class is a simple DAO without all implementation of DAO pattern and DAOFactory, only a lightweight implementation of a DAO.\nSo, the point is that we need alway a DAO and the choice is heavy DAO implementation vs lightweight DAO implementation?</p>\n\n<p>What i said is wrong?</p>\n\n<p><strong>EDIT</strong>\nAnother problem i have is where put dao interactions, for example i have to login an User and write a Log of the login (useless example i know...)</p>\n\n<p>So in a DAO pattern i have all generic dao implementations, a DAOFactory and finally UserHibernateDAO and LogHibernateDAO.\nThe login operation is a <strong>business method</strong>:</p>\n\n<pre><code>private void login(String username, String password){\n    daoFactory.beginTransaction();\n    UserDAO userDao=daoFactory.HIBERNATE.getUserDao();\n    LogDAO logDao=daoFactory.HIBERNATE.getLogDao();\n    if(userDao.checkAccount(username, password){\n        User user=userDao.findByAccount(username, password);\n        logDao.save(new Log(\"log-in\", user);\n    }\n    daoFactory.commit();\n}\n</code></pre>\n\n<p>Is this reasonable? Can i use dao in this way?\nIf i want handle exception, the better place to do it is ina a business logic?</p>\n\n<p><strong>EDIT2</strong>\nLet's assume to use a DAO pattern, the main reason to do it is to be able to switch between tecnhology(ORM-&gt;JDBC etc..), it all fine and ok, BUT where can i handle hibernate session and transaction?\nI can't put it into a DAO, it's anty pattern, and i can't put it into a service layer, becouse in a hipohtetycal switch i have to remove all this transaction(becouse other tecnhology may not use them).</p>\n    ","a":"\n<p>ORM and DAO are orthogonal concepts.  One has to do with how objects are mapped to database tables, the other is a design pattern for writing objects that access data.  You don't choose 'between' them.  You can have ORM and DAO is the same application, just as you don't need ORM to use the DAO pattern.</p>\n\n<p>That said, while you never really <em>need</em> anything, you should use DAOs.  The pattern lends itself to modularized code.  You keep all your persistence logic in one place (separation of concerns, fight leaky abstractions).  You allow yourself to test data access separately from the rest of the application.  And you allow yourself to test the rest of the application isolated from data access (i.e. you can mock your DAOs).  </p>\n\n<p>Plus, following the DAO pattern is easy, even if implementing data access can be difficult.  So it costs you very little (or nothing) and you gain a lot.</p>\n\n<p><strong>EDIT --</strong>\nWith respect to your example, your login method should be in some sort of AuthenticationService.  You can handle exceptions there (in the login method).  If you used Spring, it could manage a bunch of things for you: (1) transactions, (2) dependency injection.  You would not need to write your own transactions or dao factories, you could just define transaction boundaries around your service methods, and define your DAO implementations as beans and then wire them into your service.  </p>\n\n<p><strong>EDIT2</strong></p>\n\n<p>The main reason to use the pattern is to separate concerns.  That means that all your persistence code is in one place. A side effect of this is, testability and maintainability, and the fact that this makes it easier to switch implementations later.  If you are building Hibernate based DAOs, you can absolutely manipulate the session in the DAO, that is what you are supposed to do.  The anti pattern is when persistence related code happens outside of the persistence layer (law of leaky abstractions).  </p>\n\n<p>Transactions are a bit trickier.  At first glance, transactions might seem to be a concern of persistence, and they are.  But they are not only a concern of persistence.  Transactions are also a concern of your services, in that your service methods should define a 'unit of work', which means, everything that happens in a service method should be atomic.  If you use hibernate transactions, then you are going to have to write hibernate transaction code outside of your DAOs, to define transaction boundaries around services that use many DAO methods.  </p>\n\n<p>But note that the transactions can be independent of your implementation -- you need transactions whether or not you use hibernate.  Also note that you don't need to use the hibernate transaction machinery -- you can use container based transactions, JTA transactions, etc.</p>\n\n<p>No doubt that if you don't use Spring or something similar, transactions are going to be a pain.  I highly recommend using Spring to manage your transactions, or the EJB spec where I <em>believe</em> you can define transactions around your services with annotations.</p>\n\n<p>Check out the following links, for container based transactions.  </p>\n\n<p><a href=\"http://stackoverflow.com/users/120513/daff\">Container-Managed Transactions</a></p>\n\n<p><a href=\"http://docs.oracle.com/javaee/5/tutorial/doc/bncij.html\">Sessions And Transactions</a></p>\n\n<p>What I am gathering from this is that you can easily define the transactions outside the DAOs at the service level, and you don't need to write any transaction code.</p>\n\n<p>Another (less elegant) alternative is to put all atomic units of work within DAOs.  You could have CRUD DAOs for the simple operations, and then more complicated DAOs that do more than one CRUD operations.  This way, your programmatic transactions stay in the DAO, and your services would call the more complicated DAOs, and wouldn't have to worry about the transactions.</p>\n\n<p>The following link is a good example of how the DAO pattern can help you simplify code</p>\n\n<p><a href=\"http://stackoverflow.com/questions/4037251/dao-vs-ormhibernate-pattern/4037454#4037454\">AO vs ORM(hibernate) pattern</a></p>\n\n<p>(thanx @<a href=\"http://stackoverflow.com/users/120513/daff\">daff</a>)</p>\n\n<p>Notice how the definition of the interace makes it so that you business logic only cares about the behavior of the UserDao.  It doesn't care about the implementation.  You could write a DAO using hibernate, or just jdbc.  So you can change your data access implementation without affecting the rest of your program.  </p>\n    "},{"t":"HQL “is null” And “!= null” on an Oracle column","l":"http://stackoverflow.com/questions/5066492/hql-is-null-and-null-on-an-oracle-column","q":"\n\n<p>Does <em>hibernate</em> convert <code>column != null</code> in <em>HQL</em> to a <code>column is null</code> in <em>SQL</em>?</p>\n    ","a":"\n<p>That is a binary operator in hibernate you should use </p>\n\n<pre><code>is not null\n</code></pre>\n\n<p>Have a look at <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/queryhql.html\">14.10. Expressions</a></p>\n    "},{"t":"How can I wipe data from my HSQLDB after every test?","l":"http://stackoverflow.com/questions/4990410/how-can-i-wipe-data-from-my-hsqldb-after-every-test","q":"\n\n<p>I had some JUnit tests already written in my project which used to populate data in the setup method. Now I have added maven to my project and I want to execute all test cases form maven i.e. using mvn test. The problem now is that my data base is not cleared after every test class has run. I need to clear the HSQLDB after test cases of each class have run.</p>\n    ","a":"\n<ol>\n<li><p>You can clear the data by dropping the schema. The default schema is called PUBLIC. If you execute the SQL satement below, it will clear all data and drop all tables.</p>\n\n<p>DROP SCHEMA PUBLIC CASCADE</p></li>\n<li><p>Alternatively, if you need the table and schema object definitions, you can create a file: database containing the objects but no data, and add the property below to the .properties file. Using this type of database for tests, the changes to data are not persisted</p>\n\n<p>files_read_only=true </p></li>\n<li><p>The latest alternative, available in HSQLDB 2.2.6 and later allows you to clear all the data in a schema while keeping the tables. In the example below, the PUBLIC schema is cleared.</p>\n\n<p>TRUNCATE SCHEMA public AND COMMIT</p>\n\n<p>This statement has been enhanced in the latest versions of HSQLDB. See <a href=\"http://hsqldb.org/doc/2.0/guide/dataaccess-chapt.html#dac_truncate_statement\">http://hsqldb.org/doc/2.0/guide/dataaccess-chapt.html#dac_truncate_statement</a> under <strong>Truncate Statement</strong></p></li>\n</ol>\n    "},{"t":"Annotation @Transactional. How to rollback?","l":"http://stackoverflow.com/questions/7872773/annotation-transactional-how-to-rollback","q":"\n\n<p>I used this annotation successfully for a Dao class. And rollback works for tests. </p>\n\n<p>But now I need to rollback real code, not just tests.\nThere are special annotations for use in tests. But which annotations are for non-test code?\nIt is a big question for me. I spent a day for that already.  The official documentation did not meet my needs. </p>\n\n<pre><code>class MyClass { // this does not make rollback! And record appears in DB.\n        EmployeeDaoInterface employeeDao;\n\n        public MyClass() {\n            ApplicationContext context = new ClassPathXmlApplicationContext(\n                    new String[] { \"HibernateDaoBeans.xml\" });\n            employeeDao = (IEmployeeDao) context.getBean(\"employeeDao\");\n         }\n\n        @Transactional(rollbackFor={Exception.class})\n    public void doInsert( Employee newEmp ) throws Exception {\n        employeeDao.insertEmployee(newEmp);\n        throw new RuntimeException();\n    }\n}\n</code></pre>\n\n<p>employeeDao is </p>\n\n<pre><code>@Transactional\npublic class EmployeeDao implements IEmployeeDao {\n    private SessionFactory sessionFactory;\n\n    public void setSessionFactory(SessionFactory sessionFactory) {\n        this.sessionFactory = sessionFactory;\n    }\n\n    public void insertEmployee(Employee emp) {\n        sessionFactory.getCurrentSession().save(emp);\n    }\n}\n</code></pre>\n\n<p>And here is a test for which the annotations work well: </p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = { \"/HibernateDaoBeans.xml\" })\n@TransactionConfiguration(transactionManager = \"txManager\", defaultRollback = true)\n@Transactional\npublic class EmployeeDaoTest {\n\n    @Autowired\n    EmployeeDaoInterface empDao;\n\n    @Test\n    public void insert_record() {\n       ...\n       assertTrue(empDao.insertEmployee(newEmp));\n    }\n</code></pre>\n\n<p>HibernateDaoBeans.xml</p>\n\n<pre><code>   ...\n&lt;bean id=\"employeeDao\" class=\"Hibernate.EmployeeDao\"&gt;\n    &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt;\n&lt;/bean&gt;\n    &lt;tx:annotation-driven transaction-manager=\"txManager\"/&gt;\n\n&lt;bean id=\"txManager\" class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\"&gt;\n    &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt;\n&lt;/bean&gt;\n   ...\n</code></pre>\n\n<hr>\n\n<hr>\n\n<hr>\n\n<p>**YES, I rolled back the transaction. I just added BEAN for the service... and then annotation @Transactional begin to work :-) **</p>\n\n<pre><code>&lt;bean id=\"service\" class=\"main.MyClass\"&gt;\n    &lt;property name=\"employeeDao\" ref=\"employeeDao\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Thanks all, Russia will not forget you!</p>\n    ","a":"\n<p>or programatically</p>\n\n<pre><code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n</code></pre>\n    "},{"t":"How to achieve “not in” by using Restrictions and criteria in Hibernate?","l":"http://stackoverflow.com/questions/1220901/how-to-achieve-not-in-by-using-restrictions-and-criteria-in-hibernate","q":"\n\n<p>I have list of category. I need a list of category by excluding 2,3 row. Can we achieve through hibernate by using Criteria and Restriction?</p>\n    ","a":"\n<p>Your question is somewhat unclear. Assuming \"Category\" is a root entity and \"2,3\" are ids (or values of some property of the category\") you can exclude them using the following:</p>\n\n<pre><code>Criteria criteria = ...; // obtain criteria from somewhere, like session.createCriteria() \ncriteria.add(\n  Restrictions.not(\n     // replace \"id\" below with property name, depending on what you're filtering against\n    Restrictions.in(\"id\", new long[] {2, 3})\n  )\n);\n</code></pre>\n\n<p>Same can be done with <code>DetachedCriteria</code>.     </p>\n    "},{"t":"“Found: bit, expected: boolean” after Hibernate 4 upgrade","l":"http://stackoverflow.com/questions/8667965/found-bit-expected-boolean-after-hibernate-4-upgrade","q":"\n\n<p>I'm trying to upgrade from Hibernate 3.6.5 to 4.0 (and from Spring 3.0.5 to 3.1 which is required for Hibernate 4 support).</p>\n\n<p>Now, with both MySQL and HSQL, I'm running into this problem with persistent boolean fields:</p>\n\n<pre><code>Caused by: org.hibernate.HibernateException: \nWrong column type in PUBLIC.PUBLIC.EVENT for column Checked. Found: bit, expected: boolean\n    at org.hibernate.mapping.Table.validateColumns(Table.java:282)\n    at org.hibernate.cfg.Configuration.validateSchema(Configuration.java:1268)\n    at org.hibernate.tool.hbm2ddl.SchemaValidator.validate(SchemaValidator.java:155)\n    at org.hibernate.internal.SessionFactoryImpl.&lt;init&gt;(SessionFactoryImpl.java:453)\n    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1737)\n    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1775)\n    at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:184)\n    at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:314)\n</code></pre>\n\n<p>JPA <a href=\"http://docs.oracle.com/javaee/6/api/javax/persistence/Entity.html\"><code>@Entity</code></a> and <a href=\"http://docs.oracle.com/javaee/6/api/javax/persistence/Column.html\"><code>@Column</code></a> annotations are used in domain objects, and the problematic fields look like this:</p>\n\n<pre><code>@Column(name = \"Checked\")\nprivate boolean checked;\n</code></pre>\n\n<p>HSQL schema:</p>\n\n<pre><code>Checked bit default 0 not null,\n</code></pre>\n\n<p>MySQL schema:</p>\n\n<pre><code>`Checked` tinyint(1) NOT NULL default '0',\n</code></pre>\n\n<p><strong>What is the most straightforward way to solve this while sticking with Hibernate 4</strong>? Should I change the database schema, Hibernate configs, or domain class annotations?</p>\n\n<p>I have no idea if the code and configuration was fully \"correct\" before, but at least it worked fine with Hibernate 3.</p>\n    ","a":"\n<p>I worked this out by adding <code>columnDefinition = \"BIT\"</code> to the @Column line.</p>\n\n<pre><code>@Basic\n@Column(name = \"B\", columnDefinition = \"BIT\", length = 1)\npublic boolean isB() {\n    return b;\n}\n</code></pre>\n\n<p>Its defined as a 'BIT(1)' in the DB as well. Also worked with TINYINT. This is the easiest solution I've found since the change is super-minor and no need to touch the DB.</p>\n\n<p>Using: MySQL Server 5.5.13, Hibernate 4.1.1, JDK 1.6</p>\n    "},{"t":"Hibernate JPA, MySQL and TinyInt(1) for Boolean instead of bit or char","l":"http://stackoverflow.com/questions/3383169/hibernate-jpa-mysql-and-tinyint1-for-boolean-instead-of-bit-or-char","q":"\n\n<p>Here is my JPA2 / Hibernate definition:</p>\n\n<pre><code>Code:\n@Column(nullable = false)\nprivate boolean enabled;\n</code></pre>\n\n<p>In MySql this column is resolved to a bit(1) datatype - which does not work for me. For legacy issues I need to map the boolean to a tinyint not to a bit. But I do not see a possibility to change the default datatype. Is there any?</p>\n    ","a":"\n<p>Try the <code>NumericBooleanType</code>. For some reason this doesn't have a declared short type name so you'd have to use:</p>\n\n<pre><code>@Column(nullable = false)\n@Type(type = \"org.hibernate.type.NumericBooleanType\")\nprivate boolean enabled;\n</code></pre>\n\n<p>This does map to an INTEGER type but it will probably work fine with a TINYINT.</p>\n\n<p>UPDATE: <code>org.hibernate.type.NumericBooleanType</code> Does <em>not</em> work with TINYINT in some RDBMS. Switch the database column type to INTEGER. Or use a different Java @Type value, or columnDefinition, as appropriate.</p>\n\n<p>In this example, Dude's answer of <code>@Column(nullable = false, columnDefinition = \"TINYINT(1)\")</code> would work without any database changes.</p>\n    "},{"t":"Enum in Hibernate, persisting as an enum","l":"http://stackoverflow.com/questions/2160700/enum-in-hibernate-persisting-as-an-enum","q":"\n\n<p>In my MySQL database, there's the column \"gender enum('male','female')\"</p>\n\n<p>I've created my enum \"com.mydomain.myapp.enums.Gender\", and in my <code>Person</code> entity I'm defined \"Gender gender\". </p>\n\n<p>Now I'd want to keep the enum type in my MySQL database, but when I launch my application I get:</p>\n\n<blockquote>\n  <p>Wrong column type in MyApp.Person for column Gender. Found: enum, expected: integer</p>\n</blockquote>\n\n<p>Why is this? This would be the equivalent as if I'd annotated my \"Gender gender\" with \"@Enumerated(EnumType.ORDINAL)\", which I haven't. EnumType seems only to be able to be either ORDINAL or STRING, so how do I specify that it should treat the field as an enum, not as an int? (not that there's much difference, but enough for it to get upset about it.)</p>\n    ","a":"\n<p>My understanding is that MySQL enum type is very proprietary and not well supported by Hibernate, see <a href=\"https://jira.jboss.org/jira/browse/JBSEAM-637?focusedCommentId=12349681#action_12349681\" rel=\"nofollow noreferrer\">this comment</a> from Gavin King (this related issue is a bit different but that's not the important part). </p>\n\n<p>So, I actually think that you'll have to use your own <code>UsereType</code> and I'd recommend to use the <strong>Flexible solution - working version</strong> from the <a href=\"https://www.hibernate.org/272.html\" rel=\"nofollow noreferrer\">Java 5 EnumUserType</a> (see Appfuse's <a href=\"http://appfuse.org/display/APF/Java+5+Enums+Persistence+with+Hibernate\" rel=\"nofollow noreferrer\">Java 5 Enums Persistence with Hibernate</a> for an example).</p>\n\n<p>Personally, I'd just forget the idea to use MySQL enum, I'm not convinced that the \"benefits\" are worth it (see <a href=\"http://stackoverflow.com/questions/766299/mysql-enum-performance-advantage\">this answer</a> for more details).</p>\n    "},{"t":"How does the FetchMode work in Spring Data JPA","l":"http://stackoverflow.com/questions/29602386/how-does-the-fetchmode-work-in-spring-data-jpa","q":"\n\n<p>I do have a relation between three model object in my project (model and repository snippets in the end of the post. </p>\n\n<p>When I call <code>PlaceRepository.findById</code> it does fire three select queries:</p>\n\n<p>(\"sql\")</p>\n\n<ol>\n<li><code>SELECT * FROM place p where id = arg</code></li>\n<li><code>SELECT * FROM user u where u.id = place.user.id</code></li>\n<li><code>SELECT * FROM city c LEFT OUTER JOIN state s on c.woj_id = s.id where c.id = place.city.id</code></li>\n</ol>\n\n<p>That's rather unusual behavior (for me). As far as I can tell after reading Hibernate documentation it should always use JOIN queries. There is no difference in the queries when <code>FetchType.LAZY</code> changed to  <code>FetchType.EAGER</code> in the <code>Place</code> class (query with additional SELECT), the same for the <code>City</code> class when <code>FetchType.LAZY</code> changed to  <code>FetchType.EAGER</code> (query with JOIN). </p>\n\n<p>When I use <code>CityRepository.findById</code> suppressing fires two selects: </p>\n\n<ol>\n<li><code>SELECT * FROM city c where id = arg</code></li>\n<li><code>SELECT * FROM state s where id = city.state.id</code></li>\n</ol>\n\n<p>My goal is to have a the sam behavior in all situations (either always JOIN or SELECT, JOIN preferred though). </p>\n\n<p>Model definitions:</p>\n\n<p>Place:</p>\n\n<pre><code>@Entity\n@Table(name = \"place\")\npublic class Place extends Identified {\n\n    @Fetch(FetchMode.JOIN)\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"id_user_author\")\n    private User author;\n\n    @Fetch(FetchMode.JOIN)\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"area_city_id\")\n    private City city;\n    //getters and setters\n}\n</code></pre>\n\n<p>City: </p>\n\n<pre><code>@Entity\n@Table(name = \"area_city\")\npublic class City extends Identified {\n\n    @Fetch(FetchMode.JOIN)\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"area_woj_id\")\n    private State state;\n    //getters and setters\n}\n</code></pre>\n\n<p>Repositories: </p>\n\n<p>PlaceRepository</p>\n\n<pre><code>public interface PlaceRepository extends JpaRepository&lt;Place, Long&gt;, PlaceRepositoryCustom {\n    Place findById(int id);\n}\n</code></pre>\n\n<p>UserRepository: </p>\n\n<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n        List&lt;User&gt; findAll();\n    User findById(int id);\n}\n</code></pre>\n\n<p>CityRepository: </p>\n\n<pre><code>public interface CityRepository extends JpaRepository&lt;City, Long&gt;, CityRepositoryCustom {    \n    City findById(int id);\n}\n</code></pre>\n    ","a":"\n<p>I think that Spring Data ignores the FetchMode. I always use the <code>@NamedEntityGraph</code> and <code>@EntityGraph</code> annotations when working with Spring Data</p>\n\n<pre><code>@Entity\n@NamedEntityGraph(name = \"GroupInfo.detail\",\n  attributeNodes = @NamedAttributeNode(\"members\"))\npublic class GroupInfo {\n\n  // default fetch mode is lazy.\n  @ManyToMany\n  List&lt;GroupMember&gt; members = new ArrayList&lt;GroupMember&gt;();\n\n  …\n}\n\n@Repository\npublic interface GroupRepository extends CrudRepository&lt;GroupInfo, String&gt; {\n\n  @EntityGraph(value = \"GroupInfo.detail\", type = EntityGraphType.LOAD)\n  GroupInfo getByGroupName(String name);\n\n}\n</code></pre>\n\n<p>Check the documentation <strong><a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.entity-graph\">here</a></strong></p>\n    "},{"t":"Hibernate criteria _ how to use criteria to return only one element of an object instead the entire object","l":"http://stackoverflow.com/questions/58561/hibernate-criteria-how-to-use-criteria-to-return-only-one-element-of-an-object","q":"\n\n<p>I'm trying to get only the list of id of object bob for example instead of the list of bob. It's ok with a HQL request, but I would know if it's possible using criteria ?</p>\n\n<p>An example :</p>\n\n<pre><code>final StringBuilder hql = new StringBuilder();\nhql.append( \"select bob.id from \" )\n    .append( bob.class.getName() ).append( \" bob \" )\n    .append( \"where bob.id &gt; 10\");\n\nfinal Query query = session.createQuery( hql.toString() );\nreturn query.list();\n</code></pre>\n    ","a":"\n<p>You can do that like this</p>\n\n<pre><code>    bob bb=null;\n\n    Criteria criteria = session.createCriteria(bob.class);  \n    criteria.add(Restrictions.eq(\"id\",id));\n\n    bb = (bob) criteria.uniqueResult();\n</code></pre>\n\n<p>as Restrictions you can add your condition</p>\n    "},{"t":"What is the difference between @ManyToOne(optional=false) vs. @Column(nullable=false)","l":"http://stackoverflow.com/questions/3331907/what-is-the-difference-between-manytooneoptional-false-vs-columnnullable-f","q":"\n\n<p>In JPA, I am confused when to use the attribute <code>optional=false</code> and the annotation <code>@Column(nullable=false)</code>. What is the difference?</p>\n    ","a":"\n<p><code>@Column(nullable=false)</code> is an instruction for generating the schema.  The database column generated off the class will be marked not nullable in the actual database.</p>\n\n<p><code>optional=false</code> is a runtime instruction.  The primary functional thing it does is related to Lazy Loading.  You can't lazy load a non-collection mapped entity unless you remember to set optional=false (because Hibernate doesn't know if there should be a proxy there or a null, unless you tell it nulls are impossible, so it can generate a proxy.)</p>\n    "},{"t":"Spring 3 MVC: one-to-many within a dynamic form (add/remove on create/update)","l":"http://stackoverflow.com/questions/9671640/spring-3-mvc-one-to-many-within-a-dynamic-form-add-remove-on-create-update","q":"\n\n<p>I'm looking for a solution to <strong>manage a one-to-many relation within an HTML form</strong> using <strong>jQuery</strong>. I'm developing with <strong>Spring</strong>, <strong>Spring MVC</strong> and <strong>Hibernate</strong>. I found many tracks on the web, but not any working full-example.</p>\n\n<h3>The background</h3>\n\n<p>I've three JPA entities:</p>\n\n<p><code>Consult.java</code> (1)</p>\n\n\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = \"consult\")\npublic class Consult\n\n    private Integer id;\n    private String label;\n    private Set&lt;ConsultTechno&gt; consultTechnos;\n\n    /* getters &amp; setters */\n\n}\n</code></pre>\n\n<p><code>ConsultTechno.java</code> (2)</p>\n\n\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = \"consult_techno\")\npublic class ConsultTechno {\n\n    private Integer id;\n    private Techno techno;\n    private Consult consult;\n    private String level;\n\n    /* getters &amp; setters */\n\n}\n</code></pre>\n\n<p><code>Techno.java</code> (3)</p>\n\n\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name=\"techno\")\npublic class Techno {\n\n    private Integer id;\n    private String label;\n    private Set&lt;ConsultTechno&gt; consultTechnos;\n\n    /* getters &amp; setters */\n\n}\n</code></pre>\n\n<p>As shown, a Consult (1) contains <em>n</em> ConsultTechnos (2), which are caracterized by a <em>level</em> and a Techno (3).</p>\n\n<h3>The needs</h3>\n\n<p>Using an HTML form, I would like to have a <code>Add a techno</code> button which dynamically adds two fields in the DOM:</p>\n\n\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input type=\"text\" name=\"consult.consultTechnos[].techno.id\" /&gt;\n&lt;input type=\"text\" name=\"consult.consultTechnos[].level\" /&gt;\n</code></pre>\n\n<p>Of course, each time the user clicks on the button, those two fields should be re-added, etc. I chose <code>input type=\"text\"</code> for the example, but at the end, the fields will be two <code>select</code>.</p>\n\n<p>Four kinds of operation should be covered:</p>\n\n<ol>\n<li><strong>Add</strong> a child entity when <strong>creating</strong> a new master entity</li>\n<li><strong>Remove</strong> a child entity when <strong>creating</strong> a new master entity</li>\n<li><strong>Add</strong> a child entity when <strong>updating</strong> a new master entity</li>\n<li><strong>Remove</strong> a child entity when <strong>updating</strong> a new master entity</li>\n</ol>\n\n<h3>The problem</h3>\n\n<p>That <em>layout part</em> already works, but when posting the form, I can't manage to bind the dynamically added fields to my <code>@ModelAttribute consult</code>.</p>\n\n<p>Do you have any idea of how to do that kind of jobs? I hope I've been clear enough...</p>\n\n<p>Thanks in advance <code>:)</code></p>\n    ","a":"\n<p>This point is still quite confusing and unclear on the web, so here is the way I solved my problem. This solution is probably not the most optimized one, but it works when <strong>creating and updating</strong> a master entity.</p>\n\n<h1>Theory</h1>\n\n<ol>\n<li><p>Use a <code>List</code> instead of a <code>Set</code> for your one-to-many relations which should be dynamically managed.</p></li>\n<li><p>Initialize your <code>List</code> as an <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/util/AutoPopulatingList.html\" rel=\"nofollow\"><code>AutoPopulatingList</code></a>. It's a lazy list which allows to <strong>add</strong> dynamically elements.</p></li>\n<li><p>Add an attribute <code>remove</code> of <code>int</code> to your child entity. This will play the part of a boolean flag and will be usefull when <strong>removing</strong> dynamically an element.</p></li>\n<li><p>When posting the form, persist only the elements that have the flag <code>remove</code> on <code>0</code> (i.e. <code>false</code>).</p></li>\n</ol>\n\n<h1>Practice</h1>\n\n<p>A working full-example: an employer has many employees, an employee has one employer.</p>\n\n<h3>Entities:</h3>\n\n<p><code>Employer.java</code></p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = \"employer\")\npublic class Employer\n\n    private Integer id;\n\n    private String firstname;\n    private String lastname;\n    private String company;\n\n    private List&lt;Employee&gt; employees; // one-to-many\n\n    /* getters &amp; setters */\n\n}\n</code></pre>\n\n<p><code>Employee.java</code></p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = \"employee\")\npublic class Employee {\n\n    private Integer id;\n\n    @Transient // means \"not a DB field\"\n    private Integer remove; // boolean flag\n\n    private String firstname;\n    private String lastname;\n\n    private Employer employer; // many-to-one\n\n    /* getters &amp; setters */\n\n}\n</code></pre>\n\n<h3>Controller:</h3>\n\n<p><code>EmployerController.java</code></p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Controller\n@RequestMapping(\"employer\")\npublic class EmployerController {\n\n    // Manage dynamically added or removed employees\n    private List&lt;Employee&gt; manageEmployees(Employer employer) {\n        // Store the employees which shouldn't be persisted\n        List&lt;Employee&gt; employees2remove = new ArrayList&lt;Employee&gt;();\n        if (employer.getEmployees() != null) {\n            for (Iterator&lt;Employee&gt; i = employer.getEmployees().iterator(); i.hasNext();) {\n                Employee employee = i.next();\n                // If the remove flag is true, remove the employee from the list\n                if (employee.getRemove() == 1) {\n                    employees2remove.add(employee);\n                    i.remove();\n                // Otherwise, perform the links\n                } else {\n                    employee.setEmployer(employer);\n                }\n            }\n        }\n        return employees2remove;\n    }\n\n    // -- Creating a new employer ----------\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String create(@ModelAttribute Employer employer, Model model) {\n        // Should init the AutoPopulatingList\n        return create(employer, model, true);\n    }\n\n    private String create(Employer employer, Model model, boolean init) {\n        if (init) {\n            // Init the AutoPopulatingList\n            employer.setEmployees(new AutoPopulatingList&lt;Employee&gt;(Employee.class));\n        }\n        model.addAttribute(\"type\", \"create\");\n        return \"employer/edit\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid @ModelAttribute Employer employer, BindingResult bindingResult, Model model) {\n        if (bindingResult.hasErrors()) {\n            // Should not re-init the AutoPopulatingList\n            return create(employer, model, false);\n        }\n        // Call the private method\n        manageEmployees(employer);\n        // Persist the employer\n        employerService.save(employer);\n        return \"redirect:employer/show/\" + employer.getId();\n    }\n\n    // -- Updating an existing employer ----------\n\n    @RequestMapping(value = \"update/{pk}\", method = RequestMethod.GET)\n    public String update(@PathVariable Integer pk, @ModelAttribute Employer employer, Model model) {\n        // Add your own getEmployerById(pk)\n        model.addAttribute(\"type\", \"update\");\n        return \"employer/edit\";\n    }\n\n    @RequestMapping(value = \"update/{pk}\", method = RequestMethod.POST)\n    public String update(@PathVariable Integer pk, @Valid @ModelAttribute Employer employer, BindingResult bindingResult, Model model) {\n        // Add your own getEmployerById(pk)\n        if (bindingResult.hasErrors()) {\n            return update(pk, employer, model);\n        }\n        List&lt;Employee&gt; employees2remove = manageEmployees(employer);\n        // First, save the employer\n        employerService.update(employer);\n        // Then, delete the previously linked employees which should be now removed\n        for (Employee employee : employees2remove) {\n            if (employee.getId() != null) {\n                employeeService.delete(employee);\n            }\n        }\n        return \"redirect:employer/show/\" + employer.getId();\n    }\n\n    // -- Show an existing employer ----------\n\n    @RequestMapping(value = \"show/{pk}\", method = RequestMethod.GET)\n    public String show(@PathVariable Integer pk, @ModelAttribute Employer employer) {\n        // Add your own getEmployerById(pk)\n        return \"employer/show\";\n    }\n\n}\n</code></pre>\n\n<h3>View:</h3>\n\n<p><code>employer/edit.jsp</code></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"\n%&gt;&lt;%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"\n%&gt;&lt;%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\"\n%&gt;&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"\n%&gt;&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n\n    &lt;title&gt;Edit&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;.hidden {display: none;}&lt;/style&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    $(function() {\n\n        // Start indexing at the size of the current list\n        var index = ${fn:length(employer.employees)};\n\n        // Add a new Employee\n        $(\"#add\").off(\"click\").on(\"click\", function() {\n            $(this).before(function() {\n                var html = '&lt;div id=\"employees' + index + '.wrapper\" class=\"hidden\"&gt;';                    \n                html += '&lt;input type=\"text\" id=\"employees' + index + '.firstname\" name=\"employees[' + index + '].firstname\" /&gt;';\n                html += '&lt;input type=\"text\" id=\"employees' + index + '.lastname\" name=\"employees[' + index + '].lastname\" /&gt;';\n                html += '&lt;input type=\"hidden\" id=\"employees' + index + '.remove\" name=\"employees[' + index + '].remove\" value=\"0\" /&gt;';\n                html += '&lt;a href=\"#\" class=\"employees.remove\" data-index=\"' + index + '\"&gt;remove&lt;/a&gt;';                    \n                html += \"&lt;/div&gt;\";\n                return html;\n            });\n            $(\"#employees\" + index + \"\\\\.wrapper\").show();\n            index++;\n            return false;\n        });\n\n        // Remove an Employee\n        $(\"a.employees\\\\.remove\").off(\"click\").on(\"click\", function() {\n            var index2remove = $(this).data(\"index\");\n            $(\"#employees\" + index2remove + \"\\\\.wrapper\").hide();\n            $(\"#employees\" + index2remove + \"\\\\.remove\").val(\"1\");\n            return false;\n        });\n\n    });\n    &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;c:choose&gt;\n        &lt;c:when test=\"${type eq 'create'}\"&gt;&lt;c:set var=\"actionUrl\" value=\"employer/create\" /&gt;&lt;/c:when&gt;\n        &lt;c:otherwise&gt;&lt;c:set var=\"actionUrl\" value=\"employer/update/${employer.id}\" /&gt;&lt;/c:otherwise&gt;\n    &lt;/c:choose&gt;\n\n    &lt;form:form action=\"${actionUrl}\" modelAttribute=\"employer\" method=\"POST\" name=\"employer\"&gt;\n        &lt;form:hidden path=\"id\" /&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"firstname\"&gt;Firstname&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"firstname\" /&gt;&lt;form:errors path=\"firstname\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"lastname\"&gt;Lastname&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"lastname\" /&gt;&lt;form:errors path=\"lastname\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"company\"&gt;company&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"company\" /&gt;&lt;form:errors path=\"company\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Employees&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;c:forEach items=\"${employer.employees}\" varStatus=\"loop\"&gt;\n                        &lt;!-- Add a wrapping div --&gt;\n                        &lt;c:choose&gt;\n                            &lt;c:when test=\"${employer.employees[loop.index].remove eq 1}\"&gt;\n                                &lt;div id=\"employees${loop.index}.wrapper\" class=\"hidden\"&gt;\n                            &lt;/c:when&gt;\n                            &lt;c:otherwise&gt;\n                                &lt;div id=\"employees${loop.index}.wrapper\"&gt;\n                            &lt;/c:otherwise&gt;\n                        &lt;/c:choose&gt;\n                            &lt;!-- Generate the fields --&gt;\n                            &lt;form:input path=\"employees[${loop.index}].firstname\" /&gt;\n                            &lt;form:input path=\"employees[${loop.index}].lastname\" /&gt;\n                            &lt;!-- Add the remove flag --&gt;\n                            &lt;c:choose&gt;\n                                &lt;c:when test=\"${employees[loop.index].remove eq 1}\"&gt;&lt;c:set var=\"hiddenValue\" value=\"1\" /&gt;&lt;/c:when&gt;\n                                &lt;c:otherwise&gt;&lt;c:set var=\"hiddenValue\" value=\"0\" /&gt;&lt;/c:otherwise&gt;\n                            &lt;/c:choose&gt;\n                            &lt;form:hidden path=\"employees[${loop.index}].remove\" value=\"${hiddenValue}\" /&gt;\n                            &lt;!-- Add a link to remove the Employee --&gt;\n                            &lt;a href=\"#\" class=\"employees.remove\" data-index=\"${loop.index}\"&gt;remove&lt;/a&gt;\n                        &lt;/div&gt;\n                    &lt;/c:forEach&gt;\n                    &lt;button id=\"add\" type=\"button\"&gt;add&lt;/button&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n        &lt;button type=\"submit\"&gt;OK&lt;/button&gt;\n    &lt;/form:form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Hope that could help <code>:)</code></p>\n    "},{"t":"Anything similar to Hibernate in PHP? [closed]","l":"http://stackoverflow.com/questions/2605074/anything-similar-to-hibernate-in-php","q":"\n\n<p>I am a Java programmer and was working on a project using Hibernate and Struts for some time.</p>\n\n<p>Now For my new project, I am working on PHP and Mysql (learning PHP).\nIs there any technology which is similar to Hibernate for PHP? If yes, can anyone give me the link where I can understand and use it?</p>\n\n<p>Is there a POJO concept in PHP?</p>\n    ","a":"\n<p>In my opinion the best ORM for PHP is <a href=\"http://www.doctrine-project.org/\" rel=\"nofollow noreferrer\">Doctrine</a>.</p>\n\n<p>You may also wish to check out <a href=\"http://propelorm.org/\" rel=\"nofollow noreferrer\">Propel</a> and see which suits your style better.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/2062473/php-orms-doctrine-vs-propel\">PHP ORMs: Doctrine vs. Propel</a> is a recent SO question  comparing the two. Common PHP frameworks like Symfony let you use either ORM as far as I recall.</p>\n\n<p>As far as POJOs, as far as I know you'd use stdClass for that in PHP. I'm not much with Java  though, so I can't say for sure. Here's an SO Question about that... <a href=\"http://stackoverflow.com/questions/931407/what-is-stdclass-in-php\">What is stdClass in PHP?</a></p>\n    "},{"t":"Hibernate - why use many-to-one to represent a one-to-one?","l":"http://stackoverflow.com/questions/2452987/hibernate-why-use-many-to-one-to-represent-a-one-to-one","q":"\n\n<p>I've seen people use many-to-one mappings to represent one-to-one relationships. I've also read this in a book  by Gavin King and on articles.</p>\n\n<p>For example, if a customer can have exactly one shipping address, and a shipping address can belong to only one customer, the mapping is given as:</p>\n\n<pre><code>&lt;class name=\"Customer\" table=\"CUSTOMERS\"&gt;\n    ...\n    &lt;many-to-one name=\"shippingAddress\"\n                 class=\"Address\"\n                 column=\"SHIPPING_ADDRESS_ID\"\n                 cascade=\"save-update\"\n                 unique=\"true\"/&gt;\n    ...\n&lt;/class&gt;\n</code></pre>\n\n<p>The book reasons as (quoting it): </p>\n\n<blockquote>\n  <p>\"You don't care what's on the target side of the association, so you can treat it like a <em>to-one</em> association without the <em>many</em> part.\"</p>\n</blockquote>\n\n<p>My question is, why use <code>many-to-one</code> and not <code>one-to-one</code>? What is it about a <code>one-to-one</code> that makes it a less desirable option to <code>many-to-one</code>?</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>There are several ways to implement a one-to-one association in a database: you can share a primary key but you can also use a foreign key relationship with a unique constraint (one table has a foreign key column that references the primary key of the associated table). </p>\n\n<p>In the later case, the hibernate way to map this is to use a <code>many-to-one</code> association (that allows to specify the foreign key).</p>\n\n<blockquote>\n  <p>The reason is simple: You don’t care\n  what’s on the target side of the\n  association, so you can treat it like\n  a to-one association without the many\n  part. <em>All you want is to express “This\n  entity has a property that is a\n  reference to an instance of another\n  entity” and use a foreign key field to\n  represent that relationship.</em></p>\n</blockquote>\n\n<p>In other words, using a <code>many-to-one</code> is the way to map <strong>one-to-one foreign key associations</strong> (which are actually maybe more frequent than <strong>shared primary key one-to-one associations</strong>).</p>\n    "},{"t":"How to rollback a database transaction when testing services with Spring in JUnit?","l":"http://stackoverflow.com/questions/4166983/how-to-rollback-a-database-transaction-when-testing-services-with-spring-in-juni","q":"\n\n<p>I have no problem testing my DAO and services, but when I test <code>INSERT</code>s or <code>UPDATE</code>s I want to rollback the transaction and not effect my database.</p>\n\n<p>I'm using <code>@Transactional</code> inside my services to manage transactions. I want to know, is it possible to know if a transaction will be fine, but rollback it to prevent altering database?</p>\n\n<p>This is my Test:</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = \"classpath:/META-INF/spring.cfg.xml\")\n@TransactionConfiguration(defaultRollback=true)\npublic class MyServiceTest extends AbstractJUnit38SpringContextTests  {\n    @Autowired\n    private MyService myService;\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Test\n    public void testInsert(){\n        long id = myService.addPerson( \"JUNIT\" );\n        assertNotNull( id );\n        if( id &lt; 1 ){\n            fail();\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is that this test will fail because transaction was rollbacked, but the insert is OK!\nIf I remove <code>@TransactionConfiguration(defaultRollback=true)</code> then the test pass but a new record will be inserted into database.</p>\n\n<pre><code>@Test\n@Transactional\n@Rollback(true)\npublic void testInsert(){\n    long id = myService.addPerson( \"JUNIT\" );\nassertNotNull(id);\nif( id &lt; 1 ){\n        fail();\n    }\n}\n</code></pre>\n\n<p>Now can test pass correctly, but rollback is ignored and the record is inserted into the database.\nI have annotated the method <code>addPerson()</code> inside myService with <code>@Transactional</code>, obviously.\nWhy is the rollback being ignored?</p>\n    ","a":"\n<p>You need to extend transaction boundaries to the boundaries of your test method. You can do it by annotating your test method (or the whole test class) as <code>@Transactional</code>:</p>\n\n<pre><code>@Test \n@Transactional\npublic void testInsert(){ \n    long id=myService.addPerson(\"JUNIT\"); \n    assertNotNull(id); \n    if(id&lt;1){ \n        fail(); \n    } \n} \n</code></pre>\n\n<p>You can also use this approach to ensure that data was correctly written before rollback:</p>\n\n<pre><code>@Autowired SessionFactory sf;\n\n@Test \n@Transactional\npublic void testInsert(){ \n    myService.addPerson(\"JUNIT\"); \n    sf.getCurrentSession().flush();\n    sf.getCurrentSession().doWork( ... check database state ... ); \n} \n</code></pre>\n    "},{"t":"JPA Implementations - Which one is the best to use? [closed]","l":"http://stackoverflow.com/questions/576659/jpa-implementations-which-one-is-the-best-to-use","q":"\n\n<p>I have made use of the following JPA implementations:</p>\n\n<ol>\n<li>Hibernate,</li>\n<li>Toplink,</li>\n<li>OpenJPA</li>\n</ol>\n\n<p>Each of them has their own strengths and weaknesses. I found Hibernate the most advanced of the three except that it mixed some of its own enhancements with JPA which made it difficult to switch out to other providers. Most importantly, its query parser was much more lenient when interpreting JPA. They make it slightly difficult to get the correct libraries to support hibernate because I found it a mission trying to get the right versions of all the dependencies.</p>\n\n<p>Toplink was ok but one is left with the feeling that it is slightly crippled as it seems Oracle wants you to use/buy? their more advanced library. Trying to download it was also a mission because you need to install it via running a jar file. I found that it implemented only the base JPA spec. The reason I used it was hibernate uses a lot of libraries that are commonly used in other open source projects that one would often get classloarder problems, especially when using JBoss</p>\n\n<p>OpenJPA - This has by far the best documentation and is easy to download and use but it seems its very buggy. Maybe its just my code but code I found more advanced usage such as OneToMany relationships with CascadeType.all set just didn't seem to work. Admittedly It may be my code that was wrong and I haven't had time to test a clean case but many incidents like this leave me scared to use it. I really hope it gets better. Its error messages are often useless in helping solve the problem.</p>\n\n<p>What other libraries have people used and which ones do they prefer and why?</p>\n    ","a":"\n<p>I had the same conclusions about these implementations.</p>\n\n<ol>\n<li><p>OpenJPA was/seemed buggy</p></li>\n<li><p>Hibernate had tons of libraries and seemed to have trouble with <em>not</em> lazy loading everything.</p></li>\n<li>Toplink ended up as my choice.  It was not as flexible as Hibernate would have been but it works and I don't have to install <em>commons-logging</em>.</li>\n</ol>\n\n<p>The one I would try next is JPOX, which has recently been renamed to <a href=\"http://www.datanucleus.org/\" rel=\"nofollow noreferrer\">datanucleus</a>.</p>\n    "},{"t":"How to test whether lazy loaded JPA collection is initialized?","l":"http://stackoverflow.com/questions/4306463/how-to-test-whether-lazy-loaded-jpa-collection-is-initialized","q":"\n\n<p>I have a service that gets a JPA entity from outside code. In this service I would like to iterate over a lazily loaded collection that is an attribute of this entity to see if the client has added something to it relative to the current version in the DB.</p>\n\n<p>However, the client may have never touched the collection so it's still not initialized. This results in the well known </p>\n\n<p><code>org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.example.SomeEntity.</code></p>\n\n<p>Of course, if the client never touched the collection, my service doesn't have to check it for possible changes. The thing is that I can't seem to find a way to test whether the collection is initialized or not. I guess I could call <code>size()</code> on it and if it throws <code>LazyInitializationException</code> I would know, but I'm trying not to depend on such patterns.</p>\n\n<p>Is there some <code>isInitialized()</code> method somewhere?</p>\n    ","a":"\n<p>Are you using JPA2?</p>\n\n<p><code>PersistenceUnitUtil</code> has two methods that can be used to determine the load state of an entity.</p>\n\n<p>e.g. there is a bidirectional OneToMany/ManyToOne relationship between Organization and User.</p>\n\n<pre><code>public void test() {\n\nEntityManager em = entityManagerFactory.createEntityManager();\n\nem.getTransaction().begin();\nOrganization org = em.find(Organization.class, 1);\nem.getTransaction().commit();\n\nPersistenceUnitUtil unitUtil = em.getEntityManagerFactory().getPersistenceUnitUtil();\n\nAssert.assertTrue(unitUtil.isLoaded(org));\n\nAssert.assertFalse(unitUtil.isLoaded(org, \"users\"));\n// users is a field (Set of User) defined in Organization entity\n\ninitializeCollection(org.getUsers());\n\nAssert.assertTrue(unitUtil.isLoaded(org, \"users\"));\n\nfor(User user : org.getUsers()) {\n     Assert.assertTrue(unitUtil.isLoaded(user));\n     Assert.assertTrue(unitUtil.isLoaded(user.getOrganization()));\n  }\n}\n\nprivate void initializeCollection(Collection&lt;?&gt; collection) {\n    // works with Hibernate EM 3.6.1-SNAPSHOT\n    if(collection == null) {\n        return;\n    }\n    collection.iterator().hasNext();\n}\n</code></pre>\n    "},{"t":"When to use hibernate projections?","l":"http://stackoverflow.com/questions/7498205/when-to-use-hibernate-projections","q":"\n\n<p>i am more confused of hibernate projections and criteria. when to use projections and when to use criteria. please help me.</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>They're not mutually exclusive, you can use both at the same time. Projections are generally used in the context of some Criteria.</p>\n\n<p>To put it simple, Hibernate Projections are used in order to query only a subset of the attributes of an entity or group of entities you're querying with Criteria. You can also use Projections to specify <code>distinct</code> clauses and aggregate functions like <code>max</code>, <code>sum</code> and so on. It's like referring to <strong>which</strong> data you're fetching. Like modifying the <code>select</code> clause in an SQL query.</p>\n\n<p>Hibernate Criteria are used to define conditions the data has to satisfy in order to be selected. It's like referring to <strong>how</strong> is the data you're fetching. Like modifiying the <code>from</code> and <code>where</code> clauses of an SQL query.</p>\n\n<p>Note that this <strong>how</strong> and <strong>which</strong> is not strictly true, it's just an orientation aimed to aid the OP. You can change <strong>which</strong> data you're fetching with <code>createCriteria(String associationPath)</code> for instance. </p>\n\n<p>I'd suggest to take a look at this article <a href=\"http://www.devarticles.com/c/a/Java/Hibernate-Criteria-Queries-in-Depth/\">Hibernate: Criteria Queries in Depth</a></p>\n    "},{"t":"Does Hibernate always need a setter when there is a getter?","l":"http://stackoverflow.com/questions/2676689/does-hibernate-always-need-a-setter-when-there-is-a-getter","q":"\n\n<p>We have some Hibernate getter methods annotated with both <code>@Column</code> and <code>@Basic</code>.</p>\n\n<p>We get an exception if we don't have the corresponding setter.  Why is this? </p>\n\n<p>In our case we are deriving the value returned from the getter (to get stored in the DB) and the setter has no functional purpose.  So we just have an empty method to get around the error condition..   </p>\n    ","a":"\n<p>As others have mentioned, if you annotate a property getter method, then Hibernate uses the setter when reading values from the database. Basically, Hibernate assumes that anything that it is writing to the database will eventually need to be read from the database. This implies that if you annotate a getter, then it needs to call a setter when reading the object from the database.</p>\n\n<p>You can make the setter private (Hibernate will use reflection to access the setter). This is great way to preserve the contract of your class while still using Hibernate for relational mapping.</p>\n\n<p>If the field is derived from other properties in the class, then why are you storing it in the database?  You can use the <a href=\"http://java.sun.com/javaee/5/docs/api/javax/persistence/Transient.html\" rel=\"nofollow noreferrer\"><code>@Transient</code></a> annotation to mark the field that it shouldn't be stored in the database. You can even use the <a href=\"http://docs.jboss.org/hibernate/stable/annotations/api/org/hibernate/annotations/Formula.html\" rel=\"nofollow noreferrer\"><code>@Formula</code></a> annotation to have Hibernate derive the field for you (it does this by using the formula in the query it sends to the database).</p>\n    "},{"t":"Hibernate - @ElementCollection - Strange delete/insert behavior","l":"http://stackoverflow.com/questions/3742897/hibernate-elementcollection-strange-delete-insert-behavior","q":"\n\n<pre><code>@Entity\npublic class Person {\n\n    @ElementCollection\n    @CollectionTable(name = \"PERSON_LOCATIONS\", joinColumns = @JoinColumn(name = \"PERSON_ID\"))\n    private List&lt;Location&gt; locations;\n\n    [...]\n\n}\n\n@Embeddable\npublic class Location {\n\n    [...]\n\n}\n</code></pre>\n\n<p>Given the following class structure, when I try to add a new location to the list of Person's Locations, it always results in the following SQL queries:</p>\n\n<pre><code>DELETE FROM PERSON_LOCATIONS WHERE PERSON_ID = :idOfPerson\n</code></pre>\n\n<p>And</p>\n\n<pre><code>A lotsa' inserts into the PERSON_LOCATIONS table\n</code></pre>\n\n<p>Hibernate (3.5.x / JPA 2) deletes all associated records for the given Person and re-inserts all previous records, plus the new one.</p>\n\n<p>I had the idea that the equals/hashcode method on Location would solve the problem, but it didn't change anything.</p>\n\n<p>Any hints are appreciated!</p>\n    ","a":"\n<p>The problem is somehow explained in the page about <code>ElementCollection</code> of the JPA wikibook:</p>\n\n<blockquote>\n  <h3><a href=\"http://en.wikibooks.org/wiki/Java_Persistence/ElementCollection#Primary_keys_in_CollectionTable\" rel=\"nofollow noreferrer\">Primary keys in CollectionTable</a></h3>\n  \n  <p>The JPA 2.0 specification does not\n  provide a way to define the <code>Id</code> in the\n  <code>Embeddable</code>. <strong>However, to delete or\n  update a element of the\n  <code>ElementCollection</code> mapping, some unique\n  key is normally required. Otherwise,\n  on every update the JPA provider would\n  need to delete everything from the\n  <code>CollectionTable</code> for the <code>Entity</code>, and\n  then insert the values back.</strong> So, the\n  JPA provider will most likely assume\n  that the combination of all of the\n  fields in the <code>Embeddable</code> are unique,\n  in combination with the foreign key\n  (<code>JoinColunm</code>(s)). This however could be\n  inefficient, or just not feasible if\n  the <code>Embeddable</code> is big, or complex.</p>\n</blockquote>\n\n<p>And this is exactly (the part in bold) what happens here (Hibernate doesn't generate a primary key for the collection table and has no way to detect <em>what element</em> of the collection changed and will delete the old content from the table to insert the new content).</p>\n\n<p>However, <strong>if</strong> you define an <code>@OrderColumn</code> (to specify a column used to maintain the persistent order of a list - which would make sense since you're using a <code>List</code>), Hibernate will create a <strong>primary key</strong> (made of the <strong>order column and the join column</strong>) and will be able to update the collection table without deleting the whole content.</p>\n\n<p>Something like this (if you want to use the default column name):</p>\n\n<pre><code>@Entity\npublic class Person {\n    ...\n    @ElementCollection\n    @CollectionTable(name = \"PERSON_LOCATIONS\", joinColumns = @JoinColumn(name = \"PERSON_ID\"))\n    @OrderColumn\n    private List&lt;Location&gt; locations;\n    ...\n}\n</code></pre>\n\n<h3>References</h3>\n\n<ul>\n<li>JPA 2.0 Specification\n\n<ul>\n<li>Section 11.1.12 \"ElementCollection Annotation\"</li>\n<li>Section 11.1.39 \"OrderColumn Annotation\"</li>\n</ul></li>\n<li>JPA Wikibook\n\n<ul>\n<li><a href=\"http://en.wikibooks.org/wiki/Java_Persistence/ElementCollection\" rel=\"nofollow noreferrer\">Java Persistence/ElementCollection</a></li>\n</ul></li>\n</ul>\n    "},{"t":"Hibernate/JPA - annotating bean methods vs fields [duplicate]","l":"http://stackoverflow.com/questions/942035/hibernate-jpa-annotating-bean-methods-vs-fields","q":"\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/594597/hibernate-annotations-which-is-better-field-or-property-access\" dir=\"ltr\">Hibernate Annotations - Which is better, field or property access?</a>\n                <span class=\"question-originals-answer-count\">\n                    20 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I have a simple question about usage of Hibernate.  I keep seeing people using JPA annotations in one of two ways by annotating the fields of a class and also by annotating the get method on the corresponding beans.</p>\n\n<p>My question is as follows: Is there a difference between annotating fields and bean methods with JPA annoations such as @Id.</p>\n\n<p>example:</p>\n\n<pre><code>@Entity\npublic class User\n{\n\n**@ID**\nprivate int id;\n\npublic int getId(){\nreturn this.id;\n}\n\npublic void setId(int id){\nthis.id=id;\n}\n\n}\n</code></pre>\n\n<p>-----------OR-----------</p>\n\n<pre><code>@Entity\npublic class User\n{\n\n\nprivate int id;\n\n**@ID**\npublic int getId(){\nreturn this.id;\n}\n\npublic void setId(int id){\nthis.id=id;\n}\n\n}\n</code></pre>\n    ","a":"\n<p>Yes, I believe you want to search on field versus property access:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access\">Hibernate Annotations - Which is better, field or property access?</a></p>\n\n<p>The Spring preference is <a href=\"http://static.springframework.org/spring/docs/2.5.x/reference/orm.html\" rel=\"nofollow noreferrer\">field access</a>.  That's what I follow.</p>\n    "},{"t":"Hibernate unidirectional one to many association - why is a join table better?","l":"http://stackoverflow.com/questions/1307203/hibernate-unidirectional-one-to-many-association-why-is-a-join-table-better","q":"\n\n<p>In this document (scroll down to the Unidirectional section):</p>\n\n<p><a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#entity-mapping-association-collections\" rel=\"nofollow noreferrer\">http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#entity-mapping-association-collections</a></p>\n\n<p>it says that a unidirectional one-to-many association with a join table is much preferred to just using a foreign key column in the owned entity. My question is, why is it much preferred?</p>\n    ","a":"\n<p>Consider the situation where the owned entity type can also be owned by another parent entity type. Do you put foreign key references in the owned table to both parent tables? What if you have three parent types? It just doesn't scale to large designs.</p>\n\n<p>A join-table decouples the join, so that the owned table has no knowledge of the parent table(s), allowing the design to scale elegantly.</p>\n    "},{"t":"No more data to read from socket error","l":"http://stackoverflow.com/questions/7839907/no-more-data-to-read-from-socket-error","q":"\n\n<p>We are using Oracle as the database for our Web application. The application runs well most of the time, but we get this \"No more data to read from socket\" error.</p>\n\n<pre><code>Caused by: java.sql.SQLRecoverableException: No more data to read from socket\n    at oracle.jdbc.driver.T4CMAREngine.unmarshalUB1(T4CMAREngine.java:1142)\n    at oracle.jdbc.driver.T4CMAREngine.unmarshalSB1(T4CMAREngine.java:1099)\n    at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:288)\n    at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:191)\n    at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:523)\n    at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:207)\n    at oracle.jdbc.driver.T4CPreparedStatement.executeForDescribe(T4CPreparedStatement.java:863)\n    at oracle.jdbc.driver.OracleStatement.executeMaybeDescribe(OracleStatement.java:1153)\n    at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1275)\n    at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:3576)\n    at oracle.jdbc.driver.OraclePreparedStatement.executeQuery(OraclePreparedStatement.java:3620)\n    at oracle.jdbc.driver.OraclePreparedStatementWrapper.executeQuery(OraclePreparedStatementWrapper.java:1491)\n    at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:93)\n    at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:93)\n    at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:208)\n    at org.hibernate.loader.Loader.getResultSet(Loader.java:1869)\n    at org.hibernate.loader.Loader.doQuery(Loader.java:718)\n    at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:270)\n    at org.hibernate.loader.Loader.doList(Loader.java:2449)\n    ... 63 more\n</code></pre>\n\n<p>We use spring, hibernate and i have the following for the datasource in my applciation context file.</p>\n\n<pre><code>&lt;bean class=\"org.apache.commons.dbcp.BasicDataSource\"\n        destroy-method=\"close\" id=\"dataSource\"&gt;\n        &lt;property name=\"driverClassName\" value=\"${database.driverClassName}\" /&gt;\n        &lt;property name=\"url\" value=\"${database.url}\" /&gt;\n        &lt;property name=\"username\" value=\"${database.username}\" /&gt;\n        &lt;property name=\"password\" value=\"${database.password}\" /&gt;\n        &lt;property name=\"defaultAutoCommit\" value=\"false\" /&gt;\n        &lt;property name=\"initialSize\" value=\"10\" /&gt;\n        &lt;property name=\"maxActive\" value=\"30\" /&gt;\n        &lt;property name=\"validationQuery\" value=\"select 1 from dual\" /&gt;\n        &lt;property name=\"testOnBorrow\" value=\"true\" /&gt;\n        &lt;property name=\"testOnReturn\" value=\"true\" /&gt;\n        &lt;property name=\"poolPreparedStatements\" value=\"true\" /&gt;\n        &lt;property name=\"removeAbandoned\" value=\"true\" /&gt;\n        &lt;property name=\"logAbandoned\" value=\"true\" /&gt;\n    &lt;/bean&gt;\n</code></pre>\n\n<p>I am not sure whether this is because of application errors, database errors or network errors. </p>\n\n<p>We see the following on the oracle logs</p>\n\n<pre><code>Thu Oct 20 10:29:44 2011\nErrors in file d:\\oracle\\diag\\rdbms\\ads\\ads\\trace\\ads_ora_3836.trc  (incident=31653):\nORA-03137: TTC protocol internal error : [12333] [4] [195] [3] [] [] [] []\nIncident details in: d:\\oracle\\diag\\rdbms\\ads\\ads\\incident\\incdir_31653\\ads_ora_3836_i31653.trc\nThu Oct 20 10:29:45 2011\nTrace dumping is performing id=[cdmp_20111020102945]\nThu Oct 20 10:29:49 2011\nSweep [inc][31653]: completed\nSweep [inc2][31653]: completed\nThu Oct 20 10:34:20 2011\nErrors in file d:\\oracle\\diag\\rdbms\\ads\\ads\\trace\\ads_ora_860.trc  (incident=31645):\nORA-03137: TTC protocol internal error : [12333] [4] [195] [3] [] [] [] []\nIncident details in: d:\\oracle\\diag\\rdbms\\ads\\ads\\incident\\incdir_31645\\ads_ora_860_i31645.trc\nThu Oct 20 10:34:21 2011\n</code></pre>\n\n<p><strong>Oracle Version : 11.2.0.1.0</strong></p>\n    ","a":"\n<p>For errors like this you should involve oracle support. Unfortunately you do not mention what oracle release you are using. The error can be related to optimizer bind peeking. Depending on the oracle version different workarounds apply.</p>\n\n<p>You have two ways to address this:</p>\n\n<ul>\n<li>upgrade to 11.2</li>\n<li>set oracle parameter “_optim_peek_user_binds”=false</li>\n</ul>\n\n<p>Of course underscore parameters should only be set if advised by oracle support</p>\n    "},{"t":"JPA: When to choose Multivalued Association vs. Element Collection Mapping","l":"http://stackoverflow.com/questions/3418683/jpa-when-to-choose-multivalued-association-vs-element-collection-mapping","q":"\n\n<p>I would like to better understand the differences between </p>\n\n<p>(1) a traditional <strong>Multivalued Relationship/Association</strong>  </p>\n\n<pre><code>   @Entity -&gt; @OneToMany -&gt; @Entity\n</code></pre>\n\n<p>and </p>\n\n<p>(2) the JPA2 <strong>Collection of Embeddable (and basic) Types</strong>  </p>\n\n<pre><code>  @Entity -&gt; @ElementCollection -&gt; @Embeddable\n</code></pre>\n\n<p>I see the syntactical differences, but wonder whether there are also <em>performance implications</em>.  Under the hood, the database implementation looks very similar.  </p>\n\n<p>Intuitively, I would typically use the <code>@ElementCollection</code> for <em>composition scenarios</em>.  But even that feels very similar like <code>CascadeType=DELETE</code>.</p>\n\n<p>Am I missing the essence here?  Is one more efficient than the other for certain purposes?</p>\n\n<p>Thank you, J.</p>\n    ","a":"\n<blockquote>\n  <p>Intuitively, I would typically use the @ElementCollection for composition scenarios. But even that feels very similar like CascadeType=DELETE</p>\n</blockquote>\n\n<p>They are similar, with some slight differences. The <a href=\"http://en.wikibooks.org/wiki/Java_Persistence/ElementCollection\" rel=\"nofollow noreferrer\">ElementCollection</a> page from the <a href=\"http://en.wikibooks.org/wiki/Java_Persistence\" rel=\"nofollow noreferrer\">Java Persistence</a> wikibook summarizes it pretty well:</p>\n\n<blockquote>\n  <h2><a href=\"http://en.wikibooks.org/wiki/Java_Persistence/ElementCollection#Emdedded_Collections\" rel=\"nofollow noreferrer\">Emdedded Collections</a></h2>\n  \n  <p>An <code>ElementCollection</code> mapping can be\n  used to define a collection of\n  <code>Embeddable</code> objects. This is not a\n  typical usage of <code>Embeddable</code> objects as\n  the objects are not <em>embedded</em> in the\n  source object's table, but stored in a\n  separate collection table. This is\n  similar to a <code>OneToMany</code>, except the\n  target object is an <code>Embeddable</code> instead\n  of an <code>Entity</code>. This allows collections\n  of simple objects to be easily\n  defined, without requiring the simple\n  objects to define an <code>Id</code> or <code>ManyToOne</code>\n  inverse mapping. <code>ElementCollection</code> can\n  also override the mappings, or table\n  for their collection, so you can have\n  multiple entities reference the same\n  <code>Embeddable</code> class, but have each store\n  their dependent objects in a separate\n  table.</p>\n  \n  <p>The limitations of using an\n  <code>ElementCollection</code> instead of a\n  <code>OneToMany</code> is that the target objects\n  cannot be queried, persisted, merged\n  independently of their parent object.\n  They are strictly privately-owned\n  (dependent) objects, the same as an\n  <code>Embedded</code> mapping. Their is no <code>cascade</code>\n  option on an <code>ElementCollection</code>, the\n  target objects are always persisted,\n  merged, removed with their parent.\n  <code>ElementCollection</code> still can use a\n  fetch type and defaults to <code>LAZY</code> the\n  same as other collection mappings.</p>\n</blockquote>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://en.wikibooks.org/wiki/Java_Persistence/Embeddables\" rel=\"nofollow noreferrer\">Embeddables (Aggregates, Composite or Component Objects)</a></li>\n</ul>\n    "},{"t":"How to persist LARGE BLOBs (>100MB) in Oracle using Hibernate","l":"http://stackoverflow.com/questions/9253323/how-to-persist-large-blobs-100mb-in-oracle-using-hibernate","q":"\n\n<p>I'm struggling to find a way to insert LARGE images (&gt;100MB, mostly TIFF format) in my Oracle database, using BLOB columns.</p>\n\n<p>I've searched thoroughly across the web and even in StackOverflow, without being able to find an answer to this problem.<br> \nFirst of all, the problem...then a short section on the relevant code (java classes/configuration), finally a <em>third section</em> where i show the junit test i've written to test image persistence (i receive the error during my junit test execution)</p>\n\n<h3>Edit: i've added a section, at the end of the question, where i describe some tests and analysis using JConsole</h3>\n\n<h1>The problem</h1>\n\n<p>I receive an <code>java.lang.OutOfMemoryError: Java heap space</code> error using hibernate and trying to persist very large images/documents:</p>\n\n<pre><code>java.lang.OutOfMemoryError: Java heap space\nat java.util.Arrays.copyOf(Arrays.java:2786)\nat java.io.ByteArrayOutputStream.toByteArray(ByteArrayOutputStream.java:133)\nat org.hibernate.type.descriptor.java.DataHelper.extractBytes(DataHelper.java:190)\nat org.hibernate.type.descriptor.java.BlobTypeDescriptor.unwrap(BlobTypeDescriptor.java:123)\nat org.hibernate.type.descriptor.java.BlobTypeDescriptor.unwrap(BlobTypeDescriptor.java:47)\nat org.hibernate.type.descriptor.sql.BlobTypeDescriptor$4$1.doBind(BlobTypeDescriptor.java:101)\nat org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:91)\nat org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:283)\nat org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:278)\nat org.hibernate.type.AbstractSingleColumnStandardBasicType.nullSafeSet(AbstractSingleColumnStandardBasicType.java:89)\nat org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2184)\nat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2430)\nat org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2874)\nat org.hibernate.action.EntityInsertAction.execute(EntityInsertAction.java:79)\nat org.hibernate.engine.ActionQueue.execute(ActionQueue.java:273)\nat org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:265)\nat org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:184)\nat org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321)\nat org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:51)\nat org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1216)\nat it.paoloyx.blobcrud.manager.DocumentManagerTest.testInsertDocumentVersion(DocumentManagerTest.java:929)\n</code></pre>\n\n<h1>The code (domain objects, repository classes, configuration)</h1>\n\n<p>Here is the stack of technologies i'm using (from DB to business logic tier). I use JDK6.</p>\n\n<ul>\n<li>Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - Prod</li>\n<li>ojdbc6.jar (for 11.2.0.3 release)</li>\n<li>Hibernate 4.0.1 Final</li>\n<li>Spring 3.1.GA RELEASE</li>\n</ul>\n\n<p>I've two domain classes, mapped in a one-to-many fashion. A <code>DocumentVersion</code> has many <code>DocumentData</code>, each of one can represent different binary content for the same <code>DocumentVersion</code>.</p>\n\n<p>Relevant extract from <code>DocumentVersion</code> class:</p>\n\n<pre><code>@Entity\n@Table(name = \"DOCUMENT_VERSION\")\npublic class DocumentVersion implements Serializable {\n\nprivate static final long serialVersionUID = 1L;\nprivate Long id;\nprivate Set&lt;DocumentData&gt; otherDocumentContents = new HashSet&lt;DocumentData&gt;(0);\n\n\n@Id\n@GeneratedValue(strategy = GenerationType.TABLE)\n@Column(name = \"DOV_ID\", nullable = false)\npublic Long getId() {\n    return id;\n}\n\n@OneToMany\n@Cascade({ CascadeType.SAVE_UPDATE })\n@JoinColumn(name = \"DOD_DOCUMENT_VERSION\")\npublic Set&lt;DocumentData&gt; getOtherDocumentContents() {\n    return otherDocumentContents;\n}\n</code></pre>\n\n<p>Relevant extract from <code>DocumentData</code> class:</p>\n\n<pre><code>@Entity\n@Table(name = \"DOCUMENT_DATA\")\npublic class DocumentData {\n\nprivate Long id;\n\n/**\n * The binary content (java.sql.Blob)\n */\nprivate Blob binaryContent;\n\n@Id\n@GeneratedValue(strategy = GenerationType.TABLE)\n@Column(name = \"DOD_ID\", nullable = false)\npublic Long getId() {\n    return id;\n}\n\n@Lob\n@Column(name = \"DOD_CONTENT\")\npublic Blob getBinaryContent() {\n    return binaryContent;\n}\n</code></pre>\n\n<p>Here are my Spring and Hibernate configuration main parameters:</p>\n\n<pre><code>&lt;bean id=\"sessionFactory\"\n    class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt;\n    &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n    &lt;property name=\"packagesToScan\" value=\"it.paoloyx.blobcrud.model\" /&gt;\n    &lt;property name=\"hibernateProperties\"&gt;\n        &lt;props&gt;\n            &lt;prop key=\"hibernate.dialect\"&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;\n            &lt;prop key=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/prop&gt;\n            &lt;prop key=\"hibernate.jdbc.batch_size\"&gt;0&lt;/prop&gt;\n            &lt;prop key=\"hibernate.jdbc.use_streams_for_binary\"&gt;true&lt;/prop&gt;\n        &lt;/props&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n&lt;bean class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\"\n    id=\"transactionManager\"&gt;\n    &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt;\n&lt;/bean&gt;\n&lt;tx:annotation-driven transaction-manager=\"transactionManager\" /&gt;\n</code></pre>\n\n<p>My datasource definition:</p>\n\n<pre><code>&lt;bean class=\"org.apache.commons.dbcp.BasicDataSource\"\n    destroy-method=\"close\" id=\"dataSource\"&gt;\n    &lt;property name=\"driverClassName\" value=\"${database.driverClassName}\" /&gt;\n    &lt;property name=\"url\" value=\"${database.url}\" /&gt;\n    &lt;property name=\"username\" value=\"${database.username}\" /&gt;\n    &lt;property name=\"password\" value=\"${database.password}\" /&gt;\n    &lt;property name=\"testOnBorrow\" value=\"true\" /&gt;\n    &lt;property name=\"testOnReturn\" value=\"true\" /&gt;\n    &lt;property name=\"testWhileIdle\" value=\"true\" /&gt;\n    &lt;property name=\"timeBetweenEvictionRunsMillis\" value=\"1800000\" /&gt;\n    &lt;property name=\"numTestsPerEvictionRun\" value=\"3\" /&gt;\n    &lt;property name=\"minEvictableIdleTimeMillis\" value=\"1800000\" /&gt;\n    &lt;property name=\"validationQuery\" value=\"${database.validationQuery}\" /&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>where properties are taken from here:</p>\n\n<pre><code>database.driverClassName=oracle.jdbc.OracleDriver\ndatabase.url=jdbc:oracle:thin:@localhost:1521:devdb\ndatabase.username=blobcrud\ndatabase.password=blobcrud\ndatabase.validationQuery=SELECT 1 from dual\n</code></pre>\n\n<p>I've got a service class, that delegates to a repository class:</p>\n\n<pre><code>@Transactional\npublic class DocumentManagerImpl implements DocumentManager {\n\nDocumentVersionDao documentVersionDao;\n\npublic void setDocumentVersionDao(DocumentVersionDao documentVersionDao) {\n    this.documentVersionDao = documentVersionDao;\n}\n</code></pre>\n\n<p>and now the relevant extracts from repository classes:</p>\n\n<pre><code>public class DocumentVersionDaoHibernate implements DocumentVersionDao {\n\n@Autowired\nprivate SessionFactory sessionFactory;\n\n@Override\npublic DocumentVersion saveOrUpdate(DocumentVersion record) {\n    this.sessionFactory.getCurrentSession().saveOrUpdate(record);\n    return record;\n}\n</code></pre>\n\n<h1>The JUnit test that causes the error</h1>\n\n<p>If i run the following unit test i've got the aforementioned error (<code>java.lang.OutOfMemoryError: Java heap space</code>):</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = { \"classpath*:META-INF/spring/applicationContext*.xml\" })\n@Transactional\npublic class DocumentManagerTest {\n\n@Autowired\nprotected DocumentVersionDao documentVersionDao;\n\n@Autowired\nprotected SessionFactory sessionFactory;\n\n@Test\npublic void testInsertDocumentVersion() throws SQLException {\n\n    // Original mock document content\n    DocumentData dod = new DocumentData();\n    // image.tiff is approx. 120MB\n    File veryBigFile = new File(\"/Users/paoloyx/Desktop/image.tiff\");\n    try {\n        Session session = this.sessionFactory.getCurrentSession();\n        InputStream inStream = FileUtils.openInputStream(veryBigFile);\n        Blob blob = Hibernate.getLobCreator(session).createBlob(inStream, veryBigFile.length());\n        dod.setBinaryContent(blob);\n    } catch (IOException e) {\n        e.printStackTrace();\n        dod.setBinaryContent(null);\n    }\n\n    // Save a document version linked to previous document contents\n    DocumentVersion dov = new DocumentVersion();\n    dov.getOtherDocumentContents().add(dod);\n    documentVersionDao.saveOrUpdate(dov);\n    this.sessionFactory.getCurrentSession().flush();\n\n    // Clear session, then try retrieval\n    this.sessionFactory.getCurrentSession().clear();\n    DocumentVersion dbDov = documentVersionDao.findByPK(insertedId);\n    Assert.assertNotNull(\"Il document version ritornato per l'id \" + insertedId + \" è nullo\", dbDov);\n    Assert.assertNotNull(\"Il document version recuperato non ha associato contenuti aggiuntivi\", dbDov.getOtherDocumentContents());\n    Assert.assertEquals(\"Il numero di contenuti secondari non corrisponde con quello salvato\", 1, dbDov.getOtherDocumentContents().size());\n}\n</code></pre>\n\n<p>The <strong><em>same code</em></strong> works against a PostreSQL 9 installation. The images is being written in the database. \nDebugging my code, i've been able to find that the PostgreSQL jdbc drivers writes on the database using a buffered output stream....while the Oracle OJDBC driver tries to allocate all at once all the <code>byte[]</code>representing the image.</p>\n\n<p>From the error stack:</p>\n\n<pre><code>java.lang.OutOfMemoryError: Java heap space\nat java.util.Arrays.copyOf(Arrays.java:2786)\nat java.io.ByteArrayOutputStream.toByteArray(ByteArrayOutputStream.java:133)\n</code></pre>\n\n<p>Is the error due to this behavior?\nCan anyone give me some insights on this problem?</p>\n\n<p>Thanks everyone.</p>\n\n<h1>Memory Tests with JConsole</h1>\n\n<p>Thanks to the suggestions received for my question, i've tried to do some simple tests to show memory usage of my code using two different jdbc drivers, one for PostgreSQL and one for Oracle.\nTest setup:</p>\n\n<ol>\n<li>The test has been conducted using the JUnit test described in the previous section.</li>\n<li>JVM Heap Size has been set to 512MB, using parameter <em>-Xmx512MB</em></li>\n<li>For Oracle database, I've used <em>ojdbc6.jar</em> driver</li>\n<li>For Postgres database, I've used <em>9.0-801.jdbc3 driver</em> (via Maven)</li>\n</ol>\n\n<h3>First test, with a file of approx 150MB</h3>\n\n<p>In this first test, both Oracle and Postgres <strong><em>passed</em></strong> the test (this is BIG news).\nThe file is sized 1/3 of available JVM heap size.\nHere the picture of JVM memory consumption:</p>\n\n<p>Testing Oracle, 512MB Heap Size, 150MB file\n<img src=\"https://i.stack.imgur.com/xUvA1.png\" alt=\"Testing Oracle, 512MB Heap Size, 150MB file\"></p>\n\n<p>Testing PostgreSQL, 512MB Heap Size, 150MB file\n<img src=\"https://i.stack.imgur.com/wXS76.png\" alt=\"Testing PostgreSQL, 512MB Heap Size, 150MB file\"></p>\n\n<h3>Second test, with a file of approx 485MB</h3>\n\n<p>In this second test, only Postgres passed the test and Oracle <strong><em>failed</em></strong> it .\nThe file is sized very near the size of the available JVM heap space.\nHere the picture of JVM memory consumption:</p>\n\n<p>Testing Oracle, 512MB Heap Size, 485MB file\n<img src=\"https://i.stack.imgur.com/81FMO.png\" alt=\"Testing Oracle, 512MB Heap Size, 485MB file\"></p>\n\n<p>Testing PostgreSQL, 512MB Heap Size, 485MB file\n<img src=\"https://i.stack.imgur.com/U9uKb.png\" alt=\"Testing PostgreSQL, 512MB Heap Size, 485MB file\"></p>\n\n<h3>Analysis of the tests:</h3>\n\n<p>It seems that PostgreSQL driver handles memory without surpassing a certain threshold, while Oracle driver behaves very differently.</p>\n\n<p>I can't honestly explain why Oracle jdbc driver leads me to error (the same <code>java.lang.OutOfMemoryError: Java heap space</code>) when using file sized near the available heap space.</p>\n\n<p>Is there anyone that can give me more insights?\nThanks a lot for you help :)</p>\n    ","a":"\n<p>I just discovered this question when I was having the same problem with Oracle and Hibernate. The issue is in the Hibernate blob handling. It seems to copy the blob to memory depending on the Dialect in use. I guess they do so, because it's required by some databases/drivers. For Oracle though, this behaviour does not seem to be required. </p>\n\n<p>The fix is pretty simple, just create a custom OracleDialect containing this code:</p>\n\n<pre><code>public class Oracle10DialectWithoutInputStreamToInsertBlob extends Oracle10gDialect {\n    public boolean useInputStreamToInsertBlob() {\n        return false;\n    }\n}\n</code></pre>\n\n<p>Next you need to configure your session factory to use this Dialect. I've tested it with the ojdbc6-11.2.0.1.0 driver towards Oracle 11g, and confirmed that this fixes the issue with memory consumption.</p>\n\n<p>If some of you tries this with another Oracle database and/or with a different Oracle driver I would love to hear if it works for you. If it works with several configurations, I'll send a pull request to the Hibernate team.</p>\n    "},{"t":"hibernate could not get next sequence value","l":"http://stackoverflow.com/questions/10628099/hibernate-could-not-get-next-sequence-value","q":"\n\n<p>i have gwt application connect to postgres DB at the backend, and a java class 'Judgement' mapping the table 'judgements' in DB, when i tried to persistent a judgement into db, it threw the following errors:</p>\n\n<pre><code>Caused by: org.hibernate.exception.SQLGrammarException: could not get next sequence value\n...\nCaused by: org.postgresql.util.PSQLException: ERROR: relation \"hibernate_sequence\" does not exist\n</code></pre>\n\n<p>my Judgement class looks like this</p>\n\n<pre><code>@Entity\n@Table(name = \"JUDGEMENTS\")\npublic class Judgement implements Serializable, Cloneable {\n\n    private static final long serialVersionUID = -7049957706738879274L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"JUD_ID\")\n    private Long _judId;\n...\n</code></pre>\n\n<p>and my table judgements is: </p>\n\n<pre><code>   Column    |            Type             |                        Modifiers                        \n-------------+-----------------------------+---------------------------------------------------------\n jud_id      | bigint                      | not null default nextval('judgements_id_seq'::regclass)\n rating      | character varying(255)      | \n last_update | timestamp without time zone | \n user_id     | character varying(255)      | \n id          | integer                     | \nIndexes:\n    \"judgements_pkey\" PRIMARY KEY, btree (jud_id)\nForeign-key constraints:\n    \"judgements_id_fkey\" FOREIGN KEY (id) REFERENCES recommendations(id)\n    \"judgements_user_id_fkey\" FOREIGN KEY (user_id) REFERENCES users(user_id)\n</code></pre>\n\n<p>and i have a SEQUENCE name 'judgements_id_seq' in DB</p>\n\n<p>can anyone tell me what's wrong??? thanks.</p>\n    ","a":"\n<p>Hibernate's PostgreSQL dialect isn't very bright. It doesn't know about your per-SERIAL sequences, and is assuming there's a global database-wide sequence called \"hibernate_sequence\" that it can use.</p>\n\n<hr>\n\n<p>(<strong>UPDATE</strong>: It appears that newer Hibernate versions may use the default per-table sequences when <code>GenerationType.IDENTITY</code> is specified. Test your version and use this instead of the below if it works for you.)</p>\n\n<hr>\n\n<p>You need to change your mappings to explicitly specify each sequence. It's annoying, repetitive, and pointless.</p>\n\n<pre><code>@Entity\n@Table(name = \"JUDGEMENTS\")\npublic class Judgement implements Serializable, Cloneable {\n\n    private static final long serialVersionUID = -7049957706738879274L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator=\"judgements_id_seq\")\n    @SequenceGenerator(name=\"judgements_id_seq\", sequenceName=\"judgements_id_seq\", allocationSize=1)\n    @Column(name = \"JUD_ID\")\n    private Long _judId;\n...\n</code></pre>\n\n<p>The <code>allocationSize=1</code> is quite important. If you omit it, Hibernate will blindly assume that the sequence is defined with <code>INCREMENT 50</code> so when it gets a value from a sequence it can use that value <em>and the 49 values below it</em> as unique generated keys. If your database sequences increment by 1 - the default - then this will result in unique violations as Hibernate tries to re-use existing keys.</p>\n\n<p>Note that getting one key at a time <em>will</em> result in an additional round trip per insert. As far as I can tell Hibernate isn't capable of using <code>INSERT ... RETURNING</code> to efficiently return generated keys, nor can it apparently use the JDBC generated keys interface. If you tell it to use a sequence, it'll call <code>nextval</code> to get the value then <code>insert</code> that explicitly, resulting in two round trips. To reduce the cost of that, you can set a greater increment on key sequences with lots of inserts , remembering to set it on the mapping <em>and</em> the underlying database sequence. That'll cause Hibernate to call <code>nextval</code> less frequently and cache blocks of keys to hand out as it goes.</p>\n\n<p>I'm sure you can see from the above that I don't agree with the Hibernate design choices made here, at least from the perspective of using it with PostgreSQL. They should be using <code>getGeneratedKeys</code> or using <code>INSERT ... RETURNING</code> with <code>DEFAULT</code> for the key, letting the database take care of this without Hibernate having to trouble its self over the names of the sequences or explicit access to them.</p>\n\n<p>BTW, if you're using Hibernate with Pg you'll possibly also want <a href=\"http://wiki.postgresql.org/wiki/Hibernate_oplocks\">an oplock trigger for Pg</a> to allow Hibernate's optimistic locking to interact safely with normal database locking. Without it or something like it your Hibernate updates will tend to clobber changes made via other regular SQL clients. Ask me how I know.</p>\n    "},{"t":"error: No validator could be found for type: java.lang.Integer?","l":"http://stackoverflow.com/questions/5982741/error-no-validator-could-be-found-for-type-java-lang-integer","q":"\n\n<p>I am working on a project with Spring why do I keep getting the following error?</p>\n\n<p>javax.validation.UnexpectedTypeException: No validator could be found for type: java.lang.Integer</p>\n\n<pre><code>Code:\n\npackage com.s2rsolutions.model;\n\nimport java.util.Date;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport javax.validation.constraints.Size;\n\nimport org.hibernate.validator.constraints.NotEmpty;\n\n\n\n@Entity\n@Table(name = \"sales\")\npublic class Sales {\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"ttl_d_sls_lst_mth\", nullable = false)\n    private Integer ttl_d_sls_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"ttl_d_sls_6_mth\", nullable = false)\n    private Integer ttl_d_sls_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"ttl_d_sls_mtht\", nullable = false)\n    private Integer ttl_d_sls_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"ttl_s_sls_lst_mth\", nullable = false)\n    private Integer ttl_s_sls_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"ttl_s_sls_6_mth\", nullable = false)\n    private Integer ttl_s_sls_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"ttl_s_sls_mtht\", nullable = false)\n    private Integer ttl_s_sls_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"nw_lst_mth\", nullable = false)\n    private Integer nw_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"nw_6_mth\", nullable = false)\n    private Integer nw_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"nw_mtht\", nullable = false)\n    private Integer nw_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"usd_lst_mth\", nullable = false)\n    private Integer usd_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"usd_6_mth\", nullable = false)\n    private Integer usd_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"usd_mtht\", nullable = false)\n    private Integer usd_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"grss_prt_pvnr_lst_mth\", nullable = false)\n    private Integer grss_prt_pvnr_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"grss_prt_pvnr_6_mth\", nullable = false)\n    private Integer grss_prt_pvnr_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"grss_prt_pvnr_mtht\", nullable = false)\n    private Integer grss_prt_pvnr_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"grss_prt_pvur_lst_mth\", nullable = false)\n    private Integer grss_prt_pvur_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"grss_prt_pvur_6_mth\", nullable = false)\n    private Integer grss_prt_pvur_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"grss_prt_pvur_mtht\", nullable = false)\n    private Integer grss_prt_pvur_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"shwrm_tffic_lst_mth\", nullable = false)\n    private Integer shwrm_tffic_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"shwrm_tffic_6_mth\", nullable = false)\n    private Integer shwrm_tffic_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"shwrm_tffic_mtht\", nullable = false)\n    private Integer shwrm_tffic_mtht;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"shwrm_clsng_lst_mth\", nullable = false)\n    private Integer shwrm_clsng_lst_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"shwrm_clsng_6_mth\", nullable = false)\n    private Integer shwrm_clsng_6_mth;\n\n    @NotEmpty(message = \"The above field must not be blank.\")\n    @Column(name = \"shwrm_clsng_mtht\", nullable = false)\n    private Integer shwrm_clsng_mtht;\n\n    @Column(name = \"date_added\")\n    private Date addedDate;\n\n\n    public Integer getTtl_d_sls_lst_mth() {\n        return ttl_d_sls_lst_mth;\n    }\n\n    public void setTtl_d_sls_lst_mth(Integer ttl_d_sls_lst_mth) {\n        this.ttl_d_sls_lst_mth = ttl_d_sls_lst_mth;\n    }\n\n    public Integer getTtl_d_sls_6_mth() {\n        return ttl_d_sls_6_mth;\n    }\n\n    public void setTtl_d_sls_6_mth(Integer ttl_d_sls_6_mth) {\n        this.ttl_d_sls_6_mth = ttl_d_sls_6_mth;\n    }\n\n    public Integer getTtl_d_sls_mtht() {\n        return ttl_d_sls_mtht;\n    }\n\n    public void setTtl_d_sls_mtht(Integer ttl_d_sls_mtht) {\n        this.ttl_d_sls_mtht = ttl_d_sls_mtht;\n    }\n\n    public Integer getTtl_s_sls_lst_mth() {\n        return ttl_s_sls_lst_mth;\n    }\n\n    public void setTtl_s_sls_lst_mth(Integer ttl_s_sls_lst_mth) {\n        this.ttl_s_sls_lst_mth = ttl_s_sls_lst_mth;\n    }\n\n    public Integer getTtl_s_sls_6_mth() {\n        return ttl_s_sls_6_mth;\n    }\n\n    public void setTtl_s_sls_6_mth(Integer ttl_s_sls_6_mth) {\n        this.ttl_s_sls_6_mth = ttl_s_sls_6_mth;\n    }\n\n    public Integer getTtl_s_sls_mtht() {\n        return ttl_s_sls_mtht;\n    }\n\n    public void setTtl_s_sls_mtht(Integer ttl_s_sls_mtht) {\n        this.ttl_s_sls_mtht = ttl_s_sls_mtht;\n    }\n\n    public Integer getNw_lst_mth() {\n        return nw_lst_mth;\n    }\n\n    public void setNw_lst_mth(Integer nw_lst_mth) {\n        this.nw_lst_mth = nw_lst_mth;\n    }\n\n    public Integer getNw_6_mth() {\n        return nw_6_mth;\n    }\n\n    public void setNw_6_mth(Integer nw_6_mth) {\n        this.nw_6_mth = nw_6_mth;\n    }\n\n    public Integer getNw_mtht() {\n        return nw_mtht;\n    }\n\n    public void setNw_mtht(Integer nw_mtht) {\n        this.nw_mtht = nw_mtht;\n    }\n\n    public Integer getUsd_lst_mth() {\n        return usd_lst_mth;\n    }\n\n    public void setUsd_lst_mth(Integer usd_lst_mth) {\n        this.usd_lst_mth = usd_lst_mth;\n    }\n\n    public Integer getUsd_6_mth() {\n        return usd_6_mth;\n    }\n\n    public void setUsd_6_mth(Integer usd_6_mth) {\n        this.usd_6_mth = usd_6_mth;\n    }\n\n    public Integer getUsd_mtht() {\n        return usd_mtht;\n    }\n\n    public void setUsd_mtht(Integer usd_mtht) {\n        this.usd_mtht = usd_mtht;\n    }\n\n    public Integer getGrss_prt_pvnr_lst_mth() {\n        return grss_prt_pvnr_lst_mth;\n    }\n\n    public void setGrss_prt_pvnr_lst_mth(Integer grss_prt_pvnr_lst_mth) {\n        this.grss_prt_pvnr_lst_mth = grss_prt_pvnr_lst_mth;\n    }\n\n    public Integer getGrss_prt_pvnr_6_mth() {\n        return grss_prt_pvnr_6_mth;\n    }\n\n    public void setGrss_prt_pvnr_6_mth(Integer grss_prt_pvnr_6_mth) {\n        this.grss_prt_pvnr_6_mth = grss_prt_pvnr_6_mth;\n    }\n\n    public Integer getGrss_prt_pvnr_mtht() {\n        return grss_prt_pvnr_mtht;\n    }\n\n    public void setGrss_prt_pvnr_mtht(Integer grss_prt_pvnr_mtht) {\n        this.grss_prt_pvnr_mtht = grss_prt_pvnr_mtht;\n    }\n\n    public Integer getGrss_prt_pvur_lst_mth() {\n        return grss_prt_pvur_lst_mth;\n    }\n\n    public void setGrss_prt_pvur_lst_mth(Integer grss_prt_pvur_lst_mth) {\n        this.grss_prt_pvur_lst_mth = grss_prt_pvur_lst_mth;\n    }\n\n    public Integer getGrss_prt_pvur_6_mth() {\n        return grss_prt_pvur_6_mth;\n    }\n\n    public void setGrss_prt_pvur_6_mth(Integer grss_prt_pvur_6_mth) {\n        this.grss_prt_pvur_6_mth = grss_prt_pvur_6_mth;\n    }\n\n    public Integer getGrss_prt_pvur_mtht() {\n        return grss_prt_pvur_mtht;\n    }\n\n    public void setGrss_prt_pvur_mtht(Integer grss_prt_pvur_mtht) {\n        this.grss_prt_pvur_mtht = grss_prt_pvur_mtht;\n    }\n\n    public Integer getShwrm_tffic_lst_mth() {\n        return shwrm_tffic_lst_mth;\n    }\n\n    public void setShwrm_tffic_lst_mth(Integer shwrm_tffic_lst_mth) {\n        this.shwrm_tffic_lst_mth = shwrm_tffic_lst_mth;\n    }\n\n    public Integer getShwrm_tffic_6_mth() {\n        return shwrm_tffic_6_mth;\n    }\n\n    public void setShwrm_tffic_6_mth(Integer shwrm_tffic_6_mth) {\n        this.shwrm_tffic_6_mth = shwrm_tffic_6_mth;\n    }\n\n    public Integer getShwrm_tffic_mtht() {\n        return shwrm_tffic_mtht;\n    }\n\n    public void setShwrm_tffic_mtht(Integer shwrm_tffic_mtht) {\n        this.shwrm_tffic_mtht = shwrm_tffic_mtht;\n    }\n\n    public Integer getShwrm_clsng_lst_mth() {\n        return shwrm_clsng_lst_mth;\n    }\n\n    public void setShwrm_clsng_lst_mth(Integer shwrm_clsng_lst_mth) {\n        this.shwrm_clsng_lst_mth = shwrm_clsng_lst_mth;\n    }\n\n    public Integer getShwrm_clsng_6_mth() {\n        return shwrm_clsng_6_mth;\n    }\n\n    public void setShwrm_clsng_6_mth(Integer shwrm_clsng_6_mth) {\n        this.shwrm_clsng_6_mth = shwrm_clsng_6_mth;\n    }\n\n    public Integer getShwrm_clsng_mtht() {\n        return shwrm_clsng_mtht;\n    }\n\n    public void setShwrm_clsng_mtht(Integer shwrm_clsng_mtht) {\n        this.shwrm_clsng_mtht = shwrm_clsng_mtht;\n    }\n\n    public Date getAddedDate() {\n        return addedDate;\n    }\n\n    public void setAddedDate(Date addedDate) {\n        this.addedDate = addedDate;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Id\n    @Column(name = \"username\")\n    private String username;\n\n}\n</code></pre>\n    ","a":"\n<p>Looks like this is similar to what I faced earlier, <a href=\"http://forum.springsource.org/showthread.php?87762-Validation-Empty-int-field\">this post</a> helped me.</p>\n\n<p>To customize the error messages from failing at the bind time. Look <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#context-functionality-messagesource\">this link</a> for more details on creating a MessageSource bean in your application context and create a messages.properties resource bundle : </p>\n    "},{"t":"how to configure hibernate config file for sql server","l":"http://stackoverflow.com/questions/3585544/how-to-configure-hibernate-config-file-for-sql-server","q":"\n\n<p>Here is the config file for MySQL:</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n  &lt;session-factory&gt;\n    &lt;property name=\"hibernate.connection.driver_class\"&gt;org.gjt.mm.mysql.Driver&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost/test&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.password\"&gt;zgy01&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.pool_size\"&gt;100&lt;/property&gt;\n    &lt;property name=\"show_sql\"&gt;false&lt;/property&gt;\n    &lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n\n    &lt;!-- Mapping files --&gt;\n    &lt;mapping resource=\"model.hbm.xml\"/&gt;\n\n  &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<p>What to specify for SQL Server 2005? I did it like this:</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n  &lt;session-factory&gt;\n    &lt;property name=\"hibernate.connection.driver_class\"&gt;org.gjt.mm.mysql.Driver&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.url\"&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.username\"&gt;sa&lt;/property&gt;\n    &lt;property name=\"hibernate.connection.password\"&gt;lal&lt;/property&gt;\n    &lt;property name=\"dialect\"&gt;org.hibernate.dialect.SQLServerDialect&lt;/property&gt;\n\n    &lt;property name=\"hibernate.connection.pool_size\"&gt;100&lt;/property&gt;        \n    &lt;property name=\"show_sql\"&gt;false&lt;/property&gt;\n\n    &lt;!-- Mapping files --&gt;\n    &lt;mapping resource=\"model.hbm.xml\"/&gt;\n\n  &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<p>My question more precisely is how to specify the database that I have to connect to?</p>\n\n<p>In MySQL I used to do like this: </p>\n\n<pre><code>&lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost/test&lt;/property&gt; \n</code></pre>\n    ","a":"\n<p>Properties that are <em>database specific</em> are:</p>\n\n<ul>\n<li><code>hibernate.connection.driver_class</code>: JDBC driver class</li>\n<li><code>hibernate.connection.url</code>: JDBC URL</li>\n<li><code>hibernate.connection.username</code>: database user</li>\n<li><code>hibernate.connection.password</code>: database password</li>\n<li><code>hibernate.dialect</code>: The class name of a Hibernate <code>org.hibernate.dialect.Dialect</code> which allows Hibernate to generate SQL optimized for a particular relational database. </li>\n</ul>\n\n<p>To change the database, you must:</p>\n\n<ol>\n<li>Provide an appropriate JDBC driver for the database on the class path, </li>\n<li>Change the JDBC properties (<strong>driver, url, user, password</strong>)</li>\n<li>Change the <code>Dialect</code> used by Hibernate to talk to the database</li>\n</ol>\n\n<p>There are two drivers to connect to SQL Server; the open source <a href=\"http://jtds.sourceforge.net/\" rel=\"nofollow noreferrer\">jTDS</a> and the Microsoft one. The driver class and the JDBC URL depend on which one you use.</p>\n\n<h2>With the jTDS driver</h2>\n\n<p>The driver class name is <code>net.sourceforge.jtds.jdbc.Driver</code>.</p>\n\n<p>The URL format for sqlserver is:</p>\n\n<pre><code> jdbc:jtds:sqlserver://&lt;server&gt;[:&lt;port&gt;][/&lt;database&gt;][;&lt;property&gt;=&lt;value&gt;[;...]]\n</code></pre>\n\n<p>So the Hibernate configuration would look like (note that you can skip the <code>hibernate.</code> prefix in the properties):</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n  &lt;session-factory&gt;\n    &lt;property name=\"connection.driver_class\"&gt;net.sourceforge.jtds.jdbc.Driver&lt;/property&gt;\n    &lt;property name=\"connection.url\"&gt;jdbc:jtds:sqlserver://&lt;server&gt;[:&lt;port&gt;][/&lt;database&gt;]&lt;/property&gt;\n    &lt;property name=\"connection.username\"&gt;sa&lt;/property&gt;\n    &lt;property name=\"connection.password\"&gt;lal&lt;/property&gt;\n\n    &lt;property name=\"dialect\"&gt;org.hibernate.dialect.SQLServerDialect&lt;/property&gt;\n\n    ...\n  &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<h2>With Microsoft SQL Server JDBC 3.0:</h2>\n\n<p>The driver class name is <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code>.</p>\n\n<p>The URL format is:</p>\n\n<pre><code>jdbc:sqlserver://[serverName[\\instanceName][:portNumber]][;property=value[;property=value]]\n</code></pre>\n\n<p>So the Hibernate configuration would look like:</p>\n\n<pre><code>&lt;hibernate-configuration&gt;\n  &lt;session-factory&gt;\n    &lt;property name=\"connection.driver_class\"&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/property&gt;\n    &lt;property name=\"connection.url\"&gt;jdbc:sqlserver://[serverName[\\instanceName][:portNumber]];databaseName=&lt;databaseName&gt;&lt;/property&gt;\n    &lt;property name=\"connection.username\"&gt;sa&lt;/property&gt;\n    &lt;property name=\"connection.password\"&gt;lal&lt;/property&gt;\n\n    &lt;property name=\"dialect\"&gt;org.hibernate.dialect.SQLServerDialect&lt;/property&gt;\n\n    ...\n  &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n\n<h3>References</h3>\n\n<ul>\n<li>Hibernate Core Reference Documentation\n\n<ul>\n<li><a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-hibernatejdbc\" rel=\"nofollow noreferrer\">3.3. JDBC connections</a> </li>\n<li><a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-optional\" rel=\"nofollow noreferrer\">3.4. Optional configuration properties</a></li>\n</ul></li>\n<li><a href=\"http://jtds.sourceforge.net/doc.html\" rel=\"nofollow noreferrer\">jTDS Documentation</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd631800%28v=SQL.10%29.aspx\" rel=\"nofollow noreferrer\">Microsoft SQL Server JDBC Driver 3.0 Documentation</a> </li>\n<li><a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyID=99b21b65-e98f-4a61-b811-19912601fdc9&amp;displaylang=en\" rel=\"nofollow noreferrer\">Microsoft SQL Server JDBC Driver 2.0</a></li>\n<li><a href=\"http://blogs.msdn.com/b/jdbcteam/archive/2010/07/02/support-matrix-for-microsoft-sql-server-jdbc-driver.aspx\" rel=\"nofollow noreferrer\">Support Matrix for Microsoft SQL Server JDBC Driver</a></li>\n</ul>\n    "},{"t":"Found shared references to a collection org.hibernate.HibernateException","l":"http://stackoverflow.com/questions/1692871/found-shared-references-to-a-collection-org-hibernate-hibernateexception","q":"\n\n<p>I got this error message:</p>\n\n<blockquote>\n  <p>error: Found shared references to a collection: Person.relatedPersons</p>\n</blockquote>\n\n<p>When I tried to execute <code>addToRelatedPersons(anotherPerson)</code>:</p>\n\n<pre><code>person.addToRelatedPersons(anotherPerson);\nanotherPerson.addToRelatedPersons(person);\n\nanotherPerson.save();\nperson.save();\n</code></pre>\n\n<p>My domain:</p>\n\n<pre><code>Person {\n\n static hasMany = [relatedPersons:Person];\n\n}\n</code></pre>\n\n<p>any idea why this happens ?</p>\n    ","a":"\n<p>Hibernate shows this error when you attempt to persist more than one entity instance sharing the <strong>same</strong> collection reference (i.e. the collection identity in contrast with collection equality).</p>\n\n<p>Note that it means the same <strong>collection</strong>, not collection element - in other words <code>relatedPersons</code> on both <code>person</code> and <code>anotherPerson</code> must be the same. Perhaps you're resetting that collection after entities are loaded? Or you've initialized both references with the same collection instance?</p>\n    "},{"t":"Creating field with reserved word name with JPA","l":"http://stackoverflow.com/questions/2224503/creating-field-with-reserved-word-name-with-jpa","q":"\n\n<pre><code>@Column(name=\"open\")\n</code></pre>\n\n<p>Using sqlserver dialect with hibernate.</p>\n\n<pre><code>[SchemaUpdate] Unsuccessful: create table auth_session (id numeric(19,0) identity not null, active tinyint null, creation_date datetime not null, last_modified datetime not null, maxidle int null, maxlive int null, open tinyint null, sessionid varchar(255) not null, user_id numeric(19,0) not null, primary key (id), unique (sessionid))\n[SchemaUpdate] Incorrect syntax near the keyword 'open'.\n</code></pre>\n\n<p>I would have expected hibernate to use quoted identifier when creating the table.</p>\n\n<p>Any ideas on how to handle this... other than renaming the field?</p>\n    ","a":"\n<p>With Hibernate as JPA 1.0 provider, you can escape a reserved keyword by enclosing it within backticks:</p>\n\n<pre><code>@Column(name=\"`open`\")\n</code></pre>\n\n<p>This is the syntax inherited from Hiberate Core:</p>\n\n<blockquote>\n  <h3><a href=\"http://docs.jboss.org/hibernate/stable/core/manual/en-US/html/mapping.html#mapping-quotedidentifiers\" rel=\"nofollow noreferrer\">5.4. SQL quoted identifiers</a></h3>\n  \n  <p>You can force Hibernate to quote an\n  identifier in the generated SQL by\n  enclosing the table or column name in\n  backticks in the mapping document.\n  Hibernate will use the correct\n  quotation style for the SQL Dialect.\n  This is usually double quotes, but the\n  SQL Server uses brackets and MySQL\n  uses backticks.</p>\n\n<pre><code>&lt;class name=\"LineItem\" table=\"`Line Item`\"&gt;\n    &lt;id name=\"id\" column=\"`Item Id`\"/&gt;&lt;generator class=\"assigned\"/&gt;&lt;/id&gt;\n    &lt;property name=\"itemNumber\" column=\"`Item #`\"/&gt;\n    ...\n&lt;/class&gt;\n</code></pre>\n</blockquote>\n\n<p>In JPA 2.0, the syntax is standardized and becomes:</p>\n\n<pre><code>@Column(name=\"\\\"open\\\"\")\n</code></pre>\n\n<h3>References</h3>\n\n<ul>\n<li>Hibernate reference guide\n\n<ul>\n<li><a href=\"http://docs.jboss.org/hibernate/stable/core/manual/en-US/html/mapping.html#mapping-quotedidentifiers\" rel=\"nofollow noreferrer\">5.4. SQL quoted identifiers</a></li>\n</ul></li>\n<li>JPA 2.0 specification\n\n<ul>\n<li>2.13 Naming of Database Objects</li>\n</ul></li>\n</ul>\n\n<h3>Related questions</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/3217479/hibernate-mysql-and-table-named-repeat-strange-behaviour\">Hibernate, MySQL and table named “Repeat” - strange behaviour</a> </li>\n<li><a href=\"http://stackoverflow.com/questions/3364835/automatic-reserved-word-escaping-for-hibernate-tables-and-columns\">Automatic reserved word escaping for Hibernate tables and columns</a></li>\n</ul>\n    "},{"t":"How does Hibernate detect dirty state of an entity object?","l":"http://stackoverflow.com/questions/5268466/how-does-hibernate-detect-dirty-state-of-an-entity-object","q":"\n\n<p>Is it using some kind of byte codes modification to the original classes?</p>\n\n<p>Or, maybe Hibernate get the dirty state by compare the given object with previously persisted version?</p>\n\n<p>I'm having a problem with <code>hashCode()</code> and <code>equals()</code> methods for complicated objects. I feel it would be very slow to compute hash code if the object has collection members, and cyclic references are also a problem.</p>\n\n<p>If Hibernate won't use <code>hashCode()</code>/<code>equals()</code> to check the dirty state, I guess I should not use <code>equals()</code>/<code>hashCode()</code> for the entity object (not value object), but I'm also afraid if the same operator (<code>==</code>) is not enough.</p>\n\n<p>So, the questions are:</p>\n\n<ol>\n<li><p>How does Hibernate know if a property of an object is changed?</p></li>\n<li><p>Do you suggest to override the <code>hashCode()</code>/<code>equals()</code> methods for complicated objects? What if they contains cyclic references?</p>\n\n<p>And, also, </p></li>\n<li><p>Would <code>hashCode()</code>/<code>equals()</code> with only the <code>id</code> field be enough?</p></li>\n</ol>\n    ","a":"\n<p>Hibernate uses a strategy called <strong>inspection</strong>, which is basically this: when an object is loaded from the database a snapshot of it is kept in memory. When the session is flushed Hibernate compares the stored snapshot with the current state. If they differ the object is marked as dirty and a suitable SQL command is enqueued. If the object is still transient then it is always dirty.</p>\n\n<p>Source: book Hibernate in Action (appendix B: ORM implementation strategies)</p>\n\n<p><strong>It's important to notice however that Hibernate's dirty-checking is independent of the methods equals/hascode</strong>. Hibernate does not look at these methods at all (except when using java.util.Set's, but this is unrelated to dirty-checking, only to the Collections API) The state snapshot I mentioned earlier is something similar to an array of values. It would be a very bad decision to leave such a core aspect of the framework in the hands of developers (to be honest, developers should not care about dirty-checking). Needless to say that equals/hascode can be implemented in many ways according to your needs. I recommend you to read the cited book, there the author discuss equals/hascode implementation strategies. Very insightful reading.</p>\n    "},{"t":"How can i resolve java.lang.ClassNotFoundException: org.hibernate.util.DTDEntityResolver when using Spring 3.1 with Hibernate 4.0.1?","l":"http://stackoverflow.com/questions/9134436/how-can-i-resolve-java-lang-classnotfoundexception-org-hibernate-util-dtdentity","q":"\n\n<p>I recently upgraded to Hibernate 4.0.1.Final and am receiving the following error on context startup:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Caused by: java.lang.NoClassDefFoundError: org/hibernate/util/DTDEntityResolver\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:791)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n    at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2823)\n    at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1160)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1655)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1533)\n    at org.hibernate.cfg.Configuration.reset(Configuration.java:322)\n    at org.hibernate.cfg.Configuration.&lt;init&gt;(Configuration.java:261)\n    at org.hibernate.cfg.Configuration.&lt;init&gt;(Configuration.java:265)\n    at org.hibernate.ejb.Ejb3Configuration.&lt;clinit&gt;(Ejb3Configuration.java:150)\n    at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:71)\n    at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:257)\n    at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:310)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)\n    ... 65 more\nCaused by: java.lang.ClassNotFoundException: org.hibernate.util.DTDEntityResolver\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1688)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1533)\n</code></pre>\n\n<p>My configuration is as follows:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;!-- Holding Properties for hibernate --&gt;\n    &lt;context:property-placeholder location=\"classpath:hibernate.properties\"/&gt;\n\n    &lt;!-- Configure annotated beans --&gt;\n    &lt;context:annotation-config /&gt;\n    &lt;context:component-scan base-package=\"com.mypackage\" /&gt;\n\n    &lt;!-- Drives transactions using local JPA APIs --&gt;\n    &lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt;\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"\n        p:entityManagerFactory-ref=\"entityManagerFactory\"/&gt;\n\n    &lt;!-- Creates a EntityManagerFactory for use with the Hibernate JPA provider --&gt;\n    &lt;bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"\n        p:dataSource-ref=\"dataSource\"\n        p:packagesToScan=\"com.mypackage.entity\"\n        p:jpaVendorAdapter-ref=\"jpaAdapter\"/&gt;\n\n    &lt;bean id=\"jpaAdapter\" class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"\n                p:showSql=\"true\"\n                p:generateDdl=\"false\"\n                p:database=\"MYSQL\"\n                p:databasePlatform=\"org.hibernate.dialect.MySQL5InnoDBDialect\" /&gt;\n\n    &lt;!-- Deploys datasource--&gt;\n    &lt;bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"\n        p:driverClassName=\"com.mysql.jdbc.Driver\"\n        p:url=\"jdbc:mysql://localhost:${mysql.port}/?zeroDateTimeBehavior=convertToNull\"\n        p:username=\"bla\"\n        p:password=\"bla123\"/&gt;\n\n    &lt;bean class=\"org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor\" /&gt;\n\n    &lt;bean class=\"org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor\" /&gt;\n</code></pre>\n\n<p>Some of the dependencies are:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n        &lt;version&gt;${hibernate.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;\n        &lt;version&gt;3.5.6-Final&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n                &lt;artifactId&gt;ejb3-persistence&lt;/artifactId&gt;                    \n            &lt;/exclusion&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n                &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;                  \n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;\n        &lt;version&gt;${hibernate.version}&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;javax.transaction&lt;/groupId&gt;\n                &lt;artifactId&gt;jta&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;jboss&lt;/groupId&gt;\n                &lt;artifactId&gt;javassist&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n                &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n\n    &lt;properties&gt;\n        &lt;hibernate.version&gt;4.0.1.Final&lt;/hibernate.version&gt;\n    &lt;/properties&gt;\n</code></pre>\n\n<p>And spring version of: 3.1.0.RELEASE</p>\n\n<p>I am assuming that something is trying to read an xml file.  There are no hibernate xml configurations for hibernate other than the properties file. Persistence.xml does not exist in current setup.  Why or who is seeking a class that does not exist in hibernate 4.0.1?</p>\n\n<p>Any help would greatly be appreciated!</p>\n    ","a":"\n<p>Per the <a href=\"http://docs.jboss.org/hibernate/annotations/3.5/reference/en/html_single/#setup-requirements\">Hibernate annotations 3.5 documentation</a>:*</p>\n\n<blockquote>\n  <p>Hibernate 3.5 and onward contains Hibernate Annotations.</p>\n</blockquote>\n\n<p>You should remove the dependency on <code>hibernate-annotations</code>, and remove the <code>exclude</code>s from the <code>hibernate-entitymanager</code> dependency. Generally, you should not mix versions of dependent packages.</p>\n\n<p>* and JB Nizet's comment.</p>\n    "},{"t":"Hibernate: How to fix “identifier of an instance altered from X to Y”?","l":"http://stackoverflow.com/questions/4179166/hibernate-how-to-fix-identifier-of-an-instance-altered-from-x-to-y","q":"\n\n<pre><code>org.hibernate.HibernateException: identifier of an instance \nof org.cometd.hibernate.User altered from 12 to 3\n</code></pre>\n\n<p>in fact, my <code>user</code> table is really must dynamically change its value, my Java app is multithreaded.\nAny ideas how to fix it? </p>\n    ","a":"\n<p>Are you changing the primary key value of a User object somewhere? You shouldn't do that. Check that your mapping for the primary key is correct.</p>\n\n<p>What does your mapping XML file or mapping annotations look like?</p>\n    "},{"t":"Multiple persistence-unit tags in one persistence.xml","l":"http://stackoverflow.com/questions/8398393/multiple-persistence-unit-tags-in-one-persistence-xml","q":"\n\n<p>I'm working now with a JPA 2.0 project (in Eclipse Indigo). In my persistence.xml file I need to specify two &lt;persistence-unit&gt; tags, because I have two different database to work with. Doing this, I get the following warning:</p>\n\n<blockquote>\n  <p>Multiple persistence units defined - only the first persistence unit will be recognized</p>\n</blockquote>\n\n<p>Even more, if I create my entities and put it in my second &lt;persistence-unit&gt;, I get an error saying that my entity isn't declared in a persistence-unit:</p>\n\n<blockquote>\n  <p>Class \"my.package.MyClass\" is mapped, but is not included in any persistence unit</p>\n</blockquote>\n\n<p>So, the question is: is possible to declare (and use them as expected) many &lt;persistence-unit&gt; tags in persistence.xml file? If yes, what do I need to do for getting the accurate behavior?</p>\n\n<p>Thanks!</p>\n    ","a":"\n<p>JPA does not limit number of persistence units defined in persistence.xml. This warning just tells about limitation of tool in Eclipse IDE. This is told for example here <a href=\"http://www.eclipse.org/webtools/dali/gettingstarted.php\">http://www.eclipse.org/webtools/dali/gettingstarted.php</a> :</p>\n\n<blockquote>\n  <p>Currently Dali only supports one Persistence Unit and one Persistence\n  XML file per project. Other configurations can exist in a JPA project,\n  but the validation and defaults processing may not be correct when\n  multiple persistence units are used.</p>\n</blockquote>\n\n<p>I guess there is no known way to get this work in Eclipse IDE.</p>\n    "},{"t":"@UniqueConstraint and @Column(unique = true) in hibernate annotation","l":"http://stackoverflow.com/questions/15372654/uniqueconstraint-and-columnunique-true-in-hibernate-annotation","q":"\n\n<p>What is difference between <strong>@UniqueConstraint</strong> and <strong>@Column(unique = true)</strong>?</p>\n\n<p>For example:</p>\n\n<pre><code>@Table(\n   name = \"product_serial_group_mask\", \n   uniqueConstraints = {@UniqueConstraint(columnNames = {\"mask\", \"group\"})}\n)\n</code></pre>\n\n<p>And</p>\n\n<pre><code>@Column(unique = true)\n@ManyToOne(optional = false, fetch = FetchType.EAGER)\nprivate ProductSerialMask mask;\n\n@Column(unique = true)\n@ManyToOne(optional = false, fetch = FetchType.EAGER)\nprivate Group group;\n</code></pre>\n    ","a":"\n<p>As said before, <code>@Column(unique = true)</code> is a shortcut to <code>UniqueConstraint</code> when it is only a single field.</p>\n\n<p>From the example you gave, there is a huge difference between both.</p>\n\n<pre><code>@Column(unique = true)\n@ManyToOne(optional = false, fetch = FetchType.EAGER)\nprivate ProductSerialMask mask;\n\n@Column(unique = true)\n@ManyToOne(optional = false, fetch = FetchType.EAGER)\nprivate Group group;\n</code></pre>\n\n<p>This code implies that both <code>mask</code> and <code>group</code> have to be unique, but separately. That means that if, for example, you have a record with a <strong>mask.id = 1</strong> and tries to insert another record with <strong>mask.id = 1</strong>, you'll get an error, because that column should have unique values. The same aplies for group.</p>\n\n<p>On the other hand,</p>\n\n<pre><code>@Table(\n   name = \"product_serial_group_mask\", \n   uniqueConstraints = {@UniqueConstraint(columnNames = {\"mask\", \"group\"})}\n)\n</code></pre>\n\n<p>Implies that the values of mask + group combined should be unique. That means you can have, for example, a record with <strong>mask.id = 1</strong> and <strong>group.id = 1</strong>, and if you try to insert another record with <strong>mask.id = 1</strong> and <strong>group.id = 2</strong>, it'll be inserted successfully, whereas in the first case it wouldn't.</p>\n\n<p>If you'd like to have both mask and group to be unique separately and to that at class level, you'd have to write the code as following:</p>\n\n<pre><code>@Table(\n        name = \"product_serial_group_mask\",\n        uniqueConstraints = {\n                @UniqueConstraint(columnNames = \"mask\"),\n                @UniqueConstraint(columnNames = \"group\")\n        }\n)\n</code></pre>\n\n<p>This has the same effect as the first code block.</p>\n    "},{"t":"Hibernate validator: @Email accepts ask@stackoverflow as valid?","l":"http://stackoverflow.com/questions/4459474/hibernate-validator-email-accepts-askstackoverflow-as-valid","q":"\n\n<p>I'm using the <code>@Email</code> annotation to validate an e-mail address.\nThe issue I'm having is that it's accepting things like ask@stackoverflow as a valid e-mail address.\nI guess this is because they want to support intranet addresses, but I can't seem to find a flag so it does check for an extension.</p>\n\n<p>Do I really need to switch to <code>@Pattern</code> (and any recommendations for an e-mail pattern that's flexible) or am I missing something?</p>\n    ","a":"\n<p>Actually, <code>@Email</code> from Hibernate Validator <a href=\"https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/EmailValidator.java?source=cc\">uses regexp internally</a>. You can easily define your own constraint based on that regexp, modified as you need (note the <code>+</code> at the end of <code>DOMAIN</code>):</p>\n\n<pre><code>@Target({ElementType.FIELD, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = {})\n@Pattern(regexp = Constants.PATTERN, flags = Pattern.Flag.CASE_INSENSITIVE)\npublic @interface EmailWithTld {\n    String message() default \"Wrong email\";\n    Class&lt;?&gt;[] groups() default { };\n    Class&lt;? extends Payload&gt;[] payload() default { };\n}\n\ninterface Constants {\n    static final String ATOM = \"[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]\";\n    static final String DOMAIN = \"(\" + ATOM + \"+(\\\\.\" + ATOM + \"+)+\";\n    static final String IP_DOMAIN = \"\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\]\";\n\n    static final String PATTERN =\n            \"^\" + ATOM + \"+(\\\\.\" + ATOM + \"+)*@\"\n                    + DOMAIN\n                    + \"|\"\n                    + IP_DOMAIN\n                    + \")$\";\n}\n</code></pre>\n    "},{"t":"JPA OneToMany and ManyToOne Relationships","l":"http://stackoverflow.com/questions/13811844/jpa-onetomany-and-manytoone-relationships","q":"\n\n<p>I have three classes one of the name is User and this user have other classes instances. Like this;</p>\n\n<pre><code>public class User{\n    @OneToMany(fetch=FetchType.LAZY, cascade = CascadeType.ALL)\n    public List&lt;APost&gt; aPosts;\n\n    @OneToMany(fetch=FetchType.LAZY, cascade = CascadeType.ALL)\n    public List&lt;BPost&gt; bPosts;\n}\n\n\n\n\n   public class BPost extends Post {\n\n    @ManyToOne(fetch=FetchType.LAZY)    \n    public User user;\n }\n\n    public class APost extends Post {\n\n     @ManyToOne(fetch=FetchType.LAZY) \n     public User user;\n }\n</code></pre>\n\n<p>it's working like this but generates emty tables in db. Which have to contains foreign keys. When I tried to use mappedBy and JoinColumn annotains I got failed. How can I resolve this?</p>\n\n<p><strong>Extra information:</strong></p>\n\n<p>When I changed with;</p>\n\n<pre><code> @ManyToOne(fetch=FetchType.LAZY)\n @JoinColumn(name=\"id\")\n public User user;\n</code></pre>\n\n<p>and</p>\n\n<pre><code> @OneToMany(fetch=FetchType.LAZY, cascade = CascadeType.ALL, mappedBy=\"id\")\n public List&lt;APost&gt; aPosts;\n</code></pre>\n\n<p>I'm getting</p>\n\n<p>A JPA error occurred (Unable to build EntityManagerFactory): Repeated column in mapping for entity: models.post.APost column: id (should be mapped with insert=\"false\" update=\"false\")</p>\n\n<p><strong>Final Edit:</strong> Finally, I was totaly wrong about jpa annotaions. :( When i change</p>\n\n<pre><code>@OneToMany(fetch=FetchType.LAZY, cascade = CascadeType.ALL, mappedBy=\"id\")\n</code></pre>\n\n<p>to</p>\n\n<pre><code>@OneToMany(fetch=FetchType.LAZY, cascade = CascadeType.ALL, mappedBy=\"user\")\n</code></pre>\n\n<p>and</p>\n\n<pre><code>@ManyToOne(fetch=FetchType.LAZY)\n@JoinColumn(name=\"user_id\")\n</code></pre>\n\n<p>everthing works ok. :)</p>\n    ","a":"\n<p>I am not really sure about your question (the meaning of \"empty table\" etc, or how <code>mappedBy</code> and <code>JoinColumn</code> were not working).</p>\n\n<p>I think you were trying to do a bi-directional relationships.</p>\n\n<p>First, you need to decide which side \"owns\" the relationship.  Hibernate is going to setup the relationship base on that side.  For example, assume I make the <code>Post</code> side own the relationship (I am simplifying your example, just to keep things in point), the mapping will look like:</p>\n\n<p>(Wish the syntax is correct. I am writing them just by memory. However the idea should be fine)</p>\n\n<pre><code>public class User{\n    @OneToMany(fetch=FetchType.LAZY, cascade = CascadeType.ALL, mappedBy=\"user\")\n    private List&lt;Post&gt; posts;\n}\n\n\npublic class Post {\n    @ManyToOne(fetch=FetchType.LAZY)\n    @JoinColumn(name=\"user_id\")\n    private User user;\n}\n</code></pre>\n\n<p>By doing so, the table for <code>Post</code> will have a column <code>user_id</code> which store the relationship.  Hibernate is getting the relationship by the <code>user</code> in <code>Post</code> (Instead of <code>posts</code> in <code>User</code>.  You will notice the difference if you have <code>Post</code>'s <code>user</code> but missing <code>User</code>'s <code>posts</code>).</p>\n\n<p>You have mentioned <code>mappedBy</code> and <code>JoinColumn</code> is not working.  However, I believe this is in fact the correct way.  Please tell if this approach is not working for you, and give us a bit more info on the problem.  I believe the problem is due to something else.</p>\n\n<hr>\n\n<p>Edit:</p>\n\n<p>Just a bit extra information on the use of <code>mappedBy</code> as it is usually confusing at first. In <code>mappedBy</code>, we put the \"property name\" in the opposite side of the bidirectional relationship, not table column name.</p>\n    "},{"t":"Hibernate : Downside of merge() over update()","l":"http://stackoverflow.com/questions/2118257/hibernate-downside-of-merge-over-update","q":"\n\n<p>I'm having problems with a <code>NonUniqueObjectException</code> thrown by Hibernate.</p>\n\n<p>Reading the docs, and <a href=\"http://www.stevideter.com/2008/12/07/saveorupdate-versus-merge-in-hibernate/\" rel=\"nofollow noreferrer\">this</a> blog post, I replaced the call from <code>update()</code> to <code>merge()</code>, and it solved the problem.</p>\n\n<p>I believe I understand the reason for the exception, and why changing the method fixed the problem, in  terms of disconnected objects and session boundaries.</p>\n\n<p>My question is : given that <code>merge()</code> will always resolve to the session object, or retrieve it if it doesn't exist, is calling merge() generally a safer alternative than <code>update()</code>?</p>\n\n<p>What is the downside of using <code>merge()</code> over <code>update()</code>?</p>\n    ","a":"\n<blockquote>\n  <p>Is calling merge() generally a safer alternative than update() ?</p>\n</blockquote>\n\n<p>As a way to avoid NonUniqueObjectException, yes. I think it explains why JPA does not allow an update method.</p>\n\n<blockquote>\n  <p>What is the downside of using merge() over update() ?</p>\n</blockquote>\n\n<p>An unadvised user can think him or her has a fresh managed entity. Something like</p>\n\n<pre><code>// myEntity (passed as parameter does not become managed)\n// Only the one returned by the merge operation is a managed entity\nsession.merge(myEntity);\n\n// \"newValue\" is not commited because myEntity is not managed\nmyEntity.setMyProperty(\"newValue\");\n</code></pre>\n\n<p>And if your persistence context does not contain your entity, <strong>maybe you do not want select-before-updating</strong> default behavior. But it can be avoided</p>\n\n<ul>\n<li>Add a version (@Version) column. 0 or NULL version <strong>indicates that an instance is new</strong> and has to be inserted, not updated</li>\n<li>Use a Hibernate interceptor</li>\n<li>If you are sure you want to update instead of inserting, you can use the following approach</li>\n</ul>\n\n<p>...</p>\n\n<pre><code>public void updateMyEntity(MyEntity updateableMyEntity);\n\n    // load does not hit the database\n    MyEntity myEntity = (MyEntity) session.load(MyEntity.class, updateableMyEntity.getId());\n\n    BeanUtils.copyProperties(myEntity, updateableMyEntity);\n\n}\n</code></pre>\n\n<p>This way you can update your entity without merge or update method. Maybe you want to see this <a href=\"http://stackoverflow.com/questions/2088837/best-way-to-update-some-fields-of-a-detached-object-on-hibernate\">Best way to update some fields of a detached object on Hibernate ?</a> question</p>\n\n<p>regards,</p>\n    "},{"t":"How do you select a column using Hibernate?","l":"http://stackoverflow.com/questions/10652358/how-do-you-select-a-column-using-hibernate","q":"\n\n<p>I would like to select a single column instead of a whole object, using Hibernate. So far I have this:</p>\n\n<pre><code> List&lt;String&gt; firstname = null;\n\n firstname = getSession().createCriteria(People.class).list();\n</code></pre>\n\n<p>My problem is that the above code returns the whole People table as an object instead of just \"firstname\". I'm not sure how to specify to only return \"firstname\" instead of the whole object.</p>\n    ","a":"\n<p>You can set the Projection for this like:</p>\n\n<pre><code>.setProjection(Projections.property(\"firstname\"))\n</code></pre>\n\n<p>With this you can only get the firstname in return.</p>\n\n<p>I have found another link on stack with the same scenario. Hope this will also help <a href=\"http://stackoverflow.com/questions/58561/hibernate-criteria-how-to-use-criteria-to-return-only-one-element-of-an-object\">Hibernate criteria _ how to use criteria to return only one element of an object instead the entire object</a></p>\n    "},{"t":"Hibernate: Refresh, Evict, Replicate and Flush","l":"http://stackoverflow.com/questions/8137057/hibernate-refresh-evict-replicate-and-flush","q":"\n\n<p>I wish I knew what exactly does each item in this list, how it works, what the consequences and when is the correct time to use.</p>\n\n<ol>\n<li>Refresh</li>\n<li>Evict</li>\n<li>Replicate</li>\n<li>Flush</li>\n</ol>\n\n<p>I even wonder what each one does, but I'm not absolutely sure, so I'm asking for your help, cause I really want to understand it.</p>\n\n<p>I know it's a pretty generic question, but I think really useful to know about it all.</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>The <strong><a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/\">Hibernate Documentation</a></strong> gives good examples of this. Also this <a href=\"http://blog.astradele.com/2005/09/24/hibernate-sessionevict-and-explicit-saving/\">blog post</a> will give you some insight. I will add some line from there below.</p>\n\n<p>It is possible to re-load an object and all its collections at any time, using the <code>refresh()</code> method. This is useful when database triggers are used to initialize some of the properties of the object.</p>\n\n<pre><code>sess.save(cat);\nsess.flush(); //force the SQL INSERT\nsess.refresh(cat); //re-read the state (after the trigger executes)\n</code></pre>\n\n<p>see <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/objectstate.html#objectstate-loading\">here</a> for more examples.</p>\n\n<p>Whenever you pass an object to <code>save(), update() or saveOrUpdate()</code>, and whenever you retrieve an object using <code>load(), get(), list(), iterate() or scroll()</code>, that object is added to the internal cache of the Session.</p>\n\n<p>When <code>flush()</code> is subsequently called, the state of that object will be synchronized with the database. If you do not want this synchronization to occur, or if you are processing a huge number of objects and need to manage memory efficiently, the <code>evict()</code> method can be used to remove the object and its collections from the first-level cache.</p>\n\n<pre><code>ScrollableResult cats = sess.createQuery(\"from Cat as cat\").scroll(); //a huge result set\nwhile ( cats.next() ) {\n    Cat cat = (Cat) cats.get(0);\n    doSomethingWithACat(cat);\n    sess.evict(cat);     //  (if gives the compile time error then use it: sess.evict(cat.getClass());  \n}\n</code></pre>\n\n<p>Read the complete example from <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html#performance-sessioncache\">here</a>.</p>\n\n<p>Read about the session API <a href=\"http://docs.jboss.org/hibernate/core/3.5/api/org/hibernate/Session.html\">here</a>.</p>\n    "},{"t":"Whats the difference between @NotAudited and RelationTargetAuditMode.NOT_AUDITED in Hibernate EnVers?","l":"http://stackoverflow.com/questions/5661682/whats-the-difference-between-notaudited-and-relationtargetauditmode-not-audited","q":"\n\n<pre><code>@NotAudited\n@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)\n@OneToMany(mappedBy = \"booking\")\n@OrderBy(\"bookingOrder\")\nprivate List&lt;CustomerBooking&gt; customerBookingList = new LinkedList&lt;CustomerBooking&gt;();\n</code></pre>\n\n<p>Why use both? is it good to use both or would one suffice?</p>\n    ","a":"\n<p>Use NotAudited on fields when you don't want the value / relationship to be audited at all.  I believe you can use this on a field with or without a relationship such as OneToMany, ManyToMany, or just Column.   Use RelationTargetAuditMode.NOT_AUDITED on a relationship field if you want the value to be audited, but not the entity on the other side of the relationship.  For example you want the ID / key value audited, but not the related table.   </p>\n\n<p>You can also apply the RelationTargetAuditMode to the entire class, which I believe just says for all relationships in the class don't audit the other end.   This confused me as I was mistakenly using this annotation to mean don't audit the entity below, which is not what it means.  Just don't have an Audit annotation on an entity class at all if you don't want the entity audited.  On other audited entities that refer to the entity you'll have to either use NotAudited or RelationTargetAuditMode.NOT_AUDITED to the relationship field.</p>\n\n<p>The official documentation is not great about this topic (<a href=\"http://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/ch15.html\">http://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/ch15.html</a>) and doesn't even mention NotAudited at all.</p>\n\n<p>In my past projects I've had a need to audit a very specific set of tables and not others so I needed to use these annotations.  I have foreign key relationships to some of my non-audited entities from some audited entities.  I often use the RelationTargetAuditMode.NOT_AUDITED annotation so that at least I audit the foreign key value / ID, just not the entity on the other end of the relationship.   If you don't have this annotation you'll get a runtime exception where ENVERS tries to insert an audit record into an audit table for the non-audited entity and that table won't exist.  I use the NotAudited annotation for a few ManyToMany join table relationships that I just don't need to audit and there is nothing on the audited entity table itself to record (no foreign key ID / value).</p>\n\n<p>Oh yeah - the docs don't say what happens if you use both (not sure which one has priority), but I don't think using both simultaneously on a given field is intended.  Use one or the other.</p>\n    "},{"t":"Hibernate saveOrUpdate behavior","l":"http://stackoverflow.com/questions/6443672/hibernate-saveorupdate-behavior","q":"\n\n<p>Does anyone know how Hibernate knows whether to INSERT or to UPDATE a value in the database when <code>session.saveOrUpdate()</code> is called?</p>\n\n<p>So far, I have only determined that it is not dependent on the information in the cache, and that the existence of the entity in the database is determined by the primary key.</p>\n    ","a":"\n<p>When you use <code>.saveOrUpdate()</code> Hibernate will check if the object is transient (it has no identifier property) and if so it will make it persistent by generating it the identifier and assigning it to session. If the object has an identifier already it will perform <code>.update()</code>.</p>\n\n<p>From the <a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/objectstate.html#objectstate-makingpersistent\">documentation</a>:</p>\n\n<p>saveOrUpdate() does the following:</p>\n\n<ul>\n<li>if the object is already persistent\nin this session, do nothing</li>\n<li>if another object associated with the\nsession has the same identifier,\nthrow an exception</li>\n<li>if the object has no identifier\nproperty, save() it</li>\n<li>if the object's identifier has the\nvalue assigned to a newly\ninstantiated object, save() it</li>\n<li>if the object is versioned by a\n or , and the\nversion property value is the same\nvalue assigned to a newly\ninstantiated object, save() it\notherwise update() the object</li>\n</ul>\n    "},{"t":"How do I properly cascade save a one-to-one, bidirectional relationship on primary key in Hibernate 3.6","l":"http://stackoverflow.com/questions/4027623/how-do-i-properly-cascade-save-a-one-to-one-bidirectional-relationship-on-prima","q":"\n\n<p>I have an one-to-one, bidirectional entity relationship with shared keys. When I attempt to save the owner of the association I get a \"null id generated\" exception against the owned side of the relationship. I am utilizing hibernate-entitymanager and using spring for transaction management.</p>\n\n<p><strong>Owning Entity</strong></p>\n\n<pre><code>@Entity\n@Table(name = \"lead\")\npublic class Lead\n{\n    private Long leadId;\n\n    private LeadAffiliate leadAffiliate;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public Long getLeadId()\n    {\n        return leadId;\n    }\n\n    @OneToOne(cascade = CascadeType.ALL)\n    @PrimaryKeyJoinColumn\n    public LeadAffiliate getLeadAffiliate()\n    {\n        return leadAffiliate;\n    }\n}\n</code></pre>\n\n<p><strong>Owned Entity</strong></p>\n\n<pre><code>@Entity\n@Table(name = \"lead_affiliate\")\npublic class LeadAffiliate\n{\n    private Long leadId;\n\n    private Lead lead;\n\n    @Id\n    public Long getLeadId()\n    {\n        return leadId;\n    }\n\n    @MapsIdmappedBy = \"leadAffiliate\")\n    @OneToOne(cascade = CascadeType.All)\n    @PrimaryKeyJoinColumn\n    @JoinColumn(name = \"lead_id\")\n    public Lead getLead()\n    {\n        return lead;\n    }\n}\n</code></pre>\n\n<p>and the code below is being used to save the entity:</p>\n\n<pre><code>LeadAffiliate aff = new LeadAffiliate();\n\naff.setLead(lead);\nlead.setLeadAffiliate(aff);\n\nem.persist(lead);\n</code></pre>\n\n<p>This all works perfectly fine in hibernate 3.5.0-Final. When attempting to upgrade to 3.5.6-Final or 3.6.0.Final is when I start getting the \"null id generated for LeadAffiliate\" error:</p>\n\n<pre><code>javax.persistence.PersistenceException: org.hibernate.id.IdentifierGenerationException: null id generated for:class com.sellingsource.bizdev.entities.LeadAffiliate\n    at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1214)\n    at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1147)\n    at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1153)\n    at org.hibernate.ejb.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:678)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:365)\n    at $Proxy152.persist(Unknown Source)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:240)\n    at $Proxy120.persist(Unknown Source)\n    at com.sellingsource.common.dao.JpaGenericDao.create(JpaGenericDao.java:38)\n    ... 64 more\nCaused by: org.hibernate.id.IdentifierGenerationException: null id generated for:class com.sellingsource.bizdev.entities.LeadAffiliate\n    at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)\n    at org.hibernate.ejb.event.EJB3PersistEventListener.saveWithGeneratedId(EJB3PersistEventListener.java:69)\n    at org.hibernate.event.def.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:179)\n    at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:135)\n    at org.hibernate.impl.SessionImpl.firePersist(SessionImpl.java:799)\n    at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:791)\n    at org.hibernate.engine.EJB3CascadingAction$1.cascade(EJB3CascadingAction.java:48)\n    at org.hibernate.engine.Cascade.cascadeToOne(Cascade.java:392)\n    at org.hibernate.engine.Cascade.cascadeAssociation(Cascade.java:335)\n    at org.hibernate.engine.Cascade.cascadeProperty(Cascade.java:204)\n    at org.hibernate.engine.Cascade.cascade(Cascade.java:161)\n    at org.hibernate.event.def.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:450)\n    at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:282)\n    at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:203)\n    at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:129)\n    at org.hibernate.ejb.event.EJB3PersistEventListener.saveWithGeneratedId(EJB3PersistEventListener.java:69)\n    at org.hibernate.event.def.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:179)\n    at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:135)\n    at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:61)\n    at org.hibernate.impl.SessionImpl.firePersist(SessionImpl.java:808)\n    at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:782)\n    at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:786)\n    at org.hibernate.ejb.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:672)\n    ... 77 more\n</code></pre>\n\n<p>As an aside, I am not sure that the annotations on Lead Affiliate were quite right to begin with. They worked, but seemed kind of kludgey. So I have since changed them to:</p>\n\n<pre><code>@Entity\n@Table(name = \"lead_affiliate\")\npublic class LeadAffiliate\n{\n    private Long leadId;\n\n    private Lead lead;\n\n    @Id\n    @GenericGenerator(name = \"foreign\", strategy = \"foreign\", parameters = {\n                    @org.hibernate.annotations.Parameter(name = \"property\", value=\"lead\")\n    })\n    @GeneratedValue(generator = \"foreign\")\n    public Long getLeadId()\n    {\n        return leadId;\n    }\n\n    @OneToOne(mappedBy = \"leadAffiliate\")\n    @PrimaryKeyJoinColumn\n    public Lead getLead()\n    {\n        return lead;\n    }\n}\n</code></pre>\n\n<p>However, with these changes I get the same result. (Works in 3.5.0 but not 3.5.6 or 3.6.0)</p>\n\n<p>Is there a new way I need to be doing this or is this a bug? My concern is that my code is currently working because of a bug :/.</p>\n    ","a":"\n<p>Specification says that derived entity should be the owning side of the relationship:</p>\n\n<blockquote>\n  <p><b>2.4.1 Primary Keys Corresponding to Derived Identities</b></p>\n  \n  <p>The identity of an\n  entity may be derived from the\n  identity of another entity (the\n  \"parent\" entity) when the former\n  entity (the \"dependent\" entity) is the\n  owner of a many-to-one or one-to-one\n  relationship to the parent entity and\n  a foreign key maps the relationship\n  from dependent to parent.</p>\n</blockquote>\n\n<p>In your case <code>LeadAffiliate</code> is derived, so it should be the owner, when <code>Lead</code> should be marked as non-owning side by <code>mappedBy</code>. The following works in both 3.5.0 and 3.5.6:</p>\n\n<pre><code>public class Lead { \n    @Id @GeneratedValue\n    private Long leadId; \n\n    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"lead\")\n    private LeadAffiliate leadAffiliate; \n\n    ...\n}\n</code></pre>\n\n<p>.</p>\n\n<pre><code>public class LeadAffiliate {  \n    @Id\n    private Long leadId;  \n\n    @OneToOne @MapsId\n    private Lead lead; \n\n    ...\n}\n</code></pre>\n    "},{"t":"Join without association in HQL","l":"http://stackoverflow.com/questions/974085/join-without-association-in-hql","q":"\n\n<p>Lets say I have two tables(A, B) like:</p>\n\n<pre><code>A {id, a, c}\nB {id, b, c}\n</code></pre>\n\n<p>I have also their entities. I want to write an HQL so that the result set will be like (where A.c = B.c):</p>\n\n<pre><code>(a1, b1, c1)\n(a2, b2, c2)\n(a3, b3, c3)\n...\n</code></pre>\n\n<p>Since <code>on</code> clauses are not supported by hibernate I am stuck and I don't know how to write the query.</p>\n    ","a":"\n<p>You have to use the cross join notation:</p>\n\n<pre><code>from A as table_a , B as table_b\nwhere table_a.c = table_b.c\n</code></pre>\n\n<p>Of course there is no way to implement outer joins in this manner, so you might have some trouble if that's your case.</p>\n\n<p>For the analogous case with criteria refer to: <a href=\"http://stackoverflow.com/questions/720502/hibernate-criteria-joining-table-without-a-mapped-association\">hibernate-criteria-joining-table-without-a-mapped-association</a></p>\n    "},{"t":"Entities equals(), hashCode() and toString(). How to correctly implement them?","l":"http://stackoverflow.com/questions/2446590/entities-equals-hashcode-and-tostring-how-to-correctly-implement-them","q":"\n\n<p>I'm implementing <code>equals()</code>, <code>hashCode()</code> and <code>toString()</code> of my entities using all the available fields in the bean.</p>\n\n<p>I'm getting some Lazy init Exception on the frontend when I try to compare the equality or when I print the obj state. That's because some list in the entity can be lazy initialized.</p>\n\n<p>I'm wondering what's the correct way to for implementing <code>equals()</code> and <code>toString()</code> on an entity object.</p>\n    ","a":"\n<p><code>equals()</code> and <code>hashCode()</code> should be implemented using a <a href=\"https://www.hibernate.org/109.html\" rel=\"nofollow noreferrer\">business key</a> - i.e. a set of properties that uniquely identify the object, but are not its auto-generated ID.</p>\n\n<p>in <code>toString()</code> you can put whatever information is interesting - for example all fields.</p>\n\n<p>Use your IDE (Eclipse, NetBeans, IntelliJ) to generate all these for you.</p>\n\n<p>In order to avoid <code>LazyInitializationException</code>, no matter whether in <code>equals()</code> or in your view (jsp), you can use <a href=\"https://developer.jboss.org/wiki/OpenSessionInView\" rel=\"nofollow noreferrer\"><code>OpenSessionInView</code></a>.</p>\n    "},{"t":"Difference between JPA Entity and Hibernate Entity","l":"http://stackoverflow.com/questions/955515/difference-between-jpa-entity-and-hibernate-entity","q":"\n\n<p>When I annotate a class with @Entity and try to resolve the dependencies, I get to choose the package between two different packages, javax.persistence.Entity and org.hibernate.annotations.Entity</p>\n\n<p>The javax package is JPA's entity-annotation, but why is there a hibernate entity-annotation and difference does it have with JPA's annotation? Is it just an extension to allow more attributes to be defined?</p>\n    ","a":"\n<p><code>org.hibernate.annotations.Entity</code> has some extra attributes that <code>javax.persistence.Entity</code> has not standarized. The extra features will only work if using hibernate's <code>AnnotationConfiguration</code> directly or if hibernate is the JPA provider.</p>\n\n<p><strike>\nfrom <a href=\"https://www.hibernate.org/329.html\" rel=\"nofollow noreferrer\">the FAQ</a>: \n<strong>edit:</strong> new link <a href=\"https://community.jboss.org/wiki/HibernateFAQ-HibernateAnnotationsFAQ#I_use_orghibernateannotationsEntity_and_get_an_Unknown_entity_exception\" rel=\"nofollow noreferrer\">the specific question</a>:\n</strike>\n<strong>edit:</strong> new link <a href=\"https://developer.jboss.org/wiki/HibernateFAQ-HibernateAnnotationsFAQ#jive_content_id_I_use_orghibernateannotationsEntity_and_get_an_Unknown_entity_exception\" rel=\"nofollow noreferrer\">the answer</a>:</p>\n\n<blockquote>\n  <p><strong>I use @org.hibernate.annotations.Entity and get an Unknown entity exception</strong></p>\n  \n  <p>Always import @javax.persistence.Entity</p>\n  \n  <p>@org.hibernate.annotations.Entity completes @javax.persistence.Entity but is not a replacement</p>\n</blockquote>\n\n<p>For instance, there is an attribute called <code>optimisticLock</code>, which tells hibernate whether to use the standard <em>version column</em> or to compare all columns when updating. This behavior is not in the JPA spec, so in order to configure it, you must use hibernate specific extension found in their own annotation.</p>\n\n<p>Like this:</p>\n\n<pre><code>@Entity\n@org.hibernate.annotations.Entity(optimisticLock=OptimisticLockType.ALL)\npublic class MyEntity implements Serializable {\n...\n}\n</code></pre>\n    "},{"t":"JPA cascade persist and references to detached entities throws PersistentObjectException. Why?","l":"http://stackoverflow.com/questions/4294671/jpa-cascade-persist-and-references-to-detached-entities-throws-persistentobjecte","q":"\n\n<p>I have an entity Foo that references an entity Bar:</p>\n\n<pre><code>@Entity\npublic class Foo {\n\n    @OneToOne(cascade = {PERSIST, MERGE, REFRESH}, fetch = EAGER)\n    public Bar getBar() {\n        return bar;\n    }\n}\n</code></pre>\n\n<p>When I persist a new Foo, it can get a reference to either a new Bar or an existing Bar. When it gets an existing Bar, which happens to be detached, my JPA provider (Hibernate) throws the following exception:</p>\n\n<pre><code>Caused by: org.hibernate.PersistentObjectException: detached entity passed to persist: com.example.Bar\n at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:102)\n at org.hibernate.impl.SessionImpl.firePersist(SessionImpl.java:636)\n at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:628)\n at org.hibernate.engine.EJB3CascadingAction$1.cascade(EJB3CascadingAction.java:28)\n at org.hibernate.engine.Cascade.cascadeToOne(Cascade.java:291)\n at org.hibernate.engine.Cascade.cascadeAssociation(Cascade.java:239)\n at org.hibernate.engine.Cascade.cascadeProperty(Cascade.java:192)\n at org.hibernate.engine.Cascade.cascade(Cascade.java:153)\n at org.hibernate.event.def.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:454)\n at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:288)\n at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:204)\n at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:130)\n at org.hibernate.ejb.event.EJB3PersistEventListener.saveWithGeneratedId(EJB3PersistEventListener.java:49)\n at org.hibernate.event.def.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:154)\n at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:110)\n at org.hibernate.event.def.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:61)\n at org.hibernate.impl.SessionImpl.firePersist(SessionImpl.java:645)\n at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:619)\n at org.hibernate.impl.SessionImpl.persist(SessionImpl.java:623)\n at org.hibernate.ejb.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:220)\n ... 112 more\n</code></pre>\n\n<p>When I either make sure the reference to Bar is managed (attached) or when I omit the cascade PERSIST in the relation, all works well.</p>\n\n<p>Neither solution however is 100% satisfactory. If I remove the cascade persist, I obviously can't persist a Foo with a reference to a new Bar anymore. Making the reference to Bar managed necessitates code like this prior to persisting:</p>\n\n<pre><code>if (foo.getBar().getID() != null &amp;&amp; !entityManager.contains(foo.getBar())) {\n    foo.setBar(entityManager.merge(foo.getUBar()));\n}\nentityManager.persist(foo);\n</code></pre>\n\n<p>For a single Bar this might not seem like a big deal, but if I have to take all properties into account like this I'll end up with pretty horrible code that seems to defeat the reason of using ORM in the first place. I might as well well persist my object graph manually using JDBC again.</p>\n\n<p>When given an existing Bar reference the only thing JPA has to do is take its ID and insert that in a column of the table that holds Foo. It does exactly this when Bar is attached, but throws the exception when Bar is detached.</p>\n\n<p>My question is; why does it need Bar to be attached? Surely its ID won't change when the Bar instance transitions from detached to attached state, and that ID seems to be the only thing needed here.</p>\n\n<p>Is this perhaps a bug in Hibernate or am I missing something?</p>\n    ","a":"\n<p>You can use <code>merge()</code> instead of <code>persist()</code> in this case:</p>\n\n<pre><code>foo = entityManager.merge(foo); \n</code></pre>\n\n<p>When applied to the new instance, <code>merge()</code> makes it persistent (actually - returns the persistent instance with the same state), and merges cascaded references, as you try to do manually.</p>\n    "},{"t":"org.hibernate.MappingException: Could not determine type for: java.util.List, at table: College, for columns: [org.hibernate.mapping.Column(students)]","l":"http://stackoverflow.com/questions/3774198/org-hibernate-mappingexception-could-not-determine-type-for-java-util-list-at","q":"\n\n<p>Now, i am learning hibernate, and started to using it in my project. It is a CRUD application.\nI used hibernate for all the crud operations. It works for all of them. But, the One-To-Many &amp; Many-To-One, i am tired of trying it. Finally it gives me the below error.</p>\n\n<p><code>org.hibernate.MappingException: Could not determine type for: java.util.List, at table: College, for columns: [org.hibernate.mapping.Column(students)]</code></p>\n\n<p>Then again i went through this <a href=\"http://www.youtube.com/watch?v=PIg6F9TayOk\" rel=\"nofollow noreferrer\">video tutorial</a>. It is very simple to me, in the beginning. But, i cant make it work. It also now, says</p>\n\n<p><code>org.hibernate.MappingException: Could not determine type for: java.util.List, at table: College, for columns: [org.hibernate.mapping.Column(students)]</code></p>\n\n<p>I have ran some searches in the internet, there someone telling <a href=\"http://forums.sun.com/thread.jspa?threadID=5137725\" rel=\"nofollow noreferrer\">its a bug in Hibernate</a>, and some says, by adding <a href=\"http://forum.springsource.org/showthread.php?t=81888\" rel=\"nofollow noreferrer\">@GenereatedValue</a> this error ll be cleared. But, nothings works for me,</p>\n\n<p>I hope i ll get some fix!!</p>\n\n<p>Thanks! </p>\n\n<p>Here my Code:</p>\n\n<p><strong>College.java</strong></p>\n\n<pre><code>@Entity\npublic class College {\n@Id\n@GeneratedValue(strategy=GenerationType.AUTO)\nprivate int collegeId;\nprivate String collegeName;\n\n\nprivate List&lt;Student&gt; students;\n\n@OneToMany(targetEntity=Student.class, mappedBy=\"college\", fetch=FetchType.EAGER)\npublic List&lt;Student&gt; getStudents() {\n    return students;\n}\npublic void setStudents(List&lt;Student&gt; students) {\n    this.students = students;\n}//Other gettters &amp; setters omitted\n</code></pre>\n\n<p><strong>Student.java</strong></p>\n\n<pre><code>@Entity\npublic class Student {\n\n\n@Id\n@GeneratedValue(strategy=GenerationType.AUTO)\nprivate int studentId;\nprivate String studentName;\n\n\nprivate College college;\n\n@ManyToOne\n@JoinColumn(name=\"collegeId\")\npublic College getCollege() {\n    return college;\n}\npublic void setCollege(College college) {\n    this.college = college;\n}//Other gettters &amp; setters omitted\n</code></pre>\n\n<p><strong>Main.java:</strong></p>\n\n<pre><code>public class Main {\n\nprivate static org.hibernate.SessionFactory sessionFactory;\n\n  public static SessionFactory getSessionFactory() {\n    if (sessionFactory == null) {\n      initSessionFactory();\n    }\n    return sessionFactory;\n  }\n\n  private static synchronized void initSessionFactory() {\n    sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();\n\n  }\n\n  public static Session getSession() {\n    return getSessionFactory().openSession();\n  }\n\n  public static void main (String[] args) {\n                Session session = getSession();\n        Transaction transaction = session.beginTransaction();\n        College college = new College();\n        college.setCollegeName(\"Dr.MCET\");\n\n        Student student1 = new Student();\n        student1.setStudentName(\"Peter\");\n\n        Student student2 = new Student();\n        student2.setStudentName(\"John\");\n\n        student1.setCollege(college);\n        student2.setCollege(college);\n\n\n\n        session.save(student1);\n        session.save(student2);\n        transaction.commit();\n  }\n\n\n}\n</code></pre>\n\n<p><strong>Console:</strong></p>\n\n<pre><code> Exception in thread \"main\" org.hibernate.MappingException: Could not determine type  for: java.util.List, at table: College, for columns:  [org.hibernate.mapping.Column(students)]\nat org.hibernate.mapping.SimpleValue.getType(SimpleValue.java:306)\nat org.hibernate.mapping.SimpleValue.isValid(SimpleValue.java:290)\nat org.hibernate.mapping.Property.isValid(Property.java:217)\nat org.hibernate.mapping.PersistentClass.validate(PersistentClass.java:463)\nat org.hibernate.mapping.RootClass.validate(RootClass.java:235)\nat org.hibernate.cfg.Configuration.validate(Configuration.java:1330)\nat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1833)\nat test.hibernate.Main.initSessionFactory(Main.java:22)\nat test.hibernate.Main.getSessionFactory(Main.java:16)\nat test.hibernate.Main.getSession(Main.java:27)\nat test.hibernate.Main.main(Main.java:43)\n</code></pre>\n\n<p><strong>The XML:</strong></p>\n\n<pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n&lt;!DOCTYPE hibernate-configuration PUBLIC\n\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n\"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd\"&gt;\n&lt;hibernate-configuration&gt;\n&lt;session-factory&gt;\n    &lt;!-- Database connection settings --&gt;\n    &lt;property name=\"connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n    &lt;property name=\"connection.url\"&gt;jdbc:mysql://localhost:3306/dummy&lt;/property&gt;\n    &lt;property name=\"connection.username\"&gt;root&lt;/property&gt;\n    &lt;property name=\"connection.password\"&gt;1234&lt;/property&gt;\n    &lt;!-- JDBC connection pool (use the built-in) --&gt;\n    &lt;property name=\"connection.pool_size\"&gt;1&lt;/property&gt;\n    &lt;!-- SQL dialect --&gt;\n    &lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n    &lt;!-- Enable Hibernate's automatic session context management --&gt;\n    &lt;property name=\"current_session_context_class\"&gt;thread&lt;/property&gt;\n    &lt;!-- Disable the second-level cache --&gt;\n    &lt;property name=\"cache.provider_class\"&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt;\n    &lt;!-- Echo all executed SQL to stdout --&gt;\n    &lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n    &lt;!-- Drop and re-create the database schema on startup --&gt;\n    &lt;property name=\"hbm2ddl.auto\"&gt;update&lt;/property&gt;\n\n    &lt;mapping class=\"test.hibernate.Student\" /&gt;\n    &lt;mapping class=\"test.hibernate.College\" /&gt;\n&lt;/session-factory&gt;\n</code></pre>\n\n<p></p>\n    ","a":"\n<p>You are using <strong>field access strategy</strong> (determined by @Id annotation). Put any JPA related annotation right above each field instead of getter property</p>\n\n<pre><code>@OneToMany(targetEntity=Student.class, mappedBy=\"college\", fetch=FetchType.EAGER)\nprivate List&lt;Student&gt; students;\n</code></pre>\n    "},{"t":"updating boolean value in spring data jpa using @Query, with hibernate","l":"http://stackoverflow.com/questions/10220262/updating-boolean-value-in-spring-data-jpa-using-query-with-hibernate","q":"\n\n<p>I have spring-data and hibernate configured and running. I can save records using spring-data but for some reason I am not able to run query that will update all Boolean fields in a table.</p>\n\n<p>I tried this:</p>\n\n<pre><code>@Query(\"update Content v set v.published = false where v.division = :division and v.section = :section\")\nvoid unPublishContent(@Param(\"division\") String division, \n                         @Param(\"section\") String section);\n</code></pre>\n\n<p>I also tried this:</p>\n\n<pre><code> @Query(\"update Content v set v.published = 0 where v.division = :division and v.section = :section\")\nvoid unPublishContent(@Param(\"division\") String division, \n                         @Param(\"section\") String section);\n</code></pre>\n\n<p>Parameters division and section are coming true but no change on the table.</p>\n\n<p>p.s. I am also using mysql database.</p>\n    ","a":"\n<p>I'm using Spring 3.1 and Spring JPA Data. I was having a similar problem. I was constantly getting an error while trying to update multiple records in 1 query.</p>\n\n<p>So, I had something like this.</p>\n\n<pre><code>@Query(\"UPDATE User u SET u.state = ?1 WHERE u.server.id = ?2\")\npublic void updateAllUsers(long state, long serverid);\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>org.hibernate.hql.QueryExecutionRequestException: Not supported for DML operations\n</code></pre>\n\n<p>So, after googling for a while, I found out that you had to add @Modifying.</p>\n\n<pre><code>@Modifying  \n@Query(\"UPDATE User u SET u.state = ?1 WHERE u.server.id = ?2\")\npublic void updateAllUsers(long state, long serverid);\n</code></pre>\n\n<p>But then I was getting the following error:</p>\n\n<pre><code>...    \nnested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Executing an update/delete query; \nnested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query\n...\n</code></pre>\n\n<p>So, I figured my problem was now a transaction problem and I went back to google to research it and found out that you have to add @Transactional now. It appears that @Modifying also requires @Transactional.</p>\n\n<pre><code>@Modifying  \n@Transactional\n@Query(\"UPDATE User u SET u.state = ?1 WHERE u.server.id = ?2\")\npublic void updateAllUsers(long state, long serverid);\n</code></pre>\n\n<p>but then I got the following error:</p>\n\n<pre><code>No value for key [org.apache.commons.dbcp.BasicDataSource (...) ] bound to thread\n</code></pre>\n\n<p>Again I googled for a while and came to the conclusion that my configuration was wrong and it turned out to be true. I was missing some xml configs.</p>\n\n<pre><code>&lt;beans:bean class=\"org.springframework.orm.jpa.JpaTransactionManager\" id=\"transactionManager\"&gt;\n    &lt;beans:property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/&gt;\n&lt;/beans:bean&gt;\n\n&lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt;\n</code></pre>\n\n<p>It was long journey but I finally got it working. I hope this will help someone, trying to \"pay it forward\" as many others have helped me with their wonderful blogs, answers and comments.</p>\n    "},{"t":"Hibernate CollectionOfElements EAGER fetch duplicates elements","l":"http://stackoverflow.com/questions/1093153/hibernate-collectionofelements-eager-fetch-duplicates-elements","q":"\n\n<p>I have a class called SynonymMapping which has a collection of values mapped as a CollectionOfElements</p>\n\n<pre><code>@Entity(name = \"synonymmapping\")\npublic class SynonymMapping {\n\n    @Id private String keyId;\n\n    //@CollectionOfElements(fetch = FetchType.EAGER)\n    @CollectionOfElements\n    @JoinTable(name=\"synonymmappingvalues\", joinColumns={@JoinColumn(name=\"keyId\")})\n    @Column(name=\"value\", nullable=false)\n    @Sort(type=SortType.NATURAL)\n    private SortedSet&lt;String&gt; values;\n\n    public SynonymMapping() {\n        values = new TreeSet&lt;String&gt;();\n    }\n\n    public SynonymMapping(String key, SortedSet&lt;String&gt; values) {\n        this();\n        this.keyId = key;\n        this.values = values;\n    }\n\n    public String getKeyId() {\n        return keyId;\n    }\n\n    public Set&lt;String&gt; getValues() {\n        return values;\n    }\n}\n</code></pre>\n\n<p>I have a test where I store two SynonymMapping objects to the database and then ask the database to return all saved SynonymMapping objects, expecting to receive the two objects I stored.</p>\n\n<p>When I change the mapping of values to be eager (as shown in in the code by the commented out line) and run the test again, I receive four matches. </p>\n\n<p>I have cleared out the database between runs and I can duplicate this problem swapping between eager and lazy.</p>\n\n<p>I think it has to do with the joins that hibernate creates underneath but I can't find a definite answer online.</p>\n\n<p>Can anyone tell me why an eager fetch is duplicating the objects?</p>\n\n<p>Thanks.</p>\n    ","a":"\n<p>It's generally not a good idea to enforce eager fetching in the mapping - it's better to specify eager joins in appropriate queries (unless you're 100% sure that under any and  all circumstances your object won't make sense / be valid without that collection being populated).    </p>\n\n<p>The reason you're getting duplicates is because Hibernate internally joins your root and collection tables. Note that they really are duplicates, e.g. for 2 SynonymMappings with 3 collection elements each you would get 6 results (2x3), 3 copies of each SynonymMapping entity. So the easiest workaround is to wrap results in a Set thereby ensuring they're unique.</p>\n    "},{"t":"What should I learn first, Spring or Hibernate? [closed]","l":"http://stackoverflow.com/questions/722121/what-should-i-learn-first-spring-or-hibernate","q":"\n\n<p>I've just started learning Struts and I'm trying to be marketable for a good job as a Java programmer. My next decision would be choosing which to learn next, Spring or Hibernate?</p>\n\n<p>Also do you guys have any suggestions or tips for me to be good? Thanks in advance!</p>\n    ","a":"\n<p>I think you learn Spring, basics of RDBMS and then go for Hibernate, which will be easy for you to learn.. </p>\n    "},{"t":"Hibernate Criteria Query to get specific columns","l":"http://stackoverflow.com/questions/11626761/hibernate-criteria-query-to-get-specific-columns","q":"\n\n<p>I am using Criteria Query in my code. It always fires <code>select * from ...</code></p>\n\n<p>Instead I want to neglect one column(field) from my query as that field have large number of data stored in bytes. And that causing performance issue.</p>\n\n<p>Can any one give an idea for that?</p>\n\n<hr>\n\n<p><strong>Some Update</strong></p>\n\n<p>I added a projection in my query and it created a query like...</p>\n\n<pre><code>select\n    this_.TEMPLATE_ID as y0_,\n    this_.TEMPLATE_NAME as y1_,\n    this_.CREATE_DATE as y2_,\n    this_.UPDATE_DATE as y3_,\n    this_.STATUS_CODE as y4_,\n    this_.USER_ID as y5_,\n    this_.UPDATED_BY as y6_,\n    this_.CATEGORY_ID as y7_,\n    this_.PRACTICE_ID as y8_ \nfrom\n    templates this_ \ninner join\n    user user1_ \n        on this_.USER_ID=user1_.USER_ID \ninner join\n    template_categories category2_ \n        on this_.CATEGORY_ID=category2_.CATEGORY_ID \nwhere\n    y4_=? \n    and y8_=? \n    and y5_ in (\n        ?, ?\n    ) \norder by\n    y1_ asc limit ?\n</code></pre>\n\n<p>And now issue is like.. <code>Unknown column 'y4_' in 'where clause'</code>\nand same error for y8_ , y5_ means for all where close it gave an error.</p>\n\n<p>I modified it to Query like ...</p>\n\n<pre><code>select\n    this_.TEMPLATE_ID as y0_,\n    this_.TEMPLATE_NAME as y1_,\n    this_.CREATE_DATE as y2_,\n    this_.UPDATE_DATE as y3_,\n    this_.STATUS_CODE as y4_,\n    this_.USER_ID as y5_,\n    this_.UPDATED_BY as y6_,\n    this_.CATEGORY_ID as y7_,\n    this_.PRACTICE_ID as y8_ \nfrom\n    templates this_ \ninner join\n    user user1_ \n        on this_.USER_ID=user1_.USER_ID \ninner join\n    template_categories category2_ \n        on this_.CATEGORY_ID=category2_.CATEGORY_ID \nwhere\n    this_.STATUS_CODE=1\n    and this_.PRACTICE_ID=1 \n    and this_.USER_ID in (\n        1, 2\n    ) \norder by\n    y1_ asc limit ?\n</code></pre>\n\n<p>and it worked. But I don't know how to modify it in HQL?</p>\n    ","a":"\n<p>Use <a href=\"http://docs.jboss.org/hibernate/core/3.6/javadocs/org/hibernate/criterion/Projections.html\">Projections</a> to specify which columns you would like to return.</p>\n\n<p><strong>Example</strong></p>\n\n<p><em>SQL Query</em>   </p>\n\n<pre><code>SELECT user.id, user.name FROM user;\n</code></pre>\n\n<p><em>Hibernate Alternative</em></p>\n\n<pre><code>Criteria cr = session.createCriteria(User.class)\n    .setProjection(Projections.projectionList()\n      .add(Projections.property(\"id\"), \"id\")\n      .add(Projections.property(\"Name\"), \"Name\"))\n    .setResultTransformer(Transformers.aliasToBean(User.class));\n\n  List&lt;User&gt; list = cr.list();\n</code></pre>\n    "},{"t":"What does Hibernate map a boolean datatype to when using an Oracle database by default?","l":"http://stackoverflow.com/questions/1710198/what-does-hibernate-map-a-boolean-datatype-to-when-using-an-oracle-database-by-d","q":"\n\n<p>By default if I create a field in an entity like:</p>\n\n<pre><code>@NotNull\nboolean myBoolean;\n</code></pre>\n\n<p>And I let Hibernate auto-create my tables. What Oracle data type will this map to?</p>\n    ","a":"\n<p>Simply Number(1)</p>\n\n<p>If you want, use SchemaExport to generate a script to your target database. Something like</p>\n\n<pre><code>AnnotationConfiguration configuration = new AnnotationConfiguration();\n\nconfiguration\n    .addAnnotatedClass(&lt;TYPE_YOUR_CLASS&gt;.class)\n    .setProperty(Environment.USER, &lt;TYPE_YOUR_USER&gt;)\n    .setProperty(Environment.PASS, &lt;TYPE_YOUR_PASSWORD&gt;)\n    .setProperty(Environment.URL, &lt;TYPE_YOUR_URL&gt;)\n    .setProperty(Environment.DIALECT, &lt;TYPE_YOUR_DIALECT&gt;)\n    .setProperty(Environment.DRIVER, &lt;TYPE_YOUR_DRIVER&gt;);\n\nSchemaExport schema = new SchemaExport(configuration);\nschema.setOutputFile(\"schema.sql\");\n\nschema.create(&lt;DO_YOU_WANT_TO_PRINT_TO_THE_CONSOLE&gt;, &lt;DO_YOU_WANT_TO_EXPORT_THE_SCRIPT_TO_THE_DATABASE&gt;);\n</code></pre>\n    "},{"t":"Default fetch type for one-to-one, many-to-one and one-to-many in Hibernate","l":"http://stackoverflow.com/questions/26601032/default-fetch-type-for-one-to-one-many-to-one-and-one-to-many-in-hibernate","q":"\n\n<p>What is the default fetch type in hibernate mappings?</p>\n\n<p>What I got to know after exploring is:</p>\n\n<ul>\n<li>for one-to-one it is <strong>eager</strong>.</li>\n<li>for one-to-many it is <strong>lazy</strong>.</li>\n</ul>\n\n<p>But after testing it in Eclipse, it was eager for all.</p>\n\n<p>Does it depend on whether I am using JPA or Hibernate?</p>\n    ","a":"\n<p>Yes it depend on what you are using JPA or Hibernate</p>\n\n<p>From the JPA 2.0 spec, the defaults are like so:</p>\n\n<pre><code>OneToMany: LAZY\nManyToOne: EAGER\nManyToMany: LAZY\nOneToOne: EAGER\n</code></pre>\n\n<p>And in hibernate, all is Lazy</p>\n    "},{"t":"Which version of hibernate support jpa 2.1?","l":"http://stackoverflow.com/questions/14558931/which-version-of-hibernate-support-jpa-2-1","q":"\n\n<p>Currently I am using <code>JPA 2.0</code> with <code>hibernate 3.6</code> . I tried to search but couldn't find, can anyone list out <code>JPA 2.1</code> is supported by which versions of hibernate? </p>\n    ","a":"\n<p>According to <a href=\"https://hibernate.onjira.com/browse/HHH?selectedTab=com.atlassian.jira.plugin.system.project:versions-panel&amp;subset=-1\" rel=\"nofollow\">Hibernate's versions list</a>, JPA 2.1 is going to be supported by version 4.3 or by 5.0</p>\n    "},{"t":"program using hibernate does not terminate","l":"http://stackoverflow.com/questions/21645516/program-using-hibernate-does-not-terminate","q":"\n\n<p>I created a program using Hibernate.</p>\n\n<p>The program reaches the main function end, nevertheless the program is running.</p>\n\n<p>I wonder if it happens when <code>SessionFactory</code> is configured using Hibernate Version 4.x.</p>\n\n<p>Is the way to configure wrong?</p>\n\n<hr>\n\n<p><strong>manual1_1_first_hibernate_apps.java</strong></p>\n\n<pre><code>public static void main(String[] args) {\n\n    args[0] =\"list\";\n    if (args.length &lt;= 0) {\n        System.err.println(\"argement was not given\");\n        return;\n    }\n\n    manual1_1_first_hibernate_apps mgr = new manual1_1_first_hibernate_apps();\n\n    if (args[0].equals(\"store\")) {\n        mgr.createAndStoreEvent(\"My Event\", new Date());\n    }\n    else if (args[0].equals(\"list\")) {\n        mgr.&lt;Event&gt;listEvents().stream()\n            .map(e -&gt; \"Event: \" + e.getTitle() + \" Time: \" + e.getDate())\n            .forEach(System.out::println);\n    }\n    Util.getSessionFactory().close();\n}\n\nprivate &lt;T&gt; List&lt;T&gt; listEvents() {\n    Session session = Util.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List&lt;T&gt; events = Util.autoCast(session.createQuery(\"from Event\").list());\n    session.getTransaction().commit();\n    return events;\n}\n</code></pre>\n\n<p><strong>Util.java</strong></p>\n\n<pre><code>private static final SessionFactory sessionFactory;\n\n/**\n * build a SessionFactory\n */\nstatic {\n    try {\n        // Create the SessionFactory from hibernate.cfg.xml\n\n        // hibernate version lower than 4.x are as follows\n        // # it successful termination. but buildSessionFactory method is deprecated.\n        // sessionFactory = new Configuration().configure().buildSessionFactory();\n\n        // version 4.3 and later\n        // # it does not terminate. I manually terminated.\n        Configuration configuration = new Configuration().configure();\n        StandardServiceRegistry serviceRegistry = \n                new StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();\n        sessionFactory = configuration.buildSessionFactory(serviceRegistry);\n    }\n    catch (Throwable ex) {\n        // Make sure you log the exception, as it might be swallowed\n        System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n        throw new ExceptionInInitializerError(ex);\n    }\n}\n\n/**\n * @return built SessionFactory\n */\npublic static SessionFactory getSessionFactory() {\n    return sessionFactory;\n}\n</code></pre>\n\n<hr>\n\n<p>The following console log snippets when program terminate and use buildSessionFactory method.</p>\n\n<pre><code>2 08, 2014 8:42:25 org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl stop\nINFO: HHH000030: Cleaning up connection pool [jdbc:derby:D:\\Java\\jdk1.7.0_03(x86)\\db\\bin\\testdb]\n</code></pre>\n\n<p>but if do not use deprecated buildSessionFactory method and terminated(program is running), the above two lines do not appear.</p>\n\n<p>ENVIRONMENT:</p>\n\n<pre> Hibernate 4.3.1\n DERBY\n JRE 1.8\n IntelliJ IDEA 13\n</pre>\n    ","a":"\n<p>maybe, I solved this problem.</p>\n\n<p>I saw the thread dump after Util.getSessionFactory().close() called, a thread named  \"pool-2-thread-1\" state was TIMED_WAITING (parking).</p>\n\n<p>The following snippets dump</p>\n\n<pre><code>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.0-b69 mixed mode):\n\n\"DestroyJavaVM\" #16 prio=5 os_prio=0 tid=0x00000000020b9000 nid=0x3684 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"pool-2-thread-1\" #15 prio=5 os_prio=0 tid=0x000000001bc27000 nid=0x3f0 waiting on condition [0x000000001ce6f000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  &lt;0x0000000080be30a0&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\n    at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:744)\n\n\"derby.rawStoreDaemon\" #14 daemon prio=5 os_prio=0 tid=0x000000001b059000 nid=0xa3c in Object.wait() [0x000000001ba1f000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on &lt;0x00000000805f6190&gt; (a org.apache.derby.impl.services.daemon.BasicDaemon)\n    at org.apache.derby.impl.services.daemon.BasicDaemon.rest(Unknown Source)\n    - locked &lt;0x00000000805f6190&gt; (a org.apache.derby.impl.services.daemon.BasicDaemon)\n    at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:744)\n\n\"Timer-0\" #13 daemon prio=5 os_prio=0 tid=0x000000001b08e800 nid=0x2160 in Object.wait() [0x000000001b6af000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on &lt;0x0000000080608118&gt; (a java.util.TaskQueue)\n    at java.lang.Object.wait(Object.java:502)\n    at java.util.TimerThread.mainLoop(Timer.java:526)\n    - locked &lt;0x0000000080608118&gt; (a java.util.TaskQueue)\n    at java.util.TimerThread.run(Timer.java:505)\n</code></pre>\n\n<p>I thought the cause is thread named \"pool-2-thread-1\" that created by  buildSessionFactory method.</p>\n\n<p>As a result of comparing the two buildSessionFactory method, I noticed that ServiceRegistry resources has not released. </p>\n\n<p>Program successfully terminated by releasing it.</p>\n\n<p>The following code, I adding.</p>\n\n<p>Util.java</p>\n\n<pre><code>configuration.setSessionFactoryObserver(\n        new SessionFactoryObserver() {\n            @Override\n            public void sessionFactoryCreated(SessionFactory factory) {}\n            @Override\n            public void sessionFactoryClosed(SessionFactory factory) {\n                ((StandardServiceRegistryImpl) serviceRegistry).destroy();\n            }\n        }\n);\n</code></pre>\n\n<p>thanks.</p>\n    "},{"t":"Do Hibernate table classes need to be Serializable?","l":"http://stackoverflow.com/questions/2726300/do-hibernate-table-classes-need-to-be-serializable","q":"\n\n<p>I have inherited a Websphere Portal project that uses Hibernate 3.0 to connect to a SQL Server database.</p>\n\n<p>There are about 130 Hibernate table classes in this project. They all implement Serializable. None of them declare a serialVersionUID field, so the Eclipse IDE shows a warning for all of these classes.</p>\n\n<p>Is there any actual need for these classes to implement Serializable?<br>\nIf so, is there any tool to add a generated serialVersionUID field to a large number of classes at once (just to make the warnings go away) ?</p>\n    ","a":"\n<blockquote>\n  <p>Is there any actual need for these classes to implement Serializable?</p>\n</blockquote>\n\n<p>The JPA spec (JSR 220) summarizes it pretty well (the same applies to Hibernate):</p>\n\n<blockquote>\n  <h2>2.1 Requirements on the Entity Class</h2>\n  \n  <p>(...)</p>\n  \n  <p>If an entity instance is to be passed by value as a detached object (e.g., through a remote interface), the entity class must implement the <code>Serializable</code> interface.</p>\n</blockquote>\n\n<p>So, strictly speaking, this is not a requirement unless you need  detached entities to be sent over the wire to another tier, to be migrated to another cluster node, to be stored in the HTTP session, etc. </p>\n\n<blockquote>\n  <p>If so, is there any tool to add a generated serialVersionUID field to a large number of classes at once</p>\n</blockquote>\n\n<p>I think that you could batch this with the <a href=\"http://serialver.sourceforge.net/serialver.html\" rel=\"nofollow noreferrer\">Serial version (Ant) Tasks</a>.</p>\n    "},{"t":"How can I execute a native SQL script in JPA/Hibernate?","l":"http://stackoverflow.com/questions/14358425/how-can-i-execute-a-native-sql-script-in-jpa-hibernate","q":"\n\n<p>I have a SQL script with database dump. How can I execute it using Hibernate's <code>EntityManager</code>?</p>\n\n<p>I tried it this way:</p>\n\n<pre><code>EntityManager manager = getEntityManager(); \nQuery q = manager.createNativeQuery(sqlScript);\nq.executeUpdate();\n</code></pre>\n\n<p>but it works only when <code>sqlScript</code> contains a single SQL query, while I need to run multiple inserts and other complex stuff.</p>\n\n<p>RDBMS:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production</p>\n    ","a":"\n<p>Wrap your query with begin end block. Like </p>\n\n<pre><code>EntityManager manager = getEntityManager(); \nQuery q = manager.createNativeQuery(\"BEGIN \" + sqlScript + \" END;\");\nq.executeUpdate();\n</code></pre>\n    "},{"t":"Differences among save, update, saveOrUpdate, merge methods in Session?","l":"http://stackoverflow.com/questions/7475363/differences-among-save-update-saveorupdate-merge-methods-in-session","q":"\n\n<p>I am new to Hibernate and went through the Hibernate tutorial last week. I have a few doubts about methods save, update, saveOrUpdate and merge in the Session class. These are:</p>\n\n<ul>\n<li><p><strong>save method:</strong> it is used to insert the newly created object in the datastore. (Basically identifier value will be 0 for this). Like I create a new customer and call save operation, it will persist it in the datastore and generate the identifier. </p>\n\n<p>Is this correct? And if we call save on already persistent object not sure what will happen?</p></li>\n<li><p><strong>update method:</strong> it is used to update the already persistent object in the datastore.(Basically identifier value will be some non zero value for this). Like I load a new customer and call update operation after update of some field value, it will update it in datastore.</p>\n\n<p>As per my understanding it should fail with some exception because as per API update is for detached object. Is this correct? If yes, what should we call to update the object in the same session (I mean if object is not detached). Another point is: what will happen if  we call update on newly created object?</p></li>\n<li><p><strong>saveOrUpdate method:</strong> it will call either of above based on unsaved-value checks (which it must be doing based on identifier zero or non zero value, right?) so if we have persistent customer object and we update last name of his and create a new account also, then saveOrUpdate will take care of it.</p>\n\n<p>Did I understand that correctly?</p></li>\n<li><p><strong>Merge method:</strong>  it will act like update but here if a persistent object with the same identifier is already in the session it will update the detached object values in the persistent object and save it. </p>\n\n<p>But if there is no persistent instance currently associated with the session, this will load the persistent object from the datastore and then update the value of detached object in loaded persistent object and then update it.</p>\n\n<p>Did I also get that?</p></li>\n</ul>\n    ","a":"\n<p>You are exactly right in all of your assessments.  You get it.</p>\n\n<p>For your first question, if i recall correctly, <code>save</code> specifically does an insert.  So calling save again will result in another row in the db.</p>\n\n<p>For your second question, <code>update</code> updates an object in the session.  So if the object is in the session it will update.  If the object is not in the session, you should call merge.  I believe calling <code>update</code> for a detached instance will result in an exception.</p>\n    "},{"t":"Debugging Spring configuration","l":"http://stackoverflow.com/questions/7840088/debugging-spring-configuration","q":"\n\n<p>I am working on a Java application that uses Spring and Hibernate and runs on a Websphere. \nI have run into a problem, where I expect Spring to load a Dao into my object, but for some reason that doesn't happen.  (Another Dao that is specified in much the same way is loaded fine.)</p>\n\n<p>The question is - how can I debug how Spring decides what to load in? \nCan I turn on logging for Spring, and where?</p>\n    ","a":"\n<p>Yes, Spring framework logging is very detailed, You did not mention in your post, if you are already using a logging framework or not. If you are using log4j then just add spring appenders to the log4j config (i.e to log4j.xml or log4j.properties), If you are using log4j xml config you can do some thing like this</p>\n\n<pre><code>&lt;category name=\"org.springframework.beans\"&gt;\n    &lt;priority value=\"debug\" /&gt;\n&lt;/category&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;category name=\"org.springframework\"&gt;\n    &lt;priority value=\"debug\" /&gt;\n&lt;/category&gt;\n</code></pre>\n\n<p>I would advise you to test this problem in isolation using JUnit test, You can do this by using <a href=\"http://blog.springsource.com/2011/06/21/spring-3-1-m2-testing-with-configuration-classes-and-profiles/\" rel=\"nofollow\">spring testing module</a> in conjunction with <a href=\"http://www.junit.org/\" rel=\"nofollow\">Junit</a>. If you use spring test module it will do the bulk of the work for you it loads context file based on your context config and starts container so you can just focus on testing your business logic. I have a small example here</p>\n\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations={\"classpath:springContext.xml\"})\n@Transactional\npublic class SpringDAOTest \n{\n    @Autowired\n    private SpringDAO dao;\n\n    @Autowired\n    private ApplicationContext appContext;\n\n    @Test\n    public void checkConfig()\n    {\n        AnySpringBean bean =  appContext.getBean(AnySpringBean.class);\n        Assert.assertNotNull(bean);\n    }\n}\n</code></pre>\n\n<h2>UPDATE</h2>\n\n<p>I am not advising you to change the way you load logging but try this in your dev environment, Add this snippet to your web.xml file</p>\n\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;/WEB-INF/log4j.xml&lt;/param-value&gt;\n&lt;/context-param&gt;\n\n&lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n</code></pre>\n\n<p><strong>UPDATE lo4j config file</strong></p>\n\n<hr>\n\n<p>I tested this on my local tomcat it generated a lot of logging on application start up. I also want to make a correction use <strong>debug</strong> not <strong>info</strong> as @Rayan Stewart mentioned.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"&gt;\n\n&lt;log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" debug=\"false\"&gt;\n    &lt;appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\"&gt;\n        &lt;param name=\"Threshold\" value=\"debug\" /&gt;\n        &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\n            &lt;param name=\"ConversionPattern\"\n                value=\"%d{HH:mm:ss} %p [%t]:%c{3}.%M()%L - %m%n\" /&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n\n    &lt;appender name=\"springAppender\" class=\"org.apache.log4j.RollingFileAppender\"&gt; \n        &lt;param name=\"file\" value=\"C:/tomcatLogs/webApp/spring-details.log\" /&gt; \n        &lt;param name=\"append\" value=\"true\" /&gt; \n        &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\n            &lt;param name=\"ConversionPattern\"\n                value=\"%d{MM/dd/yyyy HH:mm:ss}  [%t]:%c{5}.%M()%L %m%n\" /&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n\n    &lt;category name=\"org.springframework\"&gt;\n        &lt;priority value=\"debug\" /&gt;\n    &lt;/category&gt;\n\n    &lt;category name=\"org.springframework.beans\"&gt;\n        &lt;priority value=\"debug\" /&gt;\n    &lt;/category&gt;\n\n    &lt;category name=\"org.springframework.security\"&gt;\n        &lt;priority value=\"debug\" /&gt;\n    &lt;/category&gt;\n\n    &lt;category\n        name=\"org.springframework.beans.CachedIntrospectionResults\"&gt;\n        &lt;priority value=\"debug\" /&gt;\n    &lt;/category&gt;\n\n    &lt;category name=\"org.springframework.jdbc.core\"&gt;\n        &lt;priority value=\"debug\" /&gt;\n    &lt;/category&gt;\n\n    &lt;category name=\"org.springframework.transaction.support.TransactionSynchronizationManager\"&gt;\n        &lt;priority value=\"debug\" /&gt;\n    &lt;/category&gt;\n\n    &lt;root&gt;\n        &lt;priority value=\"debug\" /&gt;\n        &lt;appender-ref ref=\"springAppender\" /&gt;\n        &lt;!-- &lt;appender-ref ref=\"STDOUT\"/&gt;  --&gt;\n    &lt;/root&gt;\n&lt;/log4j:configuration&gt;\n</code></pre>\n    "},{"t":"Multiple database with Spring+Hibernate+JPA","l":"http://stackoverflow.com/questions/1902997/multiple-database-with-springhibernatejpa","q":"\n\n<p>I'm trying to configure Spring+Hibernate+JPA for work with two databases (MySQL and MSSQL)</p>\n\n<p>my datasource-context.xml: </p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n xsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd\"\n xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n xmlns:util=\"http://www.springframework.org/schema/util\"&gt;\n\n &lt;!--\n Data Source config \n  --&gt;\n &lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n  destroy-method=\"close\" p:driverClassName=\"${local.jdbc.driver}\" p:url=\"${local.jdbc.url}\"\n  p:username=\"${local.jdbc.username}\" p:password=\"${local.jdbc.password}\"&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"dataSourceRemote\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n  destroy-method=\"close\" p:driverClassName=\"${remote.jdbc.driver}\"\n  p:url=\"${remote.jdbc.url}\" p:username=\"${remote.jdbc.username}\"\n  p:password=\"${remote.jdbc.password}\" /&gt;\n\n &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"\n  p:entity-manager-factory-ref=\"entityManagerFactory\" /&gt;\n\n &lt;!-- \n    JPA config   \n    --&gt;\n &lt;tx:annotation-driven transaction-manager=\"transactionManager\" /&gt;\n\n &lt;bean id=\"persistenceUnitManager\"\n  class=\"org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager\"&gt;\n        &lt;property name=\"persistenceXmlLocations\"&gt;\n   &lt;list value-type=\"java.lang.String\"&gt;\n    &lt;value&gt;classpath*:config/persistence.local.xml&lt;/value&gt;\n    &lt;value&gt;classpath*:config/persistence.remote.xml&lt;/value&gt;\n   &lt;/list&gt;\n  &lt;/property&gt;\n\n  &lt;property name=\"dataSources\"&gt;\n   &lt;map&gt;\n    &lt;entry key=\"localDataSource\" value-ref=\"dataSource\" /&gt;\n    &lt;entry key=\"remoteDataSource\" value-ref=\"dataSourceRemote\" /&gt;\n   &lt;/map&gt;\n  &lt;/property&gt;\n  &lt;property name=\"defaultDataSource\" ref=\"dataSource\" /&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"entityManagerFactory\"\n  class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"&gt;\n  &lt;property name=\"jpaVendorAdapter\"&gt;\n   &lt;bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"\n    p:showSql=\"true\" p:generateDdl=\"true\"&gt;\n   &lt;/bean&gt;\n  &lt;/property&gt;\n  &lt;property name=\"persistenceUnitManager\" ref=\"persistenceUnitManager\" /&gt;\n&lt;property name=\"persistenceUnitName\" value=\"localjpa\"/&gt;\n &lt;/bean&gt;\n\n &lt;bean\n  class=\"org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor\" /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>each persistence.xml contains one unit, like this:</p>\n\n<pre><code>&lt;persistence-unit name=\"remote\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n  &lt;properties&gt;\n   &lt;property name=\"hibernate.ejb.naming_strategy\" value=\"org.hibernate.cfg.DefaultNamingStrategy\" /&gt;\n   &lt;property name=\"hibernate.dialect\" value=\"${remote.hibernate.dialect}\" /&gt;\n   &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"${remote.hibernate.hbm2ddl.auto}\" /&gt;\n  &lt;/properties&gt;\n &lt;/persistence-unit&gt;\n</code></pre>\n\n<p>PersistenceUnitManager cause following exception:</p>\n\n<blockquote>\n  <p>Cannot resolve reference to bean\n  'persistenceUnitManager' while setting\n  bean property\n  'persistenceUnitManager'; nested\n  exception is\n  org.springframework.beans.factory.BeanCreationException:\n  Error creating bean with name\n  'persistenceUnitManager' defined in\n  class path resource\n  [config/datasource-context.xml]:\n  Initialization of bean failed; nested\n  exception is\n  org.springframework.beans.TypeMismatchException:\n  Failed to convert property value of\n  type [java.util.ArrayList] to required\n  type [java.lang.String] for property\n  'persistenceXmlLocation'; nested\n  exception is\n  java.lang.IllegalArgumentException:\n  Cannot convert value of type\n  [java.util.ArrayList] to required type\n  [java.lang.String] for property\n  'persistenceXmlLocation': no matching\n  editors or conversion strategy found</p>\n</blockquote>\n\n<p>If left only one  persistence.xml without list, every works fine\nbut I need 2 units...</p>\n\n<p>I also try to find alternative solution for work with two databases in Spring+Hibernate context, so I would appreciate any solution</p>\n\n<p>new error after changing to <strong>persistenceXmlLocations</strong></p>\n\n<p><strong>No single default persistence unit defined in {classpath:config/persistence.local.xml, classpath:config/persistence.remote.xml}</strong></p>\n\n<p>UPDATE: \nI add persistenceUnitName, it works, but only with one unit, still need help</p>\n\n<p>UPDATE:\nthanks, ChssPly76</p>\n\n<p>I changed config files:\ndatasource-context.xml</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\n        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd\"\n    xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xmlns:util=\"http://www.springframework.org/schema/util\"&gt;\n\n    &lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n        destroy-method=\"close\" p:driverClassName=\"${local.jdbc.driver}\" p:url=\"${local.jdbc.url}\"\n        p:username=\"${local.jdbc.username}\" p:password=\"${local.jdbc.password}\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"dataSourceRemote\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n        destroy-method=\"close\" p:driverClassName=\"${remote.jdbc.driver}\"\n        p:url=\"${remote.jdbc.url}\" p:username=\"${remote.jdbc.username}\"\n        p:password=\"${remote.jdbc.password}\"&gt;\n    &lt;/bean&gt;\n\n    &lt;bean\n        class=\"org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor\"&gt;\n        &lt;property name=\"defaultPersistenceUnitName\" value=\"pu1\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"persistenceUnitManager\"\n        class=\"org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager\"&gt;\n        &lt;property name=\"persistenceXmlLocation\" value=\"${persistence.xml.location}\" /&gt;\n        &lt;property name=\"defaultDataSource\" ref=\"dataSource\" /&gt; &lt;!-- problem --&gt;\n        &lt;property name=\"dataSources\"&gt;\n            &lt;map&gt;\n                &lt;entry key=\"local\" value-ref=\"dataSource\" /&gt;\n                &lt;entry key=\"remote\" value-ref=\"dataSourceRemote\" /&gt;\n            &lt;/map&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"entityManagerFactory\"\n        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"&gt;\n        &lt;property name=\"jpaVendorAdapter\"&gt;\n            &lt;bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"\n                p:showSql=\"true\" p:generateDdl=\"true\"&gt;\n            &lt;/bean&gt;\n        &lt;/property&gt;\n        &lt;property name=\"persistenceUnitManager\" ref=\"persistenceUnitManager\" /&gt;\n        &lt;property name=\"persistenceUnitName\" value=\"pu1\" /&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"entityManagerFactoryRemote\"\n        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"&gt;\n        &lt;property name=\"jpaVendorAdapter\"&gt;\n            &lt;bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"\n                p:showSql=\"true\" p:generateDdl=\"true\"&gt;\n            &lt;/bean&gt;\n        &lt;/property&gt;\n        &lt;property name=\"persistenceUnitManager\" ref=\"persistenceUnitManager\" /&gt;\n        &lt;property name=\"persistenceUnitName\" value=\"pu2\" /&gt;\n        &lt;property name=\"dataSource\" ref=\"dataSourceRemote\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;tx:annotation-driven /&gt;\n\n    &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"\n        p:entity-manager-factory-ref=\"entityManagerFactory\" /&gt;\n\n\n    &lt;bean id=\"transactionManagerRemote\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"\n        p:entity-manager-factory-ref=\"entityManagerFactoryRemote\" /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n\n<p>persistence.xml</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n    version=\"1.0\"&gt;\n\n    &lt;persistence-unit name=\"pu1\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.ejb.naming_strategy\" value=\"org.hibernate.cfg.DefaultNamingStrategy\" /&gt;\n            &lt;property name=\"hibernate.dialect\" value=\"${local.hibernate.dialect}\" /&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"${local.hibernate.hbm2ddl.auto}\" /&gt;                          \n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n\n    &lt;persistence-unit name=\"pu2\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.ejb.naming_strategy\" value=\"org.hibernate.cfg.DefaultNamingStrategy\" /&gt;\n            &lt;property name=\"hibernate.dialect\" value=\"${remote.hibernate.dialect}\" /&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"${remote.hibernate.hbm2ddl.auto}\" /&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n\n&lt;/persistence&gt;\n</code></pre>\n\n<p>Now it builds two entityManagerFactory, but both are for Microsoft SQL Server\n[main] INFO org.hibernate.ejb.Ejb3Configuration - Processing PersistenceUnitInfo [\n    name: pu1\n    ...]\n[main] INFO org.hibernate.cfg.SettingsFactory - RDBMS: Microsoft SQL Server</p>\n\n<p>[main] INFO org.hibernate.ejb.Ejb3Configuration - Processing PersistenceUnitInfo [\n    name: pu2\n    ...]\n[main] INFO org.hibernate.cfg.SettingsFactory - RDBMS: Microsoft SQL Server <strong>(but must MySQL)</strong></p>\n\n<p>I suggest, that  use only dataSource, dataSourceRemote (no substitution) is not worked. That's my last problem </p>\n    ","a":"\n<p>I solved the problem (How to connect multiple database using spring and Hibernate) in this way, I hope it will help :)\n<strong>NOTE:</strong> <strong>I have added the relevant code, kindly make the dao with the help of impl I used in the below mentioned code.</strong></p>\n\n<pre><code>**web.xml**\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n    id=\"WebApp_ID\" version=\"3.0\"&gt;\n    &lt;display-name&gt;MultipleDatabaseConnectivityInSpring&lt;/display-name&gt;\n    &lt;welcome-file-list&gt;\n        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n    &lt;/welcome-file-list&gt;\n     &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n         &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n     &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt; \n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            /WEB-INF/dispatcher-servlet.xml\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;*.htm&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n    &lt;session-config&gt;\n        &lt;session-timeout&gt;30&lt;/session-timeout&gt;\n    &lt;/session-config&gt;\n&lt;/web-app&gt;\n\n\n**persistence.xml**\n\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence version=\"1.0\"\n    xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"&gt;\n    &lt;persistence-unit name=\"localPersistenceUnitOne\"\n        transaction-type=\"RESOURCE_LOCAL\"&gt;\n        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n        &lt;class&gt;in.india.entities.CustomerDetails&lt;/class&gt;\n        &lt;exclude-unlisted-classes /&gt;\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQLDialect\" /&gt;\n            &lt;property name=\"hibernate.connection.driver_class\" value=\"org.postgresql.Driver\" /&gt;\n            &lt;property name=\"hibernate.jdbc.batch_size\" value=\"0\" /&gt;\n            &lt;property name=\"hibernate.show_sql\" value=\"false\" /&gt;\n            &lt;property name=\"hibernate.connection.url\" value=\"jdbc:postgresql://localhost:5432/shankar?sslmode=require\" /&gt;\n            &lt;property name=\"hibernate.connection.username\" value=\"username\" /&gt;\n            &lt;property name=\"hibernate.connection.password\" value=\"password\" /&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"update\" /&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n    &lt;persistence-unit name=\"localPersistenceUnitTwo\"\n        transaction-type=\"RESOURCE_LOCAL\"&gt;\n        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n        &lt;class&gt;in.india.entities.CompanyDetails&lt;/class&gt;\n        &lt;exclude-unlisted-classes /&gt;\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQLDialect\" /&gt;\n            &lt;property name=\"hibernate.connection.driver_class\" value=\"org.postgresql.Driver\" /&gt;\n            &lt;property name=\"hibernate.jdbc.batch_size\" value=\"0\" /&gt;\n            &lt;property name=\"hibernate.show_sql\" value=\"false\" /&gt;\n            &lt;property name=\"hibernate.connection.url\" value=\"jdbc:postgresql://localhost:5432/shankarTwo?sslmode=require\" /&gt;\n            &lt;property name=\"hibernate.connection.username\" value=\"username\" /&gt;\n            &lt;property name=\"hibernate.connection.password\" value=\"password\" /&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"update\" /&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n\n\n**dispatcher-servlet**\n\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:task=\"http://www.springframework.org/schema/task\" xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:util=\"http://www.springframework.org/schema/util\"\n    default-autowire=\"byName\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd \n      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  \n      http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \n      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd\n      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/mvc \n      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\"&gt;\n    &lt;!-- Configure messageSource --&gt;\n\n    &lt;mvc:annotation-driven /&gt;\n    &lt;context:component-scan base-package=\"in.india.*\" /&gt;\n    &lt;bean id=\"messageResource\"\n        class=\"org.springframework.context.support.ResourceBundleMessageSource\"\n        autowire=\"byName\"&gt;\n        &lt;property name=\"basename\" value=\"messageResource\"&gt;&lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;bean\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;property name=\"prefix\"&gt;\n            &lt;value&gt;/WEB-INF/jsp/&lt;/value&gt;\n        &lt;/property&gt;\n        &lt;property name=\"suffix\"&gt;\n            &lt;value&gt;.jsp&lt;/value&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n\n\n    &lt;bean id=\"entityManagerFactoryOne\"\n        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"\n        autowire=\"constructor\"&gt;\n        &lt;property name=\"persistenceUnitName\" value=\"localPersistenceUnitOne\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"messageSource\"\n        class=\"org.springframework.context.support.ResourceBundleMessageSource\"\n        autowire=\"byName\"&gt;\n        &lt;property name=\"basename\" value=\"messageResource\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"entityManagerFactoryTwo\"\n        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"\n        autowire=\"constructor\"&gt;\n        &lt;property name=\"persistenceUnitName\" value=\"localPersistenceUnitTwo\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"manager1\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"&gt;\n        &lt;property name=\"entityManagerFactory\" ref=\"entityManagerFactoryOne\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=\"manager2\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"&gt;\n        &lt;property name=\"entityManagerFactory\" ref=\"entityManagerFactoryTwo\" /&gt;\n    &lt;/bean&gt;\n\n    &lt;tx:annotation-driven transaction-manager=\"manager1\" /&gt;\n    &lt;tx:annotation-driven transaction-manager=\"manager2\" /&gt;\n\n    &lt;!-- declare dependies here --&gt;\n\n    &lt;bean class=\"in.india.service.dao.impl.CustomerServiceImpl\" /&gt;\n    &lt;bean class=\"in.india.service.dao.impl.CompanyServiceImpl\" /&gt;\n\n    &lt;!-- Configure MVC annotations --&gt;\n    &lt;bean\n        class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\" /&gt;\n    &lt;bean\n        class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" /&gt;\n    &lt;bean\n        class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\" /&gt;\n&lt;/beans&gt;\n\n\n\n**java class to persist into one database**\n\n\npackage in.india.service.dao.impl;\n\nimport in.india.entities.CompanyDetails;\nimport in.india.service.CompanyService;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\nimport org.springframework.transaction.annotation.Transactional;\n\npublic class CompanyServiceImpl implements CompanyService {\n\n    @PersistenceContext(unitName = \"entityManagerFactoryTwo\")\n    EntityManager entityManager;\n\n    @Transactional(\"manager2\")\n    @Override\n    public boolean companyService(CompanyDetails companyDetails) {\n\n        boolean flag = false;\n        try \n        {\n            entityManager.persist(companyDetails);\n            flag = true;\n        } \n        catch (Exception e)\n        {\n            flag = false;\n        }\n\n        return flag;\n    }\n\n}\n\n\n**java class to persist in another database** \n\npackage in.india.service.dao.impl;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\nimport org.springframework.transaction.annotation.Transactional;\n\nimport in.india.entities.CustomerDetails;\nimport in.india.service.CustomerService;\n\npublic class CustomerServiceImpl implements CustomerService {\n\n    @PersistenceContext(unitName = \"localPersistenceUnitOne\")\n    EntityManager entityManager;\n\n    @Override\n    @Transactional(value = \"manager1\")\n    public boolean customerService(CustomerDetails companyData) {\n\n        boolean flag = false;\n        entityManager.persist(companyData);\n        return flag;\n    }\n}\n\n\n**customer.jsp**\n\n&lt;%@page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;center&gt;\n        &lt;h1&gt;SpringWithMultipleDatabase's&lt;/h1&gt;\n    &lt;/center&gt;\n    &lt;form:form method=\"GET\" action=\"addCustomer.htm\"  modelAttribute=\"customerBean\" &gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"firstName\"&gt;First Name&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"firstName\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"lastName\"&gt;Last Name&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"lastName\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"emailId\"&gt;Email Id&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"emailId\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"profession\"&gt;Profession&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"profession\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"address\"&gt;Address&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"address\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;form:label path=\"age\"&gt;Age&lt;/form:label&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;form:input path=\"age\" /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;input type=\"submit\" value=\"Submit\"/&gt;&lt;/td&gt;\n             &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/form:form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n**company.jsp**\n\n\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;ScheduleJobs&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;center&gt;&lt;h1&gt;SpringWithMultipleDatabase's&lt;/h1&gt;&lt;/center&gt;\n &lt;form:form method=\"GET\" action=\"addCompany.htm\"  modelAttribute=\"companyBean\" &gt;\n &lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;form:label path=\"companyName\"&gt;Company Name&lt;/form:label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"companyName\" /&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;form:label path=\"companyStrength\"&gt;Company Strength&lt;/form:label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"companyStrength\" /&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;form:label path=\"companyLocation\"&gt;Company Location&lt;/form:label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"companyLocation\" /&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n     &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"submit\" value=\"Submit\"/&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form:form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n**index.jsp**\n\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;Home&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;center&gt;&lt;h1&gt;Multiple Database Connectivity In Spring sdfsdsd&lt;/h1&gt;&lt;/center&gt;\n\n&lt;a href='customerRequest.htm'&gt;Click here to go on Customer page&lt;/a&gt;\n&lt;br&gt;\n&lt;a href='companyRequest.htm'&gt;Click here to go on Company page&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n**success.jsp**\n\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;ScheduleJobs&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;center&gt;&lt;h1&gt;SpringWithMultipleDatabase&lt;/h1&gt;&lt;/center&gt;\n    &lt;b&gt;Successfully Saved&lt;/b&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n**CompanyController**\n\npackage in.india.controller;\n\nimport in.india.bean.CompanyBean;\nimport in.india.entities.CompanyDetails;\nimport in.india.service.CompanyService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class CompanyController {\n\n    @Autowired\n    CompanyService companyService;\n\n    @RequestMapping(value = \"/companyRequest.htm\", method = RequestMethod.GET)\n    public ModelAndView addStudent(ModelMap model) {\n        CompanyBean companyBean = new CompanyBean();\n        model.addAttribute(companyBean);\n        return new ModelAndView(\"company\");\n    }\n\n    @RequestMapping(value = \"/addCompany.htm\", method = RequestMethod.GET)\n    public ModelAndView companyController(@ModelAttribute(\"companyBean\") CompanyBean companyBean, Model model) {\n        CompanyDetails  companyDetails = new CompanyDetails();\n        companyDetails.setCompanyLocation(companyBean.getCompanyLocation());\n        companyDetails.setCompanyName(companyBean.getCompanyName());\n        companyDetails.setCompanyStrength(companyBean.getCompanyStrength());\n        companyService.companyService(companyDetails);\n        return new ModelAndView(\"success\");\n\n    }\n}\n\n**CustomerController**\n\n\npackage in.india.controller;\n\nimport in.india.bean.CustomerBean;\nimport in.india.entities.CustomerDetails;\nimport in.india.service.CustomerService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class CustomerController {\n\n    @Autowired\n    CustomerService customerService;\n\n    @RequestMapping(value = \"/customerRequest.htm\", method = RequestMethod.GET)\n    public ModelAndView addStudent(ModelMap model) {\n        CustomerBean customerBean = new CustomerBean();\n        model.addAttribute(customerBean);\n        return new ModelAndView(\"customer\");\n    }\n\n    @RequestMapping(value = \"/addCustomer.htm\", method = RequestMethod.GET)\n    public ModelAndView customerController(@ModelAttribute(\"customerBean\") CustomerBean customer, Model model) {\n        CustomerDetails customerDetails = new CustomerDetails();\n        customerDetails.setAddress(customer.getAddress());\n        customerDetails.setAge(customer.getAge());\n        customerDetails.setEmailId(customer.getEmailId());\n        customerDetails.setFirstName(customer.getFirstName());\n        customerDetails.setLastName(customer.getLastName());\n        customerDetails.setProfession(customer.getProfession());\n        customerService.customerService(customerDetails);\n        return new ModelAndView(\"success\");\n\n    }\n}\n\n\n**CompanyDetails Entity**\n\n\npackage in.india.entities;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.SequenceGenerator;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"company_details\")\npublic class CompanyDetails {\n\n    @Id\n    @SequenceGenerator(name = \"company_details_seq\", sequenceName = \"company_details_seq\", initialValue = 1, allocationSize = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"company_details_seq\")\n    @Column(name = \"company_details_id\")\n    private Long companyDetailsId;\n    @Column(name = \"company_name\")\n    private String companyName;\n    @Column(name = \"company_strength\")\n    private Long companyStrength;\n    @Column(name = \"company_location\")\n    private String companyLocation;\n\n    public Long getCompanyDetailsId() {\n        return companyDetailsId;\n    }\n\n    public void setCompanyDetailsId(Long companyDetailsId) {\n        this.companyDetailsId = companyDetailsId;\n    }\n\n    public String getCompanyName() {\n        return companyName;\n    }\n\n    public void setCompanyName(String companyName) {\n        this.companyName = companyName;\n    }\n\n    public Long getCompanyStrength() {\n        return companyStrength;\n    }\n\n    public void setCompanyStrength(Long companyStrength) {\n        this.companyStrength = companyStrength;\n    }\n\n    public String getCompanyLocation() {\n        return companyLocation;\n    }\n\n    public void setCompanyLocation(String companyLocation) {\n        this.companyLocation = companyLocation;\n    }\n}\n\n\n**CustomerDetails Entity**\n\npackage in.india.entities;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.SequenceGenerator;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"customer_details\")\npublic class CustomerDetails {\n\n    @Id\n    @SequenceGenerator(name = \"customer_details_seq\", sequenceName = \"customer_details_seq\", initialValue = 1, allocationSize = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customer_details_seq\")\n    @Column(name = \"customer_details_id\")\n    private Long customerDetailsId;\n    @Column(name = \"first_name \")\n    private String firstName;\n    @Column(name = \"last_name \")\n    private String lastName;\n    @Column(name = \"email_id\")\n    private String emailId;\n    @Column(name = \"profession\")\n    private String profession;\n    @Column(name = \"address\")\n    private String address;\n    @Column(name = \"age\")\n    private int age;\n    public Long getCustomerDetailsId() {\n        return customerDetailsId;\n    }\n\n    public void setCustomerDetailsId(Long customerDetailsId) {\n        this.customerDetailsId = customerDetailsId;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmailId() {\n        return emailId;\n    }\n\n    public void setEmailId(String emailId) {\n        this.emailId = emailId;\n    }\n\n    public String getProfession() {\n        return profession;\n    }\n\n    public void setProfession(String profession) {\n        this.profession = profession;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n</code></pre>\n    "},{"t":"How can you replicate Hibernate's saveOrUpdate in JPA?","l":"http://stackoverflow.com/questions/1139496/how-can-you-replicate-hibernates-saveorupdate-in-jpa","q":"\n\n<p>In JPA, is there any way you can replicate Hibernate's <a href=\"https://www.hibernate.org/hib_docs/v3/api/org/hibernate/Session.html#saveOrUpdate%28java.lang.Object%29\" rel=\"nofollow noreferrer\">saveOrUpdate behavior</a>,</p>\n\n<pre><code>saveOrUpdate\n\npublic void saveOrUpdate(Object object)\n                  throws HibernateException\n\n    Either save(Object) or update(Object) the given instance, depending upon resolution of the unsaved-value checks (see the manual for discussion of unsaved-value checking).\n\n    This operation cascades to associated instances if the association is mapped with cascade=\"save-update\".\n\n    Parameters:\n        object - a transient or detached instance containing new or updated state \n    Throws:\n        HibernateException\n    See Also:\n        save(Object), update(Object)\n</code></pre>\n\n<p>which essentially checks to see if the object already exists in the database and either updates that object as need be or saves a new instance of the object.</p>\n\n<p>JPA transcationless reads are nice, but I am really missing this method from Hibernate. How do experienced JPA developers handle this?</p>\n    ","a":"\n<p>Try using the <code>EntityManager.merge</code> method - this is very similar.</p>\n\n<p>There is an excellent description of the differences in Xebia's blogpost: \"<a href=\"http://blog.xebia.com/2009/03/23/jpa-implementation-patterns-saving-detached-entities/\" rel=\"nofollow noreferrer\">JPA Implementation Patterns: Saving (Detached) Entities</a>.\"</p>\n    "},{"t":"JPA @OneToMany -> Parent - Child Reference (Foreign Key)","l":"http://stackoverflow.com/questions/9533676/jpa-onetomany-parent-child-reference-foreign-key","q":"\n\n<p>i have a Question about referencing ParentEntities from Child Entites ir\nIf i have something like this:</p>\n\n<p>Parent.java:</p>\n\n<pre><code>@Entity(name =\"Parent\")\npublic class Parent {\n    @Id\n    @Generate.....\n    @Column\n    private int id;\n\n    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"parent\")\n    private Set&lt;Child&gt; children;\n\n    simple ... getter and setter ...\n}\n</code></pre>\n\n<p>And the Child.java:</p>\n\n<pre><code>@Entity(name =\"Child\")\npublic class Child{\n    @Id\n    @Generate....\n    @Column\n    private int id;\n\n    @ManyToOne\n    private Parent parent;\n\n    ... simple getter an setter\n}\n</code></pre>\n\n<p>Following Tables are going to be created:</p>\n\n<pre><code>Parent:\n     int id\n\nChild:\n     int id\n     int parent_id (foreign key: parent.id)\n</code></pre>\n\n<p>Ok, so far, everthings fine. But when it comes to using this Reference from Java, i would think, you can do something like this.</p>\n\n<pre><code> @Transactional\n public void test() {\n    Parent parent = new Parent();\n\n    Child child = new Child();\n    Set&lt;Child&gt; children = new HashSet&lt;Child&gt;();\n    children.add(child);\n\n    parent.setChildren(children);\n    entityManager.persist(parent);\n  }\n</code></pre>\n\n<p>which leads to this in Database:</p>\n\n<pre><code>Parent:\n     id\n     100\n\nChild\n     id     paren_id\n     101    100\n</code></pre>\n\n<p>But thats not the case, you have to explicity set the Parent to the Child (which, i would think, the framework could probably do by itself).</p>\n\n<p>So whats really in the database is this:</p>\n\n<pre><code>Parent:\n     id\n     100\n\nChild\n     id     paren_id\n     101    (null)\n</code></pre>\n\n<p>cause i haven't set the Parent to the Child. So my Question:</p>\n\n<p><strong>Do I really have to do sth. like this?</strong></p>\n\n<p>Parent.java:</p>\n\n<pre><code>...\nsetChildren(Set&lt;Child&gt; children) {\n   for (Child child : children) {\n     child.setParent.(this);\n   }\n\n   this.children = children;\n}\n...\n</code></pre>\n\n<hr>\n\n<p>Edit:</p>\n\n<p>According to the fast Replies i was able to solve this Problem by using the @JoinColumn on the Reference-Owning Entity. If we take the Example from above, i did sth. like this:</p>\n\n<p>Parent.java:</p>\n\n<pre><code>  @Entity(name =\"Parent\")\n    public class Parent {\n        @Id\n        @Generate.....\n        @Column\n        private int id;\n\n        @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n        @JoinColumn(name= \"paren_id\")\n        private Set&lt;Child&gt; children;\n\n        simple ... getter and setter ...\n    }\n</code></pre>\n\n<p>And the Child.java:</p>\n\n<pre><code>@Entity(name =\"Child\")\npublic class Child{\n    @Id\n    @Generate....\n    @Column\n    private int id;\n\n    ... simple getter an setter\n}\n</code></pre>\n\n<p>Now if we do this: </p>\n\n<pre><code> @Transactional\n public void test() {\n    Parent parent = new Parent();\n\n    Child child = new Child();\n    Set&lt;Child&gt; children = new HashSet&lt;Child&gt;();\n    children.add(child);\n\n    parent.setChildren(children);\n    entityManager.persist(parent);\n  }\n</code></pre>\n\n<p>The Reference is correctly set by the Parent:</p>\n\n<pre><code>Parent:\n     id\n     100\n\nChild\n     id     paren_id\n     101    100\n</code></pre>\n\n<p>Thanks for the Answers.</p>\n    ","a":"\n<blockquote>\n  <p>Do I really have to do sth. like this?</p>\n</blockquote>\n\n<p>That is one strategy, yes. </p>\n\n<p>On bi-directional relationships there is an \"owning\" and a \"non-owning\" side of the relationship. Because the owning side in your case is on <code>Child</code>, you need to set the relationship there for it to be persisted. The owning side is usually determined by where you specify <code>@JoinColumn</code>, but it doesn't look like you're using that annotation, so it's likely being inferred from the fact that you used <code>mappedBy</code> in the <code>Parent</code> annotation.</p>\n\n<p>You can <a href=\"http://blog.xebia.com/2009/03/16/jpa-implementation-patterns-bidirectional-assocations/\">read a lot more about this here</a>.</p>\n    "},{"t":"JPA 2.0: Adding entity classes to PersistenceUnit *from different jar* automatically","l":"http://stackoverflow.com/questions/6380728/jpa-2-0-adding-entity-classes-to-persistenceunit-from-different-jar-automatic","q":"\n\n<p>I have a maven-built CDI-based Java SE app, which has a <em>core</em> module, and other modules.<br>\nCore has the <code>persistence.xml</code> and some entities.\nModules have additional entities.</p>\n\n<p>How can I add the entities to the spotlight of the persistence unit?</p>\n\n<p>I have read Hibernate manual, <a href=\"http://docs.jboss.org/hibernate/stable/entitymanager/reference/en/html/configuration.html#setup-configuration-packaging\">http://docs.jboss.org/hibernate/stable/entitymanager/reference/en/html/configuration.html#setup-configuration-packaging</a></p>\n\n<p>I have also seen these SO questions</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1211777/how-can-i-merge-extend-persistence-units-from-different-jars\">How can I merge / extend persistence units from different JARs?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3774663/define-jpa-entity-classes-outside-of-persistence-xml\">define jpa entity classes outside of persistence.xml</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2838634/programmatically-loading-entity-classes-with-jpa-2-0\">Programmatically loading Entity classes with JPA 2.0?</a></li>\n</ul>\n\n<p>I am looking for a solution where Hibernate would scan for all loaded classes, or, would pick up some config file form the other jars (like e.g. CDI does with <code>beans.xml</code>).  </p>\n\n<p>My app does not use Spring.\nI don't insist on portability - I'll stick with Hibernate.</p>\n\n<ul>\n<li><strong>Is there some such solution?</strong></li>\n<li><strong>Is there's a way to create a PU from <code>persistence.xml</code> and add classes to it programmatically?</strong></li>\n<li><strong>Can I add @Entity classes to <code>EntityManagerFactory</code> after it was created?</strong></li>\n</ul>\n\n<hr>\n\n<p><em>Update:</em> I found in <code>org.​hibernate.​ejb.​Ejb3Configuration</code>:  </p>\n\n<pre><code>public Ejb3Configuration configure(String persistenceUnitName, Map integration)  \n</code></pre>\n\n<p><a href=\"http://docs.jboss.org/hibernate/entitymanager/3.6/javadocs/\">http://docs.jboss.org/hibernate/entitymanager/3.6/javadocs/</a></p>\n    ","a":"\n<p>There are several way to solve it:</p>\n\n<ol>\n<li><p>As described in <a href=\"http://stackoverflow.com/questions/1780341/do-i-need-class-elements-in-persistence-xml\">Do I need &lt;class&gt; elements in persistence.xml?</a>, you can set <code>hibernate.archive.autodetection</code> property and Hibernate should be able to look up all annotated classes from classpath.  However, that's not JPA spec compliant.</p></li>\n<li><p>If you are using Spring, from Spring 3.1.2 (or probably even a bit earlier), in <code>LocalContainerEntityManagerFactoryBean</code>, you can define <code>packageToScan</code> which will ask <code>LocalContainerEntityManagerFactoryBean</code> to scan in classpath to find all annotated classes.  Again, not JPA spec compliant. </p></li>\n<li><p>I was using Maven as build tools.  Years before, I have written a little plugin which will generate persistence.xml during build process.  The plugin will scan from build classpath to find out all annotated classes, and list them in the generated persistence.xml.  This is most tedious but the result is JPA spec compliant.  One drawback (which does not apply to most people I believe) is the lookup happens in build-time, not runtime.  That means if you are having an application for which entities JARs are provided only at deploy/runtime but not build time, this approach is not going to work.</p></li>\n</ol>\n    "},{"t":"SingletonEhCacheRegionFactory vs EhCacheRegionFactory","l":"http://stackoverflow.com/questions/6615790/singletonehcacheregionfactory-vs-ehcacheregionfactory","q":"\n\n<p><a href=\"http://opensource.atlassian.com/projects/hibernate/browse/HHH-3450\">This link</a> (from the creator of Ehcache) says you should use SingletonEhCacheRegionFactory when you only have one Hibernate SessionFactory, and EhCacheRegionFactory when you have multiple.</p>\n\n<p>But wouldn't EhCacheRegionFactory be a de-facto singleton when you only have one SessionFactory?</p>\n\n<p>So, what's <em>better</em> about SingletonEhCacheRegionFactory? Why not use EhCacheRegionFactory all the time since it can be used for one SessionFactory or multiple?</p>\n\n<p><em>FYI: I'm using Ehcache 2.4.2 and Hibernate 3.6.5</em></p>\n    ","a":"\n<p>The non-singleton <em>EhCacheRegionFactory</em> allows you to configure EHCache separately for each Hibernate instance using <em>net.sf.ehcache.configurationResourceName</em> property. The <em>SingletonEhCacheRegionFactory</em> shares the same EHCache configuration among all Hibernate session factories. </p>\n\n<p><a href=\"http://www.ehcache.org/documentation/2.8/integrations/hibernate#optional\" rel=\"nofollow\">EHCache documentation recommends</a> to use the non-singleton version. </p>\n\n<p><strong>Edit:</strong> This information applies to EHCache 2.8. Not sure how many things have changed in the latest version. </p>\n    "},{"t":"Java Frameworks War: Spring and Hibernate","l":"http://stackoverflow.com/questions/100243/java-frameworks-war-spring-and-hibernate","q":"\n\n<p>My developers are waging a civil war. In one camp, they've embraced Hibernate and Spring. In the other camp, they've denounced frameworks - they're considering Hibernate though.</p>\n\n<p>The question is: Are there any nasty surprises, weaknesses or pit-falls that newbie Hibernate-Spring converts are likely to stumble on?</p>\n\n<hr>\n\n<p>PS: We've a DAO library that's not very sophisticated. I doubt that it has Hibernate's richness, but it's reaching some sort of maturity (i.e. it's not been changed in the last few projects it's included).</p>\n    ","a":"\n<p>I've used Hibernate a number of times in the past. Each time I've run into edge cases where determining the syntax devolved into a scavenger hunt through the documentation, Google, and old versions. It is a powerful tool but poorly documented (last I looked).</p>\n\n<p>As for Spring, just about every job I've interviewed for or looked at in the past few years involved Spring, it's really become the de-facto standard for Java/web. Using it will help your developers be more marketable in the future, and it'll help you as you'll have a large pool of people who'll understand your application. </p>\n\n<p>Writing your own framework is tempting, educational, and fun. Not so great on results. </p>\n    "}]